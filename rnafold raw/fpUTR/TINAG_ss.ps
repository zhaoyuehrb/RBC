%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUAUACUCAUUCAAGUAAAGGAUCAGUUUCAGGGUUCAGGCUGAAGUGUCUUAAUGACUAGAAUUCAGGUUCCAAGGAGAAGCCCACAAGGCUAAGGGUAUUGGAUAUAACGGAAAGUGGAAGCUAUACCUGACUUCCAGAGA\
) } def
/len { sequence length } bind def

/coor [
[106.23058319 197.10853577]
[96.67958832 209.13658142]
[82.38826752 214.76275635]
[67.20092010 212.47363281]
[55.20286942 202.88497925]
[49.62152481 188.57609558]
[51.95824051 173.39599609]
[61.58445740 161.42805481]
[75.91076660 155.89158630]
[78.14640045 141.05912781]
[80.38203430 126.22666931]
[71.28243256 114.30201721]
[56.38593674 112.54293060]
[41.48944092 110.78385162]
[26.59294319 109.02477264]
[11.98062515 115.09030914]
[0.24854325 105.91384125]
[-14.64795399 104.15476227]
[-29.54445076 102.39567566]
[-43.88837051 114.68659210]
[-62.35367584 112.69791412]
[-73.36833191 98.14081573]
[-88.32638550 97.01986694]
[-103.28444672 95.89891815]
[-118.24250031 94.77796173]
[-127.10587311 97.26979065]
[-133.50712585 93.46987152]
[-148.43780518 92.02952576]
[-157.35240173 94.33138275]
[-163.67098999 90.39553070]
[-178.56748962 88.63645172]
[-193.46397400 86.87736511]
[-208.36047363 85.11828613]
[-223.25697327 83.35920715]
[-238.15347290 81.60012054]
[-248.58412170 93.08843231]
[-263.78216553 96.21871948]
[-277.90368652 89.78732300]
[-285.51861572 76.26725006]
[-283.69891357 60.85725021]
[-273.14422607 49.48277283]
[-257.91311646 46.51753998]
[-243.86221313 53.10174561]
[-236.39439392 66.70362854]
[-221.49789429 68.46270752]
[-206.60139465 70.22178650]
[-191.70489502 71.98087311]
[-176.80839539 73.73995209]
[-161.91191101 75.49903107]
[-146.99746704 77.09883881]
[-132.06677246 78.53918457]
[-117.12155151 79.81990814]
[-102.16349030 80.94085693]
[-87.20543671 82.06180573]
[-72.24737549 83.18276215]
[-65.35976410 73.98403168]
[-54.76434326 69.23294067]
[-43.07452774 70.22927856]
[-33.23619843 76.83908844]
[-27.78536987 87.49918365]
[-12.88887215 89.25826263]
[2.00762486 91.01734161]
[15.55444527 84.82598877]
[28.35202408 94.12827301]
[43.24852371 95.88735199]
[58.14501953 97.64643860]
[73.04151917 99.40551758]
[75.30899811 91.61472321]
[79.68876648 85.10577393]
[85.63144684 80.40573120]
[92.47232056 77.83444214]
[99.50345612 77.48557281]
[106.04614258 79.23130035]
[111.51629639 82.74893951]
[121.71888733 71.75315857]
[131.92147827 60.75738525]
[142.12406921 49.76160431]
[152.32666016 38.76582718]
[145.75828552 22.96583176]
[146.71818542 5.93700171]
[154.96713257 -8.92847157]
[168.81874084 -18.69023514]
[185.48388672 -21.44133568]
[201.63241577 -16.68058968]
[211.35583496 -28.10227966]
[221.07925415 -39.52396774]
[230.80268860 -50.94565964]
[230.95675659 -66.98796844]
[243.68344116 -76.75582886]
[259.21990967 -72.75616455]
[265.64794922 -58.05717850]
[258.03646851 -43.93467712]
[242.22438049 -41.22223282]
[232.50094604 -29.80054283]
[222.77752686 -18.37885284]
[213.05409241 -6.95716429]
[219.29208374 4.52278233]
[221.24078369 17.47433662]
[218.64440918 30.34444809]
[211.79348755 41.58226776]
[201.49256897 49.82603073]
[188.96577454 54.06804276]
[175.71133423 53.77784348]
[163.32243347 48.96841812]
[153.11984253 59.96419907]
[142.91725159 70.95997620]
[132.71466064 81.95575714]
[122.51207733 92.95153046]
[136.73735046 88.19321442]
[147.73965454 77.99765778]
[162.17532349 73.92195129]
[176.88516235 76.85803986]
[188.64997864 86.16336823]
[194.89508057 99.80150604]
[194.25373840 114.78778839]
[186.86631775 127.84252167]
[174.34953308 136.10873413]
[159.44264221 137.77737427]
[145.40794373 132.48327637]
[135.31770325 121.38649750]
[121.55065918 115.43098450]
[130.77716064 127.25772095]
[140.00366211 139.08445740]
[149.23014832 150.91119385]
[158.45664978 162.73793030]
[167.68315125 174.56466675]
[177.03550720 186.29214478]
[192.67301941 186.33399963]
[204.59175110 196.45713806]
[207.16403198 211.88171387]
[199.17530823 225.32470703]
[184.39759827 230.43875122]
[169.80850220 224.80915833]
[162.29653931 211.09403992]
[165.40863037 195.76927185]
[158.69706726 192.54898071]
[155.85641479 183.79116821]
[146.62991333 171.96443176]
[137.40341187 160.13769531]
[128.17691040 148.31095886]
[118.95041656 136.48422241]
[109.72391510 124.65747833]
[95.21449280 128.46229553]
[92.97885895 143.29476929]
[90.74322510 158.12722778]
[102.80115509 167.64047241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 145]
[10 144]
[11 143]
[12 67]
[13 66]
[14 65]
[15 64]
[17 62]
[18 61]
[19 60]
[22 55]
[23 54]
[24 53]
[25 52]
[27 51]
[28 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[74 108]
[75 107]
[76 106]
[77 105]
[78 104]
[84 96]
[85 95]
[86 94]
[87 93]
[121 142]
[122 141]
[123 140]
[124 139]
[125 138]
[126 137]
[127 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
