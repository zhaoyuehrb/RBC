%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCGGACAGGAAGGCGUGUGCAAGGCGGGGUCCGGCCCGCGCAGGUCGGGUAAGCGCGUCUAGGGCGCUGCGCGGCGCAGCGAAA\
) } def
/len { sequence length } bind def

/coor [
[178.28558350 197.86022949]
[182.13880920 184.28553772]
[171.16038513 174.06427002]
[160.18197632 163.84298706]
[149.20355225 153.62171936]
[138.22514343 143.40045166]
[127.06602478 133.37677002]
[114.02734375 140.61787415]
[99.29891205 142.96611023]
[84.65493011 140.13859558]
[71.85943604 132.47595215]
[62.45378113 120.90119934]
[57.57099533 106.80867004]
[57.79925156 91.89596558]
[63.11106110 77.95947266]
[51.77481842 68.13656616]
[40.43857193 58.31365204]
[24.94224548 55.12392426]
[20.39046860 40.94187164]
[9.05422592 31.11895943]
[-2.28201818 21.29604912]
[-13.61826134 11.47313786]
[-24.95450592 1.65022707]
[-38.00038910 1.76073086]
[-47.26229095 -6.84442043]
[-48.05637741 -19.05719376]
[-59.03479385 -29.27846336]
[-70.01321411 -39.49973297]
[-85.38581848 -43.24052811]
[-89.42850494 -57.57600784]
[-105.52286530 -60.72302246]
[-110.58798981 -76.32034302]
[-99.41331482 -88.32279205]
[-83.49438477 -84.38327026]
[-79.20723724 -68.55442810]
[-64.61988068 -65.54472351]
[-59.79194260 -50.47814941]
[-48.81352615 -40.25688171]
[-37.83510971 -30.03561211]
[-20.62424088 -27.15053558]
[-15.13159466 -9.68601704]
[-3.79535079 0.13689442]
[7.54089308 9.95980549]
[18.87713623 19.78271675]
[30.21338081 29.60562706]
[44.89886475 32.09275818]
[50.26148605 46.97740936]
[61.59772873 56.80031967]
[72.93397522 66.62322998]
[85.97265625 59.38211823]
[100.70108795 57.03388596]
[115.34506989 59.86139679]
[128.14056396 67.52405548]
[137.54621887 79.09880066]
[142.42900085 93.19132996]
[142.20074463 108.10403442]
[136.88894653 122.04052734]
[145.63333130 125.40126038]
[148.44641113 132.42204285]
[159.42481995 142.64331055]
[170.40324402 152.86457825]
[181.38165283 163.08584595]
[192.36007690 173.30711365]
[208.00308228 168.29612732]
[223.96171570 171.77262878]
[235.96531677 182.71086121]
[240.84951782 198.10113525]
[237.39006042 213.77755737]
[248.72630310 223.60047913]
[260.06256104 233.42338562]
[271.39880371 243.24629211]
[282.73504639 253.06919861]
[294.07128906 262.89212036]
[305.40753174 272.71502686]
[321.33746338 278.51794434]
[320.17117310 295.43173218]
[303.59552002 298.99322510]
[295.58462524 284.05126953]
[284.24838257 274.22836304]
[272.91213989 264.40545654]
[261.57589722 254.58253479]
[250.23963928 244.75962830]
[238.90339661 234.93672180]
[227.56715393 225.11380005]
[214.86369324 230.44789124]
[201.03749084 229.73594666]
[188.83219910 223.06134033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 57]
[15 49]
[16 48]
[17 47]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[26 39]
[27 38]
[28 37]
[30 35]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
