%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGUCCAGCGCCCGCCGCCCGCCACCCCGGACCCCGGUGUCUGGCUUCCCCCGAGCCGGGACCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[90.25613403 252.96624756]
[88.24217224 237.73995972]
[94.12599945 223.55278015]
[106.32489014 214.22097778]
[104.31139374 199.35673523]
[102.29789734 184.49247742]
[100.28439331 169.62823486]
[90.90869904 158.05474854]
[96.72353363 143.34086609]
[92.56880951 136.92872620]
[94.96869659 127.76628113]
[93.62410736 112.82666779]
[85.73371887 101.28398895]
[91.43627930 88.51792145]
[90.09169006 73.57830811]
[75.62769318 68.98825073]
[64.05417633 59.23649979]
[57.11468887 45.83287811]
[55.83904266 30.83419991]
[60.39060211 16.52866936]
[70.04610443 5.08678722]
[83.31040192 -1.76796818]
[81.96581268 -16.70758247]
[80.62122345 -31.64719772]
[79.27663422 -46.58681107]
[68.31076813 -61.18757629]
[75.90814972 -76.84899902]
[73.56163025 -91.66432190]
[70.88327789 -106.42326355]
[68.20492554 -121.18220520]
[65.52657318 -135.94114685]
[56.74921417 -150.44612122]
[68.25751495 -162.89584351]
[83.40650177 -155.28370667]
[80.28551483 -138.61950684]
[82.96386719 -123.86056519]
[85.64222717 -109.10161591]
[88.32057953 -94.34267426]
[92.75879669 -88.12338257]
[90.77239990 -78.86249542]
[100.32601166 -71.11392212]
[101.95816803 -58.51305389]
[94.21624756 -47.93140030]
[95.56083679 -32.99178696]
[96.90542603 -18.05217171]
[98.25001526 -3.11255789]
[112.52511597 1.26360679]
[124.06847382 10.79755783]
[131.10124207 24.06047821]
[132.52421570 39.04589844]
[128.08955383 53.47321320]
[118.44326782 65.13478088]
[105.03130341 72.23371887]
[106.37589264 87.17333221]
[114.26628113 98.71601105]
[108.56372070 111.48207855]
[109.90830994 126.42169189]
[111.58777618 141.32737732]
[121.10749817 153.96405029]
[115.14864349 167.61474609]
[117.16213989 182.47898865]
[119.17564392 197.34323120]
[121.18914032 212.20747375]
[135.43103027 217.95764160]
[144.87712097 230.06823730]
[146.98649597 245.28158569]
[141.19172668 259.50537109]
[129.05157471 268.91348267]
[113.83168030 270.97515869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[9 58]
[11 57]
[12 56]
[14 54]
[15 53]
[22 46]
[23 45]
[24 44]
[25 43]
[27 40]
[28 38]
[29 37]
[30 36]
[31 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
