%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCGGCGCCUGGAGAAGGCUGUGCGGGCGGGGACGGCUGCAGCCCUUGCCGGAGAGGGCGGGCCGGGGUCAGCUGCGGCGGGCGGGCCGGCGCGGGGAGCUGUGGGCGGCAGCUGCGUCUCCUGCCACCGCCCUCCCUCCGCCACG\
) } def
/len { sequence length } bind def

/coor [
[-89.43373871 311.14404297]
[-97.29835510 323.91699219]
[-97.94534302 339.72497559]
[-111.20688629 346.50588989]
[-119.07149506 359.27880859]
[-126.93610382 372.05175781]
[-134.80070496 384.82467651]
[-126.93501282 397.95440674]
[-126.08353424 413.23620605]
[-132.44195557 427.15844727]
[-144.54914856 436.52194214]
[-159.62295532 439.17495728]
[-174.19955444 434.50790405]
[-184.92933655 423.59320068]
[-189.34666443 408.93899536]
[-186.43649292 393.91271973]
[-176.86753845 381.96725464]
[-162.83866882 375.84762573]
[-147.57365417 376.96008301]
[-139.70904541 364.18713379]
[-131.84443665 351.41421509]
[-123.97982025 338.64126587]
[-123.89535522 323.74691772]
[-110.07128906 316.05236816]
[-102.20668030 303.27944946]
[-103.53957367 282.72122192]
[-84.69944000 272.60610962]
[-77.66361237 259.35858154]
[-70.62778473 246.11103821]
[-63.59196091 232.86351013]
[-56.55613708 219.61596680]
[-49.52030945 206.36843872]
[-42.48448563 193.12091064]
[-46.30054855 187.12966919]
[-47.98546982 180.22908020]
[-62.41796875 176.14215088]
[-76.85047150 172.05522156]
[-91.28296661 167.96830750]
[-102.23986053 178.73129272]
[-117.11431122 182.55833435]
[-131.90516663 178.41996765]
[-142.63377380 167.42938232]
[-146.41416931 152.54301453]
[-142.22944641 137.76519775]
[-131.20530701 127.07110596]
[-116.30715179 123.33738708]
[-101.54252625 127.56840515]
[-90.88304138 138.62602234]
[-87.19603729 153.53579712]
[-72.76354218 157.62272644]
[-58.33104324 161.70965576]
[-43.89854431 165.79658508]
[-35.62712097 158.45640564]
[-24.62258148 156.02987671]
[-13.62851715 159.33140564]
[-1.76059723 150.15794373]
[10.10732269 140.98446655]
[21.97524261 131.81100464]
[33.84316254 122.63754272]
[45.71108246 113.46408081]
[57.57900238 104.29061127]
[69.44692230 95.11714935]
[75.33393097 81.32065582]
[73.74489594 66.40505981]
[72.15586090 51.48946762]
[70.56682587 36.57387161]
[61.41113281 23.67101097]
[67.75662231 10.19569969]
[66.16758728 -4.71989536]
[56.07760620 -17.64755249]
[62.47828293 -32.74600601]
[78.78515625 -34.48326492]
[88.22310638 -21.07217979]
[81.08318329 -6.30893135]
[82.67221832 8.60666370]
[91.71424866 20.44266129]
[85.48242188 34.98483658]
[87.07145691 49.90043259]
[88.66049194 64.81602478]
[90.24952698 79.73162079]
[103.79256439 80.66107941]
[112.55270386 88.65047455]
[126.98520660 84.56355286]
[141.41770935 80.47662354]
[155.85020447 76.38969421]
[170.28269958 72.30276489]
[184.71519470 68.21584320]
[191.70765686 57.32376862]
[203.86494446 54.24266434]
[214.49684143 60.10269547]
[229.01283264 56.32302475]
[243.52882385 52.54335403]
[258.04483032 48.76368332]
[272.56082153 44.98401260]
[287.07681274 41.20434189]
[301.59280396 37.42467117]
[307.05120850 25.06594658]
[318.47586060 18.22651863]
[331.55834961 19.22332191]
[341.51437378 27.46609879]
[356.10729980 23.99538612]
[370.70025635 20.52467537]
[385.29321289 17.05396271]
[396.83453369 5.40366459]
[412.62371826 9.83472824]
[416.41815186 25.78885651]
[404.31448364 36.85380936]
[388.76391602 31.64691162]
[374.17095947 35.11762238]
[359.57803345 38.58833694]
[344.98507690 42.05904770]
[336.82058716 56.72632217]
[320.25686646 61.06838226]
[305.37246704 51.94066238]
[290.85647583 55.72033310]
[276.34048462 59.50000381]
[261.82449341 63.27967453]
[247.30850220 67.05934906]
[232.79251099 70.83901978]
[218.27651978 74.61869049]
[206.50608826 87.59513092]
[188.80212402 82.64833832]
[174.36962891 86.73526764]
[159.93713379 90.82219696]
[145.50462341 94.90911865]
[131.07212830 98.99604797]
[116.63963318 103.08297729]
[101.30545807 119.66400146]
[78.62039185 106.98506927]
[66.75247192 116.15853119]
[54.88454819 125.33200073]
[43.01662827 134.50546265]
[31.14870834 143.67892456]
[19.28078842 152.85238647]
[7.41286802 162.02586365]
[-4.45505190 171.19932556]
[-8.99964523 192.85333252]
[-29.23695183 200.15672302]
[-36.27277756 213.40426636]
[-43.30860138 226.65179443]
[-50.34442520 239.89933777]
[-57.38025284 253.14686584]
[-64.41607666 266.39440918]
[-71.45190430 279.64193726]
[-67.46579742 288.32281494]
[-67.95638275 297.72406006]
[-72.68352509 305.70489502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[4 22]
[5 21]
[6 20]
[7 19]
[27 144]
[28 143]
[29 142]
[30 141]
[31 140]
[32 139]
[33 138]
[35 52]
[36 51]
[37 50]
[38 49]
[55 136]
[56 135]
[57 134]
[58 133]
[59 132]
[60 131]
[61 130]
[62 129]
[63 80]
[64 79]
[65 78]
[66 77]
[68 75]
[69 74]
[82 127]
[83 126]
[84 125]
[85 124]
[86 123]
[87 122]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
