%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUUUUCUCUCAGUUGAAGCGCGCACAUUGAGUCGGCUUUUCUACUGCUUCGGCUAGGGUACCUUGUGACC\
) } def
/len { sequence length } bind def

/coor [
[101.83651733 384.41000366]
[91.17443085 373.72250366]
[83.79218292 360.55416870]
[80.23758698 345.88217163]
[80.77440643 330.79528809]
[85.36281586 316.41302490]
[93.66232300 303.80270386]
[105.05705261 293.90002441]
[118.70143127 287.43988037]
[116.16641235 272.65563965]
[113.63140106 257.87139893]
[111.09638977 243.08715820]
[106.73090363 236.84152222]
[108.78148651 227.62269592]
[106.87621307 212.74420166]
[104.97094727 197.86569214]
[103.06568146 182.98718262]
[101.16041565 168.10867310]
[99.25514984 153.23016357]
[97.34987640 138.35166931]
[95.44461060 123.47315216]
[93.53934479 108.59465027]
[88.84356689 94.34860992]
[81.52814484 81.25339508]
[66.58747864 76.84723663]
[59.35514069 63.46262360]
[63.64781189 49.24613190]
[56.33238983 36.15092087]
[41.35018539 30.41392326]
[36.63182831 15.08040905]
[45.79683304 1.91294038]
[61.81459427 1.01247144]
[72.39765930 13.06976509]
[69.42760468 28.83549690]
[76.74302673 41.93070984]
[91.09945679 45.72918320]
[98.70488739 58.90538025]
[94.62335205 73.93797302]
[101.93878174 87.03318787]
[106.97274780 72.90310669]
[118.66233063 63.50344467]
[133.54356384 61.61960602]
[147.20669556 67.80982971]
[155.60293579 80.23976135]
[156.24423218 95.22604370]
[148.94053650 108.32780457]
[135.85615540 115.66259003]
[120.86839294 115.05690002]
[108.41785431 106.68938446]
[110.32312012 121.56788635]
[112.22838593 136.44639587]
[114.13365173 151.32490540]
[116.03891754 166.20341492]
[117.94419098 181.08190918]
[119.84945679 195.96041870]
[121.75472260 210.83892822]
[123.65998840 225.71743774]
[125.88063049 240.55215454]
[128.41564941 255.33638000]
[130.95065308 270.12063599]
[133.48567200 284.90487671]
[148.50277710 286.45050049]
[162.54557800 291.99148560]
[174.57200623 301.11657715]
[183.68960571 313.14871216]
[189.22181702 327.19494629]
[190.75808716 342.21301270]
[188.18443298 357.08847046]
[181.69181824 370.71743774]
[171.76205444 382.08856201]
[159.13198853 390.35803223]
[144.73886108 394.91217041]
[129.65072632 395.41308594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 61]
[10 60]
[11 59]
[12 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 39]
[24 38]
[27 35]
[28 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
