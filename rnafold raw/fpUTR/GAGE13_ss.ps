%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACGUGAAGAACGCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[93.93146515 288.85833740]
[98.53009796 274.13229370]
[110.37486267 264.24771118]
[108.41696930 249.37602234]
[106.45907593 234.50434875]
[104.50118256 219.63267517]
[100.42800903 213.28930664]
[102.73078156 204.24333191]
[101.26052856 189.31555176]
[92.31298828 177.40795898]
[98.66037750 162.91584778]
[97.19012451 147.98808289]
[95.71986389 133.06030273]
[81.15364075 127.49760437]
[70.71041107 115.91927338]
[66.67483521 100.85829926]
[69.92977142 85.60955811]
[79.76314545 73.50900269]
[73.57254028 59.84604263]
[67.38192749 46.18308640]
[61.19132614 32.52013016]
[55.00072098 18.85717010]
[48.81011581 5.19421339]
[42.39678955 -8.36562538]
[35.76245880 -21.81871605]
[29.12812805 -35.27180862]
[22.39571953 -41.73765564]
[22.50493431 -49.27537155]
[16.31432915 -62.93833160]
[9.90100288 -76.49816895]
[3.26667285 -89.95126343]
[-3.36765742 -103.40435028]
[-10.00198746 -116.85744476]
[-16.63631821 -130.31053162]
[-32.14799881 -140.06394958]
[-30.54579353 -157.45547485]
[-37.61674500 -170.68429565]
[-44.68769455 -183.91311646]
[-58.89203644 -192.10877991]
[-58.62597656 -208.50576782]
[-44.16321945 -216.23626709]
[-30.38180923 -207.34780884]
[-31.45887756 -190.98406982]
[-24.38792610 -177.75524902]
[-17.31697464 -164.52642822]
[-5.73158312 -160.64492798]
[0.22396435 -149.51657104]
[-3.18322706 -136.94487000]
[3.45110345 -123.49177551]
[10.08543396 -110.03868103]
[16.71976471 -96.58559418]
[23.35409355 -83.13249969]
[29.25011444 -78.43505096]
[29.97728729 -69.12893677]
[36.16789246 -55.46597672]
[42.58121872 -41.90613937]
[49.21554947 -28.45304680]
[55.84988022 -14.99995613]
[61.74589920 -10.30250454]
[62.47307205 -0.99639189]
[68.66368103 12.66656590]
[74.85428619 26.32952309]
[81.04489136 39.99248123]
[87.23549652 53.65543747]
[93.42610168 67.31839752]
[107.00260162 67.40756226]
[119.41760254 72.90276337]
[128.61184692 82.89252472]
[133.06030273 95.71986389]
[147.98808289 97.19012451]
[162.91584778 98.66037750]
[177.62179565 91.40316772]
[191.10757446 100.73406219]
[189.50018311 117.05424500]
[174.45315552 123.57490540]
[161.44558716 113.58815002]
[146.51782227 112.11789703]
[131.59005737 110.64763641]
[123.57226562 123.57226562]
[110.64763641 131.59005737]
[112.11789703 146.51782227]
[113.58815002 161.44558716]
[122.64084625 174.42092896]
[116.18829346 187.84530640]
[117.65855408 202.77307129]
[119.37285614 217.67478943]
[121.33074951 232.54646301]
[123.28864288 247.41813660]
[125.24653625 262.28979492]
[139.24601746 268.77194214]
[147.49932861 281.80596924]
[147.37287903 297.23281860]
[138.90699768 310.12982178]
[124.80313873 316.38159180]
[109.56177521 313.99319458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[6 86]
[8 85]
[9 84]
[11 82]
[12 81]
[13 80]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[24 58]
[25 57]
[26 56]
[28 55]
[29 54]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[36 45]
[37 44]
[38 43]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
