%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUGGAGGGCCAGGAACAAACAGGCUUCAAAGCCAAGGGCUUGGCUGGCACACAGGGGGCUUGGUCCUUCACCUCUGUCCCCUCUCCCUACGGACACAUAUAAGACCCUGGUCACACCUGGGAGAGGAGGAGAGGAGAGCAUAGCACCUGCAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[57.60094070 135.63514709]
[56.71495819 120.66133881]
[65.18025970 108.27833557]
[79.45551300 103.66825867]
[64.49137115 104.70475006]
[49.52722168 105.74124146]
[34.56307602 106.77773285]
[19.59893036 107.81422424]
[4.63478327 108.85071564]
[-10.32936287 109.88720703]
[-25.29351044 110.92369843]
[-40.25765610 111.96018982]
[-55.22180176 112.99668121]
[-70.18595123 114.03317261]
[-85.15009308 115.06966400]
[-95.50379944 126.70747375]
[-110.69434357 127.54544830]
[-121.72540283 117.60305023]
[-126.72560120 132.85777283]
[-137.16351318 145.00375366]
[-151.42399597 152.20672607]
[-167.31762695 153.39385986]
[-182.41685486 148.41337585]
[-194.42680359 138.05329895]
[-201.53401184 123.91684723]
[-216.47476196 125.24878693]
[-231.41551208 126.58072662]
[-234.96803284 129.28334045]
[-238.81216431 130.55279541]
[-242.45101929 130.47726440]
[-245.46995544 129.30038452]
[-247.58097839 127.37988281]
[-262.58023071 127.52806854]
[-277.57949829 127.67625427]
[-292.57876587 127.82444000]
[-307.57803345 127.97262573]
[-322.57730103 128.12081909]
[-336.41485596 136.92164612]
[-350.82824707 129.09953308]
[-350.99026489 112.70117950]
[-336.73422241 104.59581757]
[-322.72549438 113.12154388]
[-307.72622681 112.97335815]
[-292.72695923 112.82517242]
[-277.72769165 112.67698669]
[-262.72842407 112.52880096]
[-247.72915649 112.38061523]
[-232.74745178 111.63997650]
[-217.80670166 110.30803680]
[-202.86595154 108.97609711]
[-199.16989136 95.40998077]
[-191.04080200 83.90084076]
[-179.44187927 75.84780884]
[-165.75961304 72.23841858]
[-151.63807678 73.52754211]
[-138.78137207 79.58015442]
[-128.74800110 89.68516541]
[-122.76189423 102.63890839]
[-113.20691681 91.27061462]
[-98.04590607 90.00629425]
[-86.18658447 100.10551453]
[-71.22244263 99.06902313]
[-56.25829315 98.03253174]
[-41.29414749 96.99604034]
[-26.33000183 95.95954895]
[-11.36585522 94.92305756]
[3.59829187 93.88656616]
[18.56243896 92.85007477]
[33.52658463 91.81358337]
[48.49073029 90.77709198]
[63.45487976 89.74060059]
[78.41902161 88.70410919]
[110.09298706 74.10624695]
[122.61624908 65.84986115]
[135.13951111 57.59347534]
[147.66278076 49.33708954]
[151.00267029 43.53165054]
[156.03115845 40.74260330]
[160.84791565 41.01333237]
[173.68757629 33.25814438]
[186.52725220 25.50295448]
[199.28967285 17.62130165]
[211.97361755 9.61394978]
[224.65754700 1.60659957]
[237.34149170 -6.40075111]
[250.02543640 -14.40810204]
[262.70938110 -22.41545296]
[275.39331055 -30.42280388]
[288.07723999 -38.43015289]
[286.95520020 -55.92246628]
[294.77807617 -71.50904846]
[309.32553101 -80.96555328]
[326.56851196 -81.77975464]
[341.78515625 -73.81831360]
[354.14285278 -82.32051086]
[366.50054932 -90.82270813]
[371.83288574 -98.30618286]
[379.18743896 -99.36798096]
[391.71069336 -107.62436676]
[390.72073364 -122.95132446]
[397.54125977 -136.71270752]
[410.33761597 -145.20678711]
[425.66760254 -146.14869690]
[439.40753174 -139.28506470]
[447.86148071 -126.46217346]
[448.75531006 -111.12931061]
[441.84863281 -97.41094971]
[428.99932861 -88.99725342]
[413.66372681 -88.15146637]
[399.96707153 -95.10110474]
[387.44381714 -86.84471893]
[375.00274658 -78.46501923]
[362.64505005 -69.96281433]
[350.28735352 -61.46061707]
[352.63809204 -48.98832321]
[350.06967163 -36.51118851]
[342.93164062 -25.90365982]
[332.26269531 -18.77306366]
[319.63977051 -16.21609116]
[306.94488525 -18.65026283]
[296.08459473 -25.74621391]
[283.40066528 -17.73886299]
[270.71673584 -9.73151207]
[258.03277588 -1.72416174]
[245.34884644 6.28318882]
[232.66490173 14.29053974]
[219.98095703 22.29788971]
[207.29702759 30.30524063]
[203.29846191 36.56850433]
[194.28244019 38.34262085]
[181.44276428 46.09781265]
[168.60310364 53.85300064]
[155.91915894 61.86035156]
[143.39590454 70.11673737]
[130.87263489 78.37312317]
[118.34937286 86.62950897]
[133.13937378 89.13074493]
[137.42802429 103.50458527]
[126.42660522 113.70108795]
[112.41866302 108.33380890]
[119.00311279 121.81138611]
[129.53991699 124.76870728]
[136.54292297 132.89002991]
[137.86265564 143.31025696]
[133.30058289 152.52610779]
[139.34742737 166.25329590]
[152.88899231 175.50306702]
[151.37960815 191.83259583]
[136.37199402 198.44348145]
[123.30471039 188.53500366]
[125.62024689 172.30015564]
[119.57339478 158.57296753]
[103.17733765 148.38182068]
[105.52553558 128.39582825]
[98.94108582 114.91825867]
[102.08641815 129.58477783]
[95.59581757 143.10780334]
[82.18548584 149.82815552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[18 58]
[25 50]
[26 49]
[27 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[73 136]
[74 135]
[75 134]
[76 133]
[79 132]
[80 131]
[81 130]
[82 128]
[83 127]
[84 126]
[85 125]
[86 124]
[87 123]
[88 122]
[89 121]
[94 114]
[95 113]
[96 112]
[98 111]
[99 110]
[140 155]
[141 154]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
