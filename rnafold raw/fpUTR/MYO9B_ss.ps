%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCGGAGCGGCUCGAGCAGCGGCGGGCUGGCAGGCGGUCGUCCGGCCGGGGACCCGGCCCGGGACCGGCGGCGCGCGGCGGCCGAGGCCAGCUCCAGGACACGCGCGCCCCGAGCCUGGGAGGCAUGCUGAAGCCAGGCGGCCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[291.51242065 254.75617981]
[281.18151855 243.88087463]
[270.85061646 233.00555420]
[260.51971436 222.13024902]
[250.18882751 211.25492859]
[239.85792542 200.37962341]
[228.36724854 190.73780823]
[215.86322021 182.45233154]
[203.35917664 174.16685486]
[190.85514832 165.88137817]
[178.35110474 157.59590149]
[165.76266479 149.43923950]
[153.09115601 141.41224670]
[140.41963196 133.38523865]
[127.66638184 125.48876190]
[114.83272552 117.72362518]
[101.99906921 109.95848846]
[93.96805573 108.79886627]
[88.98395538 101.89987183]
[76.31243896 93.87287140]
[60.51401138 93.02416229]
[53.90290833 79.67715454]
[41.23139191 71.65016174]
[25.43296623 70.80145264]
[18.82186508 57.45444489]
[6.15034819 49.42744827]
[-6.52116776 41.40045166]
[-22.31959343 40.55174255]
[-28.93069649 27.20473671]
[-41.60221100 19.17774010]
[-54.27372742 11.15074348]
[-58.75697708 11.13789749]
[-62.59529877 9.79967690]
[-65.44419861 7.51264715]
[-67.12150574 4.72771168]
[-67.61753845 1.90902686]
[-83.29307556 -0.23293601]
[-88.78689575 -14.07732964]
[-100.75714874 -23.11684990]
[-112.72740936 -32.15636826]
[-124.69766998 -41.19588852]
[-136.66792297 -50.23540878]
[-145.46060181 -52.93441010]
[-148.78862000 -59.58546448]
[-160.57075500 -68.86885071]
[-176.19900513 -71.33220673]
[-181.40742493 -85.28648376]
[-193.18955994 -94.56987000]
[-204.97169495 -103.85325623]
[-216.75382996 -113.13664246]
[-228.53596497 -122.42002106]
[-240.31809998 -131.70341492]
[-256.61682129 -133.51560974]
[-262.94799805 -148.64334106]
[-252.79870605 -161.52447510]
[-236.60963440 -158.90800476]
[-231.03471375 -143.48554993]
[-219.25257874 -134.20216370]
[-207.47044373 -124.91877747]
[-195.68830872 -115.63539124]
[-183.90617371 -106.35200500]
[-172.12403870 -97.06861877]
[-157.33851624 -95.26927185]
[-151.28736877 -80.65098572]
[-139.50523376 -71.36759949]
[-127.62841034 -62.20566559]
[-115.65814972 -53.16614532]
[-103.68788910 -44.12662888]
[-91.71762848 -35.08710861]
[-79.74737549 -26.04758835]
[-64.92802429 -24.55219269]
[-58.57801437 -10.06123161]
[-46.24673080 -1.52077258]
[-33.57521439 6.50622463]
[-20.90369987 14.53322124]
[-6.01162529 14.80778503]
[1.50582933 28.72893524]
[14.17734528 36.75593185]
[26.84886169 44.78293228]
[41.74093628 45.05749512]
[49.25838852 58.97864532]
[61.92990494 67.00564575]
[76.82198334 67.28020477]
[84.33943176 81.20135498]
[97.01094818 89.22835541]
[109.76420593 97.12483978]
[122.59786224 104.88996887]
[135.43151855 112.65510559]
[144.45449829 114.43876648]
[148.44664001 120.71372986]
[161.11814880 128.74072266]
[173.78967285 136.76771545]
[182.77413940 138.73626709]
[186.63658142 145.09187317]
[199.14062500 153.37734985]
[211.64465332 161.66281128]
[224.14869690 169.94828796]
[236.65272522 178.23376465]
[231.60990906 164.10684204]
[233.58412170 149.23731995]
[242.13850403 136.91569519]
[255.38003540 129.86857605]
[270.37850952 129.65544128]
[283.81494141 136.32345581]
[292.71597290 148.39704895]
[295.11190796 163.20446777]
[290.47253418 177.46897888]
[279.82452393 188.03399658]
[265.52413940 192.56159973]
[250.73323059 190.04870605]
[261.06414795 200.92402649]
[271.39505005 211.79934692]
[281.72595215 222.67465210]
[292.05685425 233.54997253]
[302.38775635 244.42527771]
[315.27743530 245.54762268]
[323.65951538 254.87028503]
[323.42434692 267.00317383]
[333.52978516 278.08828735]
[343.63522339 289.17343140]
[353.74066162 300.25857544]
[367.21478271 299.33224487]
[378.58596802 306.25158691]
[383.80035400 318.28646851]
[381.15176392 330.93310547]
[391.02746582 342.22338867]
[400.90316772 353.51367188]
[408.96084595 357.94873047]
[410.86285400 365.13864136]
[420.50466919 376.62930298]
[430.14648438 388.11996460]
[439.78829956 399.61062622]
[455.42483521 399.42968750]
[467.48657227 409.38198853]
[470.27835083 424.76837158]
[462.48193359 438.32379150]
[447.77859497 443.64788818]
[433.11077881 438.22671509]
[425.40417480 424.61999512]
[428.29760742 409.25244141]
[418.65579224 397.76177979]
[409.01397705 386.27111816]
[399.37216187 374.78045654]
[389.61291504 363.38937378]
[379.73718262 352.09909058]
[369.86148071 340.80880737]
[353.07592773 340.42437744]
[341.51242065 327.79043579]
[342.65551758 310.36401367]
[332.55007935 299.27886963]
[322.44467163 288.19372559]
[312.33923340 277.10861206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[5 111]
[6 110]
[7 98]
[8 97]
[9 96]
[10 95]
[11 94]
[12 92]
[13 91]
[14 90]
[15 88]
[16 87]
[17 86]
[19 85]
[20 84]
[22 82]
[23 81]
[25 79]
[26 78]
[27 77]
[29 75]
[30 74]
[31 73]
[36 72]
[38 70]
[39 69]
[40 68]
[41 67]
[42 66]
[44 65]
[45 64]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[118 152]
[119 151]
[120 150]
[121 149]
[125 146]
[126 145]
[127 144]
[129 143]
[130 142]
[131 141]
[132 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
