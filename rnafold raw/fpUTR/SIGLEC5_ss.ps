%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCGUCCACAGCUCUCACUCACCCUCCGGCUUCCUGUCGGGGCUUUCUCAGCCCCACCCCACGUUUGGACAUUUGGAGCAUUUCCUUCCCUGACAGCCGGACCUGGGACUGGGCUGGGGCCCUGGCGGAUGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[19.47125626 245.91224670]
[12.36322498 259.12118530]
[5.25519562 272.33010864]
[6.84536123 292.37106323]
[-9.88690090 301.96548462]
[-16.39515686 315.48001099]
[-9.79913139 329.65838623]
[-13.90986919 344.74600220]
[-26.78640747 353.61892700]
[-42.34883499 352.08764648]
[-53.24905396 340.87518311]
[-54.34030914 325.27572632]
[-45.10734940 312.65484619]
[-29.90969086 308.97174072]
[-23.40143394 295.45721436]
[-27.65899086 286.05752563]
[-25.96037674 275.65573120]
[-18.63358498 267.77536011]
[-7.95373774 265.22207642]
[-0.84570760 252.01315308]
[6.26232243 238.80421448]
[-0.61027199 228.68508911]
[-2.50738573 216.52742004]
[0.99655348 204.65646362]
[9.28808308 195.36950684]
[20.82110977 190.49133301]
[33.40495300 191.01583862]
[41.09844208 178.13909912]
[48.79193115 165.26237488]
[56.48542023 152.38563538]
[64.17890930 139.50891113]
[63.62944412 135.94688416]
[64.83106995 131.94042969]
[67.97357178 128.34043884]
[72.84809113 126.04959869]
[81.39035797 113.71957397]
[89.93262482 101.38954163]
[91.59107971 93.42793274]
[98.80747223 88.88161469]
[107.62424469 76.74636078]
[116.44102478 64.61110687]
[125.25780487 52.47584915]
[134.07458496 40.34059525]
[142.89135742 28.20534134]
[151.70814514 16.07008553]
[160.52491760 3.93483090]
[161.07725525 -1.42276216]
[163.43733215 -5.57791567]
[166.82208252 -8.03535938]
[170.36567688 -8.69318962]
[179.97882080 -20.20786095]
[189.59194946 -31.72253227]
[199.20509338 -43.23720169]
[208.81822205 -54.75187302]
[218.43135071 -66.26654816]
[228.04449463 -77.78121948]
[237.65762329 -89.29589081]
[234.02124023 -104.26528168]
[239.82868958 -118.34104156]
[252.65911865 -126.20513153]
[267.48254395 -125.02037811]
[277.09570312 -136.53504944]
[286.70883179 -148.04971313]
[296.32196045 -159.56439209]
[299.22665405 -175.11666870]
[313.32275391 -179.92803955]
[322.93588257 -191.44271851]
[332.54901123 -202.95738220]
[342.16213989 -214.47206116]
[351.77529907 -225.98672485]
[361.38842773 -237.50140381]
[353.84744263 -251.65768433]
[352.30297852 -267.58410645]
[356.96099854 -282.85205078]
[367.08392334 -295.14471436]
[381.10720825 -302.60842896]
[396.88119507 -304.13244629]
[412.00048828 -299.51388550]
[421.35281372 -311.24136353]
[430.70516968 -322.96884155]
[440.05752563 -334.69628906]
[436.78186035 -349.98693848]
[444.14685059 -363.78155518]
[458.67495728 -369.56671143]
[473.50643921 -364.61087036]
[481.63836670 -351.25399780]
[479.23104858 -335.80282593]
[467.42117310 -325.55291748]
[451.78500366 -325.34396362]
[442.43264771 -313.61648560]
[433.08029175 -301.88900757]
[423.72793579 -290.16152954]
[430.99523926 -278.10723877]
[433.70394897 -264.26434326]
[431.50686646 -250.30078125]
[424.64904785 -237.90617371]
[413.94085693 -228.58738708]
[400.66210938 -223.48536682]
[386.40917969 -223.23542786]
[372.90310669 -227.88825989]
[363.28994751 -216.37359619]
[353.67681885 -204.85891724]
[344.06369019 -193.34425354]
[334.45056152 -181.82957458]
[324.83743286 -170.31491089]
[322.62033081 -155.58624268]
[307.83663940 -149.95124817]
[298.22351074 -138.43658447]
[288.61035156 -126.92191315]
[278.99722290 -115.40724182]
[282.80978394 -101.03356934]
[277.36303711 -87.00513458]
[264.55041504 -78.77768707]
[249.17228699 -79.68275452]
[239.55915833 -68.16808319]
[229.94602966 -56.65341187]
[220.33288574 -45.13874054]
[210.71975708 -33.62406921]
[201.10662842 -22.10939789]
[191.49348450 -10.59472656]
[181.88035583 0.91994482]
[172.66017151 12.75160980]
[163.84339905 24.88686562]
[155.02661133 37.02212143]
[146.20983887 49.15737534]
[137.39306641 61.29262924]
[128.57627869 73.42788696]
[119.75950623 85.56314087]
[110.94272614 97.69839478]
[102.26265717 109.93180847]
[93.72039032 122.26184082]
[85.17812347 134.59187317]
[77.05564117 147.20239258]
[69.36215210 160.07913208]
[61.66866302 172.95585632]
[53.97517395 185.83259583]
[46.28168488 198.70932007]
[53.90830994 215.08328247]
[50.27391434 232.61741638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[5 15]
[6 14]
[27 137]
[28 136]
[29 135]
[30 134]
[31 133]
[35 132]
[36 131]
[37 130]
[39 129]
[40 128]
[41 127]
[42 126]
[43 125]
[44 124]
[45 123]
[46 122]
[50 121]
[51 120]
[52 119]
[53 118]
[54 117]
[55 116]
[56 115]
[57 114]
[61 110]
[62 109]
[63 108]
[64 107]
[66 105]
[67 104]
[68 103]
[69 102]
[70 101]
[71 100]
[78 92]
[79 91]
[80 90]
[81 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
