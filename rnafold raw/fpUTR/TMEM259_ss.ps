%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGCGCCGCAGCCGGACGAGAAAGCGGAAGAUGGCGGCGGCGGCCGGGAGGCCGUGAGGAGAGCGGCGGCUGCGAGGGCGGCCGAUGGCGGCCGGGAGGCGCCCUCGGACACUUGCGGGUCGUUAGGGCGCGACGCUGGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[158.48664856 785.47338867]
[163.74906921 770.97131348]
[176.03038025 761.63464355]
[174.74964905 746.68939209]
[173.46893311 731.74420166]
[172.18821716 716.79895020]
[170.90748596 701.85375977]
[162.11177063 689.83355713]
[168.64253235 675.42315674]
[167.36181641 660.47796631]
[166.08110046 645.53271484]
[162.34979248 639.09124756]
[164.93618774 630.25500488]
[163.97512817 615.28582764]
[163.01408386 600.31665039]
[152.50247192 586.30187988]
[160.71171570 569.85552979]
[159.43098450 554.91027832]
[158.15026855 539.96508789]
[156.86955261 525.01983643]
[155.58882141 510.07464600]
[139.80992126 498.75262451]
[137.29524231 479.19064331]
[150.08358765 463.78063965]
[147.84794617 448.94815063]
[145.61231995 434.11569214]
[136.06452942 422.68377686]
[141.65859985 407.88455200]
[128.37541199 401.19912720]
[121.49454498 387.81564331]
[123.84119415 372.77081299]
[134.72250366 361.86654663]
[132.48687744 347.03408813]
[122.93909454 335.60214233]
[128.53315735 320.80291748]
[126.29753113 305.97045898]
[124.06189728 291.13800049]
[121.82626343 276.30554199]
[112.27848053 264.87359619]
[117.87255096 250.07438660]
[103.94136810 240.71031189]
[101.00148773 223.84193420]
[111.34226990 209.77416992]
[108.79018402 194.99287415]
[106.23809052 180.21156311]
[103.68600464 165.43026733]
[101.13391113 150.64897156]
[98.58182526 135.86766052]
[81.71897888 132.27514648]
[67.96347046 120.97115326]
[60.72515488 104.09007263]
[62.09936142 85.20933533]
[72.29312134 68.59303284]
[64.65473938 55.68353653]
[57.01635742 42.77404022]
[49.37797546 29.86454010]
[41.73959732 16.95504189]
[26.28296661 14.58299446]
[16.00613213 2.79653263]
[15.76150036 -12.83913708]
[25.66457748 -24.94132996]
[41.03943634 -27.79575920]
[54.62653351 -20.05465126]
[60.01046371 -5.37312174]
[54.64909363 9.31666183]
[62.28747559 22.22616005]
[69.92585754 35.13565826]
[77.56423950 48.04515839]
[85.20261383 60.95465469]
[99.95580292 58.24476624]
[102.50788879 43.46346664]
[105.05998230 28.68216515]
[107.61206818 13.90086460]
[110.16416168 -0.88043565]
[112.71624756 -15.66173553]
[106.54785156 -30.85656738]
[116.83488464 -43.62797928]
[132.99493408 -40.83784103]
[138.40391541 -25.35640526]
[127.49755096 -13.10964680]
[124.94545746 1.67165387]
[122.39337158 16.45295334]
[119.84127808 31.23425484]
[117.28919220 46.01555634]
[114.73710632 60.79685593]
[128.15596008 70.35646057]
[136.56405640 84.06304169]
[138.88632202 99.57443237]
[135.05796814 114.37590790]
[125.98704529 126.18763733]
[113.36312103 133.31558228]
[115.91521454 148.09687805]
[118.46730042 162.87817383]
[121.01939392 177.65948486]
[123.57147980 192.44078064]
[126.12357330 207.22207642]
[137.98309326 213.69581604]
[143.84262085 225.65371704]
[141.75358582 238.60768127]
[132.70501709 247.83876038]
[142.41270447 260.33160400]
[136.65872192 274.06991577]
[138.89436340 288.90237427]
[141.12998962 303.73483276]
[143.36563110 318.56729126]
[153.07331848 331.06015015]
[147.31933594 344.79846191]
[149.55497742 359.63092041]
[163.16694641 366.84341431]
[169.84388733 380.52816772]
[167.21356201 395.34521484]
[156.49107361 405.64892578]
[166.19876099 418.14175415]
[160.44477844 431.88006592]
[162.68041992 446.71252441]
[164.91604614 461.54498291]
[174.92106628 465.59130859]
[182.26004028 473.39306641]
[185.63613892 483.47265625]
[184.49446106 493.95950317]
[179.11189270 502.93725586]
[170.53404236 508.79391479]
[171.81477356 523.73913574]
[173.09548950 538.68438721]
[174.37622070 553.62957764]
[175.65693665 568.57482910]
[185.02885437 577.50372314]
[185.75187683 590.02551270]
[177.98326111 599.35559082]
[178.94432068 614.32476807]
[179.90536499 629.29394531]
[181.02632141 644.25201416]
[182.30703735 659.19720459]
[183.58776855 674.14245605]
[192.47508240 687.23156738]
[185.85270691 700.57299805]
[187.13343811 715.51824951]
[188.41415405 730.46343994]
[189.69488525 745.40869141]
[190.97560120 760.35394287]
[204.66636658 767.46490479]
[212.31944275 780.86022949]
[211.49276733 796.26544189]
[202.45011902 808.76477051]
[188.07696533 814.36981201]
[172.95974731 811.29193115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 140]
[4 139]
[5 138]
[6 137]
[7 136]
[9 134]
[10 133]
[11 132]
[13 131]
[14 130]
[15 129]
[17 126]
[18 125]
[19 124]
[20 123]
[21 122]
[24 116]
[25 115]
[26 114]
[28 112]
[32 108]
[33 107]
[35 105]
[36 104]
[37 103]
[38 102]
[40 100]
[43 96]
[44 95]
[45 94]
[46 93]
[47 92]
[48 91]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
