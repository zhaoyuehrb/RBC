%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAGCCACAGCCUCCUCGCCUCCCCAAACUCCCAGCCAAGGCGCGCGGUGGCGUCCUCGCGCCCUCGCUCGCGUCCCCGCCCGCCGCCUGCGCAAGCCAGGC\
) } def
/len { sequence length } bind def

/coor [
[19.97934151 184.31987000]
[17.44547462 200.28671265]
[11.50414085 215.31515503]
[2.44200397 228.68766785]
[-9.30534649 239.76643372]
[-23.17432785 248.02378845]
[-38.50040054 253.06730652]
[-54.54991913 254.65849304]
[-70.55523682 252.72404480]
[-85.75142670 247.35922241]
[-99.41284943 238.82315063]
[-110.88779449 227.52632141]
[-123.40639496 235.78977966]
[-126.33063507 251.32118225]
[-139.42768860 260.16668701]
[-154.92729187 257.07839966]
[-163.63383484 243.88856506]
[-160.38185120 228.42247009]
[-147.10070801 219.85586548]
[-131.66984558 223.27117920]
[-119.15125275 215.00773621]
[-124.42184448 202.13006592]
[-127.17681122 188.48645020]
[-127.31613159 174.56364441]
[-124.83314514 160.85876465]
[-119.81483459 147.86141968]
[-112.43878937 136.03628540]
[-102.96693420 125.80646515]
[-91.73621368 117.53835297]
[-79.14661407 111.52852631]
[-65.64689636 107.99307251]
[-51.71862793 107.05988312]
[-37.85900497 108.76394653]
[-24.56307220 113.04610443]
[-12.30607224 119.75508118]
[-1.52644360 128.65283203]
[7.38985729 139.42295837]
[20.59879112 132.31492615]
[33.80772400 125.20689392]
[37.64553833 113.62707520]
[48.73120499 107.63336182]
[61.30147552 110.96892548]
[74.71713257 104.25923157]
[88.13279724 97.54953003]
[101.34172821 90.44149780]
[114.33210754 82.94149780]
[127.32249451 75.44149780]
[140.31286621 67.94149780]
[153.18960571 60.24801254]
[165.94979858 52.36275482]
[178.71000671 44.47750092]
[191.47021484 36.59224319]
[204.23040771 28.70698547]
[216.99061584 20.82172966]
[229.75080872 12.93647289]
[227.60569763 -3.95657587]
[232.96485901 -20.06240463]
[244.72785950 -32.22372437]
[260.54385376 -38.07809830]
[277.28131104 -36.51679993]
[291.64791870 -27.89443970]
[303.91372681 -36.52869415]
[316.17950439 -45.16295242]
[328.44531250 -53.79720688]
[328.54275513 -69.31397247]
[337.76922607 -81.79002380]
[352.57693481 -86.42806244]
[367.27203369 -81.44466400]
[376.20391846 -68.75605774]
[375.93814087 -53.24125671]
[366.57687378 -40.86602783]
[351.71969604 -36.38889694]
[337.07955933 -41.53141785]
[324.81375122 -32.89715958]
[312.54797363 -24.26290321]
[300.28219604 -15.62864780]
[303.47085571 -2.85687089]
[302.07543945 10.26516628]
[296.24371338 22.13855743]
[286.66537476 31.30890274]
[274.49053955 36.64445877]
[261.19161987 37.47578049]
[248.38531494 33.67963028]
[237.63606262 25.69667435]
[224.87586975 33.58193207]
[212.11566162 41.46718597]
[199.35546875 49.35244370]
[186.59526062 57.23770142]
[173.83506775 65.12295532]
[161.07485962 73.00821686]
[156.97241211 79.30478668]
[147.81286621 80.93188477]
[134.82249451 88.43188477]
[121.83210754 95.93188477]
[108.84172821 103.43188477]
[106.30245972 108.22512054]
[101.20130920 111.17546082]
[94.84249115 110.96519470]
[81.42683411 117.67488861]
[68.01116943 124.38459015]
[58.32624817 139.95611572]
[40.91575241 138.41581726]
[27.70681953 145.52384949]
[14.49788761 152.63188171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 21]
[13 20]
[37 104]
[38 103]
[39 102]
[42 100]
[43 99]
[44 98]
[45 95]
[46 94]
[47 93]
[48 92]
[49 90]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[61 76]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
