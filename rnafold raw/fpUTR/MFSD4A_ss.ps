%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCAGCCCGGCCGGCCCUCCCGCGGGCGGCACUCGGGCACCGGGCUCGCCGGGACCAGAUCCGCGAGCCCGUCAGCCUGCGCC\
) } def
/len { sequence length } bind def

/coor [
[85.34892273 145.83769226]
[85.23004150 160.83721924]
[76.54110718 173.06434631]
[62.41524506 178.11012268]
[47.94603348 174.15513611]
[38.35087585 162.62548828]
[37.08964920 147.67860413]
[44.61819839 134.70315552]
[29.91306305 137.66270447]
[15.20792484 140.62225342]
[0.50278759 143.58180237]
[-14.20234966 146.54135132]
[-19.70537376 150.85346985]
[-25.65373230 151.45918274]
[-30.07355118 149.14331055]
[-44.95391083 151.03405762]
[-59.83427048 152.92480469]
[-70.75525665 164.67689514]
[-86.74101257 163.32220459]
[-95.52863312 149.89993286]
[-90.37701416 134.70651245]
[-75.23802948 129.39701843]
[-61.72501373 138.04444885]
[-46.84465790 136.15370178]
[-31.96429825 134.26295471]
[-17.16189957 131.83622742]
[-2.45676255 128.87666321]
[12.24837494 125.91712189]
[26.95351219 122.95757294]
[41.65864944 119.99801636]
[55.78466034 114.95264435]
[69.03733826 107.92651367]
[82.29002380 100.90039062]
[84.73875427 90.96958160]
[92.26482391 84.04315186]
[102.36434174 82.42547607]
[111.67725372 86.65474701]
[125.40238190 80.60321808]
[139.12750244 74.55168915]
[152.85263062 68.50016785]
[166.57774353 62.44863892]
[172.50686646 46.10963440]
[188.06578064 39.14424896]
[203.58047485 45.35662079]
[217.07817078 38.81352997]
[230.57588196 32.27043533]
[244.07357788 25.72734451]
[257.57128906 19.18425179]
[271.06896973 12.64115906]
[284.56668091 6.09806681]
[298.06439209 -0.44502553]
[311.56207275 -6.98811817]
[318.10278320 -13.70114517]
[325.66726685 -13.51387691]
[339.39239502 -19.56540489]
[342.54162598 -34.75954819]
[354.04293823 -45.17587280]
[369.47381592 -46.80908585]
[382.90078735 -39.03118896]
[389.16091919 -24.83293533]
[385.84707642 -9.67384911]
[374.23345947 0.61709464]
[358.78576660 2.08281755]
[345.44393921 -5.84028053]
[331.71881104 0.21124676]
[318.10516357 6.50958347]
[304.60748291 13.05267620]
[291.10977173 19.59576797]
[277.61206055 26.13886070]
[264.11437988 32.68195343]
[250.61666870 39.22504425]
[237.11897278 45.76813889]
[223.62126160 52.31122971]
[210.12356567 58.85432434]
[207.58641052 71.62398529]
[197.96450806 80.68282318]
[184.67683411 82.49952698]
[172.62927246 76.17375946]
[158.90415955 82.22528839]
[145.17903137 88.27681732]
[131.45390320 94.32834625]
[117.72878265 100.37986755]
[107.73517609 115.95684814]
[89.31614685 114.15306854]
[76.06346893 121.17919922]
[62.81078720 128.20532227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[15 25]
[16 24]
[17 23]
[31 86]
[32 85]
[33 84]
[37 82]
[38 81]
[39 80]
[40 79]
[41 78]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
