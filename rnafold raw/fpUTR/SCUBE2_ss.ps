%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCCGCGCACACCUCCCCGCGCCGCCGCCGCCACCGCCCGCACUCCGCCGCCUCUGCCCGCAACCGCUGAGCCAUCC\
) } def
/len { sequence length } bind def

/coor [
[69.77492523 119.14472198]
[55.70205688 124.33647919]
[41.62918472 129.52822876]
[31.35999489 141.56378174]
[16.74136734 138.70983887]
[6.47217655 150.74537659]
[-8.14645195 147.89143372]
[-22.21932220 153.08319092]
[-36.29219055 158.27494812]
[-50.36506271 163.46670532]
[-52.88696671 178.61714172]
[-62.65860367 190.46664429]
[-77.05145264 195.82775879]
[-92.19390106 193.25836182]
[-104.01271820 183.44963074]
[-109.32868958 169.04005432]
[-106.71185303 153.90573120]
[-96.86612701 142.11772156]
[-82.43995667 136.84693909]
[-67.31391144 139.51119995]
[-55.55681610 149.39382935]
[-41.48394775 144.20207214]
[-27.41107750 139.01033020]
[-13.33820724 133.81857300]
[-4.07560253 122.15437317]
[11.54961109 124.63696289]
[20.81221581 112.97277069]
[36.43742752 115.45536804]
[50.51029968 110.26361084]
[64.58316803 105.07185364]
[64.06330109 94.44075012]
[66.71541595 83.95471954]
[72.40537262 74.55395508]
[80.72245026 67.11113739]
[91.00773621 62.35078049]
[102.40587616 60.77951431]
[113.93607330 62.63400269]
[124.57646179 67.85169220]
[130.85635376 54.22954941]
[127.11740112 41.70402145]
[132.83540344 30.40078163]
[144.37997437 26.26557350]
[151.18983459 12.90047550]
[147.61970520 -2.74029660]
[157.73445129 -15.19305515]
[173.77493286 -14.90511036]
[183.43623352 -2.09734821]
[179.30703735 13.40521240]
[164.55493164 19.71033287]
[157.74507141 33.07543182]
[159.71813965 50.39733887]
[144.47850037 60.50944519]
[138.19860840 74.13159180]
[144.47850037 87.75373840]
[158.91532898 91.82534790]
[173.35215759 95.89694977]
[188.73442078 92.19607544]
[198.88363647 103.09757233]
[213.32046509 107.16918182]
[225.42245483 97.45726013]
[240.92327881 96.74715424]
[253.86253357 105.31191254]
[259.26483154 119.85820770]
[255.05287170 134.79269409]
[242.84623718 144.37277222]
[227.33862305 144.91467285]
[214.49304199 136.21005249]
[209.24885559 121.60601044]
[194.81202698 117.53440094]
[180.46238708 121.52651215]
[169.28054810 110.33377838]
[154.84371948 106.26217651]
[140.40689087 102.19056702]
[137.18846130 114.40312958]
[130.43359375 124.85620880]
[120.90715027 132.57630920]
[109.62464905 136.88722229]
[97.74464417 137.46835327]
[86.44992828 134.37600708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[5 26]
[7 24]
[8 23]
[9 22]
[10 21]
[38 53]
[39 52]
[42 50]
[43 49]
[54 73]
[55 72]
[56 71]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
