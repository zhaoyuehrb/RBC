%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGGGAAACCGGAAGCCGCCUCCCACUUGGUUGCUCGUACGCGGCUAGUGGGUCCUCAGUGGAUGUAGGCUGGGCGCCGCGAUGUUCGACGGGACACCGGCGGAGAGCGACCUCGGGGUUAAGGGGUGGGGCUGACGUCAGGAGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[114.74327087 437.23336792]
[113.65912628 422.27261353]
[106.17874146 422.81466675]
[101.01608276 436.89825439]
[95.85342407 450.98181152]
[90.69076538 465.06536865]
[94.03289795 481.12036133]
[81.62141418 491.83889771]
[66.22417450 486.19467163]
[63.68054581 469.99398804]
[76.60719299 459.90270996]
[81.76985168 445.81915283]
[86.93251038 431.73559570]
[92.09516907 417.65200806]
[100.34664154 406.40179443]
[110.64662933 399.74304199]
[121.16101837 397.78845215]
[130.18995667 400.01678467]
[129.26048279 385.04559326]
[128.33099365 370.07443237]
[127.40151978 355.10327148]
[126.47203827 340.13208008]
[125.54255676 325.16091919]
[123.84108734 310.25772095]
[121.37216949 295.46231079]
[118.90325165 280.66687012]
[114.67340851 274.54827881]
[116.53948975 265.54043579]
[104.48266602 256.87045288]
[102.07801819 241.84806824]
[111.25363922 229.26054382]
[109.09101868 214.41725159]
[106.92840576 199.57397461]
[104.76578522 184.73068237]
[102.60317230 169.88740540]
[100.44055939 155.04411316]
[98.27793884 140.20083618]
[96.11532593 125.35755157]
[81.91773224 120.43362427]
[72.16070557 107.82360077]
[70.80059814 91.01714325]
[79.26930237 75.38446045]
[64.44605255 69.85438538]
[62.12463760 55.14179230]
[52.43014908 43.69553375]
[42.73566055 32.24927139]
[33.04117203 20.80301094]
[23.34668350 9.35674953]
[17.16866112 6.72865582]
[13.79637146 2.05563760]
[13.49997807 -2.76872015]
[4.28678751 -14.60582733]
[-10.29527092 -20.74375534]
[-12.00670624 -35.53970718]
[-21.21989632 -47.37681580]
[-30.43308830 -59.21392441]
[-39.64627838 -71.05103302]
[-55.32420731 -74.45428467]
[-62.30903625 -88.89698792]
[-55.24259949 -103.29994202]
[-39.54566574 -106.61442566]
[-27.25957870 -96.29785919]
[-27.80916977 -80.26422119]
[-18.59597969 -68.42711639]
[-9.38278866 -56.59000778]
[-0.16959833 -44.75289917]
[13.75347137 -39.46164322]
[16.12389565 -23.81901932]
[25.33708572 -11.98191071]
[34.79294586 -0.33773950]
[44.48743439 11.10852146]
[54.18192291 22.55478287]
[63.87641144 34.00104523]
[73.57089996 45.44730377]
[87.70073700 50.15867233]
[90.71556854 65.68997192]
[105.69554901 64.91525269]
[114.15753937 52.52999496]
[122.61953735 40.14473724]
[131.08152771 27.75947762]
[139.54351807 15.37421894]
[141.82327271 6.46206856]
[148.31059265 2.82290936]
[150.77403259 -6.04022217]
[157.33517456 -9.54453087]
[166.30175781 -21.56951904]
[175.26834106 -33.59450531]
[184.23492432 -45.61949539]
[193.20152283 -57.64448166]
[194.57939148 -73.98564148]
[209.53327942 -80.71713257]
[222.67991638 -70.91417694]
[220.49516296 -54.66120911]
[205.22650146 -48.67789459]
[196.25991821 -36.65290833]
[187.29333496 -24.62792015]
[178.32675171 -12.60293198]
[169.36015320 -0.57794464]
[160.51831055 11.53906155]
[151.92878723 23.83621407]
[143.46679688 36.22147369]
[135.00479126 48.60673141]
[126.54280090 60.99198914]
[118.08080292 73.37725067]
[128.89468384 91.90998077]
[125.31682587 111.55620575]
[110.95861053 123.19493103]
[113.12122345 138.03822327]
[115.28383636 152.88150024]
[117.44645691 167.72479248]
[119.60906982 182.56806946]
[121.77169037 197.41136169]
[123.93430328 212.25463867]
[126.09692383 227.09793091]
[138.48275757 236.54402161]
[140.46450806 251.62802124]
[131.38278198 263.37780762]
[133.69866943 278.19796753]
[136.16758728 292.99337769]
[138.63650513 307.78878784]
[149.59585571 297.54708862]
[164.46556091 299.51989746]
[172.37518311 312.26501465]
[167.54241943 326.46517944]
[153.50025940 331.73941040]
[140.51373291 324.23141479]
[141.44320679 339.20260620]
[142.37269592 354.17376709]
[143.30216980 369.14495850]
[144.23165894 384.11611938]
[145.16113281 399.08731079]
[149.29238892 413.50717163]
[156.43159485 426.69927979]
[163.57080078 439.89138794]
[170.71002197 453.08349609]
[186.10121155 454.13931274]
[198.46463013 463.36697388]
[203.85514832 477.82192993]
[200.55267334 492.89169312]
[189.61100769 503.76751709]
[174.52160645 506.97897339]
[160.09944153 501.50134277]
[150.94656372 489.08245850]
[149.98362732 473.68518066]
[157.51791382 460.22271729]
[150.37870789 447.03060913]
[143.23948669 433.83850098]
[136.10028076 420.64639282]
[128.61988831 421.18844604]
[129.70404053 436.14923096]
[130.78793335 451.11001587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 120]
[25 119]
[26 118]
[28 117]
[31 114]
[32 113]
[33 112]
[34 111]
[35 110]
[36 109]
[37 108]
[38 107]
[42 76]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[51 69]
[52 68]
[54 66]
[55 65]
[56 64]
[57 63]
[77 104]
[78 103]
[79 102]
[80 101]
[81 100]
[83 99]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
[132 148]
[133 147]
[134 146]
[135 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
