%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGCGCUGUCACUCAGCCUGGACGCGCUUCUUCGGGUCGCGGGUGCACUCCGGCCCGGCUCCCGCCUCGGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[108.89491272 139.49456787]
[94.76687622 140.14416504]
[81.27751923 135.89440918]
[70.07312775 127.26393890]
[62.52114487 115.30606079]
[47.82428741 118.30644226]
[33.12742615 121.30683136]
[18.43056679 124.30721283]
[10.38977337 129.21371460]
[3.08205152 127.11993408]
[-11.72370243 129.52610779]
[-26.52945709 131.93226624]
[-34.76129532 136.51103210]
[-41.97877884 134.12469482]
[-50.36103821 147.32589722]
[-65.28332520 152.00128174]
[-79.69979858 145.94328308]
[-86.80343628 132.01229858]
[-83.24011993 116.78611755]
[-70.69233704 107.45406342]
[-55.08477020 108.42246246]
[-43.78683090 119.23405457]
[-28.93562508 117.12651825]
[-14.12987137 114.72035217]
[0.67588228 112.31417847]
[15.43018055 109.61035919]
[30.12704086 106.60997009]
[44.82390213 103.60958862]
[59.52075958 100.60919952]
[62.32590485 85.18100739]
[70.78347015 71.97618103]
[83.62452698 62.97590256]
[98.92247009 59.53051758]
[114.38208771 62.15696335]
[127.68389130 70.46117401]
[136.83215332 83.19723511]
[151.39627075 79.60749817]
[165.96040344 76.01776123]
[180.52452087 72.42802429]
[195.08865356 68.83829498]
[209.40946960 64.37574768]
[223.43470764 59.05667496]
[237.45996094 53.73760223]
[251.48519897 48.41852570]
[265.51043701 43.09945297]
[275.67013550 30.97134399]
[290.31402588 33.69269180]
[304.33926392 28.37361908]
[311.48889160 22.24081802]
[319.03784180 23.13524818]
[323.58526611 8.29946232]
[336.00466919 -1.00310624]
[351.52056885 -1.19543064]
[364.16674805 7.79644203]
[369.08050537 22.51495361]
[364.37240601 37.30053711]
[351.85281372 46.46783066]
[336.33575439 46.49182510]
[323.78787231 37.36329651]
[309.65835571 42.39886093]
[295.63311768 47.71793747]
[286.47659302 59.46559143]
[270.82952881 57.12469864]
[256.80426025 62.44377136]
[242.77902222 67.76284027]
[228.75378418 73.08191681]
[214.72854614 78.40099335]
[212.93693542 81.74485779]
[209.28436279 84.27363586]
[204.23225403 85.04795837]
[198.67839050 83.40242004]
[184.11425781 86.99215698]
[169.55014038 90.58188629]
[154.98600769 94.17162323]
[140.42187500 97.76136017]
[138.72529602 111.80219269]
[132.30250549 124.40263367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[7 27]
[8 26]
[10 25]
[11 24]
[12 23]
[14 22]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[47 61]
[48 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
