%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGCCCGCCCCGCCCCUCGGGCGUACGUGUGCGCGCAGGGCGCAGGCGCGCGGGUCCCGGCAGCCCGUGAGACGCCCGCUGCUGGACGCGGGUAGCCGUCUGAGGUGCCGGAGCUGCGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[85.55233765 110.16321564]
[70.78022003 112.76793671]
[56.00810242 115.37265778]
[41.23598862 117.97737885]
[26.46387100 120.58209991]
[11.69175529 123.18682861]
[6.24746847 127.24408722]
[0.44981873 127.77629089]
[-3.88027430 125.53392792]
[-18.76386261 127.39908600]
[-33.64744949 129.26423645]
[-47.99490356 140.72540283]
[-63.89739990 133.41566467]
[-78.72986603 135.65130615]
[-93.56232452 137.88693237]
[-108.39479065 140.12257385]
[-123.22724915 142.35820007]
[-129.25465393 151.57788086]
[-139.18298340 155.81356812]
[-149.57510376 153.86537170]
[-156.97879028 146.62980652]
[-169.94000244 155.70271301]
[-183.37442017 149.27108765]
[-198.29988098 150.76461792]
[-213.22534180 152.25813293]
[-228.15080261 153.75164795]
[-243.07626343 155.24516296]
[-256.06823730 165.25218201]
[-271.12542725 158.75497437]
[-272.75823975 142.43731689]
[-259.28701782 133.08541870]
[-244.56977844 140.31970215]
[-229.64431763 138.82618713]
[-214.71885681 137.33267212]
[-199.79339600 135.83915710]
[-184.86793518 134.34562683]
[-172.97428894 125.37955475]
[-158.47230530 131.70434570]
[-143.76486206 119.25107574]
[-125.46288300 127.52574158]
[-110.63042450 125.29010773]
[-95.79795837 123.05447388]
[-80.96549988 120.81884003]
[-66.13303375 118.58320618]
[-58.64250183 108.99757385]
[-46.22407150 107.06761932]
[-35.51260757 114.38065338]
[-20.62901878 112.51549530]
[-5.74542999 110.65034485]
[9.08703232 108.41471100]
[23.85914803 105.80998993]
[38.63126373 103.20526123]
[53.40338135 100.60054016]
[68.17549896 97.99581909]
[82.94761658 95.39109802]
[96.49989319 82.68598175]
[113.92311096 89.12926483]
[128.54702759 85.79145050]
[143.17094421 82.45363617]
[157.79486084 79.11582184]
[172.41877747 75.77800751]
[180.18969727 70.76615906]
[187.44879150 72.54409027]
[202.15138245 69.57189941]
[216.85397339 66.59970856]
[231.55656433 63.62751389]
[246.22094727 60.47226715]
[260.84487915 57.13445282]
[275.46878052 53.79663849]
[289.85638428 49.55434036]
[300.17800903 37.56372070]
[314.78402710 40.48142242]
[328.87942505 35.35112000]
[342.97482300 30.22081757]
[357.07019043 25.09051514]
[371.16558838 19.96021271]
[384.98773193 14.13369083]
[398.50225830 7.62543488]
[412.01678467 1.11717904]
[425.53134155 -5.39107704]
[439.04586792 -11.89933300]
[441.68392944 -27.19051361]
[452.82955933 -37.98656082]
[468.19702148 -40.13616943]
[481.87722778 -32.81277847]
[488.60983276 -18.83237839]
[485.80603027 -3.57071567]
[474.54394531 7.10378647]
[459.15405273 9.08656406]
[445.55410767 1.61519980]
[432.03958130 8.12345600]
[418.52505493 14.63171196]
[405.01052856 21.13996887]
[391.49597168 27.64822388]
[390.46563721 30.36785889]
[388.23617554 32.81840134]
[384.91387939 34.51776123]
[380.78601074 35.03521729]
[376.29589844 34.05560303]
[362.20050049 39.18590546]
[348.10510254 44.31620789]
[334.00973511 49.44651031]
[319.91433716 54.57681274]
[310.60092163 66.20047760]
[294.98669434 63.64973068]
[306.89685059 72.76827240]
[307.44869995 87.75811768]
[296.24127197 97.72772980]
[281.41778564 95.43324280]
[273.74893188 82.54182434]
[278.80661011 68.42055511]
[264.18267822 71.75836945]
[249.55876160 75.09618378]
[243.67329407 79.70235443]
[234.52874756 78.33010101]
[219.82617188 81.30229187]
[205.12358093 84.27449036]
[190.42098999 87.24668121]
[175.75659180 90.40192413]
[161.13267517 93.73973846]
[146.50875854 97.07755280]
[131.88484192 100.41536713]
[117.26092529 103.75318146]
[112.39875793 112.58160400]
[103.50010681 117.31401825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[9 49]
[10 48]
[11 47]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[21 38]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[57 123]
[58 122]
[59 121]
[60 120]
[61 119]
[63 118]
[64 117]
[65 116]
[66 115]
[67 113]
[68 112]
[69 111]
[70 105]
[72 103]
[73 102]
[74 101]
[75 100]
[76 99]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
