%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGCGAGCCAGGAGGAGGAAGCCGGCGGUGGCCCCGUCAGCAGCCGGCUGCUGAGAGGCCGGUAGGCGGCGGCGGUCCCGAGGGGCGGCGGCCGCGCUGCUCCCUGAGAACGGGUCCCGCAGCUGGGCAGGCGGGCGGCCUGAGGGCGCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[171.67311096 222.51087952]
[156.67543030 222.77409363]
[145.75747681 212.48825073]
[145.12680054 197.50152588]
[155.14196777 186.33476257]
[170.10789490 185.33671570]
[159.82231140 174.41853333]
[144.97303772 174.23245239]
[134.38645935 163.30638123]
[134.68231201 147.73236084]
[119.83304596 147.54626465]
[109.24645996 136.62020874]
[109.54232788 121.04618073]
[99.25674438 110.12799835]
[91.83497620 106.86321259]
[88.87786865 98.88899231]
[78.81138611 87.76846313]
[68.74491119 76.64794159]
[58.67843628 65.52742004]
[45.82395554 64.09700012]
[37.66839981 54.58151245]
[38.18835068 42.46193695]
[28.34496307 31.14346695]
[18.50157738 19.82499886]
[8.54615402 8.60494709]
[-1.52032197 -2.51557636]
[-11.58679867 -13.63610077]
[-21.65327454 -24.75662422]
[-36.65073776 -29.79514313]
[-39.45579910 -44.42322922]
[-49.52227783 -55.54375458]
[-64.51973724 -60.58227158]
[-67.32480621 -75.21035767]
[-77.39128113 -86.33087921]
[-87.45775604 -97.45140839]
[-97.52423096 -108.57192993]
[-107.59070587 -119.69245148]
[-126.11773682 -114.81327057]
[-144.49549866 -119.93361664]
[-157.71757507 -133.57371521]
[-162.22497559 -151.94454956]
[-156.86386108 -170.00015259]
[-167.78204346 -180.28573608]
[-183.13241577 -184.11679077]
[-187.09082031 -198.47576904]
[-198.00900269 -208.76135254]
[-208.92718506 -219.04693604]
[-219.84536743 -229.33251953]
[-235.19572449 -233.16357422]
[-239.15412903 -247.52255249]
[-250.07231140 -257.80813599]
[-260.99047852 -268.09371948]
[-271.90866089 -278.37930298]
[-282.82684326 -288.66488647]
[-293.74502563 -298.95046997]
[-309.53283691 -298.22872925]
[-321.15039062 -308.94357300]
[-321.70516968 -324.73812866]
[-310.86807251 -336.24172974]
[-295.06854248 -336.62951660]
[-283.68017578 -325.67141724]
[-283.45944214 -309.86865234]
[-272.54125977 -299.58306885]
[-261.62307739 -289.29748535]
[-250.70491028 -279.01190186]
[-239.78672791 -268.72631836]
[-228.86854553 -258.44073486]
[-214.29911804 -255.34538269]
[-209.55976868 -240.25070190]
[-198.64158630 -229.96511841]
[-187.72340393 -219.67953491]
[-176.80522156 -209.39395142]
[-162.23580933 -206.29859924]
[-157.49645996 -191.20391846]
[-146.57827759 -180.91833496]
[-136.55567932 -185.84312439]
[-125.47929382 -187.46086121]
[-114.41416168 -185.59941101]
[-104.42933655 -180.42201233]
[-96.49457550 -172.41307068]
[-91.38616180 -162.33285522]
[-89.61100769 -151.14537048]
[-91.35635376 -139.92616272]
[-96.47018433 -129.75892639]
[-86.40370941 -118.63840485]
[-76.33723450 -107.51788330]
[-66.27075958 -96.39736176]
[-56.20428085 -85.27683258]
[-41.92683792 -81.03372955]
[-38.40175247 -65.61022949]
[-28.33527756 -54.48970413]
[-14.05783558 -50.24660110]
[-10.53275108 -34.82310104]
[-0.46627450 -23.70257759]
[9.60020161 -12.58205318]
[19.66667747 -1.46152902]
[26.52449989 1.40249097]
[29.82004738 9.98161221]
[39.66343307 21.30008125]
[49.50682068 32.61854935]
[66.36917877 37.39471436]
[69.79895782 55.46094131]
[79.86543274 66.58146667]
[89.93191528 77.70198822]
[99.99839020 88.82250977]
[110.17492676 99.84240723]
[120.46051025 110.76058960]
[136.02447510 111.39369965]
[146.29998779 122.61280823]
[145.60049438 137.44676208]
[161.16445923 138.07987976]
[171.43997192 149.29898071]
[170.74049377 164.13294983]
[181.02607727 175.05113220]
[191.94425964 185.33671570]
[203.45620728 194.95312500]
[214.96813965 204.56951904]
[230.51959229 207.47863770]
[235.32696533 221.57609558]
[246.83889771 231.19250488]
[258.35083008 240.80891418]
[269.86279297 250.42530823]
[278.50573730 253.54963684]
[281.50552368 260.34915161]
[292.82400513 270.19253540]
[304.14248657 280.03591919]
[317.41500854 277.55908203]
[329.50692749 283.11376953]
[336.07934570 294.45938110]
[334.91735840 307.32388306]
[346.03787231 317.39038086]
[357.15841675 327.45684814]
[368.27893066 337.52331543]
[379.39944458 347.58981323]
[395.42965698 348.23196411]
[404.80572510 361.24996948]
[400.33514404 376.65756226]
[385.44735718 382.63531494]
[371.56301880 374.59762573]
[369.33297729 358.71032715]
[358.21246338 348.64385986]
[347.09191895 338.57736206]
[335.97140503 328.51089478]
[324.85089111 318.44442749]
[308.13092041 320.01092529]
[295.17910767 308.79949951]
[294.29907227 291.35440063]
[282.98062134 281.51101685]
[271.66213989 271.66763306]
[260.24636841 261.93725586]
[248.73443604 252.32084656]
[237.22250366 242.70443726]
[225.71055603 233.08804321]
[210.98251343 230.86676025]
[205.35173035 216.08146667]
[193.83979797 206.46505737]
[182.32785034 196.84864807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 114]
[7 113]
[10 110]
[13 107]
[14 106]
[16 105]
[17 104]
[18 103]
[19 102]
[22 100]
[23 99]
[24 98]
[25 96]
[26 95]
[27 94]
[28 93]
[30 91]
[31 90]
[33 88]
[34 87]
[35 86]
[36 85]
[37 84]
[42 75]
[43 74]
[45 72]
[46 71]
[47 70]
[48 69]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[115 157]
[116 156]
[117 155]
[119 153]
[120 152]
[121 151]
[122 150]
[124 149]
[125 148]
[126 147]
[130 144]
[131 143]
[132 142]
[133 141]
[134 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
