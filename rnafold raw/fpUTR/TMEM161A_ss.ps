%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGUCGAGUUUCCGCAGAGUGCCCGGAGCCCUAGGCCGGUGGGUGAGUGCACCGCGUUCUCGCACGCGUC\
) } def
/len { sequence length } bind def

/coor [
[85.78157043 316.09759521]
[74.33677673 305.93518066]
[68.93648529 291.61401367]
[70.82164764 276.42504883]
[79.55905914 263.85858154]
[93.14093781 256.80227661]
[93.14093781 241.80229187]
[92.82255554 226.80566406]
[92.18594360 211.81918335]
[91.54932404 196.83270264]
[90.91270447 181.84620667]
[80.75971985 175.91520691]
[74.79074860 165.64337158]
[74.66213226 153.64204407]
[80.52742004 143.03141785]
[90.96620941 136.62928772]
[91.60282135 121.64280701]
[92.23944092 106.65632629]
[89.34035492 98.85237122]
[93.23453522 91.05126190]
[90.79454803 81.92776489]
[94.89102173 75.50248718]
[96.79629517 60.62397766]
[98.70156097 45.74547195]
[100.60682678 30.86696625]
[94.68506622 16.19579315]
[103.97628784 4.55438185]
[94.46728516 -5.23634481]
[92.46025085 -18.53775978]
[98.47878265 -30.34821129]
[110.07152557 -36.36057281]
[112.60654449 -51.14480972]
[115.14155579 -65.92904663]
[117.67656708 -80.71328735]
[106.22534180 -91.05123138]
[102.20312500 -105.94503021]
[106.89340210 -120.64213562]
[118.79950714 -130.45275879]
[134.12225342 -132.24635315]
[147.97219849 -125.45059204]
[155.92990112 -112.23398590]
[155.45605469 -96.81389618]
[146.70188904 -84.11083221]
[132.46080017 -78.17827606]
[129.92579651 -63.39403915]
[127.39077759 -48.60979843]
[124.85576630 -33.82556152]
[135.13076782 -20.68576813]
[132.82185364 -3.82924414]
[118.85478973 6.45964909]
[124.91283417 20.06661034]
[115.48533630 32.77223206]
[113.58006287 47.65073776]
[111.67479706 62.52924728]
[109.76953125 77.40775299]
[108.18049622 92.32334900]
[107.22592926 107.29294586]
[106.58930969 122.27942657]
[105.95269012 137.26591492]
[119.25742340 150.40969849]
[119.04778290 168.79971313]
[105.89918518 181.20959473]
[106.53580475 196.19607544]
[107.17242432 211.18257141]
[107.80904388 226.16905212]
[111.38811493 234.90872192]
[108.14093781 241.80229187]
[108.14093781 256.80227661]
[121.72281647 263.85858154]
[130.46023560 276.42504883]
[132.34539795 291.61401367]
[126.94510651 305.93518066]
[115.50030518 316.09759521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 65]
[9 64]
[10 63]
[11 62]
[16 59]
[17 58]
[18 57]
[20 56]
[22 55]
[23 54]
[24 53]
[25 52]
[27 50]
[31 47]
[32 46]
[33 45]
[34 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
