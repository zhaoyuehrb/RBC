%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGCGUGCGCAGAGGUGCGGCCGGGGAGGCGCGCGGAGGCUGGAGCUGGAGGCGCGGCGCCGGUGAGCUGAGAACC\
) } def
/len { sequence length } bind def

/coor [
[114.12168884 119.62812805]
[126.13340759 110.64543915]
[111.23738098 108.88237762]
[98.31639862 114.22465515]
[86.99955750 106.01364899]
[72.10353088 104.25058746]
[57.20750427 102.48752594]
[42.31147766 100.72446442]
[27.41545105 98.96140289]
[12.51942539 97.19834137]
[-2.37660193 95.43527985]
[-18.96127892 103.14565277]
[-32.69970322 92.41265106]
[-42.80388641 104.04071045]
[-57.64412689 107.44961548]
[-71.48237610 101.53634644]
[-79.09403229 88.76134491]
[-94.04779053 87.58445740]
[-109.00154877 86.40756989]
[-125.26625061 91.19254303]
[-134.36674500 76.88809204]
[-123.14057922 64.18338013]
[-107.82466888 71.45381165]
[-92.87090302 72.63069153]
[-77.91714478 73.80757904]
[-68.40074921 62.38058472]
[-53.80783081 58.70489120]
[-39.68357086 64.39335632]
[-31.52281761 77.45889282]
[-21.96495628 69.77617645]
[-9.33970737 70.80670166]
[-0.61354095 80.53925323]
[14.28248596 82.30231476]
[29.17851257 84.06537628]
[44.07453918 85.82843781]
[58.97056580 87.59149933]
[73.86659241 89.35456085]
[88.76261902 91.11762238]
[101.68360138 85.77534485]
[113.00044250 93.98635101]
[127.89646912 95.74941254]
[142.71179199 93.40290070]
[156.33393860 87.12300110]
[169.95608521 80.84310913]
[183.57823181 74.56320953]
[197.20037842 68.28331757]
[206.49362183 55.47916031]
[221.29110718 57.17734146]
[234.91325378 50.89744568]
[248.53540039 44.61754990]
[262.15753174 38.33765411]
[267.39184570 23.42532158]
[281.67364502 16.65732956]
[296.52981567 22.04900360]
[303.14642334 36.40156174]
[297.59799194 51.19988251]
[283.17626953 57.66438675]
[268.43743896 51.95980072]
[254.81529236 58.23969650]
[241.19314575 64.51959229]
[227.57099915 70.79949188]
[219.25210571 83.15446472]
[203.48028564 81.90546417]
[189.85813904 88.18535614]
[176.23597717 94.46525574]
[162.61383057 100.74514771]
[148.99168396 107.02504730]
[163.19219971 111.85676575]
[174.59231567 121.60547638]
[181.56971741 134.88386536]
[183.13148499 149.80235291]
[179.05535889 164.23789978]
[169.92140198 176.13626099]
[157.02944946 183.80419922]
[142.21409607 186.15052795]
[127.58367157 182.84133911]
[115.22018433 174.34756470]
[106.88304901 161.87791443]
[103.75868988 147.20690918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[13 29]
[17 25]
[18 24]
[19 23]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
