%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUGGCCGCGGCCGGCGGCGCCGCCUCCUCGUCGGGCCGGGCACGGCGGGCCGGGGCCUUUGUGUGAAGCGGCGGCGGCGAUGGUGCUCGGGGCGCCGCAGAGCCGGAUUAACUGUGCUGAUAAGGAGGUAAUUUCAUAGGAGCUGCUAAG\
) } def
/len { sequence length } bind def

/coor [
[-37.28592300 245.77563477]
[-47.84482574 235.12155151]
[-53.61980057 221.27778625]
[-53.76230240 206.27845764]
[-48.25139999 192.32748413]
[-37.89476776 181.47325134]
[-52.51868439 184.81106567]
[-67.14260101 188.14888000]
[-81.76652527 191.48667908]
[-93.49898529 202.10083008]
[-107.62886810 197.38960266]
[-122.25278473 200.72741699]
[-136.87670898 204.06523132]
[-151.50062561 207.40304565]
[-166.12454224 210.74085999]
[-177.85700989 221.35499573]
[-191.98689270 216.64376831]
[-206.61080933 219.98158264]
[-218.34327698 230.59571838]
[-232.47315979 225.88449097]
[-244.20561218 236.49862671]
[-258.33551025 231.78739929]
[-272.95941162 235.12521362]
[-287.58334351 238.46302795]
[-302.13613892 242.09844971]
[-316.61172485 246.02998352]
[-331.08734131 249.96150208]
[-345.56292725 253.89303589]
[-351.95877075 268.16284180]
[-366.05316162 274.93643188]
[-381.19122314 271.01553345]
[-390.22518921 258.25146484]
[-388.88949585 242.67102051]
[-377.81481934 231.63082886]
[-362.23031616 230.34371948]
[-349.49447632 239.41743469]
[-335.01885986 235.48590088]
[-320.54324341 231.55438232]
[-306.06765747 227.62284851]
[-302.93447876 223.94595337]
[-297.43551636 222.23481750]
[-290.92114258 223.83911133]
[-276.29724121 220.50129700]
[-261.67330933 217.16348267]
[-250.98684692 206.78808594]
[-235.81097412 211.26057434]
[-225.12451172 200.88517761]
[-209.94862366 205.35766602]
[-195.32470703 202.01985168]
[-184.63824463 191.64445496]
[-169.46235657 196.11692810]
[-154.83843994 192.77912903]
[-140.21452332 189.44131470]
[-125.59059906 186.10350037]
[-110.96668243 182.76568604]
[-100.28022003 172.39028931]
[-85.10433960 176.86276245]
[-70.48041534 173.52494812]
[-55.85649872 170.18713379]
[-41.23258209 166.84931946]
[-27.23253250 161.46427917]
[-14.14135647 154.14164734]
[-1.05017984 146.81900024]
[6.28031826 133.85314941]
[22.10151672 133.86892700]
[35.19269180 126.54628754]
[48.28387070 119.22364807]
[61.37504578 111.90100098]
[74.46622467 104.57836151]
[87.55739594 97.25571442]
[97.38031006 85.91947174]
[102.76535034 71.91942596]
[108.15039062 57.91937637]
[113.53543091 43.91933060]
[118.92047119 29.91928101]
[124.30551147 15.91923332]
[122.03830719 0.26131725]
[133.82893372 -8.83979893]
[129.30740356 -20.96146584]
[134.12603760 -32.53422928]
[145.18281555 -37.53298569]
[150.85232544 -51.42027283]
[156.52182007 -65.30756378]
[150.16909790 -79.77886200]
[155.98756409 -94.47311401]
[170.52522278 -100.67247772]
[185.15713501 -94.69898224]
[191.20245361 -80.09659576]
[185.07458496 -65.52865601]
[170.40910339 -59.63806152]
[164.73960876 -45.75077438]
[159.07009888 -31.86348724]
[162.40583801 -14.66060066]
[147.82897949 -3.45475817]
[150.48136902 11.20178127]
[138.30555725 21.30427361]
[132.92051697 35.30432129]
[127.53547668 49.30437088]
[122.15043640 63.30441666]
[116.76539612 77.30446625]
[111.38035583 91.30451202]
[115.99647522 97.21563721]
[125.22872162 109.03789520]
[129.84484863 114.94902039]
[144.73262024 113.11760712]
[159.62039185 111.28619385]
[174.48872375 109.30302429]
[189.33604431 107.16829681]
[204.18336487 105.03357697]
[214.90998840 93.10382080]
[230.91583252 94.19595337]
[239.92256165 107.47217560]
[235.02101135 122.74811554]
[219.97120667 128.30537415]
[206.31808472 119.88089752]
[191.47076416 122.01561737]
[176.62344360 124.15034485]
[170.41285706 128.23988342]
[161.45181274 126.17397308]
[146.56404114 128.00538635]
[131.67625427 129.83679199]
[145.61953735 135.36715698]
[151.24778748 149.27122498]
[151.61164856 164.26679993]
[146.66433716 178.42745972]
[137.04147339 189.93399048]
[123.97925568 197.30818176]
[109.15578461 199.60266113]
[94.47539520 196.52265930]
[81.82407379 188.46388245]
[72.82709503 176.46162415]
[68.64029694 162.05776978]
[69.80155182 147.10278320]
[76.16167450 133.51791382]
[86.90211487 123.04936218]
[94.88004303 110.34689331]
[81.78886414 117.66953278]
[68.69768524 124.99217987]
[55.60651398 132.31481934]
[42.51533508 139.63746643]
[29.42416000 146.96011353]
[21.15729332 160.44972229]
[6.27246332 159.91017151]
[-6.81871319 167.23281860]
[-19.90988922 174.55546570]
[-4.95141125 175.67077637]
[8.48852062 182.33172607]
[18.43512917 193.55958557]
[23.42692566 207.70462036]
[22.73044777 222.68844604]
[16.44803047 236.30943298]
[5.50277328 246.56620789]
[-8.49710083 251.95169067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 60]
[7 59]
[8 58]
[9 57]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[17 49]
[18 48]
[20 46]
[22 44]
[23 43]
[24 42]
[25 39]
[26 38]
[27 37]
[28 36]
[61 145]
[62 144]
[63 143]
[65 141]
[66 140]
[67 139]
[68 138]
[69 137]
[70 136]
[71 101]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[78 94]
[81 92]
[82 91]
[83 90]
[104 121]
[105 120]
[106 119]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
