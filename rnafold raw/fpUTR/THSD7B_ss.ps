%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCCGCCGGGUUGCCAGACGCUGGAAUGGGUGGUCUUCCGACACACACCACCAUCUUUCUUGCGCUCGGGAAGCUCGGGGCUCAGCGGCUCCCAGAGGUUACGGCGGCGGCUCUGGCGAGACGGGAAUAGGCAAGUCAAGAGGCUGAAAAAUCUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[174.24456787 180.83322144]
[161.71224976 172.59059143]
[149.17993164 164.34796143]
[136.64761353 156.10533142]
[124.11529541 147.86268616]
[111.58297729 139.62005615]
[99.05065918 131.37742615]
[84.60009766 127.35482788]
[69.61138153 127.93646240]
[54.62266159 128.51809692]
[39.63394165 129.09971619]
[24.64522171 129.68135071]
[9.65650272 130.26298523]
[1.15405345 133.73707581]
[-5.62791252 130.70771790]
[-20.62509155 130.99858093]
[-34.27263260 139.00202942]
[-47.14754868 131.51298523]
[-62.14472961 131.80386353]
[-77.14190674 132.09472656]
[-86.60552979 146.08549500]
[-102.38092041 151.64088440]
[-118.20587158 146.76490784]
[-127.92234039 133.56158447]
[-142.91105652 134.14320374]
[-157.89978027 134.72483826]
[-163.75683594 137.95994568]
[-169.49797058 137.74615479]
[-173.47859192 135.02699280]
[-188.47859192 135.02699280]
[-203.47859192 135.02699280]
[-218.47789001 135.17242432]
[-233.47506714 135.46330261]
[-248.47224426 135.75416565]
[-263.46591187 136.19044495]
[-278.45462036 136.77207947]
[-293.44332886 137.35369873]
[-307.02072144 146.55079651]
[-321.65420532 139.14851379]
[-322.29006958 122.76169586]
[-308.27423096 114.24769592]
[-294.02496338 122.36498260]
[-279.03625488 121.78335571]
[-264.04751587 121.20172119]
[-257.45318604 117.78315735]
[-248.76310730 120.75698853]
[-233.76593018 120.46611786]
[-218.76875305 120.17525482]
[-212.10935974 116.88520050]
[-203.47859192 120.02699280]
[-188.47859192 120.02699280]
[-173.47859192 120.02699280]
[-158.48141479 119.73612213]
[-143.49269104 119.15448761]
[-128.50396729 118.57286072]
[-122.12516785 106.81364441]
[-110.67041016 99.69542694]
[-97.08565521 99.17517090]
[-84.92765808 105.49646759]
[-77.43277740 117.09754944]
[-62.43559647 116.80667877]
[-47.43841934 116.51580811]
[-34.86357498 108.53316498]
[-20.91596222 116.00140381]
[-5.91878271 115.71053314]
[9.07487202 115.27426147]
[24.06359100 114.69263458]
[39.05231094 114.11100006]
[54.04103088 113.52937317]
[69.02974701 112.94773865]
[84.01847076 112.36611176]
[82.84805298 93.90389252]
[96.31858826 84.22490692]
[100.06020355 69.69905853]
[96.00981140 54.40510941]
[106.67723846 44.01014709]
[110.41886139 29.48429871]
[114.16047668 14.95844936]
[117.76107025 0.39700329]
[121.22030640 -14.19866943]
[124.67955017 -28.79434204]
[127.99710083 -43.42287064]
[131.17265320 -58.08287811]
[134.34822083 -72.74288940]
[128.82861328 -88.18523407]
[139.64709473 -100.50969696]
[155.67453003 -97.03793335]
[160.42327881 -81.34139252]
[149.00822449 -69.56732941]
[145.83267212 -54.90732193]
[142.65710449 -40.24731445]
[144.32270813 -33.00867844]
[139.27522278 -25.33510399]
[135.81597900 -10.73943138]
[132.35675049 3.85624146]
[133.88166809 11.12581253]
[128.68632507 18.70006561]
[124.94470978 33.22591400]
[121.20308685 47.75176620]
[125.52111053 62.00672913]
[114.58605194 73.44067383]
[110.84443665 87.96652222]
[117.90207672 103.29658508]
[107.29329681 118.84510040]
[119.82561493 127.08773804]
[132.35792542 135.33036804]
[144.89024353 143.57301331]
[157.42256165 151.81564331]
[169.95487976 160.05827332]
[182.48719788 168.30090332]
[196.14263916 174.50807190]
[211.51225281 170.75500488]
[221.69841003 181.62200928]
[236.14897156 185.64459229]
[250.59953308 189.66719055]
[265.05010986 193.68977356]
[279.53900146 197.57205200]
[294.06484985 201.31367493]
[308.59069824 205.05529785]
[322.08944702 197.28218079]
[336.76742554 201.28363037]
[344.09469604 214.20054626]
[353.23635864 213.31092834]
[358.86456299 218.15811157]
[370.93353271 208.40518188]
[386.43185425 207.64247131]
[399.40011597 216.16326904]
[404.85174561 230.69114685]
[400.69049072 245.63984680]
[388.51641846 255.26127625]
[373.01074219 255.85581970]
[360.13568115 247.19483948]
[354.84197998 232.60867310]
[340.35308838 228.72639465]
[327.69729614 236.49598694]
[312.91271973 232.90837097]
[304.84906006 219.58114624]
[290.32321167 215.83952332]
[275.79736328 212.09791565]
[268.49960327 213.48158264]
[261.02749634 208.14033508]
[246.57695007 204.11775208]
[232.12638855 200.09515381]
[217.67582703 196.07257080]
[203.33981323 200.11335754]
[192.12005615 188.95863342]
[202.31452942 199.96194458]
[208.21343994 213.75334167]
[209.12925720 228.72535706]
[204.95520020 243.13290405]
[196.17781067 255.29667664]
[183.82014465 263.79891968]
[169.32257080 267.64862061]
[154.37487793 266.39709473]
[140.71931458 260.19018555]
[129.94752502 249.75137329]
[123.31505585 236.29737854]
[121.59494019 221.39631653]
[124.98768616 206.78504944]
[133.09783936 194.16659546]
[144.98010254 185.01171875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[15 65]
[16 64]
[18 62]
[19 61]
[20 60]
[24 55]
[25 54]
[26 53]
[29 52]
[30 51]
[31 50]
[32 48]
[33 47]
[34 46]
[35 44]
[36 43]
[37 42]
[73 102]
[74 101]
[76 99]
[77 98]
[78 97]
[79 95]
[80 94]
[81 93]
[82 91]
[83 90]
[84 89]
[111 146]
[113 144]
[114 143]
[115 142]
[116 141]
[117 139]
[118 138]
[119 137]
[122 134]
[124 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
