%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCUGCCGAGCUGUAGCUAUGGAGACGUGGGGGGCGGGCCGCCCGGAGAGCGCGACCUUUGACCUGCAGUAGAGCCUACGUCAGAGGCUGGCGCAAACAGAAGUGCAGCGGUGGCGGCGGCUGGUUGCGGGCCGGCGGCGGGCUGGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[255.93276978 284.83612061]
[258.77230835 274.44586182]
[244.35697937 270.69784546]
[240.30186462 255.40516663]
[229.85771179 244.63854980]
[219.41357422 233.87194824]
[208.96942139 223.10534668]
[198.52526855 212.33874512]
[188.08113098 201.57214355]
[173.67051697 205.34042358]
[159.21238708 201.36317444]
[148.61624146 190.61198425]
[144.79913330 175.90394592]
[148.88311768 161.16392517]
[138.43896484 150.39732361]
[127.99481964 139.63072205]
[117.55066681 128.86410522]
[102.72529602 133.67098999]
[87.31983948 131.31095886]
[74.61336517 122.28636169]
[61.42507172 129.43260193]
[48.23677444 136.57885742]
[35.04847717 143.72509766]
[21.86018181 150.87133789]
[13.74562931 165.12217712]
[-2.65261006 164.94958496]
[-10.46543312 150.53112793]
[-1.65567744 136.69927979]
[14.71393585 137.68304443]
[27.90223312 130.53680420]
[41.09053040 123.39055634]
[54.27882385 116.24430847]
[67.46712494 109.09806061]
[66.91040039 106.80008698]
[66.51578522 104.46879578]
[51.57812881 103.10257721]
[36.64048004 101.73635864]
[21.70282555 100.37014008]
[6.76517391 99.00392914]
[-9.55883026 103.58248901]
[-18.47739410 89.16390228]
[-7.09119844 76.60242462]
[8.13139057 84.06627655]
[23.06904221 85.43249512]
[38.00669479 86.79870605]
[52.94434738 88.16492462]
[67.88199615 89.53114319]
[69.88445282 84.69585419]
[72.60973358 80.22789001]
[75.99242401 76.23449707]
[79.95133972 72.81150818]
[84.39144897 70.04109192]
[89.20619965 67.98973846]
[87.68867493 53.06669998]
[86.17115021 38.14366150]
[84.65362549 23.22062111]
[75.55987549 10.27402210]
[81.96988678 -3.17071986]
[80.30120850 -18.07761574]
[78.48155212 -32.96683502]
[76.66189575 -47.85605240]
[74.84223175 -62.74527359]
[73.02257538 -77.63449097]
[71.20291901 -92.52371216]
[69.38326263 -107.41292572]
[67.56360626 -122.30214691]
[52.22159576 -133.33830261]
[49.79846573 -151.76089478]
[61.36258698 -165.89686584]
[58.94102859 -180.70010376]
[45.96350861 -189.72006226]
[43.24735260 -205.28919983]
[52.40400696 -218.17062378]
[68.00099182 -220.72203064]
[80.78488922 -211.42968750]
[83.17124939 -195.80661011]
[73.74427795 -183.12165833]
[76.16583252 -168.31842041]
[86.71218109 -163.78982544]
[93.81494904 -154.62144470]
[95.60136414 -143.04040527]
[91.50842285 -131.93218994]
[82.45281982 -124.12180328]
[84.27248383 -109.23258972]
[86.09214020 -94.34336853]
[87.91179657 -79.45414734]
[89.73145294 -64.56492615]
[91.55110931 -49.67571259]
[93.37076569 -34.78649139]
[95.19042969 -19.89727211]
[99.14685822 -13.60233307]
[96.89292145 -4.68824482]
[105.87812042 7.19095802]
[99.57666016 21.70309639]
[101.09418488 36.62613678]
[102.61170959 51.54917526]
[104.12923431 66.47221375]
[124.17491913 76.40473938]
[133.61810303 96.68553162]
[128.31727600 118.41996002]
[138.76141357 129.18656921]
[149.20556641 139.95317078]
[159.64971924 150.71977234]
[174.50708008 147.08573914]
[189.09228516 151.34817505]
[199.51640320 162.26625061]
[203.05232239 176.83859253]
[198.84773254 191.12799072]
[209.29187012 201.89459229]
[219.73602295 212.66119385]
[230.18017578 223.42781067]
[240.62432861 234.19441223]
[251.06846619 244.96101379]
[266.23083496 249.47911072]
[269.53890991 264.00170898]
[289.55877686 263.17971802]
[303.58114624 277.06500244]
[302.97463989 296.48663330]
[314.05374146 306.59866333]
[329.46264648 310.18704224]
[333.64709473 324.48178101]
[344.72619629 334.59381104]
[355.80532837 344.70587158]
[366.88442993 354.81790161]
[377.96353149 364.92993164]
[393.37243652 368.51831055]
[397.55688477 382.81304932]
[408.63598633 392.92507935]
[419.71511841 403.03713989]
[430.79421997 413.14916992]
[441.87332153 423.26119995]
[457.64776611 422.29043579]
[469.43292236 432.82067871]
[470.23684692 448.60449219]
[459.58261108 460.27767944]
[443.79116821 460.91467285]
[432.23129272 450.13760376]
[431.76129150 434.34033203]
[420.68215942 424.22827148]
[409.60305786 414.11624146]
[398.52395630 404.00421143]
[387.44485474 393.89215088]
[372.82839966 391.02706909]
[367.85150146 376.00906372]
[356.77236938 365.89700317]
[345.69326782 355.78497314]
[334.61416626 345.67291260]
[323.53506470 335.56088257]
[308.91860962 332.69580078]
[303.94171143 317.67776489]
[292.86257935 307.56573486]
[283.01510620 310.80267334]
[272.63531494 309.61996460]
[263.62973022 304.16665649]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[4 113]
[5 112]
[6 111]
[7 110]
[8 109]
[9 108]
[14 103]
[15 102]
[16 101]
[17 100]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[53 97]
[54 96]
[55 95]
[56 94]
[58 92]
[59 90]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[69 78]
[70 77]
[118 151]
[119 150]
[121 148]
[122 147]
[123 146]
[124 145]
[125 144]
[127 142]
[128 141]
[129 140]
[130 139]
[131 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
