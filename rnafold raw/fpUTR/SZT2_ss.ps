%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGCUGGGUGCCGAGGUAGCGAGGUCAGGGGUCAAGAGUGGAACACCCUCACUGGCCCGGGCCGGCGCGGGAGGGCUGUGUG\
) } def
/len { sequence length } bind def

/coor [
[115.96015167 266.17468262]
[126.91033936 255.40484619]
[123.07269287 240.90406799]
[119.23505402 226.40330505]
[108.49908447 216.07914734]
[112.44819641 200.75872803]
[108.61055756 186.25794983]
[104.79570770 183.02809143]
[103.12271118 177.27525330]
[105.06754303 170.54386902]
[102.31129456 155.79928589]
[99.55505371 141.05468750]
[96.79881287 126.31008911]
[94.04257202 111.56549072]
[85.52167511 123.91030121]
[72.07536316 130.55834961]
[57.09286118 129.83395386]
[44.35063171 121.91968536]
[37.06044388 108.81040955]
[37.05984116 93.81040955]
[44.34897995 80.70054626]
[57.09057236 72.78525543]
[72.07301331 72.05965424]
[85.51985931 78.70662689]
[94.04257202 91.05300140]
[96.79881287 76.30841064]
[99.55505371 61.56381226]
[102.31129456 46.81921387]
[95.62685394 35.60498810]
[98.38847351 23.25888443]
[108.54415131 16.41386032]
[111.84335327 1.78118038]
[115.14254761 -12.85149956]
[118.44174194 -27.48417854]
[121.74093628 -42.11685944]
[125.04013062 -56.74953842]
[119.09847260 -74.05954742]
[131.22724915 -86.59829712]
[133.98348999 -101.34289551]
[136.73973083 -116.08749390]
[135.22538757 -125.34664154]
[139.87988281 -131.32159424]
[143.17909241 -145.95426941]
[137.79002380 -161.44265747]
[148.71215820 -173.67536926]
[164.70971680 -170.06843567]
[169.32580566 -154.33236694]
[157.81176758 -142.65507507]
[154.51257324 -128.02239990]
[151.48432922 -113.33124542]
[148.72808838 -98.58665466]
[145.97184753 -83.84205627]
[152.59283447 -73.53891754]
[150.24705505 -61.10709381]
[139.67280579 -53.45034409]
[136.37361145 -38.81766129]
[133.07441711 -24.18498421]
[129.77522278 -9.55230331]
[126.47602844 5.08037567]
[123.17683411 19.71305466]
[129.35848999 36.02607346]
[117.05589294 49.57545853]
[114.29965210 64.32005310]
[111.54341125 79.06465149]
[108.78716278 93.80924988]
[108.78716278 108.80924988]
[111.54341125 123.55384064]
[114.29965210 138.29844666]
[117.05589294 153.04302979]
[119.81213379 167.78762817]
[123.11133575 182.42031860]
[126.94897461 196.92108154]
[137.95944214 208.28244019]
[133.73582458 222.56565857]
[137.57347107 237.06643677]
[141.41111755 251.56721497]
[156.25515747 255.51055908]
[167.12745667 266.35900879]
[171.10343933 281.19433594]
[167.11358643 296.02593994]
[156.23112488 306.86419678]
[141.38340759 310.79364014]
[126.56437683 306.75732422]
[115.76028442 295.84094238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[6 72]
[7 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[25 65]
[26 64]
[27 63]
[28 62]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[38 52]
[39 51]
[40 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
