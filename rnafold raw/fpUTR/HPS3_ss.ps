%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGGGCGGGGCCGGCUGGCGUUCACGUGACCCGGCGUCAUUGGCUCGCUCGCGGAAGUAGUCCUACAUUCGCGGUCAGCGCGGGGUCUCCGGGCGCCCUGCAGGGCGGGCAGGCUGUGCCAUCCCGCCGGACGUCGGG\
) } def
/len { sequence length } bind def

/coor [
[2.54525805 242.59120178]
[-9.54175377 243.79795837]
[-19.35317993 255.14414978]
[-29.16460419 266.49032593]
[-38.97602844 277.83651733]
[-36.46181870 291.11795044]
[-41.99917984 303.23486328]
[-53.34927368 309.83010864]
[-66.22971344 308.67581177]
[-76.29148865 319.80059814]
[-79.81004333 335.22558594]
[-94.08569336 339.47473145]
[-104.14746094 350.59951782]
[-114.20922852 361.72430420]
[-117.12364960 377.86239624]
[-132.64625549 383.15206909]
[-144.80871582 372.15179443]
[-141.09933472 356.17767334]
[-125.33401489 351.66250610]
[-115.27223969 340.53775024]
[-105.21047211 329.41296387]
[-102.41159821 314.78369141]
[-87.41626740 309.73883057]
[-77.35449219 298.61404419]
[-78.93472290 281.90728760]
[-67.75259399 268.94635010]
[-50.32221603 268.02508545]
[-40.51079178 256.67892456]
[-30.69936562 245.33271790]
[-20.88793945 233.98654175]
[-18.56005478 216.62742615]
[-1.18327713 210.64814758]
[8.37293148 199.08619690]
[17.92914009 187.52423096]
[27.48534966 175.96228027]
[37.04155731 164.40031433]
[46.59776688 152.83836365]
[56.15397263 141.27639771]
[65.71018219 129.71444702]
[75.26638794 118.15248871]
[69.11324310 107.57109070]
[67.45911407 95.00329590]
[70.89045715 82.34815979]
[79.19947052 71.64719391]
[91.36785889 64.75608063]
[86.44748688 50.58604431]
[81.52711487 36.41600800]
[69.69112396 25.91743660]
[72.82544708 11.35634899]
[67.90507507 -2.81368685]
[62.08818054 -9.96352100]
[63.03676224 -17.35457230]
[58.43330383 -31.63071251]
[53.82984543 -45.90685272]
[49.22639084 -60.18299103]
[44.62293243 -74.45912933]
[40.01947403 -88.73527527]
[28.42032051 -99.49492645]
[31.87827492 -113.98257446]
[27.27481651 -128.25871277]
[22.67135811 -142.53485107]
[10.15256691 -153.12786865]
[13.33286381 -169.21568298]
[28.94063187 -174.24853516]
[40.91993713 -163.04905701]
[36.94749832 -147.13830566]
[41.55095673 -132.86216736]
[46.15441513 -118.58602905]
[57.42429733 -108.84749603]
[54.29561234 -93.33872986]
[58.89907074 -79.06259155]
[63.50252914 -64.78645325]
[68.10598755 -50.51031113]
[72.70944214 -36.23416901]
[77.31290436 -21.95803070]
[82.07511139 -7.73405981]
[86.99548340 6.43597651]
[98.47953796 15.92101002]
[95.69715118 31.49563408]
[100.61752319 45.66566849]
[105.53789520 59.83570480]
[119.76186371 64.59791565]
[132.22229004 56.24700546]
[144.68272400 47.89609146]
[157.14314270 39.54517746]
[169.60357666 31.19426346]
[182.06399536 22.84334946]
[194.52442932 14.49243641]
[194.97744751 -1.01802433]
[204.48738098 -13.27937126]
[219.39749146 -17.57686615]
[233.97451782 -12.25803375]
[242.61329651 0.63192493]
[241.99205017 16.13655853]
[232.34965515 28.29401970]
[217.39381409 32.42951584]
[202.87533569 26.95286369]
[190.41491699 35.30377579]
[177.95448303 43.65468979]
[165.49406433 52.00560379]
[153.03363037 60.35651779]
[140.57321167 68.70742798]
[128.11277771 77.05834198]
[132.25111389 87.98324585]
[132.53500366 99.06034851]
[129.31954956 109.03485107]
[142.13960266 116.82240295]
[154.95967102 124.60995483]
[167.77973938 132.39750671]
[180.59980774 140.18505859]
[193.41986084 147.97261047]
[208.59115601 144.44132996]
[221.48158264 152.52163696]
[224.75460815 167.00691223]
[237.57467651 174.79446411]
[250.39474487 182.58200073]
[267.07107544 185.63757324]
[268.75137329 202.50805664]
[253.00535583 208.79290771]
[242.60719299 195.40206909]
[229.78712463 187.61451721]
[216.96707153 179.82696533]
[202.60365295 183.59896851]
[189.49134827 175.88391113]
[185.63230896 160.79267883]
[172.81225586 153.00512695]
[159.99218750 145.21757507]
[147.17211914 137.43002319]
[134.35205078 129.64247131]
[121.53199005 121.85491943]
[105.10298920 130.25267029]
[86.82834625 127.70869446]
[77.27214050 139.27066040]
[67.71593475 150.83261108]
[58.15972519 162.39456177]
[48.60351562 173.95652771]
[39.04730606 185.51847839]
[29.49109840 197.08044434]
[19.93488884 208.64239502]
[10.37868118 220.20436096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[9 24]
[10 23]
[12 21]
[13 20]
[14 19]
[32 140]
[33 139]
[34 138]
[35 137]
[36 136]
[37 135]
[38 134]
[39 133]
[40 132]
[45 81]
[46 80]
[47 79]
[49 77]
[50 76]
[52 75]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[59 68]
[60 67]
[61 66]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
[111 125]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
