%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCGGGUAGCGGGGACGCGCACGCACCUUGCGCGUCUUCGCCCCUCCUGCGGUUGCCAGGCAACCGGCCCCGGAAGUUGCGGCAGGUGCGUCCGCAGCGGGCGCCGCUAGCCAGCGGAAG\
) } def
/len { sequence length } bind def

/coor [
[73.08618164 115.97634888]
[58.72860718 120.31916046]
[54.08373642 130.31622314]
[44.85733795 135.93449402]
[34.28531265 135.49073792]
[25.91936302 129.37954712]
[11.35876942 132.98359680]
[-3.20182490 136.58763123]
[-8.36559200 141.01313782]
[-14.12266064 141.93560791]
[-18.59788513 139.98367310]
[-33.32350922 142.83953857]
[-48.04913330 145.69540405]
[-62.77476120 148.55126953]
[-77.50038147 151.40713501]
[-92.22601318 154.26300049]
[-106.95163727 157.11886597]
[-121.67726135 159.97473145]
[-136.40287781 162.83061218]
[-151.12850952 165.68647766]
[-165.85412598 168.54234314]
[-180.57975769 171.39820862]
[-195.30538940 174.25407410]
[-202.73373413 188.01464844]
[-217.28829956 193.73292542]
[-232.09684753 188.70890808]
[-240.16725159 175.31477356]
[-237.68888855 159.87483215]
[-225.83198547 149.67935181]
[-210.19500732 149.54232788]
[-198.16125488 159.52844238]
[-183.43562317 156.67257690]
[-168.71000671 153.81671143]
[-153.98437500 150.96084595]
[-139.25874329 148.10498047]
[-124.53312683 145.24911499]
[-109.80750275 142.39324951]
[-95.08187866 139.53738403]
[-80.35625458 136.68151855]
[-65.63062286 133.82565308]
[-50.90500259 130.96978760]
[-36.17937851 128.11390686]
[-21.45375252 125.25804901]
[-6.80586529 122.02703857]
[7.75472832 118.42299652]
[22.31532288 114.81896210]
[35.09125900 100.39625549]
[54.38579559 105.96158600]
[68.74337006 101.61877441]
[71.04129791 83.96050262]
[83.03649902 69.48925781]
[101.83975983 63.33129120]
[100.69152069 48.37530518]
[99.54328156 33.41931915]
[98.39504242 18.46333122]
[97.24680328 3.50734496]
[96.09856415 -11.44864178]
[94.95032501 -26.40462875]
[87.70925140 -41.73444366]
[100.43544769 -52.93624496]
[114.72244263 -43.80836868]
[109.90631104 -27.55286789]
[111.05455017 -12.59688091]
[112.20278931 2.35910630]
[113.35102844 17.31509399]
[114.49926758 32.27108002]
[115.64750671 47.22706604]
[116.79574585 62.18305588]
[129.17388916 70.65544891]
[143.53146362 66.31263733]
[157.88903809 61.96982956]
[172.24661255 57.62701797]
[160.88406372 47.83454514]
[161.19453430 32.83776093]
[172.95263672 23.52394485]
[187.62228394 26.65469360]
[194.55368042 39.95716476]
[188.71600342 53.77303314]
[203.50975037 51.29417038]
[218.30351257 48.81530762]
[233.09727478 46.33644485]
[247.89102173 43.85758209]
[262.68478394 41.37871933]
[277.47854614 38.89985657]
[292.23944092 36.23227310]
[300.87380981 22.99509430]
[316.35635376 19.82222939]
[329.50149536 28.59608459]
[332.51049805 44.11128616]
[323.59814453 57.16294098]
[308.05200195 60.00773239]
[295.09530640 50.95789719]
[289.05776978 55.37144089]
[279.95739746 53.69361115]
[265.16363525 56.17247391]
[250.36988831 58.65133667]
[235.57612610 61.13019943]
[220.78237915 63.60906219]
[205.98861694 66.08792877]
[191.19487000 68.56678772]
[176.58943176 71.98458862]
[162.23185730 76.32740784]
[147.87428284 80.67021942]
[133.51670837 85.01303101]
[133.42024231 106.28822327]
[121.97490692 122.28678131]
[129.64018250 135.18032837]
[137.30546570 148.07386780]
[144.97074890 160.96740723]
[152.63603210 173.86096191]
[167.19841003 181.40213013]
[167.67835999 197.79425049]
[153.58215332 206.17451477]
[139.41075134 197.92202759]
[139.74247742 181.52624512]
[132.07720947 168.63269043]
[124.41192627 155.73915100]
[116.74664307 142.84561157]
[109.08135986 129.95205688]
[100.89163208 131.28581238]
[92.63924408 130.42065430]
[84.90419006 127.41739655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[6 46]
[7 45]
[8 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[69 104]
[70 103]
[71 102]
[72 101]
[78 100]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[85 92]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
