%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUAGCGCCAGCGCGCUGUGACGUAAUGUGAGGGGUCUCCCGGCAGGGCUGAGCUGGACCA\
) } def
/len { sequence length } bind def

/coor [
[106.26035309 274.69494629]
[104.76683807 259.76947021]
[95.80075836 247.87582397]
[102.12555695 233.37385559]
[100.63204193 218.44839478]
[99.13851929 203.52291870]
[97.64500427 188.59745789]
[88.34860229 180.49063110]
[87.18695068 167.80305481]
[95.36067963 157.50624084]
[94.61299133 142.52488708]
[93.86530304 127.54352570]
[93.11761475 112.56217194]
[85.69386292 100.71398926]
[91.90103149 88.18551636]
[90.78007507 73.22745514]
[89.28656006 58.30199432]
[87.79304504 43.37653351]
[86.29952240 28.45107269]
[73.67596436 13.07605743]
[81.43505096 -4.37627602]
[78.46286011 -19.07886314]
[75.49066925 -33.78145218]
[65.17233276 -45.77488327]
[70.23435974 -59.78292084]
[56.06698990 -66.11263275]
[48.35505295 -79.57761383]
[50.06394577 -95.00029755]
[60.53656769 -106.45035553]
[75.74597931 -109.52500916]
[89.84384918 -103.04197693]
[97.40926361 -89.49413300]
[95.53316498 -74.09088898]
[84.93694305 -62.75511551]
[95.04269409 -51.81330872]
[90.19326019 -36.75364304]
[93.16545105 -22.05105591]
[96.13764191 -7.34846830]
[105.50183105 -2.20536685]
[110.40065002 7.54070234]
[108.88036346 18.56878662]
[101.22498322 26.95755577]
[102.71850586 41.88301849]
[104.21202087 56.80847931]
[105.70553589 71.73394012]
[109.65660095 78.32273865]
[106.88238525 87.43782806]
[114.30613708 99.28601074]
[108.09896851 111.81448364]
[108.84665680 126.79583740]
[109.59434509 141.77719116]
[110.34203339 156.75854492]
[120.72088623 171.75045776]
[112.57046509 187.10394287]
[114.06398773 202.02940369]
[115.55750275 216.95486450]
[117.05101776 231.88032532]
[126.12392426 244.84153748]
[119.69229889 258.27593994]
[121.18582153 273.20141602]
[128.77917480 288.35983276]
[116.31522369 299.85269165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[4 57]
[5 56]
[6 55]
[7 54]
[10 52]
[11 51]
[12 50]
[13 49]
[15 47]
[16 45]
[17 44]
[18 43]
[19 42]
[21 38]
[22 37]
[23 36]
[25 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
