%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGACGCCCCGCCCCGCUCCGCGCCCCGGGCAGCCGUGUGCAGGCGCCUGCGGGCGGUAUCCUCGGCGACGCCGUAUGGCUUCCAGGGCGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 242.06028748]
[92.50000000 226.22116089]
[92.50000000 211.22116089]
[81.81912994 200.90348816]
[81.60544586 185.69134521]
[92.50000000 174.55822754]
[92.50000000 159.55822754]
[92.50000000 144.55822754]
[92.50000000 129.55822754]
[92.50000000 114.55821991]
[88.42254639 100.12304688]
[80.57471466 87.33979034]
[72.72688293 74.55654144]
[64.87905121 61.77328873]
[50.17413330 65.26939392]
[35.12894821 64.05083466]
[21.21590424 58.24949265]
[9.79270458 48.44512558]
[1.96986604 35.60745621]
[-1.49724424 21.00026321]
[-0.28132457 6.05698061]
[5.48600388 -7.75996733]
[15.22831631 -19.10229301]
[7.38048458 -31.88554382]
[-0.46734712 -44.66879654]
[-8.31517887 -57.45204926]
[-16.16300964 -70.23529816]
[-24.21681213 -82.88980103]
[-32.47447586 -95.41221619]
[-40.73213577 -107.93463898]
[-48.98979950 -120.45706177]
[-57.24745941 -132.97947693]
[-64.72969818 -138.55422974]
[-65.56209564 -146.04380798]
[-73.40992737 -158.82705688]
[-81.25775909 -171.61030579]
[-96.75100708 -173.73005676]
[-107.21862793 -185.34739685]
[-107.71813965 -200.97700500]
[-98.01368713 -213.23904419]
[-82.68740845 -216.34375000]
[-68.97590637 -208.82518005]
[-63.35334015 -194.23338318]
[-68.47450256 -179.45814514]
[-60.62667465 -166.67489624]
[-52.77884293 -153.89163208]
[-44.72504044 -141.23713684]
[-36.46737671 -128.71472168]
[-28.20971489 -116.19229889]
[-19.95205307 -103.66988373]
[-11.69439220 -91.14746094]
[-5.26184559 -87.22203064]
[-3.37975788 -78.08312988]
[4.46807384 -65.29988098]
[12.31590557 -52.51662827]
[20.16373634 -39.73337555]
[28.01156807 -26.95012474]
[42.53483200 -30.50480270]
[57.46595383 -29.39494514]
[71.34174347 -23.71669197]
[82.79853821 -14.01448727]
[90.70620728 -1.22889531]
[94.27962494 13.39457035]
[93.15660858 28.42677689]
[87.43459320 42.39463425]
[77.66230774 53.92545700]
[85.51013947 66.70870972]
[93.35797119 79.49195862]
[101.20580292 92.27521515]
[108.19902802 83.60763550]
[120.13200378 79.35125732]
[134.73489380 81.51172638]
[149.29454041 85.11959839]
[163.85418701 88.72747040]
[179.45306396 83.66713715]
[191.45208740 94.84548950]
[187.50767517 110.76320648]
[171.67752075 115.04550171]
[160.24630737 103.28711700]
[145.68666077 99.67924500]
[131.12702942 96.07137299]
[125.22026825 100.69308472]
[137.66175842 109.07218170]
[133.53721619 123.49397278]
[118.54671478 124.02769470]
[113.40675354 109.93650818]
[107.50000000 114.55821991]
[107.50000000 129.55822754]
[107.50000000 144.55822754]
[107.50000000 159.55822754]
[107.50000000 174.55822754]
[118.39455414 185.69134521]
[118.18087006 200.90348816]
[107.50000000 211.22116089]
[107.50000000 226.22116089]
[113.54634094 242.06028748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 95]
[3 94]
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 69]
[12 68]
[13 67]
[14 66]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[34 46]
[35 45]
[36 44]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
