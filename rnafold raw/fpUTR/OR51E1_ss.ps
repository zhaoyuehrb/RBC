%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGUAGGCGGAGACAGAGAGGCUGUAUUUCAGUGCAGCCUGCCAGACCUCUUCUGGAGGAAGACUGGACAAAGGGGGUCACACAUUCCUUCCAUACGGUUGAGCCUCUACCUGCCUGGUGCUGGUCACAGUUCAGCUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[146.72830200 308.83813477]
[159.35404968 300.73934937]
[174.33029175 299.89535522]
[187.78717041 306.52526855]
[175.42094421 298.22311401]
[176.64857483 282.44961548]
[170.35025024 268.83599854]
[164.05191040 255.22236633]
[157.75357056 241.60873413]
[151.45523071 227.99510193]
[145.15690613 214.38146973]
[138.85856628 200.76783752]
[133.15312195 195.98248291]
[132.57481384 186.79035950]
[121.39396667 182.05340576]
[116.30233002 170.58845520]
[120.54763031 158.35775757]
[114.84493256 144.48406982]
[109.14223480 130.61038208]
[103.43953705 116.73669434]
[90.18685150 109.71056366]
[75.50347137 112.77623749]
[60.82009125 115.84191132]
[46.13671112 118.90758514]
[31.45333290 121.97325897]
[16.76995277 125.03893280]
[2.08657289 128.10459900]
[-12.59680748 131.17027283]
[-27.28018761 134.23594666]
[-39.13941574 145.56250000]
[-54.79994965 140.69633484]
[-58.15158081 124.64334106]
[-45.74643326 113.91746521]
[-30.34585953 119.55257416]
[-15.66248035 116.48690033]
[-0.97910047 113.42122650]
[13.70427990 110.35555267]
[28.38765907 107.28987885]
[43.07104111 104.22420502]
[57.75441742 101.15853119]
[72.43779755 98.09285736]
[87.12117767 95.02718353]
[97.07736969 83.80781555]
[98.37571716 68.86411285]
[88.48568726 56.82977676]
[90.01527405 41.69323349]
[101.54911804 32.33876801]
[102.84745789 17.39506340]
[104.14580536 2.45135975]
[105.44414520 -12.49234486]
[94.94123840 -19.42594910]
[88.44615936 -30.12086678]
[87.15180206 -42.49357224]
[91.24485016 -54.16441345]
[99.88178253 -62.91529083]
[111.36186218 -67.11118317]
[113.30632782 -81.98461914]
[115.25079346 -96.85805511]
[117.19526672 -111.73149109]
[118.97849274 -126.62511444]
[120.60028076 -141.53718567]
[122.22206116 -156.44924927]
[123.84384918 -171.36132812]
[114.22750854 -180.85528564]
[111.89270782 -193.96730042]
[117.47496796 -205.84405518]
[128.72103882 -212.22084045]
[130.66549683 -227.09428406]
[132.44873047 -241.98789978]
[134.07051086 -256.89996338]
[135.69230652 -271.81204224]
[124.74033356 -282.97396851]
[123.57692719 -298.56820679]
[132.75140381 -311.23165894]
[147.93186951 -314.98501587]
[161.95056152 -308.05606079]
[168.18827820 -293.71643066]
[163.69976807 -278.73687744]
[150.60437012 -270.19024658]
[148.98258972 -255.27819824]
[147.36079407 -240.36611938]
[149.78244019 -233.32429504]
[145.53894043 -225.14981079]
[143.59446716 -210.27638245]
[154.40026855 -197.43310547]
[152.57356262 -180.40968323]
[138.75592041 -169.73953247]
[137.13414001 -154.82746887]
[135.51234436 -139.91539001]
[133.89056396 -125.00332642]
[136.31221008 -117.96150208]
[132.06869507 -109.78701782]
[130.12423706 -94.91358948]
[128.17976379 -80.04015350]
[126.23529816 -65.16671753]
[139.58613586 -53.69682312]
[143.46807861 -36.36880493]
[136.15933228 -20.01378250]
[120.38784790 -11.19400215]
[119.08950806 3.74970245]
[117.79116821 18.69340706]
[116.49282074 33.63711166]
[126.24054718 44.84056473]
[125.13672638 60.01410294]
[113.31941986 70.16245270]
[112.02108002 85.10615540]
[117.31322479 111.03398895]
[123.01592255 124.90767670]
[128.71861267 138.78137207]
[134.42131042 152.65505981]
[149.24806213 163.51721191]
[146.32170105 180.78843689]
[152.47219849 194.46949768]
[158.77053833 208.08312988]
[165.06886292 221.69676208]
[171.36720276 235.31039429]
[177.66554260 248.92402649]
[183.96388245 262.53765869]
[190.26220703 276.15127563]
[203.07893372 285.42718506]
[201.40080261 300.22692871]
[209.13410950 313.07980347]
[218.21171570 325.02120972]
[227.28933716 336.96258545]
[236.36694336 348.90399170]
[245.44456482 360.84539795]
[261.07168579 361.41723633]
[272.64047241 371.93850708]
[274.68847656 387.44140625]
[266.24871826 400.60589600]
[251.30616760 405.21615601]
[236.91625977 399.09533691]
[229.87345886 385.13348389]
[233.50315857 369.92300415]
[224.42555237 357.98159790]
[215.34793091 346.04019165]
[206.27032471 334.09881592]
[197.19270325 322.15740967]
[196.74743652 337.15078735]
[188.98742676 349.98754883]
[175.91841125 357.34967041]
[160.91841125 357.33425903]
[147.86456299 349.94531250]
[140.13092041 337.09265137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 121]
[6 119]
[7 118]
[8 117]
[9 116]
[10 115]
[11 114]
[12 113]
[14 112]
[17 110]
[18 109]
[19 108]
[20 107]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[43 106]
[44 105]
[47 102]
[48 101]
[49 100]
[50 99]
[56 95]
[57 94]
[58 93]
[59 92]
[60 90]
[61 89]
[62 88]
[63 87]
[67 84]
[68 83]
[69 81]
[70 80]
[71 79]
[122 138]
[123 137]
[124 136]
[125 135]
[126 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
