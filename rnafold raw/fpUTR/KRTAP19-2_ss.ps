%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAACCCAACUCACUAUCUCUGACACCGUGAGCUACUAGGGCAGCUACUGUGGAGGUCUGGGCUAUGGCUGUGGAGGCUUUGGUGGC\
) } def
/len { sequence length } bind def

/coor [
[-72.44789886 232.83210754]
[-72.97703552 247.82276917]
[-79.77883148 261.19195557]
[-91.58437347 270.44558716]
[-106.19123840 273.85723877]
[-120.87439728 270.79052734]
[-132.89459229 261.81753540]
[-140.00936890 248.61221313]
[-140.89140320 233.63816833]
[-135.37614441 219.68891907]
[-124.49184418 209.36637878]
[-139.48951721 209.63110352]
[-154.48716736 209.89582825]
[-169.48483276 210.16055298]
[-184.48249817 210.42529297]
[-190.39129639 224.46116638]
[-201.50259399 234.87553406]
[-215.89129639 239.86401367]
[-231.06448364 238.56234741]
[-244.39329529 231.19602966]
[-253.56845093 219.04133606]
[-257.00027466 204.20414734]
[-254.09420776 189.25508118]
[-245.35372925 176.78414917]
[-232.29319763 168.95204163]
[-217.17539978 167.11569214]
[-202.61959839 171.59327698]
[-191.14768982 181.60900879]
[-184.74722290 195.42762756]
[-169.74955750 195.16290283]
[-154.75190735 194.89816284]
[-139.75424194 194.63343811]
[-124.75657654 194.36871338]
[-110.14967346 190.95719910]
[-96.58629608 184.55134583]
[-83.02292633 178.14550781]
[-69.45954895 171.73965454]
[-55.89617538 165.33381653]
[-42.33279800 158.92796326]
[-28.76942444 152.52212524]
[-15.20604992 146.11627197]
[-1.64267576 139.71043396]
[11.92069912 133.30458069]
[16.68886948 119.24043274]
[30.35280609 112.55078125]
[45.07224274 117.64743805]
[58.63562012 111.24159241]
[72.19898987 104.83573914]
[85.76236725 98.42989349]
[93.88286591 87.04792786]
[107.83178711 88.00672913]
[121.39515686 81.60088348]
[130.56935120 68.71117401]
[145.38194275 70.27217102]
[154.55613708 57.38245392]
[169.36871338 58.94345093]
[182.93208313 52.53760529]
[196.49546814 46.13175964]
[205.38581848 32.35157394]
[221.74942017 33.43089676]
[228.75277710 48.25941467]
[219.19145203 61.58282089]
[202.90130615 59.69513321]
[189.33793640 66.10098267]
[175.77456665 72.50682831]
[167.57051086 84.93834686]
[151.78778076 83.83554077]
[143.58372498 96.26706696]
[127.80101013 95.16426086]
[114.23763275 101.57010651]
[106.11713409 112.95207214]
[92.16821289 111.99327087]
[78.60484314 118.39911652]
[65.04146576 124.80496216]
[51.47809219 131.21081543]
[46.06383133 145.81640625]
[32.21738434 152.11962891]
[18.32654572 146.86795044]
[4.76317072 153.27380371]
[-8.80020332 159.67964172]
[-22.36357880 166.08549500]
[-35.92695236 172.49134827]
[-49.49032593 178.89718628]
[-63.05370331 185.30303955]
[-76.61707306 191.70887756]
[-90.18045044 198.11473083]
[-103.74382782 204.52056885]
[-89.41386414 208.95364380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[34 87]
[35 86]
[36 85]
[37 84]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[46 75]
[47 74]
[48 73]
[49 72]
[51 70]
[52 69]
[54 67]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
