%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAAAUUCUCACUCAUUUGACUUCCCGCUGUUUAUCACCGCAGAUUACGGUUGCACCGUAAAAGGAGAGGUUCUGUUCCGUCGCGGGAUUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[26.94521523 296.54553223]
[22.29941940 310.90936279]
[13.94963264 323.48648071]
[2.51546168 333.34356689]
[-11.15460110 339.74917603]
[-26.04614449 342.22799683]
[-41.05411911 340.59603882]
[-55.06483459 334.97442627]
[-67.03859711 325.78033447]
[-76.08688354 313.69598389]
[-81.53824615 299.61816406]
[-82.98815155 284.59152222]
[-80.32901764 269.73110962]
[-73.75815582 256.13970947]
[-63.76318741 244.82585144]
[-51.08578873 236.62913513]
[-36.66671371 232.15779114]
[-21.57595444 231.74363708]
[-6.93334246 235.41738892]
[0.49642742 222.38671875]
[7.92619753 209.35604858]
[3.75813150 195.10252380]
[11.10734749 181.78172302]
[26.08601189 177.50651550]
[33.51578140 164.47584534]
[40.94555283 151.44515991]
[48.37532043 138.41448975]
[55.80509186 125.38381195]
[63.23485947 112.35313416]
[61.29703903 97.47883606]
[50.77666473 86.78670502]
[40.25629044 76.09456635]
[24.93167114 78.53089142]
[11.11705875 71.46434021]
[4.12445498 57.61215210]
[6.64265823 42.30077362]
[17.70336723 31.41774559]
[33.05351639 29.14780998]
[46.79065323 36.36380768]
[53.63257599 50.29103470]
[50.94842529 65.57419586]
[61.46879959 76.26632690]
[71.98917389 86.95846558]
[80.35164642 78.27017975]
[90.88946533 73.84794617]
[101.68685913 73.96330261]
[106.91847229 59.90519714]
[112.15009308 45.84709930]
[117.38170624 31.78899765]
[122.61332703 17.73089600]
[127.84494019 3.67279625]
[133.07655334 -10.38530445]
[132.93417358 -27.33865356]
[149.18556213 -32.16862869]
[158.32560730 -17.88942146]
[147.13465881 -5.15368795]
[141.90304565 8.90441227]
[136.67141724 22.96251297]
[131.43980408 37.02061462]
[126.20819092 51.07871246]
[120.97657776 65.13681793]
[115.74495697 79.19491577]
[119.65169525 82.83707428]
[122.73490143 87.19846344]
[124.86537933 92.09631348]
[139.86341858 91.85342407]
[154.86145020 91.61052704]
[169.85948181 91.36763000]
[178.66516113 78.59110260]
[193.31011963 73.46228790]
[208.16307068 77.95332336]
[217.51275635 90.33730316]
[217.76402283 105.85234070]
[208.82026672 118.53259277]
[194.12052917 123.50223541]
[179.31716919 118.85034180]
[170.10237122 106.36566162]
[155.10433960 106.60855865]
[140.10630798 106.85145569]
[125.10827637 107.09435272]
[118.65540314 119.92190552]
[105.93261719 127.87023163]
[90.28980255 128.06393433]
[76.26553345 119.78290558]
[68.83576965 132.81358337]
[61.40599823 145.84425354]
[53.97622681 158.87493896]
[46.54645538 171.90560913]
[39.11668777 184.93629456]
[43.06647491 200.00402832]
[35.34600449 213.11314392]
[20.95687294 216.78581238]
[13.52710342 229.81648254]
[6.09733343 242.84716797]
[16.71666145 253.57714844]
[24.04627609 266.77484131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 94]
[20 93]
[21 92]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 84]
[30 43]
[31 42]
[32 41]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[65 80]
[66 79]
[67 78]
[68 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
