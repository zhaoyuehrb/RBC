%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCGGGAGACUCUGCCGUCGGUGCGUGCGCGGACACGCACCCGUCCCCCUUGGUCUCGCCGCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[97.91683197 309.35223389]
[103.96317291 293.51309204]
[103.96317291 278.51309204]
[91.61818695 267.30917358]
[91.02991486 250.31478882]
[103.03204346 237.80258179]
[102.36853790 222.81726074]
[101.70503998 207.83195496]
[100.71019745 192.86497498]
[99.38449097 177.92367554]
[98.05879211 162.98237610]
[96.73309326 148.04107666]
[95.40738678 133.09976196]
[94.08168793 118.15846252]
[83.03829193 108.77819061]
[81.75770569 94.34536743]
[90.97701263 83.16723633]
[77.42443848 72.35363770]
[75.75826263 55.43090057]
[86.51175690 42.69164276]
[77.01602173 30.03693771]
[83.00074768 16.39757347]
[81.01544189 1.52953458]
[79.03013611 -13.33850288]
[76.71640015 -28.15898323]
[74.07537079 -42.92465210]
[71.43434143 -57.69032288]
[68.79331970 -72.45598602]
[66.15229034 -87.22165680]
[63.51126099 -101.98732758]
[50.40127945 -110.81364441]
[47.45431519 -126.34075165]
[56.41875076 -139.35668945]
[71.97614288 -142.13932800]
[84.89656830 -133.03778076]
[87.51457214 -117.45183563]
[78.27693176 -104.62835693]
[80.91796112 -89.86268616]
[83.55898285 -75.09701538]
[86.20001221 -60.33134842]
[88.84104156 -45.56568146]
[91.48207092 -30.80001068]
[95.90134430 -24.57378197]
[93.89817047 -15.32381153]
[95.88347626 -0.45577317]
[97.86878967 14.41226482]
[107.22252655 26.00350761]
[101.37979889 40.70633316]
[112.75016022 47.15218353]
[118.32338715 59.19170761]
[115.80735779 72.41799164]
[105.91831207 81.84153748]
[116.96170807 91.22180939]
[118.24229431 105.65463257]
[109.02298737 116.83276367]
[110.34869385 131.77406311]
[111.67439270 146.71536255]
[113.00009155 161.65667725]
[114.32579803 176.59797668]
[115.65149689 191.53927612]
[119.63564301 200.12422180]
[116.69036102 207.16844177]
[117.35385895 222.15376282]
[118.01735687 237.13908386]
[129.06665039 245.17088318]
[133.31109619 257.94778442]
[129.38037109 270.61904907]
[118.96317291 278.51309204]
[118.96317291 293.51309204]
[125.00951385 309.35223389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[6 64]
[7 63]
[8 62]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[17 52]
[20 48]
[22 46]
[23 45]
[24 44]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
