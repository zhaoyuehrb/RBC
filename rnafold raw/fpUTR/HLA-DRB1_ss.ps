%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUAACUUGGAAUGUGGGUGGAGGGGUUCAUAGUUCUCCCUGAGUGAGACUUGCCUGCUUCUCUGGCCCCUGGUCCUGUCCUGUUCUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[119.81639099 322.40301514]
[111.32931519 317.39953613]
[104.22891998 310.55221558]
[98.90794373 302.23205566]
[95.66249847 292.89172363]
[94.67557526 283.04095459]
[96.00679016 273.21865845]
[99.58873749 263.96359253]
[105.23043823 255.78457642]
[112.62750244 249.13276672]
[121.37853241 244.37658691]
[118.42177582 229.67089844]
[115.46501923 214.96519470]
[101.30744934 210.33607483]
[91.30126190 199.16772461]
[88.20833588 184.39273071]
[92.95734406 169.95861816]
[104.36800385 159.77313232]
[101.41124725 145.06742859]
[98.45449066 130.36172485]
[95.49773407 115.65602875]
[84.08435822 103.47476959]
[89.38226318 87.64502716]
[85.94090271 73.04512787]
[82.49954224 58.44523239]
[79.05818939 43.84533310]
[75.61682892 29.24543190]
[72.17546844 14.64553356]
[68.73410797 0.04563483]
[52.93399048 -4.49577045]
[41.60274124 -16.27775764]
[37.72528076 -32.06190491]
[42.25534439 -47.57421112]
[53.88300323 -58.66235352]
[49.96080399 -73.14048767]
[46.03860474 -87.61862183]
[40.67400742 -95.26230621]
[42.23455811 -102.64046478]
[38.79320145 -117.24036407]
[35.35184097 -131.84025574]
[31.66955948 -146.38127136]
[19.66648102 -157.55526733]
[23.60510063 -173.47441101]
[39.43370438 -177.76245117]
[50.86917877 -166.00822449]
[46.14769363 -150.30346680]
[51.03176880 -144.55731201]
[49.95174026 -135.28161621]
[53.39309692 -120.68172455]
[56.83445740 -106.08182526]
[60.51673889 -91.54081726]
[64.43894196 -77.06268311]
[68.36113739 -62.58455276]
[81.86433411 -59.92455673]
[92.93160248 -51.63216019]
[99.33887482 -39.30168152]
[99.76735687 -25.34587860]
[94.07457733 -12.52388573]
[83.33400726 -3.39572406]
[86.77536774 11.20417500]
[90.21672821 25.80407333]
[93.65808868 40.40397263]
[97.09944153 55.00387192]
[100.54080200 69.60376740]
[103.98216248 84.20366669]
[113.58536530 91.01003265]
[116.09603882 102.50980377]
[110.20343781 112.69927216]
[113.16018677 127.40497589]
[116.11694336 142.11067200]
[119.07369995 156.81637573]
[133.53431702 161.80014038]
[143.49305725 173.27708435]
[146.35099792 188.09931946]
[141.43894958 202.26716614]
[130.17071533 212.00843811]
[133.12747192 226.71414185]
[136.08422852 241.41984558]
[156.69786072 246.39259338]
[172.29724121 260.65789795]
[179.04566956 280.62023926]
[175.32537842 301.29394531]
[162.12484741 317.54830933]
[168.82397461 330.96923828]
[175.52311707 344.39016724]
[190.22259521 350.81704712]
[194.22348022 366.35321045]
[184.45661926 379.08065796]
[168.41432190 379.23599243]
[158.40286255 366.70004272]
[162.10217285 351.08929443]
[155.40303040 337.66836548]
[148.70390320 324.24743652]
[139.03083801 325.91778564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 78]
[12 77]
[13 76]
[18 71]
[19 70]
[20 69]
[21 68]
[23 65]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[34 53]
[35 52]
[36 51]
[38 50]
[39 49]
[40 48]
[41 46]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
