%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUAUCCCGGCGGGCCGCGCGCGCGGCCGCGUUUGAAUGGCCCUGAGUGGGACUCGGCCCAGAAGCCGAGGGACUCUCUAGGCUGCCGGGCGCUGGUCGUCAGCGCCGAGGCUGGGCUGAGGCGCCGCGGUACCAUGAGGCGCCGGUACUUAAGAGAUU\
) } def
/len { sequence length } bind def

/coor [
[72.61564636 587.58666992]
[65.93780518 574.04748535]
[63.16156006 559.20855713]
[64.49291992 544.17089844]
[69.83308411 530.05053711]
[78.78578949 517.89520264]
[90.68667603 508.60699463]
[104.65261841 502.87506104]
[102.90045929 487.97775269]
[101.14830017 473.08044434]
[99.39613342 458.18310547]
[97.64397430 443.28579712]
[95.89181519 428.38848877]
[82.19529724 405.96865845]
[93.49179077 387.00939941]
[89.44483948 372.56564331]
[85.39788818 358.12188721]
[81.35093689 343.67813110]
[77.30398560 329.23437500]
[73.25703430 314.79061890]
[68.39969635 309.16983032]
[69.27497864 300.02545166]
[65.51062012 285.50549316]
[61.74626160 270.98550415]
[57.98190689 256.46554565]
[45.16561508 248.67178345]
[30.54169464 252.00959778]
[15.91777706 255.34741211]
[1.29385817 258.68521118]
[-13.33006001 262.02304077]
[-19.30460167 276.34381104]
[-32.57313156 284.38903809]
[-48.03363037 283.06518555]
[-59.74121857 272.88125610]
[-63.19409180 257.75323486]
[-57.06455231 243.49812317]
[-43.70952606 235.59730530]
[-28.26429939 237.08880615]
[-16.66787529 247.39912415]
[-2.04395580 244.06130981]
[12.57996273 240.72349548]
[27.20388222 237.38568115]
[41.82780075 234.04786682]
[26.93338585 235.82449341]
[13.02070808 230.21759033]
[3.52035189 218.60969543]
[0.77490997 203.86308289]
[5.46135283 189.61396790]
[16.42409897 179.37588501]
[30.95995903 175.67335510]
[45.48468399 179.41932678]
[56.41677856 189.69012451]
[61.06060410 203.95318604]
[58.27161026 218.69041443]
[62.59961319 204.32836914]
[66.92761993 189.96632385]
[71.25562286 175.60427856]
[75.58362579 161.24223328]
[79.91162872 146.88018799]
[84.23963165 132.51814270]
[88.56764221 118.15608978]
[92.89564514 103.79404449]
[84.78695679 102.18504333]
[77.79159546 95.37770081]
[74.47278595 84.24144745]
[71.27780914 69.58565521]
[68.08283234 54.92987061]
[64.88785553 40.27408218]
[54.38868713 28.43862343]
[59.23754501 14.35537720]
[56.04256439 -0.30041075]
[52.84758377 -14.95619869]
[49.65260696 -29.61198616]
[40.37129974 -43.79978943]
[51.43531799 -56.64595032]
[66.84226990 -49.57049179]
[64.30839539 -32.80696487]
[67.50337219 -18.15117836]
[70.69834900 -3.49538994]
[73.89333344 11.16039753]
[84.16397095 21.94757652]
[79.54364014 37.07910156]
[82.73861694 51.73488998]
[85.93360138 66.39067841]
[89.12857819 81.04646301]
[103.61112976 84.95230865]
[113.74198914 73.89040375]
[123.87284088 62.82849503]
[127.40948486 44.78096771]
[144.30218506 40.10672379]
[154.21527100 28.84925270]
[164.12835693 17.59178162]
[174.04145813 6.33431101]
[183.95454407 -4.92316008]
[193.86763000 -16.18063164]
[203.78071594 -27.43810272]
[204.20306396 -43.47559357]
[217.09133911 -53.02923584]
[232.55874634 -48.77028656]
[238.74003601 -33.96585083]
[230.89343262 -19.97262573]
[215.03819275 -17.52501297]
[205.12510681 -6.26754141]
[195.21200562 4.98992968]
[185.29891968 16.24740028]
[175.38583374 27.50487137]
[165.47274780 38.76234436]
[155.55964661 50.01981354]
[156.00537109 62.13980865]
[147.79473877 71.60439301]
[134.93475342 72.95935059]
[124.80389404 84.02125549]
[114.67304230 95.08316040]
[107.25769043 108.12204742]
[102.92968750 122.48410034]
[98.60168457 136.84614563]
[94.27367401 151.20819092]
[89.94567108 165.57023621]
[85.61766815 179.93228149]
[81.28966522 194.29432678]
[76.96166229 208.65637207]
[72.63365936 223.01841736]
[72.50187683 252.70118713]
[76.26623535 267.22116089]
[80.03059387 281.74111938]
[83.79495239 296.26110840]
[87.70079041 310.74365234]
[91.74774170 325.18740845]
[95.79469299 339.63116455]
[99.84164429 354.07492065]
[103.88859558 368.51870728]
[107.93554688 382.96246338]
[124.62525177 388.27221680]
[132.94975281 407.31326294]
[144.85748291 416.43499756]
[161.17939758 418.02462769]
[167.71644592 433.06454468]
[157.74385071 446.08297729]
[141.52058411 443.68768311]
[135.73573303 428.34271240]
[123.82801819 419.22097778]
[110.78913116 426.63632202]
[112.54129028 441.53363037]
[114.29344940 456.43096924]
[116.04560852 471.32827759]
[117.79776764 486.22558594]
[119.54993439 501.12289429]
[134.46469116 503.45797729]
[148.19587708 509.73150635]
[159.72456360 519.47790527]
[168.19525146 531.97387695]
[172.97933960 546.29223633]
[173.72181702 561.37042236]
[170.36759949 576.08947754]
[163.16558838 589.35723877]
[152.65022278 600.18914795]
[139.60180664 607.78131104]
[124.98861694 611.57043457]
[109.89506531 611.27532959]
[95.44117737 606.91784668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 147]
[9 146]
[10 145]
[11 144]
[12 143]
[13 142]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[22 126]
[23 125]
[24 124]
[25 123]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[54 122]
[55 121]
[56 120]
[57 119]
[58 118]
[59 117]
[60 116]
[61 115]
[62 114]
[65 85]
[66 84]
[67 83]
[68 82]
[70 80]
[71 79]
[72 78]
[73 77]
[86 113]
[87 112]
[88 111]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
