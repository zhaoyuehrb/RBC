%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUUCCUCUUUUCCUCGGUUCCCAGUGUUCUGGCAGGUAAGGAACGCCGGCUCUUCGCCUCUCAGCGCGGCUUGUCCUUUGUUCCGGACGCCCGCUCCUCAGCCCUGCGGCUCCUGGGGUCGCUGCUGCAUCCCGCACGCCUCCACCGGCUGCAGACCC\
) } def
/len { sequence length } bind def

/coor [
[59.90420532 137.48297119]
[47.64965439 146.13317871]
[35.39510727 154.78337097]
[23.14056015 163.43357849]
[10.88601112 172.08378601]
[-1.36853731 180.73399353]
[-13.62308598 189.38420105]
[-25.87763405 198.03440857]
[-25.00838470 208.75611877]
[-28.66620445 218.78578186]
[-36.11972046 226.31539917]
[-45.96002579 230.01782227]
[-56.36666489 229.28034973]
[-65.44436646 224.30511475]
[-78.18401337 232.22354126]
[-90.92365265 240.14198303]
[-96.59625244 247.36744690]
[-103.99002838 248.08781433]
[-106.02013397 252.05618286]
[-108.93135071 254.86175537]
[-112.23935699 256.36929321]
[-115.46654510 256.61849976]
[-118.19966888 255.80601501]
[-131.65005493 262.44580078]
[-145.10044861 269.08560181]
[-158.55084229 275.72540283]
[-167.20120239 289.65750122]
[-183.58103943 288.86175537]
[-190.84016418 274.15676880]
[-181.51103210 260.66973877]
[-165.19064331 262.27502441]
[-151.74024963 255.63522339]
[-138.28985596 248.99542236]
[-124.83946991 242.35562134]
[-111.65837097 235.19609070]
[-98.84207916 227.40232849]
[-86.10243988 219.48390198]
[-73.36280060 211.56547546]
[-70.40171814 192.35411072]
[-54.06029892 181.27798462]
[-34.52783966 185.77984619]
[-22.27329063 177.12965393]
[-10.01874256 168.47944641]
[2.23580623 159.82923889]
[14.49035454 151.17903137]
[26.74490356 142.52882385]
[38.99945068 133.87863159]
[51.25400162 125.22841644]
[45.12287521 101.07095337]
[50.30680084 76.69266510]
[37.72408676 68.52717590]
[25.14137268 60.36167908]
[9.21372604 62.28252411]
[-2.11722898 50.92519379]
[-0.15935421 35.00205612]
[13.58543682 26.72798347]
[28.57331657 32.45013428]
[33.30686569 47.77896500]
[45.88957977 55.94445801]
[58.47229385 64.10995483]
[64.22306824 58.37480927]
[70.75718689 53.55106354]
[77.93159485 49.74434280]
[85.58920288 47.03799057]
[93.56233215 45.49126434]
[93.85501099 30.49412155]
[94.14768982 15.49697685]
[94.44036865 0.49983209]
[91.46726990 -8.19191170]
[94.88790894 -14.78630829]
[95.47315216 -29.77488708]
[96.05839539 -44.76346588]
[93.28746796 -50.85622025]
[93.94794464 -56.56491470]
[96.97022247 -60.32212067]
[98.13981628 -75.27645111]
[99.30940247 -90.23078918]
[100.47899628 -105.18511963]
[88.58784485 -115.15407562]
[84.85997009 -130.21669006]
[90.72882843 -144.58110046]
[103.93772125 -152.72387695]
[119.40755463 -151.51397705]
[131.18986511 -141.41661072]
[134.75411987 -126.31443024]
[128.72978210 -112.01454163]
[115.43332672 -104.01552582]
[114.26374054 -89.06119537]
[113.09414673 -74.10686493]
[111.92455292 -59.15253067]
[111.04697418 -44.17822266]
[110.46173096 -29.18964577]
[109.87648773 -14.20106697]
[109.43750763 0.79250848]
[109.14483643 15.78965282]
[108.85215759 30.78679657]
[108.55947876 45.78394318]
[118.45611572 48.30843735]
[127.71368408 52.62281799]
[136.01164246 58.57769012]
[143.06263733 65.96685791]
[148.62254333 74.53446960]
[152.49884033 83.98384857]
[154.55729675 93.98780823]
[154.72665405 104.19995117]
[153.00102234 114.26666260]
[166.81683350 120.10816193]
[180.63265991 125.94966125]
[194.44847107 131.79116821]
[208.26429749 137.63267517]
[222.08010864 143.47416687]
[235.89593506 149.31567383]
[249.71174622 155.15718079]
[264.20867920 149.45831299]
[278.13665771 155.57923889]
[283.48031616 169.43495178]
[297.29614258 175.27645874]
[311.11196899 181.11796570]
[324.92776489 186.95945740]
[338.74359131 192.80096436]
[354.46746826 191.04873657]
[363.17681885 203.13163757]
[376.99264526 208.97314453]
[386.16690063 209.44070435]
[391.01925659 215.06576538]
[404.71847534 221.17573547]
[418.41769409 227.28569031]
[431.79315186 219.41952515]
[447.23446655 220.95106506]
[458.80410767 231.29139709]
[462.05334473 246.46447754]
[455.73275757 260.63592529]
[442.27276611 268.35653687]
[426.84896851 266.65756226]
[415.39218140 256.19232178]
[412.30773926 240.98489380]
[398.60852051 234.87493896]
[384.90930176 228.76498413]
[371.15112305 222.78895569]
[357.33532715 216.94746399]
[342.59963989 219.11750793]
[332.90209961 206.61677551]
[319.08627319 200.77528381]
[305.27044678 194.93377686]
[291.45465088 189.09226990]
[277.63882446 183.25077820]
[263.97616577 189.07038879]
[249.88175964 183.34307861]
[243.87025452 168.97299194]
[230.05442810 163.13150024]
[216.23861694 157.28999329]
[202.42279053 151.44848633]
[188.60697937 145.60697937]
[174.79115295 139.76548767]
[160.97534180 133.92398071]
[147.15951538 128.08247375]
[136.39430237 141.08650208]
[122.18621063 150.20376587]
[105.87931824 154.57177734]
[89.01624298 153.77734375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[14 38]
[15 37]
[16 36]
[18 35]
[23 34]
[24 33]
[25 32]
[26 31]
[50 60]
[51 59]
[52 58]
[65 97]
[66 96]
[67 95]
[68 94]
[70 93]
[71 92]
[72 91]
[75 90]
[76 89]
[77 88]
[78 87]
[106 156]
[107 155]
[108 154]
[109 153]
[110 152]
[111 151]
[112 150]
[113 149]
[116 146]
[117 145]
[118 144]
[119 143]
[120 142]
[122 140]
[123 139]
[125 138]
[126 137]
[127 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
