%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUUAUUUCCGGUCUUUCGGAUGCUGACGCUCUCUUCCUGUCUUUGUGGCUCCGGAAAGGCGUUUGGGAUGCCAACG\
) } def
/len { sequence length } bind def

/coor [
[102.30169678 187.96099854]
[88.84748840 194.59306335]
[73.86972046 195.40937805]
[59.77442932 190.27879333]
[48.82590866 180.02551270]
[42.78293228 166.29661560]
[42.61625671 151.29754639]
[48.35265350 137.43775940]
[59.07062531 126.94370270]
[73.04696655 121.50141144]
[84.38989258 111.68621826]
[69.72988129 114.86177826]
[55.06987381 118.03733063]
[40.40986633 121.21289062]
[25.74985886 124.38845062]
[13.97579384 135.80349731]
[-1.72074866 131.05476379]
[-5.19251156 115.02731323]
[7.13195705 104.20883179]
[22.57430077 109.72843933]
[37.23431015 106.55288696]
[51.89431763 103.37732697]
[66.55432129 100.20176697]
[81.21433258 97.02620697]
[84.26557922 91.34036255]
[88.83644867 87.31148529]
[94.19165802 85.26249695]
[99.56691742 85.22514343]
[104.27491760 86.96131134]
[112.51754761 74.42899323]
[120.76018524 61.89667511]
[129.00282288 49.36435699]
[137.24545288 36.83203888]
[139.43562317 27.68793488]
[146.05859375 23.98216820]
[154.78097534 11.77888775]
[157.32406616 2.72658396]
[164.08573914 -0.71958727]
[173.27474976 -12.57547760]
[182.46376038 -24.43136787]
[191.65277100 -36.28725815]
[193.20217896 -56.20794296]
[211.02742004 -63.28302002]
[219.27005005 -75.81533813]
[227.51268005 -88.34765625]
[225.68972778 -104.28679657]
[237.11643982 -115.54777527]
[253.02725220 -113.49211884]
[261.21673584 -99.69676208]
[255.40261841 -84.74431610]
[240.04499817 -80.10501862]
[231.80236816 -67.57270050]
[223.55973816 -55.04038620]
[226.56602478 -44.94184875]
[223.31301880 -34.68600845]
[214.68574524 -27.89041328]
[203.50866699 -27.09824944]
[194.31965637 -15.24235916]
[185.13064575 -3.38646913]
[175.94163513 8.46942139]
[166.98425293 20.50126839]
[158.26187134 32.70455170]
[149.77777100 45.07467651]
[141.53514099 57.60699081]
[133.29249573 70.13931274]
[125.04986572 82.67162323]
[116.80723572 95.20394135]
[117.38886261 110.19266510]
[126.57787323 122.04855347]
[135.76687622 133.90444946]
[151.14433289 139.60232544]
[153.63143921 155.81178284]
[140.66967773 165.85791016]
[125.59299469 159.40611267]
[123.91098785 143.09344482]
[114.72198486 131.23756409]
[105.53297424 119.38166809]
[107.91307068 134.19163513]
[115.12176514 147.34590149]
[116.58617401 162.27424622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[35 62]
[36 61]
[38 60]
[39 59]
[40 58]
[41 57]
[43 53]
[44 52]
[45 51]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
