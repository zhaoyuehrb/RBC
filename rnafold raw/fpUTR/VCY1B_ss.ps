%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUAUACACAGGGAGGCCAGGCAGCCUGGAGUUAGUCGACCGUUGCGAGACGUUGAGCUGCGGCAG\
) } def
/len { sequence length } bind def

/coor [
[126.50968933 126.03575134]
[123.83351898 115.10773468]
[109.48562622 110.73304749]
[95.82247925 113.70123291]
[86.13968658 103.61484528]
[71.79179382 99.24015808]
[60.54357910 109.60475922]
[45.71561813 112.92565918]
[31.31202507 108.40870667]
[21.17111206 97.36253357]
[17.94260406 82.82147980]
[3.59470844 78.44679260]
[-10.75318623 74.07210541]
[-25.10108185 69.69741058]
[-38.92756271 76.87140656]
[-53.41604996 72.23046112]
[-60.17015076 59.00481415]
[-73.99929047 66.65534210]
[-89.16439056 62.20616913]
[-96.66828156 48.29691696]
[-92.05902100 33.17969894]
[-78.07121277 25.82328987]
[-63.00357056 30.59211731]
[-55.79545975 44.65692139]
[-42.81129456 37.44949341]
[-28.19816780 41.68165970]
[-20.72639275 55.34951782]
[-6.37849760 59.72420883]
[7.96939754 64.09889984]
[22.31729317 68.47358704]
[33.10953522 58.20746994]
[47.68836212 54.69837952]
[62.16185760 58.98608017]
[72.61451721 70.01506805]
[76.16648102 84.89226532]
[90.51437378 89.26695251]
[104.17752075 86.29876709]
[113.86031342 96.38515472]
[128.20820618 100.75984192]
[144.94105530 90.25508881]
[163.85661316 94.85050201]
[173.60833740 111.36009216]
[188.41827393 113.74032593]
[203.22822571 116.12056732]
[218.03816223 118.50080109]
[232.89126587 113.05138397]
[244.22949219 122.71024323]
[259.03945923 125.09048462]
[268.66989136 113.12594604]
[282.99813843 107.59453583]
[298.17001343 109.98417664]
[310.10430908 119.65207672]
[315.59075928 133.99760437]
[313.15356445 149.16189575]
[303.44833374 161.06582642]
[289.08566284 166.50730896]
[273.92907715 164.02259827]
[262.05563354 154.28007507]
[256.65921021 139.90043640]
[241.84925842 137.52018738]
[228.05548096 143.13986206]
[215.65792847 133.31074524]
[200.84799194 130.93051147]
[186.03804016 128.55027771]
[171.22808838 126.17003632]
[164.44300842 134.62113953]
[154.60649109 139.36447144]
[143.60353088 139.41209412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[5 36]
[6 35]
[11 30]
[12 29]
[13 28]
[14 27]
[17 24]
[42 65]
[43 64]
[44 63]
[45 62]
[47 60]
[48 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
