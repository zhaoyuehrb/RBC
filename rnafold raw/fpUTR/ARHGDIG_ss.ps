%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGCCGAGCGGGGCGGCGGCGGGGCGGGCGGCGGCUCCUCGGCGGCUCCGCGGCGCCCGGGCCGCGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[220.23681641 176.03158569]
[207.35099792 168.35330200]
[194.46519470 160.67503357]
[181.57939148 152.99676514]
[168.53764343 145.58642578]
[155.34553528 138.44721985]
[142.15342712 131.30801392]
[128.96131897 124.16880035]
[115.76921844 117.02958679]
[102.57711029 109.89038086]
[94.30258179 109.07884216]
[88.99629974 102.17375183]
[76.11049652 94.49547577]
[63.22468567 86.81719971]
[47.40898514 86.39985657]
[40.43618011 73.23819733]
[27.55036926 65.55992126]
[11.73466873 65.14257812]
[4.76186371 51.98092270]
[-8.12394524 44.30264664]
[-23.93964577 43.88530350]
[-30.91245079 30.72364426]
[-46.16968155 34.84584427]
[-59.83119202 26.89985847]
[-63.79185104 11.59990025]
[-55.70186996 -1.97683620]
[-40.36089325 -5.77551460]
[-26.87044716 2.45755386]
[-23.23417664 17.83783531]
[-8.34015369 17.70597839]
[-0.44566986 31.41683769]
[12.44013977 39.09511185]
[27.33416176 38.96325684]
[35.22864532 52.67411423]
[48.11445618 60.35239029]
[63.00847626 60.22053146]
[70.90296173 73.93139648]
[83.78877258 81.60967255]
[96.67457581 89.28794861]
[109.71632385 96.69827271]
[122.90843201 103.83747864]
[136.10054016 110.97669220]
[149.29264832 118.11590576]
[162.48474121 125.25511169]
[175.67684937 132.39433289]
[185.00292969 133.80067444]
[189.25765991 140.11094666]
[202.14347839 147.78923035]
[215.02928162 155.46749878]
[227.91508484 163.14578247]
[246.19132996 162.85081482]
[254.38374329 178.22871399]
[267.57583618 185.36791992]
[280.76794434 192.50714111]
[293.96005249 199.64634705]
[307.15216064 206.78555298]
[320.34426880 213.92477417]
[333.53637695 221.06398010]
[349.35580444 220.82737732]
[356.86657715 233.68965149]
[370.05868530 240.82885742]
[386.86651611 243.04985046]
[389.38519287 259.81567383]
[373.97183228 266.87716675]
[362.91946411 254.02096558]
[349.72735596 246.88175964]
[334.85150146 247.62899780]
[326.39715576 234.25608826]
[313.20504761 227.11688232]
[300.01293945 219.97766113]
[286.82083130 212.83845520]
[273.62875366 205.69924927]
[260.43664551 198.56002808]
[247.24452209 191.42082214]
[235.37786865 194.56782532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[12 39]
[13 38]
[14 37]
[16 35]
[17 34]
[19 32]
[20 31]
[22 29]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
