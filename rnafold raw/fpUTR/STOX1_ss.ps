%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGAUCCUCCCGCCGAGCGAGCGGCGUCGUAGCCGCCGCGCUCGCCGAGGCCCUGCGUUGCGGGCUCCCGGCCGCCGGCGAAAGC\
) } def
/len { sequence length } bind def

/coor [
[131.11524963 186.18713379]
[124.88402557 172.54266357]
[118.65280151 158.89817810]
[112.42157745 145.25369263]
[106.19035339 131.60922241]
[97.48761749 132.11154175]
[88.96891022 130.26182556]
[81.25817871 126.19555664]
[74.92021179 120.21057129]
[70.41923523 112.74524689]
[68.08492279 104.34638214]
[68.08826447 95.62916565]
[70.42900848 87.23209381]
[58.42088699 78.24292755]
[42.73648834 76.16681671]
[37.18457413 62.34562302]
[25.17645454 53.35645676]
[13.16833687 44.36729431]
[1.16021812 35.37812805]
[-10.84790039 26.38896179]
[-22.85601997 17.39979744]
[-41.08896637 15.74502468]
[-47.56653976 -0.45925269]
[-59.88785172 -9.01409245]
[-72.20916748 -17.56893158]
[-84.53047943 -26.12377167]
[-96.85179138 -34.67861176]
[-112.35851288 -31.62621117]
[-125.43505096 -40.50199890]
[-128.32333374 -56.04012299]
[-119.30979156 -69.02209473]
[-103.74199677 -71.74594116]
[-90.85604858 -62.59564590]
[-88.29695129 -46.99992371]
[-75.97563934 -38.44508362]
[-63.65432358 -29.89024353]
[-51.33301163 -21.33540344]
[-39.01170349 -12.78056431]
[-26.90923309 -14.60063648]
[-16.53197670 -7.37955427]
[-13.86685371 5.39167929]
[-1.85873544 14.38084412]
[10.14938354 23.37000847]
[22.15750122 32.35917282]
[34.16561890 41.34833908]
[46.17374039 50.33750534]
[60.99923706 51.77064514]
[67.41004944 66.23480988]
[79.41816711 75.22397614]
[102.87089539 67.91852570]
[124.65386963 79.27200317]
[138.06724548 72.55774689]
[151.48063660 65.84349060]
[164.89401245 59.12923050]
[178.30738831 52.41497040]
[184.75863647 45.62231064]
[192.32150269 45.71009827]
[205.96598816 39.47887421]
[217.86203003 27.39911652]
[232.76284790 35.48624420]
[229.11672974 52.04348373]
[212.19720459 53.12335205]
[198.55273438 59.35457993]
[185.02165222 65.82835388]
[171.60826111 72.54261017]
[158.19488525 79.25686646]
[144.78150940 85.97112274]
[131.36813354 92.68538666]
[131.84927368 104.80492401]
[127.81410217 116.24311829]
[119.83483124 125.37799072]
[126.06605530 139.02247620]
[132.29728699 152.66694641]
[138.52850342 166.31143188]
[144.75973511 179.95591736]
[154.34774780 182.14332581]
[161.65469360 188.51449585]
[165.02864075 197.45358276]
[163.79035950 206.78656006]
[158.36564636 214.30960083]
[163.10264587 228.54199219]
[175.72012329 239.01725769]
[172.69067383 255.13415527]
[157.13073730 260.31301880]
[145.04704285 249.22624207]
[148.87025452 233.27897644]
[144.13327026 219.04660034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[13 49]
[14 48]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[57 63]
[58 62]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
