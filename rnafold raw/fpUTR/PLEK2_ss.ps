%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCAGGGAGGCGUCGCCCUGCCGCGUCGGAGCUGCUUCCUGGGCGCCGUGGGCGCGGACUGCGCGGGCUGCGCGGGUGCCGAGGAGCGCGAGGCGCGGGGAAGGCGCACCUGGGGUGGCCCUGGCGUGCGGGCGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[101.59466553 237.34254456]
[87.10026550 233.48086548]
[79.40574646 220.60548401]
[74.20620728 234.67547607]
[69.00666809 248.74548340]
[74.38206482 263.86117554]
[65.79358673 277.41174316]
[49.82957840 279.00231934]
[38.73625946 267.41275024]
[41.02347565 251.53358459]
[54.93667221 243.54594421]
[60.13621140 229.47593689]
[65.33575439 215.40594482]
[69.59067535 201.02207947]
[72.88225555 186.38768005]
[76.17383575 171.75329590]
[79.46540833 157.11889648]
[82.75698853 142.48449707]
[86.04856873 127.85010529]
[89.34014130 113.21571350]
[87.84925079 98.28998566]
[75.15390015 88.84866333]
[77.02383423 74.07189941]
[70.90258026 60.37773514]
[64.78132629 46.68356705]
[58.66006851 32.98939514]
[52.53881454 19.29522896]
[46.41756058 5.60106039]
[40.29630661 -8.09310818]
[27.20138359 -11.44171906]
[18.57142067 -21.58955574]
[17.40437889 -34.66371155]
[23.90456390 -45.84226608]
[18.08775139 -59.66849518]
[11.82642651 -66.43013763]
[12.29894066 -73.86551666]
[6.78941679 -87.81704712]
[1.27989292 -101.76856995]
[-4.83031893 -108.66707611]
[-4.19343376 -116.09017944]
[-9.39297295 -130.16017151]
[-14.59251118 -144.23016357]
[-26.63373184 -154.49270630]
[-23.78787613 -169.11289978]
[-28.98741531 -183.18290710]
[-34.18695450 -197.25289917]
[-39.38649368 -211.32289124]
[-44.58603287 -225.39289856]
[-49.78556824 -239.46289062]
[-55.14043045 -253.47450256]
[-60.64995193 -267.42602539]
[-66.15947723 -281.37756348]
[-71.82299042 -295.26730347]
[-77.63980103 -309.09353638]
[-83.45661926 -322.91976929]
[-95.93999481 -332.63961792]
[-93.74362946 -347.37139893]
[-99.56044006 -361.19763184]
[-114.55249786 -365.64422607]
[-123.13571167 -378.71566772]
[-121.25733185 -394.24002075]
[-109.80429077 -404.88717651]
[-94.18435669 -405.62985229]
[-81.77278137 -396.11740112]
[-78.42993927 -380.84127808]
[-85.73420715 -367.01443481]
[-79.91739655 -353.18820190]
[-67.85007477 -344.45730591]
[-69.63038635 -328.73657227]
[-63.81357193 -314.91033936]
[-57.99676132 -301.08410645]
[-52.45983887 -296.09906006]
[-52.20794678 -286.88708496]
[-46.69842529 -272.93554688]
[-41.18889999 -258.98403931]
[-35.76361465 -253.87771606]
[-35.71557236 -244.66242981]
[-30.51603508 -230.59242249]
[-25.31649590 -216.52243042]
[-20.11695671 -202.45243835]
[-14.91741848 -188.38244629]
[-9.71788025 -174.31243896]
[1.95143533 -165.05628967]
[-0.52251506 -149.42970276]
[4.67702389 -135.35971069]
[9.87656212 -121.28971863]
[15.23142147 -107.27809906]
[20.74094582 -93.32656860]
[26.25046921 -79.37503815]
[31.91398430 -65.48530579]
[37.73079681 -51.65907669]
[53.53519440 -46.01463699]
[60.54000473 -30.39457321]
[53.99047470 -14.21436214]
[60.11172867 -0.52019393]
[66.23298645 13.17397404]
[72.35424042 26.86814308]
[78.47549438 40.56230927]
[84.59674835 54.25648117]
[90.71800232 67.95064545]
[102.97551727 76.41247559]
[101.54341888 92.16873169]
[106.08219147 89.25439453]
[112.39524841 88.78902435]
[119.29113007 91.50502014]
[125.33117676 97.60317230]
[138.26589966 105.19876862]
[151.20060730 112.79435730]
[164.13533020 120.38995361]
[179.95338440 120.70600128]
[187.01033020 133.82273865]
[199.94505310 141.41833496]
[215.76310730 141.73437500]
[222.82005310 154.85110474]
[235.75477600 162.44670105]
[248.68948364 170.04229736]
[265.08325195 169.62210083]
[273.41207886 183.74876404]
[265.10800171 197.88998413]
[248.71353149 197.49848938]
[241.09390259 182.97702026]
[228.15917969 175.38142395]
[215.22445679 167.78582764]
[200.33158875 168.01307678]
[192.34945679 154.35304260]
[179.41473389 146.75746155]
[164.52186584 146.98469543]
[156.53973389 133.32467651]
[143.60501099 125.72908020]
[130.67030334 118.13348389]
[117.73558044 110.53788757]
[103.97454071 116.50728607]
[100.68296051 131.14167786]
[97.39138031 145.77607727]
[94.09980774 160.41047668]
[90.80822754 175.04487610]
[87.51664734 189.67926025]
[84.22507477 204.31365967]
[97.68647766 197.69621277]
[111.94898987 202.34172058]
[118.93076324 215.61782837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 102]
[23 100]
[24 99]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[33 91]
[34 90]
[36 89]
[37 88]
[38 87]
[40 86]
[41 85]
[42 84]
[44 82]
[45 81]
[46 80]
[47 79]
[48 78]
[49 77]
[50 75]
[51 74]
[52 73]
[53 71]
[54 70]
[55 69]
[57 67]
[58 66]
[106 131]
[107 130]
[108 129]
[109 128]
[111 126]
[112 125]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
