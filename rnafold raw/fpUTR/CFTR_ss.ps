%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGAAGCAAAUGACAUCACAGCAGGUCAGAGAAAAAGGGUUGAGCGGCAGGCACCCAGAGUAGUAGGUCUUUGGCAUUAGGAGCUUGAGCCCAGACGGCCCUAGCAGGGACCCCAGCGCCCGAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[89.96118164 280.41534424]
[95.09290314 265.86651611]
[107.28969574 256.41970825]
[105.87454224 241.48661804]
[104.45938873 226.55352783]
[103.04423523 211.62042236]
[91.43759918 202.35643005]
[89.78970337 187.23231506]
[99.58532715 175.12101746]
[98.17017365 160.18792725]
[84.67621613 158.23329163]
[71.96792603 153.29293823]
[60.69689178 145.62016296]
[51.44099045 135.60838318]
[38.33411789 142.90289307]
[25.22724915 150.19740295]
[12.12037849 157.49192810]
[11.95875835 172.84996033]
[4.12596130 186.06143188]
[-9.27102852 193.57250977]
[-24.62848854 193.36274719]
[-37.81533813 185.48857117]
[-45.28438187 172.06811523]
[-45.02648544 156.71138000]
[-37.11101913 143.54928589]
[-23.66720772 136.12234497]
[-8.31136417 136.42837524]
[4.82586384 144.38505554]
[17.93273354 137.09053040]
[31.03960419 129.79602051]
[44.14647675 122.50151062]
[40.69889832 110.45530701]
[39.81895828 97.95641327]
[41.54475403 85.54599762]
[45.80155945 73.76141357]
[52.40506744 63.11292267]
[61.06935501 54.06157684]
[71.41927338 46.99928284]
[83.00668335 42.23183060]
[95.32987976 39.96564102]
[96.03824615 24.98237801]
[96.74661255 9.99911404]
[97.45497894 -4.98415089]
[98.16334534 -19.96741486]
[98.69470215 -34.95800018]
[99.04898834 -49.95381546]
[99.40326691 -64.94963074]
[99.75755310 -79.94544983]
[86.04353333 -84.48274231]
[74.18472290 -92.70278931]
[65.14344788 -103.92755890]
[59.65028381 -117.23565674]
[58.14503098 -131.53793335]
[60.74151230 -145.66662598]
[67.21903229 -158.47073364]
[77.04108429 -168.90975952]
[89.39978790 -176.13821411]
[103.28234863 -179.57421875]
[103.99071503 -194.55747986]
[104.69908142 -209.54074097]
[105.40744781 -224.52400208]
[106.11581421 -239.50727844]
[106.82417297 -254.49053955]
[94.63156891 -264.08843994]
[90.44146729 -279.02908325]
[95.86503601 -293.56747437]
[108.81681824 -302.11328125]
[124.31658173 -301.38049316]
[136.40435791 -291.65087891]
[140.43212891 -276.66567993]
[134.85116577 -262.18698120]
[121.80744171 -253.78216553]
[121.09907532 -238.79890442]
[120.39070892 -223.81564331]
[119.68234253 -208.83238220]
[118.97397614 -193.84910583]
[118.26560974 -178.86584473]
[132.93592834 -173.50492859]
[145.25608826 -163.87286377]
[154.02005005 -150.89741516]
[158.36520386 -135.83436584]
[157.85734558 -120.14595795]
[152.53393555 -105.35901642]
[142.90170288 -92.91629028]
[129.88836670 -84.03570557]
[114.75336456 -79.59116364]
[114.39908600 -64.59535217]
[114.04479980 -49.59953308]
[113.69052124 -34.60371780]
[116.70625305 -27.77741814]
[113.14660645 -19.25904846]
[112.43824005 -4.27578449]
[111.72987366 10.70748043]
[111.02150726 25.69074440]
[110.31314087 40.67400742]
[128.87445068 47.15872574]
[144.35734558 59.27703094]
[155.11114502 75.73696136]
[159.98936462 94.78365326]
[158.47190857 114.38648224]
[172.47772217 119.75648499]
[186.54598999 124.96070099]
[200.67474365 129.99841309]
[214.80348206 135.03611755]
[228.93223572 140.07382202]
[245.88201904 139.69821167]
[250.93511963 155.88160706]
[236.78302002 165.21723938]
[223.89453125 154.20257568]
[209.76577759 149.16487122]
[195.63702393 144.12715149]
[181.50828552 139.08944702]
[174.08067322 139.81306458]
[167.10771179 133.76229858]
[153.10189819 128.39230347]
[145.81764221 139.07272339]
[136.42147827 147.95216370]
[125.34653473 154.62130737]
[113.10327148 158.77276611]
[114.51842499 173.70587158]
[126.41471863 183.76150513]
[127.63716125 198.92594910]
[117.97733307 210.20527649]
[119.39248657 225.13836670]
[120.80764008 240.07147217]
[122.22278595 255.00456238]
[135.97698975 261.99209595]
[143.75028992 275.31796265]
[143.06227112 290.72998047]
[134.13246155 303.31021118]
[119.81032562 309.04434204]
[104.66602325 306.10263062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 126]
[4 125]
[5 124]
[6 123]
[9 120]
[10 119]
[14 31]
[15 30]
[16 29]
[17 28]
[40 95]
[41 94]
[42 93]
[43 92]
[44 91]
[45 89]
[46 88]
[47 87]
[48 86]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[100 115]
[101 114]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
