%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGGCGCUGCGGCCCCCCCAAUCCCCCGCCCCGUCCGGGCUGGGGCGGAGGAGCGGGCGGGGACCAAAGGUUGGUGUCUUUGCGCUCGGACCUUCGCCAGAGGGGCCGGGACAUC\
) } def
/len { sequence length } bind def

/coor [
[59.14351654 204.46052551]
[49.59614182 203.12944031]
[40.97433090 215.40399170]
[32.35251999 227.67852783]
[23.73070908 239.95306396]
[15.10889816 252.22761536]
[13.50818729 267.96762085]
[-0.13874283 273.93508911]
[-8.76055431 286.20962524]
[-9.67424870 302.58331299]
[-24.43114471 309.73635864]
[-37.85061264 300.31033325]
[-36.12785339 284.00192261]
[-21.03509521 277.58782959]
[-12.41328430 265.31329346]
[-11.42926311 250.45121765]
[2.83435655 243.60580444]
[11.45616722 231.33125305]
[20.07797813 219.05671692]
[28.69978905 206.78218079]
[37.32160187 194.50762939]
[31.95521164 174.90182495]
[42.71761322 157.32090759]
[63.18008804 153.06631470]
[70.44834900 139.94485474]
[77.71661377 126.82341766]
[84.98487854 113.70197296]
[80.84604645 99.28427124]
[67.72460175 92.01600647]
[54.60315704 84.74774170]
[41.48171234 77.47947693]
[28.36026573 70.21121216]
[15.23881817 62.94295120]
[2.11737227 55.67469025]
[-11.00407410 48.40642548]
[-25.53549004 54.18327332]
[-40.36415482 49.21892929]
[-48.48843002 35.85741043]
[-46.07227325 20.40761375]
[-34.25652695 10.16446304]
[-18.62022400 9.96445847]
[-6.54634619 19.90203857]
[-3.73581076 35.28498077]
[9.38563538 42.55324173]
[22.50708199 49.82150650]
[35.62852859 57.08977127]
[48.74997330 64.35803223]
[61.87142181 71.62629700]
[74.99286652 78.89456177]
[88.11431122 86.16281891]
[93.30312347 82.45652008]
[99.62068939 80.68835449]
[106.34622955 81.18916321]
[115.29173279 69.14848328]
[124.23724365 57.10781097]
[133.18275452 45.06713486]
[142.12826538 33.02646255]
[144.14741516 17.33462906]
[157.94836426 11.73257351]
[159.96751404 -3.95925856]
[173.76847839 -9.56131458]
[182.71398926 -21.60198975]
[191.65948486 -33.64266205]
[193.67864990 -49.33449554]
[207.47959900 -54.93655014]
[216.42510986 -66.97722626]
[225.37062073 -79.01789856]
[234.31613159 -91.05857849]
[243.26164246 -103.09925079]
[247.85411072 -119.41934204]
[264.80773926 -119.52420044]
[269.60171509 -103.26215363]
[255.30230713 -94.15373993]
[246.35679626 -82.11306763]
[237.41128540 -70.07238770]
[228.46577454 -58.03171539]
[219.52026367 -45.99104309]
[218.14096069 -31.16043854]
[203.70016479 -24.69715309]
[194.75465393 -12.65647888]
[185.80914307 -0.61580408]
[184.42984009 14.21479893]
[169.98904419 20.67808342]
[168.60974121 35.50868607]
[154.16894531 41.97197342]
[145.22343445 54.01264572]
[136.27792358 66.05332184]
[127.33241272 78.09399414]
[118.38690186 90.13467407]
[120.96977234 104.91062164]
[133.46948242 113.20262146]
[149.24653625 114.38375854]
[155.57516479 127.86699677]
[168.07487488 136.15899658]
[180.57458496 144.45100403]
[193.07429504 152.74299622]
[205.57400513 161.03500366]
[221.96620178 161.51249695]
[229.50953674 176.07374573]
[220.44409180 189.73937988]
[204.09561157 188.45137024]
[197.28199768 173.53471375]
[184.78228760 165.24270630]
[172.28257751 156.95071411]
[159.78288269 148.65870667]
[147.28317261 140.36669922]
[132.40017700 139.77867126]
[125.17748260 125.70233154]
[112.67777252 117.41033173]
[98.10632324 120.97023010]
[90.83805847 134.09167480]
[83.56979370 147.21311951]
[76.30152893 160.33456421]
[81.71585846 168.73081970]
[83.61506653 178.47966003]
[81.77033997 188.17942810]
[76.48796082 196.45190430]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[8 15]
[9 14]
[24 113]
[25 112]
[26 111]
[27 110]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[53 89]
[54 88]
[55 87]
[56 86]
[57 85]
[59 83]
[61 81]
[62 80]
[63 79]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
[90 109]
[91 108]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
