%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGAUUGGUGCUGCCUGGCGGCGGGGCGCGGGGCACGCUGGGACGUCUCGCUGGCGGGAGGCCACGGGCUUUCCACAGCGCGGGGGAACGGGAGGCUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[113.16156769 186.80853271]
[112.71282959 171.81524658]
[112.26409912 156.82196045]
[111.81536865 141.82867432]
[111.36663818 126.83539581]
[100.14064026 127.92466736]
[89.83200073 124.69525146]
[81.96253967 118.00832367]
[77.54310608 109.20394135]
[62.58504868 110.32489014]
[47.62699127 111.44584656]
[32.66893387 112.56679535]
[24.18439484 116.38217926]
[17.24780464 113.49069977]
[2.26290894 114.16367340]
[-12.72198677 114.83663940]
[-27.70688248 115.50961304]
[-42.69178009 116.18258667]
[-56.13092422 124.53124237]
[-69.19251251 117.37273407]
[-84.17740631 118.04570770]
[-99.16230774 118.71868134]
[-109.63865662 130.55175781]
[-125.41864777 131.42770386]
[-137.14030457 120.82682800]
[-137.84934998 105.03845215]
[-127.12515259 93.42953491]
[-111.33016205 92.88744354]
[-99.83527374 103.73378754]
[-84.85037994 103.06081390]
[-69.86548615 102.38784027]
[-57.49816132 94.08732605]
[-43.36474991 101.19769287]
[-28.37985611 100.52471924]
[-13.39495945 99.85174561]
[1.58993638 99.17877197]
[16.57483292 98.50579834]
[31.54798508 97.60874176]
[46.50604248 96.48778534]
[61.46409988 95.36683655]
[76.42215729 94.24588776]
[81.18502808 83.41361237]
[90.75444031 75.81245422]
[103.14550018 73.47926331]
[115.56589508 77.30656433]
[125.04505920 86.75615692]
[129.14326477 99.90496063]
[143.10636902 94.42484283]
[157.06947327 88.94472504]
[171.03257751 83.46460724]
[184.99568176 77.98449707]
[197.75588989 70.09923553]
[208.90306091 60.06227875]
[220.05023193 50.02532196]
[231.19740295 39.98836136]
[232.68484497 27.06840706]
[242.31428528 18.93880081]
[254.49574280 19.59686279]
[265.93820190 9.89786911]
[277.38064575 0.19887544]
[288.82308960 -9.50011826]
[300.26553345 -19.19911194]
[311.70797729 -28.89810753]
[323.15042114 -38.59709930]
[334.59286499 -48.29609299]
[342.76583862 -63.14999771]
[359.30175781 -59.40837479]
[360.28396606 -42.48290253]
[344.29183960 -36.85365295]
[332.84939575 -27.15465736]
[321.40695190 -17.45566368]
[309.96450806 -7.75666904]
[298.52206421 1.94232500]
[287.07962036 11.64131927]
[275.63717651 21.34031296]
[264.19473267 31.03930664]
[259.26779175 47.80901337]
[241.23435974 51.13553238]
[230.08718872 61.17249298]
[218.94001770 71.20944977]
[207.79284668 81.24641418]
[218.58865356 87.81281281]
[221.53405762 98.90317535]
[234.52444458 106.40317535]
[249.72341919 102.07114410]
[263.49313354 109.82814026]
[267.66421509 125.07207489]
[259.76205444 138.75898743]
[244.47488403 142.76867676]
[230.87228394 134.72227478]
[227.02444458 119.39355469]
[214.03405762 111.89355469]
[195.93449402 111.15512085]
[190.47579956 91.94760132]
[176.51269531 97.42771912]
[162.54959106 102.90782928]
[148.58648682 108.38794708]
[134.62338257 113.86806488]
[126.35992432 126.38666534]
[126.80865479 141.37994385]
[127.25738525 156.37322998]
[127.70612335 171.36651611]
[128.15484619 186.35980225]
[130.92080688 205.54312134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[5 99]
[9 41]
[10 40]
[11 39]
[12 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[20 31]
[21 30]
[22 29]
[47 98]
[48 97]
[49 96]
[50 95]
[51 94]
[52 81]
[53 80]
[54 79]
[55 78]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
