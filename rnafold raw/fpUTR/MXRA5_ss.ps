%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGCUGCCUCACCCCCGGCCCCGGGAAGGGCAUGGCCCCGGCAAACUCCCGGCCGUGACUCGCGCGCCCCGGCUCGGUGGAUGCUCCCGGCGCACCGCUCCCGUGUGCGGCGGCUUCCCAAGGACAGGUAUCCGAGAAUCAGGCACCCCGACAAG\
) } def
/len { sequence length } bind def

/coor [
[92.52565765 252.84884644]
[103.79446411 242.00689697]
[102.60271454 227.05432129]
[93.87869263 214.98200989]
[100.49510193 200.61073303]
[91.77108002 188.53842163]
[98.38749695 174.16714478]
[97.19573975 159.21456909]
[96.00399017 144.26197815]
[94.81224060 129.30940247]
[93.62048340 114.35681152]
[87.65394592 128.11909485]
[73.46899414 132.99629211]
[60.30079651 125.81307220]
[56.72257614 111.24610901]
[65.06394958 98.77929688]
[79.89379120 96.52908325]
[65.74259186 91.55479431]
[51.59139633 86.58050537]
[37.39144135 81.74714661]
[23.14414024 77.05519867]
[8.89683819 72.36325073]
[-2.98480558 77.47307587]
[-14.77761745 73.23194885]
[-20.31570244 62.43916702]
[-34.46690369 57.46487808]
[-48.61810303 52.49058914]
[-66.17284393 62.15811920]
[-84.91802979 55.97783661]
[-93.02771759 38.31595230]
[-107.45029449 34.19413757]
[-121.87286377 30.07232094]
[-136.33570862 26.09409142]
[-150.83737183 22.25984192]
[-165.33905029 18.42559242]
[-179.84072876 14.59134197]
[-194.34239197 10.75709248]
[-208.84407043 6.92284298]
[-223.34574890 3.08859372]
[-234.90164185 8.89765549]
[-246.92631531 5.36709976]
[-253.09796143 -5.07632780]
[-267.52053833 -9.19814396]
[-281.21304321 -1.30572462]
[-296.45401001 -5.48764706]
[-304.20123291 -19.26285172]
[-299.85839844 -34.45875168]
[-286.00207520 -42.05989075]
[-270.85293579 -37.55664825]
[-263.39871216 -23.62071800]
[-248.97613525 -19.49890137]
[-232.23632812 -24.68827057]
[-219.51148987 -11.41307926]
[-205.00982666 -7.57883024]
[-190.50814819 -3.74458075]
[-176.00646973 0.08966874]
[-161.50480652 3.92391825]
[-147.00312805 7.75816774]
[-132.50144958 11.59241676]
[-125.19103241 10.25450325]
[-117.75105286 15.64974689]
[-103.32847595 19.77156258]
[-88.90590668 23.89337921]
[-81.53496552 16.61528397]
[-71.72190857 13.05280018]
[-61.23699570 13.92060661]
[-52.00194168 19.12756348]
[-45.73767853 27.78106308]
[-43.64381409 38.33938980]
[-29.49261284 43.31367874]
[-15.34141445 48.28796768]
[1.67799461 44.10577393]
[13.58878708 58.11594772]
[27.83609009 62.80789566]
[42.08339310 67.49984741]
[49.46057510 66.60012054]
[56.56568527 72.42930603]
[70.71688080 77.40359497]
[84.86808014 82.37788391]
[113.99748230 80.11906433]
[127.70874023 74.03618622]
[141.41999817 67.95330811]
[155.13125610 61.87042618]
[168.84251404 55.78754807]
[182.55377197 49.70466995]
[196.26502991 43.62178802]
[209.97628784 37.53890991]
[214.40795898 13.69575596]
[243.20086670 3.32275796]
[255.08601379 -5.82836914]
[266.97116089 -14.97949600]
[273.18530273 -29.52923775]
[287.99002075 -31.16323090]
[299.87518311 -40.31435776]
[311.76031494 -49.46548462]
[323.64547729 -58.61661148]
[335.53063965 -67.76773834]
[347.32421875 -77.03657532]
[359.02508545 -86.42219543]
[364.46548462 -101.89261627]
[380.63116455 -104.64993286]
[390.89224243 -91.85765839]
[384.69302368 -76.67538452]
[368.41070557 -74.72133636]
[356.70983887 -65.33570862]
[353.44207764 -58.66082764]
[344.68176270 -55.88258743]
[332.79660034 -46.73146057]
[320.91143799 -37.58032990]
[309.02630615 -28.42920494]
[297.14114380 -19.27807808]
[291.77709961 -5.38288498]
[276.12228394 -3.09434295]
[264.23715210 6.05678415]
[252.35198975 15.20791149]
[254.26911926 22.45874786]
[258.10336304 36.96042252]
[260.02047729 44.21125793]
[274.87542725 46.29228973]
[289.73037720 48.37332535]
[306.25515747 44.58290482]
[314.47198486 59.41262054]
[302.49645996 71.41358185]
[287.64935303 63.22826767]
[272.79440308 61.14723206]
[257.93945312 59.06620026]
[240.61172485 65.31876373]
[225.07916260 61.45579910]
[216.05915833 51.25016403]
[202.34791565 57.33304596]
[188.63665771 63.41592407]
[174.92539978 69.49880219]
[161.21414185 75.58168793]
[147.50288391 81.66456604]
[133.79162598 87.74744415]
[120.08036804 93.83032227]
[135.00938416 92.37287140]
[147.06179810 101.30257416]
[150.01489258 116.00900269]
[142.34399414 128.89920044]
[128.00959778 133.31793213]
[114.41259003 126.98379517]
[108.57306671 113.16506195]
[109.76481628 128.11764526]
[110.95657349 143.07022095]
[112.14832306 158.02281189]
[113.34008026 172.97538757]
[122.14934540 186.11721802]
[115.44768524 199.41897583]
[124.25695801 212.56079102]
[117.55529785 225.86256409]
[118.74704742 240.81515503]
[131.59094238 249.73527527]
[135.64628601 264.83786011]
[128.99827576 278.99194336]
[114.78588867 285.51437378]
[99.71979523 281.32550049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[5 149]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[17 79]
[18 78]
[19 77]
[20 75]
[21 74]
[22 73]
[25 71]
[26 70]
[27 69]
[30 63]
[31 62]
[32 61]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[42 51]
[43 50]
[80 136]
[81 135]
[82 134]
[83 133]
[84 132]
[85 131]
[86 130]
[87 129]
[89 115]
[90 114]
[91 113]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
[98 105]
[99 104]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
