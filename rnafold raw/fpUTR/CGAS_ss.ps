%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUGGGGUUCCCCUUCGGGUCGCAGACUCUUGUGUGCCCGCCAGUAGUGCUUGGUUUCCAACAGCUGCUGCUGGCUCUUCCUCUUGCGGCCUUUUCCUGAAACGGAUUCUUCUUUCGGGGAACAGAAAGCGCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[98.39398193 153.14292908]
[79.44163513 149.03166199]
[71.74814606 161.90838623]
[64.05465698 174.78512573]
[56.36116791 187.66184998]
[48.66767883 200.53858948]
[40.97418976 213.41531372]
[33.28070068 226.29205322]
[25.58721352 239.16877747]
[28.09711456 255.01428223]
[17.16758156 266.75842285]
[1.18281686 265.39212036]
[-7.59503698 251.96345520]
[-2.43236136 236.77377319]
[12.71048069 231.47529602]
[20.40397072 218.59855652]
[28.09745979 205.72183228]
[35.79094696 192.84509277]
[43.48443604 179.96836853]
[51.17792511 167.09162903]
[58.87141800 154.21490479]
[66.56490326 141.33816528]
[55.95950317 129.78564453]
[49.18575287 115.64167786]
[34.37042618 117.98818970]
[19.55510139 120.33470917]
[7.13521338 130.13557434]
[-6.64574528 124.48451233]
[-21.46107101 126.83103180]
[-33.85814667 137.56623840]
[-49.26295090 131.94271851]
[-51.82834244 115.74546814]
[-38.91526794 105.63683319]
[-23.80758667 112.01570892]
[-8.99226189 109.66918945]
[2.36793566 100.03616333]
[17.20858574 105.51938629]
[32.02391052 103.17286682]
[46.83923721 100.82634735]
[49.35055923 83.83263397]
[57.14933014 68.52667999]
[69.42141724 56.50632095]
[62.61156082 43.14122391]
[55.80170059 29.77612686]
[48.99184418 16.41102791]
[42.18198776 3.04593062]
[35.37213135 -10.31916714]
[28.56227303 -23.68426514]
[21.75241470 -37.04936218]
[14.94255733 -50.41445923]
[7.98317575 -63.70231247]
[0.87514573 -76.91124725]
[-6.23288441 -90.12017822]
[-13.63550758 -103.16629791]
[-21.32899666 -116.04302979]
[-29.02248573 -128.91975403]
[-42.33683777 -139.41567993]
[-35.93688202 -155.11526489]
[-19.07916069 -153.31149292]
[-16.14575386 -136.61325073]
[-8.45226479 -123.73651886]
[-0.75877553 -110.85978699]
[3.64839721 -108.83222961]
[6.78859282 -103.97091675]
[6.97604895 -97.22821045]
[14.08407879 -84.01927185]
[21.19210815 -70.81034088]
[27.18106842 -66.37419128]
[28.30765533 -57.22431946]
[35.11751175 -43.85921860]
[41.92737198 -30.49412346]
[48.73722839 -17.12902451]
[55.54708481 -3.76392698]
[62.35694122 9.60117054]
[69.16680145 22.96626854]
[75.97665405 36.33136749]
[82.78651428 49.69646454]
[92.73059845 47.33211899]
[102.94335938 46.91434860]
[113.04733276 48.45859146]
[122.66909027 51.90777206]
[131.45300293 57.13441467]
[139.07443237 63.94534302]
[145.25169373 72.08882904]
[149.75648499 81.26390076]
[152.42230225 91.13143921]
[153.15063477 101.32675934]
[151.91453552 111.47303772]
[165.95805359 116.74365997]
[180.05982971 121.85639191]
[194.21807861 126.81057739]
[208.37632751 131.76475525]
[222.58927917 136.55978394]
[236.85511780 141.19503784]
[251.12097168 145.83029175]
[265.62426758 149.65837097]
[280.31939697 152.66720581]
[295.01452637 155.67604065]
[309.70965576 158.68489075]
[324.40481567 161.69372559]
[339.09994507 164.70257568]
[353.79507446 167.71141052]
[368.49020386 170.72024536]
[375.00192261 168.96058655]
[380.56097412 170.57000732]
[383.77038574 174.20785522]
[398.31573486 177.87295532]
[412.86105347 181.53807068]
[428.47973633 176.53910828]
[440.43469238 187.76457214]
[436.42770386 203.66665649]
[420.58084106 207.88665771]
[409.19595337 196.08340454]
[394.65060425 192.41830444]
[380.10528564 188.75320435]
[365.48135376 185.41539001]
[350.78622437 182.40653992]
[336.09109497 179.39770508]
[321.39596558 176.38885498]
[306.70083618 173.38002014]
[292.00570679 170.37117004]
[277.31057739 167.36233521]
[262.61544800 164.35350037]
[268.13479614 178.30113220]
[260.87167358 191.42541504]
[246.12231445 194.15611267]
[234.64199829 184.50198364]
[234.80215454 169.50283813]
[246.48571777 160.09614563]
[232.21986389 155.46089172]
[217.95402527 150.82563782]
[210.55957031 151.75794983]
[203.42214966 145.92300415]
[189.26390076 140.96882629]
[175.10565186 136.01463318]
[167.69213867 136.78080750]
[160.68743896 130.78718567]
[146.64392090 125.51656342]
[134.38970947 140.54747009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[24 39]
[25 38]
[26 37]
[28 35]
[29 34]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 67]
[52 66]
[53 65]
[54 62]
[55 61]
[56 60]
[88 138]
[89 137]
[90 135]
[91 134]
[92 133]
[93 131]
[94 130]
[95 129]
[96 123]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
