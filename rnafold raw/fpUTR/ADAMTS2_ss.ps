%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGCGGGCGGCUCCAGCUGCCCCCAGAUGUGGGCUGGGCGGCUCGCGGGGAACUUUCGCGCCGGCUGCGAGUGCGGGGCCCCGGCUGCAGUCCGGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[-19.26906967 229.06434631]
[-33.11371231 226.94973755]
[-45.05356979 219.71316528]
[-57.21566010 228.49288940]
[-69.37775421 237.27261353]
[-76.03825378 251.62351990]
[-90.88636017 252.79953003]
[-103.04845428 261.57925415]
[-115.21054077 270.35897827]
[-127.37263489 279.13870239]
[-139.53472900 287.91842651]
[-151.69680786 296.69815063]
[-163.85890198 305.47787476]
[-170.07740784 320.65225220]
[-186.36219788 322.58563232]
[-195.96086121 309.28912354]
[-188.99913025 294.44100952]
[-172.63862610 293.31576538]
[-160.47653198 284.53604126]
[-148.31445312 275.75631714]
[-136.15235901 266.97659302]
[-123.99026489 258.19686890]
[-111.82817841 249.41716003]
[-99.66608429 240.63743591]
[-93.87549591 226.91452026]
[-78.15747833 225.11051941]
[-65.99538422 216.33079529]
[-53.83329391 207.55107117]
[-56.94671631 191.95803833]
[-52.97333908 176.50192261]
[-42.65121078 164.25521851]
[-27.98553085 157.67483521]
[-11.85923004 158.10928345]
[2.53369379 165.52273560]
[14.42237949 156.37620544]
[26.31106567 147.22966003]
[38.19974899 138.08312988]
[50.08843613 128.93658447]
[61.97712326 119.79005432]
[73.86580658 110.64351654]
[85.75449371 101.49697876]
[91.26570129 88.64714050]
[105.09896851 86.61434174]
[116.98765564 77.46780396]
[116.69625854 62.06581116]
[125.42785645 49.59133530]
[139.66224670 44.70806503]
[153.87252808 49.09049225]
[165.76121521 39.94395447]
[177.64990234 30.79741669]
[189.53858948 21.65087891]
[201.42727661 12.50434113]
[203.53158569 7.35011959]
[207.11106873 3.96459007]
[211.19284058 2.61616778]
[214.84643555 3.12507844]
[227.52114868 -4.89686584]
[240.19586182 -12.91880989]
[252.87057495 -20.94075394]
[265.54528809 -28.96269798]
[278.22000122 -36.98464203]
[290.89471436 -45.00658798]
[303.56942749 -53.02853012]
[316.12036133 -61.24283218]
[328.54452515 -69.64757538]
[335.22290039 -84.62526703]
[351.55908203 -86.06112671]
[360.74777222 -72.47805786]
[353.33648682 -57.84916306]
[336.94927979 -57.22339249]
[324.52508545 -48.81864929]
[320.68344116 -42.35402298]
[311.59136963 -40.35381699]
[298.91665649 -32.33187103]
[286.24194336 -24.30992699]
[273.56723022 -16.28798294]
[260.89251709 -8.26603889]
[248.21780396 -0.24409473]
[235.54309082 7.77784967]
[222.86837769 15.79979420]
[210.57380676 24.39302635]
[198.68511963 33.53956604]
[186.79643250 42.68610382]
[174.90776062 51.83264160]
[163.01907349 60.97917938]
[163.61204529 75.83805847]
[155.24279785 88.34484863]
[140.94674683 93.58664703]
[126.13419342 89.35648346]
[114.24550629 98.50302124]
[108.73429871 111.35285950]
[94.90103149 113.38565826]
[83.01234436 122.53219604]
[71.12365723 131.67874146]
[59.23497391 140.82527161]
[47.34628677 149.97181702]
[35.45760345 159.11834717]
[23.56891632 168.26489258]
[11.68023109 177.41142273]
[15.11923027 191.21228027]
[13.01289749 205.23429871]
[5.71589279 217.34111023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[34 99]
[35 98]
[36 97]
[37 96]
[38 95]
[39 94]
[40 93]
[41 92]
[43 90]
[44 89]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
