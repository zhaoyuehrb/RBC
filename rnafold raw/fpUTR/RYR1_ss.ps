%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACCUCGCGGGUGCCUCUGGUGUCUCCAGAGGUCUCCGACCCCAGCCCGCCCCCAGCCCUCCCGCCCAGCCCGCAGCCCCCUCCCUCUGUUCCCCGACCUCAGACCCUGGGCUUCCGACCUCGACAUC\
) } def
/len { sequence length } bind def

/coor [
[64.59957123 189.24905396]
[53.67431641 184.09823608]
[43.48220062 177.61650085]
[34.18453217 169.90641785]
[25.92844772 161.08999634]
[18.84461021 151.30677795]
[13.04512978 140.71157837]
[8.62178421 129.47209167]
[5.64457941 117.76618195]
[-9.26815891 119.38180542]
[-24.18089867 120.99742126]
[-39.09363556 122.61304474]
[-54.00637436 124.22866058]
[-68.91911316 125.84427643]
[-83.48983765 129.40713501]
[-97.46542358 134.85534668]
[-111.44100952 140.30355835]
[-125.41659546 145.75177002]
[-139.39218140 151.19998169]
[-153.36776733 156.64819336]
[-167.34335327 162.09640503]
[-181.31893921 167.54461670]
[-189.05862427 181.59725952]
[-204.89474487 184.16567993]
[-216.67918396 173.27961731]
[-215.37193298 157.28991699]
[-201.97579956 148.46250916]
[-186.76715088 153.56903076]
[-172.79156494 148.12081909]
[-158.81597900 142.67260742]
[-144.84039307 137.22439575]
[-130.86480713 131.77618408]
[-116.88922119 126.32797241]
[-102.91363525 120.87976837]
[-88.93804932 115.43155670]
[-103.27844238 111.03234100]
[-114.03527069 100.57812500]
[-118.84178925 86.36906433]
[-116.64045715 71.53147125]
[-107.91561127 59.32994843]
[-94.58692932 52.44910049]
[-79.58699799 52.40287018]
[-66.21614838 59.20142746]
[-57.41626358 71.34893799]
[-55.12351227 86.17267609]
[-59.84235382 100.41109467]
[-70.53473663 110.93154144]
[-55.62199402 109.31591797]
[-40.70925522 107.70030212]
[-25.79651642 106.08468628]
[-10.88377857 104.46906281]
[4.02896023 102.85344696]
[5.25843477 84.42378235]
[9.99413300 66.57057190]
[18.06079292 49.95452881]
[29.15988350 35.19058228]
[42.88064575 22.82512093]
[58.71529770 13.31576920]
[76.07782745 7.01445198]
[94.32566833 4.15437078]
[112.78351593 4.84137249]
[130.76826477 9.05003166]
[147.61433411 16.62459373]
[162.69827271 27.28473663]
[175.46185303 40.63594818]
[185.43272400 56.18412018]
[199.27365112 50.40235138]
[213.11457825 44.62058258]
[226.95550537 38.83881378]
[240.79641724 33.05704498]
[254.63734436 27.27527618]
[239.93061829 24.32361984]
[227.04597473 16.64340210]
[217.45391846 5.11116838]
[212.24919128 -8.95691109]
[212.02581787 -23.95524788]
[216.80928040 -38.17208481]
[226.05366516 -49.98485184]
[238.70388794 -58.04536438]
[253.31619263 -61.43367767]
[268.22286987 -59.76307678]
[281.72262573 -53.22423553]
[292.27474976 -42.56342697]
[298.67489624 -28.99736786]
[300.19265747 -14.07435131]
[296.65478516 0.50246131]
[288.46505737 13.06941986]
[276.55593872 22.19343376]
[291.52899170 21.29466248]
[306.50204468 20.39588928]
[321.47509766 19.49711800]
[327.70489502 5.51684284]
[339.72525024 -3.95783472]
[354.77398682 -6.74970341]
[369.39297485 -2.21721268]
[380.22290039 8.59810448]
[384.77514648 23.21096802]
[382.00360107 38.26344681]
[372.54516602 50.29659271]
[358.57333374 56.54528046]
[343.29870605 55.57360077]
[330.23126221 47.60484314]
[322.37387085 34.47016525]
[307.40081787 35.36893845]
[292.42776489 36.26771164]
[277.45471191 37.16648483]
[273.32348633 41.07601166]
[267.20877075 42.71087265]
[260.41912842 41.11619949]
[246.57818604 46.89796829]
[232.73727417 52.67973709]
[218.89634705 58.46150589]
[205.05541992 64.24327087]
[191.21449280 70.02503967]
[194.25613403 81.71437836]
[195.80607605 93.69309998]
[195.83981323 105.77162933]
[194.35681152 117.75882721]
[191.38050842 129.46496582]
[186.95803833 140.70480347]
[181.15939331 151.30044556]
[174.07630920 161.08421326]
[165.82092285 169.90127563]
[156.52384949 177.61209106]
[146.33224487 184.09461975]
[135.40737915 189.24629211]
[123.92217255 192.98554993]
[112.05838013 195.25323486]
[100.00374603 196.01344299]
[87.94905090 195.25416565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[66 114]
[67 113]
[68 112]
[69 111]
[70 110]
[71 109]
[88 106]
[89 105]
[90 104]
[91 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
