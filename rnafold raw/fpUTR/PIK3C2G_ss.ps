%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGAUCGUGUUUCAUUUCAGGAAGAUAUAUGCGUCAGGAAAAUUUCUAUCUUCUUUUGUAUUAUCAAGGAGAUAUUUGGAGCAGAGUCAACCCUCUCAGUUACAUAAAAUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[128.39633179 188.61674500]
[121.78459167 175.15254211]
[115.17285156 161.68833923]
[108.56110382 148.22412109]
[101.94936371 134.75991821]
[87.14360809 132.35374451]
[76.60844421 143.03131104]
[72.42367554 158.28904724]
[57.97704697 161.91455078]
[47.44188309 172.59210205]
[50.10488129 187.87896729]
[43.24369049 201.79670715]
[29.49657440 208.99368286]
[14.14958286 206.70251465]
[3.10394740 195.80418396]
[0.60693902 180.48933411]
[7.61870861 166.64683533]
[21.44308853 159.59941101]
[36.76432037 162.05694580]
[47.29948425 151.37937927]
[50.73070908 136.88537598]
[65.93087769 132.49615479]
[76.46604156 121.81858826]
[71.99590302 93.71096802]
[90.57908630 76.50743103]
[89.37208557 61.55606842]
[88.16508484 46.60470963]
[76.91275787 39.06088257]
[72.16868591 26.58041382]
[75.47080231 13.84523010]
[85.38282013 5.49431419]
[84.57766724 -9.48406124]
[83.77251434 -24.46243668]
[75.30562592 -37.82740402]
[82.34861755 -50.95163727]
[81.54346466 -65.93001556]
[80.73831177 -80.90838623]
[79.93316650 -95.88676453]
[79.12801361 -110.86514282]
[69.04592896 -99.75876617]
[54.40468979 -96.49776459]
[40.56206131 -102.27545166]
[32.58356476 -114.97756195]
[33.38882065 -129.95593262]
[42.68315887 -141.72943115]
[57.06543732 -145.98971558]
[71.27266693 -141.17778015]
[80.10578918 -129.05484009]
[82.51195526 -143.86059570]
[84.91812897 -158.66633606]
[87.32429504 -173.47209167]
[89.73046112 -188.27784729]
[92.13663483 -203.08360291]
[94.54280090 -217.88935852]
[96.94897461 -232.69511414]
[99.35514069 -247.50086975]
[87.40748596 -257.15225220]
[81.90117645 -271.49017334]
[84.31738281 -286.65780640]
[94.00615692 -298.57516479]
[108.36127472 -304.03649902]
[123.52127075 -301.57275391]
[135.40818787 -291.84667969]
[140.82450867 -277.47451782]
[138.31326294 -262.32229614]
[128.54997253 -250.46594238]
[114.16089630 -245.09469604]
[111.75472260 -230.28894043]
[109.34855652 -215.48318481]
[106.94239044 -200.67742920]
[104.53621674 -185.87168884]
[102.13005066 -171.06593323]
[99.72387695 -156.26017761]
[97.31771088 -141.45442200]
[94.91154480 -126.64866638]
[94.10639191 -111.67028809]
[94.91154480 -96.69191742]
[95.71669006 -81.71353912]
[96.52184296 -66.73516083]
[97.32698822 -51.75678635]
[105.73628998 -39.46317673]
[98.75089264 -25.26758575]
[99.55604553 -10.28921127]
[100.36119080 4.68916464]
[113.32199097 15.31311989]
[114.67862701 32.35382080]
[103.11644745 45.39770889]
[104.32344818 60.34906769]
[105.53044128 75.30043030]
[115.44206238 78.53642273]
[123.59501648 85.73606873]
[128.41934204 95.98475647]
[128.80570984 107.75652313]
[124.33727264 119.13987732]
[115.41356659 128.14817810]
[122.02530670 141.61238098]
[128.63705444 155.07658386]
[135.24879456 168.54080200]
[141.86053467 182.00500488]
[156.83297729 179.84132385]
[171.74087524 182.41226196]
[185.12371826 189.46597290]
[195.67037964 200.31138611]
[202.34762573 213.88597107]
[204.50128174 228.85984802]
[201.92033386 243.76602173]
[194.85766602 257.14413452]
[184.00518799 267.68353271]
[170.42613220 274.35168457]
[155.45080566 276.49530029]
[140.54637146 273.90438843]
[127.17299652 266.83273315]
[116.64086914 255.97320557]
[109.98182678 242.38967896]
[107.84824371 227.41293335]
[110.44915771 212.51022339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[6 23]
[7 22]
[9 20]
[10 19]
[25 89]
[26 88]
[27 87]
[31 84]
[32 83]
[33 82]
[35 80]
[36 79]
[37 78]
[38 77]
[39 76]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
