%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGAGCCGCGGCGCGCUGAGCGAGCAGGCGGGGCGGGAGCGCCCACAGCUCGGAGCCACCAGGCGCUGACGAGGAGCCCGGCUGAGGGAGGAUGCGCCGCUGACGCCUGCGGGAGCCGCGCGCCUGGGGCGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[104.36396027 860.64355469]
[96.72349548 846.13299561]
[105.69744110 832.40710449]
[106.03401184 817.41088867]
[94.09140778 808.55017090]
[89.60326385 794.18634033]
[94.49082184 779.76531982]
[107.07823181 770.88482666]
[107.41480255 755.88861084]
[107.75137329 740.89239502]
[100.30159760 727.99468994]
[108.34659576 714.37158203]
[108.51489258 699.37255859]
[108.51489258 684.37255859]
[108.51489258 669.37255859]
[108.51489258 654.37255859]
[108.51489258 639.37255859]
[108.51489258 624.37255859]
[108.51489258 609.37255859]
[100.77759552 596.64526367]
[108.51489258 582.84509277]
[97.83402252 572.52740479]
[97.62033844 557.31530762]
[108.51489258 546.18218994]
[97.83402252 535.86450195]
[97.62033844 520.65234375]
[108.51489258 509.51922607]
[108.51489258 494.51922607]
[108.51489258 479.51922607]
[108.51489258 464.51922607]
[108.51489258 449.51922607]
[108.51489258 434.51922607]
[108.51489258 419.51922607]
[98.92095184 404.86700439]
[108.15165710 388.97772217]
[107.81508636 373.98150635]
[107.47851562 358.98529053]
[107.14194489 343.98907471]
[106.80537415 328.99282837]
[98.25562286 320.36264038]
[97.90025330 307.81756592]
[106.47945404 298.11431885]
[106.47945404 283.11431885]
[106.47945404 268.11431885]
[105.80648041 253.12942505]
[104.46189117 238.18980408]
[103.11730194 223.25019836]
[94.27028656 211.26773071]
[100.73939514 196.82954407]
[99.39480591 181.88992310]
[98.05021667 166.95031738]
[96.70562744 152.01069641]
[92.94213104 145.57771301]
[95.50233459 136.72138977]
[94.49330139 121.75536346]
[93.48426056 106.78933716]
[78.90166473 107.00780487]
[65.42038727 94.25662231]
[60.46620178 80.09836578]
[55.51201630 65.94011688]
[42.73575211 55.65911484]
[45.51826477 39.49774933]
[60.99714661 34.08145523]
[73.24905396 44.98204803]
[69.67026520 60.98593521]
[74.62445068 75.14418030]
[79.57863617 89.30243683]
[94.53240204 88.12554932]
[97.21075439 73.36660004]
[99.88910675 58.60765839]
[89.75881195 46.69501495]
[89.70755005 31.05751419]
[99.75952911 19.07871056]
[115.16851044 16.41462708]
[128.65884399 24.32316208]
[133.86080933 39.07014847]
[128.31819153 53.69250870]
[114.64804840 61.28601074]
[111.96969604 76.04496002]
[109.29134369 90.80390167]
[108.45028687 105.78030396]
[109.45932007 120.74632263]
[110.46835327 135.71234131]
[111.64524078 150.66610718]
[112.98983002 165.60572815]
[114.33441925 180.54533386]
[115.67900848 195.48495483]
[124.62220001 208.53599548]
[118.05691528 221.90560913]
[119.40150452 236.84521484]
[120.74609375 251.78483582]
[123.49747467 255.38574219]
[124.77685547 259.28732300]
[124.67663574 262.97308350]
[123.45262146 266.01373291]
[121.47945404 268.11431885]
[121.47945404 283.11431885]
[121.47945404 298.11431885]
[131.06434631 313.79244995]
[121.80159760 328.65628052]
[122.13816833 343.65249634]
[122.47473907 358.64871216]
[122.81130981 373.64492798]
[123.14788055 388.64117432]
[131.94264221 398.14947510]
[131.86885071 410.69937134]
[123.51489258 419.51922607]
[123.51489258 434.51922607]
[123.51489258 449.51922607]
[123.51489258 464.51922607]
[123.51489258 479.51922607]
[123.51489258 494.51922607]
[123.51489258 509.51922607]
[134.40945435 520.65234375]
[134.19577026 535.86450195]
[123.51489258 546.18218994]
[134.40945435 557.31530762]
[134.19577026 572.52740479]
[123.51489258 582.84509277]
[131.25219727 596.64526367]
[123.51489258 609.37255859]
[123.51489258 624.37255859]
[123.51489258 639.37255859]
[123.51489258 654.37255859]
[123.51489258 669.37255859]
[123.51489258 684.37255859]
[123.51489258 699.37255859]
[126.66505432 708.03662109]
[123.34281921 714.70819092]
[130.76852417 728.67846680]
[122.74759674 741.22894287]
[122.41102600 756.22515869]
[122.07445526 771.22137451]
[134.25076294 780.65765381]
[138.48640442 795.28344727]
[133.35835266 809.43145752]
[121.03023529 817.74743652]
[120.69366455 832.74371338]
[129.04277039 846.85839844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 138]
[4 137]
[8 133]
[9 132]
[10 131]
[12 129]
[13 127]
[14 126]
[15 125]
[16 124]
[17 123]
[18 122]
[19 121]
[21 119]
[24 116]
[27 113]
[28 112]
[29 111]
[30 110]
[31 109]
[32 108]
[33 107]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[42 98]
[43 97]
[44 96]
[45 91]
[46 90]
[47 89]
[49 87]
[50 86]
[51 85]
[52 84]
[54 83]
[55 82]
[56 81]
[58 67]
[59 66]
[60 65]
[68 80]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
