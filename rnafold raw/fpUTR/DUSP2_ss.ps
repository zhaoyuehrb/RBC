%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUCGACCGCUCGGGCAGCGCCACCGCCACGAGAGCCCGGGACGCGGGAAAGACCGAAAGGAAGAGGAAGAGGCACCGGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[-24.73491287 298.44812012]
[-44.00951767 297.86383057]
[-52.20180130 310.42913818]
[-60.39408875 322.99441528]
[-68.58637238 335.55969238]
[-66.69947052 351.49139404]
[-78.08091736 362.79812622]
[-93.99984741 360.80633545]
[-102.24461365 347.04394531]
[-96.49053955 332.06829834]
[-81.15165710 327.36740112]
[-72.95937347 314.80212402]
[-64.76708984 302.23684692]
[-56.57480240 289.67153931]
[-62.55759811 280.61709595]
[-65.07479858 270.02053833]
[-63.79399872 259.16549683]
[-58.84453201 249.37629700]
[-50.80495834 241.85656738]
[-40.63556671 237.54109192]
[-29.56369019 236.97978210]
[-18.93560410 240.26765442]
[-9.01998997 229.01240540]
[0.89562440 217.75715637]
[10.81123829 206.50190735]
[20.72685242 195.24665833]
[30.64246750 183.99140930]
[39.93419266 172.21585083]
[48.57477570 159.95451355]
[57.21535873 147.69317627]
[45.32555008 133.40463257]
[38.03767014 116.30443573]
[35.96513367 97.83190155]
[39.28238297 79.54185486]
[47.71020889 62.97375870]
[60.53924179 49.52214813]
[76.68967438 40.31923676]
[94.80212402 36.13962936]
[95.34365845 21.14940643]
[95.88520050 6.15918541]
[96.42673492 -8.83103657]
[86.59627533 -21.50942993]
[90.51932526 -37.06543350]
[105.18645477 -43.56581116]
[119.34629822 -36.02403259]
[122.13662720 -20.22550011]
[111.41695404 -8.28950024]
[110.87541962 6.70072126]
[110.33388519 21.69094276]
[109.79234314 36.68116379]
[118.98934174 38.80710983]
[127.77416229 42.26126862]
[135.95613098 46.96867371]
[143.35766602 52.82714462]
[149.81809998 59.70952225]
[155.19720459 67.46642303]
[168.92233276 61.41489410]
[178.16748047 47.87018204]
[194.49752808 49.37400818]
[201.11352539 64.37936401]
[191.20948792 77.45002747]
[174.97386169 75.14001465]
[161.24873352 81.19154358]
[163.85144043 94.69351196]
[163.51325989 108.43988800]
[160.24975586 121.79753113]
[154.21124268 134.15122986]
[145.67585754 144.93196106]
[135.03671265 153.64320374]
[122.78383636 159.88374329]
[109.48156738 163.36611938]
[95.74259949 163.92996216]
[82.19972229 161.54928589]
[69.47669220 156.33375549]
[60.83610916 168.59509277]
[52.19552612 180.85643005]
[51.71109009 186.53155518]
[49.21480942 190.90072632]
[45.61071396 193.39109802]
[41.89771652 193.90702820]
[31.98209953 205.16227722]
[22.06648636 216.41752625]
[12.15087128 227.67276001]
[2.23525739 238.92800903]
[-7.68035698 250.18325806]
[-2.11764598 269.07925415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[28 76]
[29 75]
[30 74]
[38 50]
[39 49]
[40 48]
[41 47]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
