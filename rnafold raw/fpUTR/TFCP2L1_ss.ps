%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUCGGAGCGCGAAGCCGCCGCUGGGUCCUCGGCGCGCCCCGCGUCUGCGCUUGCUGCCGCGCCCCGGUCGGCGCGCUGGGAGUUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[8.98897457 220.28469849]
[-0.30727336 232.05670166]
[-2.78770018 247.68225098]
[-16.74765396 252.87541199]
[-26.04390144 264.64739990]
[-35.34014893 276.41940308]
[-44.63639832 288.19137573]
[-44.19963074 304.22848511]
[-56.55800247 314.45837402]
[-72.23123169 311.03350830]
[-79.19615173 296.58120728]
[-72.10987854 282.18798828]
[-56.40839005 278.89514160]
[-47.11214066 267.12313843]
[-37.81589127 255.35116577]
[-28.51964569 243.57916260]
[-26.70414734 228.79562378]
[-12.07926369 222.76045227]
[-2.78301573 210.98844910]
[-6.06503391 198.40713501]
[-1.37227511 186.07142639]
[9.76777363 178.63510132]
[23.35147667 179.04370117]
[33.03589249 167.58891296]
[42.72031021 156.13414001]
[52.40472794 144.67935181]
[62.08914566 133.22456360]
[71.77356720 121.76978302]
[74.08203888 107.05516052]
[88.90042114 101.51204681]
[98.39208221 89.89703369]
[107.68833160 78.12504578]
[116.98457336 66.35305023]
[126.28082275 54.58106232]
[135.57707214 42.80907059]
[144.87332153 31.03708076]
[154.16957092 19.26509094]
[163.46582031 7.49309969]
[172.76206970 -4.27889109]
[182.05831909 -16.05088234]
[191.35456848 -27.82287216]
[200.25225830 -39.89892197]
[208.74147034 -52.26554871]
[217.23066711 -64.63217163]
[219.58021545 -73.67420959]
[226.21591187 -77.26370239]
[223.93597412 -88.15930939]
[228.05435181 -98.26154327]
[236.93318176 -104.21010590]
[247.39833069 -104.17715454]
[257.08273315 -115.63194275]
[266.76715088 -127.08672333]
[276.45156860 -138.54150391]
[272.62295532 -153.57882690]
[278.39550781 -167.98220825]
[291.54959106 -176.21324158]
[307.02716064 -175.10693359]
[318.87683105 -165.08866882]
[322.54208374 -150.01069641]
[316.61361694 -135.67079163]
[303.37103271 -127.58293915]
[287.90637207 -128.85708618]
[278.22195435 -117.40230560]
[268.53753662 -105.94752502]
[258.85311890 -94.49273682]
[257.05175781 -75.36251068]
[238.29196167 -68.36600494]
[229.59729004 -56.14296341]
[221.10809326 -43.77634048]
[212.61888123 -31.40971756]
[212.64799500 -26.44750977]
[209.41851807 -21.46083069]
[203.12655640 -18.52662468]
[193.83030701 -6.75463343]
[184.53405762 5.01735735]
[175.23780823 16.78934860]
[165.94155884 28.56133842]
[156.64530945 40.33332825]
[147.34906006 52.10531998]
[138.05281067 63.87731171]
[128.75656128 75.64929962]
[119.46031952 87.42129517]
[110.16407013 99.19328308]
[107.97309875 107.13439941]
[100.35520172 111.19646454]
[97.35403442 126.73040771]
[83.22834778 131.45420837]
[73.54393005 142.90898132]
[63.85951233 154.36376953]
[54.17509460 165.81855774]
[44.49067688 177.27333069]
[34.80625916 188.72811890]
[36.63137054 206.02795410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[4 16]
[5 15]
[6 14]
[7 13]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[30 85]
[31 83]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[42 70]
[43 69]
[44 68]
[46 67]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
