%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCUGGUUCCGUAACAACAUCCCGUUGGCUUCCCUCAGGCGGCGGGACCAGUGCAGCCGCCGCCUCCCAGGAUCGUCCGCCGGUCAGGGCCCUUGCCCUCCCCGGCACAGGCCACC\
) } def
/len { sequence length } bind def

/coor [
[290.94940186 107.88122559]
[283.57901001 92.83008575]
[268.62683105 94.02687836]
[253.67463684 95.22367096]
[238.72245789 96.42046356]
[223.77027893 97.61725616]
[208.81809998 98.81404877]
[193.86592102 100.01084137]
[178.91374207 101.20762634]
[163.96156311 102.40441895]
[149.00938416 103.60121155]
[134.05720520 104.79800415]
[119.10501862 105.99479675]
[113.33264160 118.94883728]
[98.93578339 126.29366302]
[81.15506744 122.64556885]
[67.33538818 128.47793579]
[53.51570892 134.31028748]
[39.69602585 140.14265442]
[32.34766388 154.40382385]
[16.58857346 157.40893555]
[4.50778151 146.85269165]
[5.37263870 130.83297729]
[18.51969910 121.63871765]
[33.86366653 126.32297516]
[47.68334579 120.49061584]
[61.50302505 114.65824890]
[75.32270050 108.82588959]
[74.52436829 93.84714508]
[60.16304016 89.51676941]
[45.80171204 85.18638611]
[31.44038010 80.85601044]
[16.68124771 87.14469910]
[2.63137722 79.39997864]
[0.06862734 63.56293488]
[10.95891953 51.78239441]
[26.94815445 53.09538269]
[35.77075958 66.49468231]
[50.13208771 70.82505798]
[64.49342346 75.15544128]
[78.85475159 79.48581696]
[103.77640533 75.54763794]
[117.90822601 91.04261780]
[132.86041260 89.84582520]
[147.81259155 88.64903259]
[162.76477051 87.45223999]
[177.71694946 86.25544739]
[192.66912842 85.05865479]
[207.62130737 83.86186981]
[222.57348633 82.66507721]
[237.52566528 81.46828461]
[252.47784424 80.27149200]
[267.43002319 79.07469940]
[282.38220215 77.87790680]
[285.84481812 64.75173187]
[293.20162964 53.37009430]
[303.71252441 44.85166550]
[316.32836914 40.02841949]
[329.79547119 39.36438751]
[342.78033447 42.91105270]
[354.00167847 50.30366516]
[362.35675049 60.79870224]
[367.02984619 73.34861755]
[382.02450562 72.94931030]
[397.01919556 72.55000305]
[412.01388550 72.15069580]
[415.85791016 61.40139008]
[423.96517944 52.69522858]
[435.29180908 47.70521927]
[448.14920044 47.58651352]
[460.45458984 52.73481369]
[471.74316406 42.85713959]
[483.03170776 32.97946930]
[490.97021484 17.99892235]
[507.56289673 21.48014069]
[508.81103516 38.38808060]
[492.90939331 44.26803207]
[481.62081909 54.14570236]
[470.33227539 64.02337646]
[473.69787598 78.64091492]
[488.16940308 82.58745575]
[502.64093018 86.53399658]
[517.11242676 90.48053741]
[531.58398438 94.42707062]
[545.19122314 86.84551239]
[559.81115723 91.05401611]
[566.95520020 104.07318878]
[581.42669678 108.01972198]
[595.89819336 111.96626282]
[610.36975098 115.91280365]
[624.84124756 119.85933685]
[640.55395508 115.16426849]
[652.28894043 126.61949158]
[647.97424316 142.44085693]
[632.04852295 146.35270691]
[620.89471436 134.33085632]
[606.42321777 130.38432312]
[591.95166016 126.43778229]
[577.48016357 122.49124146]
[563.00866699 118.54470062]
[550.24432373 126.13465881]
[535.51190186 122.33845520]
[527.63745117 108.89859009]
[513.16589355 104.95204926]
[498.69439697 101.00551605]
[484.22286987 97.05897522]
[469.75134277 93.11243439]
[449.48193359 109.01043701]
[425.53967285 105.56478882]
[412.41317749 87.14537811]
[397.41851807 87.54468536]
[382.42382812 87.94399261]
[367.42913818 88.34329987]
[361.90463257 103.93380737]
[350.83166504 116.26989746]
[335.86050415 123.47147369]
[319.23831177 124.42680359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[16 28]
[17 27]
[18 26]
[19 25]
[29 41]
[30 40]
[31 39]
[32 38]
[63 113]
[64 112]
[65 111]
[66 110]
[71 79]
[72 78]
[73 77]
[80 107]
[81 106]
[82 105]
[83 104]
[84 103]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
