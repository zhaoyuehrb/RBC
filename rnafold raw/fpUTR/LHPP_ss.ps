%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGACUACAGUUCCCAGGCGCCCCUGCGCGGCCGCGGCGCCGGCGCCGGCGUCGGUUGGGACGCGGAGCUGAGGAGCAGGGCCGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[-10.75049496 270.83401489]
[-25.34040070 273.60354614]
[-33.56718063 286.14627075]
[-41.79395676 298.68899536]
[-50.02073669 311.23171997]
[-58.24751282 323.77447510]
[-58.63961411 340.16891479]
[-73.16137695 347.78802490]
[-86.87404633 338.79388428]
[-85.67121124 322.43890381]
[-70.79024506 315.54769897]
[-62.56346512 303.00494385]
[-54.33668900 290.46221924]
[-46.10990906 277.91949463]
[-37.88313293 265.37677002]
[-41.15553665 250.89135742]
[-32.99108887 238.05404663]
[-17.77527428 234.71986389]
[-9.54849720 222.17712402]
[-1.32171881 209.63439941]
[6.90505934 197.09167480]
[15.13183689 184.54893494]
[23.35861588 172.00621033]
[31.58539391 159.46347046]
[16.59718132 160.05804443]
[5.36787748 150.11305237]
[4.14654112 135.16285706]
[13.61284065 123.52717590]
[28.49882126 121.68120575]
[40.52049637 130.65223694]
[42.98784256 145.44798279]
[53.59444427 134.84136963]
[64.20104980 124.23477173]
[74.80764771 113.62817383]
[77.36429596 106.52381134]
[85.96209717 102.84826660]
[90.22314453 89.53154755]
[103.79960632 86.18919373]
[114.76214600 75.95089722]
[119.56668854 60.87684631]
[134.14935303 57.84450531]
[145.11189270 47.60620880]
[155.71850586 36.99960709]
[165.95680237 26.03706741]
[176.19509888 15.07452774]
[179.95974731 -0.29225287]
[194.30148315 -4.31268215]
[204.53977966 -15.27522182]
[214.77807617 -26.23776054]
[218.45361328 -34.83555984]
[225.55798340 -37.39220810]
[236.16458130 -47.99880981]
[246.77119446 -58.60541153]
[257.37777710 -69.21201324]
[257.12716675 -85.01431274]
[268.18368530 -96.30715942]
[283.98776245 -96.39070892]
[295.16308594 -85.21539307]
[295.07952881 -69.41132355]
[283.78668213 -58.35477829]
[267.98440552 -58.60541153]
[257.37777710 -47.99880981]
[246.77119446 -37.39220810]
[236.16458130 -26.78560638]
[225.74061584 -15.99946404]
[215.50231934 -5.03692436]
[205.26402283 5.92561483]
[202.23167419 20.50828171]
[187.15763855 25.31282425]
[176.91934204 36.27536392]
[166.68104553 47.23790359]
[165.97094727 52.15662384]
[162.02482605 56.61158752]
[155.35018921 58.56874847]
[144.38764954 68.80704498]
[140.36721802 83.14878082]
[125.00044250 86.91343689]
[114.03790283 97.15173340]
[109.77685547 110.46845245]
[96.20039368 113.81080627]
[85.41425323 124.23477173]
[74.80764771 134.84136963]
[64.20104980 145.44798279]
[53.59444427 156.05458069]
[44.12812424 167.69024658]
[35.90134811 180.23298645]
[27.67457008 192.77571106]
[19.44779015 205.31845093]
[11.22101307 217.86117554]
[2.99423504 230.40391541]
[-5.23254299 242.94664001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[18 91]
[19 90]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[31 84]
[32 83]
[33 82]
[34 81]
[36 80]
[38 78]
[39 77]
[41 75]
[42 74]
[43 71]
[44 70]
[45 69]
[47 67]
[48 66]
[49 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
