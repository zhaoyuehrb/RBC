%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUGAGUGGGGCGGAGCUGCGCGUGCGCAGGGCCGCGGUGCGGCCCUGGCGGCCGUUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[107.83351135 171.62123108]
[112.61277771 157.08103943]
[123.60984039 146.43569946]
[119.32065582 132.06201172]
[115.03147125 117.68832397]
[102.06404877 121.42578125]
[90.27606201 117.29067993]
[83.65830231 107.89717865]
[68.66268158 108.25963593]
[53.66706467 108.62209320]
[40.05788422 116.69059753]
[27.14736557 109.26309967]
[12.15174580 109.62555695]
[-2.84387445 109.98800659]
[-18.53227997 116.41531372]
[-29.05138779 103.11927795]
[-19.18694115 89.33055115]
[-3.20633054 94.99238586]
[11.78928947 94.62993622]
[26.78491020 94.26747894]
[39.32150269 86.22489929]
[53.30460739 93.62647247]
[68.30023193 93.26401520]
[83.29584503 92.90156555]
[99.19431305 79.33451080]
[120.59194183 89.28581238]
[129.98472595 77.59069824]
[139.37750244 65.89557648]
[142.46965027 56.90173340]
[149.51757812 53.87678146]
[159.46443176 42.64912033]
[169.41127014 31.42145920]
[179.35810852 20.19379807]
[189.30494690 8.96613693]
[199.25178528 -2.26152396]
[209.19862366 -13.48918533]
[219.14546204 -24.71684647]
[229.09230042 -35.94450760]
[235.06983948 -51.80973434]
[251.96978760 -50.45773315]
[255.34899902 -33.84396362]
[240.31996155 -25.99766731]
[230.37312317 -14.77000618]
[220.42628479 -3.54234529]
[210.47944641 7.68531609]
[200.53260803 18.91297722]
[190.58576965 30.14063835]
[180.63893127 41.36830139]
[170.69209290 52.59596252]
[160.74523926 63.82362366]
[151.07261658 75.28836060]
[141.67984009 86.98347473]
[132.28706360 98.67858887]
[129.40515137 113.39913940]
[133.69433594 127.77282715]
[137.98352051 142.14651489]
[153.01602173 145.02449036]
[164.98193359 154.56784058]
[171.13160706 168.58354187]
[170.05187988 183.85092163]
[161.99084473 196.86163330]
[148.80090332 204.62590027]
[133.51300049 205.35957336]
[119.64015961 198.89404297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 56]
[4 55]
[5 54]
[8 24]
[9 23]
[10 22]
[12 20]
[13 19]
[14 18]
[26 53]
[27 52]
[28 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
