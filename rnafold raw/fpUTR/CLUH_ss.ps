%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCCCCGGCCGACAGCGCCCGGGAACACGGCUCGCAGGCCGGGGGCAAGGGGCGGCCGGGCGCGGCCGAGCUGCCAUCAGUC\
) } def
/len { sequence length } bind def

/coor [
[206.84719849 307.28686523]
[199.58294678 294.16320801]
[192.31869507 281.03952026]
[185.05445862 267.91586304]
[177.79020691 254.79219055]
[170.52595520 241.66851807]
[163.26170349 228.54484558]
[155.76170349 215.55447388]
[148.02839661 202.70161438]
[140.29508972 189.84875488]
[132.56178284 176.99589539]
[124.82847595 164.14303589]
[117.09516907 151.29017639]
[109.36186218 138.43731689]
[106.42263794 137.70962524]
[103.63541412 135.63540649]
[101.57156372 132.28303528]
[100.75910950 127.94840240]
[101.59686279 123.12938690]
[95.79412079 109.29724884]
[89.88850403 103.51685333]
[90.04157257 94.85944366]
[84.74198151 80.82682037]
[79.44239044 66.79420471]
[65.31705475 60.22819138]
[60.14241409 45.92162704]
[66.48915863 32.49573898]
[52.36381912 25.92972374]
[47.18918228 11.62315845]
[53.53592300 -1.80272889]
[41.42193222 -11.97926426]
[44.16362000 -26.61935997]
[38.86402893 -40.65197754]
[33.56444168 -54.68459702]
[28.26485062 -68.71721649]
[22.96526146 -82.74983215]
[9.94093800 -92.71472168]
[12.32664871 -108.93940735]
[27.66817856 -114.73332214]
[40.18347931 -104.13618469]
[36.99787903 -88.04942322]
[42.29747009 -74.01679993]
[47.59705734 -59.98418427]
[52.89664841 -45.95156860]
[58.19623566 -31.91894913]
[69.93115997 -22.74612236]
[67.56854248 -7.10231781]
[81.20587921 -1.22366166]
[86.78031158 12.93191338]
[80.52177429 27.19614983]
[94.15911102 33.07480621]
[99.73355103 47.23038101]
[93.47500610 61.49461746]
[98.77459717 75.52723694]
[104.07418823 89.55985260]
[109.62625885 103.49449921]
[115.42900085 117.32664490]
[122.21472168 130.70401001]
[129.94802856 143.55686951]
[137.68133545 156.40972900]
[145.41464233 169.26258850]
[153.14794922 182.11544800]
[160.88125610 194.96830750]
[168.61456299 207.82116699]
[175.88992310 213.73002625]
[176.38537598 221.28060913]
[183.64962769 234.40426636]
[190.91387939 247.52793884]
[198.17811584 260.65161133]
[205.44236755 273.77526855]
[212.70661926 286.89895630]
[219.97085571 300.02261353]
[235.91969299 309.00790405]
[235.18569946 326.44152832]
[242.91900635 339.29437256]
[250.65231323 352.14724731]
[258.38562012 365.00009155]
[272.98764038 372.46420288]
[273.55422974 388.85354614]
[259.50250244 397.30819702]
[245.28767395 389.13070679]
[245.53276062 372.73339844]
[237.79945374 359.88055420]
[230.06614685 347.02767944]
[222.33283997 334.17483521]
[210.54496765 330.87384033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[19 57]
[20 56]
[22 55]
[23 54]
[24 53]
[27 50]
[30 47]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
