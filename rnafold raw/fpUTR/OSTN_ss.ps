%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCUGAGUUUUGGAGAAACUGCAGAGACAGUACUCUAAAGUUAGAAUCUCCUGAUCUUUCACGAG\
) } def
/len { sequence length } bind def

/coor [
[91.98352051 126.79631042]
[81.15691376 120.66988373]
[74.05767059 110.45473480]
[72.09009552 98.17152405]
[75.64340210 86.25000763]
[65.03680420 75.64340210]
[54.43020248 65.03680420]
[43.82360077 54.43020248]
[35.23923111 50.39271927]
[32.98628616 43.08027267]
[22.88085175 31.99513817]
[12.77541637 20.91000557]
[2.66998196 9.82487106]
[-7.43545294 -1.26026273]
[-17.54088783 -12.34539604]
[-27.64632225 -23.43053055]
[-37.75175476 -34.51566315]
[-50.79269028 -35.96057129]
[-58.97938538 -45.68971252]
[-58.22283173 -57.97627640]
[-67.80553436 -69.51628113]
[-77.38823700 -81.05629730]
[-86.97093964 -92.59630585]
[-102.72895050 -93.80479431]
[-112.95346069 -105.85614014]
[-111.57843781 -121.60050201]
[-99.41965485 -131.69702148]
[-83.69071960 -130.15560913]
[-73.72331238 -117.89076996]
[-75.43092346 -102.17900848]
[-65.84822845 -90.63899994]
[-56.26552200 -79.09898376]
[-46.68281937 -67.55897522]
[-30.01443291 -62.56468964]
[-26.66662216 -44.62109756]
[-16.56118774 -33.53596497]
[-6.45575380 -22.45083046]
[3.64968109 -11.36569691]
[13.75511551 -0.28056359]
[23.86054993 10.80457020]
[33.96598434 21.88970375]
[44.07141876 32.97483826]
[54.43020248 43.82360077]
[65.03680420 54.43020248]
[75.64340210 65.03680420]
[86.25000763 75.64340210]
[103.14369965 72.20749664]
[118.84308624 79.33011627]
[127.38388062 94.30533600]
[125.52138519 111.44399261]
[137.06138611 121.02669525]
[148.60140991 130.60940552]
[164.16130066 133.47302246]
[169.00987244 147.55636597]
[180.54988098 157.13906860]
[192.08988953 166.72177124]
[208.33671570 168.95167542]
[214.27760315 184.23689270]
[203.80105591 196.85331726]
[187.68446350 193.82225037]
[182.50718689 178.26177979]
[170.96717834 168.67907715]
[159.42716980 159.09637451]
[144.69268799 156.91816711]
[139.01870728 142.14941406]
[127.47869110 132.56671143]
[115.93868256 122.98400116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[8 43]
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[17 35]
[20 33]
[21 32]
[22 31]
[23 30]
[50 67]
[51 66]
[52 65]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
