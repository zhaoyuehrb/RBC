%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUCGACAUGCGCUUCCGGCGACGCCUUAGCGCUGACCCCCACGCAACCCAGCGAAACUCCGCGGAGCGCGCGCGGCACG\
) } def
/len { sequence length } bind def

/coor [
[75.94294739 390.74658203]
[62.94674301 382.56158447]
[55.79840851 368.96759033]
[56.42079926 353.62130737]
[64.64650726 340.65081787]
[78.26284790 333.54513550]
[78.82371521 318.55560303]
[79.38458252 303.56610107]
[76.41516876 296.59454346]
[80.25708771 288.02963257]
[73.49253845 274.75973511]
[82.23948669 261.57635498]
[83.36044312 246.61830139]
[84.48139191 231.66023254]
[85.60234070 216.70217896]
[86.72329712 201.74412537]
[87.84424591 186.78607178]
[88.96519470 171.82801819]
[90.08615112 156.86994934]
[90.92720795 141.89355469]
[91.48807526 126.90404510]
[92.04894257 111.91452789]
[85.68607330 99.46440887]
[92.96154785 87.52459717]
[82.62194061 70.41452026]
[93.02374268 54.29104614]
[92.46287537 39.30153656]
[91.90200806 24.31202698]
[76.32869720 16.64137459]
[66.70912170 2.29540610]
[65.53738403 -14.84990025]
[73.03917694 -30.21428490]
[87.13474274 -39.73679352]
[85.45527649 -54.64247894]
[83.77581024 -69.54816437]
[79.61631775 -77.96343231]
[82.32298279 -85.04116058]
[81.20202637 -99.99921417]
[70.02869415 -111.51165009]
[72.20585632 -127.40628815]
[86.06338501 -135.49012756]
[100.97097015 -129.56193542]
[105.49279022 -114.16931152]
[96.16008759 -101.12016296]
[97.28103638 -86.16210938]
[98.68148804 -71.22763062]
[100.36096191 -56.32194519]
[102.04042816 -41.41626358]
[114.34033966 -37.52746964]
[124.23663330 -29.17898178]
[130.18521118 -17.62579155]
[131.23966980 -4.62648058]
[127.20174408 7.82445955]
[118.65726471 17.80263138]
[106.89151764 23.75115776]
[107.45238495 38.74066925]
[108.01325226 53.73017883]
[116.30940247 60.19581985]
[119.61735535 70.41452026]
[116.56014252 80.94309235]
[107.95105743 88.08547211]
[114.31392670 100.53559113]
[107.03845215 112.47540283]
[106.47758484 127.46491241]
[105.91671753 142.45442200]
[108.77552032 151.39562988]
[105.04420471 157.99090576]
[103.92325592 172.94895935]
[102.80229950 187.90701294]
[101.68135071 202.86508179]
[100.56040192 217.82313538]
[99.43944550 232.78118896]
[98.31849670 247.73924255]
[97.19754791 262.69729614]
[103.88191986 277.03710938]
[95.21514893 289.15057373]
[94.37409210 304.12698364]
[93.81322479 319.11648560]
[93.25235748 334.10598755]
[106.29961395 342.20938110]
[113.53302765 355.75830078]
[113.00685120 371.10815430]
[104.86262512 384.12997437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 79]
[7 78]
[8 77]
[10 76]
[12 74]
[13 73]
[14 72]
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[20 65]
[21 64]
[22 63]
[24 61]
[26 57]
[27 56]
[28 55]
[33 48]
[34 47]
[35 46]
[37 45]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
