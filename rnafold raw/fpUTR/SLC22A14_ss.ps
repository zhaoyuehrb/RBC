%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAGUUCCUAGUCGGUGGCUCCCAUGCUGGUCUCUGAUGUUUAGGAAGUGGUGUCAGCAGAGACUGAGCUGCACCCUUUCUUUGGACAG\
) } def
/len { sequence length } bind def

/coor [
[-9.16754436 140.79273987]
[-23.12172127 146.29554749]
[-37.07589722 151.79837036]
[-51.03007507 157.30117798]
[-64.98425293 162.80400085]
[-78.93843079 168.30680847]
[-92.89260101 173.80961609]
[-95.11475372 190.09286499]
[-105.13929749 202.99778748]
[-120.19435883 209.10824585]
[-136.19268799 206.86607361]
[-148.84120178 196.96719360]
[-162.59938049 202.94320679]
[-176.35754395 208.91923523]
[-190.11570740 214.89524841]
[-202.23468018 226.75134277]
[-216.98229980 218.38809204]
[-213.02842712 201.90162659]
[-196.09173584 201.13706970]
[-182.33355713 195.16105652]
[-168.57539368 189.18504333]
[-154.81721497 183.20903015]
[-154.13777161 169.45687866]
[-147.52792358 157.30238342]
[-136.24565125 149.17967224]
[-122.49098206 146.74383545]
[-108.97716522 150.53402710]
[-98.39541626 159.85543823]
[-84.44123840 154.35263062]
[-70.48706055 148.84982300]
[-56.53288651 143.34700012]
[-42.57871246 137.84419250]
[-28.62453461 132.34138489]
[-14.67035770 126.83856201]
[-13.18966579 116.31671906]
[-7.33494806 107.35169220]
[1.84314382 101.67955017]
[12.64283466 100.43379974]
[23.02662277 103.91951752]
[31.00567627 111.54247284]
[45.44943619 107.49552155]
[59.89319611 103.44857025]
[74.33695221 99.40161896]
[88.78071594 95.35466766]
[103.07788849 90.81694794]
[117.21179962 85.79375458]
[131.34571838 80.77056122]
[145.47962952 75.74736786]
[159.61354065 70.72416687]
[173.74745178 65.70097351]
[180.96646118 59.75810623]
[188.45054626 60.75656509]
[202.74771118 56.21884537]
[217.04489136 51.68112946]
[231.34205627 47.14340973]
[238.75975037 41.45046997]
[246.20538330 42.70386124]
[260.64913940 38.65690994]
[275.09289551 34.60995865]
[289.53665161 30.56300735]
[293.96813965 15.78580570]
[305.70013428 5.76762819]
[320.98901367 3.70523882]
[334.95617676 10.25673866]
[343.14471436 23.33156776]
[342.94174194 38.75759506]
[334.41198730 51.61243439]
[320.27728271 57.79414749]
[305.04794312 55.33017731]
[293.58361816 45.00676727]
[279.13986206 49.05371857]
[264.69610596 53.10066986]
[250.25233459 57.14762115]
[235.87977600 61.44058228]
[221.58261108 65.97830200]
[207.28543091 70.51602173]
[192.98826599 75.05373383]
[178.77064514 79.83489227]
[164.63673401 84.85808563]
[150.50282288 89.88127899]
[136.36891174 94.90447235]
[122.23499298 99.92766571]
[108.10108185 104.95085907]
[104.70760345 109.24781799]
[99.09447479 111.22354889]
[92.82766724 109.79842377]
[78.38390350 113.84537506]
[63.94014740 117.89232635]
[49.49638748 121.93927765]
[35.05262756 125.98622894]
[26.44256020 143.91314697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[12 22]
[13 21]
[14 20]
[15 19]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[52 77]
[53 76]
[54 75]
[55 74]
[57 73]
[58 72]
[59 71]
[60 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
