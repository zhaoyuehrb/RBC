%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGCCAUCUUUCAAUUGUGUUCGCAGCCGCCGCCGCGCCGCCGUCGCUCUCCAACGCCAGCGCCGCCUCUCGCUCGCCGAGCUCCAGCCGAAGGAGAAGGGGGGUAAGUAAGGAGGUCUCUGUACC\
) } def
/len { sequence length } bind def

/coor [
[-68.78307343 545.56988525]
[-71.73042297 560.33496094]
[-77.68355560 574.16442871]
[-86.38222504 586.45373535]
[-97.44616699 596.66558838]
[-110.39170837 604.35369873]
[-124.65292358 609.18188477]
[-139.60638428 610.93908691]
[-154.59837341 609.54846191]
[-168.97352600 605.07092285]
[-182.10340881 597.70202637]
[-193.41404724 587.76409912]
[-202.41098022 575.69140625]
[-208.70089722 562.01184082]
[-212.00883484 547.32336426]
[-212.19020081 532.26812744]
[-209.23704529 517.50421143]
[-203.27847290 503.67712402]
[-194.57496643 491.39126587]
[-183.50700378 481.18371582]
[-170.55844116 473.50070190]
[-156.29533386 468.67813110]
[-141.34118652 466.92681885]
[-126.34973145 468.32330322]
[-111.97634125 472.80654907]
[-104.63507843 459.72579956]
[-97.29380798 446.64505005]
[-89.95254517 433.56433105]
[-94.21713257 419.33938599]
[-86.95838165 405.96908569]
[-72.00904083 401.59243774]
[-64.66777802 388.51168823]
[-57.32650757 375.43093872]
[-57.84486389 360.54534912]
[-44.34350586 352.29769897]
[-37.00223541 339.21694946]
[-41.26682663 324.99203491]
[-34.00807953 311.62170410]
[-19.05874062 307.24505615]
[-11.71747208 294.16433716]
[-12.92198372 276.70104980]
[2.88239360 267.34487915]
[9.90295506 254.08924866]
[16.92351723 240.83361816]
[16.04283714 225.96507263]
[29.33935356 217.39109802]
[36.35991287 204.13546753]
[31.75019646 190.01858521]
[38.68121338 176.47547913]
[53.51954269 171.73609924]
[60.54010391 158.48048401]
[67.56066132 145.22485352]
[74.58122253 131.96922302]
[81.60179138 118.71358490]
[72.55015564 106.05490112]
[71.94181824 89.44881439]
[81.12883759 74.35100555]
[98.06191254 66.34576416]
[100.96587372 51.62954712]
[96.04663086 36.59254074]
[106.10151672 25.60397339]
[109.00547028 10.88775730]
[111.90943146 -3.82845926]
[114.81339264 -18.54467583]
[104.16470337 -29.83117867]
[102.21717072 -45.22555161]
[109.71966553 -58.80834579]
[123.78730774 -65.35669708]
[139.01081848 -62.35263824]
[149.53643799 -50.95127869]
[151.31686401 -35.53668594]
[143.66746521 -22.03607750]
[129.52960205 -15.64071655]
[126.62564850 -0.92450035]
[123.72168732 13.79171562]
[120.81773376 28.50793266]
[125.94468689 42.49234009]
[115.68209076 54.53350449]
[112.77812958 69.24972534]
[124.97747803 77.97760773]
[137.96786499 70.47760773]
[143.91156006 63.40245438]
[151.36715698 62.95755768]
[164.53631592 55.77611160]
[172.61277771 41.50366211]
[189.01141357 41.63244247]
[196.86271667 56.02997971]
[188.08995056 69.88531494]
[171.71775818 68.94527435]
[158.54859924 76.12671661]
[145.46786499 83.46798706]
[132.47747803 90.96798706]
[128.65188599 112.40238953]
[113.33208466 125.45155334]
[94.85741425 125.73414612]
[87.83685303 138.98977661]
[80.81629181 152.24540710]
[73.79573059 165.50103760]
[66.77516937 178.75666809]
[71.19206238 193.69416809]
[63.88338470 207.03724670]
[49.61554337 211.15602112]
[42.59498215 224.41165161]
[42.97350311 240.22833252]
[30.17914581 247.85418701]
[23.15858459 261.10980225]
[16.13802338 274.36544800]
[19.17848969 286.96960449]
[12.97630978 297.89541626]
[1.36326909 301.50558472]
[-5.97799873 314.58633423]
[-1.92615998 329.62695312]
[-9.55758953 342.78811646]
[-23.92149544 346.55822754]
[-31.26276398 359.63897705]
[-31.26950645 375.46017456]
[-44.24576950 382.77221680]
[-51.58703613 395.85296631]
[-58.92830276 408.93368530]
[-54.87646484 423.97433472]
[-62.50789261 437.13546753]
[-76.87180328 440.90557861]
[-84.21306610 453.98632812]
[-91.55433655 467.06707764]
[-98.89560699 480.14782715]
[-87.58106232 490.08132935]
[-78.57938385 502.15045166]
[-72.28408051 515.82751465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[25 125]
[26 124]
[27 123]
[28 122]
[31 119]
[32 118]
[33 117]
[35 115]
[36 114]
[39 111]
[40 110]
[42 107]
[43 106]
[44 105]
[46 103]
[47 102]
[50 99]
[51 98]
[52 97]
[53 96]
[54 95]
[58 79]
[59 78]
[61 76]
[62 75]
[63 74]
[64 73]
[80 92]
[81 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
