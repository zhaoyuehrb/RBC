%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCGGGCUGGGAGGGCUGUCGGUGGGCCAGUCUGCGUAGCGACGGCCCGUCCCCUGCGCACGGACGCCGGGAAGAAGGGGGUGGGGCCACGUUUGCGUCCGCGCCAUCAGGCCCGAGAUAGCGGCGAGGUCCGCUUUCAGUGU\
) } def
/len { sequence length } bind def

/coor [
[82.65641785 276.90066528]
[81.05661774 261.98623657]
[79.45681000 247.07179260]
[77.85700989 232.15734863]
[76.25720215 217.24290466]
[74.65739441 202.32846069]
[73.05759430 187.41401672]
[71.45778656 172.49957275]
[69.85798645 157.58512878]
[68.25817871 142.67068481]
[66.65837097 127.75624084]
[54.93090057 118.40389252]
[40.03440475 120.16297150]
[25.13790703 121.92205048]
[10.24140930 123.68113708]
[-4.63544130 125.59929657]
[-19.49094582 127.67630768]
[-34.34645081 129.75332642]
[-49.20195389 131.83033752]
[-64.05745697 133.90734863]
[-78.91296387 135.98435974]
[-93.76847076 138.06138611]
[-108.62397003 140.13839722]
[-123.47947693 142.21540833]
[-136.07534790 151.78904724]
[-149.75138855 145.88859558]
[-164.60688782 147.96560669]
[-177.20275879 157.53926086]
[-190.87878418 151.63880920]
[-205.73429871 153.71582031]
[-215.05328369 166.48030090]
[-230.68132019 168.83404541]
[-243.34655762 159.38061523]
[-245.53494263 143.72857666]
[-235.94813538 131.16398621]
[-220.27383423 129.14120483]
[-207.81130981 138.86032104]
[-192.95581055 136.78329468]
[-181.42250061 127.35822296]
[-166.68389893 133.11010742]
[-151.82839966 131.03309631]
[-140.29508972 121.60801697]
[-125.55648804 127.35990143]
[-110.70098877 125.28289032]
[-95.84548187 123.20587158]
[-80.98997498 121.12886047]
[-66.13447571 119.05184937]
[-51.27896881 116.97483063]
[-36.42346573 114.89781952]
[-21.56796074 112.82080078]
[-6.71245575 110.74378967]
[-0.47942698 106.67381287]
[8.48232746 108.78463745]
[23.37882423 107.02555847]
[38.27532196 105.26647186]
[53.17181778 103.50739288]
[59.96739197 90.13502502]
[52.60662842 77.06524658]
[45.24586487 63.99546432]
[30.86436462 56.11482620]
[30.76900864 39.71595764]
[45.05789185 31.66860771]
[59.03183746 40.25120163]
[58.31564713 56.63470078]
[65.67640686 69.70448303]
[73.03717041 82.77426147]
[96.37310791 72.67678833]
[115.56811523 82.89337921]
[128.71580505 75.67269897]
[141.86349487 68.45201111]
[155.01118469 61.23132324]
[168.15885925 54.01063538]
[165.90281677 39.03947830]
[168.89936829 24.22756958]
[176.76795959 11.35878563]
[188.54241943 1.97623575]
[202.78961182 -2.80276060]
[217.78387451 -2.41970825]
[231.71597290 3.05986643]
[242.91145325 12.95665169]
[256.05914307 5.73596573]
[269.20681763 -1.48472035]
[282.11633301 -9.12310028]
[294.77438354 -17.17132568]
[307.43240356 -25.21955109]
[320.09045410 -33.26777649]
[332.74850464 -41.31600189]
[340.24261475 -55.24973679]
[355.13421631 -55.54925919]
[367.79223633 -63.59748459]
[375.88665771 -80.10065460]
[393.40481567 -80.24607086]
[405.88796997 -88.56295776]
[418.37115479 -96.87984467]
[425.15502930 -111.81005096]
[441.50091553 -113.13063049]
[450.59356689 -99.48307800]
[443.07925415 -84.90682983]
[426.68804932 -84.39667511]
[414.20486450 -76.07978821]
[401.72171021 -67.76290131]
[399.01727295 -55.92705536]
[388.62414551 -48.90561676]
[375.84048462 -50.93944168]
[363.18243408 -42.89121628]
[356.59371948 -29.53314781]
[340.79672241 -28.65795898]
[328.13867188 -20.60973358]
[315.48065186 -12.56150818]
[302.82260132 -4.51328278]
[290.16455078 3.53494287]
[289.05380249 6.95195866]
[286.19174194 9.98134422]
[281.78836060 11.78694725]
[276.42752075 11.66296768]
[263.27981567 18.88365364]
[250.13214111 26.10433960]
[252.47682190 40.86197281]
[249.62562561 55.55890656]
[241.90371704 68.41762543]
[230.22656250 77.87624359]
[215.99134827 82.77816010]
[200.90989685 82.51348877]
[186.80278015 77.09488678]
[175.37954712 67.15832520]
[162.23187256 74.37901306]
[149.08418274 81.59970093]
[135.93649292 88.82038116]
[122.78880310 96.04106903]
[114.74669647 123.28620148]
[81.57281494 126.15643311]
[83.17262268 141.07087708]
[84.77242279 155.98532104]
[86.37223053 170.89976501]
[87.97203827 185.81420898]
[89.57183838 200.72865295]
[91.17164612 215.64309692]
[92.77145386 230.55754089]
[94.37125397 245.47198486]
[95.97106171 260.38641357]
[97.57086182 275.30087280]
[110.03009796 285.02420044]
[111.88172913 300.71963501]
[102.02721405 313.07537842]
[86.31307220 314.76095581]
[74.06221771 304.77636719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[3 139]
[4 138]
[5 137]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[11 131]
[12 56]
[13 55]
[14 54]
[15 53]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[26 41]
[27 40]
[29 38]
[30 37]
[57 66]
[58 65]
[59 64]
[68 129]
[69 128]
[70 127]
[71 126]
[72 125]
[80 117]
[81 116]
[82 115]
[83 111]
[84 110]
[85 109]
[86 108]
[87 107]
[89 105]
[90 104]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
