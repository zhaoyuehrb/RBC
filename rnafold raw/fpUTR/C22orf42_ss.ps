%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGUAGAAGGAGGAGGAGCUCCGACUACAUUCUGUCCUUGUGCCUCUUGGACUUUUUUGUGUGUUUAGGUGCCCA\
) } def
/len { sequence length } bind def

/coor [
[102.46722412 163.62150574]
[101.26023102 148.67013550]
[100.05323029 133.71878052]
[98.54540253 118.79476166]
[86.55375671 109.78362274]
[71.74800873 112.18979645]
[56.94224930 114.59596252]
[42.13649750 117.00212860]
[32.89515305 129.54148865]
[17.84573555 131.77076721]
[5.94833326 122.88327789]
[-8.85742092 125.28945160]
[-23.66317558 127.69561768]
[-38.46892929 130.10179138]
[-47.50236511 143.06993103]
[-63.07431793 145.76989746]
[-75.94622040 136.59986877]
[-78.48140717 121.00023651]
[-69.17579651 108.22599792]
[-53.55023575 105.85588074]
[-40.87509918 115.29603577]
[-26.06934357 112.88986206]
[-11.26358986 110.48369598]
[3.54216385 108.07752991]
[12.01290226 95.87989807]
[26.99376488 93.22878265]
[39.73032761 102.19638062]
[54.53608322 99.79020691]
[69.34183502 97.38404083]
[84.14759064 94.97786713]
[70.58238220 88.57590485]
[66.15958405 74.24276733]
[73.75868988 61.31010818]
[88.43225098 58.19779587]
[100.62699127 66.93211365]
[102.40358734 81.82612610]
[109.37443542 68.54428101]
[116.34528351 55.26244354]
[123.31613159 41.98060226]
[118.84330750 27.05975914]
[126.10194397 13.68938732]
[140.35424805 9.51718235]
[136.97337341 -6.16558409]
[147.23785400 -18.49522018]
[163.27366638 -18.01348305]
[172.77951050 -5.08992052]
[168.46331787 10.36161613]
[153.63609314 16.48802948]
[158.29867554 30.58753204]
[151.41844177 44.15650940]
[136.59797668 48.95145035]
[129.62712097 62.23329163]
[122.65628052 75.51512909]
[115.68543243 88.79697418]
[123.68948364 76.11094666]
[135.39401245 66.72991180]
[149.51847839 61.68021774]
[164.51756287 61.51432800]
[178.75025940 66.25039673]
[190.65942383 75.37026215]
[198.94209290 87.87615204]
[202.69210815 102.39984131]
[201.49917603 117.35232544]
[195.49380493 131.09771729]
[185.33305359 142.13215637]
[172.12855530 149.24842834]
[157.32498169 151.66793823]
[142.54193115 149.12597656]
[129.39677429 141.90066528]
[119.32770538 130.78250122]
[113.43603516 116.98670959]
[117.67961121 125.39624023]
[115.00459290 132.51177979]
[116.21158600 147.46313477]
[117.41858673 162.41450500]
[124.71984100 177.71574402]
[112.03776550 188.96746826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 71]
[5 30]
[6 29]
[7 28]
[8 27]
[11 24]
[12 23]
[13 22]
[14 21]
[36 54]
[37 53]
[38 52]
[39 51]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
