%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGUUUCCCCGCCCCUUUCAGGCCUAGCAGGAAACGAAGCGGCUCUUUCCGCUAUCUGCCGCUUGUCCACCGGAAGCGAGUUGCGACACGGCAGGUUCCCGCCCGGAAGAAGCGACCAAAGCGCCUGAGGACCGGCAAC\
) } def
/len { sequence length } bind def

/coor [
[90.77513123 357.55679321]
[76.12899780 354.31784058]
[67.89010620 341.78323364]
[63.28664398 356.05935669]
[69.29273224 370.93572998]
[61.28149414 384.83535767]
[45.39846420 387.09564209]
[33.82774353 375.98266602]
[35.44540024 360.02139282]
[49.01050568 351.45590210]
[53.61396408 337.17974854]
[57.25360107 322.62802124]
[59.91316223 307.86569214]
[62.57271957 293.10333252]
[52.39919662 279.75747681]
[55.03904724 262.84423828]
[69.34752655 252.84753418]
[71.67753601 238.02960205]
[74.00754547 223.21168518]
[76.33756256 208.39375305]
[78.66757202 193.57582092]
[80.99758148 178.75788879]
[83.32759094 163.93995667]
[85.65760040 149.12202454]
[87.82239532 134.27905273]
[89.82170105 119.41289520]
[75.87594604 104.18722534]
[80.10068512 81.67714691]
[66.22655487 75.97550964]
[52.35242844 70.27388000]
[38.47830200 64.57224274]
[24.60417747 58.87061310]
[18.33043289 63.37477875]
[10.93765926 65.35964203]
[3.38809252 64.61689758]
[-3.35313058 61.29007339]
[-8.44135857 55.84989929]
[-11.25819302 49.02831650]
[-11.48641491 41.72016907]
[-24.64066315 34.51144409]
[-37.79491425 27.30271721]
[-50.94916153 20.09399223]
[-64.10340881 12.88526535]
[-79.20211029 17.55483627]
[-93.14120483 10.10654068]
[-97.65087891 -5.04068232]
[-90.05563354 -18.90025139]
[-74.86157227 -23.24953270]
[-61.08308029 -15.50817299]
[-56.89468384 -0.26898363]
[-43.74043655 6.93974257]
[-30.58618736 14.14846897]
[-17.43193817 21.35719490]
[-4.27768898 28.56592178]
[17.94345665 25.39455605]
[30.30580902 44.99648666]
[44.17993546 50.69812012]
[58.05406189 56.39975357]
[71.92819214 62.10138321]
[85.80231476 67.80301666]
[100.50173950 64.81523132]
[111.04909515 54.14971161]
[121.59645081 43.48419189]
[132.14381409 32.81867599]
[142.69116211 22.15315628]
[146.89337158 6.90022039]
[161.34413147 3.29122853]
[160.65692139 -7.66587353]
[166.04327393 -16.97836304]
[175.48835754 -21.65038681]
[185.72117615 -20.33627510]
[196.73316956 -30.52135277]
[207.74517822 -40.70643234]
[218.75717163 -50.89151001]
[221.12295532 -57.20531082]
[225.66906738 -60.78308105]
[230.49401855 -61.27150726]
[241.94880676 -70.95592499]
[253.40357971 -80.64034271]
[264.52835083 -90.70211029]
[269.06933594 -105.85764313]
[283.59692383 -109.14379120]
[294.37927246 -119.57167816]
[305.16162109 -129.99955750]
[315.94400024 -140.42744446]
[315.95742798 -156.23173523]
[327.20114136 -167.33825684]
[343.00439453 -167.15769958]
[353.99142456 -155.79721069]
[353.64379883 -139.99673462]
[342.16778564 -129.13044739]
[326.37188721 -129.64509583]
[315.58950806 -119.21720886]
[304.80715942 -108.78932190]
[294.02481079 -98.36143494]
[290.25506592 -83.95178223]
[274.95623779 -79.91976166]
[274.55822754 -76.33932495]
[272.35571289 -72.78608704]
[268.38702393 -70.12953949]
[263.08801270 -69.18556213]
[251.63322449 -59.50114059]
[240.17843628 -49.81672287]
[228.94226074 -39.87950897]
[217.93025208 -29.69443130]
[206.91825867 -19.50935173]
[195.90625000 -9.32427311]
[191.63806152 9.48645306]
[172.00964355 13.83858490]
[168.56185913 28.32865143]
[153.35668945 32.70051193]
[142.80932617 43.36603165]
[132.26197815 54.03154755]
[121.71461487 64.69706726]
[111.16725922 75.36258698]
[119.54634094 82.56098938]
[124.11858368 92.22803497]
[124.34986115 102.56656647]
[120.48548126 111.77725983]
[113.45944214 118.37174225]
[104.68785858 121.41220093]
[102.68855286 136.27836609]
[104.65560150 145.28320312]
[100.47553253 151.45204163]
[98.14552307 166.26997375]
[95.81551361 181.08790588]
[93.48549652 195.90582275]
[91.15548706 210.72375488]
[88.82547760 225.54168701]
[86.49546814 240.35961914]
[84.16545868 255.17755127]
[93.32096100 265.12213135]
[95.02636719 278.33474731]
[88.87865448 289.93334961]
[77.33506012 295.76290894]
[74.67549896 310.52523804]
[72.01594543 325.28759766]
[85.18591309 318.10763550]
[99.63226318 322.14532471]
[107.17097473 335.11328125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[12 137]
[13 136]
[14 135]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[25 122]
[26 121]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[61 115]
[62 114]
[63 113]
[64 112]
[65 111]
[67 109]
[71 107]
[72 106]
[73 105]
[74 104]
[77 103]
[78 102]
[79 101]
[80 97]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
