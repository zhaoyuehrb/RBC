%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAGGUGACUGGCUGAGGCGGCGCCAGUUGGCCGGGCACGGGGCUGCUGUAAGGCCGAGGUUGCGGCGGAAGCGGAGACC\
) } def
/len { sequence length } bind def

/coor [
[116.57141876 134.25521851]
[104.95815277 143.74900818]
[90.00218964 142.60049438]
[79.97464752 131.44483948]
[80.42108917 116.45148468]
[91.09391785 105.91251373]
[76.36829376 103.05664825]
[61.64266968 100.20077515]
[46.62181473 105.16912079]
[35.60045624 95.15019226]
[20.87483215 92.29431915]
[6.14920807 89.43845367]
[-8.57641697 86.58258820]
[-23.30204201 83.72672272]
[-38.02766800 80.87085724]
[-52.75329208 78.01499176]
[-67.47891235 75.15911865]
[-82.30312347 72.86938477]
[-97.20415497 71.14913177]
[-112.10518646 69.42887878]
[-128.53323364 73.61884308]
[-137.10717773 58.99271011]
[-125.42614746 46.70491791]
[-110.38493347 54.52784729]
[-95.48390198 56.24810028]
[-80.58287048 57.96835327]
[-76.17303467 55.58558655]
[-70.18788147 56.13560867]
[-64.62304688 60.43349838]
[-49.89742279 63.28936386]
[-35.17179871 66.14523315]
[-20.44617462 69.00109863]
[-5.72055006 71.85696411]
[9.00507450 74.71282959]
[23.73069954 77.56869507]
[38.45632553 80.42456055]
[52.42390823 75.25195312]
[64.49853516 85.47515106]
[79.22415924 88.33101654]
[93.94978333 91.18688965]
[108.90577698 92.33512878]
[123.89476776 91.76058197]
[135.40907288 78.75557709]
[152.42726135 77.98846436]
[164.57826233 89.44629669]
[179.53424072 88.29805756]
[194.49023438 87.14981842]
[209.44621277 86.00157928]
[224.40220642 84.85334015]
[229.64118958 73.18424225]
[239.35688782 64.97731781]
[251.59600830 61.79971695]
[263.93341064 64.21567535]
[273.95266724 71.68750000]
[279.71939087 82.69365692]
[294.71939087 82.69365692]
[309.71939087 82.69365692]
[324.71939087 82.69365692]
[335.71609497 71.34252167]
[351.51950073 71.17543030]
[362.75372314 82.29151154]
[362.75372314 98.09580231]
[351.51950073 109.21189117]
[335.71609497 109.04479980]
[324.71939087 97.69365692]
[309.71939087 97.69365692]
[294.71939087 97.69365692]
[279.71939087 97.69365692]
[270.23120117 112.34221649]
[253.77313232 118.59797668]
[236.65365601 113.86833191]
[225.55044556 99.80932617]
[210.59445190 100.95756531]
[195.63847351 102.10580444]
[180.68247986 103.25404358]
[165.72650146 104.40228271]
[158.68084717 115.36680603]
[146.39370728 120.26982880]
[133.35400391 117.07478333]
[124.46930695 106.74958038]
[109.48031616 107.32411957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 40]
[7 39]
[8 38]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 26]
[19 25]
[20 24]
[41 81]
[42 80]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
