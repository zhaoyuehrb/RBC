%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGUGGGAGUGGGCGCGGGCGCAGGCGAACGGCUGCCGGUCAGGUGUCCUUGUCCCCUUGAGUUGCGCGGGUCGUGUUCGAGGGC\
) } def
/len { sequence length } bind def

/coor [
[130.40124512 197.85299683]
[115.43115234 196.90625000]
[102.81216431 188.79692078]
[95.73158264 175.57325745]
[95.97782135 160.57528687]
[103.48867798 147.59117126]
[116.36706543 139.90045166]
[131.36148071 139.44593811]
[120.38305664 129.22467041]
[109.40464020 119.00341034]
[93.03475189 120.02653503]
[80.83276367 109.06607819]
[80.10016632 92.68061829]
[68.76392365 82.85770416]
[57.42768097 73.03479767]
[46.09143448 63.21188736]
[34.75519180 53.38897324]
[23.41894913 43.56606293]
[5.35050821 40.61478424]
[0.04543637 23.98968697]
[-11.63418674 14.57765293]
[-23.31381035 5.16561747]
[-35.32192993 -3.82354736]
[-47.64324188 -12.37838745]
[-59.96455002 -20.93322563]
[-72.28586578 -29.48806572]
[-88.03437042 -31.00303841]
[-94.07605743 -44.61726761]
[-110.45446777 -45.44178391]
[-117.68776703 -60.15950775]
[-108.33496094 -73.63010406]
[-92.01741028 -71.99618530]
[-85.52121735 -56.93857956]
[-70.65401459 -56.03550720]
[-63.73102188 -41.80937958]
[-51.40971375 -33.25453949]
[-39.08840179 -24.69969940]
[-26.76708794 -16.14485931]
[-21.78150749 -16.15427399]
[-16.79059601 -12.87232494]
[-13.90177441 -6.51400566]
[-2.22215152 2.89802957]
[9.45747185 12.31006432]
[21.65894699 11.35801029]
[31.49461555 19.30099869]
[33.24185944 32.22982025]
[44.57810211 42.05273056]
[55.91434860 51.87564087]
[67.25058746 61.69855499]
[78.58683777 71.52146149]
[89.92308044 81.34437561]
[102.50244904 78.94496918]
[114.16896820 84.22605896]
[120.66689301 95.26121521]
[119.62590790 108.02498627]
[130.60432434 118.24626160]
[141.58274841 128.46752930]
[154.20155334 136.57713318]
[168.05973816 142.31739807]
[181.91793823 148.05764771]
[195.77612305 153.79789734]
[209.63432312 159.53814697]
[223.49250793 165.27839661]
[229.12635803 164.50787354]
[233.93008423 165.98011780]
[237.14938354 168.94232178]
[238.47207642 172.44517517]
[251.63726807 179.63391113]
[264.80245972 186.82264709]
[277.96762085 194.01138306]
[291.13281250 201.20011902]
[307.93218994 203.48425293]
[310.38784790 220.25942993]
[294.94805908 227.26293945]
[283.94409180 214.36529541]
[270.77890015 207.17657471]
[257.61370850 199.98783875]
[244.44853210 192.79910278]
[231.28334045 185.61036682]
[217.75225830 179.13659668]
[203.89407349 173.39633179]
[190.03587341 167.65608215]
[176.17767334 161.91583252]
[162.31948853 156.17558289]
[148.46128845 150.43533325]
[154.27656555 164.26220703]
[152.63139343 179.17172241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 57]
[9 56]
[10 55]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[20 43]
[21 42]
[22 41]
[23 38]
[24 37]
[25 36]
[26 35]
[28 33]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[67 79]
[68 78]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
