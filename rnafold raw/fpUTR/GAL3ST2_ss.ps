%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCUGCCCCACAGCCGCACCCUGCCUGUGCCUGCACCCUGGGGAGCCCAGAGCCGGCAGGGGCCGAGGCGGUGGGACCUCGGGGGAGCUCAAGCCUCGACUGUCCCCUCGCUGGAGGCCAGAGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[88.27980804 280.46722412]
[85.41627502 265.30795288]
[91.22422028 251.01559448]
[103.85034943 242.15080261]
[103.13661957 227.16778564]
[102.42288971 212.18478394]
[101.17483521 197.23678589]
[99.39405060 182.34288025]
[97.61326599 167.44895935]
[95.65537262 152.57728577]
[93.52064514 137.72996521]
[91.38592529 122.88263702]
[85.76746368 113.69110870]
[85.72274017 104.75135040]
[89.73326111 98.72573090]
[76.92504883 90.91871643]
[64.11682892 83.11169434]
[51.30860519 75.30467987]
[38.50038910 67.49766541]
[29.44811821 65.67360687]
[25.48338127 59.34936905]
[9.69083691 58.39746094]
[3.16707444 45.00754929]
[-12.62546921 44.05564117]
[-19.14923096 30.66572952]
[-31.76803398 22.55611610]
[-44.38683701 14.44650459]
[-57.00564194 6.33689213]
[-72.79818726 5.38498688]
[-79.32194519 -8.00492668]
[-91.94075012 -16.11454010]
[-104.55955505 -24.22415161]
[-117.17835236 -32.33376312]
[-132.97090149 -33.28566742]
[-139.49465942 -46.67558289]
[-152.11346436 -54.78519440]
[-162.71121216 -51.83955002]
[-172.95359802 -55.19724655]
[-179.47752380 -63.49829865]
[-180.28448486 -73.80384827]
[-192.50312805 -82.50469971]
[-204.72175598 -91.20555115]
[-216.94039917 -99.90640259]
[-229.15904236 -108.60726166]
[-245.56843567 -112.86965179]
[-246.01519775 -129.81771851]
[-229.85314941 -134.93870544]
[-220.45819092 -120.82589722]
[-208.23954773 -112.12504578]
[-196.02090454 -103.42419434]
[-183.80227661 -94.72333527]
[-171.58363342 -86.02248383]
[-152.30731201 -85.70209503]
[-144.00384521 -67.40399933]
[-131.38505554 -59.29438782]
[-116.49508667 -58.92253494]
[-109.06874084 -44.95256805]
[-96.44994354 -36.84295273]
[-83.83113861 -28.73334312]
[-71.21233368 -20.62372971]
[-56.32237244 -20.25187874]
[-48.89602661 -6.28191090]
[-36.27722549 1.82770133]
[-23.65842247 9.93731403]
[-11.03961945 18.04692650]
[3.85034347 18.41877747]
[11.27668667 32.38874435]
[26.16664886 32.76059723]
[33.59299469 46.73056412]
[46.30740356 54.68944168]
[59.11562347 62.49645996]
[71.92384338 70.30347443]
[84.73206329 78.11049652]
[97.54028320 85.91751099]
[112.47235870 87.34335327]
[126.52660370 82.10138702]
[140.58085632 76.85942841]
[154.63510132 71.61746216]
[168.68934631 66.37550354]
[180.02012634 51.91751862]
[197.18086243 55.38412094]
[211.10636902 49.80918503]
[225.03189087 44.23424911]
[238.95741272 38.65931320]
[252.88293457 33.08437729]
[266.80844116 27.50943947]
[269.62707520 12.34174347]
[280.21514893 1.12139475]
[295.19406128 -2.57123590]
[309.78408813 2.44215703]
[319.32965088 14.56181812]
[320.78472900 29.92040634]
[313.68505859 43.61705399]
[300.29611206 51.28120804]
[284.89022827 50.46726990]
[272.38339233 41.43495941]
[258.45785522 47.00989532]
[244.53234863 52.58483124]
[230.60682678 58.15976715]
[216.68130493 63.73470306]
[202.75579834 69.30963898]
[197.66629028 80.35053253]
[186.03065491 85.07868195]
[173.93130493 80.42974854]
[159.87705994 85.67170715]
[145.82281494 90.91367340]
[131.76856995 96.15563202]
[117.71432495 101.39759827]
[132.70759583 101.84665680]
[142.48861694 113.21907043]
[140.68939209 128.11077881]
[128.48132324 136.82644653]
[113.81253052 133.69172668]
[106.23324585 120.74791718]
[108.36797333 135.59524536]
[110.50269318 150.44256592]
[114.85961914 158.58430481]
[112.50717926 165.66816711]
[114.28797150 180.56208801]
[116.06875610 195.45600891]
[119.32453918 199.78451538]
[120.41536713 204.46243286]
[119.58370972 208.58149719]
[117.40589905 211.47105408]
[118.11962891 226.45405579]
[118.83335876 241.43707275]
[132.24496460 249.06153870]
[139.38517761 262.73709106]
[137.97560120 278.09991455]
[128.46600342 290.24780273]
[113.89086914 295.30438232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 126]
[5 125]
[6 124]
[7 120]
[8 119]
[9 118]
[10 116]
[11 115]
[12 114]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[21 69]
[23 67]
[25 65]
[26 64]
[27 63]
[28 62]
[30 60]
[31 59]
[32 58]
[33 57]
[35 55]
[36 54]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[75 108]
[76 107]
[77 106]
[78 105]
[79 104]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
