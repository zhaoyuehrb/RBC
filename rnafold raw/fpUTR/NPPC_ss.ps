%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCUCAGAGCGCACCCAGCCGGCGCCGCGCAGCACUGGGACCCUGCUCGCCCUGCAGCCCAGCCAGCCUGCUCCGCAUCCCCCUGCUGGUCUGCCCGCCGACCUGCGCGCCCUCGCUGCCGCCCGUGUGCGCCCCUCGACCCCAGCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[182.10836792 485.66851807]
[194.37295532 476.51217651]
[191.95138550 461.70892334]
[189.52983093 446.90567017]
[179.83937073 435.59445190]
[185.24731445 420.72619629]
[182.82575989 405.92294312]
[180.25431824 391.14501953]
[177.53323364 376.39389038]
[165.44154358 363.71008301]
[171.66845703 346.40963745]
[168.64897156 331.71667480]
[165.62950134 317.02374268]
[162.61001587 302.33078003]
[159.59054565 287.63781738]
[156.57106018 272.94488525]
[153.40284729 258.28329468]
[149.20338440 243.88313293]
[144.13661194 229.76477051]
[139.06985474 215.64642334]
[134.00309753 201.52807617]
[118.36330414 190.21611023]
[122.09548950 170.44552612]
[116.46073914 156.54409790]
[110.82598114 142.64268494]
[105.19122314 128.74125671]
[99.55647278 114.83983612]
[85.24651337 113.14132690]
[75.42169189 97.89140320]
[63.02403641 89.44758606]
[50.62637711 81.00376892]
[34.86489868 79.63031769]
[28.70116615 66.07090759]
[16.30350876 57.62708664]
[3.90585113 49.18326569]
[-8.49180698 40.73944855]
[-21.37966347 33.06460953]
[-34.71008301 26.18711662]
[-48.04050446 19.30962563]
[-61.37092590 12.43213367]
[-74.70134735 5.55464172]
[-80.03284454 5.81502914]
[-84.46514130 4.13728333]
[-87.40260315 1.20304978]
[-88.61389160 -2.16745162]
[-101.50174713 -9.84229088]
[-114.38960266 -17.51712990]
[-127.27745819 -25.19196892]
[-141.98234558 -19.87214279]
[-156.64859009 -25.29754639]
[-164.35127258 -38.90647125]
[-161.45338440 -54.27320099]
[-149.32325745 -64.14202881]
[-133.68833923 -63.85320663]
[-121.93096924 -53.54309845]
[-119.60262299 -38.07982635]
[-106.71476746 -30.40498543]
[-93.82691193 -22.73014641]
[-80.93904877 -15.05530834]
[-67.82385254 -7.77577877]
[-54.49343109 -0.89828694]
[-41.16301346 5.97920513]
[-27.83259201 12.85669708]
[-14.50217152 19.73418808]
[-17.64081001 5.06623220]
[-9.64632511 -7.62582111]
[4.93861675 -11.13002968]
[17.82648849 -3.45521522]
[21.69407845 11.03760147]
[14.34372711 24.11324120]
[-0.04798781 28.34178925]
[12.34967041 36.78561020]
[24.74732780 45.22942734]
[37.14498520 53.67324829]
[52.01969910 54.44273758]
[59.07019806 68.60610962]
[71.46785736 77.04992676]
[83.86551666 85.49374390]
[72.14413452 76.13375854]
[67.70731354 61.80495834]
[72.08827972 47.45898056]
[83.77310181 38.05339813]
[98.72382355 36.83852768]
[111.77388763 44.23418808]
[118.41355896 57.68465042]
[116.34833527 72.54180145]
[106.29161072 83.67159271]
[117.16349792 73.33708954]
[121.83502197 58.22129059]
[136.39039612 55.06055832]
[147.26229858 44.72605515]
[158.13418579 34.39155197]
[169.00607300 24.05704880]
[166.83427429 8.69270897]
[174.13790894 -4.99803925]
[188.10858154 -11.75082493]
[203.37426758 -8.96906281]
[214.06501770 2.27760148]
[216.07002258 17.66459656]
[208.61830139 31.27530861]
[194.57519531 37.87614059]
[179.34057617 34.92893982]
[168.46868896 45.26344299]
[157.59680176 55.59794617]
[146.72489929 65.93244934]
[142.83100891 80.30905914]
[127.49800110 84.20898438]
[116.62611389 94.54348755]
[113.45789337 109.20507812]
[119.09264374 123.10650635]
[124.72740173 137.00791931]
[130.36215210 150.90934753]
[135.99691772 164.81077576]
[146.30989075 168.49398804]
[152.73452759 177.08879089]
[153.32278442 187.58265686]
[148.12144470 196.46130371]
[153.18820190 210.57966614]
[158.25497437 224.69801331]
[163.32173157 238.81636047]
[171.02255249 225.94401550]
[185.52314758 222.10569763]
[198.58392334 229.48243713]
[202.78341675 243.88258362]
[195.73536682 257.12362671]
[181.44465637 261.68167114]
[168.03158569 254.96664429]
[173.00840759 262.69790649]
[171.26400757 269.92541504]
[174.28349304 284.61834717]
[177.30296326 299.31130981]
[180.32244873 314.00424194]
[183.34191895 328.69720459]
[186.36140442 343.39013672]
[196.70777893 351.15591431]
[198.89517212 363.49853516]
[192.28436279 373.67279053]
[195.00544739 388.42391968]
[199.66487122 396.35052490]
[197.62901306 403.50140381]
[200.05056763 418.30462646]
[209.91423035 430.67471313]
[204.33308411 444.48413086]
[206.75463867 459.28735352]
[209.17619324 474.09060669]
[223.71907043 478.86172485]
[234.37055969 489.85281372]
[238.68305969 504.53820801]
[235.66557312 519.54333496]
[226.01148987 531.42010498]
[211.93927002 537.43927002]
[196.68257141 536.21777344]
[183.74731445 528.03625488]
[176.10588074 514.77478027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[4 143]
[6 141]
[7 140]
[8 138]
[9 137]
[11 134]
[12 133]
[13 132]
[14 131]
[15 130]
[16 129]
[17 127]
[18 120]
[19 119]
[20 118]
[21 117]
[23 113]
[24 112]
[25 111]
[26 110]
[27 109]
[29 78]
[30 77]
[31 76]
[33 74]
[34 73]
[35 72]
[36 71]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[45 59]
[46 58]
[47 57]
[48 56]
[87 108]
[88 107]
[90 105]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
