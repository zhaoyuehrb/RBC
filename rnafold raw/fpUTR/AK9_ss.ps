%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUCGGGUAGAGGCUCCCGGGACCUGCGUGCUGCCGAGAGAGGAAGCGAAGGGCACCAUCUUUGUAUUUUGUGUC\
) } def
/len { sequence length } bind def

/coor [
[38.42755508 134.84815979]
[18.75251770 122.99963379]
[4.95282602 128.87913513]
[-8.84686565 134.75863647]
[-22.64655685 140.63813782]
[-36.44624710 146.51763916]
[-49.99800491 152.94802856]
[-63.27984619 159.91886902]
[-76.56168365 166.88970947]
[-78.67039490 182.26284790]
[-89.43674469 193.43716431]
[-104.72084808 196.11592102]
[-118.64566040 189.26907349]
[-125.85681152 175.52938843]
[-123.58145142 160.18003845]
[-112.69451904 149.12316895]
[-97.38224792 146.61038208]
[-83.53253174 153.60787964]
[-70.25069427 146.63702393]
[-56.96885300 139.66618347]
[-54.66279221 135.19296265]
[-49.37871170 132.27059937]
[-42.32574844 132.71794128]
[-28.52605629 126.83843994]
[-14.72636509 120.95894623]
[-0.92667305 115.07944489]
[12.87301826 109.19994354]
[12.65154934 101.05449677]
[14.61628532 93.12334442]
[18.63645744 85.98412323]
[24.43115616 80.16005707]
[31.58893585 76.08164215]
[39.59701538 74.05482483]
[47.87799835 74.23807526]
[55.83152390 76.63008881]
[62.87777710 81.06896210]
[68.49975586 87.24315643]
[72.28121185 94.71329498]
[87.23257446 93.50629425]
[98.84740448 85.72250366]
[111.56042480 91.54234314]
[124.69326019 82.71968079]
[138.00184631 89.40777588]
[152.95321655 88.20077515]
[167.90457153 86.99377441]
[182.85592651 85.78678131]
[195.98875427 76.96411896]
[209.29734802 83.65220642]
[224.24871826 82.44520569]
[239.20007324 81.23821259]
[254.15142822 80.03121185]
[269.10278320 78.82421112]
[284.05413818 77.61721039]
[299.00552368 76.41021729]
[309.05316162 64.21102142]
[324.79187012 62.77282333]
[336.88415527 72.94888306]
[338.15588379 88.70191956]
[327.85253906 100.68594360]
[312.08694458 101.79103851]
[300.21252441 91.36157227]
[285.26113892 92.56857300]
[270.30978394 93.77557373]
[255.35842896 94.98256683]
[240.40707397 96.18956757]
[225.45571899 97.39656830]
[210.50434875 98.60356903]
[198.44094849 107.33989716]
[184.06292725 100.73813629]
[169.11157227 101.94513702]
[154.16021729 103.15213776]
[139.20884705 104.35913086]
[127.14544678 113.09546661]
[112.76742554 106.49370575]
[101.15259552 114.27749634]
[88.43957520 108.45765686]
[73.48821259 109.66464996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 20]
[8 19]
[9 18]
[38 77]
[39 76]
[41 74]
[43 72]
[44 71]
[45 70]
[46 69]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
