%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUGCGCUGAACGCAUGCGUGCUGUGGUCGCCUAGUAAACGGGGCUGCUGGUGGGCCGCGUCGAAGAC\
) } def
/len { sequence length } bind def

/coor [
[89.08289337 138.27178955]
[88.96885681 123.27222443]
[95.14508057 109.60584259]
[80.96350098 114.49285126]
[66.78192139 119.37985992]
[52.60034561 124.26686859]
[38.41876602 129.15388489]
[24.23719025 134.04089355]
[10.05561256 138.92790222]
[-4.01438379 144.12744141]
[-17.96591187 149.63696289]
[-27.73427582 162.80932617]
[-43.99292755 160.66729736]
[-50.01636124 145.41441345]
[-39.60818481 132.74154663]
[-23.47543716 135.68542480]
[-9.52390766 130.17590332]
[-4.29483652 124.61238861]
[5.16860390 124.74632263]
[19.35018158 119.85931396]
[33.53175735 114.97230530]
[47.71333694 110.08529663]
[61.89491653 105.19828796]
[76.07649231 100.31127930]
[90.25807190 95.42427063]
[102.66054535 86.98752594]
[112.41487885 75.59222412]
[122.16921234 64.19691467]
[131.92353821 52.80160904]
[141.67787170 41.40630341]
[151.43220520 30.01099777]
[150.39550781 14.46869946]
[160.45011902 3.05119300]
[175.27371216 2.15863538]
[185.02804565 -9.23667145]
[194.78236389 -20.63197708]
[204.53669739 -32.02728271]
[214.29103088 -43.42258835]
[224.04536438 -54.81789780]
[220.30882263 -69.87837219]
[226.16941833 -84.24615479]
[239.37361145 -92.39653778]
[254.84414673 -91.19553375]
[266.63226318 -81.10494995]
[270.20520020 -66.00482941]
[264.18908691 -51.70146942]
[250.89726257 -43.69480515]
[235.44067383 -45.06356430]
[225.68634033 -33.66825867]
[215.93200684 -22.27295113]
[206.17767334 -10.87764549]
[196.42333984 0.51766115]
[186.66900635 11.91296768]
[188.07365417 26.69682884]
[178.34370422 38.39224243]
[162.82751465 39.76532745]
[153.07318115 51.16063690]
[143.31884766 62.55594254]
[133.56451416 73.95124817]
[123.81018829 85.34655762]
[114.05585480 96.74185944]
[129.03836060 96.01750946]
[142.94712830 101.63407898]
[153.22543335 112.55912018]
[157.98387146 126.78435516]
[156.34773254 141.69485474]
[148.61778259 154.54972839]
[136.21496582 162.98596191]
[121.41918945 165.45277405]
[106.95027161 161.49670410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 17]
[11 16]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
