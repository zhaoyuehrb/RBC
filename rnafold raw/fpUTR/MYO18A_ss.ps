%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAUCCCUGACCGGGCCGAGGCUGCUGGAUGCCGCGUCUCCGCUUCUGCUGCCUGCCGGGCGGGCUCCGGUGGCCGCAGCAAAGUGGGGCACCAAGGCCCUGUGCUAAGCACUCAUAAUCCUCUGGGGGUGCUACCCCUACAAACAGCACCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[97.00224304 171.50769043]
[84.51551056 179.81922913]
[69.97378540 183.49865723]
[55.03671646 182.12608337]
[41.40906906 175.85813904]
[30.64616203 165.41017151]
[23.97636795 151.97462463]
[22.16090584 137.08489990]
[25.40697861 122.44034576]
[33.34410858 109.71234131]
[45.06643295 100.35354614]
[59.23608398 95.43206787]
[74.23588562 95.50959778]
[88.35610962 100.57852936]
[76.89725494 90.89892578]
[65.43840027 81.21932220]
[53.97954559 71.53972626]
[42.52069473 61.86012268]
[26.98550797 62.99844742]
[15.50249195 53.01871872]
[14.51301098 38.20127869]
[3.05415773 28.52167892]
[-5.57020378 25.35046577]
[-8.53301620 18.53586960]
[-19.79839134 8.63176250]
[-31.06376648 -1.27234399]
[-42.32913971 -11.17645073]
[-56.87396622 -14.84360886]
[-71.48840332 -11.46453094]
[-86.10284424 -8.08545208]
[-100.71728516 -4.70637321]
[-115.33172607 -1.32729471]
[-129.40165710 8.13174057]
[-142.38597107 -2.76981091]
[-135.50486755 -18.26454544]
[-118.71080017 -15.94173336]
[-104.09635925 -19.32081223]
[-89.48192596 -22.69989014]
[-74.86748505 -26.07896996]
[-60.25304413 -29.45804787]
[-54.75322723 -43.41340637]
[-63.13293076 -55.85449219]
[-71.51263428 -68.29557800]
[-79.89233398 -80.73666382]
[-88.27203369 -93.17774963]
[-96.65173340 -105.61883545]
[-104.08216858 -111.02484131]
[-105.07125092 -118.38953400]
[-113.20352173 -130.99374390]
[-121.33578491 -143.59796143]
[-129.46804810 -156.20217896]
[-137.60031128 -168.80639648]
[-145.73257446 -181.41061401]
[-154.11227417 -193.85169983]
[-162.73614502 -206.12478638]
[-171.36001587 -218.39788818]
[-179.98388672 -230.67098999]
[-188.60774231 -242.94409180]
[-197.23161316 -255.21717834]
[-205.85548401 -267.49029541]
[-214.47933960 -279.76336670]
[-229.97227478 -283.92852783]
[-236.24314880 -298.69525146]
[-228.48146057 -312.73574829]
[-212.64134216 -315.27938843]
[-200.87396240 -304.37487793]
[-202.20625305 -288.38723755]
[-193.58238220 -276.11413574]
[-184.95851135 -263.84106445]
[-176.33465576 -251.56794739]
[-167.71078491 -239.29486084]
[-159.08691406 -227.02175903]
[-150.46304321 -214.74865723]
[-141.83918762 -202.47555542]
[-137.32202148 -200.78157043]
[-133.84454346 -196.20208740]
[-133.12835693 -189.54287720]
[-124.99610138 -176.93865967]
[-116.86383057 -164.33444214]
[-108.73156738 -151.73022461]
[-100.59930420 -139.12600708]
[-92.46704102 -126.52179718]
[-84.21064758 -113.99853516]
[-75.83094788 -101.55744934]
[-67.45124817 -89.11636353]
[-59.07154846 -76.67527771]
[-50.69184494 -64.23419189]
[-42.31214523 -51.79310608]
[-32.42503357 -22.44182587]
[-21.15966034 -12.53771877]
[-9.89428425 -2.63361263]
[1.37109053 7.27049351]
[12.73375893 17.06282616]
[24.19261169 26.74242783]
[38.96697235 25.24112701]
[50.72576904 34.89438248]
[52.20029449 50.40126801]
[63.65914917 60.08087158]
[75.11800385 69.76047516]
[86.57685089 79.44007111]
[98.03570557 89.11967468]
[102.68071747 74.76008606]
[115.10506439 63.27773666]
[128.64703369 56.82675934]
[142.18899536 50.37578201]
[155.73097229 43.92480087]
[167.43017578 31.65431976]
[182.45979309 39.49951553]
[179.08180237 56.11353302]
[162.18194580 57.46677017]
[148.63998413 63.91774750]
[135.09800720 70.36872864]
[121.55604553 76.81970215]
[120.08377838 84.17378235]
[135.06074524 85.00488281]
[150.03770447 85.83597565]
[164.42771912 81.60189056]
[177.32681274 89.25781250]
[180.50279236 103.91773224]
[171.92874146 116.22567749]
[157.07661438 118.32671356]
[145.42456055 108.87902069]
[131.28190613 103.88047791]
[117.13925934 98.88193512]
[115.66699982 106.23601532]
[125.68191528 117.40299225]
[135.69682312 128.56997681]
[145.71174622 139.73695374]
[155.72665405 150.90394592]
[165.74157715 162.07092285]
[175.75648499 173.23789978]
[185.77140808 184.40489197]
[195.78631592 195.57186890]
[205.80123901 206.73884583]
[220.44592285 202.43815613]
[235.50492859 204.92591858]
[247.98828125 213.70820618]
[255.41740417 227.04127502]
[256.31723022 242.27784729]
[250.50912476 256.39266968]
[239.14627075 266.58328247]
[224.48475647 270.82626343]
[209.43566895 268.27920532]
[196.98698425 259.44784546]
[189.61042786 246.08561707]
[188.77059937 230.84561157]
[194.63424683 216.75376892]
[184.61933899 205.58677673]
[174.60441589 194.41979980]
[164.58950806 183.25282288]
[154.57458496 172.08583069]
[144.55967712 160.91885376]
[134.54476929 149.75187683]
[124.52984619 138.58488464]
[114.51493073 127.41790771]
[104.50002289 116.25092316]
[109.98464203 130.21226501]
[110.50748444 145.20315552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 101]
[15 100]
[16 99]
[17 98]
[18 97]
[21 94]
[22 93]
[24 92]
[25 91]
[26 90]
[27 89]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[41 88]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[48 82]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[103 113]
[104 112]
[105 111]
[106 110]
[125 156]
[126 155]
[127 154]
[128 153]
[129 152]
[130 151]
[131 150]
[132 149]
[133 148]
[134 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
