%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCCGCUUCCGGCAGCGCGAGAUAAAUCACGAGAGGAAGCUUAAAUCUGUCGUUUGAAUUUAGGACCACCUCGGUUCACA\
) } def
/len { sequence length } bind def

/coor [
[93.23760986 162.94645691]
[76.60543060 158.82756042]
[61.68696213 150.39938354]
[49.57501602 138.27934265]
[41.15682220 123.35524750]
[37.04903030 106.72032166]
[37.55255127 89.59310913]
[23.15290642 85.39189148]
[8.75326252 81.19067383]
[-5.64638138 76.98944855]
[-20.04602623 72.78823090]
[-34.44567108 68.58701324]
[-43.45963287 77.65441132]
[-55.43951416 81.90727234]
[-68.00765991 80.56864166]
[-78.69854736 73.96473694]
[-85.44245148 63.44838333]
[-86.96604919 51.12237930]
[-101.00672150 45.84416580]
[-116.64691162 48.23060608]
[-125.83760071 36.50966263]
[-139.87826538 31.23144531]
[-154.16590881 37.98709488]
[-169.01741028 32.58258057]
[-175.62161255 18.22430992]
[-170.06039429 3.43078899]
[-155.63310242 -3.02124953]
[-140.89920044 2.69607496]
[-134.60005188 17.19077492]
[-120.55937958 22.46899033]
[-105.92347717 19.70501709]
[-95.72850800 31.80349350]
[-81.68783569 37.08171082]
[-67.64710236 26.70816231]
[-50.03606033 26.65003777]
[-35.67824554 37.11200333]
[-30.24444962 54.18736649]
[-15.84480476 58.38858795]
[-1.44516098 62.58980560]
[12.95448303 66.79102325]
[27.35412788 70.99224854]
[41.75377274 75.19346619]
[48.06744766 63.79230499]
[56.58190536 53.92553711]
[66.93631744 46.01129532]
[78.69188690 40.38497162]
[91.35044861 37.28498840]
[104.37555695 36.84272385]
[117.21524048 39.07691193]
[129.32537842 43.89287567]
[140.19277954 51.08653259]
[149.35690308 60.35302353]
[156.42939758 71.29965973]
[161.11054993 83.46254730]
[163.20198059 96.32625580]
[162.61506653 109.34564972]
[159.37466431 121.96899414]
[172.72685242 128.80413818]
[186.07904053 135.63926697]
[199.43122864 142.47441101]
[212.78340149 149.30955505]
[226.13558960 156.14468384]
[241.94546509 155.54577637]
[249.74888611 168.23260498]
[263.10107422 175.06774902]
[276.45324707 181.90287781]
[292.79531860 180.53567505]
[301.92687988 194.15721130]
[294.45419312 208.75485229]
[278.06448364 209.31176758]
[269.61810303 195.25506592]
[256.26593018 188.41993713]
[242.91374207 181.58479309]
[228.05891418 182.67260742]
[219.30046082 169.49687195]
[205.94827271 162.66172791]
[192.59608459 155.82659912]
[179.24389648 148.99145508]
[165.89170837 142.15631104]
[152.53952026 135.32118225]
[141.14340210 148.11660767]
[126.73341370 157.38737488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[18 33]
[19 32]
[21 30]
[22 29]
[57 80]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
