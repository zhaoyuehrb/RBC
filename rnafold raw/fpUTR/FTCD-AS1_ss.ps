%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCGACCUGCGCGGUCCCCGCACGGUGUGGACGCGGAGGCUGGGCCGGUCUGCAGGUGGGAGGCCGAACCCUGUCCGGCCGGUGCCCCAUCCCCACCGACCUCCCCGCCUGAGGCUCUCAGCCUCUAACCCUUUCCCGAGGGGCUGGGUGGGGCUCC\
) } def
/len { sequence length } bind def

/coor [
[84.63986969 120.51431274]
[70.82405090 126.35581970]
[57.00823212 132.19731140]
[43.19241333 138.03881836]
[29.37659264 143.88032532]
[19.67904472 156.38104248]
[4.94336891 154.21099854]
[-8.87244987 160.05250549]
[-22.68826866 165.89399719]
[-36.50408936 171.73550415]
[-46.20163727 184.23623657]
[-60.93731308 182.06617737]
[-74.75312805 187.90768433]
[-84.45067596 200.40841675]
[-99.18635559 198.23835754]
[-113.00217438 204.07986450]
[-126.81799316 209.92137146]
[-140.63380432 215.76286316]
[-154.44963074 221.60437012]
[-164.14717102 234.10510254]
[-178.88285828 231.93504333]
[-192.69866943 237.77655029]
[-206.51449585 243.61805725]
[-220.33030701 249.45954895]
[-221.54029846 264.71716309]
[-229.71205139 277.65859985]
[-242.96778870 285.31002808]
[-258.26141357 285.91320801]
[-272.07855225 279.32952881]
[-281.24417114 267.07186890]
[-283.65203857 251.95693970]
[-278.74884033 237.45805359]
[-267.66134644 226.90696716]
[-252.93731689 222.72821045]
[-237.96028137 225.88203430]
[-226.17181396 235.64373779]
[-212.35598755 229.80223083]
[-198.54017639 223.96072388]
[-184.72434998 218.11923218]
[-176.01501465 206.03633118]
[-160.29113770 207.78854370]
[-146.47531128 201.94705200]
[-132.65950012 196.10554504]
[-118.84367371 190.26403809]
[-105.02785492 184.42254639]
[-96.31851196 172.33964539]
[-80.59463501 174.09187317]
[-66.77881622 168.25036621]
[-58.06946564 156.16746521]
[-42.34558868 157.91969299]
[-28.52977180 152.07818604]
[-14.71395206 146.23667908]
[-0.89813375 140.39518738]
[7.81121445 128.31227112]
[23.53508949 130.06449890]
[37.35091019 124.22299957]
[51.16672897 118.38150024]
[64.98254395 112.54000092]
[78.79836273 106.69849396]
[63.81492996 107.40325928]
[53.18868637 96.81632996]
[53.83790207 81.83039093]
[65.33989716 72.20209503]
[80.20624542 74.19998932]
[88.75806427 86.52290344]
[84.99370575 72.00292969]
[81.22934723 57.48295975]
[77.46498871 42.96298599]
[73.70063019 28.44301414]
[62.74768829 17.02620316]
[67.04338074 2.76449656]
[63.27902222 -11.75547600]
[53.45122910 -25.57035446]
[64.00561523 -38.83840942]
[79.67689514 -32.36945724]
[77.79899597 -15.51983452]
[81.56335449 -0.99986154]
[92.24704742 9.37838364]
[88.22060394 24.67865562]
[91.98496246 39.19862747]
[95.74932098 53.71860123]
[99.51367950 68.23857117]
[103.27803802 82.75854492]
[114.91370392 92.22486877]
[129.89585876 92.95631409]
[144.05691528 85.90116119]
[156.39175415 94.24987793]
[171.37390137 94.98132324]
[186.35606384 95.71276855]
[201.33821106 96.44421387]
[216.32037354 97.17566681]
[231.30252075 97.90711212]
[246.28468323 98.63855743]
[261.26684570 99.37000275]
[276.24899292 100.10145569]
[278.26937866 92.97010803]
[281.31384277 86.21697998]
[285.31512451 79.98812103]
[290.18530273 74.41802979]
[295.81768799 69.62676239]
[302.08920288 65.71733856]
[308.86306763 62.77353287]
[315.99172974 60.85805893]
[323.32012939 60.01125717]
[330.68905640 60.25023651]
[337.93862915 61.56853104]
[344.91168213 63.93626404]
[351.45730591 67.30083466]
[357.43402100 71.58807373]
[362.71282959 76.70388794]
[367.18008423 82.53631592]
[370.73977661 88.95799255]
[373.31579590 95.82890320]
[374.85345459 102.99947357]
[389.85272217 103.14582062]
[404.85202026 103.29216766]
[419.85131836 103.43851471]
[434.85058594 103.58485413]
[449.84988403 103.73120117]
[465.74725342 97.83968353]
[475.80935669 111.48484039]
[465.48291016 124.93106842]
[449.70352173 118.73049164]
[434.70425415 118.58414459]
[419.70495605 118.43779755]
[404.70568848 118.29145050]
[389.70639038 118.14511108]
[374.70709229 117.99876404]
[373.72750854 122.62664795]
[372.31292725 127.14061737]
[370.47610474 131.49987793]
[368.23370361 135.66502380]
[379.77645874 145.24441528]
[391.31921387 154.82380676]
[402.86196899 164.40319824]
[414.40472412 173.98258972]
[430.65222168 176.20782471]
[436.59747314 191.49133301]
[426.12454224 204.11076355]
[410.00708008 201.08432007]
[404.82534790 185.52534485]
[393.28259277 175.94595337]
[381.73983765 166.36656189]
[370.19708252 156.78717041]
[358.65429688 147.20777893]
[334.40393066 159.13818359]
[307.41616821 156.64801025]
[285.63613892 140.39048767]
[275.51754761 115.08361053]
[260.53540039 114.35216522]
[245.55323792 113.62071228]
[230.57107544 112.88926697]
[215.58892822 112.15782166]
[200.60676575 111.42637634]
[185.62461853 110.69492340]
[170.64245605 109.96347809]
[155.66029358 109.23203278]
[142.57087708 116.33950806]
[129.16441345 107.93846893]
[114.18225861 107.20702362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[5 55]
[7 53]
[8 52]
[9 51]
[10 50]
[12 48]
[13 47]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[21 39]
[22 38]
[23 37]
[24 36]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[71 77]
[72 76]
[84 160]
[85 159]
[87 157]
[88 156]
[89 155]
[90 154]
[91 153]
[92 152]
[93 151]
[94 150]
[95 149]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
[119 123]
[132 145]
[133 144]
[134 143]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
