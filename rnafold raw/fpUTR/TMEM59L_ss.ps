%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGCCCCGGUCCCCGCCGCAGCCGCUGCAUCCUCCGUGCCCGGCCUGAGCUGGAGUCCCCCGCGCCCCCCGCGUUCCGCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[28.05569458 113.66432953]
[14.89050961 120.85306549]
[1.72532451 128.04179382]
[-11.43986034 135.23052979]
[-24.60504532 142.41926575]
[-37.63982010 149.84184265]
[-41.65530396 164.89221191]
[-54.84698868 172.47073364]
[-69.17047119 168.54983521]
[-82.07068634 176.20388794]
[-94.97090149 183.85794067]
[-107.87110901 191.51199341]
[-115.42494965 206.06779480]
[-131.81748962 206.53347778]
[-140.18548584 192.42997742]
[-131.92065430 178.26577759]
[-115.52516174 178.61178589]
[-102.62494659 170.95773315]
[-89.72473145 163.30368042]
[-76.82452393 155.64962769]
[-73.40129852 141.19912720]
[-60.42768097 133.25305176]
[-45.29387283 136.94163513]
[-41.05270767 130.67926025]
[-31.79377937 129.25408936]
[-18.62859535 122.06534576]
[-5.46341038 114.87660980]
[7.70177460 107.68788147]
[20.86695862 100.49914551]
[6.19692993 97.37020874]
[-6.26162958 89.01651001]
[-14.72638226 76.63313293]
[-17.98635101 61.99166489]
[-15.57515907 47.18672943]
[-7.83775616 34.33633423]
[4.11893606 25.27887917]
[18.58437920 21.31013107]
[33.48912811 22.99786186]
[46.70089340 30.10062790]
[56.32958221 41.60229492]
[60.99770355 55.85742188]
[60.03743362 70.82665253]
[53.58614349 84.36846924]
[42.56525803 94.54650879]
[57.55569839 94.01112366]
[72.54614258 93.47573853]
[87.53658295 92.94035339]
[99.48874664 85.68518066]
[111.92803192 92.06920624]
[120.61806488 88.57032776]
[127.46102905 91.79191589]
[142.46102905 91.79191589]
[151.27041626 88.60543823]
[157.99401855 92.06920624]
[172.98446655 92.60459137]
[187.97489929 93.13997650]
[202.96534729 93.67536163]
[206.63307190 91.35905457]
[210.46926880 90.35167694]
[214.06340027 90.55496979]
[217.07426453 91.75326538]
[219.26084900 93.64440155]
[220.50149536 95.87797546]
[235.15870667 99.06645203]
[249.81590271 102.25493622]
[264.47311401 105.44341278]
[278.69244385 98.01440430]
[293.30743408 104.63114166]
[297.10675049 120.21783447]
[287.17584229 132.81770325]
[271.13287354 132.76519775]
[261.28463745 120.10061646]
[246.62742615 116.91213226]
[231.97023010 113.72365570]
[217.31301880 110.53517914]
[202.42996216 108.66580200]
[187.43951416 108.13041687]
[172.44908142 107.59503174]
[157.45863342 107.05964661]
[142.46102905 106.79191589]
[127.46102905 106.79191589]
[112.46341705 107.05964661]
[100.51125336 114.31481934]
[88.07196808 107.93079376]
[73.08152771 108.46617889]
[58.09108353 109.00156403]
[43.10064316 109.53694916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 23]
[9 20]
[10 19]
[11 18]
[12 17]
[44 87]
[45 86]
[46 85]
[47 84]
[49 82]
[51 81]
[52 80]
[54 79]
[55 78]
[56 77]
[57 76]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
