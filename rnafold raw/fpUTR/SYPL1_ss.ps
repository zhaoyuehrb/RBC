%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCGCGGGUCCGGAAGCGCGGCGCGGGCCCAACGAGCGCACGCGUACACGCGUGCGCAGGGGAAGACCGAGUGCCAGGGGCUGAACCGCAGGGAAGGGGGCGCGGCGCACGCAGU\
) } def
/len { sequence length } bind def

/coor [
[160.93814087 258.04666138]
[172.73901367 248.29997253]
[169.59451294 233.63327026]
[166.45002747 218.96656799]
[163.30552673 204.29986572]
[160.16104126 189.63316345]
[157.01654053 174.96646118]
[153.87203979 160.29975891]
[140.35751343 153.79150391]
[126.93006134 160.47756958]
[113.50261688 167.16365051]
[100.07516479 173.84973145]
[86.64771271 180.53579712]
[73.22026825 187.22187805]
[59.79281616 193.90794373]
[56.88378525 204.55284119]
[48.71572113 211.63990784]
[38.20581436 212.96322632]
[28.93153000 208.31990051]
[15.16993332 214.28800964]
[3.04416800 226.13716125]
[-11.69865036 217.76544189]
[-7.73532152 201.28125000]
[9.20181370 200.52641296]
[22.96341133 194.55830383]
[33.16002655 178.21664429]
[53.10674286 180.48049927]
[66.53419495 173.79441833]
[79.96163940 167.10835266]
[93.38909149 160.42227173]
[106.81654358 153.73620605]
[120.24398804 147.05012512]
[133.67143250 140.36404419]
[108.84945679 149.06359863]
[84.35079193 144.47311401]
[66.46491241 129.15544128]
[59.09452438 108.24311066]
[62.93701553 87.80221558]
[75.62297821 73.09024048]
[68.06589508 60.13298798]
[60.50880814 47.17573166]
[52.95172119 34.21847534]
[45.39463806 21.26122093]
[37.83755493 8.30396652]
[30.28046799 -4.65328932]
[22.72338486 -17.61054420]
[15.16629887 -30.56780052]
[0.66755468 -38.23059464]
[0.32483193 -54.62616348]
[14.49069500 -62.88814545]
[28.59251785 -54.51732635]
[28.12355423 -38.12488556]
[35.68064117 -25.16762924]
[43.23772430 -12.21037388]
[50.79480743 0.74688131]
[58.35189438 13.70413685]
[65.90898132 26.66139221]
[73.46606445 39.61864853]
[81.02314758 52.57590485]
[88.58023071 65.53315735]
[111.20664978 56.99938965]
[138.78305054 64.51905060]
[144.20167542 50.53197098]
[137.58950806 36.17735672]
[143.14254761 21.38075829]
[157.56626892 14.92073536]
[172.30332947 20.62990379]
[178.61048889 35.12111282]
[172.74583435 49.79698944]
[158.18875122 55.95059586]
[152.77012634 69.93767548]
[158.37890625 74.91679382]
[168.33731079 63.69939423]
[179.55456543 73.65797424]
[169.59646606 84.87503052]
[175.20524597 89.85414886]
[188.45152283 82.81595612]
[201.69779968 75.77777100]
[212.84808350 63.00642014]
[228.20703125 70.18548584]
[225.56030273 86.93156433]
[208.73599243 89.02404785]
[195.48970032 96.06224060]
[182.24342346 103.10042572]
[182.83680725 110.57691956]
[197.78981018 109.39038849]
[198.97610474 124.34340668]
[184.02355957 125.52989960]
[184.61694336 133.00639343]
[198.80757141 137.86701965]
[214.37034607 135.01904297]
[223.90367126 146.46302795]
[237.98526001 139.28776550]
[252.99009705 144.25065613]
[260.01608276 158.40731812]
[254.89482117 173.35885620]
[240.66467285 180.23477173]
[225.76812744 174.95573425]
[219.04302979 160.65367126]
[204.49528503 163.84931946]
[193.94694519 152.05766296]
[179.75630188 147.19702148]
[168.53874207 157.15525818]
[171.68324280 171.82196045]
[174.82774353 186.48866272]
[177.97222900 201.15536499]
[181.11672974 215.82206726]
[184.26121521 230.48876953]
[187.40571594 245.15547180]
[202.16502380 249.20776367]
[213.34265137 259.66336060]
[218.37002563 274.11962891]
[216.09191895 289.25466919]
[207.03179932 301.59048462]
[193.27163696 308.29248047]
[177.97341919 307.82052612]
[164.65254211 300.28308105]
[156.37005615 287.41223145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[19 25]
[20 24]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[62 71]
[63 70]
[76 84]
[77 83]
[78 82]
[89 102]
[90 101]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
