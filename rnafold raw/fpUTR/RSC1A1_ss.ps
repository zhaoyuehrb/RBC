%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGAAACCCGAGUUUGAGGACCUUAUUUUAUUCUACGCUGUUUAGAUUUGUAUCCUCUGGUAAUUUAGUGGCAUUAGUCACCUGCUAAUUAAUCUUUUUCCUUUCCCCUGUGUUCCAUAUAGAGAAAAGUGGUAAAGAAUCUACCUCACUGGGA\
) } def
/len { sequence length } bind def

/coor [
[123.92535400 245.83087158]
[116.31134033 259.10812378]
[103.39299774 267.31634521]
[88.13887024 268.56936646]
[74.05423737 262.57922363]
[64.37564850 250.72244263]
[61.32716751 235.72358704]
[65.60932159 221.02931213]
[76.23809814 210.01625061]
[90.77108765 205.21510315]
[93.16205597 190.40689087]
[87.55239105 176.60903931]
[97.39048767 164.21861267]
[99.78146362 149.41040039]
[102.17243958 134.60218811]
[83.18584442 129.84298706]
[70.01660919 115.68286133]
[66.72650146 96.86737823]
[51.73325729 97.31753540]
[36.74001312 97.76770020]
[21.74676895 98.21785736]
[6.75352573 98.66801453]
[1.30802906 112.83213806]
[-9.11736870 123.80274200]
[-22.91142845 129.92953491]
[-37.95951462 130.30734253]
[-51.96775055 124.90973663]
[-62.81269836 114.58827209]
[-68.86322784 100.93835449]
[-83.85646820 101.38851166]
[-98.84970856 101.83867645]
[-113.84295654 102.28883362]
[-124.64411163 113.51259613]
[-139.85580444 113.75553894]
[-150.48937988 103.38911438]
[-161.14045715 115.06516266]
[-176.93173218 115.70645142]
[-188.49452209 104.93251801]
[-188.96881104 89.13534546]
[-178.07324219 77.68711853]
[-162.27192688 77.37986755]
[-150.93954468 88.39587402]
[-140.94705200 77.41017151]
[-125.74817657 76.74005890]
[-114.29311371 87.29559326]
[-99.29987335 86.84542847]
[-84.30662537 86.39527130]
[-69.31338501 85.94510651]
[-64.09267426 71.95677948]
[-53.88649368 61.00327301]
[-40.22731400 54.77497101]
[-25.18367004 54.24930573]
[-11.04688358 59.53749084]
[0.01790966 69.86286926]
[6.30336523 83.67477417]
[21.29660797 83.22461700]
[36.28985214 82.77445221]
[51.28309631 82.32429504]
[66.27633667 81.87413025]
[75.82844543 70.30878448]
[73.43746948 55.50056839]
[71.04649353 40.69235229]
[68.65551758 25.88413811]
[66.26454926 11.07592297]
[58.59399033 7.47838497]
[53.05802536 1.19010293]
[50.51954269 -6.69488287]
[51.32848740 -14.84398460]
[55.27562714 -21.91120148]
[61.63967514 -26.75942993]
[60.44034576 -41.71140671]
[59.24102020 -56.66338348]
[58.04169083 -71.61536407]
[56.84236526 -86.56733704]
[47.09312057 -99.75385284]
[53.88555908 -114.68016815]
[70.23220825 -115.99136353]
[79.31703186 -102.33860016]
[71.79434204 -87.76666260]
[72.99366760 -72.81468964]
[74.19299316 -57.86271286]
[75.39232635 -42.91073608]
[76.59165192 -27.95875740]
[90.66071320 -11.53755760]
[81.07276154 8.68494797]
[83.46373749 23.49316216]
[85.85471344 38.30137634]
[88.24568939 53.10959244]
[90.63665771 67.91780853]
[102.03742981 66.43285370]
[113.33911133 68.90299225]
[123.20181274 75.08473206]
[130.43960571 84.29170990]
[134.16308594 95.47059631]
[133.88844299 107.32151031]
[148.88769531 107.17143250]
[163.88693237 107.02136230]
[178.88618469 106.87129211]
[193.88543701 106.72121429]
[207.60751343 98.84622955]
[220.41156006 106.45581055]
[235.41079712 106.30574036]
[250.40780640 106.00560760]
[265.40103149 105.55544281]
[280.39428711 105.10528564]
[295.38754272 104.65512085]
[308.94927979 96.50715637]
[321.90301514 103.85901642]
[335.46478271 95.71104431]
[348.41851807 103.06290436]
[363.41177368 102.61274719]
[378.40499878 102.16259003]
[393.39825439 101.71242523]
[408.39151001 101.26226807]
[423.38473511 100.81210327]
[439.03527832 94.29314423]
[449.63198853 107.52742767]
[439.84835815 121.37361908]
[423.83489990 115.80535126]
[408.84164429 116.25550842]
[393.84841919 116.70567322]
[378.85516357 117.15583038]
[363.86193848 117.60598755]
[348.86868286 118.05615234]
[336.37933350 126.17192078]
[322.35317993 118.85225677]
[309.86386108 126.96802521]
[295.83767700 119.64836884]
[280.84445190 120.09852600]
[265.85119629 120.54869080]
[250.85795593 120.99884796]
[244.22940063 124.36190033]
[235.56088257 121.30498505]
[220.56163025 121.45506287]
[207.91239929 129.31930542]
[194.03550720 121.72046661]
[179.03625488 121.87053680]
[164.03701782 122.02061462]
[149.03776550 122.17068481]
[134.03851318 122.32075500]
[147.27354431 129.38008118]
[161.53350830 134.03338623]
[170.62165833 145.96676636]
[171.31684875 160.95065308]
[163.37268066 173.67425537]
[149.60482788 179.62792969]
[134.89306641 176.70150757]
[124.45171356 165.93218994]
[121.98181152 151.13488770]
[116.98065186 136.99316406]
[114.58967590 151.80137634]
[112.19870758 166.60958862]
[117.63735199 181.46662903]
[107.97027588 192.79786682]
[105.57929993 207.60607910]
[117.86276245 216.73707581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 155]
[11 154]
[13 152]
[14 151]
[15 150]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[29 48]
[30 47]
[31 46]
[32 45]
[35 42]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[95 140]
[96 139]
[97 138]
[98 137]
[99 136]
[101 134]
[102 133]
[103 131]
[104 130]
[105 129]
[106 128]
[108 126]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
