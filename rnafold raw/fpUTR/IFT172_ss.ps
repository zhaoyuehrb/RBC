%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUUGCUUCGCCGCAAAGUUACGUGUGACCUUGCGACGCGUGUUGCGCUCCGGUCGCAUAAGCGUCAGUGCCUGUCGCUGCGGCUGCGUGGCGGGUUGUCCAGGUAACCACGGGAGUUGUCGCUGUCUAGGAGCAUCUGAAAGACAGGUGUGCGUC\
) } def
/len { sequence length } bind def

/coor [
[92.89631653 173.93135071]
[96.23518372 159.30772400]
[95.55208588 144.32328796]
[88.07000732 144.84153748]
[81.48556519 158.31910706]
[74.90112305 171.79669189]
[68.31667328 185.27426147]
[61.73222733 198.75183105]
[67.10414886 213.61515808]
[60.31716919 227.88793945]
[45.39789200 233.10241699]
[31.19765663 226.16491699]
[26.14121056 211.19134521]
[33.22845459 197.06524658]
[48.25465393 192.16738892]
[54.83909607 178.68981934]
[61.42354202 165.21223450]
[68.00798798 151.73466492]
[74.59243011 138.25708008]
[70.19544983 132.82812500]
[66.82909393 126.97341919]
[64.51766968 120.87550354]
[63.25469589 114.71404266]
[63.00432587 108.66078186]
[63.70368576 102.87494659]
[48.82722473 100.95379639]
[33.95075989 99.03263855]
[19.07429886 97.11148071]
[4.19783497 95.19032288]
[-10.67862797 93.26916504]
[-25.55509186 91.34800720]
[-40.43155289 89.42684937]
[-59.60051727 98.92824554]
[-75.56866455 85.89742279]
[-90.53281403 84.86092377]
[-105.49695587 83.82443237]
[-120.46110535 82.78794098]
[-135.42524719 81.75144958]
[-150.38940430 80.71495819]
[-164.87858582 88.39582825]
[-178.62942505 79.46016693]
[-177.49626160 63.10021591]
[-162.64477539 56.14569092]
[-149.35290527 65.75081635]
[-134.38876343 66.78730774]
[-119.42461395 67.82379913]
[-104.46046448 68.86029053]
[-89.49632263 69.89678192]
[-74.53217316 70.93327332]
[-68.81032562 64.02352905]
[-60.41138077 60.49663544]
[-51.19649506 61.27276611]
[-43.27253723 66.30274963]
[-38.51039886 74.55039215]
[-23.63393402 76.47154999]
[-8.75747108 78.39270020]
[6.11899185 80.31385803]
[20.99545479 82.23501587]
[35.87191772 84.15617371]
[50.74838257 86.07733154]
[65.62484741 87.99848938]
[84.99382019 66.82617950]
[113.68357849 66.25911713]
[122.06327820 53.81802750]
[130.44297791 41.37694550]
[138.82267761 28.93585777]
[140.11474609 13.16749954]
[153.64215088 6.93384552]
[162.02185059 -5.50723982]
[170.40155029 -17.94832420]
[167.58503723 -33.26840973]
[176.26046753 -45.76606750]
[190.88319397 -48.35677719]
[199.26289368 -60.79785919]
[207.64259338 -73.23894501]
[216.02229309 -85.68003082]
[224.40199280 -98.12111664]
[211.84378052 -125.41175079]
[215.94035339 -139.84152222]
[220.03691101 -154.27128601]
[224.13346863 -168.70104980]
[228.23002625 -183.13082886]
[232.32658386 -197.56059265]
[236.42314148 -211.99035645]
[231.89144897 -227.75093079]
[243.46788025 -239.36636353]
[259.24359131 -234.88769531]
[262.98989868 -218.92219543]
[250.85292053 -207.89379883]
[246.75634766 -193.46403503]
[242.65979004 -179.03427124]
[238.56323242 -164.60449219]
[234.46667480 -150.17472839]
[230.37011719 -135.74496460]
[226.27355957 -121.31519318]
[238.54664612 -112.69132996]
[250.73396301 -121.43601990]
[262.92126465 -130.18070984]
[275.10855103 -138.92539978]
[287.29586792 -147.67008972]
[289.61303711 -163.30358887]
[302.35571289 -172.65242004]
[317.96383667 -170.17007446]
[327.17739868 -157.32929993]
[324.53018188 -141.74829102]
[311.59271240 -132.67098999]
[296.04055786 -135.48278809]
[283.85324097 -126.73809814]
[271.66595459 -117.99340820]
[259.47863770 -109.24871826]
[247.29135132 -100.50402069]
[236.84307861 -89.74141693]
[228.46337891 -77.30033112]
[220.08367920 -64.85924530]
[211.70397949 -52.41815948]
[203.32427979 -39.97707367]
[206.41911316 -25.45269585]
[198.09812927 -12.71629333]
[182.84263611 -9.56862354]
[174.46293640 2.87246180]
[166.08323669 15.31354713]
[165.39054871 30.19203568]
[151.26376343 37.31555939]
[142.88406372 49.75664520]
[134.50436401 62.19773102]
[126.12466431 74.63881683]
[132.40292358 80.59448242]
[137.27996826 88.11476898]
[140.36605835 96.85927582]
[141.35649109 106.39110565]
[140.05534363 116.19856262]
[136.39344788 125.72267151]
[130.43939209 134.38883972]
[144.56617737 141.51237488]
[145.25886536 156.39085388]
[153.63856506 168.83193970]
[162.01826477 181.27302551]
[170.39796448 193.71411133]
[178.77766418 206.15519714]
[187.15736389 218.59628296]
[195.53706360 231.03736877]
[210.94468689 235.50781250]
[216.92257690 250.39553833]
[208.88500977 264.27996826]
[192.99772644 266.51013184]
[181.44808960 255.37525940]
[183.09597778 239.41706848]
[174.71627808 226.97598267]
[166.33657837 214.53489685]
[157.95687866 202.09381104]
[149.57717896 189.65272522]
[141.19747925 177.21163940]
[132.81777954 164.77055359]
[119.29036713 158.53691101]
[117.99830627 142.76855469]
[110.51622772 143.28678894]
[111.90553284 158.22232056]
[117.22864532 172.24603271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[63 126]
[64 125]
[65 124]
[66 123]
[68 121]
[69 120]
[70 119]
[73 116]
[74 115]
[75 114]
[76 113]
[77 112]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[133 155]
[135 153]
[136 152]
[137 151]
[138 150]
[139 149]
[140 148]
[141 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
