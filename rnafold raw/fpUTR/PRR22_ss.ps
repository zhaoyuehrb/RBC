%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAAACAGAACCCCACCAGGUUCUCAGCCUGUUCUCCGGUUGGGCCACUUGCACUCCCACUGCCGCCCUCCUGGCCUGUCUGGACCGGGCCCCCCGCUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.59451294 193.27671814]
[94.84179688 179.10229492]
[94.39730072 164.10888672]
[93.95279694 149.11547852]
[93.50830078 134.12207031]
[88.22293091 132.67655945]
[83.23065186 130.41786194]
[78.65570068 127.40216064]
[74.61193848 123.70451355]
[61.69628525 131.33247375]
[48.78063202 138.96044922]
[35.86497879 146.58840942]
[22.94932365 154.21638489]
[10.03366947 161.84434509]
[6.33744717 177.21032715]
[-7.18500233 185.39073181]
[-22.51104927 181.53225708]
[-30.54802322 167.92407227]
[-26.52772713 152.63967896]
[-12.83533382 144.74702454]
[2.40570307 148.92869568]
[15.32135677 141.30072021]
[28.23701096 133.67276001]
[41.15266418 126.04479218]
[54.06832123 118.41682434]
[66.98397064 110.78885651]
[67.85674286 86.83685303]
[84.03466034 69.15254211]
[107.81455231 66.15638733]
[114.26553345 52.61441803]
[120.71650696 39.07245255]
[127.16748810 25.53048325]
[133.61846924 11.98851681]
[129.33322144 1.77108109]
[131.42756653 -8.88308525]
[138.94831848 -16.40455055]
[149.16746521 -18.41407204]
[156.40934753 -31.55009460]
[163.65122986 -44.68611908]
[170.89311218 -57.82214355]
[178.13499451 -70.95816803]
[173.96923828 -85.96763611]
[181.50067139 -99.18627167]
[195.83557129 -103.06518555]
[203.07745361 -116.20121002]
[210.31933594 -129.33723450]
[217.56121826 -142.47325134]
[224.80310059 -155.60928345]
[232.04498291 -168.74530029]
[223.85197449 -184.76858521]
[226.76873779 -202.36982727]
[239.46960449 -214.67782593]
[256.84622192 -216.99917603]
[263.29718018 -230.54113770]
[253.69026184 -242.40156555]
[250.18913269 -257.25769043]
[253.48893738 -272.15985107]
[262.93450928 -284.14916992]
[276.65042114 -290.84521484]
[291.91336060 -290.91839600]
[305.69287109 -284.35427856]
[315.25299072 -272.45611572]
[318.69561768 -257.58630371]
[315.33715820 -242.69726562]
[305.84445190 -230.74522400]
[292.10226440 -224.10327148]
[276.83917236 -224.09016418]
[270.38818359 -210.54820251]
[277.79269409 -200.70147705]
[280.25985718 -188.55665588]
[277.24920654 -176.46000671]
[269.28466797 -166.77600098]
[257.86483765 -161.42518616]
[245.18101501 -161.50341797]
[237.93913269 -148.36740112]
[230.69725037 -135.23136902]
[223.45536804 -122.09535217]
[216.21348572 -108.95932770]
[208.97160339 -95.82330322]
[213.34391785 -81.63110352]
[206.18673706 -68.20614624]
[191.27101135 -63.71628571]
[184.02912903 -50.58026123]
[176.78724670 -37.44423676]
[169.54536438 -24.30821228]
[162.30348206 -11.17218876]
[164.25968933 7.96847534]
[147.16043091 18.43949509]
[140.70945740 31.98146248]
[134.25846863 45.52342987]
[127.80749512 59.06539536]
[121.35652161 72.60736084]
[128.07475281 79.54845428]
[132.62153625 88.07136536]
[134.64521790 97.51689148]
[133.98927307 107.15447998]
[130.70442200 116.23870087]
[125.04474640 124.06694794]
[117.44799042 130.03373718]
[108.50170898 133.67756653]
[108.94621277 148.67097473]
[109.39070892 163.66438293]
[109.83521271 178.65780640]
[118.90771484 192.31875610]
[111.37189484 206.88389587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[5 100]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[53 68]
[54 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
