%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCCCGGAUAGCCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCCGGGAGAGGCCCCUCCUUCACGCCCUGCUUCUCUCCCUCGCUCGCAGUCGAGCCGAGCCGGCGGACCCGCCUGGGCUCCGACCCUGCCCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[169.40348816 203.19204712]
[160.48040771 191.13473511]
[151.55732727 179.07742310]
[142.63424683 167.02011108]
[133.71118164 154.96281433]
[124.78810120 142.90550232]
[118.23003387 139.37268066]
[115.80489349 130.48388672]
[107.14883423 118.23346710]
[101.49230194 119.90856171]
[95.48059845 119.83566284]
[89.65158081 117.95487976]
[84.54619598 114.37095642]
[71.34172058 121.48728180]
[58.13725662 128.60359192]
[44.93278503 135.71992493]
[36.45526505 149.07814026]
[21.58073235 148.30509949]
[8.37626457 155.42141724]
[-0.10125849 168.77964783]
[-14.97579002 168.00660706]
[-28.18025780 175.12292480]
[-36.32710648 189.35531616]
[-52.72491455 189.14553833]
[-60.50502014 174.70941162]
[-51.66391754 160.89756775]
[-35.29657745 161.91845703]
[-22.09210968 154.80213928]
[-14.55905819 141.95292664]
[1.25994468 142.21694946]
[14.46441364 135.10063171]
[21.99746323 122.25141144]
[37.81646729 122.51544952]
[51.02093506 115.39913177]
[64.22540283 108.28280640]
[77.42987061 101.16648865]
[80.69880676 86.52702332]
[71.77572632 74.46971130]
[62.85264969 62.41240311]
[53.92957306 50.35509491]
[45.00649643 38.29778671]
[37.32443237 33.21074677]
[36.02329254 25.87616920]
[27.36723518 13.62575436]
[18.71117783 1.37533820]
[10.05512142 -10.87507725]
[-5.34599209 -11.20956993]
[-17.45548630 -20.44068718]
[-21.75650978 -34.86168671]
[-16.80046082 -48.88222885]
[-25.45651627 -61.13264465]
[-34.11257172 -73.38305664]
[-42.76863098 -85.63347626]
[-51.42468643 -97.88388824]
[-67.04096222 -100.31442261]
[-76.29710388 -113.12454987]
[-73.70160675 -128.71424866]
[-60.79433060 -137.83444214]
[-45.23293686 -135.07426453]
[-36.24972534 -122.07128906]
[-39.17427063 -106.53994751]
[-30.51821327 -94.28952789]
[-21.86215782 -82.03911591]
[-13.20610046 -69.78869629]
[-4.55004454 -57.53828430]
[10.32066059 -57.52718735]
[22.47715759 -48.65681076]
[27.13390541 -34.15963364]
[22.30553627 -19.53113365]
[30.96159363 -7.28071833]
[39.61764908 4.96969748]
[48.27370834 17.22011375]
[57.06380463 29.37470818]
[65.98688507 41.43201828]
[74.90995789 53.48932648]
[83.83303833 65.54663086]
[92.75611115 77.60394287]
[85.08099365 64.71625519]
[86.90075684 49.82704544]
[97.45386505 39.16721344]
[112.32400513 37.19772339]
[125.28826904 44.74277496]
[130.92132568 58.64488602]
[126.86582947 73.08625031]
[114.81773376 82.02377319]
[127.69688416 74.33432007]
[140.57601929 66.64487457]
[153.45516968 58.95542908]
[166.24908447 51.12497711]
[178.95619202 43.15446091]
[191.66331482 35.18394852]
[204.37043762 27.21343422]
[211.56225586 12.47539711]
[227.93827820 11.60475540]
[236.65225220 25.49715233]
[228.73999023 39.86127853]
[212.34095764 39.92055511]
[199.63383484 47.89106750]
[186.92671204 55.86158371]
[174.21958923 63.83209610]
[170.19345093 70.09940338]
[161.14462280 71.83457184]
[148.26547241 79.52402496]
[135.38632202 87.21347046]
[122.50717926 94.90291595]
[119.39925385 109.57740784]
[128.05531311 121.82782745]
[136.84541321 133.98242188]
[145.76847839 146.03973389]
[154.69155884 158.09704590]
[163.61463928 170.15434265]
[172.53771973 182.21165466]
[181.46080017 194.26896667]
[194.96846008 194.72280884]
[205.57852173 202.77606201]
[209.53086853 215.29199219]
[205.58882141 227.60650635]
[214.24487305 239.85691833]
[222.90092468 252.10733032]
[231.55697632 264.35775757]
[240.21304321 276.60815430]
[248.86909485 288.85858154]
[257.52514648 301.10900879]
[266.18121338 313.35940552]
[281.58883667 312.57907104]
[294.96102905 320.27239990]
[302.03085327 333.98449707]
[300.54226685 349.33987427]
[290.97030640 361.43869019]
[276.36938477 366.42025757]
[261.39855957 362.69497681]
[250.83496094 351.45156860]
[248.04942322 336.27777100]
[253.93078613 322.01547241]
[245.27473450 309.76504517]
[236.61868286 297.51464844]
[227.96263123 285.26422119]
[219.30656433 273.01379395]
[210.65051270 260.76339722]
[201.99446106 248.51296997]
[193.33839417 236.26255798]
[176.68888855 234.15104675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[8 107]
[9 106]
[13 36]
[14 35]
[15 34]
[16 33]
[18 31]
[19 30]
[21 28]
[22 27]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[43 72]
[44 71]
[45 70]
[46 69]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[85 105]
[86 104]
[87 103]
[88 102]
[89 100]
[90 99]
[91 98]
[92 97]
[117 141]
[118 140]
[119 139]
[120 138]
[121 137]
[122 136]
[123 135]
[124 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
