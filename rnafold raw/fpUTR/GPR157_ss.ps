%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGGAGCGGCCGGACGCGGGCGGGGCGGGCGCCUGGACGCGAGCCUAGGGCGCCUCGGUGCCCAGACGGCGGCGGCGUGGCCGCACGCGCGGCCCGGCUUCUGUCCUCGCGGCGCUCCGGCUCCUGGCCCCCCACGCC\
) } def
/len { sequence length } bind def

/coor [
[159.35220337 762.78741455]
[161.96263123 743.58227539]
[162.28985596 728.58587646]
[162.61708069 713.58941650]
[162.94430542 698.59301758]
[163.10792542 683.59387207]
[163.10792542 668.59387207]
[163.10792542 653.59387207]
[163.10792542 638.59387207]
[155.37062073 625.86663818]
[163.10792542 612.06646729]
[163.10792542 597.06646729]
[162.45362854 582.08074951]
[161.14630127 567.13781738]
[159.83895874 552.19488525]
[158.53161621 537.25195312]
[157.22428894 522.30902100]
[155.91694641 507.36611938]
[154.60961914 492.42321777]
[153.13935852 477.49542236]
[151.50634766 462.58459473]
[149.87335205 447.67373657]
[140.61132812 439.81942749]
[139.16815186 427.35696411]
[146.86711121 416.94702148]
[145.55976868 402.00411987]
[144.25244141 387.06118774]
[142.78218079 372.13342285]
[141.14916992 357.22256470]
[139.51617432 342.31173706]
[137.88316345 327.40087891]
[136.25016785 312.49005127]
[134.61717224 297.57919312]
[132.98416138 282.66836548]
[123.90727234 270.85906982]
[130.09620667 256.29858398]
[128.46319580 241.38774109]
[126.83019257 226.47688293]
[117.75330353 214.66760254]
[123.94223785 200.10711670]
[122.30923462 185.19627380]
[113.23233795 173.38697815]
[119.42127228 158.82649231]
[117.78826904 143.91564941]
[116.15526581 129.00480652]
[114.52226257 114.09396362]
[101.21314240 119.29567719]
[88.48584747 114.39131927]
[82.69216919 102.76531219]
[86.08672333 90.90150452]
[78.58672333 77.91111755]
[71.53147125 71.98795319]
[71.06835175 64.55453491]
[63.85351944 51.40362930]
[56.63868713 38.25273132]
[49.42385483 25.10182762]
[42.20902634 11.95092678]
[34.99419403 -1.19997418]
[20.70130157 -9.24020100]
[20.78848267 -25.63911629]
[35.16605377 -33.52692413]
[49.04360199 -24.78931999]
[48.14509583 -8.41480541]
[55.35992813 4.73609543]
[62.57475662 17.88699722]
[69.78958893 31.03789902]
[77.00441742 44.18880081]
[84.21925354 57.33970261]
[91.57710266 70.41111755]
[99.07710266 83.40150452]
[109.41306305 84.15449524]
[118.28192139 91.32203674]
[124.62120056 77.72741699]
[130.81179810 64.06446075]
[136.85299683 50.33478546]
[142.89421082 36.60511398]
[148.93540955 22.87544250]
[154.97660828 9.14577007]
[149.01565552 -5.49126005]
[155.22747803 -20.02359390]
[169.92672729 -25.82945633]
[184.39256287 -19.46433258]
[190.04269409 -4.70453548]
[183.52497864 9.69320679]
[168.70628357 15.18697071]
[162.66506958 28.91664314]
[156.62387085 42.64631653]
[150.58267212 56.37598801]
[144.54147339 70.10565948]
[144.72798157 77.55115509]
[138.21582031 84.06668854]
[131.87654114 97.66130829]
[129.43310547 112.46096039]
[131.06611633 127.37180328]
[132.69911194 142.28265381]
[134.33212280 157.19349670]
[143.52581787 170.06930542]
[137.22007751 183.56326294]
[138.85307312 198.47410583]
[148.04676819 211.34992981]
[141.74104309 224.84388733]
[143.37403870 239.75473022]
[145.00704956 254.66557312]
[154.20074463 267.54138184]
[147.89500427 281.03533936]
[149.52801514 295.94619751]
[151.16101074 310.85702515]
[152.79402161 325.76788330]
[154.42701721 340.67874146]
[156.06002808 355.58956909]
[157.69302368 370.50042725]
[161.76524353 378.76345825]
[159.19535828 385.75384521]
[160.50270081 400.69677734]
[161.81002808 415.63970947]
[172.72444153 430.42706299]
[164.78419495 446.04074097]
[166.41720581 460.95159912]
[168.05020142 475.86242676]
[172.12242126 484.12545776]
[169.55253601 491.11587524]
[170.85986328 506.05877686]
[172.16720581 521.00170898]
[173.47454834 535.94464111]
[174.78187561 550.88757324]
[176.08921814 565.83044434]
[177.39654541 580.77337646]
[180.12828064 584.36932373]
[181.39642334 588.26037598]
[181.29357910 591.93499756]
[180.07363892 594.96783447]
[178.10792542 597.06646729]
[178.10792542 612.06646729]
[185.84521484 625.86663818]
[178.10792542 638.59387207]
[178.10792542 653.59387207]
[178.10792542 668.59387207]
[178.10792542 683.59387207]
[181.25636292 692.25115967]
[177.94073486 698.92022705]
[177.61351013 713.91662598]
[177.28628540 728.91308594]
[176.95906067 743.90954590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 143]
[3 142]
[4 141]
[5 140]
[6 138]
[7 137]
[8 136]
[9 135]
[11 133]
[12 132]
[13 127]
[14 126]
[15 125]
[16 124]
[17 123]
[18 122]
[19 121]
[20 119]
[21 118]
[22 117]
[25 115]
[26 114]
[27 113]
[28 111]
[29 110]
[30 109]
[31 108]
[32 107]
[33 106]
[34 105]
[36 103]
[37 102]
[38 101]
[40 99]
[41 98]
[43 96]
[44 95]
[45 94]
[46 93]
[50 70]
[51 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[72 92]
[73 91]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
