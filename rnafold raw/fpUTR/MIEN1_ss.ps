%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCCCGUCACGUGCCCGCGGUUCGCGUCACACCCGGAAGCAGGGGCCCGAGCGGAGCCGGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[132.74447632 283.34939575]
[129.35913086 268.73641968]
[118.94903564 258.08374023]
[123.37213898 242.89340210]
[119.98678589 228.28041077]
[109.57669067 217.62774658]
[113.99979401 202.43739319]
[110.61444092 187.82441711]
[107.22908020 173.21142578]
[103.84372711 158.59843445]
[93.60877991 151.76716614]
[90.81654358 139.36701965]
[97.55103302 128.11196899]
[94.83428955 113.36004639]
[85.91294861 102.59429932]
[90.41378784 89.35669708]
[87.69704437 74.60477448]
[84.98030090 59.85284805]
[82.26355743 45.10092163]
[69.53279114 36.12509918]
[66.98777771 21.12584686]
[75.62330627 9.04432392]
[65.51453400 -3.12626648]
[70.81875610 -17.04440117]
[68.10201263 -31.79632759]
[65.38526917 -46.54825211]
[60.60997391 -54.73639679]
[62.89666367 -62.03244019]
[60.85416412 -76.89273071]
[47.52249908 -85.06589508]
[42.61251450 -99.91265106]
[48.44255829 -114.42280579]
[62.25986099 -121.74510956]
[77.54031372 -118.42220306]
[87.06895447 -106.02304840]
[86.34665680 -90.40215302]
[75.71445465 -78.93522644]
[77.75695801 -64.07494354]
[80.13719177 -49.26499557]
[82.85393524 -34.51306915]
[85.57067871 -19.76114464]
[95.48513031 -8.64571095]
[90.37522888 6.32758093]
[102.74815369 14.54014683]
[105.71347046 29.46199608]
[97.01548004 42.38417816]
[99.73222351 57.13610458]
[102.44896698 71.88803101]
[105.16571045 86.63995361]
[114.08705139 97.40570068]
[109.58621216 110.64330292]
[112.30295563 125.39522552]
[124.56865692 138.91783142]
[118.45671082 155.21308899]
[121.84207153 169.82606506]
[125.22742462 184.43905640]
[128.61277771 199.05204773]
[139.26501465 210.74992371]
[134.59976196 224.89505005]
[137.98512268 239.50804138]
[148.63735962 251.20591736]
[143.97210693 265.35104370]
[147.35746765 279.96405029]
[160.89758301 288.11517334]
[164.62704468 303.47311401]
[156.33322144 316.92630005]
[140.93669128 320.49316406]
[127.57195282 312.05758667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[4 60]
[5 59]
[7 57]
[8 56]
[9 55]
[10 54]
[13 52]
[14 51]
[16 49]
[17 48]
[18 47]
[19 46]
[22 43]
[24 41]
[25 40]
[26 39]
[28 38]
[29 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
