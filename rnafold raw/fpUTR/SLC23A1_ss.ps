%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAAUGCCUGAUAUGUGGAGUAAAGUCCUCCUCCUUGGCCUUUGUCAAGUCAUCCCCUCUUCUCCUCAGGAACUGCUCAAACCUGUGCCCCAAAG\
) } def
/len { sequence length } bind def

/coor [
[120.53303528 223.50382996]
[115.86907959 215.92324829]
[112.70722961 207.59632874]
[111.16200256 198.81765747]
[111.29068756 189.89836121]
[113.09117889 181.15498352]
[116.50201416 172.89833069]
[121.40444183 165.42234802]
[127.62654114 158.99368286]
[119.85065460 146.16654968]
[112.07476807 133.33940125]
[104.29887390 120.51226807]
[96.52298737 107.68512726]
[93.87184143 107.02368927]
[91.35626221 105.42943573]
[89.30324554 102.94102478]
[88.02360535 99.70987701]
[87.77396393 95.99240875]
[88.72235107 92.12975311]
[83.09334564 78.22600555]
[77.46434021 64.32225037]
[71.83533478 50.41850281]
[66.63498688 45.85637283]
[64.92637634 40.18636703]
[66.32277679 35.43909454]
[61.59614944 21.20325851]
[56.86952591 6.96742201]
[41.13956451 7.15316010]
[26.13171387 2.50305486]
[13.29407597 -6.52178621]
[3.86153173 -19.03874207]
[-1.26304400 -33.82998657]
[-1.59519303 -49.46097565]
[2.88535023 -64.41956329]
[11.73384571 -77.26231384]
[24.08466530 -86.75375366]
[18.90419006 -100.83078003]
[13.72371483 -114.90780640]
[8.54323864 -128.98483276]
[3.36276293 -143.06185913]
[-1.81771290 -157.13888550]
[-14.75711918 -167.21379089]
[-12.23399353 -183.41767883]
[3.15608811 -189.08137512]
[15.58113003 -178.37855530]
[12.25931358 -162.31936646]
[17.43978882 -148.24234009]
[22.62026596 -134.16531372]
[27.80074120 -120.08827972]
[32.98121643 -106.01125336]
[38.16169357 -91.93422699]
[52.48057175 -92.82820129]
[66.48098755 -89.62233734]
[79.01197815 -82.57085419]
[89.04076385 -72.24452209]
[95.73784637 -59.48443222]
[98.54559326 -45.33349609]
[97.22468567 -30.95122719]
[91.87449646 -17.51870728]
[82.92564392 -6.14161396]
[71.10536194 2.24079871]
[75.83198547 16.47663498]
[80.55860901 30.71247101]
[85.73908997 44.78949738]
[91.36808777 58.69324875]
[96.99709320 72.59700012]
[102.62609863 86.50074768]
[109.35012817 99.90923309]
[117.12602234 112.73637390]
[124.90190887 125.56351471]
[132.67779541 138.39065552]
[140.45368958 151.21780396]
[163.14407349 148.07540894]
[184.60850525 155.90963745]
[199.86294556 172.84402466]
[205.39222717 194.89578247]
[199.95999146 216.91241455]
[211.98120117 225.88407898]
[227.66860962 227.93733215]
[233.24064636 241.75042725]
[245.26185608 250.72207642]
[261.60244751 252.10684204]
[268.32760620 267.06356812]
[258.51910400 280.20608521]
[242.26707458 278.01446533]
[236.29019165 262.74328613]
[224.26899719 253.77162170]
[209.44142151 252.36009216]
[203.00953674 237.90528870]
[190.98832703 228.93362427]
[184.10667419 234.48396301]
[176.30035400 238.64830017]
[167.84526062 241.27668762]
[159.04067993 242.27346802]
[150.19882202 241.60081482]
[141.63362122 239.28012085]
[133.64970398 235.39135742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[19 67]
[20 66]
[21 65]
[22 64]
[25 63]
[26 62]
[27 61]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[77 90]
[78 89]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
