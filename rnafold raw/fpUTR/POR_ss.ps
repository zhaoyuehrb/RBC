%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGCGGUGGUAGCGCCUCAGUGGUGUGGGCCUGAGCCCUGCCCAGGUGCCCGCAGAGAGCAGCCGGGCUGCCAGCGUUUC\
) } def
/len { sequence length } bind def

/coor [
[84.51715851 292.17471313]
[77.10121155 277.54818726]
[86.28560638 263.96218872]
[86.85322571 248.97293091]
[87.42085266 233.98368835]
[87.98847198 218.99443054]
[88.55609131 204.00517273]
[81.30595398 190.99421692]
[89.55992889 177.49671936]
[90.12755585 162.50746155]
[90.69517517 147.51821899]
[91.26279449 132.52896118]
[91.83042145 117.53969574]
[81.52915192 106.63631439]
[66.53183746 106.35244751]
[51.53452301 106.06858826]
[36.53720856 105.78472900]
[21.53989601 105.50086212]
[9.03230190 115.54773712]
[-6.58881903 111.89258575]
[-13.34027958 97.33932495]
[-6.04293776 83.05197906]
[9.70531082 79.99057007]
[21.82375717 90.50354767]
[36.82107162 90.78741455]
[51.81838608 91.07127380]
[66.81569672 91.35514069]
[81.81301117 91.63899994]
[89.39481354 78.69618988]
[81.81301117 65.75337982]
[74.23121643 52.81056976]
[66.64941406 39.86775970]
[52.13607407 32.23264694]
[51.76206207 15.83776569]
[65.91213226 7.54876328]
[80.02989960 15.89265537]
[79.59222412 32.28596115]
[87.17402649 45.22877121]
[94.75582123 58.17158127]
[102.33762360 71.11438751]
[108.53754425 81.77378082]
[108.05068207 92.10850525]
[121.40287018 85.27336121]
[134.75505066 78.43822479]
[148.10723877 71.60308838]
[156.86570740 58.42735291]
[171.72053528 59.51516724]
[180.47898865 46.33943558]
[195.33381653 47.42724991]
[208.68600464 40.59210968]
[222.03819275 33.75696945]
[230.79666138 20.58123970]
[245.65148926 21.66905212]
[251.92868042 6.90502787]
[267.42340088 2.74650931]
[280.24942017 12.38355637]
[280.56771851 28.42345238]
[268.13412476 38.56175995]
[252.48661804 35.02124023]
[244.68319702 47.70807648]
[228.87333679 47.10915756]
[215.52114868 53.94429779]
[202.16896057 60.77943420]
[194.36553955 73.46627045]
[178.55566406 72.86735535]
[170.75224304 85.55419159]
[154.94238281 84.95526886]
[141.59019470 91.79041290]
[128.23800659 98.62554932]
[114.88581848 105.46068573]
[106.81967926 118.10732269]
[106.25205231 133.09657288]
[105.68443298 148.08583069]
[105.11681366 163.07508850]
[104.54918671 178.06434631]
[111.75872803 192.14743042]
[103.54534912 204.57278442]
[102.97772980 219.56204224]
[102.41010284 234.55130005]
[101.84248352 249.54055786]
[101.27486420 264.52981567]
[109.40546417 278.77148438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[4 80]
[5 79]
[6 78]
[7 77]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[29 40]
[30 39]
[31 38]
[32 37]
[42 70]
[43 69]
[44 68]
[45 67]
[47 65]
[49 63]
[50 62]
[51 61]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
