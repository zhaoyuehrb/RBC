%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAACCCGCGCCCUCCGAGGGGGGAGGGGACAGAGGGGGCGUCACGGGGGCAGGAGAAGAAGGAGGAGGAGGCCCGCGUCGCCUCCGGCGGGGCUCGCGCUCGCCCCGCGCUCGCCCUCCGCCUCGCCCGAGCCCCGGGAGGGUGAAACGCUUUCUCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[164.19740295 536.83831787]
[162.47714233 521.93731689]
[160.75689697 507.03625488]
[159.03665161 492.13522339]
[157.31639099 477.23419189]
[155.45350647 462.35031128]
[140.77476501 455.04885864]
[133.25009155 440.29681396]
[136.01167297 423.80014038]
[148.16928101 412.07257080]
[145.87953186 397.24835205]
[143.58979797 382.42416382]
[141.30006409 367.59994507]
[139.01031494 352.77572632]
[136.72058105 337.95153809]
[134.43084717 323.12731934]
[132.14109802 308.30313110]
[120.01042175 299.73678589]
[117.47711945 284.73553467]
[126.54453278 272.06985474]
[124.25479126 257.24563599]
[121.96504974 242.42144775]
[119.25035858 227.66914368]
[116.11294556 213.00091553]
[112.97553253 198.33270264]
[102.74732971 187.50527954]
[107.42704010 172.39201355]
[104.28962708 157.72378540]
[101.15221405 143.05557251]
[98.01480865 128.38734436]
[93.51966858 122.47661591]
[94.96062469 113.40821075]
[85.93806458 102.72714996]
[90.31375122 89.44765472]
[87.45788574 74.72203064]
[84.60202026 59.99640656]
[81.74614716 45.27078247]
[78.89028168 30.54515648]
[75.89350891 15.84756088]
[72.61575317 1.21006429]
[69.19794464 -13.39536667]
[65.78014374 -28.00079918]
[62.36234283 -42.60622787]
[59.19909668 -45.73402023]
[57.40548325 -49.34896088]
[56.96443939 -52.95111084]
[57.69523239 -56.09922409]
[59.28770065 -58.45991898]
[56.99796295 -73.28412628]
[54.70822144 -88.10832977]
[52.41848373 -102.93253326]
[50.12874222 -117.75674438]
[43.21743011 -104.44382477]
[30.97899055 -95.77084351]
[16.12803459 -93.66155243]
[1.95865262 -98.58380890]
[-8.38624668 -109.44580841]
[-12.61206150 -123.83824921]
[-9.78146458 -138.56875610]
[-0.52230906 -150.36994934]
[13.11163139 -156.62419128]
[28.09621239 -155.94425964]
[41.10770798 -148.48094177]
[49.25963593 -135.89083862]
[50.12118530 -150.86607361]
[50.98273087 -165.84130859]
[39.14435959 -175.69824219]
[35.42352295 -190.46336365]
[41.04391098 -204.42312622]
[53.65570068 -212.30226135]
[54.51725006 -227.27751160]
[55.37879562 -242.25274658]
[48.44690323 -256.47454834]
[56.90243912 -268.73638916]
[57.76398849 -283.71163940]
[58.62553787 -298.68685913]
[59.48708344 -313.66210938]
[60.34863281 -328.63735962]
[47.46661377 -337.00091553]
[40.50653458 -350.69226074]
[41.34062958 -366.02847290]
[49.74452591 -378.88421631]
[63.45762253 -385.80133057]
[78.79116058 -384.91918945]
[91.62049103 -376.47503662]
[98.49460602 -362.74032593]
[97.56438446 -347.40963745]
[89.08005524 -334.60681152]
[75.32386780 -327.77578735]
[74.46231842 -312.80056763]
[73.60077667 -297.82531738]
[72.73922729 -282.85009766]
[71.87767792 -267.87484741]
[78.87119293 -254.72418213]
[70.35403442 -241.39118958]
[69.49248505 -226.41595459]
[68.63093567 -211.44071960]
[80.25590515 -202.16720581]
[84.23825836 -187.65496826]
[78.84865570 -173.41398621]
[65.95796967 -164.97976685]
[65.09642029 -150.00451660]
[64.23487091 -135.02928162]
[64.95294952 -120.04648590]
[67.24269104 -105.22227478]
[69.53243256 -90.39807129]
[71.82216644 -75.57386017]
[74.11190796 -60.74965668]
[76.96777344 -46.02403259]
[80.38557434 -31.41860008]
[83.80338287 -16.81316948]
[87.22118378 -2.20773840]
[91.82871246 3.61581039]
[90.56172943 12.71015072]
[95.05686188 18.62088776]
[93.61590576 27.68929100]
[96.47177124 42.41491699]
[99.32764435 57.14054108]
[102.18350983 71.86616516]
[105.03937531 86.59178925]
[114.06193542 97.27285004]
[109.68624878 110.55234528]
[112.68302917 125.24993896]
[115.82043457 139.91815186]
[118.95784760 154.58638000]
[122.09526062 169.25459290]
[132.54786682 181.13119507]
[127.64375305 195.19528198]
[130.78115845 209.86351013]
[133.91857910 224.53172302]
[137.48390198 228.47123718]
[138.99760437 232.94099426]
[138.60614014 237.05860901]
[136.78926086 240.13169861]
[139.07899475 254.95590210]
[141.36874390 269.78012085]
[153.83506775 279.11972046]
[155.94601440 294.18618774]
[146.96530151 306.01336670]
[149.25505066 320.83758545]
[151.54478455 335.66180420]
[153.83451843 350.48599243]
[156.12426758 365.31021118]
[158.41400146 380.13439941]
[160.70375061 394.95861816]
[162.99348450 409.78283691]
[175.70837402 415.17260742]
[184.02410889 426.06222534]
[185.84661865 439.53277588]
[180.80456543 452.03955078]
[170.31884766 460.34497070]
[174.58529663 468.47573853]
[172.21742249 475.51394653]
[173.93768311 490.41497803]
[175.65792847 505.31600952]
[177.37817383 520.21704102]
[179.09843445 535.11804199]
[192.25000000 543.57800293]
[196.83735657 558.52758789]
[190.69448853 572.90808105]
[176.72187805 579.92950439]
[161.51695251 576.27648926]
[152.25903320 563.67395020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 154]
[5 153]
[6 151]
[10 146]
[11 145]
[12 144]
[13 143]
[14 142]
[15 141]
[16 140]
[17 139]
[20 136]
[21 135]
[22 134]
[23 130]
[24 129]
[25 128]
[27 126]
[28 125]
[29 124]
[30 123]
[32 122]
[34 120]
[35 119]
[36 118]
[37 117]
[38 116]
[39 114]
[40 112]
[41 111]
[42 110]
[43 109]
[48 108]
[49 107]
[50 106]
[51 105]
[52 104]
[64 103]
[65 102]
[66 101]
[70 97]
[71 96]
[72 95]
[74 93]
[75 92]
[76 91]
[77 90]
[78 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
