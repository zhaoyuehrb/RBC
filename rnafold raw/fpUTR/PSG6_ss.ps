%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGUGCUUCUGCCCUGGGAAGAGGCUCAGCACAGAAGGAGGAAGGACAGCACACCUGACAGCCCUGCUCAGGAAGUCUCUGGAUCCUAGGCUCAUCUCCACAGGGGAGAACACACAGACAGCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[133.25910950 450.57186890]
[133.29560852 435.48342896]
[137.23696899 420.91882324]
[144.81448364 407.87106323]
[155.51148987 397.22979736]
[168.59863281 389.72055054]
[164.74488831 375.22406006]
[160.89112854 360.72753906]
[156.08660889 355.01705933]
[157.12185669 345.84307861]
[153.61157227 331.25961304]
[150.10127258 316.67611694]
[146.59098816 302.09265137]
[136.09010315 291.52944946]
[140.38304138 276.30181885]
[136.87275696 261.71832275]
[133.36245728 247.13485718]
[129.85217285 232.55137634]
[126.34187317 217.96789551]
[122.65959167 203.42689514]
[118.80583191 188.93038940]
[114.95207214 174.43389893]
[100.31684875 161.88262939]
[105.60767365 142.49633789]
[101.07363129 128.19801331]
[96.53958130 113.89967346]
[86.34609222 104.32969666]
[89.16207886 90.63437653]
[84.62803650 76.33603668]
[78.50045776 90.02738190]
[66.03623199 98.37261963]
[51.04298019 98.82242584]
[38.10089493 91.23938751]
[31.16358185 77.94000244]
[32.35027695 62.98701859]
[41.29846573 50.94833374]
[55.27461624 45.50157166]
[70.00923920 48.31063461]
[81.00179291 58.51847076]
[79.58663940 43.58537292]
[78.17148590 28.65227699]
[76.75633240 13.71918201]
[63.56234741 5.76777792]
[57.64941788 -8.26399517]
[61.09197998 -22.91366196]
[72.36579895 -32.61103439]
[70.95064545 -47.54412842]
[69.35923004 -62.45946884]
[67.59177399 -77.35497284]
[65.82431030 -92.25048065]
[56.59307098 -95.87335205]
[49.39596176 -102.61049652]
[45.22189331 -111.47718048]
[44.62250137 -121.20043182]
[47.63958740 -130.40179443]
[53.80529404 -137.79270935]
[62.21409225 -142.35498047]
[61.85980988 -157.35079956]
[61.50552750 -172.34661865]
[61.15124512 -187.34242249]
[60.79696274 -202.33824158]
[60.26560211 -217.32882690]
[59.55723572 -232.31208801]
[50.24565506 -245.81121826]
[57.52391815 -260.50677490]
[73.90476990 -261.28121948]
[82.53699493 -247.33787537]
[74.54049683 -233.02046204]
[75.24886322 -218.03720093]
[78.74035645 -211.44155884]
[75.79277802 -202.69252014]
[76.14706421 -187.69671631]
[76.50134277 -172.70089722]
[76.85562134 -157.70507812]
[77.20990753 -142.70925903]
[93.16368103 -130.06440735]
[94.82589722 -109.48578644]
[80.71981812 -94.01793671]
[82.48727417 -79.12243652]
[84.25473785 -64.22692871]
[88.20446014 -57.89505005]
[85.88374329 -48.95928192]
[87.29889679 -34.02618408]
[100.19362640 -26.61917496]
[106.32678223 -12.87696171]
[103.15491486 2.01574206]
[91.68943024 12.30403042]
[93.10458374 27.23712540]
[94.51973724 42.17021942]
[95.93489075 57.10331726]
[98.92636871 71.80199432]
[103.46041870 86.10032654]
[113.65390778 95.67030334]
[110.83792114 109.36562347]
[115.37196350 123.66396332]
[119.90601349 137.96229553]
[129.94100952 142.46051025]
[135.67990112 151.58152771]
[135.40328979 162.13339233]
[129.44857788 170.58013916]
[133.30233765 185.07664490]
[137.15609741 199.57313538]
[142.43290710 207.14868164]
[140.92535400 214.45761108]
[144.43563843 229.04109192]
[147.94593811 243.62455750]
[151.45622253 258.20803833]
[154.96652222 272.79153442]
[165.71847534 284.39779663]
[161.17446899 298.58233643]
[164.68475342 313.16583252]
[168.19505310 327.74929810]
[171.70533752 342.33279419]
[175.38761902 356.87377930]
[179.24137878 371.37030029]
[183.09513855 385.86679077]
[198.18360901 385.88580322]
[212.75279236 389.81030273]
[225.80931091 397.37268066]
[236.46295166 408.05737305]
[243.98735046 421.13580322]
[247.86947632 435.71633911]
[247.84463501 450.80480957]
[243.91450500 465.37243652]
[236.34707642 478.42605591]
[225.65829468 489.07556152]
[212.57695007 496.59490967]
[197.99493408 500.47140503]
[182.90647888 500.44073486]
[168.34033203 496.50500488]
[155.28965759 488.93252563]
[144.64427185 478.23962402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 116]
[7 115]
[8 114]
[10 113]
[11 112]
[12 111]
[13 110]
[15 108]
[16 107]
[17 106]
[18 105]
[19 104]
[20 102]
[21 101]
[22 100]
[24 96]
[25 95]
[26 94]
[28 92]
[29 91]
[39 90]
[40 89]
[41 88]
[42 87]
[46 83]
[47 82]
[48 80]
[49 79]
[50 78]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
