%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUAACUAUCAAAACACUCAUUUUGUUUUAUAGCAUGACAGGCUGUCUGAUUCCAUCUUUAUAACCAAAGCCAAUUAAGAUCUUAAAACCAAACAUAUAACUUCAUCUUUUUACAAGUACUUAGAGCCUGAGUUGCUCCACAGGAAUCCAGGAACUGGGCACAGGAAAAGGAUCUAAGCUGGUGGUGUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[90.96340942 289.38018799]
[100.84723663 276.74337769]
[100.36889648 261.75100708]
[99.89056396 246.75862122]
[88.88610840 236.78678894]
[88.18743134 221.58920288]
[98.72142029 210.11433411]
[98.24308777 195.12196350]
[97.76475525 180.12959290]
[97.28642273 165.13722229]
[96.80809021 150.14483643]
[96.32975006 135.15246582]
[95.85141754 120.16010284]
[89.08347321 133.54646301]
[87.44496918 148.45671082]
[79.69022369 161.29664612]
[67.25624847 169.68690491]
[52.44719696 172.07267761]
[38.00732422 168.01188660]
[26.61248589 158.25700378]
[20.37425232 144.61572266]
[20.44863319 129.61590576]
[26.82184410 116.03717041]
[38.31286621 106.39578247]
[52.79230118 102.47838593]
[67.57618713 105.01059723]
[82.30899048 102.19200134]
[68.02842712 97.60227203]
[53.74787140 93.01253510]
[39.46731186 88.42280579]
[25.18675232 83.83307648]
[10.90619373 79.24334717]
[-2.60309696 89.41235352]
[-19.34542847 89.52858734]
[-32.72638321 79.74421692]
[-37.59339142 64.07206726]
[-53.04704285 67.46252441]
[-62.97473145 56.35890961]
[-77.32666779 51.99748611]
[-91.67859650 47.63606262]
[-105.49843597 54.82283783]
[-119.99121094 50.19528580]
[-126.75753784 36.97589111]
[-141.10946655 32.61446762]
[-155.46139526 28.25304604]
[-169.81333923 23.89162254]
[-177.51388550 36.85174561]
[-188.09274292 47.59191895]
[-200.93486023 55.48771286]
[-215.29360962 60.08008194]
[-230.33418274 61.10203171]
[-245.18215942 58.49414825]
[-258.97430420 52.40804672]
[-270.90872192 43.19756699]
[-280.29159546 31.39819527]
[-286.57739258 17.69593048]
[-289.40069580 2.88740468]
[-288.59732056 -12.16643429]
[-284.21401978 -26.59037399]
[-276.50561523 -39.54582977]
[-265.92025757 -50.27958298]
[-253.07334900 -58.16759109]
[-238.71182251 -62.75125504]
[-223.67062378 -63.76408768]
[-208.82423401 -61.14720154]
[-195.03579712 -55.05273819]
[-183.10696411 -45.83502579]
[-173.73124695 -34.02996826]
[-167.45375061 -20.32389450]
[-164.63943481 -5.51365948]
[-165.45190430 9.53968906]
[-151.09997559 13.90111160]
[-136.74804688 18.26253510]
[-122.39611053 22.62395859]
[-109.41860962 15.40453148]
[-94.80158234 19.62318611]
[-87.31717682 33.28413010]
[-72.96524048 37.64555359]
[-58.61330795 42.00697708]
[-44.18620300 38.30456161]
[-33.23196793 49.72013474]
[-23.37067986 40.71082306]
[-10.23943901 37.72960663]
[2.75268936 41.66020966]
[12.17834091 51.57754135]
[15.49592495 64.96278381]
[29.77648354 69.55252075]
[44.05704498 74.14225006]
[58.33760071 78.73197937]
[72.61816406 83.32170868]
[86.89871979 87.91144562]
[74.87593842 78.94189453]
[68.14929962 65.53472137]
[68.14608002 50.53472519]
[74.86698151 37.12467194]
[86.88591766 28.14997482]
[101.65265656 25.51492882]
[116.03391266 29.77865219]
[126.97821045 40.03644562]
[132.16333008 54.11176300]
[130.48907471 69.01802826]
[122.31068420 81.59236908]
[109.36368561 89.16663361]
[124.06664276 86.19629669]
[138.76960754 83.22596741]
[152.28402710 70.72614288]
[168.68774414 76.94806671]
[183.34147644 73.74365234]
[197.99520874 70.53923798]
[212.64892578 67.33482361]
[227.30265808 64.13040924]
[241.95639038 60.92599106]
[256.61010742 57.72157669]
[271.26385498 54.51716232]
[278.98950195 49.62141418]
[286.17672729 51.38045502]
[294.93203735 38.49703598]
[309.88525391 35.69414902]
[322.11364746 44.12038422]
[336.81661987 41.15005493]
[348.81137085 30.83323097]
[362.81875610 35.89703369]
[377.52172852 32.92670059]
[392.22470093 29.95637131]
[406.92764282 26.98604012]
[421.63061523 24.01570892]
[430.38592529 11.13228893]
[445.33911133 8.32940006]
[457.56753540 16.75563622]
[472.27050781 13.78530502]
[486.97344971 10.81497383]
[501.67642212 7.84464264]
[513.67114258 -2.47217917]
[527.67858887 2.59162283]
[542.38153076 -0.37870854]
[557.08447266 -3.34903979]
[569.07922363 -13.66586208]
[583.08660889 -8.60205936]
[597.78961182 -11.57239056]
[609.72204590 -22.82175255]
[625.35070801 -17.85406494]
[628.59808350 -1.77966034]
[616.12359619 8.86549187]
[600.75994873 3.13057232]
[586.05694580 6.10090351]
[575.11389160 16.20526695]
[560.05480957 11.35392380]
[545.35186768 14.32425499]
[530.64886475 17.29458618]
[519.70581055 27.39895058]
[504.64675903 22.54760551]
[489.94378662 25.51793671]
[475.24084473 28.48826790]
[460.53787231 31.45859909]
[452.53955078 43.97109222]
[437.67095947 47.19288254]
[424.60095215 38.71866989]
[409.89797974 41.68900299]
[395.19500732 44.65933609]
[380.49206543 47.62966537]
[365.78909302 50.59999847]
[354.84600830 60.70436096]
[339.78695679 55.85301590]
[325.08398438 58.82334900]
[317.08566284 71.33583832]
[302.21710205 74.55763245]
[289.14706421 66.08341980]
[274.46826172 69.17089081]
[259.81451416 72.37530518]
[245.16079712 75.57971954]
[230.50708008 78.78413391]
[215.85334778 81.98854828]
[201.19961548 85.19296265]
[186.54588318 88.39737701]
[171.89216614 91.60179138]
[165.09582520 101.61735535]
[152.90502930 104.40184784]
[141.73994446 97.92893219]
[127.03697968 100.89926147]
[112.33401489 103.86959076]
[113.69960022 111.20611572]
[110.84378815 119.68177032]
[111.32212067 134.67413330]
[111.80046082 149.66650391]
[112.27879333 164.65887451]
[112.75712585 179.65124512]
[113.23545837 194.64363098]
[113.71379089 209.63600159]
[124.95783234 220.41604614]
[125.22935486 235.62725830]
[114.88293457 246.28028870]
[115.36126709 261.27264404]
[115.83960724 276.26504517]
[126.50886536 288.24612427]
[123.65194702 304.03274536]
[109.46043396 311.51477051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 193]
[3 192]
[4 191]
[7 188]
[8 187]
[9 186]
[10 185]
[11 184]
[12 183]
[13 182]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 86]
[36 81]
[38 79]
[39 78]
[40 77]
[43 74]
[44 73]
[45 72]
[46 71]
[103 180]
[104 179]
[105 178]
[107 175]
[108 174]
[109 173]
[110 172]
[111 171]
[112 170]
[113 169]
[114 168]
[116 167]
[119 164]
[120 163]
[122 161]
[123 160]
[124 159]
[125 158]
[126 157]
[129 154]
[130 153]
[131 152]
[132 151]
[134 149]
[135 148]
[136 147]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
