%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGGGUCUAUGGGAAGUUCGGGGACUUGACAGCCGCUGCCGCCGCAGGGCAUUUUUGGUCGAAGAGAGCUGAAGUAAUGAGAAGACAUC\
) } def
/len { sequence length } bind def

/coor [
[73.06587982 148.08744812]
[76.52066803 133.49072266]
[84.21713257 120.61576080]
[95.43907928 110.66133118]
[81.68090820 116.63734436]
[67.92273712 122.61335754]
[54.16456604 128.58937073]
[40.40639877 134.56539917]
[26.64822960 140.54141235]
[12.89005947 146.51742554]
[3.31493402 159.11216736]
[-11.44121265 157.08598328]
[-25.19938278 163.06201172]
[-38.95755005 169.03802490]
[-46.15694809 183.37496948]
[-61.88387680 186.54408264]
[-74.07398224 176.11428833]
[-73.37606049 160.08641052]
[-60.32550049 150.75569153]
[-44.93356705 155.27984619]
[-31.17539787 149.30383301]
[-17.41722870 143.32781982]
[-8.82618046 131.16052246]
[6.91404295 132.75926208]
[20.67221260 126.78324127]
[34.43038177 120.80722046]
[48.18855286 114.83120728]
[61.94672012 108.85519409]
[75.70488739 102.87917328]
[89.46305847 96.90316010]
[87.47682953 94.40725708]
[86.01377869 91.34436798]
[85.18679810 87.81541443]
[85.09044647 83.94085693]
[82.03860474 69.25460052]
[78.98676300 54.56833649]
[74.08223724 46.60734940]
[76.09047699 39.32892609]
[73.54181671 24.54703331]
[70.99316406 9.76514053]
[68.44451141 -5.01675224]
[57.54098129 -17.26604271]
[62.95356750 -32.74622345]
[79.11426544 -35.53260803]
[89.39833069 -22.75880623]
[83.22640228 -7.56540775]
[85.77505493 7.21648502]
[88.32371521 21.99837685]
[90.87236786 36.78026962]
[93.67302704 51.51649475]
[96.72486115 66.20275879]
[99.77670288 80.88901520]
[112.59299469 88.68277740]
[127.03675842 84.63582611]
[141.48051453 80.58887482]
[155.92427063 76.54192352]
[170.36802673 72.49497223]
[181.56895447 61.32135010]
[195.91177368 65.33795166]
[207.11268616 54.16432953]
[221.45550537 58.18093491]
[235.89926147 54.13398361]
[244.98381042 40.91088104]
[260.99578857 39.91276932]
[271.65216064 51.90531921]
[268.77828979 67.68886566]
[254.57875061 75.15562439]
[239.94621277 68.57774353]
[225.50245667 72.62469482]
[215.33464050 83.50885010]
[199.95872498 79.78170776]
[189.79090881 90.66587067]
[174.41497803 86.93872833]
[159.97122192 90.98567963]
[145.52746582 95.03263092]
[131.08370972 99.07958221]
[116.63994598 103.12653351]
[131.62631226 103.76612091]
[145.72184753 108.89600372]
[157.61372375 118.03838348]
[166.19435120 130.34175110]
[170.66452026 144.66018677]
[170.60789490 159.66007996]
[166.02973938 173.94436646]
[157.35646057 186.18258667]
[145.39588928 195.23492432]
[131.26200867 200.25822449]
[116.27125549 200.78463745]
[101.81983185 196.76512146]
[89.25374603 188.57406616]
[79.74338531 176.97436523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[12 22]
[13 21]
[14 20]
[34 52]
[35 51]
[36 50]
[38 49]
[39 48]
[40 47]
[41 46]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[59 71]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
