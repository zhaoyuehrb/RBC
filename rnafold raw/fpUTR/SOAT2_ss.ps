%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACAAGAGCUCUACAGGGCAGGCCACACUGCGAAGGAAGGAGGCAACACGGGCAAGGGCUGCCUGCUGCCCGCUGGAGACCGCACC\
) } def
/len { sequence length } bind def

/coor [
[74.99368286 389.79281616]
[74.99368286 374.79281616]
[64.01754761 369.04748535]
[56.55301285 359.06851196]
[54.11311340 346.77331543]
[57.23772812 334.55865479]
[65.37573242 324.83337402]
[76.98097992 319.54342651]
[67.05451202 308.49801636]
[67.91441345 293.30871582]
[79.56714630 282.97180176]
[80.62522888 268.00915527]
[81.68331909 253.04652405]
[82.74140167 238.08389282]
[83.79948425 223.12126160]
[73.87301636 212.07586670]
[74.73291779 196.88655090]
[86.38565063 186.54965210]
[87.44373322 171.58700562]
[88.50182343 156.62437439]
[89.55990601 141.66174316]
[90.61798859 126.69910431]
[91.67607117 111.73646545]
[72.73722076 92.54615784]
[63.41447449 80.79514313]
[54.09172821 69.04412842]
[39.45328140 63.04191971]
[37.60448074 48.26250076]
[29.63661003 43.34444046]
[28.16887856 35.92826462]
[19.26664734 23.85555649]
[3.75149465 24.09976006]
[-8.92467976 15.15022182]
[-13.88762760 0.44822332]
[-9.22899437 -14.35301876]
[3.25988078 -23.56212425]
[18.77676964 -23.63800430]
[31.35511398 -14.55148029]
[36.15828323 0.20349191]
[31.33935738 14.95332527]
[40.24158859 27.02603340]
[49.35549545 38.93975067]
[63.32711411 44.10144806]
[65.84274292 59.72137833]
[75.16548920 71.47239685]
[84.48823547 83.22341156]
[82.11450958 68.41242218]
[92.81389618 57.89942932]
[107.58088684 60.53308105]
[113.98628998 74.09666443]
[106.63871002 87.17394257]
[119.44901276 79.37034607]
[132.25932312 71.56675720]
[145.06962585 63.76316452]
[157.87992859 55.95957184]
[170.69024658 48.15597916]
[175.85871887 32.96827316]
[191.00357056 27.67557526]
[204.50698853 36.33798981]
[206.01028442 52.31045532]
[194.36027527 63.34026337]
[178.49383545 60.96628571]
[165.68353271 68.76988220]
[152.87321472 76.57347107]
[140.06291199 84.37705994]
[127.25260925 92.18065643]
[114.44229889 99.98424530]
[106.63871002 112.79455566]
[105.58062744 127.75718689]
[104.52253723 142.71981812]
[103.46445465 157.68246460]
[102.40637207 172.64509583]
[101.34828949 187.60772705]
[111.43038177 199.48161316]
[110.14418793 214.64077759]
[98.76212311 224.17933655]
[97.70403290 239.14198303]
[96.64595032 254.10461426]
[95.58786774 269.06726074]
[94.52978516 284.02987671]
[104.61187744 295.90377808]
[103.32568359 311.06292725]
[91.94361877 320.60150146]
[106.08240509 331.64938354]
[110.88381958 348.77807617]
[104.65657043 365.27658081]
[89.99368286 374.79281616]
[89.99368286 389.79281616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[8 83]
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[18 73]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[24 46]
[25 45]
[26 44]
[28 42]
[30 41]
[31 40]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
