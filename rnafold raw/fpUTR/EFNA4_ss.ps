%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCUCUUCACUUUGUACCUUUCUCUCCUCGACUGUGAAGCGGGCCGGGACCUGCCAGGCCAGACCAAACCGGACCUCGGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[56.77727509 124.05130005]
[44.11962128 118.28038788]
[35.26395035 107.63860321]
[31.92119789 94.27236176]
[17.26399612 91.08387756]
[2.60679245 87.89540100]
[-12.52268410 92.52244568]
[-23.31441689 82.25659180]
[-37.97161865 79.06810760]
[-52.62882233 75.87963104]
[-67.28602600 72.69114685]
[-81.94322968 69.50267029]
[-96.60043335 66.31419373]
[-113.87312317 72.38319397]
[-126.49683380 60.33414841]
[-141.25849915 57.67085266]
[-156.02017212 55.00755310]
[-164.20895386 67.81427765]
[-176.67819214 76.50833893]
[-191.52639771 79.76394653]
[-206.48934937 77.08465576]
[-219.28529358 68.87902832]
[-227.96293640 56.39836884]
[-231.19902039 41.54588699]
[-228.50004578 26.58647537]
[-220.27758789 13.80133915]
[-207.78552246 5.14011574]
[-192.92880249 1.92358053]
[-177.97294617 4.64223146]
[-165.19863892 12.88149357]
[-156.55386353 25.38494110]
[-153.35687256 40.24588394]
[-138.59519958 42.90918350]
[-123.83353424 45.57248306]
[-113.58082581 38.88933945]
[-101.14159393 41.14699936]
[-93.41194916 51.65699005]
[-78.75474548 54.84546661]
[-64.09754944 58.03394699]
[-49.44034195 61.22242737]
[-34.78313828 64.41090393]
[-20.12593651 67.59938812]
[-6.04484177 62.74428177]
[5.79527187 73.23819733]
[20.45247459 76.42668152]
[35.10967636 79.61515808]
[45.58612823 67.45118713]
[60.83367157 62.13814163]
[76.78366089 65.19248962]
[89.13039398 75.88464355]
[94.49340820 91.41048431]
[102.55328369 89.60433197]
[109.73036194 94.44130707]
[124.38756561 97.62978363]
[139.04476929 100.81826019]
[154.17425537 96.19122314]
[164.96598816 106.45707703]
[180.09545898 101.83003235]
[190.88719177 112.09589386]
[205.54438782 115.28437042]
[220.20159912 118.47284698]
[234.91337585 121.39920807]
[249.67504883 124.06250000]
[264.62973022 118.89839935]
[275.78100586 128.77253723]
[288.61840820 119.55425262]
[304.20037842 122.19575500]
[313.28240967 135.12989807]
[310.47631836 150.68307495]
[297.44686890 159.62786865]
[281.92422485 156.65748596]
[273.11770630 143.53421021]
[259.21887207 148.88879395]
[247.01174927 138.82417297]
[232.25007629 136.16087341]
[224.94384766 138.11628723]
[217.01312256 133.13005066]
[202.35591125 129.94157410]
[187.69871521 126.75309753]
[173.61761475 131.60820007]
[161.77749634 121.11428070]
[147.69641113 125.96938324]
[135.85629272 115.47546387]
[121.19908905 112.28698730]
[106.54188538 109.09851074]
[91.83010864 106.17214966]
[83.27214813 117.39183807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 46]
[5 45]
[6 44]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[15 34]
[16 33]
[17 32]
[51 86]
[53 85]
[54 84]
[55 83]
[57 81]
[59 79]
[60 78]
[61 77]
[62 75]
[63 74]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
