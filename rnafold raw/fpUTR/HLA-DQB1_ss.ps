%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUAUUCUUUCUGCCAGGUACAUCAGAUCCAUCAGGUCCGAGCUGUGUUGACUACCACUGCUUUUCCCUUCGUCUCAGUU\
) } def
/len { sequence length } bind def

/coor [
[17.58883476 241.94346619]
[7.46114159 243.12788391]
[-2.72776604 242.79992676]
[-12.75334549 240.96757507]
[-22.39476585 237.67193604]
[-31.43976784 232.98637390]
[-39.68934631 227.01481628]
[-46.96211243 219.88949585]
[-53.09830475 211.76797485]
[-57.96326828 202.82972717]
[-61.45044708 193.27209473]
[-63.48367691 183.30598450]
[-78.48099518 183.58984375]
[-93.47830963 183.87370300]
[-108.47561646 184.15756226]
[-115.83164215 197.64031982]
[-128.95187378 205.62500000]
[-144.30702209 205.96379089]
[-157.76664734 198.56553650]
[-165.71017456 185.42034912]
[-166.00082397 170.06420898]
[-158.56042480 156.62783813]
[-145.39039612 148.72555542]
[-130.03341675 148.48304749]
[-116.62044525 155.96553040]
[-108.75948334 169.16024780]
[-93.76216888 168.87638855]
[-78.76485443 168.59252930]
[-63.76753998 168.30867004]
[-58.24935913 146.78686523]
[-46.12590027 128.14543152]
[-28.66118050 114.35019684]
[-7.68322706 106.86057281]
[14.60724926 106.47514343]
[35.86772156 113.24654388]
[53.86002350 126.47465515]
[65.68795013 117.24967194]
[77.51587677 108.02469635]
[77.07505035 93.33828735]
[85.31799316 81.17527008]
[99.12234497 76.14289856]
[113.25914764 80.14737701]
[125.08707428 70.92240143]
[136.91499329 61.69742203]
[148.74291992 52.47244644]
[154.86631775 37.88428116]
[169.66056824 36.15811157]
[181.48849487 26.93313408]
[193.31640625 17.70815659]
[192.65335083 2.20525455]
[201.25733948 -10.70795727]
[215.81996155 -16.06608582]
[230.74160767 -11.80881977]
[240.28457642 0.42683360]
[240.77943420 15.93601608]
[232.03585815 28.75513077]
[217.41596985 33.95496750]
[202.54139709 29.53608131]
[190.71347046 38.76105881]
[178.88554382 47.98603439]
[173.60815430 61.91436768]
[157.96789551 64.30036926]
[146.13996887 73.52534485]
[134.31204224 82.75032806]
[122.48412323 91.97530365]
[122.92494965 106.66171265]
[114.68200684 118.82472992]
[100.87765503 123.85710144]
[86.74085236 119.85262299]
[74.91292572 129.07760620]
[63.08500290 138.30258179]
[67.78500366 147.38858032]
[71.08721161 157.06788635]
[72.91955566 167.12692261]
[73.24238586 177.34385681]
[72.04933167 187.49348450]
[69.36743164 197.35218811]
[65.25653076 206.70286560]
[59.80791855 215.33975220]
[53.14230728 223.07286072]
[45.40718460 229.73225403]
[36.77352142 235.17172241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 29]
[13 28]
[14 27]
[15 26]
[36 71]
[37 70]
[38 69]
[42 65]
[43 64]
[44 63]
[45 62]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
