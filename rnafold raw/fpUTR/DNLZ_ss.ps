%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACGGAAGCCCAAGAACGCCGCUUCCGCCCGGCGCCCACUUCCAAGAUGGCGGCGGGGCGGGGCCGGGGCAGGGCGGACGGAGCCGGCGAGCGGG\
) } def
/len { sequence length } bind def

/coor [
[139.40283203 301.35534668]
[134.79040527 290.68414307]
[134.58416748 279.00863647]
[138.85467529 268.08435059]
[146.99636841 259.56900024]
[141.81588745 245.49197388]
[127.45751190 241.62223816]
[118.01937866 229.90107727]
[117.28424835 214.69210815]
[125.74337006 201.81773376]
[120.56288910 187.74070740]
[115.38241577 173.66368103]
[110.20194244 159.58665466]
[99.75495148 157.87393188]
[90.95042419 151.84965515]
[85.48648071 142.59173584]
[84.45234680 131.80935669]
[88.11184692 121.52753448]
[95.84075928 113.70679474]
[86.14452362 103.63333130]
[89.64981842 90.09803009]
[85.84499359 75.58860779]
[82.04017639 61.07918167]
[71.05545044 49.69294739]
[75.31137085 35.41931915]
[71.50655365 20.90989685]
[67.70172882 6.40047503]
[63.89691162 -8.10894775]
[60.09209442 -22.61837196]
[56.28727722 -37.12779236]
[52.48245621 -51.63721848]
[48.67763901 -66.14663696]
[37.69290924 -77.53287506]
[41.94882965 -91.80650330]
[38.14401245 -106.31592560]
[24.78179741 -114.32148743]
[21.12986374 -129.09030151]
[28.84428978 -141.77980042]
[25.03947067 -156.28921509]
[21.23465157 -170.79864502]
[17.19776726 -185.24522400]
[12.92985249 -199.62522888]
[0.66253358 -210.50846863]
[4.21866131 -226.51741028]
[19.93999672 -231.18342590]
[31.65377808 -219.70651245]
[27.30986977 -203.89314270]
[31.57778358 -189.51313782]
[36.59230804 -183.89176941]
[35.74407578 -174.60345459]
[39.54889297 -160.09403992]
[43.35371017 -145.58460999]
[56.30239105 -138.31362915]
[60.36771011 -123.65321350]
[52.65343475 -110.12074280]
[56.45825195 -95.61132050]
[67.17083740 -85.26289368]
[63.18706131 -69.95146179]
[66.99188232 -55.44203568]
[70.79669952 -40.93261337]
[74.60151672 -26.42318916]
[78.40633392 -11.91376686]
[82.21115875 2.59565592]
[86.01597595 17.10507965]
[89.82079315 31.61450195]
[100.53337097 41.96292496]
[96.54959869 57.27436066]
[100.35441589 71.78378296]
[104.15924072 86.29320526]
[113.85547638 96.36666870]
[110.35018158 109.90196991]
[128.14028931 118.84300232]
[133.82528687 137.61421204]
[124.27896881 154.40617371]
[129.45944214 168.48320007]
[134.63992310 182.56022644]
[139.82038879 196.63725281]
[154.60708618 200.95695496]
[163.90621948 213.01429749]
[164.31758118 228.05738831]
[155.89291382 240.31149292]
[161.07339478 254.38851929]
[179.52835083 258.62185669]
[191.77970886 272.86572266]
[193.18327332 291.45422363]
[183.36508179 307.12805176]
[189.87333679 320.64257812]
[196.38159180 334.15710449]
[210.98852539 340.79165649]
[214.76882935 356.38296509]
[204.82257080 368.97073364]
[188.77967834 368.89868164]
[178.94688416 356.22210693]
[182.86706543 340.66537476]
[176.35881042 327.15084839]
[169.85055542 313.63629150]
[158.38148499 313.72961426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 82]
[6 81]
[10 77]
[11 76]
[12 75]
[13 74]
[19 71]
[21 69]
[22 68]
[23 67]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[34 56]
[35 55]
[38 52]
[39 51]
[40 50]
[41 48]
[42 47]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
