%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAUUGUUUUUGUAAUCUCUGAGGAGAAGCAGCAGCAAACAUUUGCUAGUCAGACAAGUGACAGGGA\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 166.44183350]
[92.50000000 150.60270691]
[92.50000000 135.60270691]
[92.50000000 120.60270691]
[81.17819977 111.24549866]
[78.30333710 96.84149170]
[65.09440613 89.73345947]
[51.88547134 82.62543488]
[38.67653656 75.51740265]
[25.46760368 68.40937042]
[9.64877033 68.68333435]
[2.10765576 55.83884811]
[-11.10127735 48.73081589]
[-24.31021118 41.62278748]
[-37.51914215 34.51475525]
[-50.29203796 37.47481155]
[-61.23740387 31.02154160]
[-64.60762024 19.19134712]
[-77.48435211 11.49785709]
[-90.36108398 3.80436826]
[-103.23781586 -3.88912106]
[-119.63430023 -3.59328437]
[-127.85573578 -17.78271484]
[-119.44462585 -31.86054420]
[-103.05359650 -31.34470558]
[-95.54432678 -16.76585197]
[-82.66759491 -9.07236385]
[-69.79086304 -1.37887454]
[-56.91413498 6.31461477]
[-39.52706146 5.48393869]
[-30.41111374 21.30582428]
[-17.20218086 28.41385460]
[-3.99324727 35.52188492]
[9.21568584 42.62991333]
[24.08972931 41.84753799]
[32.57563400 55.20043945]
[45.78456879 62.30846786]
[58.99349976 69.41649628]
[72.20243073 76.52452850]
[85.41136932 83.63256073]
[104.87885284 78.62435150]
[120.24546814 91.58321381]
[135.23036194 90.91024017]
[150.21527100 90.23726654]
[165.20016479 89.56430054]
[180.18505859 88.89132690]
[195.16995239 88.21835327]
[210.13597107 87.20932007]
[225.07559204 85.86473083]
[238.16673279 75.98778534]
[253.15835571 82.63483429]
[254.62835693 98.96796417]
[241.06454468 108.18505096]
[226.42018127 100.80434418]
[211.48056030 102.14893341]
[204.88847351 106.01178741]
[195.84292603 103.20324707]
[180.85803223 103.87622070]
[165.87313843 104.54919434]
[150.88822937 105.22216797]
[135.90333557 105.89514160]
[120.91844177 106.56810760]
[118.87734985 111.15200043]
[115.84753418 115.15179443]
[111.98770142 118.35800934]
[107.50000000 120.60270691]
[107.50000000 135.60270691]
[107.50000000 150.60270691]
[113.54634094 166.44183350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[12 34]
[13 33]
[14 32]
[15 31]
[18 29]
[19 28]
[20 27]
[21 26]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
