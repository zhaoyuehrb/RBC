%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGGCGCGGUGAGUCAGAGCCGCACAGUAAAUAUUUGUAUUAGCCGGAGCCGGCUCGCUAAUGGUGGACGCGUGAGGCGGAGGCGCGGGCGGAGGAGGGAGGCCGGAGCGGGCAGCGCGGCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[115.08943176 150.29940796]
[101.20314026 155.97134399]
[90.99923706 144.97677612]
[97.69082642 131.55104065]
[102.08751678 117.20987701]
[94.76421356 115.59149170]
[90.29341125 130.76788330]
[75.78119659 134.12121582]
[65.04721832 144.59889221]
[54.31323242 155.07655334]
[43.57924652 165.55422974]
[32.84526443 176.03189087]
[35.22047806 191.36610413]
[28.09891701 205.15243530]
[14.21896553 212.08976746]
[-1.08225274 209.51055908]
[-11.92110634 198.40655518]
[-14.12983513 183.04748535]
[-6.85913754 169.33921814]
[7.09525394 162.55285645]
[22.36759186 165.29791260]
[33.10157776 154.82023621]
[43.83555984 144.34257507]
[54.56954575 133.86489868]
[65.30352783 123.38722992]
[69.00656128 108.96028137]
[84.28654480 104.85751343]
[70.50372314 110.77645111]
[55.55604553 112.02824402]
[40.98074341 108.48415375]
[28.27674675 100.50865936]
[18.75054550 88.92195892]
[13.38181877 74.91564941]
[12.72268963 59.93013763]
[16.84094429 45.50654984]
[25.31305695 33.12820816]
[37.26774979 24.06811523]
[51.47559738 19.25801659]
[66.47545624 19.19258308]
[80.72473145 23.87854576]
[92.75801086 32.83399582]
[101.33779144 45.13795471]
[105.58172607 59.52506638]
[105.05335999 74.51575470]
[99.80735779 88.56781006]
[109.75419617 77.34014893]
[119.70103455 66.11248779]
[123.06079102 50.65213013]
[137.29199219 46.25641251]
[136.51992798 30.69872284]
[146.76737976 19.45397377]
[161.60400391 18.81380653]
[171.55085754 7.58614540]
[181.49769592 -3.64151573]
[191.44453430 -14.86917686]
[201.39137268 -26.09683800]
[211.20182800 -37.44386673]
[220.87445068 -48.90859985]
[223.85964966 -64.44562531]
[237.98046875 -69.18394470]
[247.65310669 -80.64868164]
[242.21481323 -93.59585571]
[242.90435791 -107.55541229]
[249.52894592 -119.78688812]
[260.73626709 -127.91389465]
[274.29016113 -130.38575745]
[287.51681519 -126.77317810]
[297.46365356 -138.00083923]
[296.69158936 -153.55853271]
[306.93902588 -164.80326843]
[321.77566528 -165.44343567]
[331.72250366 -176.67109680]
[341.66934204 -187.89875793]
[351.61618042 -199.12641907]
[361.56301880 -210.35408020]
[357.28060913 -225.17517090]
[361.71279907 -239.95216370]
[373.44528198 -249.96977234]
[388.73425293 -252.03141785]
[402.70111084 -245.47923279]
[410.88900757 -232.40400696]
[410.68527222 -216.97799683]
[402.15490723 -204.12356567]
[388.01989746 -197.94253540]
[372.79067993 -200.40724182]
[362.84384155 -189.17958069]
[352.89700317 -177.95191956]
[342.95016479 -166.72425842]
[333.00332642 -155.49659729]
[334.15618896 -140.69097900]
[324.22863770 -129.16284180]
[308.69131470 -128.05400085]
[298.74447632 -116.82633972]
[304.23468018 -101.67833710]
[301.34863281 -85.73161316]
[290.77621460 -73.32628632]
[275.31219482 -67.88660431]
[259.11782837 -70.97604370]
[249.44520569 -59.51131058]
[247.15187073 -44.79431915]
[232.33918762 -39.23596573]
[222.66656494 -27.77123260]
[220.73834229 -20.55718231]
[212.61903381 -16.14999771]
[202.67219543 -4.92233706]
[192.72535706 6.30532408]
[182.77851868 17.53298569]
[172.83166504 28.76064682]
[173.98452759 43.56626892]
[164.05696106 55.09441376]
[148.51965332 56.20325089]
[145.87135315 70.86052704]
[130.92869568 76.05932617]
[120.98185730 87.28698730]
[111.03501892 98.51464844]
[126.10935211 103.68574524]
[138.08268738 116.74594879]
[143.40176392 130.77119446]
[148.72084045 144.79643250]
[154.03990173 158.82168579]
[167.07806396 168.76846313]
[164.71488953 184.99645996]
[149.38140869 190.81167603]
[136.85140991 180.23191833]
[140.01466370 164.14074707]
[134.69558716 150.11550903]
[129.37651062 136.09027100]
[124.05744171 122.06501770]
[116.73413849 120.44664001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 27]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[45 115]
[46 114]
[47 113]
[49 111]
[52 108]
[53 107]
[54 106]
[55 105]
[56 104]
[57 102]
[58 101]
[60 99]
[61 98]
[67 93]
[68 92]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
