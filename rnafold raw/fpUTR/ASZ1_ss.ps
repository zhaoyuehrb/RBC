%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGCGCAUGCGCCCGGAGAGCUGAAGGGCGCGCGGUGCCGACAGGGAGCUUCCUUGGCUGGC\
) } def
/len { sequence length } bind def

/coor [
[157.38815308 135.40264893]
[143.82832336 128.98931885]
[130.26847839 122.57598877]
[116.70864105 116.16266632]
[103.14880371 109.74933624]
[94.76762390 109.37660980]
[89.09281158 102.67414856]
[73.27481079 102.99247742]
[65.69769287 90.16919708]
[52.46887589 83.09824371]
[39.24005890 76.02729797]
[26.01124001 68.95634460]
[12.78242016 61.88539124]
[-0.44639882 54.81444168]
[-13.67521763 47.74349213]
[-26.30076027 56.39532852]
[-41.50218582 58.17724609]
[-55.78631973 52.67978287]
[-65.87076569 41.16620636]
[-69.43820190 26.28225517]
[-65.66885376 11.44815254]
[-55.42889023 0.07266667]
[-41.07137299 -5.23019886]
[-25.89556503 -3.24188495]
[-13.38875008 5.58070850]
[-6.42490339 19.21021461]
[-6.60426664 34.51467133]
[6.62455225 41.58562469]
[19.85337067 48.65657425]
[33.08219147 55.72752380]
[46.31100845 62.79847717]
[59.53982925 69.86943054]
[72.76864624 76.94037628]
[87.64043427 76.11627960]
[96.16376495 89.44532776]
[109.56212616 96.18949890]
[123.12197113 102.60282135]
[136.68180847 109.01615143]
[150.24165344 115.42948151]
[163.80148315 121.84280396]
[183.03308105 112.45561981]
[203.04342651 119.28083038]
[212.30146790 138.00093079]
[227.01324463 140.92729187]
[241.72502136 143.85365295]
[256.43679810 146.77999878]
[271.14859009 149.70635986]
[285.86035156 152.63270569]
[302.57473755 149.79261780]
[309.93084717 165.06756592]
[297.28921509 176.36471558]
[282.93402100 167.34449768]
[268.22222900 164.41813660]
[253.51045227 161.49177551]
[238.79867554 158.56542969]
[224.08688354 155.63906860]
[209.37510681 152.71272278]
[203.62548828 160.43360901]
[195.51361084 165.69972229]
[186.03361511 167.82859802]
[176.36026001 166.52452087]
[167.70336914 161.91921997]
[161.15653992 154.55920410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[7 35]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
