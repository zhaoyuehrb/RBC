%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCGUUAGGGAGCCCAAUGGGCGUCGCCGCCAGGCCCCGUUGCAGAGCGCGUCUAGCCAAUAGGCAGCGGCGGCGGGCGGGCGCGGGCGACAGGCGGCGCAGCUGAGGCGGAGCAGGCGCUGCGGCAGGAGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[85.31433868 222.36796570]
[77.56279755 208.78681946]
[80.40541840 193.40977478]
[92.50000000 183.49740601]
[92.50000000 168.49740601]
[84.76270294 155.77012634]
[92.50000000 141.96995544]
[92.50000000 126.96995544]
[89.70264435 126.03061676]
[87.01971436 124.80203247]
[84.48101807 123.29785156]
[73.12461853 133.09744263]
[67.73142242 147.97105408]
[53.04085922 150.42800903]
[41.68445587 160.22760010]
[30.32805443 170.02719116]
[18.97165298 179.82679749]
[10.93006134 194.75224304]
[-5.63823318 191.15670776]
[-6.76976299 174.24055481]
[9.17205429 168.47039795]
[20.52845764 158.67079163]
[31.88485909 148.87120056]
[43.24126053 139.07159424]
[47.82216644 124.89893341]
[63.32501602 121.74105072]
[74.68141937 111.94145203]
[71.73594666 88.49057007]
[88.46318054 69.03769684]
[79.59163666 56.94241714]
[70.72009277 44.84714127]
[61.84854889 32.75186539]
[52.97700500 20.65658760]
[40.31922913 17.90592575]
[33.18632126 7.57852697]
[34.97801208 -4.43792772]
[26.38208199 -16.73060799]
[17.78614998 -29.02328682]
[9.05185604 -41.21804428]
[0.18031284 -53.31332016]
[-8.69123077 -65.40859985]
[-17.56277275 -77.50387573]
[-26.43431664 -89.59915161]
[-35.30585861 -101.69442749]
[-44.17740250 -113.78970337]
[-59.54677963 -116.32348633]
[-68.37148285 -128.71620178]
[-65.86119080 -143.35293579]
[-83.16032410 -145.66551208]
[-93.27009583 -159.47720337]
[-90.36193085 -176.00299072]
[-99.50455475 -187.89469910]
[-115.16196442 -191.39112854]
[-122.06076813 -205.87512207]
[-114.90879822 -220.23579407]
[-99.19242859 -223.45686340]
[-86.96791840 -213.06739807]
[-87.61286163 -197.03732300]
[-78.47023773 -185.14561462]
[-65.53673553 -185.26867676]
[-54.74792862 -177.78688049]
[-50.19629288 -165.26411438]
[-53.76591492 -152.22447205]
[-39.05112457 -150.22184753]
[-29.88181686 -138.08189392]
[-32.08212662 -122.66124725]
[-23.21058273 -110.56597137]
[-14.33903980 -98.47069550]
[-5.46749687 -86.37541962]
[3.40404630 -74.28014374]
[12.27558994 -62.18486404]
[21.14713287 -50.08958817]
[27.69473267 -46.52645111]
[30.07883072 -37.61921692]
[38.67476273 -25.32653809]
[47.27069092 -13.03385830]
[63.52928543 -6.52515268]
[65.07228088 11.78504467]
[73.94382477 23.88032150]
[82.81536865 35.97559738]
[91.68691254 48.07087708]
[100.55845642 60.16615295]
[115.24919891 63.19634247]
[128.18270874 55.59869003]
[141.11621094 48.00103378]
[154.04972839 40.40338135]
[162.02967834 26.74209023]
[176.92259216 26.96696091]
[184.90254211 13.30566978]
[199.79545593 13.53053951]
[207.41278076 -0.99214768]
[223.80718994 -1.38624918]
[232.11352539 12.75365257]
[223.78694153 26.88163948]
[207.39311218 26.46404839]
[200.33824158 39.58190536]
[184.52024841 39.90047073]
[177.46537781 53.01832581]
[161.64738464 53.33689117]
[148.71386719 60.93454361]
[135.78036499 68.53219604]
[122.84684753 76.12985229]
[129.38165283 91.75122070]
[127.05323792 107.19380188]
[139.98675537 114.79145813]
[152.92025757 122.38911438]
[165.85377502 129.98677063]
[181.67176819 130.30532837]
[188.72663879 143.42318726]
[201.66014099 151.02084351]
[214.59365845 158.61848450]
[227.52716064 166.21614075]
[242.19996643 160.80850220]
[256.89840698 166.14613342]
[264.68228149 179.70875549]
[261.87634277 195.09254456]
[249.80541992 205.03370667]
[234.16905212 204.83836365]
[222.35026550 194.59872437]
[219.92950439 179.14965820]
[206.99600220 171.55200195]
[194.06248474 163.95434570]
[181.12898254 156.35668945]
[166.23606873 156.58155823]
[158.25611877 142.92027283]
[145.32260132 135.32261658]
[132.38909912 127.72496796]
[119.45558929 120.12731171]
[115.86851501 123.06119537]
[111.84658051 125.36310577]
[107.50000000 126.96995544]
[107.50000000 141.96995544]
[115.23729706 155.77012634]
[107.50000000 168.49740601]
[107.50000000 183.49740601]
[119.59458160 193.40977478]
[122.43720245 208.78681946]
[114.68566132 222.36796570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 135]
[5 134]
[7 132]
[8 131]
[11 27]
[12 26]
[14 24]
[15 23]
[16 22]
[17 21]
[29 82]
[30 81]
[31 80]
[32 79]
[33 78]
[36 76]
[37 75]
[38 74]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[48 63]
[51 59]
[52 58]
[83 102]
[84 101]
[85 100]
[86 99]
[88 97]
[90 95]
[104 128]
[105 127]
[106 126]
[107 125]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
