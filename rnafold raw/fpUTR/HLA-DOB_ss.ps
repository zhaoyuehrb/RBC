%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUAUACUCUUAAUGGGUACUUUCUGACUGAAUUUUAUGAGCUCAUUCUGAAGAGGCUGACGAUUUUACUAUCUCAUUUUUUUCCUUUCUCCAGA\
) } def
/len { sequence length } bind def

/coor [
[100.98094177 166.23069763]
[92.17927551 165.77464294]
[83.51607513 164.15408325]
[75.14470673 161.39773560]
[67.21339417 157.55436707]
[59.86254120 152.69204712]
[53.22229385 146.89683533]
[41.49482346 156.24917603]
[29.76735115 165.60153198]
[18.03987885 174.95387268]
[6.31240559 184.30622864]
[3.09455299 200.02325439]
[-11.26465225 207.17816162]
[-25.75005722 200.28231812]
[-29.24969864 184.62562561]
[-19.07895088 172.21855164]
[-3.03994131 172.57875061]
[8.68753147 163.22640991]
[20.41500282 153.87405396]
[32.14247513 144.52171326]
[43.86994934 135.16935730]
[37.81839752 122.82356262]
[34.44602585 109.49438477]
[33.89813614 95.75611877]
[36.19833755 82.20071411]
[41.24752045 69.41220856]
[48.82813263 57.94162369]
[38.39289474 47.16638565]
[27.95765686 36.39114380]
[17.35105515 25.78454399]
[6.57581472 15.34930515]
[-8.72023487 11.30685043]
[-12.48015785 -3.10537529]
[-28.27641296 -2.60149765]
[-39.74502182 -13.47562027]
[-40.08186340 -29.27631950]
[-29.08709526 -40.62931824]
[-13.28371811 -40.79908752]
[-2.04759574 -29.68490410]
[-2.04491949 -13.88061523]
[12.48041248 -10.58455944]
[17.01105309 4.57406473]
[27.78629303 15.00930309]
[34.91403961 17.44658089]
[38.73289490 25.95590591]
[49.16813660 36.73114777]
[59.60337448 47.50638580]
[80.99842072 36.54602432]
[104.89618683 33.94324875]
[128.14906311 40.04087448]
[147.69441223 54.03577423]
[160.95787048 74.08466339]
[175.33789062 69.81674957]
[189.71791077 65.54883575]
[204.09793091 61.28092575]
[218.47795105 57.01301193]
[232.85795593 52.74509811]
[247.23797607 48.47718430]
[258.26629639 37.13315201]
[272.66897583 40.92939377]
[287.04901123 36.66147995]
[301.42901611 32.39356613]
[308.93212891 26.85321236]
[316.33868408 28.22727776]
[330.84811401 24.42245865]
[345.35754395 20.61763954]
[353.11532593 6.84838009]
[368.35949707 2.67814636]
[382.04595947 10.58106327]
[386.05477905 25.86847115]
[378.00759888 39.47061920]
[362.67868042 43.31760025]
[349.16235352 35.12706375]
[334.65292358 38.93188095]
[320.14352417 42.73669815]
[305.69692993 46.77358627]
[291.31692505 51.04150009]
[276.93688965 55.30941391]
[266.93716431 66.34817505]
[251.50588989 62.85720062]
[237.12586975 67.12511444]
[222.74586487 71.39302826]
[208.36584473 75.66094208]
[193.98582458 79.92885590]
[179.60580444 84.19676971]
[165.22578430 88.46468353]
[166.17985535 97.22636414]
[165.96226501 106.03714752]
[164.57684326 114.74104309]
[162.04812622 123.18396759]
[158.42089844 131.21643066]
[153.75936890 138.69622803]
[148.14605713 145.49092102]
[141.68034363 151.48023987]
[134.47671509 156.55813599]
[126.66270447 160.63470459]
[118.37664032 163.63777161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[27 47]
[28 46]
[29 45]
[30 43]
[31 42]
[33 40]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[60 78]
[61 77]
[62 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
