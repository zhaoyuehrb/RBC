%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGUGUAUGUGUGUGUGUGUGUAUUGGGUUUCUCUCUCCCUUGUAAGAACACAGCCAGCCCGCCCUCUCCUGCUGUUGCUGCAGCUCUGACUUGCUUUUUCCUGCCUCCUUCCUCUCCUCUCUCUUCUUGCUUAGCUUCUUGCCUUCUGAUACUACUCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[96.84029388 131.00872803]
[85.05240631 120.83802032]
[81.69323730 108.34777832]
[67.29359436 112.54899597]
[52.89395142 116.75022125]
[41.81318665 128.04301453]
[27.42823219 124.18006134]
[13.02858829 128.38128662]
[9.36354160 132.22116089]
[5.02074385 134.05715942]
[0.88874376 133.97041321]
[-2.30838251 132.38728333]
[-16.92322350 135.76461792]
[-25.31750679 148.88612366]
[-40.18714523 152.10302734]
[-52.64476013 144.01950073]
[-67.25959778 147.39683533]
[-81.87444305 150.77418518]
[-96.48928070 154.15151978]
[-111.10412598 157.52885437]
[-117.24105835 171.65841675]
[-130.36775208 179.37484741]
[-145.34397888 177.89965820]
[-156.44694519 168.00712585]
[-171.06178284 171.38446045]
[-185.67663574 174.76179504]
[-198.81832886 187.63137817]
[-215.38743591 181.90663147]
[-229.93574524 185.55995178]
[-244.48405457 189.21325684]
[-249.31509399 203.86468506]
[-261.31475830 213.56065369]
[-276.65399170 215.20718384]
[-290.43814087 208.27888489]
[-298.26867676 194.98655701]
[-297.64694214 179.57171631]
[-288.77133179 166.95321655]
[-274.47399902 161.15753174]
[-259.31716919 164.03407288]
[-248.13737488 174.66494751]
[-233.58906555 171.01164246]
[-219.04074097 167.35832214]
[-212.53970337 157.12446594]
[-200.41520691 153.98017883]
[-189.05397034 160.14695740]
[-174.43913269 156.76962280]
[-159.82429504 153.39227295]
[-154.18739319 139.63133240]
[-141.37684631 131.73489380]
[-126.19549561 132.90963745]
[-114.48146057 142.91401672]
[-99.86662292 139.53668213]
[-85.25177765 136.15934753]
[-70.63694000 132.78199768]
[-56.02209854 129.40466309]
[-48.37421036 116.67495728]
[-33.60079193 113.04166412]
[-20.30056190 121.14978027]
[-5.68572187 117.77244568]
[8.82736874 113.98163605]
[23.22701263 109.78041840]
[33.27781677 98.78812408]
[48.69272995 102.35057068]
[63.09237289 98.14935303]
[77.49201965 93.94813538]
[62.85266495 97.21758270]
[48.90572357 91.69645691]
[40.47087860 79.29268646]
[40.46297455 64.29269409]
[48.88474655 51.88004684]
[62.82585907 46.34422302]
[77.46865082 49.59824371]
[87.75297546 60.51761627]
[90.12480164 75.32925415]
[88.70752716 60.39635849]
[87.29024506 45.46346283]
[85.87297058 30.53056908]
[84.45569611 15.59767628]
[74.51515961 2.55475521]
[81.08917236 -12.46903801]
[97.41495514 -14.01851368]
[106.69793701 -0.49970400]
[99.38858795 14.18039894]
[100.80586243 29.11329269]
[102.22314453 44.04618835]
[103.64041901 58.97908020]
[105.05769348 73.91197205]
[112.21647644 76.14846039]
[116.68944550 61.83089828]
[121.16241455 47.51333618]
[125.63562012 33.19585037]
[139.95303345 37.66929626]
[135.47998047 51.98630524]
[131.00700378 66.30386353]
[126.53403473 80.62142944]
[133.69282532 82.85791016]
[143.35877991 71.38754272]
[139.50593567 56.35640335]
[145.25527954 41.94375229]
[158.39608765 33.69154358]
[173.87542725 34.77292633]
[185.74119568 44.77208328]
[189.43075562 59.84413528]
[183.52539062 74.19357300]
[170.29585266 82.30274200]
[154.82914734 81.05350494]
[145.16317749 92.52386475]
[159.14505005 87.09178162]
[173.12690735 81.65969086]
[187.10876465 76.22760773]
[197.40455627 65.31904602]
[210.58595276 58.16008377]
[225.34149170 55.46300507]
[240.20306396 57.49615097]
[253.69203186 64.05723572]
[264.46630859 74.49346161]
[271.45391846 87.76649475]
[273.95962524 102.55572510]
[271.73416138 117.38970947]
[264.99890137 130.79255676]
[254.42398071 141.43075562]
[241.06155396 148.24584961]
[226.24110413 150.55978394]
[211.43717957 148.14233398]
[198.12271118 141.23402405]
[187.62255859 130.52241516]
[173.54040527 125.35590363]
[159.45825195 120.18938446]
[145.37608337 115.02285767]
[155.25738525 126.30825043]
[165.13867188 137.59364319]
[175.01995850 148.87904358]
[193.92388916 149.38102722]
[206.28103638 163.27267456]
[204.63400269 181.47250366]
[214.93527222 192.37588501]
[225.23654175 203.27928162]
[240.80139160 203.89001465]
[251.09301758 215.09434509]
[250.41485596 229.92929077]
[260.71612549 240.83267212]
[275.85861206 237.88156128]
[290.18429565 243.60679626]
[299.12191772 256.18145752]
[299.81951904 271.59304810]
[292.05447388 284.92376709]
[278.30462646 291.91983032]
[262.95745850 290.34881592]
[250.91021729 280.71203613]
[246.00712585 266.08456421]
[249.81274414 251.13394165]
[239.51147461 240.23056030]
[224.66194153 240.06581116]
[214.05967712 229.15498352]
[214.33314514 213.58055115]
[204.03187561 202.67715454]
[193.73060608 191.77377319]
[182.47528076 193.93229675]
[171.46815491 190.33319092]
[163.49862671 181.76617432]
[160.64523315 170.29483032]
[163.73457336 158.76033020]
[153.85328674 147.47492981]
[143.97198486 136.18954468]
[134.09069824 124.90415192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[7 61]
[8 60]
[12 59]
[13 58]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[24 47]
[25 46]
[26 45]
[28 42]
[29 41]
[30 40]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
[96 107]
[97 106]
[129 165]
[130 164]
[131 163]
[132 162]
[135 157]
[136 156]
[137 155]
[140 152]
[141 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
