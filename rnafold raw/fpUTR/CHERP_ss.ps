%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGGCCGGCUUCCGCAGACGGCGCUGGUGGUCGAUCGUGUGGCGCCGGAGGACGUUCCCCGCGGCCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[97.36434937 238.94458008]
[96.10918427 223.99719238]
[94.85401154 209.04978943]
[93.59884644 194.10240173]
[92.34368134 179.15499878]
[91.08850861 164.20761108]
[89.83334351 149.26022339]
[88.57817841 134.31282043]
[87.32300568 119.36543274]
[86.24867249 96.53128052]
[75.98046875 85.59674835]
[62.94935226 84.35424042]
[54.61953354 74.78692627]
[55.14852905 62.51772690]
[45.34722137 51.16280365]
[35.54591370 39.80787659]
[25.74460411 28.45295143]
[15.94329453 17.09802437]
[5.90633488 5.95085239]
[-4.36187172 -4.98367691]
[-14.85682201 -15.70076752]
[-25.57391167 -26.19571686]
[-36.29100037 -36.69066620]
[-47.00809097 -47.18561935]
[-62.55234528 -45.47969055]
[-75.52770233 -54.20747375]
[-79.80759430 -69.24797058]
[-73.37118530 -83.49951935]
[-59.25755692 -90.23297882]
[-44.13072586 -86.26900482]
[-35.13312531 -73.47927856]
[-36.51314163 -57.90270615]
[-25.79605103 -47.40775681]
[-15.07896137 -36.91280746]
[-4.36187172 -26.41785812]
[2.83078051 -23.91613960]
[6.57265806 -15.25188351]
[16.84086418 -4.31735420]
[23.92244720 -1.51663303]
[27.29821968 7.29671574]
[37.09952927 18.65164185]
[46.90083694 30.00656700]
[56.70214844 41.36149216]
[66.50345612 52.71641922]
[83.27830505 57.41827393]
[86.91500092 75.32854462]
[97.18320465 86.26306915]
[111.12985229 91.78494263]
[126.10025024 90.84308624]
[141.07064819 89.90122223]
[149.72946167 86.14674377]
[156.68521118 89.24678040]
[171.68193054 88.93264771]
[186.67863464 88.61850739]
[202.38768005 82.24178314]
[212.86389160 95.57164764]
[202.95506287 109.32852173]
[186.99278259 103.61521912]
[171.99606323 103.92935181]
[156.99935913 104.24349213]
[142.01251221 104.87162781]
[127.04211426 105.81348419]
[112.07170868 106.75534058]
[102.27040100 118.11026764]
[103.52556610 133.05766296]
[104.78073883 148.00505066]
[106.03590393 162.95243835]
[107.29106903 177.89984131]
[108.54624176 192.84722900]
[109.80140686 207.79461670]
[111.05657196 222.74201965]
[112.31174469 237.68940735]
[119.66226196 252.96704102]
[107.01650238 264.25958252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[9 64]
[10 47]
[11 46]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 38]
[20 37]
[21 35]
[22 34]
[23 33]
[24 32]
[48 63]
[49 62]
[50 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
