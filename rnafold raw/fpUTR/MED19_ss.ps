%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUUGAAAAAAGGUAGGCGGUGCCUGAGGCAUCCAAUGACAAGCGGCUCCUUGAGAAAGGGCGGGGGGGUACUCCUUGAAAGCAUUGUCCA\
) } def
/len { sequence length } bind def

/coor [
[-7.41312885 178.37522888]
[-11.08186054 185.79859924]
[-15.79160976 192.60549927]
[-21.44107056 198.65109253]
[-27.90895081 203.80686951]
[-35.05657578 207.96339417]
[-42.73085785 211.03269958]
[-50.76758194 212.95002747]
[-58.99491119 213.67532349]
[-67.23707581 213.19395447]
[-75.31810760 211.51707458]
[-83.06561279 208.68139648]
[-90.31443787 204.74827576]
[-96.91020966 199.80249023]
[-102.71259308 193.95037842]
[-107.59831238 187.31752014]
[-111.46373749 180.04608154]
[-114.22709656 172.29179382]
[-115.83021545 164.22052002]
[-116.23971558 156.00482178]
[-115.44774628 147.82017517]
[-129.77427673 143.37603760]
[-144.10081482 138.93191528]
[-158.42735291 134.48777771]
[-172.75389099 130.04364014]
[-187.08042908 125.59951019]
[-203.99980164 126.68163300]
[-209.72338867 110.72303009]
[-195.97291565 100.80535126]
[-182.63629150 111.27297211]
[-168.30975342 115.71710205]
[-153.98321533 120.16123962]
[-139.65667725 124.60536957]
[-125.33014679 129.04949951]
[-111.00360870 133.49363708]
[-95.76938629 113.64653015]
[-73.40116119 102.33869934]
[-48.29794312 101.83690643]
[-25.41522789 112.27854919]
[-9.28679085 131.63693237]
[4.88324499 126.71656799]
[19.05328178 121.79618835]
[33.22331619 116.87581635]
[47.39335251 111.95544434]
[61.47919464 106.79898071]
[75.47690582 101.40786743]
[83.97122955 76.69025421]
[113.15280151 70.81217194]
[121.64201355 58.44554901]
[123.99156189 49.40351105]
[130.62724304 45.81401443]
[139.52494812 33.73796463]
[148.42263794 21.66191292]
[157.32034302 9.58586311]
[158.60476685 -6.76290703]
[173.51994324 -13.57977581]
[186.72239685 -3.85213399]
[184.63059998 12.41305542]
[169.39639282 18.48355865]
[160.49868774 30.55961037]
[151.60099792 42.63566208]
[142.70329285 54.71171188]
[134.00863647 66.93475342]
[125.51943207 79.30137634]
[132.05992126 92.80033875]
[147.02642822 93.80222321]
[161.99293518 94.80411530]
[176.95944214 95.80600739]
[191.92593384 96.80789185]
[206.39732361 89.09354401]
[220.16879272 97.99739075]
[219.07345581 114.35991669]
[204.23808289 121.34876251]
[190.92405701 111.77439880]
[175.95755005 110.77250671]
[160.99104309 109.77062225]
[146.02453613 108.76873016]
[131.05804443 107.76683807]
[125.13746643 117.75000000]
[116.33656311 124.60050201]
[106.07503510 127.62895966]
[95.86894989 126.72979736]
[87.10836029 122.35440826]
[80.86801910 115.40557098]
[66.87030792 120.79669189]
[59.81592941 126.92160034]
[52.31372833 126.12548065]
[38.14369202 131.04585266]
[23.97365379 135.96623230]
[9.80361843 140.88659668]
[-4.36641836 145.80697632]
[-3.32387042 154.03375244]
[-3.49140239 162.32160950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[45 85]
[46 84]
[48 64]
[49 63]
[51 62]
[52 61]
[53 60]
[54 59]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
