%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCAUCCCGAGAAGCCAGGAAGCAGUGAGCCCAGGAGUCCUCGGCCAGCCCUGCCUGCCCACCAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[87.95064545 118.69934082]
[76.05034637 127.83075714]
[64.15004730 136.96217346]
[52.24974442 146.09359741]
[40.34944534 155.22502136]
[34.11120224 169.76445007]
[19.30381012 171.37390137]
[7.40350962 180.50532532]
[1.63114178 195.85498047]
[-14.59017754 198.26347351]
[-24.57334518 185.25315857]
[-18.04853630 170.20793152]
[-1.72791195 168.60502625]
[10.17238808 159.47360229]
[15.55944157 145.58732605]
[31.21802521 143.32472229]
[43.11832428 134.19329834]
[55.01862335 125.06188202]
[66.91892242 115.93045807]
[78.81922150 106.79903412]
[77.05777740 98.91073608]
[78.23030853 90.65456390]
[82.36390686 83.11821747]
[89.08474731 77.35716248]
[97.64640808 74.24809265]
[107.01110077 74.35923004]
[115.97518921 77.85622406]
[119.85747528 63.36733627]
[112.21560669 49.79384613]
[116.35919952 35.15535736]
[129.34654236 27.95365524]
[133.22882080 13.46476746]
[137.11111450 -1.02411950]
[133.20919800 -16.35662270]
[143.97692871 -26.64766312]
[147.85920715 -41.13655090]
[151.74148560 -55.62543869]
[150.00064087 -72.48976898]
[165.72399902 -78.83110046]
[176.17016602 -65.47766876]
[166.23037720 -51.74315262]
[162.34809875 -37.25426483]
[158.46580505 -22.76537704]
[162.64540100 -8.46921635]
[151.60000610 2.85816622]
[147.71771240 17.34705353]
[143.83543396 31.83594131]
[151.48194885 44.56647110]
[147.75115967 59.31556702]
[134.34635925 67.24961853]
[130.46408081 81.73851013]
[135.28567505 95.94245911]
[147.18597412 105.07388306]
[159.08627319 114.20530701]
[168.09748840 117.07608032]
[171.29492188 124.00379181]
[182.78559875 133.64559937]
[194.27626038 143.28741455]
[205.76692200 152.92922974]
[221.80993652 152.96900940]
[231.66819763 165.62579346]
[227.77931213 181.19036865]
[213.12649536 187.72293091]
[198.95013428 180.21226501]
[196.12512207 164.41989136]
[184.63444519 154.77807617]
[173.14378357 145.13627625]
[161.65312195 135.49446106]
[149.95484924 126.10560608]
[138.05455017 116.97418213]
[126.15425110 107.84275818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[7 14]
[8 13]
[27 51]
[28 50]
[31 47]
[32 46]
[33 45]
[35 43]
[36 42]
[37 41]
[52 71]
[53 70]
[54 69]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
