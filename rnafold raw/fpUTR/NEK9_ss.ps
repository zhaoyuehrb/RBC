%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAACUGUUUCCGGGUCGGGGGGCAGGAGCCACCAUCGAGCUUCGCGGGGUUGCUGGGCUGACGGAUCCGCGGGCCGGCAUCUGAAGCGAGCGGGACGCAGCGCGGCCAGGGCCUCCGGGCAUACGCAGGCUGGUCCCCAAGGCCCGCGGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[188.75996399 226.89276123]
[180.19725037 214.57691956]
[178.61437988 199.66067505]
[184.40165710 185.82205200]
[196.13206482 176.47338867]
[210.91191101 173.91976929]
[198.12229919 166.08229065]
[185.33270264 158.24481201]
[172.54310608 150.40733337]
[159.67716980 142.69578552]
[146.73616028 135.11093140]
[133.79513550 127.52606201]
[120.85411835 119.94120026]
[107.91310883 112.35634613]
[92.92466736 111.76744843]
[83.88462067 124.75159454]
[69.05664825 123.34426880]
[55.56042480 129.89041138]
[42.06420135 136.43653870]
[28.56797600 142.98268127]
[15.13666725 149.66101074]
[1.77156925 156.47085571]
[-11.52602959 163.41160583]
[-24.75484848 170.48254395]
[-37.98366928 177.55349731]
[-46.17932510 191.75784302]
[-62.57631302 191.49177551]
[-70.30681610 177.02902222]
[-61.41835785 163.24761963]
[-45.05461884 164.32467651]
[-31.82579994 157.25373840]
[-18.59698105 150.18278503]
[-14.15735722 144.22529602]
[-5.03828812 143.10575867]
[8.32680988 136.29589844]
[12.88254452 130.42674255]
[22.02183723 129.48646545]
[35.51806259 122.94032288]
[49.01428604 116.39418030]
[62.51050949 109.84804535]
[70.58522034 97.33212280]
[86.37853241 98.27122498]
[91.01378632 84.00537109]
[83.94283295 70.77655792]
[76.87188721 57.54773712]
[69.80093384 44.31891632]
[62.72998428 31.09009743]
[45.91956711 26.34018517]
[37.88059235 11.21195793]
[43.14044571 -4.73753357]
[35.81112671 -17.82497406]
[22.31730652 -26.08495903]
[22.84925461 -40.97006226]
[15.51993561 -54.05750275]
[8.19061661 -67.14494324]
[0.86129844 -80.23238373]
[-6.46801996 -93.31982422]
[-13.79733849 -106.40726471]
[-27.29116058 -114.66725159]
[-26.75921249 -129.55235291]
[-34.08853149 -142.63978577]
[-41.41785049 -155.72723389]
[-48.37809753 -161.72438049]
[-48.75970840 -169.14436340]
[-55.83066177 -182.37318420]
[-70.03499603 -190.56883240]
[-69.76894379 -206.96583557]
[-55.30618668 -214.69633484]
[-41.52477264 -205.80787659]
[-42.60184097 -189.44413757]
[-35.53089142 -176.21531677]
[-28.33040810 -163.05654907]
[-21.00109100 -149.96911621]
[-13.67177105 -136.88166809]
[-0.70219243 -129.55778503]
[-0.70989871 -113.73657990]
[6.61942005 -100.64913940]
[13.94873810 -87.56169891]
[21.27805710 -74.47425842]
[28.60737610 -61.38682175]
[35.93669510 -48.29938126]
[48.90627289 -40.97549820]
[48.89856720 -25.15429306]
[56.22788620 -12.06685162]
[69.02556610 -10.32767487]
[78.61692810 -1.38990378]
[81.33322144 11.63500977]
[75.95880127 24.01914597]
[83.02975464 37.24796677]
[90.10070038 50.47678375]
[97.17165375 63.70560455]
[104.24260712 76.93442535]
[115.49797058 99.41532898]
[128.43898010 107.00019073]
[141.38000488 114.58504486]
[154.32101440 122.16990662]
[167.26202393 129.75477600]
[176.29937744 131.40921021]
[180.38056946 137.61772156]
[193.17018127 145.45520020]
[205.95977783 153.29267883]
[218.74938965 161.13015747]
[230.29193115 161.80590820]
[236.52592468 169.96902466]
[250.49415588 175.43608093]
[264.46237183 180.90313721]
[278.43060303 186.37019348]
[292.39883423 191.83724976]
[306.36703491 197.30430603]
[324.47650146 194.10333252]
[334.92187500 208.17762756]
[348.99472046 213.36938477]
[363.06759644 218.56114197]
[377.14047241 223.75289917]
[391.21334839 228.94465637]
[405.28622437 234.13641357]
[419.50201416 227.76860046]
[433.69995117 233.23425293]
[439.68307495 246.82608032]
[453.75592041 252.01783752]
[467.82879639 257.20959473]
[473.07452393 256.30081177]
[477.66879272 257.41635132]
[480.94110107 259.95724487]
[482.56216431 263.14355469]
[496.30499268 269.15478516]
[509.62350464 261.19259644]
[525.07543945 262.61297607]
[536.71917725 272.86981201]
[540.07751465 288.01910400]
[533.85906982 302.23565674]
[520.45495605 310.05291748]
[505.01934814 308.46499634]
[493.48754883 298.08245850]
[490.29376221 282.89761353]
[476.55093384 276.88638306]
[462.63705444 271.28247070]
[448.56417847 266.09069824]
[434.49130249 260.89895630]
[421.11453247 267.34854126]
[406.76867676 262.28381348]
[400.09445190 248.20928955]
[386.02157593 243.01753235]
[371.94873047 237.82577515]
[357.87585449 232.63401794]
[343.80297852 227.44226074]
[329.73010254 222.25050354]
[318.58367920 227.03282166]
[306.79611206 222.78224182]
[300.89999390 211.27252197]
[286.93176270 205.80546570]
[272.96353149 200.33840942]
[258.99533081 194.87135315]
[245.02709961 189.40429688]
[231.05886841 183.93724060]
[237.94354248 197.26394653]
[237.56901550 212.25927734]
[230.02761841 225.22567749]
[217.17892456 232.96588135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 102]
[7 101]
[8 100]
[9 99]
[10 97]
[11 96]
[12 95]
[13 94]
[14 93]
[15 42]
[17 40]
[18 39]
[19 38]
[20 37]
[21 35]
[22 34]
[23 32]
[24 31]
[25 30]
[43 92]
[44 91]
[45 90]
[46 89]
[47 88]
[50 84]
[51 83]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[60 74]
[61 73]
[62 72]
[64 71]
[65 70]
[104 155]
[105 154]
[106 153]
[107 152]
[108 151]
[109 150]
[111 147]
[112 146]
[113 145]
[114 144]
[115 143]
[116 142]
[119 139]
[120 138]
[121 137]
[125 136]
[126 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
