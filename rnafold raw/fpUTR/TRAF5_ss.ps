%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCGCCGCCGCCGCCGGCCGCAGCCAGGAGCAGCAGCCGCGCCUGCAGACCGGCCUCGCGGAGCCCGCGCGCCGAGCCCCACA\
) } def
/len { sequence length } bind def

/coor [
[131.86744690 256.42117310]
[128.60600281 241.78002930]
[125.34454346 227.13890076]
[122.08309174 212.49775696]
[111.76361084 201.75729370]
[116.31522369 186.60496521]
[113.05377197 171.96382141]
[109.52545929 157.38468933]
[105.73146057 142.87243652]
[101.93745422 128.36018372]
[97.35434723 114.07749939]
[86.62120819 105.11695862]
[88.63541412 91.28096771]
[83.27694702 77.27072144]
[77.91848755 63.26048279]
[72.56002045 49.25024033]
[58.02430344 38.12665558]
[61.18255615 20.96784782]
[55.31598663 7.16265535]
[49.44941330 -6.64253759]
[43.58284378 -20.44773102]
[37.71627426 -34.25292206]
[21.39240265 -36.04217529]
[8.23231983 -45.70832062]
[1.71681845 -60.57908630]
[3.51119208 -76.62147522]
[13.04071140 -89.53543091]
[6.67386055 -103.11714935]
[0.30701002 -116.69887543]
[-6.05984068 -130.28059387]
[-18.92314148 -139.49179077]
[-17.31959152 -154.29981995]
[-23.68644142 -167.88154602]
[-38.84483337 -171.72306824]
[-47.94556808 -184.43960571]
[-46.69155884 -200.02684021]
[-35.67491150 -211.12492371]
[-20.09734726 -212.49368286]
[-7.31411743 -203.48684692]
[-3.36107254 -188.35716248]
[-10.10471916 -174.24839783]
[-3.73786831 -160.66667175]
[8.67003250 -152.42694092]
[7.52188301 -136.64744568]
[13.88873386 -123.06572723]
[20.25558472 -109.48400116]
[26.62243462 -95.90227509]
[40.40209198 -95.61334229]
[52.74914551 -89.34005737]
[61.18841553 -78.27512360]
[64.00000763 -64.57811737]
[60.56959534 -50.95412064]
[51.52146530 -40.11949539]
[57.38803482 -26.31430054]
[63.25460815 -12.50910854]
[69.12117767 1.29608452]
[74.98774719 15.10127735]
[86.20282745 20.01479530]
[91.13243103 31.66281128]
[86.57026672 43.89177704]
[91.92872620 57.90201950]
[97.28719330 71.91226196]
[102.64565277 85.92250061]
[113.37879181 94.88304138]
[111.36458588 108.71903229]
[115.81289673 112.29182434]
[118.04843903 116.80883026]
[118.10046387 121.19551849]
[116.44971466 124.56617737]
[120.24371338 139.07843018]
[124.03771210 153.59069824]
[129.35327148 161.31591797]
[127.69490814 168.70236206]
[130.95635986 183.34350586]
[141.50912476 195.13119507]
[136.72422791 209.23631287]
[139.98568726 223.87744141]
[143.24713135 238.51858521]
[146.50859070 253.15971375]
[160.46907043 260.20523071]
[166.58711243 274.59631348]
[161.97396851 289.53796387]
[148.80783081 297.97518921]
[133.30532837 295.92416382]
[122.78629303 284.35336304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[4 76]
[6 74]
[7 73]
[8 71]
[9 70]
[10 69]
[11 65]
[13 63]
[14 62]
[15 61]
[16 60]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[27 47]
[28 46]
[29 45]
[30 44]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
