%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUGUUGUUACGGGUAACGGAAGUGUGGCGGCGUUGGGUUGAGCGGGCUUUUUGGAAGUUUGUGGCGGAGUUCUGUGAUAUGAGCAACA\
) } def
/len { sequence length } bind def

/coor [
[59.60470581 483.66842651]
[43.29343414 481.97302246]
[36.85403442 466.89102173]
[46.91081238 453.93753052]
[48.46157074 439.01791382]
[50.01232910 424.09826660]
[51.56308746 409.17864990]
[53.11384583 394.25903320]
[54.66460419 379.33941650]
[56.21536255 364.41979980]
[53.72200775 357.28964233]
[58.08583069 349.01510620]
[60.15063477 334.15789795]
[48.31561661 325.11367798]
[42.55835724 311.26773071]
[44.51750946 296.30017090]
[53.76620865 284.24371338]
[67.90006256 278.39721680]
[69.96485901 263.54000854]
[72.02966309 248.68280029]
[74.09446716 233.82559204]
[76.15927124 218.96838379]
[78.22407532 204.11117554]
[72.31238556 190.44000244]
[81.87567139 177.83625793]
[75.96398163 164.16508484]
[85.52726746 151.56135559]
[87.59206390 136.70414734]
[81.68037415 123.03295898]
[91.24365997 110.42922974]
[87.40307617 95.92922974]
[78.25454712 84.04207611]
[69.10601807 72.15493011]
[53.44687271 68.66626740]
[46.54087448 54.18570328]
[53.68571472 39.82148361]
[69.40048218 36.59260941]
[81.63014984 46.97599411]
[80.99317169 63.00639725]
[90.14170074 74.89354706]
[99.29022980 86.78070068]
[106.78575897 86.52182770]
[121.77682495 86.00408936]
[129.27235413 85.74521637]
[137.57897949 73.25521851]
[145.88560486 60.76522446]
[154.19223022 48.27523041]
[162.49884033 35.78523254]
[170.80546570 23.29523659]
[179.11209106 10.80523968]
[187.41871643 -1.68475664]
[195.72534180 -14.17475319]
[199.46206665 -30.71177864]
[216.38725281 -31.69898415]
[222.02124023 -15.70853233]
[208.21533203 -5.86812973]
[199.90870667 6.62186670]
[191.60209656 19.11186218]
[183.29547119 31.60186005]
[174.98884583 44.09185410]
[166.68222046 56.58185196]
[158.37559509 69.07184601]
[150.06896973 81.56184387]
[141.76234436 94.05184174]
[106.10086823 112.49403381]
[111.86487579 127.22789764]
[102.44927216 138.76895142]
[100.38446808 153.62615967]
[106.14847565 168.36001587]
[96.73287201 179.90106201]
[102.49687958 194.63493347]
[93.08127594 206.17597961]
[91.01647949 221.03318787]
[88.95167542 235.89039612]
[86.88687134 250.74760437]
[84.82206726 265.60479736]
[82.75726318 280.46200562]
[94.76122284 289.94107056]
[100.37179565 304.06262207]
[98.17525482 318.99719238]
[88.86058044 330.74847412]
[75.00784302 336.22271729]
[72.94303894 351.07992554]
[71.13498688 365.97055054]
[69.58422852 380.89016724]
[68.03347015 395.80978394]
[66.48271179 410.72940063]
[64.93195343 425.64904785]
[63.38119125 440.56866455]
[61.83043289 455.48828125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 90]
[5 89]
[6 88]
[7 87]
[8 86]
[9 85]
[10 84]
[12 83]
[13 82]
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[23 72]
[25 70]
[27 68]
[28 67]
[30 65]
[31 41]
[32 40]
[33 39]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
