%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGGGCCGCCUUCGUUUUUGUCGCGCGAGGUUUUGGUUUGUGAGGAUCGGCGAGUGGCGCCCACCAUCUCUGCUUGCUGAAAAGCUGCAGAGGCCGCCAGGAGCCCACGCACCUGAGACUUUUACCUUUACCCAGAAAGGAAUAAAAGAGGUCAG\
) } def
/len { sequence length } bind def

/coor [
[68.43272400 180.74281311]
[54.94087219 187.29795837]
[39.94484329 186.95275879]
[26.76890755 179.78375244]
[18.33386040 167.38012695]
[16.50955582 152.49147034]
[21.70039558 138.41827393]
[32.75488663 128.28065491]
[17.84118652 129.88739014]
[2.92748809 131.49412537]
[-11.98621082 133.10086060]
[-20.23205566 137.14953613]
[-27.20617294 134.59051514]
[-42.14838409 135.90596008]
[-57.09059143 137.22138977]
[-72.01925659 138.68254089]
[-86.93295288 140.28927612]
[-101.84665680 141.89601135]
[-116.76035309 143.50274658]
[-131.67405701 145.10948181]
[-146.58775330 146.71621704]
[-152.95104980 155.61592102]
[-162.96659851 159.43887329]
[-173.21176147 157.13885498]
[-180.32699585 149.71925354]
[-195.29203796 150.74288940]
[-210.25706482 151.76652527]
[-225.26458740 162.39643860]
[-240.72090149 154.13119507]
[-255.66310120 155.44664001]
[-270.60531616 156.76206970]
[-285.54751587 158.07749939]
[-300.48974609 159.39294434]
[-315.43194580 160.70837402]
[-324.24548340 173.62562561]
[-339.31399536 177.80580139]
[-353.52261353 171.27513123]
[-360.16241455 157.11720276]
[-356.09832764 142.01696777]
[-343.24929810 133.10427856]
[-327.68218994 134.58744812]
[-316.74737549 145.76615906]
[-301.80517578 144.45072937]
[-286.86294556 143.13529968]
[-271.92074585 141.81985474]
[-256.97854614 140.50442505]
[-242.03633118 139.18899536]
[-234.00053406 130.10499573]
[-221.52761841 128.91377258]
[-211.28070068 136.80149841]
[-196.31567383 135.77786255]
[-181.35063171 134.75422668]
[-166.19238281 122.79688263]
[-148.19448853 131.80252075]
[-133.28079224 130.19578552]
[-118.36708832 128.58905029]
[-103.45339203 126.98231506]
[-88.53968811 125.37557983]
[-73.62599182 123.76885223]
[-67.28040314 119.90616608]
[-58.40602875 122.27918243]
[-43.46381760 120.96374512]
[-28.52160835 119.64831543]
[-13.59294415 118.18715668]
[1.32075429 116.58042145]
[16.23445320 114.97369385]
[31.14815140 113.36695862]
[45.80393982 110.17197418]
[60.03317261 105.42551422]
[74.26240540 100.67905426]
[76.19792938 71.54164886]
[109.82103729 52.55213165]
[112.44177246 37.78284836]
[115.06250763 23.01356316]
[117.68324280 8.24427986]
[120.30397797 -6.52500439]
[122.92471313 -21.29428864]
[125.54544830 -36.06357193]
[118.80071259 -47.09642792]
[121.32112885 -59.36998367]
[131.21362305 -66.38651276]
[134.12202454 -81.10185242]
[137.03044128 -95.81719208]
[131.23089600 -111.15659332]
[141.82344055 -123.67578125]
[157.91137695 -120.49608612]
[162.94480896 -104.88850403]
[151.74577332 -92.90877533]
[148.83737183 -78.19344330]
[145.92895508 -63.47810364]
[152.49102783 -47.22538757]
[140.31472778 -33.44283676]
[137.69400024 -18.67355347]
[135.07325745 -3.90426946]
[132.45252991 10.86501503]
[129.83178711 25.63429832]
[127.21105957 40.40358353]
[124.59032440 55.17286682]
[130.36170959 59.96256256]
[139.94126892 48.41995239]
[151.48373413 57.99969864]
[141.90446472 69.54195404]
[147.67584229 74.33164978]
[161.70906067 69.03363037]
[175.74226379 63.73561478]
[189.77548218 58.43759918]
[199.95336914 46.32475281]
[214.59315491 49.06808090]
[228.62637329 43.77006531]
[238.59272766 30.74685860]
[254.81713867 33.13438797]
[260.60934448 48.47657013]
[250.01078796 60.99068069]
[233.92439270 57.80327606]
[219.89117432 63.10129166]
[210.71702576 74.83518982]
[195.07348633 72.47080994]
[181.04028320 77.76882935]
[167.00706482 83.06684113]
[152.97386169 88.36486053]
[151.73559570 95.76193237]
[163.30946350 105.30371094]
[149.25907898 110.55608368]
[148.02082825 117.95315552]
[159.56358337 127.53254700]
[171.10633850 137.11193848]
[182.64910889 146.69132996]
[194.19186401 156.27072144]
[205.73461914 165.85011292]
[217.46209717 175.20245361]
[229.36981201 184.32420349]
[241.27752686 193.44593811]
[253.18525696 202.56768799]
[265.09298706 211.68942261]
[280.72549438 209.36561584]
[293.37258911 218.84327698]
[295.53100586 234.49948120]
[285.92016602 247.04568481]
[270.24200439 249.03845215]
[257.79812622 239.29548645]
[255.97123718 223.59715271]
[244.06350708 214.47540283]
[232.15579224 205.35366821]
[220.24806213 196.23191833]
[208.34034729 187.11018372]
[203.52555847 186.84835815]
[198.83689880 183.52543640]
[196.15522766 177.39286804]
[184.61247253 167.81347656]
[173.06971741 158.23408508]
[161.52694702 148.65469360]
[149.98419189 139.07530212]
[138.44143677 129.49591064]
[99.31504059 137.09376526]
[79.00886536 114.90829468]
[64.77963257 119.65475464]
[50.55039978 124.40121460]
[64.82212067 129.01834106]
[75.39923096 139.65435791]
[79.93701935 153.95150757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 67]
[9 66]
[10 65]
[11 64]
[13 63]
[14 62]
[15 61]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[25 52]
[26 51]
[27 50]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[68 157]
[69 156]
[70 155]
[72 98]
[73 97]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[81 90]
[82 89]
[83 88]
[103 120]
[104 119]
[105 118]
[106 117]
[108 115]
[109 114]
[124 153]
[125 152]
[126 151]
[127 150]
[128 149]
[129 148]
[130 145]
[131 144]
[132 143]
[133 142]
[134 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
