%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUGAGUAGCUGCUCCGGGAGCUGUGGUGCCCUCUCCUUCUCCCUUUGGCUCCUCUCCUGCUGCCUUACAGUGCCCCCAGAGCCGGCUAGGGGCAUGGACUUCACCUCCUGGUCCUCUCUUCCUCAGGU\
) } def
/len { sequence length } bind def

/coor [
[93.79878235 470.08297729]
[86.17806244 455.56207275]
[95.17066193 441.84838867]
[95.52763367 426.85263062]
[95.88459778 411.85687256]
[96.24156189 396.86111450]
[96.59852600 381.86538696]
[96.95549011 366.86962891]
[87.71039581 352.00231934]
[97.29709625 336.33340454]
[97.29709625 321.33340454]
[84.92071533 310.01153564]
[84.50690460 292.90628052]
[96.79508209 280.52127075]
[85.87169647 270.46069336]
[85.29606628 255.25796509]
[95.92259216 243.86871338]
[95.56562042 228.87297058]
[95.20865631 213.87721252]
[94.85169220 198.88146973]
[94.49472809 183.88571167]
[94.13776398 168.88996887]
[93.78079987 153.89421082]
[85.74280548 141.35467529]
[93.14950562 127.37427521]
[92.79254150 112.37852478]
[85.68011475 100.34087372]
[92.21170807 87.97843933]
[91.85474396 72.98268890]
[91.49777985 57.98693466]
[83.43425751 44.37480164]
[90.86648560 31.46700478]
[78.26701355 22.60362625]
[73.35984039 8.18929100]
[77.82844543 -6.18066311]
[89.75899506 -15.05760384]
[89.40203094 -30.05335617]
[89.04505920 -45.04910660]
[88.68809509 -60.04486084]
[88.33113098 -75.04061127]
[78.20318604 -81.48499298]
[72.54216003 -91.93390656]
[72.67266846 -103.69658661]
[78.44471741 -113.80800629]
[88.30097961 -119.77626801]
[88.65794373 -134.77201843]
[86.05130768 -139.51982117]
[85.63732147 -144.30535889]
[87.04671478 -148.26412964]
[89.61358643 -150.81434631]
[91.03942871 -165.74642944]
[92.46527100 -180.67851257]
[93.89110565 -195.61058044]
[95.31694794 -210.54266357]
[81.66994476 -217.09892273]
[71.10928345 -227.90838623]
[64.89577484 -241.65293884]
[63.76174927 -256.66574097]
[67.82483673 -271.13339233]
[76.57606506 -283.31494141]
[88.94354248 -291.75143433]
[103.42372131 -295.44061279]
[104.84956360 -310.37268066]
[106.27539825 -325.30474854]
[107.70124054 -340.23684692]
[98.63666534 -353.47363281]
[103.47152710 -368.77081299]
[118.49694061 -374.39367676]
[132.18669128 -366.02886963]
[134.03916931 -350.09310913]
[122.63332367 -338.81100464]
[121.20748138 -323.87890625]
[119.78163910 -308.94683838]
[118.35579681 -294.01477051]
[131.87611389 -287.65188599]
[142.42347717 -277.02728271]
[148.71118164 -263.40966797]
[149.96282959 -248.43452454]
[146.00811768 -233.90765381]
[137.30570984 -221.58740234]
[124.89019775 -212.97189331]
[110.24903107 -209.11682129]
[108.82318878 -194.18473816]
[107.39734650 -179.25267029]
[105.97150421 -164.32058716]
[104.54566193 -149.38850403]
[103.65369415 -134.41505432]
[103.29673004 -119.41930389]
[116.69662476 -107.05157471]
[116.90339661 -88.50094604]
[103.32688141 -75.39757538]
[103.68384552 -60.40182495]
[104.04081726 -45.40607452]
[104.39778137 -30.41032219]
[104.75474548 -15.41456890]
[117.09416199 -7.11536169]
[122.24145508 7.02569151]
[118.02570343 21.65719414]
[105.86223602 31.11003876]
[113.90022278 43.64957428]
[106.49353027 57.62997055]
[106.85049438 72.62572479]
[107.20745850 87.62147522]
[114.31988525 99.65912628]
[107.78829193 112.02156067]
[108.14525604 127.01731110]
[116.20877838 140.62944031]
[108.77655029 153.53724670]
[109.13351440 168.53298950]
[109.49047852 183.52874756]
[109.84744263 198.52450562]
[110.20441437 213.52024841]
[110.56137848 228.51600647]
[110.91834259 243.51174927]
[122.07475281 254.38246155]
[122.22314453 269.59536743]
[111.79083252 280.16430664]
[122.58362579 288.31915283]
[126.62003326 301.02548218]
[122.63047028 313.54187012]
[112.29709625 321.33340454]
[112.29709625 336.33340454]
[120.88120270 346.04525757]
[120.51740265 358.59957886]
[111.95124054 367.22659302]
[111.59427643 382.22235107]
[111.23731232 397.21807861]
[110.88034821 412.21383667]
[110.52338409 427.20959473]
[110.16641998 442.20535278]
[118.49630737 456.33139038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 130]
[4 129]
[5 128]
[6 127]
[7 126]
[8 125]
[10 122]
[11 121]
[14 117]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[23 108]
[25 106]
[26 105]
[28 103]
[29 102]
[30 101]
[32 99]
[36 95]
[37 94]
[38 93]
[39 92]
[40 91]
[45 88]
[46 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[62 74]
[63 73]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
