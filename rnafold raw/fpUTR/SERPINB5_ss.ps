%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGGCGUGGCGGUGCUGCCCAGGUGAGCCACCGCUGCUUCUGCCCAGACACGGUCGCCUCCACAUCCAGGUCUUUGUGCUCCUCGCUUGCCUGUUCCUUUUCCACGCAUUUUCCAGGAUAACUGUGACUCCAGGCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[71.37673950 245.23249817]
[77.42308044 229.39337158]
[77.42308044 214.39337158]
[77.42308044 199.39337158]
[77.42308044 184.39337158]
[77.42308044 169.39337158]
[77.42308044 154.39337158]
[66.30535889 144.32379150]
[51.37859726 145.80430603]
[36.45183945 147.28480530]
[21.52508354 148.76531982]
[6.59832525 150.24581909]
[-6.37078953 159.30741882]
[-19.79959106 152.86408997]
[-34.72634888 154.34458923]
[-49.65310669 155.82510376]
[-64.56269836 157.46946716]
[-79.45333862 159.27752686]
[-94.34397125 161.08557129]
[-104.08272552 173.24264526]
[-119.20970154 174.86413574]
[-130.73959351 165.50480652]
[-145.63023376 167.31285095]
[-160.52085876 169.12091064]
[-175.41149902 170.92895508]
[-188.17842102 180.27326965]
[-201.74552917 174.12648010]
[-216.61540222 176.09799194]
[-231.46272278 178.23271179]
[-246.31004333 180.36743164]
[-258.85913086 190.92451477]
[-274.18206787 185.08160400]
[-276.51593018 168.84936523]
[-263.45980835 158.92616272]
[-248.44476318 165.52011108]
[-233.59744263 163.38539124]
[-218.75012207 161.25067139]
[-212.52890015 157.15365601]
[-203.55357361 159.23585510]
[-191.85173035 150.02085876]
[-177.21954346 156.03831482]
[-162.32890320 154.23027039]
[-147.43827820 152.42222595]
[-132.54763794 150.61416626]
[-123.59262848 138.76751709]
[-108.51716614 136.72177124]
[-96.15201569 146.19494629]
[-81.26138306 144.38688660]
[-66.37075043 142.57884216]
[-60.06103516 138.61949158]
[-51.13361359 140.89834595]
[-36.20685577 139.41783142]
[-21.28009605 137.93733215]
[-9.37864304 128.98162842]
[5.11781979 135.31906128]
[20.04457855 133.83856201]
[34.97133636 132.35804749]
[49.89809418 130.87754822]
[64.82485199 129.39703369]
[59.45728302 119.28904724]
[56.85467911 108.38728333]
[57.06903076 97.41785431]
[59.96861267 87.08188629]
[65.25375366 78.01078033]
[72.48314667 70.72762299]
[81.10851288 65.61734009]
[90.51505280 62.90713120]
[100.06467438 62.65813828]
[109.13909912 64.76857758]
[115.81649780 51.33681107]
[122.49389648 37.90504074]
[129.17129517 24.47327614]
[135.84869385 11.04150867]
[129.90444946 0.63953060]
[129.75790405 -11.21981239]
[135.32908630 -21.55357933]
[145.11454773 -27.81920242]
[156.59111023 -28.53978920]
[163.85203552 -41.66529465]
[171.11297607 -54.79079819]
[168.07740784 -70.54405212]
[178.61027527 -82.64522552]
[194.63163757 -81.81134033]
[203.85128784 -68.68207550]
[199.19670105 -53.32908249]
[184.23847961 -47.52986526]
[176.97753906 -34.40436172]
[169.71661377 -21.27885628]
[175.85775757 -4.09332037]
[167.41256714 12.44197369]
[149.28045654 17.71890640]
[142.60305786 31.15067291]
[135.92565918 44.58243942]
[129.24826050 58.01420593]
[122.57086182 71.44597626]
[131.45429993 81.68596649]
[135.97438049 94.46648407]
[150.95176697 95.28990936]
[165.92915344 96.11334229]
[180.90653992 96.93677521]
[186.84228516 82.98891449]
[197.19276428 71.91448212]
[210.70814514 65.05075836]
[225.75633240 63.22658157]
[240.52021790 66.66222382]
[253.21696472 74.94281769]
[262.31341553 87.06843567]
[266.71109009 101.57485962]
[265.87896729 116.71035767]
[259.91751099 130.64724731]
[249.54663086 141.70259094]
[236.01864624 148.54139709]
[220.96711731 150.33784485]
[206.20957947 146.87500000]
[193.52810669 138.57101440]
[184.45404053 126.42865753]
[180.08309937 111.91415405]
[165.10571289 111.09072113]
[150.12834167 110.26729584]
[135.15095520 109.44386292]
[134.35220337 117.94862366]
[131.43724060 126.50522614]
[126.35911560 134.57997131]
[119.20579529 141.62467957]
[127.59065247 154.06230164]
[135.97550964 166.49990845]
[151.53462219 169.27290344]
[160.50712585 182.28326416]
[157.56979370 197.81219482]
[144.46528625 206.64663696]
[128.96827698 203.54528809]
[120.27288055 190.34811401]
[123.53790283 174.88476562]
[115.15304565 162.44715881]
[106.76818848 150.00953674]
[92.42308044 154.39337158]
[92.42308044 169.39337158]
[92.42308044 184.39337158]
[92.42308044 199.39337158]
[92.42308044 214.39337158]
[92.42308044 229.39337158]
[98.46942139 245.23249817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 141]
[3 140]
[4 139]
[5 138]
[6 137]
[7 136]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[14 53]
[15 52]
[16 51]
[17 49]
[18 48]
[19 47]
[22 44]
[23 43]
[24 42]
[25 41]
[27 39]
[28 37]
[29 36]
[30 35]
[69 95]
[70 94]
[71 93]
[72 92]
[73 91]
[78 88]
[79 87]
[80 86]
[97 120]
[98 119]
[99 118]
[100 117]
[124 135]
[125 134]
[126 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
