%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCCUCCCCGCGCUCCGCAGCUGGGAAUCACGGGACUAGCCUUCGUUUCCUUGGCAACGCAGUACACAAGUGCUAGCCCUAGCAGCUCGCG\
) } def
/len { sequence length } bind def

/coor [
[88.31788635 172.43345642]
[75.58608246 180.36448669]
[61.68043518 174.74015808]
[58.04221344 160.18806458]
[67.66474152 148.68141174]
[76.97649384 136.92167664]
[70.02365875 134.10954285]
[56.21391296 139.96539307]
[42.40416718 145.82122803]
[28.59441757 151.67706299]
[18.90984917 164.18785095]
[4.17192888 162.03309631]
[-9.63781929 167.88893127]
[-13.00268173 183.03678894]
[-24.65086555 193.28858948]
[-40.10340500 194.70231628]
[-53.41848373 186.73435974]
[-59.47618484 172.44856262]
[-55.94719696 157.33810425]
[-44.18848419 147.21327209]
[-28.72151756 145.96725464]
[-15.49365902 154.07917786]
[-1.68391037 148.22334290]
[7.01289225 136.13140869]
[22.73857880 137.86730957]
[36.54832458 132.01147461]
[50.35807419 126.15563965]
[64.16782379 120.29979706]
[60.46547699 103.56270599]
[63.92601776 87.41380310]
[73.41706085 74.67028046]
[86.80265808 67.33489990]
[101.40330505 66.28694916]
[114.52597046 71.20200348]
[124.21038818 59.74721527]
[133.89480591 48.29243469]
[137.13763428 39.53098679]
[144.09928894 36.62372208]
[154.16105652 25.49894142]
[164.22282410 14.37415886]
[174.28459167 3.24937749]
[184.34635925 -7.87540436]
[194.22084045 -19.16676331]
[203.90525818 -30.62154579]
[213.58967590 -42.07632828]
[216.83248901 -50.83777618]
[223.79414368 -53.74504089]
[233.85592651 -64.86981964]
[230.01239014 -78.22560120]
[233.29579163 -91.61788940]
[242.73083496 -101.52356720]
[255.73878479 -105.39235687]
[268.84164429 -102.30286407]
[279.26953125 -113.08522034]
[289.69741821 -123.86757660]
[289.18276978 -139.66348267]
[300.04907227 -151.13951111]
[315.84954834 -151.48712158]
[327.21005249 -140.50010681]
[327.39059448 -124.69684601]
[316.28405762 -113.45314026]
[300.47979736 -113.43968964]
[290.05191040 -102.65733337]
[279.62402344 -91.87497711]
[283.00225830 -75.90603638]
[276.19494629 -60.88970184]
[261.67071533 -52.74470901]
[244.98069763 -54.80805206]
[234.91893005 -43.68326950]
[225.04446411 -32.39191055]
[215.36004639 -20.93712807]
[205.67562866 -9.48234558]
[203.72219849 -2.19530559]
[195.47114563 2.18636680]
[185.40937805 13.31114864]
[175.34761047 24.43593025]
[165.28582764 35.56071091]
[155.22406006 46.68549347]
[145.34959412 57.97685242]
[135.66517639 69.43163300]
[125.98075867 80.88642120]
[135.22988892 100.18295288]
[130.53868103 122.95939636]
[111.64475250 139.50222778]
[117.50058746 153.31198120]
[131.77423096 160.63610840]
[134.80610657 176.39006042]
[124.27041626 188.48876953]
[108.24924469 187.65113831]
[99.03266144 174.51972961]
[103.69084167 159.16781616]
[97.83499908 145.35807800]
[90.88216400 142.54594421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 28]
[8 27]
[9 26]
[10 25]
[12 23]
[13 22]
[34 81]
[35 80]
[36 79]
[38 78]
[39 77]
[40 76]
[41 75]
[42 74]
[43 72]
[44 71]
[45 70]
[47 69]
[48 68]
[53 64]
[54 63]
[55 62]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
