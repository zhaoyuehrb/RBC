%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGGUCAAAUGCGCGCCUCGGACCCUAGUGCGCGUGCGCGCUGGUGGCUCCGCCCCUUUGGAGCUACUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[166.24282837 256.23690796]
[151.60461426 259.51144409]
[136.66044617 258.21844482]
[122.80221558 252.47831726]
[111.32064819 242.82566833]
[103.28514099 230.15954590]
[99.44410706 215.65966797]
[100.15529633 200.67652893]
[105.35247803 186.60566711]
[114.55158234 174.75759888]
[126.89582062 166.23587036]
[141.23545837 161.83418274]
[156.23565674 161.96261597]
[145.19979858 151.80339050]
[134.16394043 141.64416504]
[123.12808228 131.48493958]
[112.09222412 121.32572174]
[101.05636597 111.16649628]
[89.81290436 101.23751831]
[74.28160095 98.22268677]
[69.57023621 84.09284973]
[58.12397385 74.39836121]
[42.59267044 71.38353729]
[37.88130569 57.25369644]
[26.43504333 47.55920792]
[10.21066761 45.17139816]
[4.41873598 29.82911873]
[15.01749229 17.31518936]
[31.10384369 20.50287056]
[36.12953186 36.11294556]
[47.57579422 45.80743408]
[62.28838348 48.12885284]
[67.81846619 62.95210266]
[79.26472473 72.64659119]
[93.97731781 74.96800995]
[99.50739288 89.79125977]
[107.43927765 92.28358459]
[111.21559143 100.13063812]
[122.25144958 110.28986359]
[133.28730774 120.44908142]
[144.32316589 130.60830688]
[155.35902405 140.76753235]
[166.39488220 150.92675781]
[172.87168884 151.92198181]
[177.64282227 155.58580017]
[192.63000488 156.20567322]
[207.61720276 156.82556152]
[222.60438538 157.44543457]
[237.59156799 158.06530762]
[252.57875061 158.68518066]
[267.56594849 159.30505371]
[282.55313110 159.92492676]
[297.54031372 160.54479980]
[312.52749634 161.16467285]
[323.98388672 150.27767944]
[339.78070068 150.76379395]
[350.54595947 162.33464050]
[349.89285278 178.12542725]
[338.20883179 188.76776123]
[322.42584229 187.94773865]
[311.90762329 176.15185547]
[296.92044067 175.53198242]
[281.93325806 174.91210938]
[266.94607544 174.29223633]
[251.95887756 173.67236328]
[236.97169495 173.05249023]
[221.98451233 172.43261719]
[206.99732971 171.81274414]
[192.01013184 171.19287109]
[177.02294922 170.57299805]
[187.72006226 181.08830261]
[194.74745178 194.34031677]
[197.45059204 209.09474182]
[195.57772827 223.97737122]
[189.30329895 237.60203552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 36]
[21 34]
[22 33]
[24 31]
[25 30]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
