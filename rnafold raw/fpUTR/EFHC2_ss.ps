%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGUGGGGGCCAAACAACACGGCCGGGAGGCGCCGCUGCCUGCCGGGCCCUCUCUUCUGGGACCCUGGAUUUUCGGACACUGAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[110.80044556 118.23289490]
[100.59491730 120.29769897]
[91.09757996 117.26056671]
[79.60691833 126.90238190]
[68.11624908 136.54420471]
[56.62558365 146.18600464]
[55.09999847 161.68795776]
[43.30947876 171.30244446]
[28.54014206 169.75250244]
[27.41255951 185.51651001]
[15.41385365 195.80273438]
[-0.33735672 194.50856018]
[-10.49615765 182.40176392]
[-9.03551292 166.66511536]
[3.17800307 156.63488770]
[18.89832687 158.26182556]
[19.93659782 143.44772339]
[31.45241737 133.50587463]
[46.98376846 134.69534302]
[58.47443390 125.05352783]
[69.96510315 115.41172028]
[81.45577240 105.76990509]
[81.67745209 88.49656677]
[96.48612213 76.41275024]
[87.25120544 64.59258270]
[78.01628113 52.77242661]
[68.78135681 40.95226288]
[54.18804932 34.84113693]
[52.44943237 20.04835320]
[43.21451187 8.22819138]
[33.97958755 -3.59197021]
[24.74466705 -15.41213131]
[9.02960873 -17.08918381]
[-0.83160967 -29.43956375]
[1.01149714 -45.13601303]
[13.46544647 -54.86610413]
[29.14153099 -52.85714722]
[38.73941040 -40.30102158]
[36.56482697 -24.64705467]
[45.79975128 -12.82689285]
[55.03467178 -1.00673115]
[64.26959229 10.81342983]
[78.20236206 16.07909966]
[80.60151672 31.71734238]
[89.83644104 43.53750229]
[99.07136536 55.35766602]
[108.30628967 67.17782593]
[121.67138672 73.98768616]
[136.66224670 74.51117706]
[150.72404480 67.26020813]
[163.17353821 75.43697357]
[178.16439819 75.96046448]
[193.15525818 76.48395538]
[203.28741455 63.07170105]
[219.23637390 58.31073380]
[234.75248718 63.86300659]
[243.87570190 77.38853455]
[258.87570190 77.38853455]
[273.87570190 77.38853455]
[288.87570190 77.38853455]
[303.87570190 77.38853455]
[318.87570190 77.38853455]
[333.87570190 77.38853455]
[342.88711548 64.75627899]
[357.61322021 59.86528015]
[372.39147949 64.59623718]
[381.53939819 77.12999725]
[381.53939819 92.64707184]
[372.39147949 105.18083191]
[357.61322021 109.91178894]
[342.88711548 105.02079773]
[333.87570190 92.38853455]
[318.87570190 92.38853455]
[303.87570190 92.38853455]
[288.87570190 92.38853455]
[273.87570190 92.38853455]
[258.87570190 92.38853455]
[243.87570190 92.38853455]
[236.98132324 103.96165466]
[225.14654541 110.62163544]
[211.45802307 110.50704193]
[199.54827881 103.53983307]
[192.63175964 91.47481537]
[177.64089966 90.95132446]
[162.65003967 90.42783356]
[149.66049194 97.71624756]
[136.13874817 89.50203705]
[121.14788818 88.97854614]
[122.95506287 100.57512665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[6 19]
[9 16]
[24 47]
[25 46]
[26 45]
[27 44]
[29 42]
[30 41]
[31 40]
[32 39]
[48 88]
[49 87]
[51 85]
[52 84]
[53 83]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
