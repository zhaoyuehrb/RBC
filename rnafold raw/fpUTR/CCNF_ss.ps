%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCCUGCGCGAGGGCUACGCGCGCUCCGGCCGGGGCGCGGGCGCGCUCUCAGGCGGGCUCCGGCGGCAGCGACGCGAGCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[83.48136139 128.38110352]
[73.87084198 119.89018250]
[68.24523163 108.36584473]
[67.46250153 95.56564331]
[71.64200592 83.44171906]
[60.75835419 73.11960602]
[49.87470245 62.79748535]
[38.99104691 52.47536850]
[28.10739517 42.15325165]
[17.22374344 31.83113289]
[1.64881575 32.07480621]
[-9.24171257 21.45166969]
[-9.37803555 6.60185480]
[-20.26168823 -3.72026277]
[-31.14533997 -14.04238033]
[-42.02899170 -24.36449814]
[-52.91264343 -34.68661499]
[-63.79629898 -45.00873184]
[-81.16181946 -44.16830444]
[-93.59519196 -55.83668137]
[-93.84729767 -72.55110931]
[-109.31220245 -75.88986969]
[-113.72724152 -90.11508179]
[-124.96839142 -100.04666901]
[-136.20954895 -109.97825623]
[-147.45069885 -119.90984344]
[-158.69186401 -129.84143066]
[-169.93301392 -139.77302551]
[-181.17416382 -149.70460510]
[-192.41532898 -159.63619995]
[-208.58625793 -162.36256409]
[-214.05627441 -177.82254028]
[-203.19830322 -190.11222839]
[-187.18209839 -186.58905029]
[-182.48373413 -170.87734985]
[-171.24258423 -160.94577026]
[-160.00141907 -151.01417542]
[-148.76026917 -141.08259583]
[-137.51911926 -131.15100098]
[-126.27796173 -121.21941376]
[-115.03680420 -111.28782654]
[-103.79565430 -101.35623932]
[-89.13478851 -98.72785187]
[-83.91571045 -83.79226685]
[-71.16033173 -86.37466431]
[-59.09523773 -80.99498749]
[-52.29267120 -69.44301605]
[-53.47417831 -55.89238739]
[-42.59052658 -45.57026672]
[-31.70687485 -35.24814987]
[-20.82322311 -24.92603302]
[-9.93957043 -14.60391521]
[0.94408208 -4.28179741]
[15.78030109 -4.93156958]
[26.96491432 5.38148355]
[27.54586029 20.94748116]
[38.42951202 31.26959801]
[49.31316757 41.59171677]
[60.19681931 51.91383362]
[71.08046722 62.23595047]
[81.96412659 72.55806732]
[98.04997253 67.21967316]
[114.65526581 70.61334229]
[127.35667419 81.83506775]
[132.77078247 97.89559174]
[129.45535278 114.51669312]
[141.04000854 124.04537201]
[156.61311340 126.83627319]
[161.52743530 140.89682007]
[173.11207581 150.42550659]
[181.93576050 153.55871582]
[184.92967224 160.50065613]
[196.17082214 170.43223572]
[211.60714722 167.93147278]
[225.01298523 175.98240662]
[230.05848694 190.78366089]
[224.36135864 205.34651184]
[210.61157227 212.79483032]
[195.30137634 209.61175537]
[185.65977478 197.30023193]
[186.23922729 181.67338562]
[174.99807739 171.74180603]
[163.58338928 162.01014709]
[151.99874878 152.48147583]
[137.25425720 150.37211609]
[131.51132202 135.63002014]
[119.92667389 126.10134125]
[108.41020966 131.74304199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[21 44]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[66 87]
[67 86]
[69 84]
[70 83]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
