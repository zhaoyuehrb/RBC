%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCACGUGGGUCCCCCCGGUUCCGGCGCGGUUGAGGCCUUCGGUGGUGAACGAGUCUCCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[98.72548676 153.33554077]
[85.65251923 145.98045349]
[79.08193207 132.49610901]
[81.34550476 117.66788483]
[91.64085388 106.75754547]
[77.18563843 113.18851471]
[65.22657013 104.30989838]
[50.29055786 102.92587280]
[35.35454559 101.54184723]
[20.89933395 107.97282410]
[8.94026184 99.09420013]
[-5.99575043 97.71017456]
[-18.08660507 107.53102112]
[-33.21413040 105.91465759]
[-42.50229263 94.32734680]
[-57.43830490 92.94332123]
[-73.76775360 97.50241852]
[-82.66912079 83.07321167]
[-71.26795959 70.52531433]
[-56.05427933 78.00730896]
[-41.11826706 79.39133453]
[-29.85909271 69.70802307]
[-14.69213581 70.89884949]
[-4.61172533 82.77416229]
[10.32428741 84.15818787]
[23.71117592 77.62821960]
[36.73857117 86.60583496]
[51.67458344 87.98986053]
[66.61059570 89.37388611]
[79.99748230 82.84391785]
[93.02487946 91.82152557]
[107.96089172 90.43750000]
[122.38827515 86.33255768]
[136.81565857 82.22761536]
[151.24304199 78.12266541]
[165.57176208 73.68557739]
[179.79417419 68.91870880]
[194.01658630 64.15183258]
[208.23899841 59.38496399]
[213.29162598 54.28967285]
[219.27584839 52.99249268]
[223.99899292 54.90085602]
[238.60055542 51.46659851]
[253.20213318 48.03234100]
[259.08203125 33.67245102]
[272.29718018 25.53982353]
[287.76608276 26.76161957]
[299.54061890 36.86803436]
[303.09326172 51.97294617]
[297.05792236 66.26821136]
[283.75534058 74.25699615]
[268.30059814 72.86746216]
[256.63638306 62.63391113]
[242.03482056 66.06816864]
[227.43324280 69.50242615]
[213.00585938 73.60737610]
[198.78346252 78.37424469]
[184.56105042 83.14111328]
[170.33863831 87.90798950]
[164.81214905 93.20001221]
[155.34799194 92.55005646]
[140.92060852 96.65499878]
[126.49321747 100.75994110]
[112.06583405 104.86489105]
[124.19003296 113.69686890]
[129.14033508 127.85647583]
[125.15995789 142.31872559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 31]
[7 29]
[8 28]
[9 27]
[11 25]
[12 24]
[15 21]
[16 20]
[32 64]
[33 63]
[34 62]
[35 61]
[36 59]
[37 58]
[38 57]
[39 56]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
