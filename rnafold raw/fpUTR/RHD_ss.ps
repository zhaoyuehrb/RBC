%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUUGGAGAGAGGGGUGAUGCCUGGUGCUGGUGGAACCCCUGCACAGAGACGGACACAGG\
) } def
/len { sequence length } bind def

/coor [
[95.88398743 237.45610046]
[104.88845825 224.17832947]
[103.39494324 209.25286865]
[101.90142822 194.32740784]
[100.40790558 179.40194702]
[98.91439056 164.47648621]
[89.94831085 152.58283997]
[96.27310944 138.08085632]
[78.48709106 131.64231873]
[65.95861053 117.47071075]
[61.74951172 99.02943420]
[66.88845062 80.82535553]
[80.11952209 67.30736542]
[74.98921967 53.21197510]
[69.85891724 39.11658478]
[64.72861481 25.02119637]
[59.59831238 10.92580795]
[54.46800995 -3.16958165]
[40.42272568 -9.90513992]
[35.42066574 -24.27295303]
[41.92854691 -37.62147522]
[36.79824448 -51.71686554]
[31.66794205 -65.81225586]
[26.53763962 -79.90764618]
[11.78221893 -85.08563232]
[3.85177135 -98.56309509]
[6.49081039 -113.97638702]
[18.45326233 -124.04782104]
[34.09082413 -124.02197266]
[46.01991653 -113.91104889]
[48.60798645 -98.48912048]
[40.63302994 -85.03794861]
[45.76333237 -70.94255829]
[50.89363480 -56.84716797]
[56.02393723 -42.75177765]
[69.58953094 -36.70940018]
[74.99317932 -22.48775482]
[68.56340027 -8.29988384]
[73.69370270 5.79550552]
[78.82400513 19.89089394]
[83.95430756 33.98628235]
[89.08460999 48.08167267]
[94.21491241 62.17706299]
[105.63690186 62.15469360]
[116.55658722 65.50476074]
[126.00089264 71.92874146]
[133.12823486 80.85417938]
[137.30346680 91.48572540]
[138.15455627 102.87598419]
[135.60565186 114.00996399]
[129.88389587 123.89550018]
[121.49913788 131.65168762]
[111.19857025 136.58734131]
[120.27147675 149.54855347]
[113.83985138 162.98297119]
[115.33336639 177.90843201]
[116.82688904 192.83389282]
[118.32040405 207.75935364]
[119.81391907 222.68481445]
[131.27079773 233.91511536]
[129.49058533 249.85908508]
[115.83889008 258.28588867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[4 57]
[5 56]
[6 55]
[8 53]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[21 35]
[22 34]
[23 33]
[24 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
