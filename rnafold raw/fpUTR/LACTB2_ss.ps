%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGGACGCUACUCGCUAUCCCCGGCCUGUUGGCUUCUUCCGCGCUGGAGUAUCCAGAUAGGCGACACGCCGGCGGGCGGCUGAGGCGGGA\
) } def
/len { sequence length } bind def

/coor [
[66.27543640 285.00888062]
[60.77470398 299.17962646]
[50.26616669 310.16320801]
[36.35229492 316.28469849]
[21.15485191 316.61059570]
[6.99134207 311.09124756]
[-3.97840548 300.56826782]
[-10.08158302 286.64636230]
[-10.38750076 271.44848633]
[-4.84950733 257.29226685]
[5.68789244 246.33636475]
[19.61782265 240.25149536]
[34.81606674 239.96557617]
[40.26247787 225.98928833]
[45.70888519 212.01300049]
[51.15529251 198.03671265]
[56.60169983 184.06042480]
[62.04810715 170.08413696]
[61.53257751 162.55442810]
[67.92171478 155.73289490]
[73.83705139 141.94853210]
[68.09061432 128.25494385]
[73.89324951 114.19137573]
[88.29529572 108.25683594]
[86.83689880 94.35126495]
[97.92034149 85.82782745]
[103.83567810 72.04346466]
[109.75101471 58.25909424]
[115.66635132 44.47472763]
[121.58168793 30.69036102]
[127.49702454 16.90599442]
[133.41236877 3.12162685]
[139.32769775 -10.66273975]
[145.24304199 -24.44710732]
[151.15837097 -38.23147583]
[147.69950867 -57.94969940]
[163.28215027 -69.18793488]
[168.25341797 -83.34020233]
[163.36024475 -95.41947937]
[167.94532776 -107.18685913]
[178.99209595 -112.42443085]
[184.43849182 -126.40072632]
[176.22496033 -139.43313599]
[177.24827576 -154.62545776]
[186.90692139 -166.16558838]
[201.33609009 -169.76242065]
[206.78248596 -183.73870850]
[212.22889709 -197.71499634]
[217.67530823 -211.69129944]
[223.12171936 -225.66758728]
[223.23912048 -242.62112427]
[239.56260681 -247.20152283]
[248.48278809 -232.78393555]
[237.09800720 -220.22117615]
[231.65159607 -206.24488831]
[226.20518494 -192.26860046]
[220.75877380 -178.29231262]
[215.31237793 -164.31602478]
[223.50321960 -151.90440369]
[222.80674744 -136.87181091]
[213.28071594 -124.99291992]
[198.41477966 -120.95431519]
[192.96838379 -106.97802734]
[196.63310242 -89.90679169]
[182.40567017 -78.36893463]
[177.43441772 -64.21667480]
[182.76548767 -55.20556259]
[182.13061523 -44.53227615]
[175.49916077 -35.86356354]
[164.94274902 -32.31613541]
[159.02740479 -18.53176880]
[153.11207581 -4.74740219]
[147.19673157 9.03696442]
[141.28138733 22.82133102]
[135.36605835 36.60569763]
[129.45071411 50.39006805]
[123.53537750 64.17443085]
[117.62004089 77.95880127]
[111.70470428 91.74316406]
[113.16310120 105.64873505]
[102.07965851 114.17217255]
[107.70088196 128.69937134]
[101.50552368 142.59442139]
[87.62141418 147.86386108]
[81.70607758 161.64823914]
[76.02439880 175.53053284]
[70.57798767 189.50682068]
[65.13158417 203.48312378]
[59.68517303 217.45941162]
[54.23876572 231.43569946]
[48.79235840 245.41198730]
[59.78975296 255.90606689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 91]
[14 90]
[15 89]
[16 88]
[17 87]
[18 86]
[20 85]
[21 84]
[24 81]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[37 66]
[38 65]
[41 63]
[42 62]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
