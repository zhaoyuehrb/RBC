%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAGCCUUGGCGCUACGGAGGAGCCUAGGGCUAACCCUCAGCCAUACCUGGGGCUGGUCCUGGAGUUGCUACGCAGGGUUGUGGCAGCACUGACUGAAGGU\
) } def
/len { sequence length } bind def

/coor [
[136.50955200 361.13864136]
[140.70263672 346.58883667]
[149.39489746 334.19030762]
[161.64343262 325.28796387]
[157.22210693 310.95437622]
[146.07713318 301.07315063]
[149.40301514 285.60546875]
[144.98167419 271.27188110]
[140.56034851 256.93829346]
[127.31281281 250.22723389]
[122.62477112 235.75390625]
[129.75376892 221.90417480]
[125.33243561 207.57058716]
[120.91110992 193.23698425]
[109.76612091 183.35575867]
[113.09200287 167.88809204]
[108.67067719 153.55448914]
[97.52569580 143.67326355]
[100.85157776 128.20558167]
[96.43025208 113.87199402]
[86.31243134 104.22205353]
[89.23616028 90.54933167]
[84.81483459 76.21573639]
[73.35360718 65.30928040]
[76.99572754 50.86683655]
[72.57440186 36.53324127]
[68.15307617 22.19965172]
[63.51781845 7.93380356]
[58.66967392 -6.26110744]
[53.82152939 -20.45601845]
[48.97338486 -34.65092850]
[44.12524033 -48.84584045]
[39.27709579 -63.04074860]
[34.42895126 -77.23566437]
[29.58080673 -91.43057251]
[24.73266220 -105.62548065]
[12.95029354 -116.18419647]
[16.15873528 -130.72912598]
[11.31058979 -144.92404175]
[6.46244526 -159.11895752]
[0.63518620 -166.37068176]
[1.68850911 -173.81161499]
[-2.73281860 -188.14520264]
[-7.15414619 -202.47880554]
[-21.24231720 -209.64112854]
[-26.06012154 -224.69319153]
[-18.74924278 -238.70484924]
[-3.64709330 -243.36323547]
[10.28648758 -235.90463257]
[14.78495407 -220.75407410]
[7.17944574 -206.90013123]
[11.60077381 -192.56652832]
[16.02210045 -178.23294067]
[20.65735626 -163.96710205]
[25.50550079 -149.77218628]
[30.35364532 -135.57727051]
[41.78924179 -126.03388214]
[38.92757034 -110.47362518]
[43.77571869 -96.27871704]
[48.62386322 -82.08380890]
[53.47200775 -67.88889313]
[58.32015228 -53.69398499]
[63.16829681 -39.49907303]
[68.01644135 -25.30416298]
[72.86458588 -11.10925198]
[77.71273041 3.08565855]
[82.93856049 8.48637104]
[82.48666382 17.77832413]
[86.90799713 32.11191559]
[91.32932281 46.44550705]
[102.47430420 56.32673264]
[99.14842224 71.79441071]
[103.56974792 86.12800598]
[113.68756866 95.77794647]
[110.76383972 109.45066833]
[115.18516541 123.78426361]
[126.64639282 134.69071960]
[123.00427246 149.13316345]
[127.42559814 163.46675110]
[138.88682556 174.37321472]
[135.24470520 188.81565857]
[139.66603088 203.14924622]
[144.08735657 217.48284912]
[157.77943420 224.91012573]
[162.05911255 239.50941467]
[154.89395142 252.51695251]
[159.31527710 266.85055542]
[163.73660278 281.18414307]
[175.19783020 292.09060669]
[171.55569458 306.53305054]
[175.97703552 320.86663818]
[191.11212158 321.32226562]
[205.27833557 326.66989136]
[216.93902588 336.32943726]
[224.82933044 349.25314331]
[228.09335327 364.03909302]
[226.37704468 379.08346558]
[219.86659241 392.75433350]
[209.26818848 403.56878662]
[195.73146057 410.35375977]
[180.72477722 412.37326050]
[165.87596130 409.40823364]
[152.79570007 401.78030396]
[142.90283203 390.31689453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 91]
[5 90]
[7 88]
[8 87]
[9 86]
[12 83]
[13 82]
[14 81]
[16 79]
[17 78]
[19 76]
[20 75]
[22 73]
[23 72]
[25 70]
[26 69]
[27 68]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[38 56]
[39 55]
[40 54]
[42 53]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
