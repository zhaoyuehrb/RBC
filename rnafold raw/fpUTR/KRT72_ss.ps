%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAAGGGGCGAGCUGGGCCGAGAACGCAGCGGCUGUUUGCGCCCCUUCUGCCUCCCGCGCGGCCAGCACCGGUACUUGCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[96.10488892 128.34790039]
[85.69287109 124.78067017]
[77.39755249 117.54721069]
[72.44618988 107.71770477]
[71.57132721 96.74638367]
[57.63667679 91.19430542]
[43.70202637 85.64223480]
[29.76737595 80.09016418]
[15.83272457 74.53809357]
[1.89807391 68.98602295]
[-12.03657722 63.43394852]
[-25.97122765 57.88187408]
[-37.23928070 68.11869049]
[-51.77529907 72.43043518]
[-66.68091583 70.01326752]
[-79.00827026 61.39947128]
[-86.34296417 48.34146118]
[-87.27691650 33.45545578]
[-101.21157074 27.90338326]
[-115.14621735 22.35131073]
[-129.08087158 16.79923820]
[-143.01551819 11.24716568]
[-155.50750732 20.29999352]
[-170.91203308 21.13921928]
[-184.31355286 13.49705124]
[-191.43569946 -0.18792471]
[-190.00582886 -15.54888153]
[-180.48019409 -27.68419456]
[-165.89839172 -32.72152710]
[-150.91343689 -29.05348778]
[-140.30696106 -17.85053253]
[-137.46345520 -2.68748498]
[-123.52880096 2.86458731]
[-109.59414673 8.41665936]
[-95.65950012 13.96873188]
[-81.72484589 19.52080345]
[-70.80970001 9.35590744]
[-56.50475693 4.91992140]
[-41.63145447 7.14385891]
[-29.14775467 15.63958740]
[-21.55986023 28.76630974]
[-20.41915512 43.94722366]
[-6.48450470 49.49929810]
[7.45014620 55.05136871]
[21.38479614 60.60343933]
[35.31944656 66.15550995]
[49.25409698 71.70758820]
[63.18875122 77.25965881]
[77.12339783 82.81172943]
[95.88128662 71.68372345]
[117.03205109 77.00685883]
[128.80761719 67.71513367]
[140.58317566 58.42340469]
[143.88206482 42.72318649]
[158.27798462 35.64244461]
[172.72763062 42.61291504]
[176.14645386 58.28745270]
[165.91183472 70.64189148]
[149.87489319 70.19896698]
[138.09933472 79.49069214]
[126.32377625 88.78241730]
[128.61425781 100.00000000]
[126.32377625 111.21758270]
[138.09933472 120.50930786]
[149.87489319 129.80102539]
[165.36343384 128.14479065]
[177.17315674 137.73567200]
[178.65667725 152.51182556]
[190.43223572 161.80355835]
[202.20779419 171.09527588]
[217.10713196 166.76058960]
[231.69738770 172.04302979]
[240.36830139 184.91139221]
[239.78575134 200.41752625]
[230.17372131 212.59901428]
[215.22824097 216.77182007]
[200.69615173 211.33142090]
[192.16534424 198.36975098]
[192.91607666 182.87084961]
[181.14051819 173.57911682]
[169.36495972 164.28738403]
[154.64894104 166.28100586]
[142.57447815 157.02561951]
[140.58317566 141.57659912]
[128.80761719 132.28486633]
[117.03205109 122.99314117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[51 61]
[52 60]
[53 59]
[63 86]
[64 85]
[65 84]
[68 81]
[69 80]
[70 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
