%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUUCCUCUCCUAGCCUAAGGCGUGCAAACAGAGCGCCACUGGGAGGCUGAAACCUUUAGGCCGAUGCUUGCUUGCAAGGUCAGGCAAGCUGGAUUCUGGUCCCCACCUUUGCAGAGAGAACAGCG\
) } def
/len { sequence length } bind def

/coor [
[50.62505341 172.37327576]
[49.19887924 187.30532837]
[41.12279129 199.94561768]
[28.17257881 207.51475525]
[13.19576550 208.34844971]
[-0.51451272 202.26335144]
[-9.94360542 190.59750366]
[-13.01822186 175.91598511]
[-9.06230831 161.44703674]
[1.05576766 150.37110901]
[-13.75668907 152.73565674]
[-28.56914520 155.10021973]
[-43.38160324 157.46476746]
[-58.19406128 159.82933044]
[-73.00651550 162.19387817]
[-87.81896973 164.55844116]
[-91.47322083 172.31947327]
[-97.86861420 177.89347839]
[-105.87522125 180.39666748]
[-114.11834717 179.47904968]
[-121.21442413 175.37127686]
[-126.00331116 168.83291626]
[-140.97550964 169.74560547]
[-155.94772339 170.65829468]
[-170.91993713 171.57098389]
[-185.89213562 172.48367310]
[-199.19595337 181.04632568]
[-212.37043762 174.09776306]
[-224.03723145 185.10981750]
[-239.90003967 182.71168518]
[-247.79025269 168.74299622]
[-241.65518188 153.91935730]
[-226.20114136 149.61216736]
[-213.28312683 159.12556458]
[-201.05021667 150.62818909]
[-186.80482483 157.51147461]
[-171.83262634 156.59878540]
[-156.86041260 155.68609619]
[-141.88821411 154.77340698]
[-126.91600037 153.86071777]
[-110.31668854 140.03121948]
[-90.18352509 149.74598694]
[-75.37107086 147.38142395]
[-60.55861664 145.01687622]
[-45.74615860 142.65231323]
[-30.93370056 140.28776550]
[-16.12124443 137.92320251]
[-1.30878782 135.55865479]
[13.05522156 131.23716736]
[26.71346283 125.03616333]
[40.37170410 118.83515930]
[54.02994919 112.63415527]
[52.32778168 100.47679138]
[53.78644943 88.28780365]
[58.30923462 76.87538147]
[65.59626007 66.99620056]
[75.16437531 59.30529022]
[86.37918091 54.31257248]
[98.49708557 52.34909439]
[110.71464539 53.54503250]
[122.22178650 57.82109451]
[132.25553894 64.89376831]
[144.01548767 55.58227539]
[155.77542114 46.27078629]
[167.53535461 36.95929718]
[179.18104553 27.50530243]
[190.71075439 17.91020775]
[192.29924011 2.41458082]
[204.12869263 -7.15196514]
[218.89161682 -5.54208565]
[230.42132568 -15.13718128]
[236.07943726 -29.91203308]
[250.81156921 -32.10607147]
[262.34127808 -41.70116806]
[273.87097168 -51.29626083]
[285.40069580 -60.89135742]
[296.93038940 -70.48645020]
[308.46011353 -80.08155060]
[307.30618286 -95.55565643]
[315.49670410 -108.73499298]
[329.88226318 -114.55182648]
[344.93130493 -110.76947021]
[354.85714722 -98.84230804]
[355.84313965 -83.35659027]
[347.51013184 -70.26688385]
[333.06231689 -64.60645294]
[318.05520630 -68.55184174]
[306.52548218 -58.95674515]
[294.99578857 -49.36164856]
[283.46606445 -39.76655579]
[271.93637085 -30.17145920]
[260.40664673 -20.57636452]
[255.57322693 -6.48781824]
[240.01641846 -3.60747409]
[228.48670959 5.98762131]
[227.38832092 20.79738617]
[215.83224487 30.69242287]
[200.30584717 29.43991470]
[188.77613831 39.03501129]
[185.61460876 45.80172348]
[176.84684753 48.71923447]
[165.08691406 58.03072357]
[153.32696533 67.34221649]
[141.56703186 76.65370178]
[145.53717041 85.88498688]
[147.48419189 95.74337006]
[147.32159424 105.79086304]
[145.05661011 115.58108521]
[140.78984070 124.67906952]
[134.71087646 132.68061829]
[143.87847900 144.55307007]
[153.04608154 156.42550659]
[162.21368408 168.29795837]
[177.58084106 174.02357483]
[180.03871155 190.23748779]
[167.05883789 200.26020813]
[151.99382019 193.78123474]
[150.34124756 177.46556091]
[141.17364502 165.59312439]
[132.00602722 153.72067261]
[122.83842468 141.84822083]
[100.19866180 147.67419434]
[77.51113129 142.03710938]
[60.23094940 126.29239655]
[46.57270813 132.49340820]
[32.91446686 138.69439697]
[19.25622368 144.89540100]
[33.80444717 148.54905701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[16 42]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[28 34]
[49 127]
[50 126]
[51 125]
[52 124]
[62 104]
[63 103]
[64 102]
[65 101]
[66 99]
[67 98]
[70 95]
[71 94]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
