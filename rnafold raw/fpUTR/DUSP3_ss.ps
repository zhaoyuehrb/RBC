%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGCCCCCGCCCAGCUGAUCCGCCGCUCUCCGCCUCGCUUGCUCCUGCCGGGCGUGCAGGGCCCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[168.28099060 296.40093994]
[164.05500793 282.00854492]
[159.82902527 267.61614990]
[146.50148010 256.38839722]
[150.61547852 238.57589722]
[145.80595398 224.36784363]
[140.99644470 210.15980530]
[136.18692017 195.95176697]
[130.80187988 181.95170593]
[124.57065582 168.30723572]
[118.06240082 154.79269409]
[111.55414581 141.27816772]
[105.04589081 127.76363373]
[98.53763580 114.24909973]
[87.09457397 106.21492767]
[87.94783020 92.25915527]
[81.43957520 78.74462128]
[66.03480530 68.90066528]
[67.69660950 51.55351257]
[60.64252853 38.31568909]
[43.98873520 36.27896881]
[31.87820435 24.90606499]
[28.86067963 8.73610687]
[35.91198349 -5.94282818]
[28.32382393 -18.88190842]
[10.41260433 -27.70216370]
[10.42000103 -46.86612701]
[1.80243456 -59.14365005]
[-13.68836021 -63.31675720]
[-19.95164490 -78.08668518]
[-12.18276310 -92.12321472]
[3.65866303 -94.65871429]
[15.42044830 -83.74816895]
[14.07995701 -67.76121521]
[22.69752312 -55.48369598]
[33.21989059 -54.55479813]
[41.56843185 -47.72480011]
[44.69032288 -37.16712189]
[41.26290512 -26.47006989]
[48.85106659 -13.53098869]
[62.35697174 -13.43070602]
[74.10729980 -6.55243778]
[80.91537476 5.36460876]
[80.87218475 19.19836807]
[73.88035583 31.26161003]
[80.93443298 44.49943161]
[92.56185150 48.42815399]
[98.48243713 59.63862610]
[94.95410919 72.23636627]
[101.46236420 85.75090027]
[112.90542603 93.78507233]
[112.05216980 107.74084473]
[118.56042480 121.25537872]
[125.06867981 134.76991272]
[131.57693481 148.28443909]
[138.08518982 161.79898071]
[144.81524658 168.39788818]
[144.57063293 176.00010681]
[149.99829102 180.54104614]
[151.81335449 186.30796814]
[150.39497375 191.14224243]
[155.20448303 205.35029602]
[160.01400757 219.55833435]
[164.82351685 233.76637268]
[176.16036987 240.29539490]
[179.77713013 252.44641113]
[174.22142029 263.39016724]
[178.44740295 277.78256226]
[182.67338562 292.17495728]
[197.33276367 297.26242065]
[206.17445374 310.01403809]
[205.79866028 325.52658081]
[196.34988403 337.83511353]
[181.46134949 342.20678711]
[166.85803223 336.96057129]
[158.15518188 324.11376953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[5 64]
[6 63]
[7 62]
[8 61]
[9 58]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[16 50]
[17 49]
[19 46]
[20 45]
[24 40]
[25 39]
[27 35]
[28 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
