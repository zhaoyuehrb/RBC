%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCCCGAGGCUCCUACGCUGCCGCGCCCGGCUUCUCUCCAGCGCCCCGCGCCGUUAGCCACGUGGACCGACUCCGGCGCGCCGUCCUCACGUGGUUCCAGUGGAGUUUGCAGUCCUUCCCGCUUCUCCGUACUCGCCCCCGCCUCUGAGCUCCCUUCCC\
) } def
/len { sequence length } bind def

/coor [
[79.49679565 106.13189697]
[64.53090668 105.12080383]
[49.56502533 104.10971069]
[34.59914398 103.09860992]
[19.63325882 102.08751678]
[4.66737413 101.07642365]
[-10.29850960 100.06533051]
[-24.58883858 106.85481262]
[-36.76562119 98.27720642]
[-51.73150253 97.26611328]
[-66.69738770 96.25502014]
[-80.43141174 109.25017548]
[-98.98828125 108.14903259]
[-110.68177795 94.10955811]
[-125.67550659 93.67595673]
[-140.66923523 93.24236298]
[-149.38591003 96.13306427]
[-155.94697571 92.65316010]
[-170.92956543 91.93067932]
[-185.92678833 91.64159393]
[-200.92608643 91.78614044]
[-215.92539978 91.93069458]
[-230.92469788 92.07524109]
[-245.92190552 92.36432648]
[-259.49264526 100.49730682]
[-272.43826294 93.13114166]
[-287.43200684 93.56473541]
[-302.42572021 93.99832916]
[-317.41946411 94.43192291]
[-328.23300171 105.64374542]
[-343.44497681 105.86988068]
[-354.06707764 95.49171448]
[-369.06082153 95.92530823]
[-384.05453491 96.35890961]
[-390.71527100 110.13907623]
[-403.02392578 119.23609924]
[-418.15206909 121.55952454]
[-432.62332153 116.57546234]
[-443.11236572 105.42920685]
[-447.20883179 90.68209076]
[-443.97140503 75.72289276]
[-434.14404297 63.98912048]
[-419.98498535 58.17711258]
[-404.74786377 59.62242889]
[-391.93408203 67.99294281]
[-384.48812866 81.36517334]
[-369.49441528 80.93157959]
[-354.50067139 80.49798584]
[-344.49606323 69.52333069]
[-329.29644775 68.87001038]
[-317.85305786 79.43819427]
[-302.85931396 79.00460052]
[-287.86560059 78.57100677]
[-272.87185669 78.13740540]
[-260.37356567 70.03543854]
[-246.35549927 77.37059784]
[-239.72857666 74.01778412]
[-231.06924438 77.07594299]
[-216.06994629 76.93138885]
[-201.07063293 76.78684235]
[-186.07133484 76.64228821]
[-183.33297729 74.34989166]
[-179.33171082 73.29558563]
[-174.67372131 74.06571960]
[-170.20709229 76.94808960]
[-155.22450256 77.67057037]
[-140.23564148 78.24863434]
[-125.24191284 78.68222809]
[-110.24817657 79.11582184]
[-103.80781555 69.63082886]
[-93.47187805 64.39806366]
[-81.77466583 64.83098602]
[-71.64797211 70.93755341]
[-65.68629456 81.28913116]
[-50.72040939 82.30023193]
[-35.75452423 83.31132507]
[-22.53465652 76.44952393]
[-9.28741455 85.09944153]
[5.67846966 86.11054230]
[20.64435387 87.12163544]
[35.61023712 88.13272858]
[50.57612228 89.14382172]
[65.54200745 90.15492249]
[80.50788879 91.16601562]
[100.00000000 78.59949493]
[119.49211121 91.16601562]
[129.86555481 79.54579926]
[145.05749512 78.73359680]
[156.07167053 88.69470215]
[171.03755188 87.68360138]
[186.00343323 86.67250824]
[200.96931458 85.66141510]
[217.12997437 73.66439056]
[234.13485718 82.81009674]
[249.05065918 81.22300720]
[263.96646118 79.63591003]
[278.88226318 78.04882050]
[286.68112183 64.76409912]
[300.64385986 58.68991089]
[315.33221436 61.96347809]
[325.15881348 73.12483215]
[340.05862427 71.39407349]
[354.94107056 69.51980591]
[369.82351685 67.64554596]
[384.66708374 65.48480988]
[399.46624756 63.03841019]
[414.26541138 60.59200668]
[429.06454468 58.14560318]
[435.61389160 46.34332657]
[447.59683228 40.56630707]
[460.52511597 42.72880173]
[469.69873047 51.81676102]
[484.54229736 49.65602875]
[497.08398438 40.01152420]
[510.79309082 45.83477783]
[520.03997803 33.01796341]
[535.65447998 30.57615089]
[548.37280273 39.95802307]
[550.64941406 55.59748077]
[541.13360596 68.21591187]
[525.47094727 70.32702637]
[512.95379639 60.67833710]
[501.47381592 70.16828918]
[486.70303345 64.49958801]
[471.85946655 66.66032410]
[462.41372681 80.54880524]
[445.51712036 83.38722992]
[431.51095581 72.94476318]
[416.71179199 75.39116669]
[401.91262817 77.83757019]
[387.11349487 80.28397369]
[383.63027954 83.61487579]
[378.00259399 84.76232147]
[371.69778442 82.52799225]
[356.81533813 84.40225220]
[341.93289185 86.27651215]
[335.65933228 90.25141144]
[326.74591064 88.04063416]
[319.48794556 101.01984406]
[305.81729126 107.31090546]
[290.88903809 104.31081390]
[280.46936035 92.96462250]
[265.55355835 94.55171204]
[250.63775635 96.13880920]
[235.72195435 97.72589874]
[230.00335693 106.26460266]
[220.31600952 110.30696869]
[209.79179382 108.28278351]
[201.98040771 100.62729645]
[187.01452637 101.63839722]
[172.04864502 102.64949036]
[157.08276367 103.66058350]
[147.50849915 115.01264191]
[132.34536743 116.25122833]
[120.50320435 106.13189697]
[117.95808411 111.63996887]
[113.96932983 116.21232605]
[108.85760498 119.48138428]
[103.03382874 121.18437195]
[96.96617126 121.18437195]
[91.14239502 119.48138428]
[86.03067017 116.21232605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[9 76]
[10 75]
[11 74]
[14 69]
[15 68]
[16 67]
[18 66]
[19 65]
[20 61]
[21 60]
[22 59]
[23 58]
[24 56]
[26 54]
[27 53]
[28 52]
[29 51]
[32 48]
[33 47]
[34 46]
[86 155]
[89 152]
[90 151]
[91 150]
[92 149]
[94 145]
[95 144]
[96 143]
[97 142]
[101 138]
[102 136]
[103 135]
[104 134]
[105 131]
[106 130]
[107 129]
[108 128]
[112 125]
[113 124]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
