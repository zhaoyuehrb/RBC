%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCUCGGUGUUCGCCCGCCGACGCCGCACGGCUUGCUGGGGCUGGGCUCUUCCUCGCGGAAGUGGGGAGGAGGCGGUUGCGGUUAGUGGACCGGGACCGGUAGGGGUGCUGUUGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[97.17781830 463.94522095]
[82.02000427 466.06637573]
[67.61659241 460.88949585]
[57.27736664 449.60415649]
[53.37821579 434.80364990]
[56.81512833 419.88900757]
[66.79833221 408.28753662]
[81.03376007 402.66516113]
[82.57607269 387.74465942]
[84.11839294 372.82415771]
[85.66070557 357.90365601]
[73.28154755 344.53585815]
[74.50547791 326.04095459]
[89.02505493 314.01760864]
[89.79723358 299.03750610]
[90.56941986 284.05737305]
[91.34159851 269.07727051]
[92.11378479 254.09716797]
[92.50000000 239.10212708]
[92.50000000 224.10212708]
[92.50000000 209.10212708]
[92.50000000 194.10212708]
[80.36157990 185.51162720]
[75.55226898 171.25209045]
[80.11502075 156.72505188]
[92.50000000 147.56434631]
[92.50000000 132.56434631]
[92.50000000 117.56434631]
[82.32884216 107.24475861]
[82.32884216 92.75524139]
[92.50000000 82.43565369]
[84.76270294 68.63548279]
[92.50000000 55.90821075]
[92.50000000 40.90821075]
[92.50000000 25.90820885]
[84.76270294 12.10803699]
[92.50000000 -0.61923480]
[92.50000000 -15.61923504]
[92.50000000 -30.61923409]
[92.50000000 -45.61923599]
[84.76270294 -59.41940689]
[92.50000000 -72.14668274]
[92.50000000 -87.14668274]
[92.50000000 -102.14668274]
[92.50000000 -117.14668274]
[92.50000000 -132.14668274]
[83.90886688 -141.87084961]
[84.28477478 -154.43843079]
[92.87448120 -163.06079102]
[93.26069641 -178.05583191]
[93.64691925 -193.05085754]
[94.03313446 -208.04588318]
[94.41935730 -223.04090881]
[94.80557251 -238.03593445]
[95.19179535 -253.03096008]
[95.57801056 -268.02600098]
[95.96423340 -283.02102661]
[96.35044861 -298.01605225]
[96.73667145 -313.01107788]
[88.43434906 -327.15332031]
[96.76494598 -341.27896118]
[113.15865326 -340.85671997]
[120.75103760 -326.32095337]
[111.73169708 -312.62484741]
[111.34547424 -297.62982178]
[110.95925903 -282.63479614]
[110.57303619 -267.63977051]
[110.18682098 -252.64474487]
[109.80059814 -237.64971924]
[109.41438293 -222.65469360]
[109.02816010 -207.65966797]
[108.64194489 -192.66462708]
[108.25572968 -177.66960144]
[107.86950684 -162.67457581]
[117.08925629 -147.80235291]
[107.50000000 -132.14668274]
[107.50000000 -117.14668274]
[107.50000000 -102.14668274]
[107.50000000 -87.14668274]
[107.50000000 -72.14668274]
[115.23729706 -59.41940689]
[107.50000000 -45.61923599]
[107.50000000 -30.61923409]
[107.50000000 -15.61923504]
[107.50000000 -0.61923480]
[115.23729706 12.10803699]
[107.50000000 25.90820885]
[107.50000000 40.90821075]
[107.50000000 55.90821075]
[115.23729706 68.63548279]
[107.50000000 82.43565369]
[117.67115784 92.75524139]
[117.67115784 107.24475861]
[107.50000000 117.56434631]
[107.50000000 132.56434631]
[107.50000000 147.56434631]
[119.88497925 156.72505188]
[124.44773102 171.25209045]
[119.63842010 185.51162720]
[107.50000000 194.10212708]
[107.50000000 209.10212708]
[107.50000000 224.10212708]
[107.50000000 239.10212708]
[110.55686188 245.18128967]
[110.06728363 250.99414062]
[107.09389496 254.86933899]
[106.32170868 269.84945679]
[105.54953003 284.82955933]
[104.77735138 299.80966187]
[104.00516510 314.78979492]
[113.63831329 321.99508667]
[118.49595642 332.86840820]
[117.45631409 344.61093140]
[110.89936829 354.26205444]
[100.58119965 359.44595337]
[99.03888702 374.36645508]
[97.49657440 389.28695679]
[95.95425415 404.20745850]
[108.73861694 412.62286377]
[116.13762665 426.02111816]
[116.45104980 441.32339478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 118]
[9 117]
[10 116]
[11 115]
[14 110]
[15 109]
[16 108]
[17 107]
[18 106]
[19 103]
[20 102]
[21 101]
[22 100]
[26 96]
[27 95]
[28 94]
[31 91]
[33 89]
[34 88]
[35 87]
[37 85]
[38 84]
[39 83]
[40 82]
[42 80]
[43 79]
[44 78]
[45 77]
[46 76]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
