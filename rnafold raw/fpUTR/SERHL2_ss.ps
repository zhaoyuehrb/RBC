%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGUGGGGGCGGGGACUGCUGGAGUUGCGGGGCCUGCCUGGGGUAGGGCGGGGCAGGACAGCUUGGAGAUAGGGCCCGGAAUUGCGGGCGUCACUCUGCUCCUGCGACCUAGCCAGGCGUGAGGGAGUGACAGCAGCGCAUUCGCGGGACGAGAGCG\
) } def
/len { sequence length } bind def

/coor [
[96.14299011 355.90695190]
[97.53177643 340.82882690]
[103.74344635 327.01962280]
[114.10421753 315.97729492]
[127.49021149 308.89959717]
[125.14369965 294.08425903]
[122.79718018 279.26895142]
[120.45066071 264.45361328]
[118.10414886 249.63829041]
[108.47112274 238.27809143]
[113.95433807 223.43743896]
[111.60781860 208.62211609]
[109.26130676 193.80679321]
[107.01818848 192.04446411]
[105.35700989 189.26448059]
[104.67763519 185.69100952]
[105.28877258 181.69175720]
[107.35980988 177.74113464]
[106.18292236 162.78736877]
[105.00603485 147.83361816]
[103.82914734 132.87985229]
[102.65225983 117.92609406]
[86.37036133 121.94853210]
[68.07390594 110.31478119]
[53.36212921 107.38842773]
[38.65034866 104.46207428]
[23.93857002 101.53571320]
[9.22679138 98.60935974]
[-5.48498774 95.68300629]
[-20.22478676 92.90122223]
[-33.09975433 101.66894531]
[-48.03741837 98.78436279]
[-56.31675720 86.45601654]
[-71.26220703 91.64679718]
[-82.43107605 81.79258728]
[-97.19747925 79.15564728]
[-111.96387482 76.51869965]
[-126.73027802 73.88175964]
[-141.49667358 71.24481201]
[-156.26307678 68.60786438]
[-171.02946472 65.97092438]
[-183.85038757 75.21210480]
[-199.43705750 72.59841919]
[-208.54217529 59.68051147]
[-205.76383972 44.12234879]
[-192.75039673 35.15431595]
[-177.22247314 38.09698486]
[-168.39253235 51.20452499]
[-153.62612915 53.84146881]
[-138.85972595 56.47841263]
[-124.09333038 59.11535645]
[-109.32693481 61.75230026]
[-94.56053162 64.38924408]
[-79.79413605 67.02619171]
[-65.90488434 61.64679337]
[-53.67981339 71.68961334]
[-41.64515686 62.98889160]
[-26.63236427 65.45277405]
[-17.58784294 78.13482666]
[-10.41309261 76.20485687]
[-2.55863309 80.97122955]
[12.15314579 83.89758301]
[26.86492538 86.82393646]
[41.57670593 89.75028992]
[56.28848267 92.67664337]
[71.00025940 95.60300446]
[77.11087799 91.25439453]
[65.60304260 81.63307190]
[52.08866501 75.12450409]
[47.76705933 60.76052856]
[55.44659424 47.87546921]
[70.13677979 44.84257889]
[82.29131317 53.63275909]
[84.01213837 68.53227234]
[89.33210754 82.55717468]
[95.44271851 78.20856476]
[97.49790192 63.35002518]
[99.55308533 48.49148560]
[101.60827637 33.63294601]
[103.66345978 18.77440453]
[93.92604828 6.32617426]
[95.92579651 -9.35108852]
[108.47628021 -18.95634270]
[124.13152313 -16.79095840]
[133.60354614 -4.13962364]
[131.27276611 11.49185181]
[118.52199554 20.82958984]
[116.46681213 35.68812943]
[114.41162872 50.54666901]
[112.35644531 65.40521240]
[110.30125427 80.26374817]
[121.70734406 90.00547028]
[136.06144714 85.65119934]
[150.41555786 81.29692841]
[164.76966858 76.94265747]
[179.12376404 72.58838654]
[193.47787476 68.23412323]
[207.83197021 63.87984848]
[222.18608093 59.52558136]
[229.53553772 54.01229095]
[236.86489868 55.22971344]
[251.30172729 51.15810776]
[265.73855591 47.08650208]
[270.67953491 42.56816483]
[276.31503296 41.43414688]
[280.82247925 43.15040588]
[295.40802002 39.64872742]
[309.99356079 36.14704514]
[317.65484619 31.07598877]
[324.89984131 32.72278595]
[339.55133057 29.50814819]
[354.20281982 26.29351234]
[365.94641113 14.84710407]
[381.65554810 19.55397797]
[385.17004395 35.57210541]
[372.87445068 46.42341232]
[357.41744995 40.94499969]
[342.76596069 44.15963745]
[328.11447144 47.37427521]
[313.49523926 50.73259354]
[298.90969849 54.23427582]
[284.32415771 57.73595428]
[269.81018066 61.52333069]
[255.37333679 65.59494019]
[240.93650818 69.66654205]
[226.54035950 73.87968445]
[212.18624878 78.23395538]
[197.83213806 82.58822632]
[183.47804260 86.94249725]
[169.12393188 91.29676819]
[154.76982117 95.65103912]
[140.41572571 100.00530243]
[126.06161499 104.35957336]
[117.60602570 116.74920654]
[118.78291321 131.70297241]
[119.95979309 146.65672302]
[121.13668060 161.61048889]
[122.31356812 176.56423950]
[124.07662964 191.46026611]
[126.42314911 206.27560425]
[128.76966858 221.09092712]
[138.57052612 233.51081848]
[132.91946411 247.29176331]
[135.26599121 262.10708618]
[137.61250305 276.92242432]
[139.95901489 291.73773193]
[142.30554199 306.55307007]
[157.22351074 309.14785767]
[170.48945618 316.44808960]
[180.66438293 327.66189575]
[186.64459229 341.57290649]
[187.78140259 356.67211914]
[183.95149231 371.32171631]
[175.57031250 383.93258667]
[163.54696655 393.13684082]
[149.18568420 397.93603516]
[134.04426575 397.80960083]
[119.76512909 392.77127075]
[107.89717102 383.36752319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[11 141]
[12 140]
[13 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 59]
[33 56]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[92 133]
[93 132]
[94 131]
[95 130]
[96 129]
[97 128]
[98 127]
[99 126]
[101 125]
[102 124]
[103 123]
[106 122]
[107 121]
[108 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
