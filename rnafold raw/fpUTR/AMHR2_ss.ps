%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUCUGAAGAAAGAUUUGGCCAGGGGCAGCUGUGCUGGCUUAUGCUCUUCUCCUUCUGCUGCUGCCAUCCUCCAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[179.11076355 257.52398682]
[171.10177612 251.52336121]
[165.15571594 243.44400024]
[161.79168701 233.96788025]
[161.31016541 223.89990234]
[163.76611328 214.09947205]
[168.96318054 205.40719604]
[159.77416992 193.55130005]
[150.58515930 181.69541931]
[141.39616394 169.83952332]
[129.28506470 167.93754578]
[121.55372620 157.90757751]
[122.87852478 144.90667725]
[114.15615082 132.70338440]
[105.43376923 120.50010681]
[92.62306976 119.88369751]
[82.51026917 111.99540710]
[78.79382324 99.72015381]
[82.83290100 87.54724121]
[74.59027100 75.01493073]
[66.34763336 62.48260880]
[51.12761307 59.16767502]
[42.94693756 46.34070587]
[46.20101929 31.85117149]
[37.95838547 19.31885338]
[29.71574974 6.78653717]
[15.66801071 -0.49162263]
[15.13868046 -15.37681961]
[6.89604616 -27.90913582]
[-1.34658873 -40.44145203]
[-9.58922386 -52.97377014]
[-23.34461212 -62.88465500]
[-17.62891960 -78.84608459]
[-0.70900863 -77.77232361]
[2.94309378 -61.21640396]
[11.18572807 -48.68408966]
[19.42836380 -36.15177155]
[27.67099762 -23.61945343]
[41.12916946 -17.23768997]
[42.24806595 -1.45609748]
[50.49069977 11.07621956]
[58.73333740 23.60853767]
[73.32673645 26.35959816]
[81.86446381 38.95173264]
[78.87995148 54.23997498]
[87.12258148 66.77229309]
[95.36521912 79.30461121]
[111.49767303 82.17911530]
[120.76601410 95.69269562]
[117.63704681 111.77773285]
[126.35942841 123.98101044]
[135.08180237 136.18429565]
[151.94847107 143.26306152]
[153.25204468 160.65051270]
[162.44105530 172.50640869]
[171.63006592 184.36228943]
[180.81907654 196.21818542]
[201.66178894 193.62733459]
[220.05105591 203.51425171]
[229.27420044 222.10630798]
[226.05937195 242.48382568]
[237.73483276 251.90100098]
[249.41030884 261.31817627]
[261.08578491 270.73535156]
[272.76126099 280.15255737]
[287.70611572 275.97750854]
[302.23901367 281.41577148]
[310.77175903 294.37615967]
[310.02334595 309.87518311]
[300.28152466 321.95312500]
[285.29226685 325.96578979]
[270.81921387 320.37020874]
[262.42755127 307.31799316]
[263.34408569 291.82803345]
[251.66860962 282.41082764]
[239.99313354 272.99365234]
[228.31765747 263.57647705]
[216.64218140 254.15928650]
[208.09190369 259.17263794]
[198.43397522 261.50524902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 57]
[8 56]
[9 55]
[10 54]
[13 52]
[14 51]
[15 50]
[19 47]
[20 46]
[21 45]
[24 42]
[25 41]
[26 40]
[28 38]
[29 37]
[30 36]
[31 35]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
