%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGCUUUGGCUUCUGAUAGUCAUGGACUCACUAGGCUGCUGAGGAAGAUCAAUAAUACCUACUGGAAUCAGUCAUGAGAAGUCAAGCAUGGAAAUUGUGAAUUGUGUGUGUGGCCAGACCAGUACCUCCAAGUGUUCAGAAG\
) } def
/len { sequence length } bind def

/coor [
[96.65161133 262.29067993]
[107.84930420 251.37528992]
[106.55982971 236.43081665]
[105.27036285 221.48635864]
[96.46760559 209.47132874]
[102.98993683 195.05711365]
[101.70046234 180.11264038]
[100.41098785 165.16816711]
[99.12152100 150.22369385]
[95.38580322 143.78335571]
[97.96862030 134.94436646]
[97.00099182 119.97560883]
[85.01930237 110.95124817]
[70.36522675 114.15406036]
[55.71114731 117.35687256]
[41.05707169 120.55968475]
[26.40299225 123.76249695]
[16.86167336 140.06373596]
[-1.23869157 144.21749878]
[-16.40523911 134.06050110]
[-30.90795708 137.89080811]
[-45.41067505 141.72109985]
[-59.91339111 145.55140686]
[-74.41610718 149.38169861]
[-81.97943115 154.63479614]
[-89.27212524 153.13481140]
[-103.85389709 156.65217590]
[-118.43566895 160.16955566]
[-127.99653625 173.05245972]
[-144.03427124 173.46580505]
[-154.24607849 161.09251404]
[-150.79835510 145.42431641]
[-136.33587646 138.48049927]
[-121.95304108 145.58778381]
[-107.37126923 142.07040405]
[-92.78949738 138.55303955]
[-78.24640656 134.87898254]
[-63.74369049 131.04869080]
[-49.24097443 127.21839142]
[-34.73825455 123.38809204]
[-20.23553848 119.55779266]
[-16.73249626 108.61122131]
[-8.27021790 100.65704346]
[3.10533023 97.77857208]
[14.56503487 100.81210327]
[23.20017815 109.10842133]
[37.85425568 105.90560913]
[52.50833511 102.70279694]
[67.16241455 99.49997711]
[81.81649017 96.29716492]
[66.93317413 94.42984009]
[54.20592499 86.49150848]
[45.98253632 73.94654846]
[43.77997971 59.10914230]
[48.00455475 44.71633148]
[57.87695694 33.42316437]
[71.57602692 27.31288719]
[86.57469940 27.51266289]
[100.10616302 33.98563766]
[109.67427826 45.53774643]
[113.51400757 60.03796768]
[110.91704559 74.81145477]
[102.36469269 87.13085175]
[114.53778076 78.36637878]
[126.71086121 69.60190582]
[138.88395691 60.83743286]
[151.05703735 52.07295990]
[163.23011780 43.30849075]
[161.83151245 23.90289688]
[171.71707153 7.34961414]
[189.14491272 -0.47787616]
[190.75563049 -15.39114475]
[192.36634827 -30.30441284]
[185.24789429 -45.07802963]
[194.70533752 -58.47537613]
[211.00965881 -56.71441269]
[217.38838196 -41.60666656]
[207.27961731 -28.69369316]
[205.66889954 -13.78042412]
[204.05818176 1.13284409]
[208.36799622 3.06521225]
[212.34228516 5.61738825]
[215.89254761 8.73254395]
[218.93972778 12.34131241]
[232.82859802 6.67569351]
[246.71746826 1.01007378]
[260.60632324 -4.65554571]
[270.46182251 -17.03213882]
[285.16876221 -14.67517281]
[299.05761719 -20.34079170]
[312.94650269 -26.00641251]
[326.83535767 -31.67203140]
[340.72424316 -37.33765030]
[350.57971191 -49.71424484]
[365.28665161 -47.35727692]
[379.17553711 -53.02289581]
[382.74810791 -68.12310028]
[394.53601074 -78.21395874]
[410.00650024 -79.41532135]
[423.21090698 -71.26525116]
[429.07180786 -56.89760590]
[425.33563232 -41.83704376]
[413.43896484 -31.87465668]
[397.95635986 -30.84118843]
[384.84115601 -39.13402557]
[370.95227051 -33.46840668]
[362.09020996 -21.49705505]
[346.38986206 -23.44877815]
[332.50097656 -17.78315926]
[318.61212158 -12.11754036]
[304.72323608 -6.45192051]
[290.83438110 -0.78630102]
[281.97232056 11.18504906]
[266.27197266 9.23332596]
[252.38308716 14.89894581]
[238.49421692 20.56456566]
[224.60534668 26.23018456]
[223.32092285 41.46994019]
[215.01266479 54.41069794]
[201.54333496 62.00488663]
[186.00175476 62.42031860]
[171.99459839 55.48157501]
[159.82150269 64.24604797]
[147.64842224 73.01052094]
[135.47534180 81.77499390]
[123.30225372 90.53946686]
[111.12916565 99.30393982]
[113.68517303 102.85050201]
[114.96024323 107.65910339]
[114.48658752 113.25389099]
[111.96974945 119.00798035]
[112.93737793 133.97673035]
[114.06599426 148.93421936]
[115.35546112 163.87869263]
[116.64493561 178.82316589]
[117.93441010 193.76763916]
[126.82939148 206.85159302]
[120.21483612 220.19688416]
[121.50430298 235.14135742]
[122.79377747 250.08583069]
[135.69570923 258.92178345]
[139.84968567 273.99755859]
[133.29434204 288.19479370]
[119.12490082 294.80999756]
[104.03174591 290.71969604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[4 138]
[6 136]
[7 135]
[8 134]
[9 133]
[11 132]
[12 131]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[63 127]
[64 126]
[65 125]
[66 124]
[67 123]
[68 122]
[71 80]
[72 79]
[73 78]
[84 117]
[85 116]
[86 115]
[87 114]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
