%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGUCUCCUGUGCGUCUGCGCGGGAAGUGGAACCUGGCUCUGGGGAGAAGCCGCGUGAGAUCCGCGCGGGUGCUAGCUAGUCCUUUCUCGUCGCUGCUCGGCUCGCGGCCCGUGGGGUCGGCCCCGCCACCGUUGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[169.74729919 204.62905884]
[165.98037720 192.69490051]
[167.68501282 180.22384644]
[155.58834839 171.35420227]
[143.49166870 162.48455811]
[131.39500427 153.61491394]
[116.55602264 152.32885742]
[110.00209045 137.92897034]
[95.03420258 138.91001892]
[84.19874573 149.28271484]
[73.36328888 159.65541077]
[62.52782822 170.02810669]
[51.69236755 180.40080261]
[40.85690689 190.77349854]
[30.02144814 201.14619446]
[19.18598938 211.51889038]
[15.11899853 227.40573120]
[-0.74370164 231.56587219]
[-12.08392620 219.71971130]
[-7.23582411 204.05357361]
[8.81329346 200.68342590]
[19.64875221 190.31072998]
[30.48421288 179.93803406]
[41.31967163 169.56533813]
[52.15513229 159.19264221]
[62.99058914 148.81994629]
[73.82604980 138.44725037]
[84.66150665 128.07455444]
[75.02127838 117.92771912]
[70.94554901 105.11544800]
[72.79748535 92.35528564]
[79.73209381 82.14445496]
[71.67259979 69.49358368]
[63.61310577 56.84271240]
[57.82912064 53.39378738]
[55.11885834 48.29010010]
[55.49199677 43.45953751]
[47.99199677 30.46915817]
[40.49199677 17.47877693]
[32.99199677 4.48839569]
[25.49199867 -8.50198555]
[17.99199867 -21.49236679]
[12.60153580 -7.49440527]
[-1.02516675 -1.22439969]
[-15.16286278 -6.23693943]
[-21.79661179 -19.69031715]
[-17.16561317 -33.95754623]
[-3.89526772 -40.95025253]
[10.48985577 -36.70520782]
[4.74960470 -50.56340027]
[-7.67982578 -60.35215759]
[-5.40200853 -75.07156372]
[-17.83143997 -84.86032104]
[-15.55362225 -99.57972717]
[-21.29387283 -113.43791962]
[-27.03412437 -127.29611206]
[-32.77437592 -141.15429688]
[-38.51462936 -155.01249695]
[-44.25487900 -168.87069702]
[-49.99513245 -182.72888184]
[-64.20707703 -190.17201233]
[-67.10722351 -205.95074463]
[-56.47081375 -217.96101379]
[-40.45720291 -216.98954773]
[-31.35065460 -203.78158569]
[-36.13693619 -188.46913147]
[-30.39668655 -174.61094666]
[-24.65643501 -160.75274658]
[-18.91618347 -146.89456177]
[-13.17593193 -133.03636169]
[-7.43568039 -119.17816925]
[-1.69542909 -105.31997681]
[10.32342052 -96.52244568]
[8.45618439 -80.81181335]
[20.47503471 -72.01428223]
[18.60779762 -56.30364990]
[24.34804916 -42.44545746]
[30.98237991 -28.99236679]
[38.48237991 -16.00198555]
[45.98237991 -3.01160455]
[53.48237991 9.97877693]
[60.98237991 22.96915817]
[68.48237610 35.95953751]
[76.26397705 48.78321838]
[84.32347107 61.43408966]
[92.38296509 74.08496094]
[103.14340973 72.45606995]
[113.95867157 75.22789001]
[123.05772400 82.17282104]
[128.86389160 92.36324310]
[130.26577759 104.29143524]
[126.82334900 116.09172821]
[118.87173462 125.83230591]
[134.57594299 127.75277710]
[140.26464844 141.51823425]
[152.36131287 150.38787842]
[164.45799255 159.25752258]
[176.55465698 168.12716675]
[193.57937622 162.07431030]
[210.69721985 167.35026550]
[221.17605591 181.68470764]
[221.01185608 199.28385925]
[233.48390198 207.61741638]
[245.95594788 215.95097351]
[258.42800903 224.28453064]
[271.25778198 222.54170227]
[281.48980713 229.80128479]
[283.92095947 241.69938660]
[296.20822144 250.30302429]
[308.49551392 258.90667725]
[320.78280640 267.51031494]
[333.73565674 263.65554810]
[346.35180664 267.92578125]
[354.07107544 278.53979492]
[354.24111938 291.46780396]
[366.33776855 300.33743286]
[378.43444824 309.20709229]
[390.53112793 318.07672119]
[402.62777710 326.94638062]
[414.72445679 335.81600952]
[431.07617188 337.06250000]
[437.92764282 351.96182251]
[428.23065186 365.18679810]
[411.96066284 363.13275146]
[405.85479736 347.91268921]
[393.75814819 339.04302979]
[381.66146851 330.17340088]
[369.56478882 321.30374146]
[357.46813965 312.43411255]
[345.37145996 303.56445312]
[328.91180420 306.84619141]
[314.87426758 297.04544067]
[312.17913818 279.79760742]
[299.89187622 271.19393921]
[287.60458374 262.59030151]
[275.31729126 253.98666382]
[257.80923462 253.43809509]
[250.09443665 236.75657654]
[237.62239075 228.42301941]
[225.15034485 220.08946228]
[212.67831421 211.75590515]
[201.95788574 217.63090515]
[189.68266296 218.36492920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[6 95]
[8 93]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[32 86]
[33 85]
[34 84]
[37 83]
[38 82]
[39 81]
[40 80]
[41 79]
[42 78]
[49 77]
[50 76]
[52 74]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[102 141]
[103 140]
[104 139]
[105 138]
[108 136]
[109 135]
[110 134]
[111 133]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
