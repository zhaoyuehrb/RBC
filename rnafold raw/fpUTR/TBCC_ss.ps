%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGUUGGUGGGAGGCCUCACGGACAGCGCGCCCGGAGGAAGGAAGACAAGAGAGAGGAAGCUUGAAGCCAAU\
) } def
/len { sequence length } bind def

/coor [
[63.56642532 115.52423859]
[48.90309906 118.68442535]
[34.23976898 121.84461212]
[19.57644081 125.00480652]
[4.91311169 128.16499329]
[-9.75021744 131.32518005]
[-24.41354561 134.48536682]
[-38.84604645 138.57229614]
[-52.98920441 143.56939697]
[-67.13237000 148.56649780]
[-81.27552795 153.56358337]
[-95.41869354 158.56068420]
[-105.66090393 171.36807251]
[-121.83063507 168.63456726]
[-127.29383850 153.17219543]
[-116.43045044 140.88728333]
[-100.41578674 144.41752625]
[-86.27262878 139.42042542]
[-72.12946320 134.42332458]
[-57.98630142 129.42623901]
[-43.84313965 124.42913818]
[-41.97429657 121.10066986]
[-38.23662949 118.63979340]
[-33.12432861 117.99518585]
[-27.57373428 119.82204437]
[-12.91040611 116.66184998]
[1.75292253 113.50166321]
[16.41625023 110.34147644]
[31.07958031 107.18128967]
[45.74290848 104.02109528]
[60.40623856 100.86090851]
[61.65141296 90.11095428]
[65.76005554 80.09941101]
[72.42536926 71.57383728]
[81.14965820 65.17081451]
[91.28149414 61.36847305]
[102.06433868 60.45071793]
[112.69303131 62.48608017]
[122.37395477 67.32258606]
[130.38421631 74.59908295]
[136.12571716 83.77226257]
[139.16973877 94.15714264]
[154.15621948 94.79376221]
[162.01748657 83.26597595]
[174.48440552 77.24695587]
[188.18275452 78.24473572]
[199.46493530 85.88433838]
[205.38134766 98.03679657]
[220.32731628 99.30888367]
[235.27326965 100.58097076]
[250.21923828 101.85306549]
[258.93307495 89.20536041]
[272.81024170 82.62354279]
[288.11779785 83.87808990]
[300.73812866 92.63153839]
[307.27642822 106.52925110]
[305.97390747 121.83280945]
[297.18093872 134.42564392]
[283.26278687 140.92033386]
[267.96337891 139.56983948]
[255.39817810 130.73745728]
[248.94714355 116.79902649]
[234.00119019 115.52693939]
[219.05522156 114.25484467]
[204.10926819 112.98275757]
[193.90971375 125.66681671]
[178.02870178 129.91934204]
[162.54924011 123.91059875]
[153.51960754 109.78025055]
[138.53311157 109.14363098]
[129.40148926 126.53223419]
[113.03856659 137.39523315]
[93.46880341 139.06085205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[42 70]
[43 69]
[48 65]
[49 64]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
