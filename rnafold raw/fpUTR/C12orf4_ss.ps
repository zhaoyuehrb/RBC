%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUGGAAAAAGUAUGUCGGCAAGUCAGCUGGUUUCCCAGUGCAGGACGCGCUGACAGCUCGAGUGAGCGGACUGCCCAGGACUUCGGAACUAGACGAGUUCUGUAGAAAUCCUGUCAAAGAAU\
) } def
/len { sequence length } bind def

/coor [
[194.21789551 153.06953430]
[180.54530334 146.90022278]
[173.07257080 147.01828003]
[166.61174011 140.40289307]
[153.09719849 133.89463806]
[139.58267212 127.38638306]
[126.06813812 120.87812805]
[118.40046692 128.54634094]
[108.52918243 133.45727539]
[97.42884827 134.99752808]
[86.23698425 132.89311218]
[76.13754272 127.24953461]
[68.23568726 118.55254364]
[63.43726349 107.62797546]
[62.34590912 95.56398010]
[65.18956757 83.60277557]
[50.75020599 79.54016876]
[36.31084442 75.47756195]
[21.87147903 71.41495514]
[7.43211555 67.35234833]
[-7.00724792 63.28973770]
[-21.44661140 59.22713089]
[-35.11431503 66.69918823]
[-49.70000839 62.37343597]
[-56.73924637 49.29732513]
[-71.17861176 45.23471832]
[-85.61797333 41.17210770]
[-105.89843750 47.86436462]
[-119.94476318 32.82545471]
[-134.64735413 29.85326385]
[-149.34992981 26.88107109]
[-164.05252075 23.90887833]
[-178.75511169 20.93668747]
[-194.11952209 26.66966248]
[-206.59265137 16.02293015]
[-203.34323120 -0.05106247]
[-187.71397400 -5.01677132]
[-175.78291321 6.23409939]
[-161.08033752 9.20629120]
[-146.37774658 12.17848396]
[-131.67515564 15.15067577]
[-116.97256470 18.12286758]
[-110.32472229 11.95309353]
[-101.43262482 9.56031036]
[-92.31568909 11.62178230]
[-85.10723114 17.78765869]
[-81.55536652 26.73274612]
[-67.11600494 30.79535294]
[-52.67663956 34.85795975]
[-39.85177612 27.37073898]
[-25.15033531 31.28510666]
[-17.38400459 44.78776932]
[-2.94464087 48.85037613]
[11.49472237 52.91298294]
[25.93408585 56.97558975]
[40.37345123 61.03819656]
[54.81281281 65.10079956]
[69.25217438 69.16340637]
[81.53945923 60.55976486]
[82.66040802 45.60170746]
[83.78136444 30.64365005]
[84.90231323 15.68559265]
[77.30335999 1.15328360]
[86.31651306 -12.54690647]
[102.66979980 -11.32139683]
[109.54037476 3.56911349]
[99.86036682 16.80654335]
[98.73941803 31.76460075]
[97.61846924 46.72265625]
[96.49751282 61.68071365]
[113.79852295 65.44427490]
[127.02313232 76.30746460]
[133.60131836 91.46462250]
[132.57640076 107.36359406]
[146.09092712 113.87184906]
[159.60546875 120.38010406]
[173.11999512 126.88835907]
[186.71461487 133.22763062]
[200.38719177 139.39694214]
[214.77479553 143.63923645]
[229.60725403 145.87487793]
[244.43971252 148.11050415]
[259.27218628 150.34614563]
[274.17785645 152.02560425]
[289.13592529 153.14656067]
[303.47570801 146.46218872]
[315.58920288 155.12895203]
[330.54724121 156.24990845]
[345.50531006 157.37086487]
[360.46334839 158.49180603]
[375.42141724 159.61276245]
[390.37948608 160.73371887]
[405.33752441 161.85466003]
[418.38668823 152.52195740]
[433.77929688 157.04377747]
[439.70748901 171.95137024]
[431.62365723 185.80889893]
[415.72900391 187.98605347]
[404.21658325 176.81272888]
[389.25851440 175.69177246]
[374.30047607 174.57081604]
[359.34240723 173.44987488]
[344.38433838 172.32891846]
[329.42630005 171.20796204]
[314.46823120 170.08702087]
[301.19833374 176.85156250]
[288.01498413 168.10461426]
[273.05691528 166.98365784]
[270.10278320 169.09352112]
[265.94644165 169.81445312]
[261.28231812 168.58221436]
[257.03656006 165.17860413]
[242.20408630 162.94296265]
[227.37162781 160.70733643]
[212.53915405 158.47169495]
[222.70304871 169.50326538]
[226.72415161 183.95423889]
[223.71914673 198.65016174]
[214.34815979 210.36274719]
[200.66972351 216.51905823]
[185.68859863 215.76675415]
[172.69572449 208.27107239]
[164.54525757 195.67861938]
[163.02763367 180.75558472]
[168.47622681 166.78015137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[4 77]
[5 76]
[6 75]
[7 74]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[25 49]
[26 48]
[27 47]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[59 70]
[60 69]
[61 68]
[62 67]
[80 115]
[81 114]
[82 113]
[83 112]
[84 108]
[85 107]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
