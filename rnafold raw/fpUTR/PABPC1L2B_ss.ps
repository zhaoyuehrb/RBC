%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGCGGAUGCGGAUGCGAAUGCGAAGGUGGCGGCCGAGGUGGCGGCCGAGGUGGCGGCUGCGGCGGCCGCCGCGGAUGCAGAUGCGGAUGAGACCCUCGGUGACUGUGAGGGGAACCCAGAUUUUCAG\
) } def
/len { sequence length } bind def

/coor [
[100.11032867 132.02694702]
[96.54747009 117.45621490]
[81.63472748 115.84059906]
[75.03402710 129.31021118]
[75.90920258 145.10719299]
[63.36070633 153.13119507]
[56.76000595 166.60081482]
[58.41266632 182.91647339]
[44.95281601 192.28474426]
[30.22679329 185.06835938]
[29.38346863 168.69090271]
[43.29038239 160.00012207]
[49.89108276 146.53048706]
[48.54378128 131.69694519]
[61.56440353 122.70951843]
[68.16510773 109.23989105]
[66.72841644 94.30885315]
[57.68045425 82.34497833]
[48.63249207 70.38109589]
[33.22761536 68.07296753]
[24.22212410 55.81100464]
[26.51750374 41.13903046]
[17.46954346 29.17514992]
[8.42158413 17.21127129]
[-0.62637657 5.24739122]
[-16.03024864 5.41147184]
[-28.43212891 -3.42293406]
[-33.19758224 -17.69719315]
[-28.69784737 -31.87077332]
[-37.74580765 -43.83465195]
[-46.79376984 -55.79853439]
[-55.84172821 -67.76241302]
[-64.88968658 -79.72629547]
[-73.93765259 -91.69017029]
[-82.98561096 -103.65405273]
[-92.03356934 -115.61792755]
[-101.08152771 -127.58181000]
[-110.12949371 -139.54568481]
[-125.53437042 -141.85382080]
[-134.53985596 -154.11578369]
[-132.24447632 -168.78775024]
[-141.29243469 -180.75163269]
[-150.34039307 -192.71551514]
[-159.38836670 -204.67939758]
[-168.43632507 -216.64328003]
[-182.93176270 -222.98306274]
[-184.43760681 -237.80134583]
[-193.48556519 -249.76522827]
[-202.53352356 -261.72909546]
[-218.16268921 -265.34970093]
[-224.94633484 -279.88800049]
[-217.68061829 -294.19143677]
[-201.93917847 -297.28768921]
[-189.79750061 -286.80154419]
[-190.56964111 -270.77706909]
[-181.52168274 -258.81320190]
[-172.47372437 -246.84930420]
[-158.62545776 -241.36526489]
[-156.47244263 -225.69123840]
[-147.42448425 -213.72735596]
[-138.37652588 -201.76347351]
[-129.32856750 -189.79959106]
[-120.28060150 -177.83570862]
[-105.53802490 -176.04908752]
[-96.19167328 -164.04490662]
[-98.16561127 -148.59364319]
[-89.11765289 -136.62977600]
[-80.06969452 -124.66589355]
[-71.02172852 -112.70201111]
[-61.97377014 -100.73812866]
[-52.92580795 -88.77425385]
[-43.87784958 -76.81037140]
[-34.82988739 -64.84649658]
[-25.78192902 -52.88261414]
[-16.73396873 -40.91873550]
[-1.87069225 -41.38887787]
[10.56649303 -32.91654587]
[15.68994808 -18.57765961]
[11.33750248 -3.80056906]
[20.38546371 8.16331005]
[29.43342400 20.12718964]
[38.48138428 32.09106827]
[53.22396088 33.87769699]
[62.57030869 45.88187790]
[60.59637070 61.33313370]
[69.64433289 73.29701233]
[78.69229126 85.26089478]
[73.67630005 71.12442780]
[75.35597229 56.21876526]
[83.39221191 43.55311203]
[96.16265106 35.68444443]
[111.08914948 34.20131302]
[125.15830231 39.40313339]
[135.52978516 50.23974991]
[140.10978699 64.52343750]
[137.97460938 79.36811066]
[152.19534302 84.13999939]
[166.41607666 88.91188812]
[180.63679504 93.68376923]
[194.85752869 98.45565796]
[209.07824707 103.22754669]
[222.32325745 94.91467285]
[237.80575562 97.11157227]
[248.21537781 108.78092194]
[248.63702393 124.41281891]
[238.87159729 136.62635803]
[223.53004456 139.65467834]
[209.85617065 132.06790161]
[204.30636597 117.44827271]
[190.08563232 112.67638397]
[175.86491394 107.90450287]
[161.64418030 103.13261414]
[147.42346191 98.36072540]
[133.20272827 93.58883667]
[127.68159485 98.66497040]
[137.83367920 109.70738983]
[126.79109955 119.85930634]
[116.63932800 108.81722260]
[111.11819458 113.89335632]
[114.68105316 128.46408081]
[129.55027771 132.09240723]
[141.02247620 142.22389221]
[146.46144104 156.53041077]
[144.61730957 171.72441101]
[135.91387939 184.31443787]
[122.35111237 191.40739441]
[107.04563904 191.37335205]
[93.51454926 184.22015381]
[84.86718750 171.59155273]
[83.09065247 156.38949585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[3 16]
[4 15]
[6 13]
[7 12]
[17 87]
[18 86]
[19 85]
[22 82]
[23 81]
[24 80]
[25 79]
[29 75]
[30 74]
[31 73]
[32 72]
[33 71]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[47 57]
[48 56]
[49 55]
[96 114]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
