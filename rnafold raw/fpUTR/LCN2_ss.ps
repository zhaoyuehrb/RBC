%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCCACCCAGGUGAGCCUCUCACUCGCCACCUCCUCUUCCACCCCUGCCAGGCCCAGCAGCCACCACAGCGCCUGCUUCCUCGGCCCUGAAAUC\
) } def
/len { sequence length } bind def

/coor [
[126.11407471 200.63929749]
[123.21750641 185.92161560]
[120.32093811 171.20394897]
[117.42436981 156.48628235]
[114.52780151 141.76860046]
[111.63123322 127.05093384]
[105.37001801 122.92210388]
[101.38597870 137.38334656]
[86.40137482 138.06286621]
[81.12478638 124.02159119]
[92.84759521 114.66443634]
[86.58638763 110.53560638]
[71.91754913 113.67012024]
[57.24871063 116.80463409]
[42.57987213 119.93914795]
[27.91103363 123.07366180]
[13.24219513 126.20817566]
[6.07603979 140.10710144]
[-8.36750412 146.10026550]
[-23.26863861 141.35787964]
[-31.59150124 128.11915588]
[-29.40629196 112.63500214]
[-17.74479866 102.21657562]
[-2.11322427 101.78313446]
[10.10768223 111.53933716]
[24.77651978 108.40482330]
[39.44535828 105.27030945]
[54.11419678 102.13579559]
[68.78303528 99.00128174]
[83.45187378 95.86676788]
[68.47850800 94.97332001]
[54.27289963 90.15660858]
[41.84405136 81.75876617]
[32.07477188 70.37627411]
[25.65895462 56.81761169]
[23.05230713 42.04583740]
[24.43997383 27.11016083]
[29.72339249 13.07144737]
[38.52728653 0.92684275]
[50.22633362 -8.46103859]
[63.98956680 -14.42538834]
[78.83940125 -16.54257011]
[93.72106934 -14.66220093]
[107.57756042 -8.91784286]
[119.42466736 0.28249288]
[128.42089844 12.28531837]
[133.92726135 26.23809242]
[135.55267334 41.14976883]
[133.18165588 55.96118927]
[126.98262787 69.62033081]
[117.39589691 81.15699768]
[105.10464478 89.75059509]
[119.24561310 84.74730682]
[133.38659668 79.74401855]
[137.60646057 69.45861816]
[146.66796875 63.40887070]
[157.34130859 63.45313263]
[165.98495483 69.32850647]
[180.42013550 65.25106049]
[194.85531616 61.17360687]
[209.29048157 57.09615707]
[223.72566223 53.01870346]
[234.90296936 41.82144928]
[249.25422668 45.80774689]
[254.49249268 31.20157814]
[267.33456421 22.49175835]
[282.84237671 23.02739143]
[295.05291748 32.60251236]
[299.27090454 47.53529739]
[293.87451172 62.08378220]
[280.93872070 70.65377808]
[265.43759155 69.94995117]
[253.33168030 60.24292755]
[243.18687439 71.14853668]
[227.80311584 67.45388794]
[213.36793518 71.53133392]
[198.93275452 75.60878754]
[184.49758911 79.68624115]
[170.06240845 83.76368713]
[157.85423279 98.61093140]
[138.38987732 93.88499451]
[124.24890137 98.88828278]
[110.10793304 103.89156342]
[119.79569244 112.26634979]
[126.34889984 124.15436554]
[129.24546814 138.87203979]
[132.14204407 153.58970642]
[135.03860474 168.30738831]
[137.93518066 183.02505493]
[140.83174133 197.74272156]
[154.61280823 205.13301086]
[160.37130737 219.67170715]
[155.38824463 234.49409485]
[142.01647949 242.60148621]
[126.56974792 240.16583252]
[116.34152222 228.33715820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[52 83]
[53 82]
[54 81]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
