%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGUGUUCCUCGCGGAGCGCCGUCGGGGCCGUGGGCGCCUGCGCGGGCCGGCGCGGGAGCAAGCGGC\
) } def
/len { sequence length } bind def

/coor [
[87.20021057 112.34366608]
[73.01863098 117.23067474]
[62.49223328 129.04191589]
[47.93856430 125.87333679]
[40.56664276 131.80877686]
[33.02026367 130.64770508]
[18.63639641 134.90263367]
[4.25253105 139.15756226]
[-10.13133430 143.41249084]
[-24.51520157 147.66741943]
[-38.89906693 151.92234802]
[-53.28293228 156.17726135]
[-64.17724609 168.43475342]
[-80.18296051 164.86416626]
[-84.83477020 149.13862610]
[-73.34729767 137.43521118]
[-57.53786087 141.79339600]
[-43.15399170 137.53848267]
[-28.77012825 133.28355408]
[-14.38626099 129.02862549]
[-0.00239547 124.77369690]
[14.38147068 120.51876831]
[28.76533699 116.26383972]
[43.05155563 111.69175720]
[52.56359100 100.23006439]
[68.13162231 103.04910278]
[82.31320190 98.16209412]
[86.32382965 88.63500214]
[94.95591736 82.94837189]
[105.29249573 83.02383423]
[113.84063721 88.83588409]
[128.39863586 85.22136688]
[142.95663452 81.60684967]
[157.51463318 77.99233246]
[172.07263184 74.37782288]
[180.25245667 61.12157059]
[195.06782532 57.66332245]
[207.65522766 65.54323578]
[222.21322632 61.92871857]
[233.74230957 51.09401703]
[247.95898438 55.53646088]
[262.51696777 51.92194748]
[277.07498169 48.30743027]
[291.63296509 44.69291687]
[306.19097900 41.07839966]
[320.74896240 37.46388626]
[335.30697632 33.84936905]
[343.24435425 20.18286514]
[358.54183960 16.21258736]
[372.12365723 24.29402733]
[375.93197632 39.63261414]
[367.70739746 53.12823486]
[352.32940674 56.77417374]
[338.92147827 48.40736771]
[324.36349487 52.02188110]
[309.80548096 55.63639832]
[295.24749756 59.25091171]
[280.68948364 62.86542892]
[266.13150024 66.47994232]
[251.57350159 70.09445953]
[241.08569336 80.67062378]
[225.82774353 76.48671722]
[211.26974487 80.10123444]
[203.82983398 92.95359802]
[189.11744690 96.82661438]
[175.68714905 88.93581390]
[161.12915039 92.55033112]
[146.57115173 96.16484833]
[132.01315308 99.77936554]
[117.45515442 103.39387512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[4 24]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[38 63]
[39 62]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
