%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAGUUGCUCUACAGCAUGCCUUAGGUUUCCGGGUGAGGGUUGGGCUCCUUGGUACCAUGUGGGAAGCGCUGUGAAGAGUUGUUGCCUUCCAAGAUAUACCCAAAUUCCCAGUUCCAGCCCGUGUCAUUAAAACUCCGCUGGCGUGAAAG\
) } def
/len { sequence length } bind def

/coor [
[1.39156914 558.87902832]
[-11.23492908 560.25354004]
[-15.78221989 574.54766846]
[-20.32950974 588.84179688]
[-12.84620857 602.76214600]
[-17.47782326 617.87255859]
[-31.47649956 625.20825195]
[-46.53707123 620.41711426]
[-53.72436523 606.34167480]
[-48.77429199 591.33258057]
[-34.62363815 584.29449463]
[-30.07634926 570.00036621]
[-25.52906036 555.70623779]
[-37.56350708 543.46447754]
[-41.79789734 526.73699951]
[-36.98826218 510.07345581]
[-24.36316109 498.05285645]
[-7.31137371 494.02523804]
[-3.35476327 479.55645752]
[0.60184699 465.08770752]
[4.55845737 450.61892700]
[8.51506805 436.15014648]
[12.47167778 421.68139648]
[3.02910089 410.19332886]
[2.15141153 395.17022705]
[10.38442421 382.36120605]
[24.74713707 376.79174805]
[28.70374680 362.32299805]
[16.85522270 353.23773193]
[9.36747265 340.27322388]
[7.40847731 325.38943481]
[11.30763245 310.85037231]
[20.50084496 298.87963867]
[33.61191177 291.32034302]
[48.65847015 289.35137939]
[52.61508179 274.88259888]
[56.57168961 260.41384888]
[60.52830124 245.94508362]
[64.48490906 231.47630310]
[67.99407959 216.89256287]
[71.05247498 202.20765686]
[74.11087036 187.52276611]
[77.16926575 172.83787537]
[80.22766113 158.15296936]
[83.28605652 143.46807861]
[86.34445190 128.78317261]
[89.40284729 114.09827423]
[83.43346405 106.05068970]
[82.81104279 96.05020142]
[87.73648834 87.32453918]
[96.62007141 82.68997192]
[100.27877808 68.14301300]
[96.14122009 52.87241745]
[106.74918365 42.41678238]
[110.40789032 27.86982727]
[100.70130920 20.61061859]
[94.05266571 10.51764393]
[91.23107910 -1.19868183]
[92.54837799 -13.14279556]
[97.82482910 -23.90021515]
[106.41325378 -32.20505142]
[117.27832031 -37.08895874]
[129.12129211 -37.99401474]
[133.66859436 -52.28814316]
[138.21588135 -66.58227539]
[142.76316833 -80.87640381]
[131.75111389 -91.38812256]
[126.41679382 -105.58078766]
[127.76808167 -120.62054443]
[135.48362732 -133.52912903]
[147.98710632 -141.77366638]
[162.76902771 -143.76362610]
[167.31632996 -158.05775452]
[160.30947876 -171.96969604]
[165.12471008 -186.40119934]
[178.43078613 -192.99540710]
[182.97808838 -207.28953552]
[187.52537537 -221.58367920]
[192.07266235 -235.87780762]
[191.69595337 -245.06768799]
[196.86283875 -250.41702271]
[201.70265198 -264.61477661]
[197.99488831 -280.58926392]
[210.15846252 -291.58834839]
[225.68054199 -286.29708862]
[228.59332275 -270.15869141]
[215.90040588 -259.77496338]
[211.06059265 -245.57720947]
[206.36679077 -231.33050537]
[201.81950378 -217.03637695]
[197.27221680 -202.74224854]
[192.72492981 -188.44812012]
[199.77534485 -175.37803650]
[195.36737061 -160.81697083]
[181.61045837 -153.51046753]
[177.06317139 -139.21633911]
[187.97839355 -129.05152893]
[193.42021179 -115.09817505]
[192.25936890 -100.10439301]
[184.67271423 -87.04824829]
[172.11869812 -78.54627228]
[157.05729675 -76.32910919]
[152.51000977 -62.03498459]
[147.96272278 -47.74085236]
[143.41543579 -33.44672394]
[156.20475769 -20.70504379]
[160.83306885 -3.16787577]
[155.95156860 14.38817883]
[142.81373596 27.13675880]
[124.95484161 31.52853203]
[121.29613495 46.07548523]
[125.69538879 60.30559158]
[114.82572937 71.80171967]
[111.16702271 86.34867859]
[117.18895721 103.94979858]
[104.08774567 117.15666962]
[101.02935028 131.84156799]
[97.97095490 146.52647400]
[94.91255951 161.21136475]
[91.85416412 175.89627075]
[88.79576874 190.58116150]
[85.73737335 205.26605225]
[82.67897797 219.95095825]
[84.35907745 225.02368164]
[83.92696381 229.74797058]
[81.88159943 233.36543274]
[78.95368195 235.43292236]
[74.99707031 249.90168762]
[71.04045868 264.37045288]
[67.08384705 278.83923340]
[63.12723923 293.30798340]
[75.07807922 302.65963745]
[82.51803589 315.83877563]
[84.34049988 330.82183838]
[80.29866028 345.32186890]
[71.03843689 357.13766479]
[57.99543762 364.48788452]
[43.17251587 366.27960205]
[39.21590424 380.74838257]
[48.74590683 392.85147095]
[49.31521225 408.06756592]
[40.91492844 420.55352783]
[26.94044495 425.63800049]
[22.98383522 440.10678101]
[19.02722549 454.57553101]
[15.07061481 469.04431152]
[11.11400414 483.51306152]
[7.15739393 497.98184204]
[17.12069511 506.30487061]
[23.15497780 517.74658203]
[24.38760948 530.57611084]
[20.66934013 542.86773682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[18 148]
[19 147]
[20 146]
[21 145]
[22 144]
[23 143]
[27 139]
[28 138]
[35 131]
[36 130]
[37 129]
[38 128]
[39 127]
[40 123]
[41 122]
[42 121]
[43 120]
[44 119]
[45 118]
[46 117]
[47 116]
[51 114]
[52 113]
[54 111]
[55 110]
[63 105]
[64 104]
[65 103]
[66 102]
[72 96]
[73 95]
[76 92]
[77 91]
[78 90]
[79 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
