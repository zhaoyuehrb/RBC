%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUUCUUUUAGUACCUUGUGCCAAAGAGACAUAUCCAAGGUUGAGAUUAGUUUCCAUUUUCUUUGUACUAUUUUCUGGAUAAUAAGACAUUAGACAUUUGAAGAG\
) } def
/len { sequence length } bind def

/coor [
[64.32561493 244.38557434]
[63.87862396 229.39222717]
[66.50769043 214.62443542]
[72.10037994 200.70896912]
[59.33362579 208.58361816]
[46.56687546 216.45826721]
[33.80012512 224.33291626]
[21.03337669 232.20756531]
[8.26662636 240.08221436]
[-4.50012350 247.95686340]
[-8.27804852 260.39517212]
[-19.20204163 266.66708374]
[-31.06435394 263.84426880]
[-44.05473328 271.34426880]
[-57.04511642 278.84426880]
[-70.03549957 286.34426880]
[-80.72941589 299.50012207]
[-96.33150482 292.86602783]
[-94.27575684 276.03717041]
[-77.53549957 273.35388184]
[-64.54511261 265.85388184]
[-51.55473328 258.35388184]
[-38.56435394 250.85389709]
[-30.71666718 235.23181152]
[-12.37477207 235.19010925]
[0.39197803 227.31546021]
[13.15872860 219.44081116]
[25.92547798 211.56616211]
[38.69222641 203.69151306]
[51.45897675 195.81686401]
[64.22573090 187.94221497]
[65.38256836 184.42782593]
[67.69279480 181.24626160]
[71.04756165 178.77891541]
[74.92984009 164.29002380]
[78.81212616 149.80113220]
[82.69441223 135.31225586]
[86.57669830 120.82336426]
[90.45898438 106.33447266]
[76.08152008 110.61097717]
[63.60618973 102.28234100]
[62.04336548 87.36398315]
[72.52181244 76.63075256]
[87.47341156 77.83479309]
[96.09938812 90.10704803]
[102.04058838 76.33380890]
[107.98178101 62.56056595]
[113.92298126 48.78732681]
[112.28443146 33.05119705]
[124.42996216 24.42939949]
[130.37115479 10.65615749]
[136.31236267 -3.11708379]
[142.25355530 -16.89032555]
[137.59263611 -26.93364334]
[139.28283691 -37.65179825]
[146.50733948 -45.44818115]
[156.63488770 -47.84603882]
[163.36688232 -61.25053024]
[157.00743103 -75.53658295]
[161.36837769 -90.55377960]
[174.39060974 -99.21145630]
[189.92544556 -97.42171478]
[200.63778687 -86.02962494]
[201.46960449 -70.41418457]
[192.02815247 -57.94852066]
[176.77136230 -54.51853943]
[170.03938293 -41.11405182]
[172.72357178 -22.05813026]
[156.02679443 -10.94912910]
[150.08560181 2.82411265]
[144.14439392 16.59735489]
[138.20320129 30.37059593]
[140.26670837 45.12157059]
[127.69622040 54.72852325]
[121.75502777 68.50176239]
[115.81382751 82.27500916]
[109.87263489 96.04824829]
[104.94787598 110.21675873]
[101.06558990 124.70565033]
[97.18330383 139.19453430]
[93.30101776 153.68342590]
[89.41873169 168.17231750]
[85.53644562 182.66119385]
[97.26561737 173.31098938]
[110.65924835 166.55741882]
[125.15105438 162.68603516]
[140.12832642 161.86051941]
[154.95780945 164.11576843]
[169.01254272 169.35643005]
[181.69827271 177.36093140]
[192.47866821 187.79086304]
[200.89790344 200.20521545]
[206.60005188 214.07913208]
[209.34399414 228.82601929]
[209.01374817 243.82238770]
[205.62324524 258.43417358]
[199.31585693 272.04360962]
[190.35824585 284.07531738]
[179.12915039 294.02053833]
[166.10333252 301.45880127]
[151.83152771 306.07565308]
[136.91712952 307.67587280]
[121.99072266 306.19180298]
[107.68339539 301.68618774]
[94.60006714 294.34954834]
[83.29389191 284.49203491]
[74.24289703 272.53045654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[13 23]
[14 22]
[15 21]
[16 20]
[34 83]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[45 77]
[46 76]
[47 75]
[48 74]
[50 72]
[51 71]
[52 70]
[53 69]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
