%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGGAAGAUAAAUGAAGGGGUCUAGAUGUAAAUGUCAGUGGAAAGGAGAGCUACCAUCACUAAGGGCUGAAAACACAGUUAAAUCACUUUCAAAGUUAAAAGACUAUUAAGAACACAAG\
) } def
/len { sequence length } bind def

/coor [
[83.95689392 199.13623047]
[92.26217651 184.99571228]
[91.87909698 170.00059509]
[91.49601746 155.00549316]
[91.11293793 140.01037598]
[83.21479797 136.27827454]
[76.47959137 131.06030273]
[71.16919708 124.67552948]
[67.46421814 117.48468018]
[65.45858765 109.87046814]
[65.15877533 102.21758270]
[66.48740387 94.89341736]
[69.29100037 88.23049164]
[73.35132599 82.51131439]
[78.39946747 77.95654297]
[84.13200378 74.71671295]
[79.60619354 60.41576767]
[75.08039093 46.11482239]
[70.55458069 31.81387711]
[66.02877045 17.51292992]
[61.50296021 3.21198487]
[56.79489136 -11.02999878]
[51.90533447 -25.21069717]
[47.01577377 -39.39139557]
[35.20263672 -49.91566849]
[38.36860657 -64.46990967]
[33.47904587 -78.65060425]
[28.58948898 -92.83130646]
[16.77635002 -103.35557556]
[19.94231987 -117.90982056]
[15.05276108 -132.09051514]
[10.16320229 -146.27120972]
[-3.74966145 -148.23718262]
[-15.38853455 -155.99012756]
[-22.49564743 -167.95706177]
[-23.72225761 -181.75453186]
[-18.88426399 -194.66319275]
[-8.98717976 -204.16378784]
[-13.51298904 -218.46473694]
[-18.03879738 -232.76568604]
[-22.56460762 -247.06661987]
[-27.09041595 -261.36758423]
[-42.00424957 -264.76239014]
[-53.14289856 -275.09811401]
[-57.58304977 -289.52557373]
[-54.22795105 -304.14062500]
[-44.07626343 -315.04055786]
[-48.60206985 -329.34149170]
[-59.72568893 -336.01934814]
[-63.16001129 -348.11288452]
[-57.57472229 -358.92483521]
[-61.73382950 -373.33670044]
[-76.10263824 -379.50689697]
[-83.09745026 -393.49285889]
[-79.41553497 -408.69079590]
[-66.79537964 -417.92474365]
[-51.19583511 -416.83468628]
[-39.98252869 -405.93533325]
[-38.45003891 -390.37301636]
[-47.32196426 -377.49578857]
[-43.16285706 -363.08395386]
[-29.88309097 -351.68792725]
[-34.30112457 -333.86730957]
[-29.77531624 -319.56637573]
[-15.20100975 -316.49142456]
[-4.04847336 -306.46762085]
[0.62017941 -292.11248779]
[-2.54410815 -277.25030518]
[-12.78947067 -265.89337158]
[-8.26366138 -251.59243774]
[-3.73785233 -237.29148865]
[0.78795671 -222.99053955]
[5.31376553 -208.68960571]
[21.12479401 -205.62506104]
[33.32514572 -194.96899414]
[38.54862976 -179.53680420]
[35.29151917 -163.47802734]
[24.34390068 -151.16076660]
[29.23345947 -136.98007202]
[34.12302017 -122.79937744]
[45.58642578 -113.28940582]
[42.77018738 -97.72086334]
[47.65974426 -83.54016876]
[52.54930496 -69.35946655]
[64.01271057 -59.84949493]
[61.19647217 -44.28095627]
[66.08602905 -30.10025597]
[70.97559357 -15.91955757]
[76.19100952 -10.55947781]
[75.80390930 -1.31382406]
[80.32971954 12.98712158]
[84.85552216 27.28806686]
[89.38133240 41.58901215]
[93.90714264 55.88996124]
[98.43295288 70.19090271]
[127.71912384 77.95286560]
[139.39514160 111.30636597]
[152.38551331 118.80636597]
[165.37590027 126.30636597]
[178.36627197 133.80636597]
[194.75650024 133.26527405]
[203.18928528 147.33013916]
[194.98971558 161.53221130]
[178.59278870 161.26162720]
[170.86627197 146.79673767]
[157.87590027 139.29673767]
[144.88551331 131.79673767]
[131.89514160 124.29674530]
[125.44836426 128.12937927]
[133.25280762 140.93917847]
[141.05725098 153.74896240]
[148.44161987 166.80541992]
[135.54820251 174.47091675]
[127.60526276 161.74623108]
[120.08003998 148.77044678]
[112.55481720 135.79466248]
[106.10804749 139.62730408]
[106.49112701 154.62240601]
[106.87420654 169.61752319]
[107.25728607 184.61262512]
[116.27375793 198.31062317]
[108.67833710 212.84478760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 117]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 88]
[23 87]
[24 86]
[26 84]
[27 83]
[28 82]
[30 80]
[31 79]
[32 78]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[47 64]
[48 63]
[51 61]
[52 60]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
