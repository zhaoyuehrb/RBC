%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGUCUCUGGGAAGAAGGCGGCGGCGGCGAAAGGCGGGGGUGCUGUGGGGGCCGGGCCGUGUUUACACAGCGGCGGGCGGGCGCGGACGCGGAACCCGGCGCGGCGGCGGCACG\
) } def
/len { sequence length } bind def

/coor [
[90.60015869 123.89160919]
[81.27031708 135.63699341]
[71.94048309 147.38238525]
[62.61064529 159.12777710]
[60.08559418 174.74618530]
[46.11086273 179.89944458]
[43.58581161 195.51785278]
[29.61108208 200.67111206]
[20.28124428 212.41650391]
[10.95140648 224.16189575]
[9.07485580 240.45332336]
[-6.07774782 246.72473145]
[-18.91870499 236.52464294]
[-16.23833847 220.34602356]
[-0.79398108 214.83206177]
[8.53585625 203.08666992]
[17.86569405 191.34127808]
[19.72341156 176.56298828]
[34.36547470 170.56961060]
[36.22319412 155.79130554]
[50.86525726 149.79792786]
[60.19509506 138.05255127]
[69.52493286 126.30715942]
[78.85476685 114.56176758]
[76.70314026 110.78990936]
[75.21794891 106.70938873]
[74.44168854 102.43692780]
[59.37274933 107.25747681]
[48.45034790 97.13076019]
[33.75348663 94.13037109]
[19.63052750 101.74099731]
[4.93192959 95.31208801]
[0.93320215 79.77536774]
[10.70182610 67.04927063]
[26.74414825 66.89617157]
[36.75387192 79.43351746]
[51.45073318 82.43389893]
[65.46845245 77.39875031]
[77.44207764 87.74006653]
[88.69154358 76.95038605]
[104.10929871 74.65676880]
[118.01237488 81.70463562]
[131.19943237 74.55610657]
[144.38648987 67.40757751]
[157.57354736 60.25904465]
[170.76060486 53.11051559]
[183.94766235 45.96198273]
[197.13471985 38.81345367]
[205.57962036 25.43457413]
[220.45599365 26.17130280]
[233.44636536 18.67130280]
[241.16094971 4.85841799]
[256.05541992 4.79557133]
[268.83975220 -3.05049086]
[281.62411499 -10.89655304]
[294.40844727 -18.74261475]
[307.19277954 -26.58867645]
[319.97711182 -34.43473816]
[332.54620361 -42.62120819]
[344.89096069 -51.14217758]
[357.23571777 -59.66315079]
[369.58047485 -68.18412018]
[381.92523193 -76.70509338]
[394.26998901 -85.22606659]
[406.61474609 -93.74703217]
[418.95950317 -102.26800537]
[405.18103027 -108.19708252]
[400.96148682 -122.59136200]
[409.35824585 -135.02093506]
[424.28717041 -136.47947693]
[434.93093872 -125.91014862]
[433.57708740 -110.97119904]
[446.95132446 -117.76310730]
[460.32553101 -124.55501556]
[469.12658691 -137.70234680]
[483.97781372 -136.56648254]
[490.30273438 -151.31011963]
[505.81082153 -155.41848755]
[518.60559082 -145.74000549]
[518.87200928 -129.69915771]
[506.40570068 -119.60112762]
[490.76971436 -123.19225311]
[482.92529297 -110.53072357]
[467.11746216 -111.18078613]
[453.74322510 -104.38887787]
[440.36898804 -97.59696960]
[427.48046875 -89.92324829]
[415.13571167 -81.40227509]
[402.79095459 -72.88130188]
[390.44619751 -64.36033630]
[378.10144043 -55.83936310]
[365.75668335 -47.31838989]
[353.41192627 -38.79742050]
[341.06716919 -30.27644920]
[339.32867432 -25.69992638]
[334.62298584 -22.22648048]
[327.82318115 -21.65040016]
[315.03884888 -13.80433846]
[302.25448608 -5.95827675]
[289.47015381 1.88778543]
[276.68582153 9.73384762]
[263.90148926 17.57991028]
[257.10131836 30.83159256]
[241.29243469 31.45564079]
[239.31080627 35.93225098]
[234.42544556 39.14810181]
[227.60452271 39.35836029]
[220.10285950 52.22592926]
[204.28324890 52.00051117]
[191.09619141 59.14904404]
[177.90913391 66.29756927]
[164.72207642 73.44610596]
[151.53501892 80.59463501]
[138.34796143 87.74316406]
[125.16090393 94.89169312]
[122.34397888 112.64564514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[6 19]
[8 17]
[9 16]
[10 15]
[27 39]
[29 37]
[30 36]
[42 115]
[43 114]
[44 113]
[45 112]
[46 111]
[47 110]
[48 109]
[50 107]
[51 104]
[53 102]
[54 101]
[55 100]
[56 99]
[57 98]
[58 97]
[59 94]
[60 93]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[72 86]
[73 85]
[74 84]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
