%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCUCUGGGCGGAGAUCUGCUGCCGCGUUCUACCCUUCCGGCCCGUGUUCUAUCCGCCGCCUCCACCUUCCAUCCGGCGCCGGCUUUCGGCGCGACGGUCGCCGCGUUCCAUCGUCGCGCGGCCCUUCGGGCGCCCGAGCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[118.42951202 192.58541870]
[121.30603027 180.41526794]
[129.15052795 170.58329773]
[123.30088806 156.77091980]
[117.45124054 142.95854187]
[111.60160065 129.14616394]
[100.26863098 128.51960754]
[90.95696259 124.02595520]
[84.79107666 117.01566315]
[82.21122742 109.08094025]
[82.96689606 101.75371552]
[67.98773193 102.54402161]
[53.00856400 103.33432770]
[38.02939606 104.12462616]
[23.05023193 104.91493225]
[8.07106495 105.70523071]
[-6.88810968 106.81116486]
[-21.82064247 108.23223877]
[-34.82572937 117.24213409]
[-48.22877502 110.74539185]
[-54.68037033 124.61349487]
[-67.12510681 133.33274841]
[-82.16333771 134.64349365]
[-95.74764252 128.29348755]
[-104.27217102 116.07882690]
[-119.20470428 117.49989319]
[-134.13723755 118.92096710]
[-149.06977844 120.34203339]
[-157.38201904 124.29373169]
[-164.33158875 121.63224792]
[-170.93711853 135.49813843]
[-183.59968567 144.19035339]
[-198.91314697 145.37075806]
[-212.75827026 138.72180176]
[-221.41075134 126.03205109]
[-222.54315186 110.71495819]
[-215.85083008 96.89075470]
[-203.13401794 88.27808380]
[-187.81344604 87.19371033]
[-174.01029968 93.92932129]
[-165.43753052 106.67307281]
[-150.49084473 105.40950012]
[-135.55830383 103.98843384]
[-120.62577820 102.56735992]
[-105.69324493 101.14628601]
[-99.62570953 87.54296112]
[-87.48301697 78.74461365]
[-72.46749115 77.19526672]
[-58.60148621 83.41062927]
[-49.64984512 95.81285858]
[-37.71283340 86.90460205]
[-23.24171257 93.29970551]
[-8.30918026 91.87863159]
[-4.59408951 88.78014374]
[1.12512624 88.02747345]
[7.28076220 90.72606659]
[22.25992775 89.93576050]
[37.23909378 89.14546204]
[52.21826172 88.35515594]
[67.19742584 87.56485748]
[82.17658997 86.77455139]
[92.50000000 75.89212036]
[92.50000000 60.89212036]
[92.50000000 45.89212036]
[81.60544586 34.75899506]
[81.81912994 19.54686356]
[92.50000000 9.22918224]
[84.76270294 -4.57099009]
[92.50000000 -17.29826164]
[92.50000000 -32.29826355]
[79.86774445 -41.30968094]
[74.97674561 -56.03577042]
[79.70770264 -70.81405640]
[92.24146271 -79.96198273]
[107.75853729 -79.96198273]
[120.29229736 -70.81405640]
[125.02325439 -56.03577042]
[120.13225555 -41.30968094]
[107.50000000 -32.29826355]
[107.50000000 -17.29826164]
[115.23729706 -4.57099009]
[107.50000000 9.22918224]
[118.18087006 19.54686356]
[118.39455414 34.75899506]
[107.50000000 45.89212036]
[107.50000000 60.89212036]
[107.50000000 75.89212036]
[113.20561218 80.75997162]
[118.93872833 66.89882660]
[133.89308167 68.06820679]
[137.40190125 82.65203857]
[124.61683655 90.49568176]
[130.32244873 95.36353302]
[145.13528442 93.00140381]
[159.94813538 90.63926697]
[174.76097107 88.27713013]
[189.57382202 85.91500092]
[204.38665771 83.55286407]
[219.19950867 81.19072723]
[234.01234436 78.82859802]
[248.82519531 76.46646118]
[263.63803101 74.10432434]
[268.46746826 59.58071899]
[279.50122070 48.97340775]
[294.20379639 44.71987534]
[309.19668579 47.79755402]
[321.03460693 57.49921417]
[326.99728394 71.59548187]
[325.71456909 86.84714508]
[317.48120117 99.74948120]
[304.18914795 107.33762360]
[288.89282227 107.86787415]
[275.10723877 101.21839142]
[266.00018311 88.91716766]
[251.18733215 91.27930450]
[236.37448120 93.64144135]
[221.56164551 96.00357056]
[206.74879456 98.36570740]
[191.93595886 100.72784424]
[177.12310791 103.08997345]
[162.31027222 105.45211029]
[147.49742126 107.81424713]
[132.68458557 110.17637634]
[125.41397095 123.29652405]
[131.26361084 137.10890198]
[137.11326599 150.92127991]
[142.96290588 164.73364258]
[160.69181824 168.25593567]
[172.69157410 181.56375122]
[174.33828735 199.24993896]
[165.16448975 214.27737427]
[171.59121704 227.83087158]
[178.01794434 241.38436890]
[184.44467163 254.93786621]
[190.87139893 268.49136353]
[205.83941650 273.56420898]
[212.76133728 287.77206421]
[207.53050232 302.68560791]
[193.25028992 309.45690918]
[178.39286804 304.06869507]
[171.77290344 289.71768188]
[177.31790161 274.91809082]
[170.89117432 261.36459351]
[164.46444702 247.81109619]
[158.03771973 234.25759888]
[151.61100769 220.70410156]
[139.40388489 220.24543762]
[128.49806213 214.58311462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[5 125]
[6 124]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 53]
[18 52]
[20 50]
[25 45]
[26 44]
[27 43]
[28 42]
[30 41]
[62 87]
[63 86]
[64 85]
[67 82]
[69 80]
[70 79]
[93 123]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
[131 146]
[132 145]
[133 144]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
