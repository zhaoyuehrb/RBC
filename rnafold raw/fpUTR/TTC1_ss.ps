%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAUUAGUCGUCAUCGACGGAAGUGCACCUGACUGAGCGGAAGUAGGAGCUCUCAGAGGCUAAGAAGGUGGAGACCGGAGAAGCUGUGAGGUUCUUUAGCGUCACCUCCCUCACUGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[75.94007874 123.72223663]
[66.75849152 135.58387756]
[57.57690430 147.44551086]
[62.42155075 160.41857910]
[60.21134186 173.97917175]
[51.63463593 184.57359314]
[39.03374863 189.47970581]
[25.76610184 187.50588989]
[16.28697014 199.13111877]
[6.80784035 210.75636292]
[-2.67129016 222.38159180]
[-4.75582170 238.64772034]
[-19.98731041 244.72503662]
[-32.69690704 234.36172485]
[-29.81006622 218.21867371]
[-14.29652500 212.90246582]
[-4.81739426 201.27722168]
[4.66173601 189.65199280]
[14.14086628 178.02674866]
[9.43111515 162.35586548]
[15.00704002 146.79598999]
[28.87290764 137.49890137]
[45.71526718 138.26391602]
[54.89685822 126.40228271]
[64.07844543 114.54064178]
[61.99503326 99.68603516]
[49.90460587 90.80788422]
[34.48275757 92.99975586]
[22.34782219 83.82381439]
[20.35324287 69.10792542]
[8.26281834 60.22977448]
[-3.82760596 51.35161591]
[-15.91802979 42.47346115]
[-22.61994934 41.34047318]
[-27.01313972 37.51148224]
[-28.38064003 32.82668304]
[-40.00587463 23.34755135]
[-51.63111115 13.86842155]
[-63.25634384 4.38929081]
[-77.58492279 9.91988754]
[-92.75663757 7.52938366]
[-104.69038391 -2.13918710]
[-110.17604065 -16.48502731]
[-107.73799133 -31.64917946]
[-98.03206635 -43.55256271]
[-83.66909790 -48.99322510]
[-68.51266479 -46.50765610]
[-56.63976669 -36.76446152]
[-51.24415207 -22.38451385]
[-53.77721405 -7.23594427]
[-42.15198135 2.24318647]
[-30.52674484 11.72231674]
[-18.90151024 21.20144844]
[-7.03987408 30.38303757]
[5.05054998 39.26119232]
[17.14097404 48.13934708]
[29.23139763 57.01750565]
[43.86950302 54.51521683]
[56.25738525 63.34669876]
[58.78276443 78.71745300]
[70.87318420 87.59561157]
[78.69738770 78.64414978]
[88.83230591 73.59442902]
[99.56299591 72.82752991]
[109.23795319 76.03708649]
[116.52252960 82.33482361]
[120.58248138 90.44125366]
[135.00372314 86.31481171]
[149.42498779 82.18836975]
[163.84623718 78.06192780]
[178.26748657 73.93548584]
[192.68873596 69.80904388]
[203.82794189 58.57390213]
[218.19265747 62.51144791]
[225.68409729 57.08303833]
[233.03167725 58.46811295]
[244.45193481 47.51876068]
[258.71228027 51.81893921]
[273.23345947 48.05915451]
[287.75460815 44.29936600]
[302.27575684 40.53957748]
[316.79690552 36.77978897]
[331.31808472 33.02000046]
[342.73834229 22.07065010]
[356.99868774 26.37083054]
[371.51983643 22.61104202]
[385.33782959 12.78760052]
[398.60253906 23.34616089]
[392.12866211 39.01540375]
[375.27963257 37.13219833]
[360.75848389 40.89198685]
[350.37686157 51.57241440]
[335.07785034 47.54115677]
[320.55670166 51.30094528]
[306.03555298 55.06073380]
[291.51440430 58.82052231]
[276.99322510 62.58031082]
[262.47207642 66.34009552]
[252.09046936 77.02052307]
[236.79147339 72.98926544]
[222.31910706 76.93270111]
[212.21139526 87.87269592]
[196.81517029 84.23029327]
[182.39392090 88.35673523]
[167.97267151 92.48317719]
[153.55142212 96.60961914]
[139.13017273 100.73606110]
[124.70892334 104.86250305]
[118.96866608 118.72069550]
[126.24819946 131.83589172]
[133.52772522 144.95109558]
[148.49415588 150.72911072]
[153.17050171 166.07548523]
[143.96946716 179.21780396]
[127.94930267 180.07440186]
[117.39929962 167.98815918]
[120.41252899 152.23062134]
[113.13299561 139.11543274]
[105.85346985 126.00022888]
[98.37512207 125.43073273]
[101.91356659 140.00740051]
[89.14366150 147.87693787]
[77.71329498 138.16372681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[8 19]
[9 18]
[10 17]
[11 16]
[26 61]
[27 60]
[30 57]
[31 56]
[32 55]
[33 54]
[36 53]
[37 52]
[38 51]
[39 50]
[67 108]
[68 107]
[69 106]
[70 105]
[71 104]
[72 103]
[74 101]
[76 100]
[78 98]
[79 97]
[80 96]
[81 95]
[82 94]
[83 93]
[85 91]
[86 90]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
