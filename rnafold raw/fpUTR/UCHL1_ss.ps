%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGUCUGGCCGGCGCUUUAUAGCUGCAGCCUGGGCGGCUCCGCUAGCUGUUUUUCGUCUUCCCUAGGCUAUUUCUGCCGGGCGCUCCGCGAAG\
) } def
/len { sequence length } bind def

/coor [
[100.97617340 299.46157837]
[102.82575226 284.34539795]
[110.66930389 271.29171753]
[123.14787292 262.56216431]
[120.25130463 247.84448242]
[117.35472870 233.12680054]
[114.45816040 218.40913391]
[111.56159210 203.69146729]
[108.66502380 188.97378540]
[105.76845551 174.25611877]
[102.87188721 159.53843689]
[99.97531891 144.82077026]
[89.92595673 133.82716370]
[94.85274506 118.79262543]
[82.60429382 110.13378906]
[67.76332092 112.31221771]
[52.95956802 114.73068237]
[38.19692230 117.38854980]
[23.43427467 120.04640961]
[11.26592541 131.04019165]
[-4.25384426 125.74220276]
[-7.15962553 109.60254669]
[5.53780031 99.22432709]
[20.77640915 105.28376770]
[35.53905869 102.62590027]
[50.30170441 99.96803284]
[56.44344330 95.60160828]
[65.58489227 97.47124481]
[80.42586517 95.29281616]
[91.11799622 84.77244568]
[93.53646088 69.96869659]
[95.95492554 55.16494370]
[98.37339020 40.36119080]
[100.79185486 25.55744171]
[103.21031952 10.75369167]
[105.62877655 -4.05005932]
[108.04724121 -18.85380936]
[107.56151581 -33.84594345]
[104.18988037 -48.46210098]
[100.81824493 -63.07825851]
[97.44660950 -77.69441986]
[94.07497406 -92.31057739]
[81.28814697 -101.99956512]
[81.03490448 -118.04061890]
[93.50952148 -128.12841797]
[109.14253235 -124.52445221]
[115.94162750 -109.99338531]
[108.69113159 -95.68221283]
[112.06276703 -81.06605530]
[115.43440247 -66.44989777]
[118.80603790 -51.83373642]
[122.17767334 -37.21757889]
[129.24530029 -50.44817734]
[141.24311829 -59.45108032]
[155.92193604 -62.53853607]
[170.52993774 -59.13175201]
[182.32859802 -49.86938095]
[189.10606384 -36.48782349]
[189.59176636 -21.49568939]
[183.69464111 -7.70351839]
[172.52023315 2.30310464]
[158.16336060 6.64826059]
[143.31549072 4.51737261]
[130.76011658 -3.69008660]
[122.85099792 -16.43534660]
[120.43253326 -1.63159549]
[118.01406860 13.17215538]
[115.59560394 27.97590637]
[113.17713928 42.77965546]
[110.75867462 57.58340836]
[108.34020996 72.38716125]
[105.92174530 87.19091034]
[111.42993164 90.28579712]
[115.30855560 95.74496460]
[116.55725098 102.70964813]
[114.62483215 109.90988159]
[109.57041931 115.89604950]
[119.82696533 127.94237518]
[114.69299316 141.92420959]
[117.58956146 156.64187622]
[120.48612976 171.35954285]
[123.38269806 186.07722473]
[126.27926636 200.79489136]
[129.17584229 215.51255798]
[132.07240295 230.23023987]
[134.96897888 244.94790649]
[137.86553955 259.66558838]
[152.72145081 263.01547241]
[164.92660522 272.12338257]
[172.36636353 285.41134644]
[173.75177002 300.57711792]
[168.84277344 314.99313354]
[158.48989868 326.16174316]
[144.48684692 332.14791870]
[129.25971985 331.91452026]
[115.44670868 325.50195312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[14 77]
[15 29]
[16 28]
[17 26]
[18 25]
[19 24]
[30 72]
[31 71]
[32 70]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
