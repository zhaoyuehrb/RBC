%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUGCGGCUGCGCACUGGGCGCUCUCGCCCGAGAAGCCGCAGUCUCGAGAGCGUCAACGAGGUGUUUCGGUAGUCUCUGGCCAUCCUUUCUGCGCACCCGGUGUCGCUGGGCUGCACCCCGGGCGGGGACGUCCGCCGGGCACGGGAGGGGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[89.59442139 116.83060455]
[77.45915985 125.64738464]
[65.32390594 134.46417236]
[58.70720673 148.83531189]
[43.86275482 150.05661011]
[31.72750092 158.87338257]
[19.59224510 167.69017029]
[7.45699072 176.50694275]
[-4.67826414 185.32371521]
[-16.81351852 194.14050293]
[-28.94877434 202.95727539]
[-26.94449234 214.33374023]
[-29.34423828 225.58076477]
[-35.75961304 235.06312561]
[-45.22129440 241.41706848]
[-56.32532501 243.74630737]
[-67.44140625 241.74833679]
[-76.95222473 235.75309753]
[-89.58547974 243.84017944]
[-102.21874237 251.92726135]
[-114.85199738 260.01434326]
[-127.48526001 268.10140991]
[-140.11851501 276.18847656]
[-147.17445374 290.99206543]
[-163.54176331 292.01330566]
[-172.38317871 278.20166016]
[-164.60339355 263.76535034]
[-148.20559692 263.55520630]
[-135.57232666 255.46813965]
[-122.93907166 247.38107300]
[-110.30581665 239.29399109]
[-97.67255402 231.20692444]
[-85.03929901 223.11984253]
[-85.06227875 204.48268127]
[-73.80741119 189.44097900]
[-55.63481140 184.12055969]
[-37.76555252 190.82202148]
[-25.63029861 182.00524902]
[-13.49504280 173.18846130]
[-1.35978818 164.37168884]
[10.77546692 155.55490112]
[22.91072083 146.73812866]
[35.04597473 137.92135620]
[40.79468536 124.18083954]
[56.50712967 122.32891083]
[68.64238739 113.51213074]
[80.77764130 104.69535065]
[81.25822449 88.06554413]
[95.17117310 75.82704163]
[86.35439301 63.69178391]
[77.53761292 51.55653000]
[68.72083282 39.42127228]
[61.10394669 34.28378677]
[59.85285187 26.96008682]
[47.37178040 28.36483002]
[35.55300522 24.33318901]
[26.63631439 15.69445038]
[22.28359222 4.14468288]
[23.26929283 -8.08602905]
[29.34339523 -18.66413307]
[21.25632095 -31.29739189]
[13.16924572 -43.93064880]
[5.08217049 -56.56390762]
[-9.72140503 -63.61984253]
[-10.74266052 -79.98715973]
[3.06898403 -88.82856750]
[17.50529289 -81.04878235]
[17.71542931 -64.65098572]
[25.80250359 -52.01772308]
[33.88957977 -39.38446426]
[41.97665405 -26.75120735]
[59.59451294 -26.55806160]
[73.71764374 -15.76428795]
[78.61513519 1.48604453]
[72.15887451 18.38326836]
[80.85608673 30.60449600]
[89.67286682 42.73974991]
[98.48964691 54.87500381]
[107.30642700 67.01026154]
[120.86626434 73.42358398]
[135.84025574 72.54052734]
[150.81423950 71.65746307]
[165.78822327 70.77439880]
[180.76220703 69.89133453]
[189.19563293 66.24607849]
[196.03829956 69.14086914]
[211.02673340 68.55197144]
[226.01516724 67.96307373]
[241.00360107 67.37418365]
[255.99203491 66.78528595]
[270.98046875 66.19638824]
[285.96890259 65.60749054]
[300.95083618 64.87147522]
[315.92483521 63.98841095]
[330.89880371 63.10535049]
[343.74468994 24.33408928]
[356.68569946 16.74922943]
[369.62670898 9.16436863]
[382.49264526 1.45282722]
[395.28225708 -6.38465118]
[408.07183838 -14.22212982]
[420.86145020 -22.05960846]
[433.65106201 -29.89708710]
[446.44064331 -37.73456573]
[456.78652954 -51.16584015]
[472.55691528 -44.94243240]
[470.94241333 -28.06553459]
[454.27813721 -24.94496346]
[441.48852539 -17.10748482]
[428.69891357 -9.27000523]
[415.90933228 -1.43252718]
[403.11972046 6.40495110]
[390.33010864 14.24242973]
[386.24890137 20.45094109]
[377.21157837 22.10538483]
[364.27056885 29.69024467]
[351.32952881 37.27510452]
[351.69754028 44.76607132]
[365.04043579 51.61935425]
[352.43356323 59.74800491]
[352.80157471 67.23896790]
[366.42370605 73.51886749]
[380.04586792 79.79875946]
[393.66799927 86.07865906]
[402.82400513 86.83931732]
[407.49407959 92.61790466]
[420.99032593 99.16404724]
[434.48654175 105.71018219]
[447.98275757 112.25632477]
[464.29159546 110.53765106]
[473.71426392 123.95947266]
[466.55752563 138.71458435]
[450.18362427 139.62417603]
[441.43661499 125.75254822]
[427.94039917 119.20640564]
[414.44418335 112.66027069]
[400.94796753 106.11412811]
[387.38812256 99.70080566]
[373.76596069 93.42090607]
[360.14382935 87.14101410]
[346.52166748 80.86111450]
[331.78186035 78.07933044]
[316.80789185 78.96239471]
[301.83389282 79.84545898]
[295.30792236 83.39701080]
[286.55780029 80.59592438]
[271.56936646 81.18482208]
[256.58093262 81.77371979]
[241.59249878 82.36261749]
[226.60406494 82.95151520]
[211.61563110 83.54041290]
[196.62719727 84.12931061]
[181.64526367 84.86532593]
[166.67127991 85.74838257]
[151.69729614 86.63144684]
[136.72331238 87.51451111]
[121.74932861 88.39756775]
[123.12191010 103.81661224]
[115.20313263 116.20339203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[49 79]
[50 78]
[51 77]
[52 76]
[54 75]
[60 71]
[61 70]
[62 69]
[63 68]
[80 157]
[81 156]
[82 155]
[83 154]
[84 153]
[86 152]
[87 151]
[88 150]
[89 149]
[90 148]
[91 147]
[92 146]
[93 144]
[94 143]
[95 142]
[96 117]
[97 116]
[98 115]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
[121 141]
[122 140]
[123 139]
[124 138]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
