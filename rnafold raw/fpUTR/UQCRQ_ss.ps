%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCCGGAAAUGACGAACGAGUCAACCGGAUCGGUGACUGUGGAGGGCGAGCUGAGCCCUGGCCGCCGCCACA\
) } def
/len { sequence length } bind def

/coor [
[101.59941864 132.58525085]
[91.24317932 131.42729187]
[81.78036499 127.06291962]
[74.17644501 119.93741608]
[69.20719910 110.77776337]
[54.28937149 112.34569550]
[39.37154388 113.91362000]
[24.45371628 115.48154449]
[17.86614227 124.59817505]
[7.49842358 128.34599304]
[-2.96320820 125.65964508]
[-9.94748497 117.71556091]
[-24.94419479 118.02969360]
[-39.94090652 118.34383392]
[-54.93761444 118.65796661]
[-65.69417572 130.23690796]
[-81.49061584 130.73492432]
[-92.95519257 119.85655212]
[-93.28617096 104.05573273]
[-82.28719330 92.70681000]
[-66.48374939 92.54290771]
[-55.25175095 103.66125488]
[-40.25504303 103.34712219]
[-25.25833130 103.03298187]
[-10.26162148 102.71884918]
[5.17218399 91.37147522]
[22.88578987 100.56372070]
[37.80361557 98.99578857]
[52.72144699 97.42786407]
[67.63927460 95.85993958]
[76.00267029 77.89830780]
[93.21698761 68.08843994]
[112.93309021 70.04850769]
[127.87908173 83.05557251]
[142.14492798 78.42031860]
[156.41078186 73.78506470]
[170.67662048 69.14980316]
[174.54957581 64.79186249]
[179.28215027 62.78139496]
[183.74215698 63.02355576]
[187.02990723 64.95099640]
[201.76420593 62.14027786]
[216.49851990 59.32955933]
[231.23283386 56.51883698]
[245.83651733 53.09357452]
[260.28396606 49.05977631]
[274.73138428 45.02598190]
[289.17883301 40.99218369]
[303.62628174 36.95838547]
[309.92102051 22.64370346]
[323.96716309 15.77060699]
[339.13256836 19.58436012]
[348.25659180 32.28422928]
[347.03109741 47.87371826]
[336.03479004 58.99195480]
[320.45977783 60.38924026]
[307.66006470 51.40582275]
[293.21261597 55.43962097]
[278.76519775 59.47341919]
[264.31774902 63.50721741]
[249.87031555 67.54101562]
[246.67149353 71.44780731]
[240.86837769 73.19821167]
[234.04354858 71.25314331]
[219.30923462 74.06386566]
[204.57493591 76.87458801]
[189.84062195 79.68530273]
[175.31187439 83.41565704]
[161.04603577 88.05091095]
[146.78018188 92.68616486]
[132.51432800 97.32141876]
[131.70027161 107.71035004]
[127.65194702 117.31261444]
[120.78238678 125.14854431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 30]
[6 29]
[7 28]
[8 27]
[12 25]
[13 24]
[14 23]
[15 22]
[34 71]
[35 70]
[36 69]
[37 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
