%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGGGAGAGAAGGGAGGGUUGGGGGAAGUGUGGAAAACCUGAACCUGAGCUGCUGUCGCCUGAGGAAGAUUUGGUGGGAGGAGAAGCAGAGGGGAAGAGACGGGUUGAGAGUGAGGUGAGGAGGGCAUCUAGGUCACUGCUCCCGGGGGGCACAAAGUUCGCG\
) } def
/len { sequence length } bind def

/coor [
[122.50329590 248.30535889]
[136.79025269 252.87620544]
[125.79795837 242.82539368]
[129.36041260 227.41047668]
[125.15919495 213.01083374]
[120.95796967 198.61119080]
[116.75675201 184.21154785]
[112.55553436 169.81190491]
[108.35430908 155.41226196]
[100.51235962 156.03614807]
[92.66031647 155.55575562]
[84.95290375 153.98052979]
[77.54203033 151.34153748]
[70.57372284 147.69075012]
[64.18531799 143.10014343]
[58.50270462 137.66015625]
[53.63787079 131.47802734]
[49.68668365 124.67556000]
[35.45633316 129.41867065]
[21.22598267 134.16178894]
[6.99563217 138.90490723]
[-7.23471785 143.64802551]
[-17.88020897 155.35203552]
[-32.40103912 152.03619385]
[-46.63138962 156.77931213]
[-60.86174011 161.52243042]
[-62.29689026 176.68357849]
[-69.78021240 189.94705200]
[-82.01517487 199.01487732]
[-96.88200378 202.31600952]
[-111.80491638 199.27850342]
[-124.19844055 190.42860413]
[-131.91531372 177.29965210]
[-133.61854553 162.16627502]
[-129.01304626 147.65045166]
[-118.89674377 136.26712036]
[-105.02233887 129.98851013]
[-89.79366302 129.90245056]
[-75.84918213 136.02381897]
[-65.60485077 147.29208374]
[-51.37450409 142.54896545]
[-37.14415359 137.80584717]
[-27.51651192 126.44109344]
[-11.97783279 129.41766357]
[2.25251698 124.67455292]
[16.48286629 119.93144226]
[30.71321678 115.18832397]
[44.94356537 110.44521332]
[44.14665985 95.44832611]
[47.36121750 80.77835083]
[54.35636520 67.48889923]
[64.62969971 56.53443909]
[56.80432510 43.73742676]
[43.00393677 36.00051117]
[42.96518326 21.10595512]
[35.13981247 8.30894279]
[21.33942223 0.57202762]
[21.30066872 -14.32252693]
[13.47529507 -27.11954117]
[5.64992285 -39.91655350]
[-2.17544985 -52.71356583]
[-10.00082207 -65.51058197]
[-23.80121040 -73.24749756]
[-23.83996391 -88.14205170]
[-31.66533661 -100.93906403]
[-47.08626175 -104.39892578]
[-55.47331619 -117.79417419]
[-51.85061264 -133.17765808]
[-38.36743164 -141.42262268]
[-23.02310944 -137.63748169]
[-14.92115974 -124.06787872]
[-18.86832428 -108.76443481]
[-11.04295158 -95.96742249]
[2.19771338 -89.14583588]
[2.79619074 -73.33595276]
[10.62156296 -60.53894043]
[18.44693565 -47.74192429]
[26.27230835 -34.94491196]
[34.09768295 -22.14789963]
[47.33834457 -15.32631302]
[47.93682480 0.48357013]
[55.76219559 13.28058338]
[69.00286102 20.10217094]
[69.60134125 35.91205215]
[77.42671204 48.70906448]
[89.24594879 45.00305939]
[101.59059906 43.98408127]
[113.85754395 45.70191574]
[125.44743347 50.07263947]
[133.98637390 37.74029922]
[142.52529907 25.40795898]
[137.55775452 10.82612991]
[142.07615662 -3.71475935]
[154.14758301 -12.70056820]
[169.01750183 -12.85336304]
[164.71661377 -27.88786697]
[171.13310242 -42.14839172]
[185.23731995 -48.90155792]
[200.36967468 -44.95872116]
[209.38513184 -32.18157196]
[208.02687073 -16.60309029]
[196.93621826 -5.57895565]
[181.34985352 -4.31442928]
[186.43927002 9.65825081]
[182.27584839 24.11957741]
[170.25486755 33.46566391]
[154.85763550 33.94689178]
[146.31871033 46.27923203]
[137.77976990 58.61157227]
[146.88064575 69.29954529]
[153.03970337 81.91400909]
[155.87045288 95.66339874]
[170.84628296 96.51457214]
[185.82211304 97.36575317]
[200.79794312 98.21693420]
[215.77377319 99.06811523]
[226.27691650 85.83677673]
[242.43238831 81.50012207]
[257.84088135 87.57144928]
[266.52014160 101.48133850]
[281.50939941 102.04895782]
[290.99240112 89.76675415]
[305.89303589 85.43651581]
[320.48168945 90.72332001]
[329.14877319 103.59426880]
[328.56158447 119.10023499]
[318.94592285 131.27883911]
[303.99917603 135.44717407]
[289.46871948 130.00242615]
[280.94177246 117.03821564]
[265.95254517 116.47058868]
[258.69418335 127.70487213]
[246.73144531 133.92559814]
[233.14945984 133.40759277]
[221.51113892 126.17942047]
[214.92259216 114.04394531]
[199.94676208 113.19276428]
[184.97093201 112.34158325]
[169.99510193 111.49040222]
[155.01927185 110.63922882]
[143.85984802 134.88017273]
[122.75395966 151.21104431]
[126.95517731 165.61068726]
[131.15640259 180.01033020]
[135.35762024 194.40997314]
[139.55883789 208.80961609]
[143.76005554 223.20925903]
[155.05285645 234.29002380]
[151.18989563 248.67497253]
[156.06745911 262.85980225]
[161.61042786 276.79806519]
[167.15341187 290.73635864]
[172.69639587 304.67462158]
[186.80126953 312.31872559]
[189.47715759 328.13702393]
[178.67135620 339.99511719]
[162.67314148 338.79644775]
[153.75497437 325.46057129]
[158.75811768 310.21759033]
[153.21513367 296.27932739]
[147.67216492 282.34106445]
[142.12918091 268.40280151]
[133.67488098 280.79330444]
[118.73211670 282.10238647]
[108.25216675 271.37063599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 149]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[24 42]
[25 41]
[26 40]
[52 85]
[53 84]
[55 82]
[56 81]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[64 73]
[65 72]
[89 109]
[90 108]
[91 107]
[95 103]
[112 140]
[113 139]
[114 138]
[115 137]
[116 136]
[120 131]
[121 130]
[150 162]
[151 161]
[152 160]
[153 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
