%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCUCUCUCGCUCUCAGGGCCCCCCUCGCUCCCCCGGCCGCAGUCCGUGCGCGAGGGCGCCGGCGAGCCGUCUCGGAAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[60.12981033 206.64289856]
[63.02251434 187.47828674]
[63.57034683 172.48829651]
[63.84430695 157.49079895]
[63.84430695 142.49079895]
[63.84430695 127.49079132]
[67.71309662 107.51605225]
[79.50594330 96.00209808]
[92.96232605 95.03890228]
[88.64083862 80.67489624]
[84.31935120 66.31089020]
[79.99786377 51.94688034]
[75.67637634 37.58287048]
[71.35488892 23.21886063]
[67.95903778 20.47891808]
[65.76015472 17.15156364]
[64.79781342 13.66337109]
[64.97555542 10.41236115]
[66.08071899 7.72791767]
[67.81538391 5.83967924]
[66.17481232 -9.07033539]
[64.53424835 -23.98035049]
[54.88531494 -32.77006912]
[53.94345856 -45.38316727]
[61.67082977 -54.88097382]
[60.57590103 -69.84095764]
[59.48097229 -84.80094147]
[58.38603973 -99.76092529]
[57.29111099 -114.72090912]
[56.19618225 -129.68089294]
[55.10125351 -144.64088440]
[46.37724686 -157.83944702]
[53.16487503 -171.09754944]
[44.31540680 -177.92033386]
[40.88231659 -188.31997681]
[43.80944443 -198.64205933]
[51.85026550 -205.40466309]
[51.85026550 -220.40466309]
[51.85026550 -235.40466309]
[51.57630157 -250.40216064]
[42.40985489 -264.00024414]
[49.84511185 -278.61700439]
[66.23331451 -279.21591187]
[74.71569061 -265.18090820]
[66.56629944 -250.94998169]
[70.03901672 -244.22317505]
[66.85026550 -235.40466309]
[66.85026550 -220.40466309]
[66.85026550 -205.40466309]
[77.84290314 -189.67074585]
[68.12485504 -172.19248962]
[76.77054596 -160.06394958]
[70.06123352 -145.73580933]
[71.15616608 -130.77581787]
[72.25109863 -115.81584167]
[73.34602356 -100.85585785]
[74.44095612 -85.89587402]
[75.53588867 -70.93588257]
[76.63081360 -55.97590256]
[87.28531647 -42.15993881]
[79.44425964 -25.62091827]
[81.08483124 -10.71090317]
[82.72539520 4.19911098]
[85.71890259 18.89737511]
[90.04039001 33.26138306]
[94.36186981 47.62539291]
[98.68335724 61.98940277]
[103.00484467 76.35340881]
[107.32633209 90.71742249]
[115.60285187 103.22738647]
[127.13255310 112.82247925]
[138.66226196 122.41757965]
[154.70465088 127.90193939]
[153.87559509 144.83560181]
[137.37419128 148.72665405]
[129.06716919 133.94728088]
[117.53746033 124.35218811]
[106.00775146 114.75709534]
[99.21688843 117.94052124]
[78.84430695 127.49079132]
[78.84430695 142.49079895]
[78.84430695 157.49079895]
[82.03305817 166.30929565]
[78.56034088 173.03611755]
[78.01250458 188.02612305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 85]
[3 84]
[4 82]
[5 81]
[6 80]
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[20 63]
[21 62]
[22 61]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[33 51]
[37 49]
[38 48]
[39 47]
[40 45]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
