%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGAUUGGCGGGCACGCCCCCUCGCCCGCGGCCCCCUCCCCGCCUCUCUCCACCGCCUCCUCUGGCUCCCCGGUCAGAGGGCCGGAGCGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[80.56069946 108.45398712]
[65.57839966 109.18242645]
[50.59609604 109.91085815]
[35.61379623 110.63928986]
[20.63149261 111.36772156]
[12.08303642 124.18295288]
[-2.20527983 129.44578552]
[-16.68154907 125.33462524]
[-25.85138893 113.62770081]
[-40.83369064 114.35613251]
[-49.44204330 117.95584106]
[-56.31136322 114.85759735]
[-71.30939484 115.10048676]
[-86.30742645 115.34338379]
[-101.30545807 115.58628082]
[-110.02586365 118.90534973]
[-116.79125214 115.58628082]
[-131.78929138 115.34338379]
[-146.78732300 115.10048676]
[-154.61221313 128.31663513]
[-168.00469971 135.83573914]
[-183.36228943 135.63516235]
[-196.55384827 127.76888275]
[-204.03091431 114.35289001]
[-203.78221130 98.99600983]
[-195.87461853 85.82917023]
[-182.43525696 78.39418793]
[-167.07923889 78.69103241]
[-153.93724060 86.63985443]
[-146.54441833 100.10245514]
[-131.54638672 100.34535217]
[-116.54835510 100.58824921]
[-101.54835510 100.58824921]
[-86.55032349 100.34535217]
[-71.55229187 100.10245514]
[-56.55425644 99.85955811]
[-41.56212616 99.37383270]
[-26.57982254 98.64540100]
[-18.58891869 86.10412598]
[-4.57975197 80.60801697]
[10.15171909 84.45992279]
[19.90305901 96.38542175]
[34.88536072 95.65699005]
[49.86766434 94.92855072]
[64.84996796 94.20011902]
[79.83226776 93.47168732]
[90.54304504 81.02838135]
[106.92679596 79.96563721]
[119.15534973 90.92095947]
[134.10620117 89.70775604]
[149.05706787 88.49455261]
[164.00791931 87.28134155]
[178.93716431 85.82619476]
[191.77357483 76.57756042]
[205.29435730 82.82557678]
[220.19808960 81.12886810]
[235.10182190 79.43215942]
[247.93823242 70.18352509]
[261.45901489 76.43154144]
[269.81631470 72.28216553]
[276.87176514 74.92926788]
[291.82263184 73.71605682]
[306.77346802 72.50285339]
[321.72433472 71.28964233]
[336.67520142 70.07643890]
[351.62606812 68.86322784]
[366.57690430 67.65002441]
[381.52777100 66.43682098]
[396.47863770 65.22360992]
[409.65609741 55.46212769]
[424.58868408 62.24071121]
[425.91506958 78.58612823]
[412.27075195 87.68362427]
[397.69183350 80.17446899]
[382.74096680 81.38767242]
[367.79013062 82.60088348]
[352.83926392 83.81408691]
[337.88839722 85.02729797]
[322.93756104 86.24050140]
[307.98669434 87.45370483]
[293.03582764 88.66691589]
[278.08496094 89.88011932]
[263.15573120 91.33526611]
[251.38533020 100.46253967]
[236.79853821 94.33589172]
[221.89480591 96.03260040]
[206.99107361 97.72930145]
[195.22067261 106.85657501]
[180.63388062 100.72992706]
[174.22238159 104.68964386]
[165.22113037 102.23220062]
[150.27026367 103.44540405]
[135.31941223 104.65861511]
[120.36855316 105.87181854]
[113.28711700 116.51692200]
[101.37214661 121.15357208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[9 38]
[10 37]
[12 36]
[13 35]
[14 34]
[15 33]
[17 32]
[18 31]
[19 30]
[49 94]
[50 93]
[51 92]
[52 91]
[53 89]
[55 87]
[56 86]
[57 85]
[59 83]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
