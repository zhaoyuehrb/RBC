%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCGAGACUUUCAGGGGUCGGAGCGCGGGGGCCGGCCGAGAGGAAAGCUGGAGGCGCGGGUGGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[137.86799622 190.40060425]
[131.97262573 176.60769653]
[126.07724762 162.81477356]
[120.18187714 149.02185059]
[114.28649902 135.22894287]
[106.88387299 122.18282318]
[98.06709290 110.04756927]
[90.92638397 105.72219086]
[89.14148712 97.16421509]
[80.87802887 84.64561462]
[72.61457825 72.12701416]
[64.35112000 59.60841751]
[56.08766556 47.08981705]
[38.23625565 46.97285080]
[24.00032997 36.45684814]
[18.73321724 19.72025871]
[24.28334999 3.23672819]
[14.93100357 -8.49074364]
[5.57865667 -20.21821594]
[-3.77369046 -31.94568825]
[-13.12603760 -43.67316055]
[-22.47838402 -55.40063477]
[-37.93747711 -57.31221771]
[-47.25502777 -69.33876801]
[-45.33735275 -84.06487274]
[-60.79225922 -89.54920959]
[-63.50364685 -105.72265625]
[-50.68227768 -115.94735718]
[-35.51767349 -109.70501709]
[-33.60988235 -93.41722107]
[-18.82626915 -92.00994873]
[-9.17459774 -80.24984741]
[-10.75091267 -64.75298309]
[-1.39856529 -53.02550888]
[7.95378160 -41.29803467]
[17.30612946 -29.57056236]
[26.65847588 -17.84309196]
[36.01082230 -6.11561871]
[48.29130173 -8.47338676]
[60.44670105 -5.23956871]
[70.04354858 3.00449157]
[75.13196564 14.66792297]
[74.64163208 27.45704269]
[68.60626221 38.82636261]
[76.86972046 51.34496307]
[85.13317108 63.86355972]
[93.39662933 76.38215637]
[101.66007996 88.90075684]
[110.20235443 101.23078918]
[119.01912689 113.36604309]
[123.38719177 114.89149475]
[126.72128296 117.47177887]
[128.81713867 120.65455627]
[129.63813782 123.96802521]
[129.30691528 126.97725677]
[128.07942200 129.33355713]
[133.97479248 143.12648010]
[139.87016296 156.91940308]
[145.76553345 170.71231079]
[151.66091919 184.50523376]
[166.91931152 186.25930786]
[179.24687195 195.42047119]
[185.32754517 209.52439880]
[183.52565002 224.77722168]
[174.32589722 237.07601929]
[160.20297241 243.11244202]
[144.95587158 241.26274109]
[132.68597412 232.02449036]
[126.69384766 217.88270569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[4 57]
[5 56]
[6 50]
[7 49]
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[25 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
