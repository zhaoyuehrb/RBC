%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCGCGCGGUGGGUGGGGGCGGGGUAGUGGGCGGGGCAUCGGCAGGCUAGGUUUUCUCCGCGCAGCGCCAGUCGCAGAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[129.03004456 261.31683350]
[139.94293213 250.64576721]
[135.09973145 236.44917297]
[130.25651550 222.25257874]
[118.82424164 212.70520020]
[121.69132996 197.14595032]
[116.42786407 191.70483398]
[116.94080353 182.34153748]
[112.61931610 167.97753906]
[108.29782867 153.61352539]
[97.22187042 143.65499878]
[100.65529633 128.21083069]
[96.33380890 113.84682465]
[86.28337860 104.12671661]
[89.30217743 90.47466278]
[84.98069000 76.11065674]
[80.65920258 61.74664688]
[76.33771515 47.38263702]
[72.01623535 33.01862717]
[67.69474792 18.65461922]
[63.37326050 4.29061079]
[48.34867096 1.83640027]
[35.93018723 -6.86234474]
[28.55020142 -20.03641129]
[27.62576866 -35.04662323]
[33.28678131 -48.91249466]
[44.36082077 -58.90404510]
[40.03933334 -73.26805878]
[35.71784592 -87.63206482]
[31.39636040 -101.99607086]
[17.71138763 -114.15102386]
[22.11372757 -131.03352356]
[10.33503342 -141.59632874]
[13.54853535 -156.14015198]
[8.70532990 -170.33674622]
[3.86212349 -184.53334045]
[-8.83327198 -194.91404724]
[-5.92433500 -211.05313110]
[9.59647083 -216.34809875]
[21.76267052 -205.35192871]
[18.05871964 -189.37654114]
[22.90192604 -175.17994690]
[27.74513245 -160.98335266]
[39.17740631 -151.43597412]
[36.31032562 -135.87672424]
[47.13681793 -130.15766907]
[51.20302582 -118.18088531]
[45.76036835 -106.31755829]
[50.08185577 -91.95355225]
[54.40334320 -77.58954620]
[58.72482681 -63.22553253]
[73.47357178 -61.00289536]
[85.84558105 -52.56235504]
[93.35675812 -39.53379822]
[94.47089386 -24.47461891]
[88.91358948 -10.36776447]
[77.73726654 -0.03087555]
[82.05875397 14.33313370]
[86.38024139 28.69714165]
[90.70172882 43.06114960]
[95.02321625 57.42515945]
[99.34470367 71.78916931]
[103.66619110 86.15317535]
[113.71662140 95.87328339]
[110.69782257 109.52533722]
[115.01931000 123.88934326]
[126.40436554 134.87528992]
[122.66184235 149.29203796]
[126.98332977 163.65605164]
[131.30480957 178.02006531]
[135.88792419 192.30274963]
[147.66662598 202.86555481]
[144.45310974 217.40937805]
[149.29632568 231.60597229]
[154.13952637 245.80256653]
[169.29891968 247.57901001]
[182.18168640 255.76419067]
[190.22993469 268.73294067]
[191.84570312 283.91027832]
[186.70816040 298.28277588]
[175.83738708 308.99673462]
[161.39176941 313.92489624]
[146.23948669 312.08877563]
[133.38905334 303.85290527]
[125.39193726 290.85256958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[6 71]
[8 70]
[9 69]
[10 68]
[12 66]
[13 65]
[15 63]
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[27 51]
[28 50]
[29 49]
[30 48]
[32 45]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
