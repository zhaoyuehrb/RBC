%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCUGCUGGAGAAGGCGCACCUGCUGCAGGUGCUCCCGGCCGCCCCGGACCAGCGAGCGCGGGCACUGCGGCGGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[-15.98772049 147.77079773]
[-29.07169151 155.10630798]
[-42.15566254 162.44181824]
[-55.23963165 169.77732849]
[-68.32360077 177.11283875]
[-77.21060181 193.10633850]
[-94.64039612 192.48892212]
[-107.43740845 200.31430054]
[-120.23442078 208.13966370]
[-133.03143311 215.96504211]
[-136.49130249 231.38597107]
[-149.88655090 239.77302551]
[-165.27003479 236.15031433]
[-173.51499939 222.66712952]
[-169.72984314 207.32281494]
[-156.16024780 199.22087097]
[-140.85681152 203.16802979]
[-128.05979919 195.34265137]
[-115.26277924 187.51728821]
[-102.46576691 179.69190979]
[-99.24309540 167.87011719]
[-88.43038940 161.29023743]
[-75.65911102 164.02886963]
[-62.57514191 156.69335938]
[-49.49117279 149.35784912]
[-36.40719986 142.02233887]
[-23.32323074 134.68682861]
[-24.15075874 125.93553925]
[-22.21820068 117.32496643]
[-17.69498253 109.70745850]
[-11.00803852 103.84381866]
[-2.80158973 100.32734680]
[6.12488937 99.52384186]
[14.89455128 101.53365326]
[22.63930511 106.17974091]
[28.58574486 113.02303314]
[42.98538971 108.82180786]
[57.38503265 104.62059021]
[71.78467560 100.41937256]
[86.18431854 96.21814728]
[95.98812866 86.24935150]
[109.61445618 89.38220215]
[124.01410675 85.18098450]
[138.41374207 80.97976685]
[152.81338501 76.77854156]
[167.21304321 72.57732391]
[181.25370789 67.29911041]
[194.85498047 60.97413254]
[208.45625305 54.64915466]
[222.05752563 48.32417679]
[227.55865479 33.75107193]
[241.44238281 27.53040314]
[255.30171204 32.86469650]
[260.48660278 17.93511009]
[274.74591064 11.11985397]
[289.61984253 16.46229553]
[296.28396606 30.79286003]
[290.78454590 45.60947800]
[276.38433838 52.12171173]
[261.62667847 46.46596909]
[256.77487183 60.50147247]
[243.07133484 67.10965729]
[228.38250732 61.92545319]
[214.78123474 68.25042725]
[201.17996216 74.57540894]
[187.57868958 80.90038300]
[186.54878235 83.76796722]
[184.17539978 86.34037018]
[180.58973694 88.04322815]
[176.15179443 88.37181091]
[171.41426086 86.97696686]
[157.01461792 91.17819214]
[142.61497498 95.37940979]
[128.21531677 99.58062744]
[113.81568146 103.78185272]
[104.01187134 113.75064850]
[90.38554382 110.61779785]
[75.98589325 114.81901550]
[61.58625412 119.02023315]
[47.18660736 123.22145844]
[32.78696442 127.42267609]
[24.35449982 148.01673889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[7 20]
[8 19]
[9 18]
[10 17]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[47 66]
[48 65]
[49 64]
[50 63]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
