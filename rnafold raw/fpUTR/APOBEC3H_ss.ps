%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUUUUGGGAGAGCUGACCUUUUGUGACUUUUGGGAGAGCUGCCAAAAGUGAAACUUAGUGCCUCAGACAAGCAGGGGCAAGUCUGCUAAGGAAGCUGUGGCCAGAAGCACAGAUCAGAAACACG\
) } def
/len { sequence length } bind def

/coor [
[45.67642212 483.10009766]
[31.98114586 489.41595459]
[17.14529228 492.12673950]
[2.10145164 491.06198120]
[-12.20470619 486.28866577]
[-24.87388420 478.10681152]
[-35.10968781 467.03073120]
[-42.26868439 453.75671387]
[-45.90085220 439.11917114]
[-45.77787781 424.03817749]
[-41.90748215 409.46182251]
[-34.53296280 396.30630493]
[-24.11789513 385.39865112]
[-11.31697369 377.42446899]
[3.06512427 372.88510132]
[18.12432861 372.06582642]
[21.05068207 357.35403442]
[23.97703743 342.64224243]
[26.90339279 327.93048096]
[25.17092896 324.74499512]
[24.95915794 320.53750610]
[26.74210548 316.06259155]
[30.62440300 312.26205444]
[34.62509537 297.80538940]
[38.62578583 283.34875488]
[42.62647629 268.89212036]
[46.62716675 254.43547058]
[50.62785721 239.97883606]
[49.36643219 232.61567688]
[54.90819168 225.21879578]
[59.26245880 210.86470032]
[63.61672974 196.51058960]
[67.97100067 182.15647888]
[72.32527161 167.80238342]
[76.67954254 153.44827271]
[81.03381348 139.09416199]
[76.09871674 122.30040741]
[89.51685333 109.76109314]
[86.19492340 96.17961884]
[96.02651215 86.23821259]
[100.02719879 71.78157043]
[104.02789307 57.32493210]
[108.02857971 42.86828995]
[104.25224304 27.50437737]
[115.10379028 17.30177498]
[119.10448456 2.84513402]
[111.13343048 -8.09010601]
[110.95283508 -21.42572021]
[118.40356445 -32.25107193]
[130.55776978 -36.71016312]
[134.91204834 -51.06426620]
[139.26631165 -65.41837311]
[143.62059021 -79.77247620]
[138.22410583 -91.56324005]
[142.22245789 -103.47487640]
[152.93212891 -109.23948669]
[157.63734436 -123.48241425]
[162.34257507 -137.72532654]
[161.22602844 -143.04226685]
[162.22969055 -147.75355530]
[164.74333191 -151.13430786]
[167.95358276 -152.82044983]
[173.69383240 -166.67863464]
[179.43408203 -180.53683472]
[185.17433167 -194.39501953]
[190.91459656 -208.25321960]
[196.65484619 -222.11140442]
[187.77200317 -234.72483826]
[187.14143372 -250.13931274]
[194.96437073 -263.43612671]
[208.74453735 -270.37231445]
[224.08473206 -268.73455811]
[236.08993530 -259.04547119]
[240.92935181 -244.39680481]
[237.05874634 -229.46289062]
[225.71319580 -219.00907898]
[210.51303101 -216.37115479]
[204.77278137 -202.51296997]
[199.03253174 -188.65476990]
[193.29228210 -174.79658508]
[187.55203247 -160.93838501]
[181.81178284 -147.08020020]
[176.58549500 -133.02011108]
[171.88026428 -118.77718353]
[167.17504883 -104.53426361]
[171.69650269 -87.62444305]
[157.97468567 -75.41820526]
[153.62042236 -61.06410217]
[149.26614380 -46.70999527]
[144.91188049 -32.35589218]
[153.46896362 -17.93326759]
[148.90682983 -1.44638515]
[133.56112671 6.84582520]
[129.56042480 21.30246544]
[133.62292480 35.63234329]
[122.48522186 46.86898041]
[118.48453522 61.32562256]
[114.48384094 75.78226471]
[110.48314667 90.23890686]
[113.80507660 103.82038116]
[103.97348785 113.76178741]
[109.65769958 125.41656494]
[105.95288849 137.42274475]
[95.38791656 143.44844055]
[91.03364563 157.80255127]
[86.67937469 172.15664673]
[82.32510376 186.51075745]
[77.97083282 200.86485291]
[73.61656189 215.21896362]
[69.26229858 229.57307434]
[65.08450317 243.97952271]
[61.08380890 258.43615723]
[57.08311844 272.89282227]
[53.08242416 287.34945679]
[49.08173370 301.80609131]
[45.08104324 316.26272583]
[41.61517334 330.85684204]
[38.68881607 345.56860352]
[35.76246262 360.28039551]
[32.83610535 374.99215698]
[46.43547440 381.51199341]
[57.98564911 391.20962524]
[66.76058197 403.47549438]
[72.20867157 417.53854370]
[73.98744202 432.51473999]
[71.98507690 447.46270752]
[66.32746124 461.44274902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 120]
[17 119]
[18 118]
[19 117]
[23 116]
[24 115]
[25 114]
[26 113]
[27 112]
[28 111]
[30 110]
[31 109]
[32 108]
[33 107]
[34 106]
[35 105]
[36 104]
[38 101]
[40 99]
[41 98]
[42 97]
[43 96]
[45 94]
[46 93]
[50 90]
[51 89]
[52 88]
[53 87]
[56 85]
[57 84]
[58 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
