%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGACUCAGGCCCCGCUGGCCGCGGGCUCGGUACCCGGUGGGUCGGUGGAGCGUCUGUUGGGUCCGGGCCGCCGGCUUCGCCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[89.83274078 147.58146667]
[81.52611542 160.07147217]
[79.30545807 169.15878296]
[72.71099091 172.84237671]
[63.97821045 185.03822327]
[61.44521713 194.04348755]
[54.72753525 197.49726868]
[53.10116196 213.81556702]
[38.04656601 220.31872559]
[25.05062103 210.31684875]
[27.48244286 194.09901428]
[42.84038162 188.34873962]
[51.78237152 176.30543518]
[60.51514816 164.10960388]
[69.03611755 151.76484680]
[77.34274292 139.27484131]
[83.85099792 125.76031494]
[88.43698120 111.47854614]
[84.40351868 95.28722382]
[96.72839355 84.03888702]
[100.81868744 69.60733795]
[104.90898132 55.17579651]
[108.99927521 40.74425125]
[113.08956909 26.31270599]
[105.64373016 12.63069820]
[109.99745178 -1.94667339]
[123.08704376 -8.96081924]
[127.17733765 -23.39236450]
[131.26762390 -37.82390976]
[135.35792542 -52.25545502]
[139.44821167 -66.68700409]
[143.53851318 -81.11854553]
[147.62879944 -95.55009460]
[146.96484375 -104.88121796]
[152.11737061 -110.40457153]
[156.70333862 -124.68633270]
[161.28932190 -138.96809387]
[165.87530518 -153.24986267]
[170.46127319 -167.53163147]
[175.04725647 -181.81340027]
[179.63322449 -196.09515381]
[184.21920776 -210.37692261]
[188.80519104 -224.65869141]
[193.39115906 -238.94046021]
[193.04968262 -248.28894043]
[198.38977051 -253.63114929]
[203.46597290 -267.74612427]
[196.50599670 -281.93536377]
[201.69683838 -296.86285400]
[215.95886230 -303.67242432]
[230.83065796 -298.32406616]
[237.48905945 -283.99081421]
[231.98374939 -269.17642212]
[217.58093262 -262.66992188]
[212.50473022 -248.55496216]
[207.67292786 -234.35447693]
[203.08694458 -220.07270813]
[198.50097656 -205.79093933]
[193.91499329 -191.50918579]
[189.32902527 -177.22741699]
[184.74304199 -162.94564819]
[180.15705872 -148.66387939]
[175.57109070 -134.38212585]
[170.98510742 -120.10035706]
[166.39912415 -105.81858826]
[162.06034851 -91.45980072]
[157.97006226 -77.02825165]
[153.87976074 -62.59670639]
[149.78947449 -48.16516113]
[145.69917297 -33.73361588]
[141.60888672 -19.30207062]
[137.51858521 -4.87052584]
[144.98120117 7.96867371]
[141.03865051 22.66258049]
[127.52111053 30.40299988]
[123.43081665 44.83454514]
[119.34052277 59.26609039]
[115.25022888 73.69763184]
[111.15993500 88.12918091]
[116.24536133 98.75553894]
[112.83782196 110.03249359]
[102.71874237 116.06452942]
[98.13276672 130.34629822]
[111.80953979 124.18626404]
[126.54661560 126.98242950]
[137.01652527 137.72398376]
[139.43440247 152.52783203]
[132.92617798 166.04237366]
[119.84456635 173.38209534]
[104.91859436 171.89367676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[4 14]
[5 13]
[7 12]
[17 83]
[18 82]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[27 72]
[28 71]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
