%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGGCGCGACUUCCGGGGCGGCGGUUGCAUCAGAUUCUAGGAAGUGUCUGUAGCCGCAGCUGCGGGUCCGGGAUUCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[84.54936981 343.03601074]
[69.24891663 347.86050415]
[56.01825333 338.78698730]
[55.00680542 322.77584839]
[66.99047089 312.10946655]
[69.19999695 297.27310181]
[71.40952301 282.43673706]
[60.84440613 269.49319458]
[62.83298492 252.56713867]
[76.64184570 242.01841736]
[78.30163574 227.11053467]
[72.02014923 213.60525513]
[81.23696136 200.74598694]
[82.89675903 185.83810425]
[84.55654907 170.93020630]
[86.21633911 156.02232361]
[87.87612915 141.11444092]
[89.53591919 126.20655060]
[91.19570923 111.29866791]
[85.76401520 98.41501617]
[93.89640808 87.04154205]
[87.73364258 72.46996307]
[96.83174133 60.67700195]
[98.49153137 45.76911545]
[100.15132141 30.86122894]
[101.81111145 15.95334148]
[103.47090149 1.04545450]
[105.13069153 -13.86243248]
[106.79048157 -28.77031898]
[108.45027161 -43.67820740]
[95.05236053 -58.33255386]
[96.34206390 -77.85070801]
[111.09970093 -90.23521423]
[111.09970093 -105.23521423]
[111.09970093 -120.23521423]
[111.09970093 -135.23521423]
[111.09970093 -150.23521423]
[103.36240387 -164.03538513]
[111.09970093 -176.76266479]
[111.09970093 -191.76266479]
[102.43599701 -205.68646240]
[110.40013123 -220.02189636]
[126.79927826 -220.02189636]
[134.76341248 -205.68646240]
[126.09970093 -191.76266479]
[126.09970093 -176.76266479]
[133.83700562 -164.03538513]
[126.09970093 -150.23521423]
[126.09970093 -135.23521423]
[126.09970093 -120.23521423]
[126.09970093 -105.23521423]
[126.09970093 -90.23521423]
[135.38825989 -84.96804047]
[141.59358215 -76.17745972]
[143.47502136 -65.49971771]
[140.60481262 -54.95917511]
[133.46290588 -46.58454132]
[123.35815430 -42.01841736]
[121.69836426 -27.11052895]
[120.03857422 -12.20264244]
[118.37878418 2.70524478]
[116.71899414 17.61313248]
[115.05920410 32.52101898]
[113.39941406 47.42890549]
[111.73962402 62.33679199]
[118.02110291 75.84206390]
[108.80429077 88.70133209]
[114.23598480 101.58498383]
[106.10359192 112.95845795]
[104.44380188 127.86634064]
[102.78401184 142.77423096]
[101.12422180 157.68211365]
[99.46443176 172.58999634]
[97.80464172 187.49789429]
[96.14485168 202.40577698]
[102.30760956 216.97735596]
[93.20951843 228.77032471]
[91.54972839 243.67820740]
[101.19860077 253.28071594]
[103.44475555 266.50811768]
[97.67749786 278.40454102]
[86.24589539 284.64624023]
[84.03636932 299.48263550]
[81.82684326 314.31900024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 84]
[6 83]
[7 82]
[10 78]
[11 77]
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[18 70]
[19 69]
[21 67]
[23 65]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
