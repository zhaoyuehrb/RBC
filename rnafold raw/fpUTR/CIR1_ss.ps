%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCUGCUGGAAACGCAGUUCCGGUUAGGCGGCUGAGUUUGUUUACGUUGCUAACAGAUCUAGCCCCUGCUUUCCCUAGUUCCAGUUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[87.82516479 360.17364502]
[87.82516479 345.17364502]
[87.82516479 330.17364502]
[87.82516479 315.17364502]
[77.14429474 304.85595703]
[76.93061829 289.64382935]
[87.82516479 278.51071167]
[87.82516479 263.51071167]
[87.82516479 248.51071167]
[87.82516479 233.51071167]
[87.82516479 218.51071167]
[87.82516479 203.51071167]
[87.82516479 188.51071167]
[84.61219025 181.68475342]
[88.08419037 173.01158142]
[79.99595642 163.84732056]
[80.41600800 151.22770691]
[89.66812897 142.05253601]
[90.67002106 127.08602905]
[78.40019989 118.81888580]
[71.89139557 105.53244019]
[72.87959290 90.77040863]
[81.10124207 78.47005463]
[94.36347961 71.91207886]
[95.36537170 56.94557571]
[96.36725616 41.97907257]
[93.78083801 33.00191879]
[97.66093445 26.53185654]
[99.16236877 11.60718918]
[100.66380310 -3.31747842]
[98.37879944 -12.37604427]
[102.47292328 -18.71284294]
[104.47222900 -33.57900620]
[106.47152710 -48.44516754]
[108.47083282 -63.31132889]
[110.47013855 -78.17749023]
[104.64125824 -92.88581085]
[114.00589752 -104.46824646]
[116.00520325 -119.33440399]
[118.00450897 -134.20056152]
[120.00381470 -149.06672668]
[122.00312042 -163.93289185]
[124.00242615 -178.79905701]
[126.00172424 -193.66522217]
[114.18453979 -203.58276367]
[109.62693787 -218.32154846]
[113.78324127 -233.17848206]
[125.32718658 -243.41278076]
[140.57513428 -245.75871277]
[154.66154480 -239.46769714]
[163.09146118 -226.54718018]
[163.17495728 -211.12004089]
[154.88537598 -198.10902405]
[140.86788940 -191.66590881]
[138.86859131 -176.79975891]
[136.86927795 -161.93359375]
[134.86997986 -147.06742859]
[132.87066650 -132.20126343]
[130.87136841 -117.33510590]
[128.87207031 -102.46894073]
[134.84394836 -88.82394409]
[125.33630371 -76.17818451]
[123.33699799 -61.31202316]
[121.33769226 -46.44586182]
[119.33838654 -31.57970047]
[117.33908081 -16.71353722]
[115.58847046 -1.81604290]
[114.08703613 13.10862446]
[112.58560181 28.03329086]
[111.33376312 42.98096466]
[110.33187103 57.94746780]
[109.32997894 72.91397095]
[121.59980011 81.18111420]
[128.10861206 94.46755981]
[127.12040710 109.22959137]
[118.89875793 121.52994537]
[105.63652039 128.08792114]
[104.63462830 143.05442810]
[113.17005157 159.26417542]
[103.07581329 173.51280212]
[102.82516479 188.51071167]
[102.82516479 203.51071167]
[102.82516479 218.51071167]
[102.82516479 233.51071167]
[102.82516479 248.51071167]
[102.82516479 263.51071167]
[102.82516479 278.51071167]
[113.71971893 289.64382935]
[113.50604248 304.85595703]
[102.82516479 315.17364502]
[102.82516479 330.17364502]
[102.82516479 345.17364502]
[102.82516479 360.17364502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[7 87]
[8 86]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[15 80]
[18 78]
[19 77]
[24 72]
[25 71]
[26 70]
[28 69]
[29 68]
[30 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 62]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
