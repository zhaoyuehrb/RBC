%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCCGCACCGGCGCGCCGGCCGUCGGUCACGUGGCCUCCGGCCAGGGCUUGCGAAGCCGGAAGUGUCCUGAGUCUCGAGGAGGCCGCGGGAGCCCGCCGGCGGUGGCGCGGCGGAGACCCGGCUGGUAUAACAAGAGGAUUGCCUGAUCCAGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[96.69774628 138.37773132]
[94.06080627 153.14413452]
[100.14183044 168.37414551]
[89.78161621 181.08625793]
[73.63785553 178.20335388]
[68.31787872 162.69110107]
[79.29441071 150.50718689]
[81.93135071 135.74079895]
[66.69940948 107.91471100]
[77.14690399 83.12545776]
[67.86048889 71.34570312]
[58.57408142 59.56595230]
[43.95424652 53.51855850]
[42.15110397 38.73350143]
[32.86469269 26.95374680]
[23.57828331 15.17399311]
[14.29187489 3.39423895]
[5.00546503 -8.38551521]
[-4.28094387 -20.16526794]
[-13.56735325 -31.94502258]
[-21.38006783 -36.77951050]
[-22.91772461 -44.04844666]
[-31.97106361 -56.00825500]
[-41.02440262 -67.96806335]
[-50.07774353 -79.92787933]
[-59.13108063 -91.88768768]
[-68.18441772 -103.84749603]
[-77.23776245 -115.80730438]
[-86.29109955 -127.76711273]
[-95.92037201 -139.26829529]
[-110.96961212 -144.14997864]
[-113.92722321 -158.74798584]
[-124.10923004 -169.76283264]
[-134.29124451 -180.77766418]
[-144.47325134 -191.79251099]
[-154.65527344 -202.80734253]
[-164.83728027 -213.82217407]
[-175.01928711 -224.83702087]
[-185.20129395 -235.85185242]
[-195.38331604 -246.86669922]
[-205.56532288 -257.88153076]
[-216.17192078 -268.48812866]
[-227.18676758 -278.67013550]
[-238.20159912 -288.85214233]
[-249.31587219 -298.92553711]
[-260.52850342 -308.88931274]
[-271.74111938 -318.85311890]
[-282.95373535 -328.81689453]
[-294.35983276 -338.55862427]
[-305.95498657 -348.07452393]
[-317.55014038 -357.59042358]
[-329.14529419 -367.10632324]
[-344.72146606 -369.88003540]
[-349.65130615 -383.93515015]
[-361.24645996 -393.45104980]
[-377.50588989 -395.58709717]
[-383.53494263 -410.83773804]
[-373.13143921 -423.51446533]
[-356.99758911 -420.57650757]
[-351.73056030 -405.04620361]
[-340.13540649 -395.53030396]
[-325.38858032 -393.43722534]
[-319.62939453 -378.70147705]
[-308.03424072 -369.18557739]
[-296.43908691 -359.66967773]
[-284.84393311 -350.15377808]
[-280.03936768 -349.73089600]
[-275.46374512 -346.25119019]
[-272.98995972 -340.02951050]
[-261.77734375 -330.06573486]
[-250.56471252 -320.10195923]
[-239.35208130 -310.13815308]
[-232.22619629 -308.03494263]
[-228.01959229 -299.86700439]
[-217.00474548 -289.68496704]
[-205.98991394 -279.50296021]
[-203.13731384 -279.50769043]
[-200.11169434 -278.35293579]
[-197.36584473 -275.96722412]
[-195.36987305 -272.44821167]
[-194.55049133 -268.06353760]
[-184.36846924 -257.04870605]
[-174.18646240 -246.03387451]
[-164.00445557 -235.01902771]
[-153.82243347 -224.00419617]
[-143.64042664 -212.98934937]
[-133.45841980 -201.97451782]
[-123.27640533 -190.95968628]
[-113.09439850 -179.94483948]
[-102.91238403 -168.93000793]
[-88.59143066 -164.83616638]
[-84.90553284 -149.45030212]
[-81.42590332 -164.04112244]
[-67.93574524 -170.59974670]
[-54.31147003 -164.32447815]
[-50.52768707 -149.80955505]
[-59.35457993 -137.68165588]
[-74.33129120 -136.82044983]
[-65.27794647 -124.86064148]
[-56.22460938 -112.90083313]
[-47.17127228 -100.94102478]
[-38.11793137 -88.98121643]
[-29.06459427 -77.02140808]
[-20.01125526 -65.06159210]
[-10.95791531 -53.10178757]
[-1.78759921 -41.23143387]
[7.49880981 -29.45167732]
[16.78521919 -17.67192459]
[26.07162857 -5.89216995]
[35.35803604 5.88758373]
[44.64444733 17.66733742]
[53.93085480 29.44709206]
[67.88646698 34.65191650]
[70.35383606 50.27954102]
[79.64024353 62.05929565]
[88.92665863 73.83905029]
[98.46590424 69.96823883]
[109.32749176 69.66792297]
[120.15026855 73.36710358]
[129.44628906 80.97110748]
[135.80236816 91.83046722]
[138.08590698 104.78684235]
[135.62576294 118.29442596]
[146.43855286 128.69073486]
[157.25135803 139.08705139]
[168.06416321 149.48335266]
[178.87696838 159.87966919]
[189.68977356 170.27597046]
[198.27394104 166.31430054]
[207.59632874 164.88911438]
[216.92535400 166.09906006]
[225.53254700 169.83653259]
[232.74943542 175.79702759]
[238.01948547 183.50399780]
[240.94100952 192.34687805]
[241.29772949 201.62947083]
[239.07475281 210.62475586]
[234.45874023 218.63185120]
[243.97462463 230.22702026]
[253.49052429 241.82217407]
[269.02084351 247.08921814]
[271.95877075 263.22305298]
[259.28207397 273.62655640]
[244.03140259 267.59750366]
[241.89537048 251.33807373]
[232.37947083 239.74291992]
[222.86357117 228.14775085]
[202.17428589 231.19200134]
[183.67248535 221.16329956]
[174.81935120 201.92465210]
[179.29347229 181.08877563]
[168.48066711 170.69247437]
[157.66786194 160.29615784]
[146.85505676 149.89985657]
[136.04225159 139.50354004]
[125.22944641 129.10722351]
[118.09651947 131.42485046]
[122.73153687 145.69078064]
[108.46553802 150.32556152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[10 116]
[11 115]
[12 114]
[14 112]
[15 111]
[16 110]
[17 109]
[18 108]
[19 107]
[20 106]
[22 105]
[23 104]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[29 98]
[30 92]
[32 90]
[33 89]
[34 88]
[35 87]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[41 81]
[42 76]
[43 75]
[44 74]
[45 72]
[46 71]
[47 70]
[48 69]
[49 66]
[50 65]
[51 64]
[52 63]
[54 61]
[55 60]
[123 156]
[124 155]
[125 154]
[126 153]
[127 152]
[128 151]
[138 147]
[139 146]
[140 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
