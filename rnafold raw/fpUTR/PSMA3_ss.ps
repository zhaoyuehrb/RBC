%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAUUGGUUGGCAGUUCAGCCAAUGAGCGGGCCUGUUACUAGUUUGCGGCAUCCUGUGGUAUAGGGGAAGCGCUCCGGGCCUGGAAUCCCUACGCGUCCCUUUGGGUUUAGCACG\
) } def
/len { sequence length } bind def

/coor [
[87.34527588 131.36601257]
[82.17505646 128.74440002]
[71.63989258 139.42196655]
[61.10473251 150.09951782]
[50.56956863 160.77708435]
[40.03440475 171.45465088]
[29.49924088 182.13220215]
[18.96407890 192.80976868]
[8.42891502 203.48733521]
[-2.10624790 214.16490173]
[-12.64141083 224.84245300]
[-12.28470707 240.64271545]
[-23.26519394 252.00953674]
[-39.06834412 252.19917297]
[-50.31843185 241.09912109]
[-50.34097290 225.29484558]
[-39.12260056 214.16275024]
[-23.31897354 214.30729675]
[-12.78380966 203.62973022]
[-2.24864697 192.95216370]
[8.28651619 182.27461243]
[18.82168007 171.59704590]
[29.35684204 160.91947937]
[39.89200592 150.24192810]
[50.42716980 139.56436157]
[60.96233368 128.88679504]
[71.49749756 118.20923615]
[68.06470490 88.85971832]
[89.00775146 68.01345062]
[87.39977264 53.09988403]
[85.79179382 38.18632126]
[84.18381500 23.27275658]
[82.57583618 8.35919094]
[80.96786499 -6.55437326]
[79.35988617 -21.46793747]
[77.75190735 -36.38150406]
[70.28424835 -38.56094742]
[63.64189911 -42.56721115]
[58.26125717 -48.12381744]
[54.49243546 -54.85287857]
[52.57647324 -62.30079651]
[52.62993622 -69.96882629]
[54.63791275 -77.34646606]
[58.45574188 -83.94547272]
[63.81938171 -89.33213043]
[70.36364746 -93.15578461]
[77.64706421 -95.17163849]
[79.25504303 -110.08520508]
[80.86302185 -124.99877167]
[78.65293121 -133.99987793]
[82.71961212 -140.28923035]
[76.89913940 -155.00086975]
[86.27039337 -166.57795715]
[88.27819061 -181.44296265]
[90.28598785 -196.30798340]
[92.29378510 -211.17300415]
[86.47331238 -225.88465881]
[95.84456635 -237.46173096]
[97.85236359 -252.32675171]
[93.98055267 -268.83267212]
[108.76959229 -277.12246704]
[120.82942963 -265.20623779]
[112.71738434 -250.31895447]
[110.70958710 -235.45393372]
[116.67367554 -221.80552673]
[107.15880585 -209.16520691]
[105.15100861 -194.30018616]
[103.14321136 -179.43518066]
[101.13541412 -164.57015991]
[107.09950256 -150.92175293]
[97.58463287 -138.28143311]
[95.77658081 -123.39079285]
[94.16860199 -108.47722626]
[92.56063080 -93.56366730]
[109.31762695 -77.73578644]
[109.51107788 -54.43898392]
[92.66547394 -37.98947906]
[94.27344513 -23.07591438]
[95.88142395 -8.16235065]
[97.48940277 6.75121403]
[99.09738159 21.66477776]
[100.70536041 36.57834244]
[102.31333923 51.49190903]
[103.92131042 66.40547180]
[110.23540497 67.76329041]
[116.17629242 70.29652405]
[121.52736664 73.91281128]
[126.09349823 78.48028564]
[129.70822144 83.83241272]
[132.23971558 89.77404022]
[133.59567261 96.08853149]
[133.72666931 102.54564667]
[132.62792969 108.90993500]
[130.33950806 114.94935608]
[126.94484711 120.44368744]
[136.58665466 131.93435669]
[155.40979004 132.77410889]
[167.53897095 146.77764893]
[165.74575806 164.89942932]
[175.99044800 175.85598755]
[186.23513794 186.81254578]
[201.46942139 194.25251770]
[198.53747559 210.95101929]
[181.67991638 212.75627136]
[175.27857971 197.05725098]
[165.03388977 186.10067749]
[154.78919983 175.14411926]
[143.42129517 177.24906921]
[132.35414124 173.50958252]
[124.43061066 164.76210022]
[121.74624634 153.14494324]
[125.09599304 141.57617188]
[115.45417786 130.08549500]
[110.08977509 132.28259277]
[104.42899323 133.53137207]
[98.63809967 133.79518127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[29 84]
[30 83]
[31 82]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[47 74]
[48 73]
[49 72]
[51 71]
[53 69]
[54 68]
[55 67]
[56 66]
[58 64]
[59 63]
[95 113]
[96 112]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
