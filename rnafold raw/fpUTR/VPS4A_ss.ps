%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCCGCGCACCGCGCUCAGCGCCCACCGCCGGGCUUCCCGCGCCGGACCCAGUACCUCGGCUCCCCGGGGCCGGACCGAGGCCGCAAGCAGCGCCGCGGGGUGUGGGGCGGACCCAGGAGAUGAA\
) } def
/len { sequence length } bind def

/coor [
[187.48161316 483.81234741]
[199.41911316 474.47042847]
[194.74913025 460.21591187]
[190.07914734 445.96139526]
[185.40916443 431.70687866]
[180.73918152 417.45236206]
[176.06919861 403.19784546]
[170.94415283 397.76483154]
[171.46363831 388.53900146]
[167.14215088 374.17498779]
[162.82066345 359.81100464]
[158.49919128 345.44699097]
[154.17770386 331.08297729]
[149.85621643 316.71896362]
[138.78025818 306.76043701]
[142.21368408 291.31628418]
[137.89219666 276.95227051]
[133.57070923 262.58825684]
[124.06227112 258.51422119]
[118.29230499 249.66357422]
[118.40562439 238.87794495]
[124.60900879 229.78538513]
[120.99199677 215.22801208]
[117.37498474 200.67062378]
[113.75797272 186.11325073]
[99.13493347 183.17517090]
[87.18854523 174.14227295]
[80.32061005 160.76347351]
[79.94099426 145.66790771]
[86.17853546 131.84835815]
[97.84487152 122.06787109]
[94.22785950 107.51049805]
[90.37543488 103.78726959]
[88.94020844 98.14984894]
[90.80757141 92.15630341]
[87.90361023 77.44008636]
[84.99965668 62.72386932]
[82.09569550 48.00765228]
[79.19173431 33.29143906]
[76.28778076 18.57522202]
[72.84828949 3.97488117]
[68.87786102 -10.49010086]
[64.90743256 -24.95508385]
[60.76117325 -39.37064743]
[49.37611008 -50.35659027]
[53.11864090 -64.77334595]
[48.79715347 -79.13735199]
[44.47566605 -93.50136566]
[40.15417862 -107.86537170]
[23.18006897 -116.09446716]
[17.60268593 -133.78312683]
[26.47871971 -149.70703125]
[21.46300888 -163.84359741]
[6.54464197 -168.11231995]
[-2.98893905 -180.35530090]
[-3.47187805 -195.86485291]
[5.28152466 -208.67726135]
[19.90540695 -213.86585999]
[34.77658844 -209.43556213]
[44.17679596 -197.08988953]
[44.49145889 -181.57600403]
[35.59957886 -168.85931396]
[40.61529160 -154.72274780]
[51.84788895 -152.12335205]
[60.48810959 -144.30871582]
[64.27639008 -133.16448975]
[62.14556885 -121.46591949]
[54.51818848 -112.18685913]
[58.83967590 -97.82284546]
[63.16116333 -83.45883942]
[67.48265076 -69.09483337]
[78.55860901 -59.13629532]
[75.12518311 -43.69213486]
[80.11640930 -38.13593292]
[79.37242126 -28.92551041]
[83.34284210 -14.46052742]
[87.31327057 0.00445448]
[90.28648376 2.07674432]
[92.35853577 5.74163818]
[92.76920319 10.53762627]
[91.00399017 15.67126274]
[93.90795135 30.38747787]
[96.81191254 45.10369492]
[99.71586609 59.81991196]
[102.61982727 74.53612518]
[105.52378845 89.25234222]
[108.78524017 103.89347839]
[112.40225220 118.45085907]
[127.28952789 121.63366699]
[139.26977539 130.92672729]
[145.99958801 144.44448853]
[146.19210815 159.48190308]
[139.86271667 173.05570984]
[128.31535339 182.49624634]
[131.93235779 197.05361938]
[135.54937744 211.61099243]
[139.16638184 226.16836548]
[153.81980896 239.91178894]
[147.93470764 258.26675415]
[152.25619507 272.63076782]
[156.57768250 286.99478149]
[167.96275330 297.98071289]
[164.22021484 312.39749146]
[168.54170227 326.76147461]
[172.86318970 341.12548828]
[177.18467712 355.48950195]
[181.50616455 369.85351562]
[185.82765198 384.21752930]
[190.32371521 398.52786255]
[194.99369812 412.78237915]
[199.66368103 427.03689575]
[204.33366394 441.29141235]
[209.00364685 455.54592896]
[213.67362976 469.80044556]
[228.82478333 470.26773071]
[242.90122986 475.89175415]
[254.20318604 485.99331665]
[261.36584473 499.35266113]
[263.52432251 514.35656738]
[260.41796875 529.19323730]
[252.42185974 542.07104492]
[240.50158691 551.43493652]
[226.09658813 556.15423584]
[210.94631958 555.65899658]
[196.88026428 550.00909424]
[185.59695435 539.88665771]
[178.45890808 526.51416016]
[176.32809448 511.50631714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 114]
[3 113]
[4 112]
[5 111]
[6 110]
[7 109]
[9 108]
[10 107]
[11 106]
[12 105]
[13 104]
[14 103]
[16 101]
[17 100]
[18 99]
[22 97]
[23 96]
[24 95]
[25 94]
[31 88]
[32 87]
[35 86]
[36 85]
[37 84]
[38 83]
[39 82]
[40 81]
[41 77]
[42 76]
[43 75]
[44 73]
[46 71]
[47 70]
[48 69]
[49 68]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
