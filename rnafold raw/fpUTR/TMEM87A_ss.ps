%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGGUCCAAAGUCUCACGGCGCACAGACGACUGUCUGAGAGAGGGGCCGCUACGCCGCACAGCAAACAAGCUCCGCGACGUUUCCAGGACCCGGAUAAUCCCGCCCUUAGAGCAGAGCCGGAAGAAGGCGGGACGAACCGGAAGAGGGUGAAAUGCUUUCGGUAGGCACUCCACGGCUGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[-142.61984253 294.96972656]
[-154.43655396 304.20904541]
[-166.25326538 313.44839478]
[-171.09931946 321.21655273]
[-178.34698486 322.74169922]
[-190.31724548 331.78121948]
[-202.28750610 340.82073975]
[-214.25776672 349.86026001]
[-226.22801208 358.89978027]
[-224.94958496 372.63592529]
[-230.58561707 385.10888672]
[-241.56420898 393.09994507]
[-254.95042419 394.60528564]
[-267.23052979 389.33752441]
[-279.35095215 398.17468262]
[-291.47137451 407.01184082]
[-303.59179688 415.84899902]
[-315.56207275 424.88851929]
[-327.37878418 434.12783813]
[-339.19549561 443.36718750]
[-351.01220703 452.60650635]
[-362.75088501 461.94479370]
[-374.41070557 471.38131714]
[-375.81765747 487.12286377]
[-387.99688721 497.19470215]
[-403.72265625 495.62142944]
[-413.66519165 483.33639526]
[-411.92572021 467.62814331]
[-399.53625488 457.81604004]
[-383.84725952 459.72149658]
[-372.18743896 450.28494263]
[-368.95919800 443.61911011]
[-360.25152588 440.78979492]
[-348.43481445 431.55047607]
[-336.61810303 422.31112671]
[-324.80139160 413.07180786]
[-323.34146118 408.50460815]
[-318.98480225 404.81460571]
[-312.42895508 403.72857666]
[-300.30853271 394.89141846]
[-288.18811035 386.05426025]
[-276.06768799 377.21710205]
[-276.62521362 360.82037354]
[-267.21151733 347.18136597]
[-251.36856079 341.78012085]
[-235.26753235 346.92950439]
[-223.29727173 337.88998413]
[-211.32702637 328.85046387]
[-199.35676575 319.81094360]
[-187.38650513 310.77142334]
[-175.49259949 301.63168335]
[-163.67588806 292.39233398]
[-151.85917664 283.15301514]
[-154.96110535 270.88226318]
[-153.17805481 258.30450439]
[-146.74060059 247.29862976]
[-136.57728577 239.52229309]
[-124.18077087 236.16218567]
[-111.38872528 237.75312805]
[-100.11138153 244.09323120]
[-87.99095154 235.25607300]
[-75.87052917 226.41891479]
[-63.75010300 217.58177185]
[-51.62967682 208.74461365]
[-39.50925064 199.90745544]
[-43.80458832 183.83848572]
[-41.60246658 167.31471252]
[-33.21189117 152.86798096]
[-19.89225960 142.72276306]
[-3.66439438 138.45368958]
[12.99602413 140.74114990]
[27.53613853 149.26307678]
[39.35285187 140.02374268]
[51.16956329 130.78440857]
[62.82939529 121.34786987]
[74.32905579 111.71678162]
[85.82872009 102.08570099]
[90.80299377 89.01863098]
[104.54019928 86.41464233]
[116.03985596 76.78355408]
[127.45821381 67.05621338]
[138.79446411 57.23330307]
[150.13070679 47.41039276]
[161.46694946 37.58747864]
[172.80319214 27.76457024]
[184.13943481 17.94165802]
[195.39276123 8.02387047]
[190.73977661 -7.55702066]
[193.33302307 -23.55082893]
[202.60401917 -36.76803589]
[216.65773010 -44.59523392]
[232.65974426 -45.51181030]
[247.40788269 -39.38511276]
[258.40774536 -49.58330536]
[269.40759277 -59.78149414]
[280.40747070 -69.97969055]
[285.26702881 -85.03608704]
[299.86065674 -88.01515198]
[300.61785889 -103.57357025]
[311.91857910 -113.75929260]
[326.74649048 -112.94152832]
[337.74633789 -123.13972473]
[348.74618530 -133.33792114]
[359.74606323 -143.53610229]
[370.74591064 -153.73429871]
[381.74575806 -163.93249512]
[392.74563599 -174.13067627]
[403.57260132 -184.51222229]
[414.22366333 -195.07418823]
[424.87472534 -205.63613892]
[422.65881348 -220.88069153]
[429.76126099 -234.34948730]
[443.27291870 -240.97512817]
[457.91983032 -238.40483093]
[468.57089233 -248.96679688]
[475.56036377 -264.41293335]
[492.33776855 -261.97253418]
[494.63714600 -245.17523193]
[479.13284302 -238.31573486]
[468.48178101 -227.75376892]
[470.92895508 -213.08580017]
[464.19006348 -199.63027954]
[450.66207886 -192.64122009]
[435.43667603 -194.98509216]
[424.78564453 -184.42312622]
[414.13458252 -173.86117554]
[413.22058105 -169.15422058]
[409.32696533 -164.97853088]
[402.94381714 -163.13082886]
[391.94396973 -152.93263245]
[380.94409180 -142.73443604]
[369.94424438 -132.53625488]
[358.94439697 -122.33805847]
[347.94451904 -112.13986206]
[336.94467163 -101.94167328]
[336.64016724 -87.09435272]
[325.63003540 -76.59523773]
[310.05886841 -77.01529694]
[305.98608398 -62.68833542]
[290.60565186 -58.97982788]
[279.60580444 -48.78163910]
[268.60592651 -38.58344650]
[257.60607910 -28.38525391]
[262.33923340 -15.33278656]
[261.73428345 -1.41844356]
[255.84970093 11.25261497]
[245.54518127 20.75071335]
[232.35627747 25.61551666]
[218.26557922 25.08049202]
[205.40472412 19.19349861]
[202.51643372 26.01350021]
[193.96234131 29.27790260]
[182.62609863 39.10081482]
[171.28985596 48.92372513]
[159.95361328 58.74663544]
[148.61737061 68.56954956]
[137.28112793 78.39245605]
[134.27865601 85.16297150]
[125.67094421 88.28321838]
[114.17127991 97.91429901]
[109.19700623 110.98136902]
[95.45980072 113.58535767]
[83.96014404 123.21644592]
[72.46047974 132.84753418]
[69.82526398 138.94789124]
[65.19338989 142.28587341]
[60.40889740 142.60112000]
[48.59218597 151.84045410]
[36.77547073 161.07978821]
[41.09532928 173.83081055]
[41.26978683 187.26977539]
[37.29589462 200.08506775]
[29.57487869 211.03028870]
[18.87168694 219.04550171]
[6.23921251 223.35978699]
[-7.08527040 223.56546021]
[-19.80128860 219.65652466]
[-30.67209816 212.02787781]
[-42.79252243 220.86503601]
[-54.91294861 229.70219421]
[-67.03337860 238.53933716]
[-79.15380096 247.37649536]
[-91.27422333 256.21365356]
[-88.99373627 273.62078857]
[-95.79715729 289.70834351]
[-109.73241425 300.09127808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[14 42]
[15 41]
[16 40]
[17 39]
[18 36]
[19 35]
[20 34]
[21 33]
[22 31]
[23 30]
[60 183]
[61 182]
[62 181]
[63 180]
[64 179]
[65 178]
[72 169]
[73 168]
[74 167]
[75 164]
[76 163]
[77 162]
[79 160]
[80 159]
[81 157]
[82 156]
[83 155]
[84 154]
[85 153]
[86 152]
[87 150]
[93 143]
[94 142]
[95 141]
[96 140]
[98 138]
[101 135]
[102 134]
[103 133]
[104 132]
[105 131]
[106 130]
[107 129]
[108 126]
[109 125]
[110 124]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
