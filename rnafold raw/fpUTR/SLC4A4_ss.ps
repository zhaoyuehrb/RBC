%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGCGGCCGCGGUGGCAGCGAAGGCGGCGGCGGCGGCGGCAGUGGCAGUGGCCGCUGCAGCCCCACACUCCGCCGCCAAACUGGAGGAGCGACGGAAGCCAGACCCCAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[173.44903564 190.74212646]
[172.35057068 179.94155884]
[174.98451233 169.36984253]
[163.18624878 160.10696411]
[151.38796997 150.84410095]
[139.58969116 141.58123779]
[127.79141998 132.31835938]
[115.99314880 123.05548859]
[104.19487762 113.79262543]
[89.45461273 111.01329041]
[75.09328461 115.34367371]
[60.73195267 119.67404938]
[46.37062073 124.00443268]
[32.00929260 128.33480835]
[21.03039742 139.72666931]
[6.61133146 135.99307251]
[-7.74999905 140.32344055]
[-18.72889137 151.71530151]
[-33.14796066 147.98170471]
[-47.50928879 152.31208801]
[-53.50800323 166.75332642]
[-67.40968323 173.91413879]
[-82.65038300 170.41342163]
[-92.03391266 157.90408325]
[-91.12964630 142.29266357]
[-80.36456299 130.95039368]
[-64.82160187 129.23275757]
[-51.83966827 137.95075989]
[-37.47833633 133.62037659]
[-27.52666283 122.53825378]
[-12.08037853 125.96212006]
[2.28095222 121.63173676]
[12.23262691 110.54961395]
[27.67891121 113.97348022]
[42.04024124 109.64309692]
[56.40157318 105.31272125]
[70.76290131 100.98233795]
[85.12423706 96.65196228]
[91.86283112 83.25079346]
[86.77424622 69.14028931]
[81.68566132 55.02978516]
[69.72563171 44.67275238]
[72.68652344 30.07541084]
[67.59793854 15.96490669]
[62.50935745 1.85440230]
[57.42077637 -12.25610161]
[52.33219147 -26.36660576]
[47.24361038 -40.47710800]
[42.15502548 -54.58761215]
[37.06644440 -68.69812012]
[24.19300079 -78.85717773]
[26.82172203 -95.04426575]
[42.24840546 -100.60749817]
[54.60339737 -89.82389069]
[51.17694855 -73.78669739]
[56.26552963 -59.67619705]
[61.35411453 -45.56569290]
[66.44269562 -31.45518875]
[71.53128052 -17.34468460]
[76.61986542 -3.23418069]
[81.70844269 10.87632370]
[86.79702759 24.98682785]
[98.39309692 34.33458328]
[95.79616547 49.94120026]
[100.88475037 64.05170441]
[105.97333527 78.16220856]
[113.04876709 64.93578339]
[126.26203918 57.83583069]
[141.19659424 59.23551178]
[152.86051941 68.66699219]
[157.35513306 82.97777557]
[153.17810059 97.38445282]
[141.72558594 107.07156372]
[126.82564545 108.80117798]
[113.45774078 101.99434662]
[125.25601959 111.25721741]
[137.05429077 120.52008820]
[148.85256958 129.78295898]
[160.65083313 139.04582214]
[172.44911194 148.30870056]
[184.24739075 157.57156372]
[202.96644592 151.01162720]
[221.77676392 156.84597778]
[233.33151245 172.62022400]
[233.22247314 192.03256226]
[245.93849182 199.98887634]
[258.65451050 207.94519043]
[271.37051392 215.90150452]
[280.43115234 217.84115601]
[284.31518555 224.24269104]
[296.81491089 232.53469849]
[318.15731812 232.34870911]
[326.98019409 250.92776489]
[340.10162354 258.19601440]
[354.63305664 252.41918945]
[369.46170044 257.38351440]
[377.58596802 270.74505615]
[375.16983032 286.19485474]
[363.35406494 296.43798828]
[347.71777344 296.63800049]
[335.64389038 286.70040894]
[332.83337402 271.31747437]
[319.71191406 264.04922485]
[311.48275757 267.93835449]
[302.25131226 267.52310181]
[294.16503906 262.77020264]
[289.16552734 254.67037964]
[288.52288818 245.03439331]
[276.02319336 236.74240112]
[263.41421509 228.61752319]
[250.69819641 220.66120911]
[237.98217773 212.70489502]
[225.26615906 204.74858093]
[216.51998901 210.78070068]
[206.21035767 213.50379944]
[195.54928589 212.57070923]
[185.79933167 208.06565857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[4 80]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[16 32]
[17 31]
[19 29]
[20 28]
[39 66]
[40 65]
[41 64]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[85 113]
[86 112]
[87 111]
[88 110]
[90 109]
[91 108]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
