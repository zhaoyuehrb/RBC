%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGGAGCUGCGGGGAGCGCGGGGGCGGCCCGGAGCGUGCCGGGGUCCCCGCGCCUCGCUCGCCGGCCGCGCUCCGAAG\
) } def
/len { sequence length } bind def

/coor [
[149.11999512 275.38046265]
[144.27677917 261.18386841]
[139.43357849 246.98728943]
[134.59037781 232.79069519]
[129.74716187 218.59408569]
[124.90396118 204.39749146]
[120.06075287 190.20089722]
[114.79728699 184.75978088]
[115.31023407 175.39649963]
[104.23427582 165.43795776]
[107.66770172 149.99378967]
[103.34621429 135.62979126]
[99.02472687 121.26577759]
[94.70323944 106.90177155]
[91.87091064 105.17607117]
[89.67552948 102.28453827]
[88.58802795 98.49105072]
[88.96230316 94.24396515]
[90.96564484 90.12316132]
[88.78162384 75.28301239]
[86.59761047 60.44285965]
[82.15885925 52.18261719]
[84.61513519 45.02184677]
[82.97456360 30.11183357]
[81.33399963 15.20181847]
[79.69342804 0.29180411]
[78.05286407 -14.61821079]
[76.41229248 -29.52822495]
[74.77172852 -44.43824005]
[73.13115692 -59.34825516]
[71.49059296 -74.25827026]
[69.85002136 -89.16828156]
[66.04000092 -95.03923798]
[65.96860504 -101.02388000]
[68.67510986 -105.22100830]
[68.12728119 -120.21099854]
[67.57945251 -135.20098877]
[67.03162384 -150.19097900]
[66.48379517 -165.18096924]
[54.73860550 -175.75576782]
[53.99444962 -191.54252625]
[64.69282532 -203.17524719]
[80.48657227 -203.75245667]
[92.00553894 -192.93168640]
[92.41572571 -177.13272095]
[81.47378540 -165.72880554]
[82.02161407 -150.73881531]
[82.56944275 -135.74882507]
[83.11727905 -120.75882721]
[83.66510773 -105.76883698]
[84.76003265 -90.80885315]
[86.40060425 -75.89883423]
[88.04116821 -60.98882294]
[89.68173981 -46.07880783]
[91.32231140 -31.16879272]
[92.96287537 -16.25877953]
[94.60344696 -1.34876406]
[96.24401093 13.56125069]
[97.88458252 28.47126579]
[99.52514648 43.38127899]
[101.43775940 58.25884247]
[103.62178040 73.09899139]
[105.80579376 87.93914795]
[109.06724548 102.58028412]
[113.38873291 116.94429016]
[117.71022034 131.30830383]
[122.03170776 145.67231750]
[133.41676331 156.65824890]
[129.67424011 171.07501221]
[134.25735474 185.35769653]
[139.10055542 199.55429077]
[143.94375610 213.75088501]
[148.78697205 227.94747925]
[153.63017273 242.14407349]
[158.47338867 256.34066772]
[163.31658936 270.53726196]
[178.40023804 273.43194580]
[190.00520325 283.49276733]
[195.00984192 298.01342773]
[192.06788635 313.08792114]
[181.97074890 324.66131592]
[167.43447876 329.62039185]
[152.36927795 326.63119507]
[140.82759094 316.49783325]
[135.91409302 301.94610596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[9 69]
[11 67]
[12 66]
[13 65]
[14 64]
[19 63]
[20 62]
[21 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
