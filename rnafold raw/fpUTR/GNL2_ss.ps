%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCUCUGAGGCCGAGAGGGACGCGAGCGGAAGUGACGUACGUCGUGCACACGUGGUCCGGCGUGGUUCAGGCGGGUGUCUUCGGCCGGGCUUGGGAACAUAAAAGUUUGUUUCACCACGUAAGCCGGACCUCGCACUCCGGUCCCGGUCUCGUCGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[71.88095856 472.16238403]
[61.80411530 460.48074341]
[59.66513062 445.20236206]
[66.14655304 431.20257568]
[79.18018341 422.94857788]
[79.18018341 407.94857788]
[68.49931335 397.63092041]
[68.28562927 382.41876221]
[79.18018341 371.28564453]
[79.18018341 356.28564453]
[79.18018341 341.28564453]
[79.18018341 326.28564453]
[79.18018341 311.28564453]
[79.18018341 296.28564453]
[79.18018341 281.28564453]
[77.24601746 279.19570923]
[76.04323578 276.19604492]
[75.92924500 272.56878662]
[77.15001678 268.72241211]
[79.79873657 265.14840698]
[80.94697571 250.19242859]
[82.09521484 235.23645020]
[83.24345398 220.28045654]
[84.39169312 205.32447815]
[74.53196716 194.21945190]
[75.48339081 179.03559875]
[87.19821167 168.76910400]
[88.34645081 153.81312561]
[89.49468994 138.85713196]
[82.75435638 125.57492065]
[91.52534485 112.40753174]
[81.05757904 123.15116882]
[66.79518890 118.50527954]
[64.66368103 103.65750122]
[77.04428864 95.18692780]
[62.11304092 93.75241852]
[47.18179321 92.31790924]
[32.23749161 91.02648163]
[17.28150368 89.87824249]
[2.32551599 88.73000336]
[-10.74063587 98.03887939]
[-26.12497902 93.48899078]
[-32.02596283 78.57061005]
[-23.91685677 64.72785187]
[-8.01827335 62.57969284]
[3.47375488 73.77401733]
[18.42974091 74.92225647]
[33.38573074 76.07049561]
[40.32806396 73.43477631]
[48.61630249 77.38666534]
[63.54755020 78.82117462]
[78.47879791 80.25568390]
[89.98078918 84.11190796]
[97.55469513 92.00495911]
[104.72048950 78.82727051]
[104.51579285 63.00738907]
[117.39318085 55.52258682]
[124.55897522 42.34490204]
[131.72477722 29.16722107]
[138.89056396 15.98953629]
[146.05636597 2.81185269]
[153.22216797 -10.36583138]
[160.38796997 -23.54351425]
[167.55375671 -36.72119904]
[174.20956421 -50.16368103]
[180.34558105 -63.85123444]
[186.48161316 -77.53878784]
[192.61764526 -91.22634125]
[198.75367737 -104.91390228]
[188.01052856 -113.36866760]
[184.85746765 -130.56980896]
[185.71900940 -145.54505920]
[186.58055115 -160.52029419]
[187.44210815 -175.49552917]
[188.30364990 -190.47076416]
[179.64073181 -206.69548035]
[189.78399658 -220.99179077]
[190.35853577 -235.98078918]
[190.93307495 -250.96977234]
[179.22703552 -261.33813477]
[176.97549438 -276.81277466]
[185.24154663 -290.08703613]
[200.12220764 -294.89324951]
[214.59130859 -288.96203613]
[221.81697083 -275.09396362]
[218.38745117 -259.83706665]
[205.92207336 -250.39523315]
[205.34753418 -235.40623474]
[204.77299500 -220.41725159]
[212.77293396 -211.30491638]
[212.38819885 -198.78364563]
[203.27888489 -189.60922241]
[202.41734314 -174.63398743]
[201.55580139 -159.65873718]
[200.69424438 -144.68350220]
[199.83270264 -129.70826721]
[213.01037598 -122.54247284]
[225.11177063 -131.40568542]
[237.21315002 -140.26889038]
[249.31454468 -149.13209534]
[261.41592407 -157.99530029]
[273.51730347 -166.85850525]
[273.32321167 -182.37435913]
[282.31362915 -195.02157593]
[297.03155518 -199.93704224]
[311.81768799 -195.23063660]
[320.98641968 -182.71209717]
[321.01220703 -167.19503784]
[311.88513184 -154.64610291]
[297.11471558 -149.89059448]
[282.38052368 -154.75711060]
[270.27914429 -145.89390564]
[258.17776489 -137.03070068]
[246.07637024 -128.16749573]
[233.97497559 -119.30429077]
[221.87359619 -110.44108582]
[212.44122314 -98.77787018]
[206.30520630 -85.09031677]
[200.16917419 -71.40276337]
[194.03314209 -57.71520615]
[187.89710999 -44.02765274]
[188.80711365 -41.32937241]
[188.67759705 -38.10014343]
[187.29780579 -34.74362946]
[184.61041260 -31.73318291]
[180.73144531 -29.55540085]
[173.56564331 -16.37771797]
[166.39984131 -3.20003390]
[159.23405457 9.97764969]
[152.06825256 23.15533447]
[144.90245056 36.33301926]
[137.73666382 49.51070023]
[130.57086182 62.68838501]
[131.28810120 77.56571198]
[117.89817810 85.99307251]
[110.73237610 99.17075348]
[106.48133087 113.55576324]
[113.13954163 127.90773010]
[104.45067596 140.00537109]
[103.30243683 154.96136475]
[102.15419769 169.91734314]
[112.16455078 181.85177612]
[110.78702545 197.00291443]
[99.34767914 206.47271729]
[98.19944000 221.42869568]
[97.05120087 236.38468933]
[95.90296173 251.34066772]
[94.75472260 266.29666138]
[94.18018341 281.28564453]
[94.18018341 296.28564453]
[94.18018341 311.28564453]
[94.18018341 326.28564453]
[94.18018341 341.28564453]
[94.18018341 356.28564453]
[94.18018341 371.28564453]
[105.07473755 382.41876221]
[104.86105347 397.63092041]
[94.18018341 407.94857788]
[94.18018341 422.94857788]
[107.21381378 431.20257568]
[113.69523621 445.20236206]
[111.55625153 460.48074341]
[101.47940826 472.16238403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 159]
[6 158]
[9 155]
[10 154]
[11 153]
[12 152]
[13 151]
[14 150]
[15 149]
[20 148]
[21 147]
[22 146]
[23 145]
[24 144]
[27 141]
[28 140]
[29 139]
[31 137]
[35 52]
[36 51]
[37 50]
[38 48]
[39 47]
[40 46]
[54 136]
[55 135]
[57 133]
[58 132]
[59 131]
[60 130]
[61 129]
[62 128]
[63 127]
[64 126]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[71 96]
[72 95]
[73 94]
[74 93]
[75 92]
[77 89]
[78 88]
[79 87]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
