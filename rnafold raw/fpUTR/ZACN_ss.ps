%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGCUCAGCUGCCAGAGAAGUGACUGGAAUAGAGGUUGUAGCUUAGGCACCGCUGCUCCCUCCAGUCCCUCCGUGCAGCCG\
) } def
/len { sequence length } bind def

/coor [
[84.35321808 288.36862183]
[72.08275604 297.44598389]
[57.08732605 300.29199219]
[42.34428787 296.34161377]
[30.78087997 286.37918091]
[24.69302559 272.38272095]
[25.28947258 257.13125610]
[32.45179367 243.65298462]
[44.75791168 234.62400818]
[59.76443100 231.83705139]
[63.64671707 217.34817505]
[67.52900696 202.85928345]
[71.41128540 188.37039185]
[75.29357147 173.88151550]
[78.90425873 159.32255554]
[74.19303131 145.19267273]
[84.80716705 133.46022034]
[88.14498138 118.83629608]
[91.48279572 104.21237946]
[89.65869141 99.00792694]
[91.02759552 93.17096710]
[95.65541077 88.63997650]
[95.20817566 79.26351166]
[100.51932526 73.85870361]
[105.47351074 59.70045471]
[110.42769623 45.54220581]
[115.38188171 31.38395691]
[120.33606720 17.22570610]
[125.29025269 3.06745625]
[130.24444580 -11.09079361]
[129.09989929 -15.32917118]
[129.28311157 -19.33645439]
[130.57157898 -22.73876572]
[132.64782715 -25.26760101]
[135.14009094 -26.78098679]
[137.66671753 -27.27047539]
[145.16671753 -40.26085663]
[141.29832458 -55.34970093]
[149.08944702 -68.41695404]
[163.49819946 -72.01189423]
[170.99819946 -85.00227356]
[178.49819946 -97.99265289]
[185.99819946 -110.98303223]
[193.49819946 -123.97341919]
[186.33772278 -137.63838196]
[187.72454834 -153.00328064]
[197.21614075 -165.16523743]
[211.78376770 -170.24342346]
[226.77894592 -166.61738586]
[237.41677856 -155.44419861]
[240.30276489 -140.28916931]
[234.51599121 -125.98823547]
[221.90301514 -117.10475159]
[206.48857117 -116.47341919]
[198.98857117 -103.48303223]
[191.48857117 -90.49265289]
[183.98857117 -77.50227356]
[176.48857117 -64.51189423]
[180.57963562 -50.23608398]
[173.15863037 -36.95514679]
[158.15710449 -32.76085663]
[150.65710449 -19.77047539]
[144.40269470 -6.13660765]
[139.44850159 8.02164268]
[134.49432373 22.17989159]
[129.54013062 36.33814240]
[124.58594513 50.49639130]
[119.63175964 64.65464020]
[114.67757416 78.81288910]
[109.98899841 93.06130219]
[106.10671234 107.55019379]
[102.76889801 122.17411041]
[99.43108368 136.79803467]
[103.90357208 151.97390747]
[93.52817535 162.66036987]
[94.67486572 171.97720337]
[89.78246307 177.76379395]
[85.90017700 192.25268555]
[82.01789093 206.74157715]
[78.13560486 221.23045349]
[74.25331879 235.71934509]
[85.85587311 245.63618469]
[91.99879456 259.60855103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[15 75]
[17 73]
[18 72]
[19 71]
[22 70]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[36 62]
[37 61]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
