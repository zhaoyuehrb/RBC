%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGCGGCUCCCGGGCCAUCUUUGUGCGGGGCCGCGCUUCCGCCAGCGCCGCAGCGGGGAAUCUGCAGUAGGUCUGCCGGCG\
) } def
/len { sequence length } bind def

/coor [
[100.44115448 123.86916351]
[86.37995911 119.60678864]
[77.47791290 107.91753387]
[62.48047638 108.19471741]
[53.71769714 111.54714203]
[46.92610931 108.19471741]
[31.92867088 107.91753387]
[16.93123245 107.64035034]
[1.93379331 107.36316681]
[-13.06364536 107.08598328]
[-21.94431686 110.11231995]
[-28.60738945 106.51123047]
[-43.58434296 105.68005371]
[-58.56129837 104.84888458]
[-73.53825378 104.01770782]
[-87.74595642 110.97843933]
[-100.02494049 102.54778290]
[-115.00189209 101.71661377]
[-125.56921387 113.24335480]
[-141.08015442 115.22954559]
[-154.21090698 106.73735809]
[-158.76155090 91.77655792]
[-152.58340454 77.41116333]
[-138.59359741 70.42407990]
[-123.39768219 74.11440277]
[-114.17072296 86.73966217]
[-99.19377136 87.57083130]
[-86.05731201 80.55065918]
[-72.70707703 89.04075623]
[-57.73012543 89.87192535]
[-42.75317001 90.70310211]
[-27.77621841 91.53427124]
[-12.78646183 92.08854675]
[2.21097684 92.36573029]
[17.20841599 92.64291382]
[32.20585251 92.92009735]
[47.20329285 93.19728088]
[62.20329285 93.19728088]
[77.20072937 92.92009735]
[85.66475677 80.90988159]
[99.55884552 76.13083649]
[113.62004089 80.39321136]
[122.52208710 92.08246613]
[137.51951599 91.80528259]
[152.51696777 91.52809906]
[167.51440430 91.25091553]
[181.16923523 83.25992584]
[194.03732300 90.76071930]
[209.03475952 90.48353577]
[224.01170349 89.65235901]
[238.94772339 88.26833344]
[253.88372803 86.88430786]
[268.79162598 85.22451782]
[283.66629028 83.28952789]
[296.35305786 73.83666992]
[309.97207642 79.86750793]
[324.84677124 77.93252563]
[339.72143555 75.99753571]
[354.59609985 74.06254578]
[365.48208618 62.27803040]
[381.47180176 63.58517456]
[390.29931641 76.98124695]
[385.19287109 92.18993378]
[370.06976318 97.54442596]
[356.53109741 88.93721771]
[341.65643311 90.87220764]
[326.78173828 92.80718994]
[311.90707397 94.74217987]
[300.28424072 104.05664062]
[285.60128784 98.16419983]
[270.72662354 100.09918976]
[264.34768677 104.18253326]
[255.26776123 101.82032013]
[240.33174133 103.20434570]
[225.39573669 104.58837128]
[221.57887268 107.81586456]
[215.62844849 108.51336670]
[209.31193542 105.48097229]
[194.31449890 105.75815582]
[181.73237610 113.72931671]
[167.79158020 106.24835205]
[152.79414368 106.52553558]
[137.79670715 106.80271912]
[122.79927063 107.07990265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[12 32]
[13 31]
[14 30]
[15 29]
[17 27]
[18 26]
[43 84]
[44 83]
[45 82]
[46 81]
[48 79]
[49 78]
[50 75]
[51 74]
[52 73]
[53 71]
[54 70]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
