%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGACGCGACGGGUCCGCCCACAGGCAAGGAAGGCCGACCCCGCGAGUGCAGGCGCGAGCGCUAGCCCGUGACGUCUGAGGGGGUUGGGGGG\
) } def
/len { sequence length } bind def

/coor [
[92.31699371 125.21556091]
[84.56648254 122.00569153]
[78.07946014 116.43355560]
[73.56826019 108.97775269]
[71.56884003 100.32875824]
[72.37885284 91.32527161]
[76.01836395 82.87294006]
[61.36356354 79.67344666]
[46.70875931 76.47395325]
[32.05395889 73.27445221]
[25.33525848 74.99758148]
[19.67889404 73.19673157]
[16.55140495 69.34867859]
[2.14009953 65.18762970]
[-12.27120590 61.02658844]
[-26.68251038 56.86554337]
[-41.09381485 52.70450211]
[-56.49873352 56.30993271]
[-66.58015442 45.34571075]
[-80.99146271 41.18466568]
[-95.40276337 37.02362442]
[-110.45040131 45.75568008]
[-126.86292267 41.09071732]
[-134.75181580 26.34028244]
[-148.19854736 34.64455032]
[-163.55940247 30.92702293]
[-171.72103882 17.39324379]
[-167.84130859 2.07256103]
[-154.22200012 -5.94553328]
[-138.94319153 -1.90404725]
[-131.06953430 11.79927731]
[-120.92530060 3.66921210]
[-107.75080872 2.91714811]
[-96.41573334 10.04842377]
[-91.24172211 22.61231804]
[-76.83041382 26.77336311]
[-62.41911316 30.93440628]
[-48.04499054 27.03134918]
[-36.93277359 38.29319763]
[-22.52146721 42.45423889]
[-8.11016178 46.61528397]
[6.30114317 50.77632523]
[20.71244812 54.93737030]
[35.25345230 58.61965179]
[49.90825653 61.81914902]
[64.56305695 65.01863861]
[79.21785736 68.21813965]
[93.14617157 62.65017700]
[101.55689240 50.23004532]
[109.96762085 37.80991364]
[118.37834930 25.38978004]
[126.78907013 12.96964741]
[121.38228607 -1.57498395]
[125.58964539 -16.51077271]
[137.79331970 -26.09460258]
[153.30076599 -26.64129829]
[166.14904785 -17.94063950]
[171.39772034 -3.33821058]
[167.02859497 11.55105782]
[154.72166443 21.00193787]
[139.20921326 21.38037300]
[130.79847717 33.80050659]
[122.38775635 46.22063828]
[113.97702789 58.64076996]
[105.56629944 71.06090546]
[119.06501007 79.60975647]
[125.49314117 93.29531097]
[123.66329193 107.43992615]
[135.94265747 116.05485535]
[148.22203064 124.66978455]
[163.96295166 126.26167297]
[169.93806458 139.90525818]
[182.21743774 148.52018738]
[194.49681091 157.13511658]
[206.77618408 165.75004578]
[222.51708984 167.34193420]
[228.49220276 180.98551941]
[240.77157593 189.60044861]
[257.14575195 190.50495911]
[264.30706787 205.25784302]
[254.88856506 218.68260193]
[238.57920837 216.96897888]
[232.15664673 201.87982178]
[219.87727356 193.26489258]
[205.01466370 192.28919983]
[198.16123962 178.02941895]
[185.88188171 169.41448975]
[173.60250854 160.79956055]
[161.32313538 152.18463135]
[146.46051025 151.20893860]
[139.60710144 136.94915771]
[127.32773590 128.33422852]
[115.04836273 119.71929932]
[108.34907532 123.90765381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 47]
[8 46]
[9 45]
[10 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[19 37]
[20 36]
[21 35]
[24 31]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[68 93]
[69 92]
[70 91]
[72 89]
[73 88]
[74 87]
[75 86]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
