%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGCGGAGGCUGGCCCGGGACGCGCCCGGAGCCCAGGGAAGGAGGGAGGAGGGGAGGGUCGCGGCCGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[67.51672363 296.57205200]
[58.81388092 309.41885376]
[44.21055984 314.66503906]
[29.32203484 310.29336548]
[19.87324905 297.98483276]
[19.49745178 282.47232056]
[28.33914757 269.72067261]
[42.99851990 264.63320923]
[47.22451019 250.24081421]
[43.38631058 235.84924316]
[54.69815445 224.78791809]
[58.92414093 210.39552307]
[63.15013123 196.00312805]
[67.37612152 181.61073303]
[71.60210419 167.21833801]
[75.82809448 152.82594299]
[80.05408478 138.43354797]
[84.28007507 124.04116058]
[83.10910034 116.52568054]
[88.98311615 109.15443420]
[86.43231964 95.40724945]
[96.80883789 86.03604889]
[101.61835480 71.82800293]
[106.42787170 57.61996078]
[103.52388763 42.06755066]
[114.93348694 32.49308395]
[112.02950287 16.94067574]
[123.43910217 7.36620998]
[128.24861145 -6.84183550]
[133.05813599 -21.04988098]
[122.07521057 -33.22799301]
[118.67061615 -49.17481232]
[123.66543579 -64.59956360]
[135.63343811 -75.39929199]
[151.30671692 -78.75021362]
[155.53269958 -93.14260864]
[159.75868225 -107.53500366]
[149.57843018 -119.12662506]
[147.30374146 -134.38537598]
[153.66049194 -148.44223022]
[166.62025452 -156.81170654]
[182.04762268 -156.82313538]
[195.01976013 -148.47286987]
[201.39732361 -134.42543030]
[199.14524841 -119.16333771]
[188.98217773 -107.55664062]
[174.15107727 -103.30901337]
[169.92509460 -88.91661835]
[165.69911194 -74.52422333]
[175.84622192 -65.16059113]
[180.93670654 -52.25415802]
[179.90367126 -38.35171890]
[172.89480591 -26.22382545]
[161.25447083 -18.31266785]
[147.26617432 -16.24036407]
[142.45666504 -2.03231835]
[137.64714050 12.17572689]
[140.89514160 26.71188164]
[129.14152527 37.30260086]
[132.38952637 51.83875656]
[120.63591766 62.42947769]
[115.82640076 76.63751984]
[111.01688385 90.84556580]
[113.56768036 104.59275055]
[103.19116211 113.96395111]
[98.67247009 128.26715088]
[94.44647980 142.65954590]
[90.22048950 157.05194092]
[85.99449921 171.44433594]
[81.76851654 185.83673096]
[77.54252625 200.22912598]
[73.31653595 214.62152100]
[69.09054565 229.01390076]
[72.62647247 244.43492126]
[61.61690521 254.46679688]
[57.39091492 268.85919189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 76]
[9 75]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[20 65]
[22 63]
[23 62]
[24 61]
[26 59]
[28 57]
[29 56]
[30 55]
[35 49]
[36 48]
[37 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
