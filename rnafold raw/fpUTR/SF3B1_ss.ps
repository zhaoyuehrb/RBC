%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUGCAGCCCCCAGCUAUUUUUCUCCGUGGCGGCGGCGACGAGCGGAAGUUCUUGGGAGCGCCAGUUCCGUCUGUGUGUUCGAGUGGACAAA\
) } def
/len { sequence length } bind def

/coor [
[123.65013123 120.44212341]
[117.43794250 107.78938293]
[106.95159912 117.78852081]
[92.46405792 117.54895782]
[82.31404877 107.20856476]
[67.31610107 106.96055603]
[56.00436783 117.66954803]
[40.79784775 117.20437622]
[30.65817261 106.35437775]
[15.66022301 106.10636902]
[0.66227353 105.85835266]
[-13.26394081 113.36642456]
[-25.86154366 105.41975403]
[-40.85949326 105.17174530]
[-49.69135284 108.20542145]
[-56.34703827 104.65939331]
[-71.32859039 103.91563416]
[-86.31014252 103.17188263]
[-101.29168701 102.42812347]
[-116.27323914 101.68436432]
[-125.89992523 113.85427094]
[-140.85041809 118.00907135]
[-155.37594604 112.55117035]
[-163.89114380 99.57923889]
[-163.12174988 84.08125305]
[-153.36361694 72.01650238]
[-138.36892700 68.02412415]
[-123.90345764 73.63927460]
[-115.52947998 86.70281982]
[-100.54793549 87.44657135]
[-85.56638336 88.19033051]
[-70.58483124 88.93408966]
[-55.60328293 89.67784119]
[-40.61148453 90.17379761]
[-25.61353493 90.42180634]
[-12.76007557 82.89599609]
[0.91028267 90.86040497]
[15.90823269 91.10841370]
[30.90618134 91.35642242]
[41.39905167 80.84760284]
[56.61263657 80.88546753]
[67.56410980 91.96260834]
[82.56205750 92.21061707]
[93.04840088 82.21147919]
[107.53594208 82.45104218]
[117.68595123 92.79143524]
[125.96708679 78.58964539]
[140.17021179 70.49743652]
[156.42323303 70.61340332]
[170.34878540 78.81288910]
[178.24322510 92.80672455]
[193.24116516 92.55871582]
[208.23912048 92.31070709]
[223.23707581 92.06269836]
[230.75427246 78.74208069]
[243.84324646 71.02356720]
[258.93792725 70.89381409]
[271.98358154 78.28752136]
[279.52597046 91.13189697]
[294.52392578 90.88388824]
[309.52188110 90.63587189]
[324.51983643 90.38786316]
[339.51779175 90.13985443]
[354.51571655 89.89184570]
[369.50753784 89.39589691]
[384.48907471 88.65213776]
[399.47061157 87.90838623]
[409.89096069 76.02594757]
[425.66662598 75.07546997]
[437.43823242 85.62084961]
[438.22186279 101.40570068]
[427.55264282 113.06514740]
[411.76037598 113.68185425]
[400.21438599 102.88993073]
[385.23281860 103.63368988]
[370.25128174 104.37744904]
[363.59558105 107.92346954]
[354.76373291 104.88980103]
[339.76577759 105.13780975]
[324.76785278 105.38581848]
[309.76989746 105.63382721]
[294.77194214 105.88183594]
[279.77398682 106.12984467]
[272.66040039 119.21656799]
[259.86633301 127.03757477]
[244.77561951 127.40696716]
[231.43859863 120.12544250]
[223.48507690 107.06064606]
[208.48712158 107.30865479]
[193.48918152 107.55666351]
[178.49122620 107.80467224]
[172.59779358 120.24168396]
[161.84228516 128.93464661]
[148.31622314 132.11889648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[5 43]
[6 42]
[9 39]
[10 38]
[11 37]
[13 35]
[14 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[51 91]
[52 90]
[53 89]
[54 88]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
