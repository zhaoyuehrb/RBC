%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUAAGUCGGUGGCGGCGCCGGUACGCCUGGUCCCCGCGUGGAGUCUUUACUCAAAACAGCUCCCGCCUCAGGCCGAGAUGAGGAGCCCUUCAGAAUAGCUGCUGUCUCUGGGAGGACCCGGGCGUCCUUGGCAGCCCAGCUGCUCUGGACAAAGCCCUGCCAGUCAGGCCUCCGCUGGCAGGAACC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 147.00154114]
[92.50000000 132.00154114]
[92.50000000 117.00154114]
[77.98993683 113.19916534]
[70.63358307 126.27143097]
[63.27722931 139.34368896]
[62.96693039 145.97695923]
[59.81632614 150.73388672]
[55.45537567 152.72073364]
[47.67082977 165.54261780]
[39.88628769 178.36451721]
[32.10174179 191.18640137]
[24.31719971 204.00830078]
[16.53265572 216.83018494]
[16.71229553 233.22834778]
[2.46496201 241.34902954]
[-11.55290985 232.83837891]
[-10.92093468 216.45141602]
[3.71076536 209.04563904]
[11.49530888 196.22375488]
[19.27985191 183.40185547]
[27.06439590 170.57997131]
[34.84893799 157.75807190]
[42.63348389 144.93618774]
[50.20496750 131.98733521]
[57.56131744 118.91507721]
[64.91767120 105.84281158]
[64.29779816 90.85562897]
[55.88706970 78.43549347]
[47.47634506 66.01536560]
[39.06562042 53.59523010]
[30.65489388 41.17509842]
[22.24416733 28.75496483]
[13.73104858 16.40479088]
[5.11611891 4.12541866]
[-3.49881101 -8.15395355]
[-12.21496296 -20.36168480]
[-21.03174210 -32.49694061]
[-33.58924103 -40.70116043]
[-48.24404144 -43.90065765]
[-62.89884567 -47.10015106]
[-71.96898651 -45.87262726]
[-77.76856232 -50.47559357]
[-92.36846161 -53.91695404]
[-106.96835327 -57.35831070]
[-121.56825256 -60.79967117]
[-136.16815186 -64.24102783]
[-149.50379944 -56.19127655]
[-164.26113892 -59.88928604]
[-171.85316467 -72.65238190]
[-186.45306396 -76.09374237]
[-199.76066589 -67.56828308]
[-215.18087769 -71.03132629]
[-223.56515503 -84.42831421]
[-219.93928528 -99.81105042]
[-206.45439148 -108.05322266]
[-191.11085510 -104.26490784]
[-183.01170349 -90.69364166]
[-168.41180420 -87.25228119]
[-155.91888428 -95.28113556]
[-141.06349182 -91.99909210]
[-132.72679138 -78.84092712]
[-118.12689972 -75.39956665]
[-103.52700043 -71.95821381]
[-88.92710114 -68.51685333]
[-74.32720184 -65.07549286]
[-59.69934845 -61.75495148]
[-45.04454803 -58.55545807]
[-30.38974380 -55.35596466]
[-24.58725166 -60.10791779]
[-35.91413116 -69.94162750]
[-49.15706253 -76.98611450]
[-50.63478088 -91.91314697]
[-39.03011703 -101.41744995]
[-24.68693733 -97.02732086]
[-20.39031601 -82.65486908]
[-12.98226833 -69.61183167]
[-7.17977571 -74.36378479]
[-7.42778492 -89.36174011]
[-7.67579412 -104.35968781]
[-7.92380333 -119.35763550]
[-8.17181206 -134.35559082]
[-11.44750309 -142.90217590]
[-8.29787159 -149.60308838]
[-8.29787159 -164.60308838]
[-16.03517151 -178.40325928]
[-8.29787159 -191.13052368]
[-8.29787159 -206.13052368]
[-8.29787159 -221.13052368]
[-21.87974930 -228.18681335]
[-30.61716652 -240.75328064]
[-32.50232697 -255.94224548]
[-27.10203552 -270.26339722]
[-15.65724087 -280.42584229]
[-0.79787159 -284.09432983]
[14.06149769 -280.42584229]
[25.50629234 -270.26339722]
[30.90658379 -255.94224548]
[29.02142334 -240.75328064]
[20.28400612 -228.18681335]
[6.70212841 -221.13052368]
[6.70212841 -206.13052368]
[6.70212841 -191.13052368]
[14.43942833 -178.40325928]
[6.70212841 -164.60308838]
[6.70212841 -149.60308838]
[6.82613707 -134.60359192]
[7.07414627 -119.60564423]
[7.32215548 -104.60769653]
[7.57016468 -89.60974884]
[7.81817389 -74.61179352]
[7.27658987 -58.76309586]
[0.68588167 -47.05878830]
[-8.89648724 -41.31371689]
[-0.07970829 -29.17846298]
[6.40709114 -25.60862350]
[8.78056145 -16.76888275]
[17.39549065 -4.48951101]
[26.01042175 7.78986120]
[32.43730927 11.46646500]
[34.66429901 20.34424019]
[43.07502747 32.76437378]
[51.48575211 45.18450546]
[59.89647675 57.60463715]
[68.30720520 70.02477264]
[76.71792603 82.44490051]
[160.31513977 57.78480530]
[175.26391602 56.54611588]
[190.21267700 55.30742645]
[205.16145325 54.06873703]
[215.35688782 42.29202652]
[230.53469849 41.24876785]
[241.69917297 51.04113388]
[256.64791870 49.80244446]
[271.59671021 48.56375504]
[286.54547119 47.32506180]
[301.49423218 46.08637238]
[316.44299316 44.84768295]
[331.72872925 37.51401138]
[343.00732422 50.17220688]
[333.96603394 64.51415253]
[317.68170166 59.79645157]
[302.73291016 61.03514099]
[287.78414917 62.27383041]
[272.83538818 63.51251984]
[257.88662720 64.75121307]
[242.93785095 65.98989868]
[233.53742981 77.48632050]
[218.39489746 78.95548248]
[206.40013123 69.01750183]
[191.45137024 70.25619507]
[176.50260925 71.49488068]
[161.55383301 72.73357391]
[158.31567383 79.49850464]
[173.18463135 81.47691345]
[175.89779663 96.22949982]
[162.70565796 103.36864471]
[151.83937073 93.02837372]
[148.60121155 99.79331207]
[157.01193237 112.21343994]
[165.42265320 124.63357544]
[173.83338928 137.05371094]
[182.24411011 149.47384644]
[190.65483093 161.89396667]
[199.06556702 174.31410217]
[207.47628784 186.73423767]
[215.88700867 199.15437317]
[221.68341064 202.39447021]
[224.53248596 207.33790588]
[224.36253357 212.12712097]
[232.35800171 224.81854248]
[245.91654968 234.99707031]
[239.88917542 250.84342957]
[222.99356079 249.43832397]
[219.66658020 232.81402588]
[211.67109680 220.12258911]
[203.46687317 207.56509399]
[195.05615234 195.14495850]
[186.64543152 182.72483826]
[178.23469543 170.30470276]
[169.82397461 157.88456726]
[161.41325378 145.46443176]
[153.00251770 133.04429626]
[144.59179688 120.62416840]
[136.18107605 108.20403290]
[129.01080322 110.40341187]
[107.50000000 117.00154114]
[107.50000000 132.00154114]
[107.50000000 147.00154114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 189]
[2 188]
[3 187]
[4 27]
[5 26]
[6 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[28 126]
[29 125]
[30 124]
[31 123]
[32 122]
[33 121]
[34 119]
[35 118]
[36 117]
[37 115]
[38 114]
[39 69]
[40 68]
[41 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[50 59]
[51 58]
[78 111]
[79 110]
[80 109]
[81 108]
[82 107]
[84 106]
[85 105]
[87 103]
[88 102]
[89 101]
[127 153]
[128 152]
[129 151]
[130 150]
[133 147]
[134 146]
[135 145]
[136 144]
[137 143]
[138 142]
[159 185]
[160 184]
[161 183]
[162 182]
[163 181]
[164 180]
[165 179]
[166 178]
[167 177]
[170 176]
[171 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
