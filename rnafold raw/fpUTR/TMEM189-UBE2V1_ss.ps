%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCCGAUUGGCUGUGACGCGCGGCCGGGCGAGGACCCCGCCCGCGCCGCCGCCGCGCCCGGCGCUGGGCGGUCAUUGGGCGGCGUGAUCUCGCCGCGGUUCCGCGGCCCUGCCGCCGCCGCCGCCAGCAGAGCGCACCGGGCCGAUCGGGCGAGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[106.32256317 394.96041870]
[118.51110840 385.61511230]
[116.48114014 370.75311279]
[114.45117188 355.89108276]
[112.42119598 341.02908325]
[108.38028717 334.79666138]
[110.49886322 325.85952759]
[108.75746918 310.96093750]
[107.01607513 296.06237793]
[105.27468109 281.16378784]
[103.53328705 266.26522827]
[101.79189301 251.36663818]
[100.05049896 236.46806335]
[98.30910492 221.56948853]
[96.27913666 206.70748901]
[93.96134949 191.88763428]
[91.64356995 177.06779480]
[87.48255920 170.91490173]
[89.42743683 161.93835449]
[87.39746857 147.07635498]
[85.36749268 132.21434021]
[73.33564758 123.25696564]
[58.51580048 125.57474518]
[43.69595337 127.89252472]
[28.87610435 130.21031189]
[14.05625629 132.52809143]
[-0.74042112 134.98945618]
[-15.51253700 137.59417725]
[-30.28465462 140.19889832]
[-45.05677032 142.80363464]
[-59.82888794 145.40835571]
[-74.60100555 148.01307678]
[-82.26258087 161.64517212]
[-96.91239929 167.11480713]
[-111.63326263 161.83937073]
[-119.47442627 148.30976868]
[-116.73353577 132.91426086]
[-104.70475769 122.92214203]
[-89.06770325 123.05138397]
[-77.20572662 133.24095154]
[-62.43360901 130.63623047]
[-47.66149139 128.03150940]
[-32.88937759 125.42678833]
[-18.11725998 122.82206726]
[-3.34514380 120.21734619]
[2.72590232 115.93780518]
[11.73847485 117.70824432]
[26.55832291 115.39046478]
[41.37817001 113.07267761]
[56.19801712 110.75489807]
[71.01786804 108.43711853]
[70.76366425 92.24923706]
[78.91899872 78.22558594]
[67.42832947 68.58377075]
[55.93766403 58.94195938]
[44.44699860 49.30014420]
[28.21182632 46.98687744]
[22.34948921 31.67136192]
[32.89065933 19.10888672]
[48.99148178 22.22264862]
[54.08881378 37.80947876]
[65.57947540 47.45129395]
[77.07014465 57.09310532]
[88.56081390 66.73492432]
[103.45938873 64.99353027]
[112.41676331 52.96167755]
[121.37414551 40.92983246]
[130.33152771 28.89798355]
[139.28890991 16.86613464]
[141.92272949 8.06705379]
[148.53848267 4.69007540]
[157.72749329 -7.16581440]
[166.91650391 -19.02170372]
[176.10549927 -30.87759399]
[161.13995361 -31.89364243]
[152.44073486 -44.11344147]
[156.37918091 -58.58716583]
[170.07075500 -64.71420288]
[183.48771667 -58.00709152]
[186.80357361 -43.37884903]
[197.09719849 -54.28945541]
[207.39082336 -65.20005798]
[217.68443298 -76.11066437]
[227.97805786 -87.02127075]
[238.27168274 -97.93186951]
[248.56530762 -108.84247589]
[252.20285034 -117.27629089]
[259.16589355 -119.86239624]
[254.71609497 -133.15188599]
[256.42877197 -146.99475098]
[263.91183472 -158.68739319]
[275.65182495 -165.97103882]
[289.31973267 -167.46803284]
[302.23291016 -162.94207764]
[312.94183350 -173.44534302]
[323.65078735 -183.94860840]
[334.35974121 -194.45185852]
[345.06869507 -204.95512390]
[355.77761841 -215.45838928]
[359.65176392 -231.39334106]
[375.46289062 -235.74543762]
[386.94586182 -224.03759766]
[382.28799438 -208.31385803]
[366.28088379 -204.74943542]
[355.57192993 -194.24618530]
[344.86300659 -183.74291992]
[334.15405273 -173.23965454]
[323.44509888 -162.73640442]
[312.73614502 -152.23313904]
[317.14993286 -136.71218872]
[313.12469482 -120.98919678]
[301.66409302 -109.36504364]
[285.81881714 -105.06835938]
[269.87484741 -109.35913849]
[259.47592163 -98.54885101]
[249.18229675 -87.63824463]
[238.88867188 -76.72764587]
[228.59504700 -65.81703949]
[218.30142212 -54.90643311]
[208.00779724 -43.99583054]
[197.71417236 -33.08522415]
[187.96139526 -21.68858719]
[178.77238464 -9.83269596]
[169.58337402 2.02319384]
[160.39437866 13.87908363]
[151.32075500 25.82351494]
[142.36337280 37.85536194]
[133.40599060 49.88721085]
[124.44861603 61.91905975]
[115.49123383 73.95090485]
[128.06143188 88.63159180]
[129.19479370 107.90580750]
[118.45346069 123.92617798]
[100.22949982 130.18437195]
[102.25946808 145.04637146]
[104.28944397 159.90838623]
[106.46341705 174.75001526]
[108.78119659 189.56985474]
[111.09898376 204.38970947]
[114.99217987 209.83158875]
[115.44633484 215.55871582]
[113.20767975 219.82809448]
[114.94907379 234.72666931]
[116.69046783 249.62524414]
[118.43186188 264.52383423]
[120.17325592 279.42239380]
[121.91464996 294.32098389]
[123.65604401 309.21954346]
[125.39743805 324.11813354]
[127.28320312 338.99911499]
[129.31317139 353.86111450]
[131.34313965 368.72311401]
[133.37310791 383.58514404]
[147.62135315 389.31951904]
[157.08088684 401.41964722]
[159.20710754 416.63064575]
[153.42810059 430.86083984]
[141.29838562 440.28237915]
[126.08078766 442.36093140]
[111.86876678 436.53735352]
[102.48529053 424.37814331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 153]
[3 152]
[4 151]
[5 150]
[7 149]
[8 148]
[9 147]
[10 146]
[11 145]
[12 144]
[13 143]
[14 142]
[15 139]
[16 138]
[17 137]
[19 136]
[20 135]
[21 134]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[53 64]
[54 63]
[55 62]
[56 61]
[65 130]
[66 129]
[67 128]
[68 127]
[69 126]
[71 125]
[72 124]
[73 123]
[74 122]
[80 121]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[88 114]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
