%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAGAGGAAGAGCGCGGCCGGCGGCGCUGCGCUGAGAGCAGGGGCCCGGCCAAGGCGAGUGCCGCGCGGGCCACC\
) } def
/len { sequence length } bind def

/coor [
[81.86815643 283.02233887]
[66.61274719 284.25967407]
[52.53427124 278.25509644]
[42.86785126 266.38839722]
[39.83477020 251.38642883]
[44.13199997 236.69654846]
[54.77207184 225.69439697]
[69.30997467 220.90817261]
[71.71614838 206.10241699]
[61.37863922 197.41499329]
[56.71284485 184.62728882]
[59.06402969 171.10873413]
[67.91305542 160.47946167]
[80.98615265 155.64080811]
[83.98653412 140.94395447]
[86.98692322 126.24709320]
[89.98730469 111.55023193]
[89.38331604 96.56239319]
[85.21005249 82.15462494]
[81.03679657 67.74684906]
[76.86353302 53.33908081]
[72.69026947 38.93130875]
[68.51700592 24.52353668]
[62.97939682 16.90362740]
[64.47837067 9.45112228]
[53.66329956 -2.09638524]
[58.12993240 -16.30548286]
[47.31486893 -27.85298920]
[51.78150177 -42.06208801]
[48.19176483 -56.62621689]
[44.60203171 -71.19034576]
[41.01229477 -85.75447083]
[26.89697456 -92.48438263]
[20.45698929 -106.73431396]
[24.73310280 -121.77588654]
[37.70626450 -130.50692749]
[53.25094604 -128.80490112]
[64.02742767 -117.47346497]
[64.94737244 -101.86296082]
[55.57642365 -89.34420776]
[59.16615677 -74.78007507]
[62.75589371 -60.21595001]
[66.34562683 -45.65182114]
[76.90393066 -35.14603806]
[72.69406128 -19.89521790]
[83.25236511 -9.38943481]
[79.04249573 5.86138725]
[82.92478180 20.35027504]
[87.09804535 34.75804520]
[91.27130127 49.16581726]
[95.44456482 63.57358932]
[99.61782837 77.98136139]
[103.79109192 92.38912964]
[108.13592529 90.14846802]
[113.54984283 89.64966583]
[119.43509674 91.22389221]
[134.24084473 93.63005829]
[149.04660034 96.03623199]
[164.17985535 89.71825409]
[177.05210876 99.87881470]
[174.42150879 116.06559753]
[158.99417114 121.62702942]
[146.64042664 110.84197998]
[131.83468628 108.43581390]
[117.02892303 106.02964020]
[104.68416595 114.55061340]
[101.68378448 129.24748230]
[98.68339539 143.94433594]
[95.68301392 158.64118958]
[107.21984100 170.82691956]
[109.30168915 187.31222534]
[101.31607819 201.69598389]
[86.52189636 208.50859070]
[84.11573029 223.31434631]
[96.38981628 232.45793152]
[102.99828339 246.26324463]
[102.42254639 261.55792236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 74]
[9 73]
[14 69]
[15 68]
[16 67]
[17 66]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[25 47]
[27 45]
[29 43]
[30 42]
[31 41]
[32 40]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
