%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUGGAGUUCCUGCUUGGUUCUUCCUGAGGACUGAGCACCUUCUAGACUACAUCCAGAUCUGUUUUCCCUGCAGAUUCGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[81.21569061 101.91395569]
[66.91674042 97.38184357]
[51.42378998 100.58794403]
[41.62909698 89.36683655]
[27.33014679 84.83472443]
[13.03119469 80.30261993]
[-1.26775658 75.77051544]
[-15.56670761 71.23841095]
[-29.86565971 66.70629883]
[-39.38484955 74.27883148]
[-51.27528763 76.18614960]
[-62.45764160 72.05490112]
[-70.09490204 63.06014252]
[-72.31201935 51.59417343]
[-86.24667358 46.04209900]
[-100.18132782 40.49002838]
[-114.11597443 34.93795395]
[-128.05062866 29.38588142]
[-141.98527527 23.83381081]
[-155.91992188 18.28173828]
[-169.85458374 12.72966480]
[-183.78923035 7.17759275]
[-197.72387695 1.62552059]
[-211.65852356 -3.92655182]
[-225.59318542 -9.47862434]
[-242.54534912 -9.72438240]
[-247.00201416 -26.08208466]
[-232.51731873 -34.89284897]
[-220.04110718 -23.41327477]
[-206.10646057 -17.86120224]
[-192.17181396 -12.30912971]
[-178.23715210 -6.75705767]
[-164.30250549 -1.20498550]
[-150.36785889 4.34708691]
[-136.43319702 9.89915943]
[-122.49855042 15.45123100]
[-108.56390381 21.00330353]
[-94.62924957 26.55537605]
[-80.69460297 32.10744858]
[-66.75994873 37.65951920]
[-50.63407135 29.36561775]
[-33.19308472 35.37342453]
[-25.33355331 52.40735245]
[-11.03460217 56.93945694]
[3.26434970 61.47156525]
[17.56330109 66.00366974]
[31.86225319 70.53577423]
[46.16120529 75.06787872]
[60.63139725 71.53762054]
[71.44884491 83.08289337]
[85.74779510 87.61499786]
[104.72206116 81.71843719]
[118.46726227 96.06632233]
[133.17239380 99.02587891]
[147.87753296 101.98542786]
[156.81980896 95.29435730]
[167.75343323 94.77494049]
[176.90960693 100.35678864]
[181.27151489 109.90895844]
[195.72476196 113.92189026]
[210.17800903 117.93481445]
[224.63127136 121.94773865]
[239.08451843 125.96066284]
[253.53776550 129.97358704]
[267.99102783 133.98651123]
[280.77770996 124.98461914]
[296.35476685 126.35940552]
[307.36712646 137.46174622]
[308.61511230 153.04945374]
[299.50946045 165.76248169]
[284.34957886 169.59814453]
[270.29351807 162.74533081]
[263.97808838 148.43975830]
[249.52484131 144.42683411]
[235.07159424 140.41390991]
[220.61833191 136.40098572]
[206.16508484 132.38806152]
[191.71183777 128.37513733]
[177.25859070 124.36221313]
[159.15301514 130.74130249]
[144.91798401 116.69056702]
[130.21284485 113.73101044]
[115.50770569 110.77146149]
[108.67081451 116.77290344]
[99.82109833 118.88071442]
[91.01290894 116.60559082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[53 83]
[54 82]
[55 81]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
