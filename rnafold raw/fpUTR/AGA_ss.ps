%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACGCCUGAGCGAACCCCCGAGAGAGCGGGCGUGGGCGCCAGGCGGGCGGGGCACUGGGGAUUAAUUGUUCGGCGAUCGCUGGCUGCCGGGACUUUUCUCGCGCUGGUCUCUUCGGUGGUCAGGG\
) } def
/len { sequence length } bind def

/coor [
[29.41955948 523.42944336]
[17.74923897 533.51934814]
[2.47328949 535.67553711]
[-11.53378868 529.20983887]
[-19.80238914 516.18542480]
[-19.69402885 500.75848389]
[-11.24328804 487.85156250]
[2.85323429 481.58325195]
[5.03725195 466.74310303]
[7.22126961 451.90295410]
[9.40528679 437.06280518]
[11.58930397 422.22265625]
[5.78756332 408.50445557]
[15.45173168 395.97790527]
[17.63574791 381.13775635]
[3.96793532 387.31762695]
[-9.49725342 380.70788574]
[-12.96820927 366.11499023]
[-3.92092347 354.15060425]
[11.06560326 353.51498413]
[21.09385109 364.67156982]
[25.06427765 350.20660400]
[29.03470421 335.74160767]
[33.00513077 321.27664185]
[36.79913330 306.76437378]
[40.41614532 292.20700073]
[44.03315735 277.64962769]
[47.65016937 263.09225464]
[46.19483185 255.76655579]
[51.53656387 248.22657776]
[47.44408417 233.90522766]
[58.55825043 222.64530945]
[62.52867508 208.18032837]
[66.49909973 193.71533203]
[70.46952820 179.25035095]
[74.43995667 164.78536987]
[78.41038513 150.32038879]
[82.38080597 135.85540771]
[86.35123444 121.39042664]
[75.07387543 104.74629974]
[79.44528198 85.12241364]
[96.72106171 74.83876801]
[99.26580048 60.05619812]
[93.98184967 45.14343643]
[103.76617432 33.91328430]
[106.31091309 19.13071632]
[108.85565948 4.34814978]
[111.40039825 -10.43441677]
[113.94514465 -25.21698380]
[108.66119385 -40.12974548]
[118.44551086 -51.35989761]
[120.99025726 -66.14246368]
[123.53499603 -80.92503357]
[125.89955139 -95.73748779]
[128.08357239 -110.57763672]
[130.08673096 -125.44328308]
[124.08297729 -140.08110046]
[133.30891418 -151.77430725]
[135.13092041 -166.66323853]
[136.95291138 -181.55216980]
[138.77491760 -196.44110107]
[140.59690857 -211.33003235]
[134.59315491 -225.96784973]
[143.81910706 -237.66105652]
[135.10935974 -251.13398743]
[140.34886169 -266.29733276]
[155.51834106 -271.51907349]
[168.98104858 -262.79354858]
[170.40956116 -246.81420898]
[158.70803833 -235.83906555]
[164.84210205 -222.26620483]
[155.48583984 -209.50804138]
[153.66384888 -194.61911011]
[151.84184265 -179.73017883]
[150.01985168 -164.84124756]
[148.19786072 -149.95231628]
[154.33192444 -136.37945557]
[144.97566223 -123.62128448]
[147.31004333 -116.52661896]
[142.92372131 -108.39362335]
[140.73970032 -93.55347443]
[142.90063477 -86.40406036]
[138.31756592 -78.38028717]
[135.77282715 -63.59772110]
[133.22807312 -48.81515503]
[138.69404602 -34.95974350]
[128.72770691 -22.67224121]
[126.18296814 -7.88967419]
[123.63822174 6.89289236]
[121.09348297 21.67545891]
[118.54873657 36.45802689]
[124.01470947 50.31343842]
[114.04837036 62.60094070]
[111.50363159 77.38350677]
[119.02136230 83.20634460]
[123.86770630 91.38770294]
[125.36203766 100.77857971]
[123.29448700 110.06011963]
[117.95542908 117.92880249]
[110.09468079 123.27953339]
[100.81621552 125.36085510]
[96.84579468 139.82583618]
[92.87536621 154.29081726]
[88.90493774 168.75579834]
[84.93450928 183.22077942]
[80.96408844 197.68576050]
[76.99365997 212.15074158]
[73.02323151 226.61573792]
[76.83171844 241.97171021]
[66.00154877 252.19699097]
[62.20754623 266.70925903]
[58.59053421 281.26663208]
[54.97352219 295.82400513]
[51.35651016 310.38137817]
[52.32456207 319.57095337]
[47.47011185 325.24703979]
[43.49968719 339.71203613]
[39.52925873 354.17703247]
[35.55883408 368.64199829]
[32.47589874 383.32177734]
[30.29188156 398.16192627]
[35.93740845 412.94158936]
[26.42945480 424.40667725]
[24.24543762 439.24682617]
[22.06142044 454.08697510]
[19.87740326 468.92712402]
[17.69338417 483.76727295]
[29.38633156 493.83099365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 127]
[9 126]
[10 125]
[11 124]
[12 123]
[14 121]
[15 120]
[21 119]
[22 118]
[23 117]
[24 116]
[25 114]
[26 113]
[27 112]
[28 111]
[30 110]
[32 108]
[33 107]
[34 106]
[35 105]
[36 104]
[37 103]
[38 102]
[39 101]
[42 94]
[43 93]
[45 91]
[46 90]
[47 89]
[48 88]
[49 87]
[51 85]
[52 84]
[53 83]
[54 81]
[55 80]
[56 78]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
