%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCUUGGCCUUGCCCGCGCCCGCUCGCCUCGUCUCGCCCGGCCUCCCCGCGUCGCCUCGUCGCCUGUUCCGCGCCAGGC\
) } def
/len { sequence length } bind def

/coor [
[83.70398712 99.67566681]
[70.52629852 92.50987244]
[57.34861755 85.34407043]
[44.17093277 78.17827606]
[29.13356590 85.64950562]
[12.75173664 82.80730438]
[1.33813894 70.94445801]
[-0.82606095 54.79135132]
[-14.26854420 48.13555527]
[-27.71102715 41.47975922]
[-41.15351105 34.82395935]
[-55.96476364 39.64729691]
[-69.50254059 32.70587540]
[-74.00957489 18.55588722]
[-87.45205688 11.90008926]
[-103.78026581 17.82453156]
[-119.09741974 10.36852837]
[-124.29858398 -5.50209045]
[-137.98614502 -11.63811970]
[-151.67369080 -17.77414894]
[-163.66850281 -8.26714230]
[-178.70965576 -5.43476677]
[-193.34080505 -9.92788124]
[-204.19981384 -20.71400070]
[-208.79136658 -35.31455612]
[-206.06036377 -50.37444305]
[-196.63436890 -62.43301010]
[-182.67939758 -68.71929169]
[-167.40220642 -67.78874207]
[-154.31336975 -59.85519409]
[-146.42062378 -46.74172211]
[-145.53765869 -31.46170425]
[-131.85011292 -25.32567406]
[-118.16255188 -19.18964386]
[-106.73489380 -25.45627022]
[-93.59822083 -23.89381599]
[-83.66902161 -14.85760784]
[-80.79625702 -1.54239416]
[-67.35377502 5.11340332]
[-53.36811066 0.11973349]
[-39.64070892 6.67816544]
[-34.49771500 21.38147736]
[-21.05522919 28.03727531]
[-7.61274672 34.69307327]
[5.82973671 41.34886932]
[17.16291046 34.02919006]
[30.74517822 33.32488251]
[42.96920776 39.53185272]
[50.53414154 51.09594345]
[51.33673096 65.00059509]
[64.51441193 72.16638947]
[77.69210052 79.33218384]
[90.86978149 86.49798584]
[102.38116455 83.87562561]
[112.64320374 89.71337128]
[116.27163696 100.94827271]
[129.16517639 108.61355591]
[142.05871582 116.27883911]
[154.95227051 123.94411469]
[170.76838684 124.34551239]
[177.75445557 137.50013733]
[186.98341370 139.27143860]
[190.98703003 145.71405029]
[203.57751465 153.86755371]
[216.16799927 162.02107239]
[231.06231689 157.25733948]
[245.51443481 163.22981262]
[252.70050049 177.11845398]
[249.22746277 192.36549377]
[236.73519897 201.77172852]
[221.12216187 200.89582825]
[209.76036072 190.15136719]
[208.01448059 174.61155701]
[195.42401123 166.45803833]
[182.83352661 158.30453491]
[170.08917236 150.39367676]
[155.19529724 150.54055786]
[147.28698730 136.83766174]
[134.39344788 129.17237854]
[121.49990082 121.50710297]
[108.60635376 113.84181976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[8 45]
[9 44]
[10 43]
[11 42]
[14 39]
[15 38]
[18 34]
[19 33]
[20 32]
[56 81]
[57 80]
[58 79]
[59 78]
[61 76]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
