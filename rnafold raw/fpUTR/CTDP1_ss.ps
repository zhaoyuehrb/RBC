%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUCGGCGCGGGCUAGGCGACGGGUGGAAGCCGGUACCGAGAGGAACUACAGCGUCGCCGCCUGGGUUGUGUCGCCGCGGUAGGCGCUGCGCUCUGAGCGCAGCGCAGGCCCCGUACCGACCGCCCGCCCGCCCUCUGUCCGCG\
) } def
/len { sequence length } bind def

/coor [
[122.44216919 314.78207397]
[121.48759460 299.81246948]
[120.53302765 284.84289551]
[107.12558746 278.35397339]
[98.71031189 265.94271851]
[97.63011932 250.88616943]
[104.27499390 237.22079468]
[116.95043182 228.66038513]
[115.99586487 213.69079590]
[112.40649414 207.17051697]
[115.18333435 198.39396667]
[114.54671478 183.40747070]
[113.91010284 168.42098999]
[113.27348328 153.43450928]
[112.63686371 138.44802856]
[112.00024414 123.46154022]
[96.54981995 124.52780914]
[84.15665436 116.92883301]
[78.85361481 104.41811371]
[64.01889801 102.19747925]
[49.18418121 99.97683716]
[34.34946823 97.75619507]
[19.51475334 95.53555298]
[4.68003893 93.31491852]
[-10.15467548 91.09427643]
[-25.12427139 92.04884338]
[-39.55677032 96.13577271]
[-53.98926926 100.22269440]
[-65.02575684 112.35232544]
[-80.98875427 108.59536743]
[-85.45690155 92.81665802]
[-73.83374023 81.24797821]
[-58.07619476 85.79019928]
[-43.64369583 81.70326996]
[-29.21119881 77.61634827]
[-29.21119881 62.61634445]
[-43.64369583 58.52941895]
[-58.07619476 54.44248962]
[-73.46237946 58.12704468]
[-83.60001373 47.21477509]
[-98.03251648 43.12784958]
[-113.79006195 47.67007065]
[-125.41321564 36.10139084]
[-120.94507599 20.32267952]
[-104.98207855 16.56571960]
[-93.94558716 28.69534874]
[-79.51309204 32.78227615]
[-65.15921783 28.80540085]
[-53.98926926 40.00999069]
[-39.55677032 44.09692001]
[-25.12427139 48.18384552]
[-17.44062996 52.20794678]
[-11.77289009 57.76369095]
[-8.34563160 64.10867310]
[-7.14470148 70.49893188]
[-7.93403530 76.25955963]
[6.90067911 78.48020172]
[21.73539352 80.70084381]
[36.57010651 82.92147827]
[51.40482330 85.14212036]
[66.23954010 87.36276245]
[81.07424927 89.58340454]
[87.93865967 80.94333649]
[98.56964111 76.54080200]
[110.47019196 77.90232849]
[120.60142517 85.13831329]
[126.15794373 96.80445099]
[138.93087769 88.93984222]
[151.70382690 81.07523346]
[164.47676086 73.21062469]
[170.19325256 65.99533081]
[177.60533142 65.31796265]
[183.47369385 58.22563553]
[190.89846802 57.70574951]
[203.99366760 50.39032364]
[217.08888245 43.07490158]
[230.18409729 35.75947571]
[239.63461304 18.00524902]
[258.90740967 18.94515038]
[271.68035889 11.08054066]
[279.37487793 -2.74352694]
[294.26925659 -2.82799149]
[307.04217529 -10.69260120]
[319.81512451 -18.55721092]
[323.58322144 -33.67141724]
[336.64880371 -41.46529388]
[351.03466797 -37.77985764]
[363.80761719 -45.64446640]
[376.58056641 -53.50907516]
[389.35348511 -61.37368393]
[402.12643433 -69.23829651]
[414.89935303 -77.10290527]
[427.67230225 -84.96751404]
[440.44525146 -92.83212280]
[453.21817017 -100.69673157]
[465.99111938 -108.56134033]
[476.30847168 -122.01454926]
[492.09204102 -115.82463074]
[490.51333618 -98.94434357]
[473.85571289 -95.78839874]
[461.08279419 -87.92378998]
[448.30984497 -80.05918121]
[435.53692627 -72.19457245]
[422.76397705 -64.32996368]
[409.99102783 -56.46535492]
[397.21810913 -48.60074615]
[384.44515991 -40.73613739]
[371.67224121 -32.87152863]
[358.89929199 -25.00691986]
[355.71353149 -10.50220966]
[342.87200928 -2.34442210]
[327.67971802 -5.78427315]
[314.90679932 2.08033633]
[302.13385010 9.94494534]
[295.35293579 23.20648384]
[279.54495239 23.85347748]
[266.77203369 31.71808624]
[265.28768921 41.91339874]
[258.26181030 49.74765015]
[247.86091614 52.43995285]
[237.49952698 48.85468674]
[224.40431213 56.17011261]
[211.30909729 63.48553467]
[198.21388245 70.80095673]
[185.19705200 78.25495148]
[172.34136963 85.98355865]
[159.56843567 93.84816742]
[146.79548645 101.71277618]
[134.02255249 109.57738495]
[126.98673248 122.82492065]
[127.62334442 137.81140137]
[128.25996399 152.79788208]
[128.89659119 167.78437805]
[129.53320312 182.77085876]
[130.16981506 197.75733948]
[130.96545410 212.73622131]
[131.92002869 227.70582581]
[145.58012390 234.58688354]
[153.90692139 247.29756165]
[154.74792480 262.36935425]
[147.97726440 275.74896240]
[135.50262451 283.88830566]
[136.45719910 298.85791016]
[137.41175842 313.82751465]
[146.94398499 327.17175293]
[139.90827942 341.98495483]
[123.54236603 343.02856445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[8 137]
[9 136]
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 35]
[27 34]
[28 33]
[36 51]
[37 50]
[38 49]
[40 47]
[41 46]
[67 129]
[68 128]
[69 127]
[70 126]
[72 125]
[74 124]
[75 123]
[76 122]
[77 121]
[79 117]
[80 116]
[82 114]
[83 113]
[84 112]
[87 109]
[88 108]
[89 107]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
