%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGUCUUGGGGCCGGGCCGGAAGGCAGAUCUCACCGCCUGCUUCCCUCUGCAGCGGUAGCACAAGCUCAGCG\
) } def
/len { sequence length } bind def

/coor [
[85.87693024 133.74456787]
[79.09330750 129.45707703]
[73.48916626 123.85493469]
[69.30728912 117.24335480]
[54.96478653 121.63569641]
[40.62228394 126.02803802]
[26.27978516 130.42037964]
[11.93728352 134.81272888]
[4.48233318 148.48976135]
[-10.12557316 152.73991394]
[-23.11859894 145.54846191]
[-37.46110153 149.94081116]
[-51.80360031 154.33314514]
[-65.17794800 164.75251770]
[-78.89250946 154.78521729]
[-73.11129761 138.84739685]
[-56.19594193 139.99064636]
[-41.85344315 135.59831238]
[-27.51094055 131.20596313]
[-20.77312088 117.97202301]
[-6.29035473 113.31324768]
[7.54494190 120.47022247]
[21.88744354 116.07788086]
[36.22994232 111.68553925]
[50.57244492 107.29319763]
[64.91494751 102.90085602]
[65.35142517 91.08087921]
[69.72118378 79.88472748]
[77.65446472 70.60405731]
[88.36353302 64.35300446]
[100.71987152 61.93524170]
[113.37277222 63.74259949]
[124.89695740 69.69793701]
[133.95310974 79.25003815]
[144.33219910 68.42069244]
[154.71127319 57.59135056]
[165.09036255 46.76200867]
[175.46943665 35.93267059]
[179.30259705 27.30141830]
[186.52630615 24.87580872]
[197.35563660 14.49672604]
[208.18498230 4.11764288]
[205.95008850 -11.23764420]
[213.19740295 -24.95828247]
[227.14021301 -31.76840973]
[242.41720581 -29.04938889]
[253.15406799 -17.84674263]
[255.22225952 -2.46811414]
[247.82652283 11.17309856]
[233.81066895 17.83156967]
[218.56407166 14.94698429]
[207.73472595 25.32606697]
[196.90538025 35.70515060]
[186.29878235 46.31175232]
[175.91969299 57.14109421]
[165.54061890 67.97043610]
[155.16152954 78.79977417]
[144.78245544 89.62911987]
[145.73701477 104.59871674]
[157.40756226 114.02201080]
[169.07809448 123.44531250]
[185.35401917 125.45185089]
[191.50427246 140.65403748]
[181.20199585 153.41316223]
[165.04530334 150.60372925]
[159.65478516 135.11584473]
[147.98425293 125.69255066]
[136.31372070 116.26924896]
[131.50038147 123.55434418]
[125.27717590 129.53427124]
[117.97872925 133.94882202]
[109.98451233 136.62014771]
[101.69915009 137.45968628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[11 19]
[12 18]
[13 17]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[40 53]
[41 52]
[42 51]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
