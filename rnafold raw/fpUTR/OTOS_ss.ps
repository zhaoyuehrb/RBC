%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCCAGGCAGCACGGCUGGCUGAGCAGAGACAAGGGCUGCCCACACUGGGACUGGUAGAGGAAGCCGGCCCUGACGGAUGGGUGGUCUCGCCCUUCCUGGGUUCAUCCUGCUGCAGGUGGGCCUGAGUCGCAGAUCAGGAAGCACCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[95.50389862 149.88696289]
[94.59822083 134.91433716]
[93.69254303 119.94169617]
[86.51003265 117.78263855]
[75.58793640 128.06407166]
[72.14501190 113.46451569]
[64.96250153 111.30545044]
[55.95136642 123.29709625]
[46.94023132 135.28874207]
[44.83541489 150.96931458]
[31.00407600 156.49591064]
[21.99294281 168.48754883]
[12.98180866 180.47918701]
[3.97067428 192.47084045]
[-0.71085948 208.76560974]
[-17.66480255 208.77786255]
[-22.36990547 192.48988342]
[-8.02096748 183.45970154]
[0.99016684 171.46806335]
[10.00130081 159.47640991]
[19.01243401 147.48477173]
[20.47271538 132.66192627]
[34.94859314 126.27760315]
[43.95972443 114.28595734]
[52.97085953 102.29431915]
[55.52598572 87.51354218]
[51.06344223 73.19273376]
[46.60089493 58.87191772]
[42.13834763 44.55110550]
[37.67580414 30.23029137]
[32.10421371 22.91784668]
[33.27072144 15.57598686]
[29.09745979 1.16821551]
[11.55588055 -3.65084052]
[-0.22288713 -17.33911133]
[-2.34079719 -35.13899231]
[5.77585554 -50.97217941]
[-2.24113178 -63.65003204]
[-10.25811958 -76.32788086]
[-18.27510643 -89.00573730]
[-26.29209328 -101.68358612]
[-34.30908203 -114.36143494]
[-42.32606888 -127.03929138]
[-50.34305573 -139.71713257]
[-58.36004257 -152.39498901]
[-66.37702942 -165.07284546]
[-74.52126312 -177.66932678]
[-92.60380554 -177.90411377]
[-106.82836151 -188.81553650]
[-111.65550232 -205.91842651]
[-105.34693146 -222.36453247]
[-114.11476135 -234.53520203]
[-122.88259125 -246.70587158]
[-130.48306274 -251.87763977]
[-131.70152283 -259.21105957]
[-140.22248840 -271.55581665]
[-148.74346924 -283.90057373]
[-157.26443481 -296.24533081]
[-165.78540039 -308.59008789]
[-181.36991882 -309.87731934]
[-192.44450378 -320.91757202]
[-193.78009033 -336.49801636]
[-184.74603271 -349.26202393]
[-169.60797119 -353.18283081]
[-155.51359558 -346.40914917]
[-149.11787415 -332.13928223]
[-153.44064331 -317.11105347]
[-144.91967773 -304.76629639]
[-136.39871216 -292.42153931]
[-127.87773895 -280.07678223]
[-119.35676575 -267.73202515]
[-110.71192169 -255.47369385]
[-101.94409180 -243.30302429]
[-93.17626190 -231.13235474]
[-81.09857178 -232.88471985]
[-69.35920715 -229.29292297]
[-60.22259521 -220.98516846]
[-55.47859955 -209.50544739]
[-56.09210205 -197.02676392]
[-62.00742340 -185.93998718]
[-55.65924072 -182.07162476]
[-53.69918060 -173.08982849]
[-45.68219376 -160.41197205]
[-37.66520309 -147.73413086]
[-29.64821815 -135.05627441]
[-21.63122940 -122.37842560]
[-13.61424255 -109.70057678]
[-5.59725523 -97.02272034]
[2.41973209 -84.34487152]
[10.43671989 -71.66702271]
[18.45370674 -58.98917007]
[32.11759567 -60.17716980]
[44.91148376 -55.23453903]
[56.13914490 -65.18138123]
[67.36680603 -75.12821960]
[78.59446716 -85.07505798]
[80.99446869 -100.93758392]
[94.96408081 -108.82615662]
[109.78700256 -102.68933868]
[114.09236908 -87.23477936]
[104.57746124 -74.31788635]
[88.54130554 -73.84739685]
[77.31364441 -63.90055847]
[66.08598328 -53.95372009]
[54.85832214 -44.00687790]
[58.31912231 -33.00031662]
[57.43550110 -21.40987396]
[52.27012634 -10.90033245]
[43.50522995 -3.00504637]
[47.67849350 11.40272522]
[51.99661636 25.76774597]
[56.45916367 40.08855820]
[60.92170715 54.40937042]
[65.38425446 68.73018646]
[69.84680176 83.05099487]
[86.93180084 68.80702209]
[108.66387177 68.10643005]
[125.82191467 80.63092804]
[131.50321960 100.58018494]
[143.12228394 110.06687164]
[154.74136353 119.55355072]
[166.36044312 129.04023743]
[183.70094299 126.95063019]
[196.94540405 137.81269836]
[198.23831177 154.55477905]
[210.04605103 163.80555725]
[221.85380554 173.05635071]
[233.66156006 182.30712891]
[245.46931458 191.55790710]
[260.35351562 187.17152405]
[274.96200562 192.40327454]
[283.67755127 205.24143982]
[283.14883423 220.74951172]
[273.57916260 232.96429443]
[258.64828491 237.18896484]
[244.09738159 231.79905701]
[235.52162170 218.86708069]
[236.21853638 203.36566162]
[224.41078186 194.11488342]
[212.60302734 184.86410522]
[200.79527283 175.61331177]
[188.98751831 166.36253357]
[176.50517273 169.69099426]
[164.20762634 165.13768005]
[156.68220520 154.16128540]
[156.87374878 140.65930176]
[145.25468445 131.17262268]
[133.63560486 121.68594360]
[122.01653290 112.19926453]
[108.66517639 119.03601837]
[109.57085419 134.00865173]
[110.47653198 148.98129272]
[119.96512604 162.35658264]
[112.88108063 177.14672852]
[96.51184845 178.13688660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[7 25]
[8 24]
[9 23]
[11 21]
[12 20]
[13 19]
[14 18]
[26 115]
[27 114]
[28 113]
[29 112]
[30 111]
[32 110]
[33 109]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[46 82]
[47 80]
[51 74]
[52 73]
[53 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[93 105]
[94 104]
[95 103]
[96 102]
[119 149]
[120 148]
[121 147]
[122 146]
[125 142]
[126 141]
[127 140]
[128 139]
[129 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
