%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAAAGCAACAAGAAGCUAGGGCAGAGGAUUUAGAGGGCAAGCAAGCAUGGGCCAGGACUUUGACAGCAUUCAUCCAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[39.79209137 311.58392334]
[30.91056061 323.80255127]
[18.94556427 333.02294922]
[4.86705112 338.49765015]
[-10.18369675 339.78280640]
[-24.98658371 336.77429199]
[-38.34160614 329.71594238]
[-49.16613007 319.17999268]
[-56.58266068 306.02050781]
[-59.98997498 291.30429077]
[-59.11185455 276.22433472]
[-54.01948547 262.00305176]
[-45.12568665 249.79335022]
[-33.15143204 240.58499146]
[-19.06742668 235.12445068]
[-4.01539516 233.85440063]
[10.78446102 236.87780762]
[17.79349136 223.61607361]
[24.80252075 210.35433960]
[25.15202332 202.78479004]
[32.32965469 196.73501587]
[39.82965469 183.74462891]
[47.32965469 170.75425720]
[44.50948715 158.83317566]
[50.85773087 147.88648987]
[63.38007355 144.18338013]
[71.36055756 131.48251343]
[79.34103394 118.78165436]
[72.23973083 102.98506165]
[75.82030487 86.03984833]
[88.70500183 74.46636963]
[105.93591309 72.71798706]
[112.94493866 59.45625305]
[119.95397186 46.19452286]
[126.96299744 32.93279266]
[133.97203064 19.67106247]
[140.98106384 6.40933084]
[136.55117798 -8.52431870]
[143.84825134 -21.87375450]
[158.11250305 -26.00493813]
[153.68261719 -40.93858719]
[160.97969055 -54.28802109]
[175.24394226 -58.41920853]
[182.25297546 -71.68093872]
[175.29534912 -85.55072784]
[177.85218811 -100.85570526]
[188.94032288 -111.71078491]
[204.29615784 -113.94197083]
[218.01502991 -106.69132996]
[224.82179260 -92.74687958]
[222.09907532 -77.47054291]
[210.89382935 -66.73638153]
[195.51469421 -64.67190552]
[188.50567627 -51.41017914]
[193.12767029 -37.29732132]
[186.20843506 -23.74819374]
[171.37423706 -18.99590874]
[175.99623108 -4.88305092]
[169.07699585 8.66607666]
[154.24278259 13.41836071]
[147.23376465 26.68009186]
[140.22473145 39.94182205]
[133.21569824 53.20355225]
[126.20667267 66.46528625]
[119.19763947 79.72701263]
[126.05879211 89.97588348]
[127.83500671 102.18079376]
[124.17969513 113.96015167]
[115.80612183 123.01542664]
[104.34825897 127.57962799]
[92.04190063 126.76213837]
[84.06141663 139.46299744]
[76.08094025 152.16386414]
[75.92578125 170.46228027]
[60.32003403 178.25425720]
[52.82003403 191.24462891]
[45.32003403 204.23501587]
[38.06425095 217.36337280]
[31.05522156 230.62510681]
[24.04619217 243.88682556]
[34.88129425 254.41191101]
[42.31104279 267.56393433]
[45.73313904 282.27670288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 80]
[18 79]
[19 78]
[21 77]
[22 76]
[23 75]
[26 73]
[27 72]
[28 71]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[40 57]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
