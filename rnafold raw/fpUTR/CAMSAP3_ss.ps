%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGUAGCAGCAGCGGGCCCGGCUGGGGCGCGAGCGCGGCGCAGCCCAGCCCAGCCCAGUCCGAGCGCGGACCCGGCGCCCGCAGCCCCGGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[112.36215973 392.75100708]
[111.90023041 377.75811768]
[111.43830872 362.76522827]
[110.97637939 347.77236938]
[110.51445007 332.77947998]
[110.05252838 317.78659058]
[99.45419312 310.28277588]
[95.09928894 297.84143066]
[98.81269073 284.99002075]
[109.43848419 276.54528809]
[98.75760651 266.22760010]
[98.54393005 251.01547241]
[109.43848419 239.88233948]
[109.43848419 224.88233948]
[101.70117950 212.15507507]
[109.43848419 198.35488892]
[109.43848419 183.35488892]
[109.43848419 168.35488892]
[109.43848419 153.35488892]
[109.43848419 138.35488892]
[109.43848419 123.35489655]
[90.48181915 121.47441864]
[79.54970551 107.51844788]
[81.90296173 91.28111267]
[71.79752350 80.19598389]
[61.69208908 69.11084747]
[51.58665466 58.02571487]
[41.48122025 46.94058228]
[31.37578583 35.85544586]
[21.27035141 24.77031326]
[10.82834244 14.00163460]
[0.05966349 3.55962515]
[-10.70901489 -6.88238382]
[-21.47769356 -17.32439232]
[-37.01335144 -15.54188633]
[-50.03156281 -24.20561790]
[-54.38552094 -39.22484207]
[-48.01942062 -53.50793839]
[-33.93914413 -60.31086349]
[-18.79296494 -56.42148972]
[-9.73244476 -43.67625427]
[-11.03568459 -28.09307289]
[-0.26700616 -17.65106201]
[10.50167274 -7.20905352]
[21.27035141 3.23295546]
[26.13965607 4.03918123]
[30.49494362 8.02547646]
[32.35548401 14.66487885]
[42.46091843 25.75001144]
[52.56635284 36.83514786]
[62.67179108 47.92028046]
[72.77722168 59.00541306]
[82.88265991 70.09054565]
[92.98809052 81.17568207]
[105.38298798 78.88684845]
[117.73744202 84.60099030]
[125.04123688 97.26636505]
[138.25640869 90.16996765]
[151.47160339 83.07356262]
[156.12586975 68.20832062]
[169.62904358 61.19981003]
[183.77209473 65.72856140]
[196.98727417 58.63215637]
[210.20246887 51.53575516]
[223.41764832 44.43935013]
[236.63282776 37.34294510]
[244.80113220 23.12285805]
[261.19860840 23.35735130]
[268.95693970 37.80519867]
[260.09500122 51.60369492]
[243.72923279 50.55812836]
[230.51405334 57.65453339]
[217.29885864 64.75093842]
[204.08367920 71.84734344]
[190.86849976 78.94374084]
[186.83154297 93.23494720]
[173.53056335 100.61996460]
[158.56800842 96.28874207]
[145.35281372 103.38514709]
[132.13763428 110.48155212]
[124.43848419 123.35489655]
[124.43848419 138.35488892]
[124.43848419 153.35488892]
[124.43848419 168.35488892]
[124.43848419 183.35488892]
[124.43848419 198.35488892]
[132.17578125 212.15507507]
[124.43848419 224.88233948]
[124.43848419 239.88233948]
[135.33303833 251.01547241]
[135.11935425 266.22760010]
[124.43848419 276.54528809]
[137.00601196 288.59335327]
[137.05805969 305.66760254]
[125.04541016 317.32464600]
[125.50733948 332.31753540]
[125.96926880 347.31042480]
[126.43119049 362.30331421]
[126.89311981 377.29620361]
[127.35504150 392.28909302]
[130.13787842 411.46997070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[10 92]
[13 89]
[14 88]
[16 86]
[17 85]
[18 84]
[19 83]
[20 82]
[21 81]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 45]
[32 44]
[33 43]
[34 42]
[57 80]
[58 79]
[59 78]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
