%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCCAAUGAAAUCUUCCAGCGGGGUCGCGGUAGGCGGGCCGUGGACCCUCUGGUAUAAGGCGGUCCCGGGGGAGUGAGGAGAAAGGGGGGGUCUUGGCGGCCGGAGGAGGAGUAGGUGCGGGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[110.09455872 401.83459473]
[118.41928101 387.70550537]
[118.05682373 372.70986938]
[117.69436646 357.71426392]
[117.33190918 342.71865845]
[116.96945190 327.72302246]
[101.34936523 322.82254028]
[88.30806732 312.88470459]
[79.41200256 299.08132935]
[75.73714447 283.04992676]
[77.73882294 266.69931030]
[85.19543457 251.98236084]
[97.23280334 240.66278076]
[112.42664337 234.10374451]
[111.34012604 219.14315796]
[110.25360107 204.18255615]
[109.16707611 189.22195435]
[108.08055878 174.26135254]
[106.99403381 159.30076599]
[95.59385681 149.78384399]
[94.27885437 134.62715149]
[104.33836365 122.73413086]
[100.54488373 137.24652100]
[87.27178955 144.23400879]
[73.16059113 139.14735413]
[67.39844513 125.29824829]
[73.73683167 111.70321655]
[88.04866028 107.21331787]
[73.05303955 106.85086060]
[58.05742264 106.48840332]
[45.49734497 116.46958923]
[29.89559555 112.73262024]
[23.22049904 98.14418030]
[30.59261703 83.89527130]
[46.35669327 80.91643524]
[58.41987610 91.49278259]
[73.41549683 91.85523987]
[88.41111755 92.21769714]
[100.65201569 83.54818726]
[105.28726959 69.28234100]
[109.92253113 55.01649475]
[114.55778503 40.75064468]
[119.19303894 26.48479843]
[123.82829285 12.21895027]
[128.11747742 -2.15473723]
[132.05809021 -16.62787056]
[135.99870300 -31.10100365]
[139.93931580 -45.57413864]
[143.87991333 -60.04727173]
[147.82052612 -74.52040100]
[151.76113892 -88.99353790]
[155.70175171 -103.46666718]
[159.64236450 -117.93980408]
[146.80445862 -125.88134766]
[136.73464966 -137.10726929]
[130.24269104 -150.70210266]
[127.84696198 -165.56039429]
[129.73318481 -180.47662354]
[135.74003601 -194.24304199]
[145.37284851 -205.74736023]
[157.84440613 -214.06277466]
[172.13925171 -218.52246094]
[187.09634399 -218.77316284]
[191.03694153 -233.24629211]
[187.19682312 -248.59439087]
[198.00590515 -258.84197998]
[201.94651794 -273.31512451]
[205.88713074 -287.78823853]
[201.18560791 -303.49899292]
[212.63603210 -315.23867798]
[228.45916748 -310.93051147]
[232.37753296 -295.00634766]
[220.36026001 -283.84762573]
[216.41964722 -269.37451172]
[212.47903442 -254.90136719]
[216.60101318 -240.58848572]
[205.51008606 -229.30567932]
[201.56947327 -214.83255005]
[214.33493042 -207.03381348]
[224.39576721 -195.94277954]
[230.93029785 -182.45257568]
[233.40126038 -167.65274048]
[231.59996033 -152.74128723]
[225.66389465 -138.92770386]
[216.06629944 -127.33484650]
[203.57838440 -118.90768433]
[189.20742798 -114.33625793]
[174.11549377 -113.99919128]
[170.17488098 -99.52606201]
[166.23426819 -85.05292511]
[162.29367065 -70.57979584]
[158.35305786 -56.10665894]
[154.41244507 -41.63352585]
[150.47183228 -27.16039276]
[146.53121948 -12.68725967]
[142.59060669 1.78587353]
[144.19686890 6.38180828]
[142.85993958 12.03727245]
[138.09414673 16.85420609]
[133.45889282 31.12005234]
[128.82362366 45.38590240]
[124.18837738 59.65174866]
[119.55312347 73.91759491]
[114.91786957 88.18344116]
[119.29895782 121.64760590]
[130.97131348 131.96234131]
[131.86009216 147.14999390]
[121.95463562 158.21423340]
[123.04115295 173.17483521]
[124.12767792 188.13543701]
[125.21419525 203.09603882]
[126.30072021 218.05662537]
[127.38724518 233.01722717]
[140.74186707 236.17951965]
[152.63777161 242.98907471]
[162.10395813 252.87901306]
[168.37088013 265.03149414]
[170.93301392 278.44531250]
[169.58959961 292.01840210]
[164.46037292 304.63839722]
[155.97494507 315.27371216]
[144.83680725 323.05798340]
[131.96507263 327.36056519]
[132.32752991 342.35620117]
[132.68998718 357.35180664]
[133.05244446 372.34744263]
[133.41490173 387.34304810]
[142.41252136 401.05343628]
[134.79711914 415.57711792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[5 124]
[6 123]
[14 113]
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[22 105]
[28 38]
[29 37]
[30 36]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[45 96]
[46 95]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[63 78]
[64 77]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
