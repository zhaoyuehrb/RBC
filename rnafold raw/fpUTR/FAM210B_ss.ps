%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCAGCUCCGCCCACCCUCCCCGGCCUCCGCCCGCCUCCCGGGUCAGCGGCGCGGGUGCUGCGCCUAGCUGCGCACC\
) } def
/len { sequence length } bind def

/coor [
[83.71282959 126.89377594]
[73.10622406 137.50038147]
[62.49962234 148.10697937]
[51.89302063 158.71357727]
[51.72432709 174.28950500]
[40.81662750 184.89500427]
[25.96840858 184.63819885]
[15.36180687 195.24479675]
[8.43725681 210.72015381]
[-8.35023212 208.35023499]
[-10.72016048 191.56274414]
[4.75520515 184.63819885]
[15.36180687 174.03158569]
[15.10499191 159.18336487]
[25.71049881 148.27568054]
[41.28641891 148.10697937]
[51.89302063 137.50038147]
[62.49962234 126.89377594]
[73.10622406 116.28717041]
[68.66011047 97.47837067]
[76.05629730 79.62241364]
[92.50000000 69.46646118]
[92.50000000 54.46645737]
[92.50000000 39.46645737]
[92.50000000 24.46645927]
[92.20549774 9.46935081]
[91.61660004 -5.51908493]
[91.02770233 -20.50752068]
[82.75457001 -33.99328995]
[89.98623657 -47.01451492]
[79.77638245 -62.18883896]
[88.22807312 -77.43713379]
[87.05118561 -92.39089203]
[85.87429810 -107.34465027]
[84.69741058 -122.29840851]
[83.52052307 -137.25216675]
[72.30421448 -148.72273254]
[74.42191315 -164.62539673]
[88.24910736 -172.76101685]
[103.17876434 -166.88861084]
[107.75811768 -151.51301575]
[98.47428894 -138.42906189]
[99.65116882 -123.47529602]
[100.82805634 -108.52153778]
[102.00494385 -93.56777954]
[103.18183136 -78.61402130]
[112.26513672 -70.37567139]
[113.22232819 -57.74465179]
[104.97467041 -47.60340881]
[113.20568085 -35.18971634]
[106.01613617 -21.09641838]
[106.60503387 -6.10798216]
[107.19393158 8.88045311]
[110.69623566 15.61781979]
[107.50000000 24.46645927]
[107.50000000 39.46645737]
[107.50000000 54.46645737]
[107.50000000 69.46646118]
[120.24684143 75.94563293]
[128.80601501 87.39998627]
[131.40722656 101.46041107]
[127.51247406 115.21877289]
[138.52731323 125.40077972]
[149.54214478 135.58279419]
[160.55699158 145.76480103]
[171.57182312 155.94682312]
[187.35209656 155.07598877]
[199.07031250 165.68064880]
[199.77426147 181.46925354]
[189.04631042 193.07469177]
[173.25114441 193.61167908]
[161.75976562 182.76161194]
[161.38981628 166.96165466]
[150.37496948 156.77964783]
[139.36013794 146.59762573]
[128.34529114 136.41561890]
[117.33045959 126.23361206]
[109.34315491 130.02087402]
[100.61730957 131.43510437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[7 13]
[8 12]
[22 58]
[23 57]
[24 56]
[25 55]
[26 53]
[27 52]
[28 51]
[30 49]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
