%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGAGGAGCCGGAAGUGUGGCGCGCGAGGUCUAAGGGCGCGAGGGAAGUGGCGGGCGGGGACUAAGGCGGGGCGUGCAGGUAGCCGGCCGGCCGGGGGUCGCGGGU\
) } def
/len { sequence length } bind def

/coor [
[66.72541046 133.10537720]
[58.58192825 135.73052979]
[50.06755066 136.42622375]
[41.63243103 135.16180420]
[33.72114563 132.01008606]
[26.74925232 127.14321899]
[21.08144951 120.82324219]
[17.01251602 113.38800812]
[14.75197887 105.23313141]
[14.41333103 96.79093170]
[-0.02788985 92.73493195]
[-14.46911049 88.67893219]
[-28.91033173 84.62292480]
[-39.92634964 95.23398590]
[-54.67716217 98.88231659]
[-69.17721558 94.68532562]
[-79.56017303 83.86634827]
[-83.10977936 69.40032196]
[-98.48803711 73.11782837]
[-108.64902496 62.22730255]
[-124.02728271 65.94480133]
[-134.18827820 55.05427933]
[-148.62948608 50.99827957]
[-163.07070923 46.94227600]
[-177.51193237 42.88627625]
[-192.89018250 46.60377884]
[-203.05117798 35.71325302]
[-214.52197266 46.02947998]
[-229.75283813 48.48390961]
[-243.88366699 42.29333878]
[-252.40536499 29.43315887]
[-252.59869385 14.00700569]
[-244.40194702 0.93730992]
[-230.43069458 -5.60543728]
[-215.14309692 -3.53346848]
[-203.41737366 6.49205780]
[-198.99517822 21.27203369]
[-184.64985657 17.26441765]
[-173.45593262 28.44505501]
[-159.01470947 32.50105667]
[-144.57348633 36.55705643]
[-130.13226318 40.61305618]
[-115.78694916 36.60544205]
[-104.59302521 47.78607941]
[-90.24770355 43.77846527]
[-79.05377960 54.95910263]
[-68.49143982 44.45660019]
[-53.99386597 40.62563705]
[-39.42900467 44.59189224]
[-28.73475456 55.38679123]
[-24.85433006 70.18170929]
[-10.41310978 74.23770905]
[4.02811098 78.29370880]
[18.46933174 82.34970856]
[34.25626755 66.41580200]
[56.47234726 62.57507324]
[76.90043640 72.38392639]
[87.90584564 92.32492065]
[100.20641327 85.67754364]
[112.31031036 92.67663574]
[126.22055054 85.13900757]
[138.83500671 93.05890656]
[153.83345032 93.27507019]
[168.83187866 93.49122620]
[183.83032227 93.70738220]
[196.06991577 81.31154633]
[213.15310669 81.52226257]
[224.62316895 93.72714233]
[239.62161255 93.51098633]
[254.62004089 93.29483032]
[268.30728149 85.35946655]
[281.14474487 92.91255951]
[296.14318848 92.69640350]
[309.83041382 84.76103973]
[322.66787720 92.31412506]
[337.66632080 92.09796906]
[346.35366821 88.80477905]
[353.09863281 92.09796906]
[368.09707642 92.31412506]
[380.55917358 82.21089172]
[396.19665527 85.79549408]
[403.01373291 100.31812286]
[395.78097534 114.63826752]
[380.04669189 117.77073669]
[367.88092041 107.31256866]
[352.88247681 107.09641266]
[337.88247681 107.09641266]
[322.88403320 107.31256866]
[310.26956177 115.23247528]
[296.35934448 107.69484711]
[281.36090088 107.91100311]
[268.74642944 115.83090210]
[254.83621216 108.29327393]
[239.83776855 108.50942993]
[224.83932495 108.72558594]
[217.17262268 119.19124603]
[204.67668152 123.34709930]
[191.89505005 119.44356537]
[183.61416626 108.70582581]
[168.61572266 108.48966980]
[153.61727905 108.27350616]
[138.61885071 108.05735016]
[125.78139496 115.61044312]
[112.09415436 107.67507935]
[99.79358673 114.32245636]
[87.68968964 107.32336426]
[84.83731079 115.44686890]
[80.21296692 122.69341278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[18 46]
[20 44]
[22 42]
[23 41]
[24 40]
[25 39]
[27 37]
[58 106]
[60 104]
[62 102]
[63 101]
[64 100]
[65 99]
[68 95]
[69 94]
[70 93]
[72 91]
[73 90]
[75 88]
[76 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
