%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGCGCCCGCCCGGCGCCCGCCCGGCGACCUGGAGUUGAUGUCACGUCCGGCGGCGGCGGCAGCGGCAGCGGCAGCGGCGCUGAGUUUUGUCUCCCGGGCCGUCUGGGCGCGCGCGGGUGUCCCAGAAUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[147.86523438 519.99371338]
[149.50462341 504.95483398]
[155.71289062 491.15945435]
[165.88182068 479.95907593]
[179.01515198 472.45101929]
[175.94134521 457.76934814]
[172.86753845 443.08767700]
[169.79374695 428.40597534]
[166.71994019 413.72430420]
[163.64614868 399.04263306]
[160.57234192 384.36093140]
[157.49855042 369.67926025]
[147.31736755 358.80761719]
[152.06254578 343.71475220]
[148.98873901 329.03308105]
[144.49974060 323.07852173]
[146.01684570 313.97967529]
[143.28050232 299.23138428]
[140.54414368 284.48306274]
[137.80780029 269.73477173]
[135.07144165 254.98646545]
[131.49455261 240.41918945]
[127.08888245 226.08076477]
[122.68321228 211.74235535]
[118.27754211 197.40394592]
[113.87186432 183.06553650]
[109.46619415 168.72712708]
[95.99203491 157.54240417]
[100.14162445 139.64370728]
[95.40833282 125.41008759]
[90.67504883 111.17646790]
[80.37679291 100.27023315]
[66.43775940 94.72917938]
[52.49872208 89.18813324]
[38.55968475 83.64707947]
[24.62064743 78.10602570]
[10.25049305 84.11738586]
[-3.80673814 78.29940033]
[-9.44909000 64.56260681]
[-23.38812637 59.02155685]
[-39.52748871 61.92896652]
[-49.90698624 49.23258972]
[-43.84908676 33.99336624]
[-27.58563232 31.88810730]
[-17.84707451 45.08251953]
[-3.90803766 50.62357330]
[9.62541676 44.50955582]
[23.84051704 49.93040085]
[30.16169930 64.16699219]
[44.10073471 69.70803833]
[58.03977203 75.24909210]
[71.97881317 80.79014587]
[85.91784668 86.33119965]
[98.51971436 78.19529724]
[99.20741272 63.21106720]
[99.89511108 48.22684097]
[100.58280945 33.24261475]
[101.27050781 18.25838661]
[94.17403412 4.11799669]
[102.48670197 -8.24116325]
[103.17440033 -23.22539139]
[103.51834106 -38.22144699]
[103.51834106 -53.22144699]
[95.78104401 -67.02162170]
[103.51834106 -79.74889374]
[103.51834106 -94.74889374]
[94.85463715 -108.67269135]
[102.81877136 -123.00813293]
[119.21791840 -123.00813293]
[127.18204498 -108.67269135]
[118.51834106 -94.74889374]
[118.51834106 -79.74889374]
[126.25564575 -67.02162170]
[118.51834106 -53.22144699]
[118.51834106 -38.22144699]
[121.26567078 -34.21717453]
[121.46614075 -28.42648315]
[118.15863037 -22.53769302]
[117.47093201 -7.55346489]
[124.61659241 5.51515293]
[116.25473785 18.94608498]
[115.56703949 33.93031311]
[114.87934113 48.91453934]
[114.19164276 63.89876938]
[113.50394440 78.88299561]
[116.91237640 84.94580078]
[118.18062592 91.15445709]
[117.51250458 96.84394836]
[115.29987335 101.47660065]
[112.06770325 104.69074249]
[108.40789032 106.32884979]
[104.90867615 106.44318390]
[109.64196014 120.67680359]
[114.37524414 134.91043091]
[125.58065796 141.41311646]
[129.20024109 153.43351746]
[123.80460358 164.32145691]
[128.21028137 178.65986633]
[132.61595154 192.99827576]
[137.02162170 207.33668518]
[141.42729187 221.67509460]
[145.83296204 236.01350403]
[155.45005798 224.50213623]
[170.44967651 224.60900879]
[179.90176392 236.25624084]
[176.91867065 250.95661926]
[163.67416382 257.99813843]
[149.81974792 252.25012207]
[152.55609131 266.99841309]
[155.29244995 281.74673462]
[158.02880859 296.49502563]
[160.76515198 311.24331665]
[163.67042542 325.95928955]
[166.74421692 340.64096069]
[177.14524841 352.56274414]
[172.18022156 366.60546875]
[175.25402832 381.28713989]
[178.32781982 395.96881104]
[181.40162659 410.65051270]
[184.47541809 425.33218384]
[187.54922485 440.01385498]
[190.62303162 454.69555664]
[193.69682312 469.37722778]
[208.73896790 470.98638916]
[222.54679871 477.16690063]
[233.76757812 487.31329346]
[241.30201721 500.43148804]
[244.41197205 515.23632812]
[242.79272461 530.27740479]
[236.60296631 544.08111572]
[226.44905090 555.29504395]
[213.32580566 562.82073975]
[198.51887512 565.92071533]
[183.47891235 564.29144287]
[169.67936707 558.09240723]
[158.47219849 547.93096924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 123]
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[11 117]
[12 116]
[14 114]
[15 113]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 102]
[23 101]
[24 100]
[25 99]
[26 98]
[27 97]
[29 94]
[30 93]
[31 92]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[39 46]
[40 45]
[54 85]
[55 84]
[56 83]
[57 82]
[58 81]
[60 79]
[61 78]
[62 75]
[63 74]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
