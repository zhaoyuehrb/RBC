%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUCGCGCAGAACAAAGAUGGAGCCGUGGAGUGCCAUAGGGCUAUGACACAGUCACCCACAGGCCCCCACCUCGAUACUCUCUUCCGUAAAUGAGGAUCUGGGUCUGGUUUUCUGAUGUUGCCUCAUUUCCUGGGAGGGGAGAGGGUGCGACCAAGCCCUGGCUCCAGCUCUAGCGGGUAUCUGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[69.73094177 563.85681152]
[67.54130554 578.69616699]
[74.07967377 593.73547363]
[64.10823059 606.75482178]
[47.88474274 604.36090088]
[42.09854889 589.01647949]
[52.70198441 576.50653076]
[54.89162064 561.66717529]
[56.35428619 546.73870850]
[57.08649063 531.75659180]
[57.81869507 516.77447510]
[58.55089951 501.79232788]
[59.28310394 486.81021118]
[59.89334869 471.82263184]
[60.38159180 456.83056641]
[48.32621384 450.39581299]
[40.18292999 439.33966064]
[37.58853149 425.78814697]
[41.10589981 412.37796021]
[50.10308838 401.74331665]
[62.86600876 395.99862671]
[63.59821320 381.01651001]
[64.33041382 366.03439331]
[65.06262207 351.05227661]
[65.79482269 336.07015991]
[66.52703094 321.08804321]
[64.02896118 317.00140381]
[64.08199310 311.29949951]
[67.53477478 305.63253784]
[68.75424957 290.68218994]
[69.97373199 275.73184204]
[71.19320679 260.78149414]
[72.41268921 245.83114624]
[73.63216400 230.88079834]
[71.90702057 228.65304565]
[70.96726227 225.60260010]
[71.13259888 222.02769470]
[72.60805511 218.33732605]
[75.44865417 215.00791931]
[77.63829041 200.16859436]
[79.82791901 185.32926941]
[82.01755524 170.48994446]
[84.20719147 155.65061951]
[86.39682770 140.81130981]
[88.58646393 125.97197723]
[67.22078705 112.35604095]
[62.20456314 82.40056610]
[47.31620407 80.57387543]
[32.42784882 78.74717712]
[17.53949165 76.92048645]
[1.08192575 80.99294281]
[-7.38728333 66.30590820]
[4.38126087 54.10190582]
[19.36618423 62.03212738]
[34.25454330 63.85882187]
[49.14289856 65.68551636]
[64.03125763 67.51220703]
[68.67326355 61.62138748]
[56.89176178 52.33719254]
[66.17613983 40.55583572]
[77.95727539 49.83974457]
[82.59928131 43.94892120]
[77.34172058 29.90050316]
[72.08416748 15.85208321]
[66.82660675 1.80366409]
[61.56905365 -12.24475574]
[56.31149292 -26.29317474]
[51.05393600 -40.34159470]
[34.69959259 -44.62957382]
[24.22320366 -57.68742752]
[23.59497643 -74.25045013]
[32.86450958 -87.79022217]
[27.37898254 -101.75120544]
[21.89345551 -115.71218109]
[16.40792847 -129.67317200]
[10.92240238 -143.63414001]
[-3.73960280 -154.76289368]
[-0.47386006 -171.99877930]
[-6.18590212 -185.86862183]
[-11.89794445 -199.73846436]
[-27.01001549 -203.26052856]
[-37.14024353 -215.01460266]
[-38.39334488 -230.48098755]
[-30.28748131 -243.71257019]
[-15.93951988 -249.62150574]
[-0.86654574 -245.93571472]
[9.13557529 -234.07244873]
[10.22082424 -218.59336853]
[1.97189951 -205.45050049]
[7.68394184 -191.58065796]
[13.39598370 -177.71081543]
[24.44555092 -172.76473999]
[29.31328964 -161.24380493]
[24.88338470 -149.11967468]
[30.36890984 -135.15869141]
[35.85443878 -121.19770813]
[41.33996201 -107.23673248]
[46.82548904 -93.27574921]
[60.01154709 -91.13240051]
[70.49833679 -82.68264771]
[75.47654724 -70.05263519]
[73.54483795 -56.50566101]
[65.10235596 -45.59915161]
[70.35991669 -31.55073166]
[75.61746979 -17.50231361]
[80.87503052 -3.45389342]
[86.13258362 10.59452629]
[91.39014435 24.64294624]
[96.64769745 38.69136429]
[98.76892853 23.84210968]
[96.14791107 9.07287693]
[101.72596741 -4.85139227]
[113.81880951 -13.72625732]
[128.77499390 -14.87194729]
[142.07849121 -7.94252062]
[149.71229553 4.96967793]
[149.37139893 19.96580315]
[141.15872192 32.51776886]
[127.55484009 38.83537674]
[116.60309601 49.08522034]
[131.12818909 45.34068298]
[145.65328979 41.59614944]
[160.17839050 37.85161209]
[174.70349121 34.10707474]
[189.19763184 30.24444771]
[203.65985107 26.26398277]
[218.12207031 22.28351784]
[229.37428284 11.16154099]
[243.69845581 15.24408150]
[258.16067505 11.26361656]
[272.62289429 7.28315210]
[287.08514404 3.30268764]
[301.54736328 -0.67777687]
[316.00958252 -4.65824127]
[327.13516235 -16.70621490]
[343.07003784 -12.83172703]
[347.42178345 2.97948146]
[335.71368408 14.46219540]
[319.99005127 9.80398178]
[305.52783203 13.78444672]
[291.06558228 17.76491165]
[276.60336304 21.74537468]
[262.14114380 25.72583961]
[247.67892456 29.70630455]
[237.46115112 40.54357147]
[222.10253906 36.74574280]
[207.64031982 40.72620773]
[193.17808533 44.70667267]
[187.55479431 49.52013779]
[178.44801331 48.63217163]
[163.92292786 52.37670898]
[149.39782715 56.12124634]
[134.87272644 59.86577988]
[120.34763336 63.61031723]
[136.32009888 91.72349548]
[126.83920288 118.87236786]
[103.42578888 128.16162109]
[101.23615265 143.00094604]
[99.04651642 157.84025574]
[96.85688019 172.67958069]
[94.66724396 187.51890564]
[92.47760773 202.35823059]
[90.28797150 217.19755554]
[88.58251190 232.10028076]
[87.36303711 247.05062866]
[86.14355469 262.00097656]
[84.92407990 276.95132446]
[83.70459747 291.90167236]
[82.48512268 306.85202026]
[81.50914764 321.82022095]
[80.77694702 336.80233765]
[80.04473877 351.78448486]
[79.31253815 366.76660156]
[78.58032990 381.74871826]
[77.84812927 396.73083496]
[91.83364868 405.53762817]
[99.42997742 420.11007690]
[98.64975739 436.43115234]
[89.80021667 450.05514526]
[75.37364197 457.31881714]
[74.88539886 472.31088257]
[77.73714447 481.00506592]
[74.26522064 487.54241943]
[73.53302002 502.52453613]
[72.80081177 517.50665283]
[72.06861115 532.48876953]
[71.33640289 547.47088623]
[83.20854950 538.30291748]
[98.10463715 540.06542969]
[107.50938416 551.75091553]
[106.04660797 566.67938232]
[94.55249023 576.31707764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[9 187]
[10 186]
[11 185]
[12 184]
[13 183]
[14 181]
[15 180]
[21 175]
[22 174]
[23 173]
[24 172]
[25 171]
[26 170]
[29 169]
[30 168]
[31 167]
[32 166]
[33 165]
[34 164]
[39 163]
[40 162]
[41 161]
[42 160]
[43 159]
[44 158]
[45 157]
[47 57]
[48 56]
[49 55]
[50 54]
[62 109]
[63 108]
[64 107]
[65 106]
[66 105]
[67 104]
[68 103]
[72 98]
[73 97]
[74 96]
[75 95]
[76 94]
[78 91]
[79 90]
[80 89]
[120 154]
[121 153]
[122 152]
[123 151]
[124 150]
[125 148]
[126 147]
[127 146]
[129 144]
[130 143]
[131 142]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
