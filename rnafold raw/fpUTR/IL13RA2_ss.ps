%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGAACACUCUCGUGAGUCUAACGGUCUUCCGGAUGAAGGCUAUUUGAAGUCGCCAUAACCUGGUCAGAAGUGUGCCUGUCGGCGGGGAGAGAGGCAAUAUCAAGGUUUUAAAUCUCGGAGAA\
) } def
/len { sequence length } bind def

/coor [
[-55.52929306 318.04266357]
[-64.58635712 329.99966431]
[-66.75131226 345.67205811]
[-80.60374451 351.14556885]
[-89.66081238 363.10253906]
[-98.71788025 375.05953979]
[-99.38076019 380.46063232]
[-101.85926056 384.59939575]
[-105.33802032 386.98541260]
[-108.92596436 387.53771973]
[-118.85125732 398.78445435]
[-128.77653503 410.03115845]
[-131.49385071 426.20361328]
[-146.95074463 431.68231201]
[-159.24652100 420.83120728]
[-155.73233032 404.81301880]
[-140.02325439 400.10586548]
[-130.09797668 388.85916138]
[-120.17268372 377.61242676]
[-110.67486572 366.00247192]
[-101.61779785 354.04547119]
[-92.56073761 342.08850098]
[-91.04360199 327.27136230]
[-76.54334259 320.94259644]
[-67.48628235 308.98562622]
[-72.53787994 296.56213379]
[-70.74916077 283.16113281]
[-62.48425674 272.32479858]
[-49.83333588 266.97116089]
[-36.08484650 268.60879517]
[-26.73250198 256.88134766]
[-17.38015366 245.15386963]
[-8.02780724 233.42639160]
[1.32454002 221.69892883]
[10.52996159 209.85577393]
[19.58702850 197.89878845]
[28.64409447 185.94180298]
[29.82996750 168.47998047]
[46.75712585 161.36106873]
[55.51328278 149.18200684]
[64.26943970 137.00292969]
[73.02558899 124.82386017]
[81.78174591 112.64479065]
[90.53790283 100.46572113]
[90.88259125 95.11230469]
[94.25814056 90.36492920]
[100.04656219 87.91254425]
[109.39891052 76.18507385]
[118.75125885 64.45759583]
[128.10360718 52.73012543]
[130.65861511 37.11658859]
[144.64320374 31.99013519]
[153.99554443 20.26266289]
[156.55055237 4.64912558]
[170.53514099 -0.47732842]
[179.88748169 -12.20480061]
[189.23982239 -23.93227196]
[183.04405212 -39.20585251]
[185.35102844 -55.43156433]
[195.44258118 -68.22609711]
[210.51049805 -74.18081665]
[226.43736267 -71.76962280]
[235.49443054 -83.72661591]
[244.55149841 -95.68360138]
[246.71644592 -111.35597992]
[260.56887817 -116.82949066]
[269.62594604 -128.78648376]
[278.68301392 -140.74346924]
[274.34182739 -155.52386475]
[279.47619629 -169.85884094]
[291.91983032 -178.32170105]
[306.78274536 -177.84024048]
[315.83981323 -189.79724121]
[315.07986450 -205.82228088]
[327.22952271 -216.29917908]
[342.96859741 -213.19096375]
[350.22341919 -198.88197327]
[343.42871094 -184.34886169]
[327.79678345 -180.74017334]
[318.73974609 -168.78318787]
[323.22866821 -154.60618591]
[318.45236206 -140.33555603]
[306.04376221 -131.51058960]
[290.64001465 -131.68640137]
[281.58294678 -119.72940826]
[272.52587891 -107.77242279]
[271.00875854 -92.95528412]
[256.50848389 -86.62653351]
[247.45141602 -74.66954803]
[238.39436340 -62.71255875]
[244.53387451 -50.44785309]
[244.76770020 -36.66788483]
[238.99244690 -24.08127403]
[228.29156494 -15.18687725]
[214.73246765 -11.77775860]
[200.96730042 -14.57992554]
[191.61495972 -2.85245371]
[182.26260376 8.87501907]
[180.37654114 23.64972878]
[165.72302246 29.61500931]
[156.37066650 41.34248352]
[154.48460388 56.11719131]
[139.83108521 62.08247375]
[130.47872925 73.80994415]
[121.12638855 85.53741455]
[111.77404022 97.26489258]
[102.71697235 109.22187805]
[93.96081543 121.40094757]
[85.20465851 133.58001709]
[76.44850922 145.75909424]
[67.69235229 157.93815613]
[58.93619537 170.11723328]
[60.23586273 183.02175903]
[52.60176849 193.00488281]
[40.60108185 194.99885559]
[31.54401588 206.95585632]
[22.48694992 218.91284180]
[19.75563622 227.74717712]
[13.05201244 231.05126953]
[3.69966531 242.77874756]
[-5.65268183 254.50621033]
[-15.00502872 266.23367310]
[-24.35737610 277.96115112]
[-19.62925529 294.14654541]
[-25.38459778 309.81954956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[4 22]
[5 21]
[6 20]
[10 19]
[11 18]
[12 17]
[30 123]
[31 122]
[32 121]
[33 120]
[34 119]
[35 117]
[36 116]
[37 115]
[39 112]
[40 111]
[41 110]
[42 109]
[43 108]
[44 107]
[47 106]
[48 105]
[49 104]
[50 103]
[52 101]
[53 100]
[55 98]
[56 97]
[57 96]
[62 90]
[63 89]
[64 88]
[66 86]
[67 85]
[68 84]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
