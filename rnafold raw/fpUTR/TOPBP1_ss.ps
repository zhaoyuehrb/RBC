%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUAGGGGCGGCGCCGAGUCGGGGGAGGGGGCUGUGCGCCGGGCUGGCGCCCGACCCCAGCCACCGCCCUGCGGCCAGCGCGUCCCCCGACUCGCCGCCCGGAGACCCCGAGGCUCCAACGAGUUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[271.91143799 429.89144897]
[264.77221680 416.69934082]
[257.63299561 403.50723267]
[250.49378967 390.31512451]
[243.35458374 377.12301636]
[225.58015442 373.04376221]
[216.18795776 357.04342651]
[221.46769714 338.92706299]
[213.71345520 326.08679199]
[205.95922852 313.24655151]
[198.20498657 300.40631104]
[190.45075989 287.56607056]
[182.69651794 274.72583008]
[174.94227600 261.88558960]
[171.52601624 260.69897461]
[168.54234314 257.74356079]
[166.84191895 253.25468445]
[167.13096619 247.85012817]
[160.30532837 234.49307251]
[153.47969055 221.13603210]
[146.65405273 207.77899170]
[139.82841492 194.42193604]
[133.00277710 181.06489563]
[126.17713928 167.70785522]
[119.35150146 154.35079956]
[112.52586365 140.99375916]
[105.70022583 127.63671112]
[98.87458801 114.27966309]
[87.24496460 106.51800537]
[87.76836395 92.54597473]
[75.70626831 87.80471802]
[70.31703186 76.46150970]
[74.01717377 64.88206482]
[67.50891876 51.36753464]
[61.00065994 37.85300064]
[54.49240494 24.33846855]
[39.84626770 19.03483963]
[33.43849182 5.23646832]
[38.58494949 -8.69369793]
[32.07669449 -22.20823097]
[25.56843758 -35.72276306]
[12.60970116 -44.79920197]
[14.05861092 -59.62316513]
[7.55035496 -73.13769531]
[1.04209912 -86.65222931]
[-5.46615696 -100.16676331]
[-12.29179478 -113.52381134]
[-19.43100548 -126.71591949]
[-26.57021713 -139.90802002]
[-33.70942688 -153.10012817]
[-49.01275253 -152.84169006]
[-62.67805862 -159.73501587]
[-71.56516266 -172.19607544]
[-73.63185883 -187.36141968]
[-68.40325165 -201.74613953]
[-57.08082962 -212.04473877]
[-42.26640320 -215.89068604]
[-27.36421776 -212.40020752]
[-15.79868698 -202.37538147]
[-10.22748756 -188.11984253]
[-11.93083763 -172.90942383]
[-20.51732063 -160.23933411]
[-13.37810993 -147.04724121]
[-6.23889923 -133.85513306]
[0.90031165 -120.66302490]
[5.22938776 -118.44752502]
[8.16406059 -113.44040680]
[8.04837608 -106.67501831]
[14.55663204 -93.16048431]
[21.06488800 -79.64595795]
[27.57314491 -66.13142395]
[40.06636810 -58.02163315]
[39.08296967 -42.23102188]
[45.59122849 -28.71648788]
[52.09948349 -15.20195389]
[66.19928741 -10.54030132]
[72.99211121 3.07264447]
[68.00693512 17.83021355]
[74.51519012 31.34474564]
[81.02344513 44.85927963]
[87.53170776 58.37381363]
[102.53129578 67.40430450]
[101.12541199 85.72033691]
[112.75503540 93.48199463]
[112.23163605 107.45402527]
[119.05727386 120.81107330]
[125.88291168 134.16812134]
[132.70854187 147.52516174]
[139.53417969 160.88221741]
[146.35981750 174.23925781]
[153.18545532 187.59629822]
[160.01109314 200.95335388]
[166.83673096 214.31039429]
[173.66236877 227.66743469]
[180.48800659 241.02449036]
[187.78253174 254.13136292]
[195.53675842 266.97158813]
[203.29100037 279.81182861]
[211.04522705 292.65206909]
[218.79946899 305.49234009]
[226.55369568 318.33258057]
[234.30793762 331.17282104]
[246.29664612 331.73886108]
[256.39666748 337.99679565]
[262.12341309 348.26947021]
[262.13540649 359.91006470]
[256.54669189 369.98379517]
[263.68591309 383.17590332]
[270.82510376 396.36801147]
[277.96432495 409.56011963]
[285.10354614 422.75222778]
[305.54547119 427.26480103]
[316.04565430 445.04086304]
[310.29391479 464.56860352]
[318.64587402 477.02835083]
[326.99780273 489.48806763]
[335.34976196 501.94778442]
[343.70172119 514.40753174]
[358.65097046 521.14935303]
[360.01748657 537.49151611]
[346.39556885 546.62249756]
[331.79824829 539.14916992]
[331.24200439 522.75946045]
[322.89004517 510.29974365]
[314.53808594 497.84002686]
[306.18612671 485.38027954]
[297.83416748 472.92056274]
[288.33288574 474.03762817]
[279.03479004 471.55035400]
[271.26663208 465.76901245]
[266.15338135 457.47711182]
[264.45516968 447.82534790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[5 107]
[8 102]
[9 101]
[10 100]
[11 99]
[12 98]
[13 97]
[14 96]
[18 95]
[19 94]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[30 83]
[33 81]
[34 80]
[35 79]
[36 78]
[39 75]
[40 74]
[41 73]
[43 71]
[44 70]
[45 69]
[46 68]
[47 65]
[48 64]
[49 63]
[50 62]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
