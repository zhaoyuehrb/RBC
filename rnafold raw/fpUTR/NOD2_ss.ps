%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGACAGAUCCAGGCUCACCAGUCCUGUGCCACUGGGCUUUUGGCGUUCUGCACAAGGCCUACCCGCAGAUGCCAUGCCUGCUCCCCCAGCCUAAUGGGCUUUG\
) } def
/len { sequence length } bind def

/coor [
[117.16700745 263.67269897]
[110.92356110 257.83395386]
[105.81259155 250.97474670]
[101.99817657 243.31182861]
[99.60337830 235.08781433]
[98.70629120 226.56347656]
[99.33747864 218.00953674]
[101.47892761 209.69795227]
[105.06457520 201.89341736]
[109.98234558 194.84480286]
[116.07765198 188.77731323]
[123.15821838 183.88520813]
[117.93518829 169.82391357]
[112.71216583 155.76261902]
[107.48914337 141.70132446]
[102.26612091 127.64002991]
[92.00276184 126.55467224]
[82.84695435 121.79172516]
[76.06668854 114.01081848]
[72.60098267 104.28953552]
[57.70626450 102.51544189]
[42.81154633 100.74134064]
[27.91683006 98.96724701]
[13.02211380 97.19314575]
[2.57988858 108.67093658]
[-12.62131596 111.78589630]
[-26.73632812 105.34027100]
[-34.33763504 91.81253052]
[-32.50238037 76.40437317]
[-21.93625832 65.04053497]
[-6.70215702 62.09066010]
[7.34210110 68.68902588]
[14.79621124 82.29843140]
[29.69092751 84.07253265]
[44.58564377 85.84662628]
[59.48036194 87.62072754]
[74.37507629 89.39482117]
[77.22721863 84.17259216]
[81.12772369 79.67898560]
[85.89702606 76.12088013]
[91.31556702 73.66205597]
[97.13390350 72.41572571]
[103.08419037 72.43926239]
[108.72160339 58.53891754]
[114.35901642 44.63857269]
[119.99642944 30.73822975]
[125.63384247 16.83788681]
[131.27125549 2.93754196]
[131.61955261 -6.35569477]
[137.28718567 -11.28717709]
[143.33404541 -25.01436043]
[149.38088989 -38.74154663]
[155.42774963 -52.46873093]
[150.74032593 -60.97938538]
[150.59756470 -70.55524445]
[154.90231323 -78.95404053]
[162.53120422 -84.27027130]
[171.62460327 -85.36717224]
[178.86648560 -98.50319672]
[178.00169373 -114.87952423]
[191.89718628 -123.58854675]
[206.25849915 -115.67116547]
[206.31192017 -99.27210999]
[192.00251770 -91.26131439]
[184.76063538 -78.12528992]
[187.23094177 -57.72643280]
[169.15492249 -46.42187881]
[163.10807800 -32.69469452]
[157.06123352 -18.96751022]
[151.01437378 -5.24032545]
[145.17160034 8.57495594]
[139.53419495 22.47529984]
[133.89677429 36.37564468]
[128.25935364 50.27598953]
[122.62194824 64.17633057]
[116.98453522 78.07667542]
[127.72972107 100.41094971]
[116.32741547 122.41700745]
[121.55043793 136.47830200]
[126.77346039 150.53959656]
[131.99649048 164.60089111]
[137.21951294 178.66218567]
[160.52023315 179.81431580]
[180.50611877 191.73799133]
[192.52899170 211.59811401]
[193.82179260 234.72116089]
[184.13519287 255.69480896]
[194.25994873 266.76229858]
[204.38468933 277.82980347]
[214.50942993 288.89730835]
[230.30726624 289.34921265]
[241.09757996 300.89669800]
[240.47868347 316.68887329]
[228.81774902 327.35647583]
[213.03300476 326.57064819]
[202.48925781 314.79760742]
[203.44194031 299.02203369]
[193.31718445 287.95455933]
[183.19244385 276.88705444]
[173.06770325 265.81954956]
[165.59197998 269.88064575]
[157.50845337 272.55160522]
[149.07336426 273.74563599]
[140.55450439 273.42272949]
[132.22267151 271.59109497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[50 70]
[51 69]
[52 68]
[53 67]
[58 65]
[59 64]
[87 100]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
