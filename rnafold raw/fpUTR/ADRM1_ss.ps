%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGAGCCGGCUGCGCGGCUUACGGGGCUCAAUCGGCGGCGAGAGCGGCAGGCGGGGCGGGCCGAACGCGGGUUUCCGGCGGGGCCCGGCAGGCGCCGAGGAGGAAGAGCGAGCCCGGACGGCGCCUCUCGAACGAGUGUGGGCGCGAGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[153.70841980 382.56991577]
[144.61534119 370.64025879]
[149.74174500 356.54348755]
[150.39759827 341.55783081]
[142.92190552 342.16134644]
[135.16184998 354.99804688]
[127.40177917 367.83477783]
[119.64170837 380.67147827]
[111.88164520 393.50820923]
[104.12157440 406.34494019]
[108.14665985 421.62805176]
[100.11396027 435.23876953]
[84.78912354 439.10205078]
[71.26410675 430.92590332]
[67.56306458 415.56106567]
[75.88175964 402.12326050]
[91.28485870 398.58486938]
[99.04492188 385.74813843]
[106.80499268 372.91143799]
[114.56505585 360.07470703]
[122.32512665 347.23797607]
[130.08518982 334.40127563]
[121.88220215 302.32385254]
[140.73445129 281.00082397]
[129.96673584 270.70977783]
[133.86865234 255.37728882]
[129.98635864 240.88839722]
[126.10407257 226.39950562]
[122.22178650 211.91061401]
[118.33950043 197.42173767]
[114.45721436 182.93284607]
[101.46987152 175.73114014]
[97.32628632 161.09265137]
[104.96814728 147.51916504]
[101.08586884 133.03027344]
[77.59135437 124.29055786]
[66.98944855 101.57549286]
[52.23515320 98.87166595]
[37.26634216 103.99467468]
[26.14223099 94.08995819]
[11.38793278 91.38613129]
[-3.86947322 97.39808655]
[-16.53451729 86.98037720]
[-13.57848835 70.84984589]
[1.95770442 65.60020447]
[14.09175873 76.63183594]
[28.84605598 79.33566284]
[42.75954056 74.01924896]
[54.93898010 84.11736298]
[69.69327545 86.82118988]
[77.34790802 75.93630981]
[88.67510986 68.95285034]
[86.86705780 54.06222153]
[85.05900574 39.17158890]
[83.25096130 24.28095436]
[70.40559387 8.79419518]
[78.60762024 -8.67927837]
[68.75681305 -21.05959129]
[74.35231781 -34.86319733]
[71.94615173 -49.66895294]
[69.53997803 -64.47470856]
[67.13381195 -79.28046417]
[64.72764587 -94.08621216]
[62.32147217 -108.89196777]
[53.08567429 -114.77283478]
[48.73049927 -124.57800293]
[50.48588943 -134.93893433]
[57.52649307 -142.44084167]
[55.71844101 -157.33148193]
[53.91039276 -172.22210693]
[44.56607819 -184.98904419]
[50.71286011 -198.55613708]
[48.90481186 -213.44677734]
[40.99335861 -228.44161987]
[53.21208954 -240.19487000]
[67.88850403 -231.70727539]
[63.79544449 -215.25482178]
[65.60349274 -200.36419678]
[74.81848145 -188.66233826]
[68.80102539 -174.03016663]
[70.60907745 -159.13952637]
[72.41712189 -144.24890137]
[85.15674591 -129.74725342]
[77.12722778 -111.29814148]
[79.53339386 -96.49238586]
[81.93956757 -81.68663025]
[84.34573364 -66.88087463]
[86.75190735 -52.07512283]
[89.15807343 -37.26936722]
[98.83677673 -25.94806099]
[93.41337585 -11.08544731]
[102.26316833 -5.83854055]
[106.83184052 3.62494016]
[105.37657928 14.25466442]
[98.14159393 22.47290421]
[99.94963837 37.36353683]
[101.75769043 52.25416946]
[103.56574249 67.14480591]
[111.71561432 69.09817505]
[119.11207581 73.03878784]
[125.27947235 78.71322632]
[129.82118225 85.75657654]
[132.44515991 93.71589661]
[132.98265076 102.07933807]
[131.39906311 110.30906677]
[127.79627991 117.87583160]
[122.40596008 124.29302979]
[115.57475281 129.14799500]
[119.45703888 143.63688660]
[132.86183167 151.57093811]
[136.59262085 166.32003784]
[128.94610596 179.05056763]
[132.82838440 193.53944397]
[136.71067810 208.02833557]
[140.59295654 222.51722717]
[144.47525024 237.00610352]
[148.35752869 251.49499512]
[159.40293884 262.82238770]
[155.22334290 277.11853027]
[166.21154785 277.60058594]
[176.78669739 282.44900513]
[185.20132446 291.37799072]
[189.88410950 303.40377808]
[189.71549988 316.94485474]
[184.25032043 330.02859497]
[193.96903992 341.45428467]
[203.68777466 352.87997437]
[213.40650940 364.30566406]
[223.12524414 375.73135376]
[237.96017456 381.22998047]
[240.31277466 395.93762207]
[250.03150940 407.36331177]
[265.54333496 408.78479004]
[275.23675537 420.51052856]
[273.78598022 435.28991699]
[289.55722046 436.31164551]
[299.92376709 448.24105835]
[298.73535156 464.00057983]
[286.69702148 474.24041748]
[270.95092773 472.88546753]
[260.83892822 460.73953247]
[262.36032104 445.00866699]
[247.53956604 444.06985474]
[237.52062988 432.62103271]
[238.60581970 417.08203125]
[228.88710022 405.65634155]
[214.74729919 400.97494507]
[211.69955444 385.45007324]
[201.98081970 374.02438354]
[192.26208496 362.59869385]
[182.54336548 351.17303467]
[172.82463074 339.74734497]
[165.34895325 340.35083008]
[168.40017700 355.03723145]
[175.72146606 368.12915039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[24 119]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[31 112]
[34 109]
[35 108]
[37 50]
[38 49]
[40 47]
[41 46]
[52 98]
[53 97]
[54 96]
[55 95]
[57 91]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[68 82]
[69 81]
[70 80]
[72 78]
[73 77]
[125 152]
[126 151]
[127 150]
[128 149]
[129 148]
[131 146]
[132 145]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
