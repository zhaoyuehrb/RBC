%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUGCGUCAAGACGGCCGUGCUGAGCGAAUGCAGGCGACUUGCGAGCUGGGAGCGAUUUAAAACGCUUUGGAUUCCCCCGGCCUGGGUGGGGAGAGCGAGCUGGGUGCCCCCUAGAUUCCCCGCCCCCGCACCUCAUGAGCCGACCCUCGGCUCC\
) } def
/len { sequence length } bind def

/coor [
[102.54613495 118.27584076]
[98.39875031 132.69108582]
[94.25136566 147.10632324]
[90.10398865 161.52156067]
[85.95660400 175.93681335]
[87.38784027 192.83023071]
[71.55081940 198.88211060]
[61.35133743 185.33932495]
[71.54135895 171.78942871]
[75.68874359 157.37419128]
[79.83612823 142.95893860]
[83.98350525 128.54370117]
[88.13088989 114.12845612]
[82.25380707 109.46906281]
[70.49964905 100.15027618]
[64.62257385 95.49089050]
[51.53329849 102.81693268]
[38.44402695 110.14297485]
[32.44206619 117.10462189]
[25.01874352 117.48166656]
[11.78550625 124.54434204]
[-1.44773149 131.60702515]
[-2.59269595 146.99183655]
[-11.89180470 159.30158997]
[-26.37774658 164.60829163]
[-41.42810822 161.21858215]
[-52.24037552 150.21411133]
[-55.36439514 135.10635376]
[-49.80329895 120.71616364]
[-37.33161926 111.63537598]
[-21.92901611 110.76165009]
[-8.51040936 118.37377930]
[4.72282887 111.31110382]
[17.95606613 104.24842834]
[31.11798096 97.05370331]
[44.20725250 89.72766113]
[57.29652786 82.40161133]
[66.96386719 70.93241119]
[71.96861267 56.79195404]
[65.41291046 42.66182709]
[70.68986511 28.39268684]
[84.20118713 22.22990799]
[89.20593262 8.08945084]
[94.21067810 -6.05100679]
[99.21542358 -20.19146347]
[91.19899750 -35.87171173]
[96.57559204 -52.13605118]
[88.86002350 -64.99957275]
[81.14446259 -77.86308289]
[73.42890167 -90.72660065]
[65.71333313 -103.59011841]
[57.99777222 -116.45363617]
[50.85913849 -122.24397278]
[50.25948715 -129.65263367]
[36.68573380 -137.78059387]
[37.07245636 -152.67018127]
[29.61582184 -165.68550110]
[22.15918732 -178.70082092]
[14.70255184 -191.71614075]
[7.24591684 -204.73146057]
[-0.21071826 -217.74679565]
[-7.66735363 -230.76211548]
[-15.12398815 -243.77743530]
[-29.56302834 -251.55213928]
[-29.77892113 -267.94985962]
[-15.54957676 -276.10205078]
[-1.51292336 -267.62237549]
[-2.10866714 -251.23406982]
[5.34796810 -238.21875000]
[12.80460358 -225.20343018]
[20.26123810 -212.18811035]
[27.71787262 -199.17277527]
[35.17450714 -186.15745544]
[42.63114548 -173.14213562]
[50.08778000 -160.12681580]
[63.12818527 -152.92979431]
[63.27481079 -137.10926819]
[70.86128998 -124.16920471]
[78.57685089 -111.30568695]
[86.29241943 -98.44216919]
[94.00798035 -85.57865143]
[101.72354126 -72.71513367]
[109.43910980 -59.85161591]
[116.43108368 -60.06512833]
[123.13392639 -58.06383896]
[128.86425781 -54.05178833]
[142.36947632 -60.57935333]
[155.87469482 -67.10691833]
[169.37991333 -73.63448334]
[182.88513184 -80.16204834]
[196.39035034 -86.68961334]
[209.89556885 -93.21717834]
[223.40078735 -99.74475098]
[236.90600586 -106.27231598]
[250.41122437 -112.79988098]
[251.23977661 -120.41292572]
[254.65530396 -127.19052124]
[260.18093872 -132.29298401]
[267.08193970 -135.10711670]
[274.46319580 -135.31974792]
[281.38525391 -132.95176697]
[286.98391724 -128.34954834]
[301.07360840 -133.49551392]
[315.16326904 -138.64147949]
[329.25296021 -143.78746033]
[343.34262085 -148.93342590]
[351.38314819 -162.81613159]
[367.27093506 -165.04290771]
[378.81817627 -153.90557861]
[377.16687012 -137.94773865]
[363.58374023 -129.41087341]
[348.48858643 -134.84375000]
[334.39892578 -129.69776917]
[320.30923462 -124.55181122]
[306.21957397 -119.40583801]
[292.12988281 -114.25987244]
[279.80722046 -95.49569702]
[256.93878174 -99.29466248]
[243.43356323 -92.76709747]
[229.92834473 -86.23953247]
[216.42312622 -79.71196747]
[202.91790771 -73.18440247]
[189.41270447 -66.65683746]
[175.90748596 -60.12926865]
[162.40226746 -53.60170364]
[148.89704895 -47.07413483]
[135.39183044 -40.54656982]
[130.23199463 -23.14593315]
[113.35588074 -15.18671894]
[108.35113525 -1.04626179]
[103.34638977 13.09419537]
[98.34164429 27.23465157]
[104.96797943 40.52477264]
[100.09389496 54.93650055]
[86.10906982 61.79669952]
[81.10432434 75.93715668]
[105.59502411 64.20054626]
[134.67604065 76.52857208]
[146.30682373 110.63192749]
[152.15089417 124.44665527]
[157.99497986 138.26138306]
[163.83905029 152.07611084]
[169.68313599 165.89085388]
[175.52720642 179.70558167]
[181.37129211 193.52030945]
[193.11087036 205.75218201]
[184.60685730 220.41908264]
[168.15899658 216.30761719]
[167.55656433 199.36437988]
[161.71247864 185.54965210]
[155.86840820 171.73492432]
[150.02432251 157.92019653]
[144.18025208 144.10546875]
[138.33616638 130.29074097]
[132.49209595 116.47600555]
[125.00559998 116.92596436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[16 37]
[17 36]
[18 35]
[20 34]
[21 33]
[22 32]
[38 136]
[39 135]
[42 132]
[43 131]
[44 130]
[45 129]
[47 83]
[48 82]
[49 81]
[50 80]
[51 79]
[52 78]
[54 77]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[86 127]
[87 126]
[88 125]
[89 124]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
[139 155]
[140 154]
[141 153]
[142 152]
[143 151]
[144 150]
[145 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
