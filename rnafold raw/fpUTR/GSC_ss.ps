%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGGCGGGGAGGGGCGCAGGGCUGCGCGCUCGCCGGCGCUCUCUUUCGGUUUGGUCGGCGGCUGGAGGAGAGUGGACCCCCCCACUUUAAGGCUCUGUCCUCGGCGCGUUCCCGCCGCCCCCCGGUCCCGACGCGGGGCUCGGGG\
) } def
/len { sequence length } bind def

/coor [
[275.91632080 432.34146118]
[275.48089600 425.63186646]
[267.88919067 412.69488525]
[254.77456665 405.63400269]
[254.46324158 389.81585693]
[246.87152100 376.87887573]
[239.27978516 363.94186401]
[231.68806458 351.00488281]
[224.09632874 338.06790161]
[216.50460815 325.13092041]
[208.91288757 312.19390869]
[201.32115173 299.25692749]
[188.20652771 292.19604492]
[187.89521790 276.37792969]
[174.78059387 269.31704712]
[174.46926880 253.49890137]
[166.87754822 240.56190491]
[152.44372559 237.06901550]
[144.56033325 224.05722046]
[148.32186890 208.94137573]
[140.73014832 196.00437927]
[133.13842773 183.06739807]
[125.54669189 170.13040161]
[117.95497131 157.19342041]
[100.49295807 148.98350525]
[100.47426605 128.87071228]
[92.34031677 116.26757812]
[78.80611420 109.80033875]
[63.89051819 111.38937378]
[48.97492218 112.97840881]
[34.05932999 114.56744385]
[19.14373398 116.15647888]
[6.21607637 126.24645996]
[-8.88237858 119.84577942]
[-10.61963463 103.53890991]
[2.79144883 94.10095978]
[17.55469894 101.24088287]
[32.47029114 99.65184784]
[47.38588715 98.06281281]
[62.30148315 96.47377777]
[77.21707916 94.88474274]
[82.80992126 80.96640778]
[73.14103699 69.49851227]
[63.47214508 58.03062057]
[53.80325699 46.56272507]
[44.13436890 35.09482956]
[34.46548080 23.62693596]
[24.79659271 12.15904236]
[15.12770367 0.69114888]
[5.45881462 -10.77674484]
[-4.21007395 -22.24463844]
[-13.87896252 -33.71253204]
[-23.54785156 -45.18042755]
[-39.01423645 -43.92723083]
[-52.24586105 -52.03301620]
[-58.15489197 -66.38094330]
[-54.46918869 -81.45394135]
[-42.60597610 -91.45613098]
[-27.12690544 -92.54147339]
[-13.98399258 -84.29262543]
[-8.23095608 -69.88143921]
[-12.07995701 -54.84931564]
[-2.41106868 -43.38142014]
[7.25782013 -31.91352844]
[16.92670822 -20.44563293]
[26.59559822 -8.97773933]
[36.26448441 2.49015427]
[45.93337631 13.95804787]
[55.60226440 25.42594147]
[65.27114868 36.89383698]
[74.94004059 48.36172867]
[84.60893250 59.82962418]
[94.27781677 71.29751587]
[108.94114685 68.13732910]
[113.02807617 53.70483017]
[117.11499786 39.27233124]
[121.20192719 24.83983231]
[113.27642059 11.16643238]
[117.42147064 -4.08460331]
[131.17790222 -11.86510563]
[146.38426208 -7.55904055]
[154.01889038 6.27887964]
[149.55229187 21.43886185]
[135.63442993 28.92675972]
[131.54750061 43.35925674]
[127.46057129 57.79175568]
[123.37364197 72.22425842]
[126.79581451 81.65212250]
[127.10755920 90.72840881]
[124.78028107 98.54347229]
[120.52612305 104.42086029]
[115.20647430 107.97441101]
[109.72898102 109.13333130]
[104.94345093 108.13363647]
[113.07740021 120.73676300]
[123.90994263 122.43042755]
[131.83283997 129.68676758]
[134.36320496 139.90127563]
[130.89195251 149.60168457]
[138.48368835 162.53868103]
[146.07540894 175.47567749]
[153.66714478 188.41265869]
[161.25886536 201.34965515]
[176.28968811 205.43768311]
[183.80448914 218.66578674]
[179.81452942 232.97018433]
[187.40626526 245.90716553]
[201.06388855 253.89338684]
[200.83219910 268.78619385]
[214.48983765 276.77239990]
[214.25814819 291.66519165]
[221.84986877 304.60220337]
[229.44158936 317.53918457]
[237.03332520 330.47616577]
[244.62504578 343.41314697]
[252.21678162 356.35015869]
[259.80850220 369.28713989]
[267.40023804 382.22412109]
[281.05786133 390.21032715]
[280.82617188 405.10314941]
[288.41790771 418.04013062]
[296.28250122 430.81307983]
[304.41644287 443.41619873]
[312.55041504 456.01931763]
[320.68435669 468.62246704]
[328.81829834 481.22558594]
[337.08554077 493.74169922]
[345.48516846 506.16934204]
[353.88479614 518.59698486]
[362.28442383 531.02459717]
[370.68405151 543.45227051]
[379.08364868 555.87988281]
[392.96261597 565.61700439]
[387.44815063 581.64904785]
[370.51608276 580.78820801]
[366.65600586 564.27954102]
[358.25640869 551.85186768]
[349.85678101 539.42425537]
[341.45715332 526.99658203]
[333.05752563 514.56896973]
[324.65789795 502.14129639]
[318.26217651 498.33441162]
[316.21517944 489.35952759]
[308.08123779 476.75640869]
[299.94726562 464.15328979]
[291.81332397 451.55014038]
[283.67938232 438.94702148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 121]
[3 120]
[5 118]
[6 117]
[7 116]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[14 109]
[16 107]
[17 106]
[20 103]
[21 102]
[22 101]
[23 100]
[24 99]
[26 95]
[27 94]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[74 87]
[75 86]
[76 85]
[77 84]
[122 147]
[123 146]
[124 145]
[125 144]
[126 143]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
