%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUUCUUAGCUAGAGGUACGUGUCACCCAGUACGCGGCUGGAGUUUUGCAUAAAUUAUUCCGAUAAGGAGCGGGGCGGGGCUCUGUGCAUAGAUUAGUCAAAUGAGCCUGGGAGGGAGGGAAGCCGGCUACGAAUUAGCCUAAGUUAUUAAAG\
) } def
/len { sequence length } bind def

/coor [
[85.87533569 109.11354828]
[70.91306305 110.17674255]
[55.95079041 111.23993683]
[40.98851776 112.30313110]
[26.02624512 113.36632538]
[11.06397152 114.42951965]
[-3.89830112 115.49272156]
[-18.86057472 116.55591583]
[-33.82284546 117.61911011]
[-40.24401093 129.85333252]
[-51.78857803 137.24562073]
[-65.37051392 137.94737244]
[-77.42172241 131.88171387]
[-84.82938385 120.73559570]
[-99.81012726 121.49533844]
[-114.79087830 122.25507355]
[-122.38570404 138.04719543]
[-136.83900452 147.79788208]
[-154.14915466 148.91540527]
[-169.57775879 141.18354797]
[-178.94660950 126.79619598]
[-193.88426208 128.16241455]
[-208.82191467 129.52862549]
[-223.75956726 130.89485168]
[-239.61837769 143.27642822]
[-256.84210205 134.56396484]
[-271.71209717 136.53440857]
[-286.56140137 138.65545654]
[-301.38839722 140.92686462]
[-316.21542358 143.19828796]
[-331.04244995 145.46969604]
[-345.86947632 147.74111938]
[-356.48574829 159.76919556]
[-372.50097656 158.82456970]
[-381.62963867 145.63188171]
[-376.86901855 130.31143188]
[-361.87106323 124.61576080]
[-348.14089966 132.91409302]
[-333.31387329 130.64268494]
[-318.48684692 128.37126160]
[-303.65982056 126.09984589]
[-288.83279419 123.82843018]
[-282.66104126 119.68247223]
[-273.68255615 121.66439819]
[-258.81253052 119.69394684]
[-253.30694580 111.00067902]
[-243.71139526 106.71203613]
[-233.12753296 108.48085785]
[-225.12579346 115.95719910]
[-210.18814087 114.59098053]
[-195.25048828 113.22476196]
[-180.31283569 111.85854340]
[-176.25596619 99.82610321]
[-167.90361023 90.19966125]
[-156.47982788 84.44430542]
[-143.67955017 83.45378876]
[-131.41714478 87.41194153]
[-121.54008484 95.75981903]
[-115.55061340 107.27433014]
[-100.56987000 106.51458740]
[-85.58911896 105.75485229]
[-77.09508514 91.73896790]
[-61.77525330 85.46527100]
[-45.56875610 89.57912445]
[-34.88604355 102.65683746]
[-19.92376900 101.59364319]
[-4.96149683 100.53044891]
[10.00077629 99.46724701]
[24.96304893 98.40405273]
[39.92532349 97.34085846]
[54.88759613 96.27766418]
[69.84986877 95.21446991]
[84.81214142 94.15127563]
[91.98624420 81.68483734]
[108.75655365 77.96819305]
[120.80183411 69.02888489]
[132.84712219 60.08958435]
[131.19628906 44.88359833]
[137.33775330 30.98470497]
[149.53054810 22.08515358]
[164.44111633 20.49415207]
[178.05435181 26.53941536]
[190.09963989 17.60011101]
[202.14491272 8.66080570]
[214.19020081 -0.27849865]
[220.66093445 -14.71595955]
[235.49223328 -16.08762550]
[241.96296692 -30.52508736]
[256.79428101 -31.89675331]
[261.85882568 -39.57083511]
[269.17547607 -40.89223099]
[281.39947510 -49.58557892]
[293.62344360 -58.27892303]
[300.85873413 -75.18249512]
[318.35180664 -76.22216797]
[330.39706421 -85.16147614]
[342.44235229 -94.10078430]
[344.50814819 -109.76947784]
[357.09899902 -119.32175446]
[372.74499512 -117.09040833]
[382.16360474 -104.39926910]
[379.76696777 -88.77775574]
[366.97695923 -79.49383545]
[351.38165283 -82.05549622]
[339.33639526 -73.11619568]
[327.29110718 -64.17688751]
[325.19384766 -52.22616577]
[315.18066406 -44.68550491]
[302.31680298 -46.05494308]
[290.09280396 -37.36159515]
[277.86883545 -28.66824913]
[265.73358154 -19.85147095]
[260.12442017 -6.05340815]
[244.43154907 -4.04234314]
[238.82237244 9.75571918]
[223.12950134 11.76678371]
[211.08422852 20.70608902]
[199.03894043 29.64539337]
[186.99365234 38.58469772]
[188.83625793 53.36544037]
[182.99420166 67.17581177]
[170.94424438 76.26782990]
[155.86222839 78.11975861]
[141.78642273 72.13486481]
[129.74113464 81.07417297]
[117.69585419 90.01347351]
[117.08797455 105.00115204]
[128.36975098 114.88657379]
[139.65151978 124.77200317]
[150.93328857 134.65742493]
[162.21505737 144.54284668]
[178.25354004 144.92582703]
[187.83879089 157.79060364]
[183.61782837 173.26843262]
[168.82861328 179.48603821]
[154.81616211 171.67381287]
[152.32963562 155.82461548]
[141.04786682 145.93919373]
[129.76609802 136.05377197]
[118.48432159 126.16835022]
[107.20255280 116.28292847]
[117.62965393 127.06604004]
[123.30594635 140.95054626]
[123.41938782 155.95011902]
[117.95374298 169.91889954]
[107.69092560 180.85848999]
[94.09915161 187.20385742]
[79.12287903 188.04724121]
[64.90463257 183.26797485]
[53.47848892 173.54977417]
[46.47908401 160.28297424]
[44.90776062 145.36549377]
[48.98932266 130.93147278]
[58.13984680 119.04586029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[14 61]
[15 60]
[16 59]
[21 52]
[22 51]
[23 50]
[24 49]
[26 45]
[27 44]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[75 126]
[76 125]
[77 124]
[82 119]
[83 118]
[84 117]
[85 116]
[87 114]
[89 112]
[91 111]
[92 110]
[93 109]
[95 106]
[96 105]
[97 104]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
