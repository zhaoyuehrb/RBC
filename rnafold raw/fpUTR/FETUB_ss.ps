%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUAACAAAACCGCUCAAGUCUGCCUUAAAGAGCCUUACAAGCCAGCCAGUCCCUGCAGCUCCACAAACUGACCCAUCCUGGGCCUUGUUCUCCACAGA\
) } def
/len { sequence length } bind def

/coor [
[87.41812897 277.39160156]
[73.93114471 283.95675659]
[59.30778885 287.29702759]
[44.30790329 287.23886108]
[29.71089363 283.78524780]
[16.27523422 277.11569214]
[4.69905472 267.57672119]
[-4.41613579 255.66398621]
[-10.59670353 241.99649048]
[-13.52150154 227.28439331]
[-13.03855419 212.29217529]
[-9.17295551 197.79882812]
[-2.12556577 184.55743408]
[7.73742628 173.25604248]
[19.90255737 164.48243713]
[4.90255785 164.48243713]
[-10.09744263 164.48243713]
[-25.09744263 164.48243713]
[-30.88224411 178.53962708]
[-41.60969925 189.30949402]
[-55.64394760 195.14971924]
[-70.84487152 195.16972351]
[-84.89443207 189.36642456]
[-95.65018463 178.62481689]
[-101.47195435 164.58290100]
[-101.47195435 149.38195801]
[-95.65018463 135.34004211]
[-84.89443207 124.59843445]
[-70.84487152 118.79514313]
[-55.64394760 118.81513977]
[-41.60969925 124.65537262]
[-30.88224411 135.42524719]
[-25.09744263 149.48243713]
[-10.09744263 149.48243713]
[4.90255785 149.48243713]
[19.90255737 149.48243713]
[22.12208748 147.46340942]
[24.93416595 145.99031067]
[28.19639397 145.23194885]
[31.71967506 145.31823730]
[43.40588379 135.91438293]
[55.09209442 126.51052856]
[66.77830505 117.10666656]
[78.46450806 107.70281219]
[77.43341064 96.27715302]
[82.07981110 85.78811646]
[91.23474121 78.87464142]
[102.59490967 77.27606964]
[113.30223083 81.39458466]
[125.54518127 72.72798157]
[137.78813171 64.06137085]
[150.03109741 55.39476395]
[146.36981201 39.82289886]
[148.92297363 24.07026482]
[157.27517700 10.51725769]
[170.13691711 1.20056689]
[185.54368591 -2.49286509]
[201.15596008 -0.03225514]
[214.61447144 8.18096066]
[226.58473206 -0.85855848]
[238.55499268 -9.89807796]
[237.28729248 -25.27326775]
[244.55345154 -38.88232422]
[258.03488159 -46.38265228]
[273.42968750 -45.38091660]
[285.82543945 -36.19676971]
[291.26672363 -21.76084518]
[288.01724243 -6.67958689]
[277.11386108 4.23462677]
[262.03585815 7.49911118]
[247.59451294 2.07218051]
[235.62425232 11.11170006]
[223.65399170 20.15122032]
[227.70889282 33.67830658]
[226.87272644 47.80536652]
[221.22651672 60.81475067]
[211.43737793 71.11760712]
[198.67974854 77.44795227]
[184.49452209 79.01818085]
[170.60293579 75.61702728]
[158.69769287 67.63771820]
[146.45474243 76.30432892]
[134.21179199 84.97093201]
[121.96883392 93.63754272]
[119.82529449 111.40475464]
[105.54393768 122.18953705]
[87.86837006 119.38902283]
[76.18215942 128.79287720]
[64.49594879 138.19673157]
[52.80974197 147.60058594]
[41.12353134 157.00445557]
[56.10265350 156.21325684]
[70.87178040 158.83485413]
[84.66350555 164.73301697]
[96.76119232 173.60127258]
[106.53623962 184.97882080]
[113.48072052 198.27447510]
[117.23379517 212.79736328]
[117.60044861 227.79287720]
[114.56163788 242.48184204]
[108.27525330 256.10098267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 36]
[16 35]
[17 34]
[18 33]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[49 84]
[50 83]
[51 82]
[52 81]
[59 73]
[60 72]
[61 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
