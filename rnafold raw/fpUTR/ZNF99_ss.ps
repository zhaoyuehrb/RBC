%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUGUGGGAUGUGGCGGGGCCGUUGUUUCUGGUUCCAGCUGGAGCUCCGGAUCUCGUUUUUACUGCUCUGUGUCCUUAGCCUCUGUGGCCCUGUGACCUGUAGGUAUUUGGAGAUCCACAGCUAGGACGCCAGGACCCCCUGGAAGCUUAGAA\
) } def
/len { sequence length } bind def

/coor [
[78.54074860 104.94946289]
[63.65011215 103.14141083]
[48.75947952 101.33335876]
[33.86884689 99.52530670]
[25.65060616 106.76029968]
[15.02088070 108.21556091]
[5.55740023 103.64688110]
[0.31049356 94.79709625]
[-14.49526024 92.39092255]
[-29.30101395 89.98475647]
[-44.10676956 87.57858276]
[-58.91252136 85.17241669]
[-63.89801407 87.07160187]
[-68.62975311 86.85141754]
[-72.33115387 84.97451782]
[-74.52840424 82.14787292]
[-89.16186523 78.85214233]
[-103.79532623 75.55641174]
[-118.42878723 72.26068878]
[-133.06225586 68.96495819]
[-147.69570923 65.66922760]
[-162.32917786 62.37350082]
[-177.18037415 60.26596451]
[-192.15301514 59.36028671]
[-203.92361450 69.56275940]
[-219.09509277 68.43098450]
[-228.74905396 57.14663315]
[-243.72169495 56.24095535]
[-258.69433594 55.33527756]
[-273.66696167 54.42959976]
[-285.43756104 64.63208008]
[-300.60903931 63.50030136]
[-310.26300049 52.21595001]
[-325.23565674 51.31027222]
[-340.20828247 50.40459442]
[-355.18090820 49.49891663]
[-370.15353394 48.59323883]
[-385.12619019 47.68756104]
[-399.54766846 55.49475861]
[-413.37609863 46.67960739]
[-412.38592529 30.31038094]
[-397.59579468 23.22633362]
[-384.22048950 32.71492767]
[-369.24786377 33.62060547]
[-354.27523804 34.52628326]
[-339.30261230 35.43196106]
[-324.32995605 36.33763885]
[-309.35733032 37.24331665]
[-298.41357422 27.20489502]
[-283.21630859 27.91008949]
[-272.76129150 39.45696640]
[-257.78863525 40.36264420]
[-242.81600952 41.26832199]
[-227.84338379 42.17399979]
[-216.89962769 32.13558197]
[-201.70234680 32.84077454]
[-191.24732971 44.38765335]
[-176.27470398 45.29333115]
[-186.60911560 34.42134857]
[-188.73347473 19.57254219]
[-181.86206055 6.23898745]
[-168.53637695 -0.64767921]
[-153.68515015 1.45969093]
[-142.80134583 11.78165150]
[-139.91052246 26.50045586]
[-146.08190918 40.17210770]
[-159.03344727 47.74003983]
[-144.39997864 51.03577042]
[-129.76652527 54.33149719]
[-115.13306427 57.62722778]
[-100.49960327 60.92295456]
[-85.86614227 64.21868134]
[-71.23268127 67.51441193]
[-56.50635147 70.36666107]
[-41.70059967 72.77282715]
[-26.89484596 75.17900085]
[-12.08909130 77.58516693]
[2.71666288 79.99134064]
[20.19013596 71.78930664]
[35.67689514 84.63467407]
[50.56752777 86.44272614]
[65.45816040 88.25077820]
[80.34879303 90.05883026]
[99.06811523 74.45515442]
[124.94118500 85.00643158]
[137.93156433 77.50643158]
[150.92195129 70.00643158]
[163.91233826 62.50643158]
[176.90270996 55.00643158]
[189.89309692 47.50643158]
[202.72981262 39.74636459]
[215.32629395 31.60213089]
[227.84013367 23.33147430]
[227.01914978 8.05819035]
[233.90777588 -5.48594379]
[246.56675720 -13.70887947]
[261.54177856 -14.48621368]
[274.80593872 -7.70918512]
[287.31976318 -15.97984123]
[299.83361816 -24.25049782]
[306.67266846 -39.15550995]
[323.02331543 -40.41561890]
[332.06542969 -26.73452759]
[324.49725342 -12.18617439]
[308.10427856 -11.73665619]
[295.59042358 -3.46599936]
[283.07659912 4.80465698]
[284.11221313 19.66376495]
[277.52737427 33.13579941]
[265.00054932 41.55868149]
[249.84010315 42.58723450]
[236.11079407 35.84531784]
[223.59695435 44.11597443]
[219.72859192 50.46415710]
[210.74679565 52.42421722]
[208.83467102 56.85759354]
[204.08628845 60.10994339]
[197.39309692 60.49681473]
[184.40270996 67.99681091]
[171.41233826 75.49681091]
[158.42195129 82.99681091]
[145.43156433 90.49681091]
[132.44119263 97.99681091]
[129.88606262 112.77758789]
[139.60479736 124.20327759]
[149.32351685 135.62895203]
[159.04225159 147.05464172]
[168.76098633 158.48033142]
[184.13014221 157.43373108]
[197.01792908 165.54287720]
[202.59359741 179.52056885]
[198.91352844 193.92872620]
[208.63226318 205.35441589]
[218.35099792 216.78010559]
[228.06973267 228.20578003]
[237.78845215 239.63146973]
[253.40914917 244.62405396]
[256.63092041 260.70361328]
[244.13949585 271.32888794]
[228.78497314 265.56948853]
[226.36277771 249.35020447]
[216.64404297 237.92451477]
[206.92530823 226.49884033]
[197.20657349 215.07315063]
[187.48785400 203.64746094]
[172.67594910 204.96864319]
[159.77365112 197.22299194]
[153.83686829 183.20129395]
[157.33529663 168.19906616]
[147.61656189 156.77337646]
[137.89784241 145.34768677]
[128.17910767 133.92201233]
[118.46037292 122.49632263]
[104.87568665 126.89302826]
[91.75384521 124.19521332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[21 68]
[22 67]
[23 58]
[24 57]
[27 54]
[28 53]
[29 52]
[30 51]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[91 115]
[92 113]
[93 112]
[98 107]
[99 106]
[100 105]
[124 153]
[125 152]
[126 151]
[127 150]
[128 149]
[132 145]
[133 144]
[134 143]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
