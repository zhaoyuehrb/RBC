%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGCUCUGUGGGCGGGUGGCUGUUGUUGGGGCCGUCGAGGCGGCGGCGACUCUGCGUCCCCGGCUCCUG\
) } def
/len { sequence length } bind def

/coor [
[77.82575989 319.31396484]
[74.46688080 303.62646484]
[84.74864960 291.31124878]
[84.74864960 276.31124878]
[84.74864960 261.31124878]
[84.74864960 246.31123352]
[84.74864960 231.31123352]
[84.74864960 216.31123352]
[76.32755280 207.36196899]
[76.38933563 194.66876221]
[85.45716095 185.21670532]
[82.50754547 178.18536377]
[86.46642303 169.60380554]
[87.75589752 154.65933228]
[89.04536438 139.71485901]
[90.33483887 124.77039337]
[91.62431335 109.82592010]
[91.94705200 94.82939148]
[91.30171967 79.84328461]
[90.65638733 64.85717010]
[82.33253479 51.40264893]
[89.51511383 38.35428619]
[88.86978149 23.36817551]
[88.22444916 8.38206291]
[87.57911682 -6.60404873]
[86.93378448 -21.59016037]
[86.28845215 -36.57627106]
[85.64311218 -51.56238556]
[84.99777985 -66.54849243]
[84.35244751 -81.53460693]
[72.98901367 -92.18871307]
[72.54803467 -107.39595795]
[82.77512360 -118.16360474]
[71.97304535 -130.02508545]
[74.65390778 -145.84255981]
[88.76118469 -153.48220825]
[103.47297668 -147.08355713]
[107.50366211 -131.55509949]
[97.76123810 -118.80893707]
[108.87611389 -108.96031952]
[109.74405670 -93.77146912]
[99.33856201 -82.17993927]
[99.98389435 -67.19383240]
[100.62922668 -52.20771790]
[101.27455902 -37.22160721]
[101.91989136 -22.23549461]
[102.56522369 -7.24938202]
[103.21056366 7.73672962]
[103.85589600 22.72284126]
[104.50122833 37.70895386]
[112.77892303 50.09156418]
[105.64249420 64.21183777]
[106.28783417 79.19794464]
[106.93316650 94.18405914]
[109.66738129 97.38442993]
[110.82298279 101.85259247]
[109.83708191 106.77751160]
[106.56878662 111.11539459]
[105.27931213 126.05986786]
[103.98983765 141.00433350]
[102.70037079 155.94880676]
[101.41089630 170.89328003]
[100.44326782 185.86204529]
[109.37665558 201.79876709]
[99.74864960 216.31123352]
[99.74864960 231.31123352]
[99.74864960 246.31123352]
[99.74864960 261.31124878]
[99.74864960 276.31124878]
[99.74864960 291.31124878]
[110.03041840 303.62646484]
[106.67153931 319.31396484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[11 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 54]
[19 53]
[20 52]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[33 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
