%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCAGGCUGAGGGCAGGUGGGAAGCAAACCCGGACGCAUCGCAGCAGCAGCAGCAGCAGCAGAAGCAGCAGCAGCAGCCUCCGCAGUCCCUCCAGAGAC\
) } def
/len { sequence length } bind def

/coor [
[-66.86434174 319.04888916]
[-78.77300262 311.58190918]
[-89.46016693 322.10733032]
[-100.14733887 332.63272095]
[-110.83451080 343.15814209]
[-121.52168274 353.68356323]
[-121.80914307 369.25775146]
[-132.79739380 379.77978516]
[-147.64321899 379.40975952]
[-158.33038330 389.93515015]
[-169.01756287 400.46057129]
[-176.05990601 415.88269043]
[-192.82884216 413.38482666]
[-195.07069397 396.57974243]
[-179.54296875 389.77340698]
[-168.85580444 379.24798584]
[-158.16864014 368.72256470]
[-158.31222534 353.87283325]
[-147.62385559 343.04632568]
[-132.04710388 342.99639893]
[-121.35992432 332.47097778]
[-110.67276001 321.94555664]
[-99.98558807 311.42013550]
[-89.29841614 300.89474487]
[-97.34207916 287.15844727]
[-101.61710358 271.81414795]
[-101.83522797 255.87635803]
[-97.97659302 240.40023804]
[-90.29144287 226.41181946]
[-79.28388214 214.83990479]
[-65.67881012 206.45439148]
[-50.37421417 201.81512451]
[-34.38185883 201.23446655]
[-18.76043129 204.75624084]
[-4.54543495 212.15254211]
[5.48018599 200.99517822]
[15.50580597 189.83779907]
[25.53142738 178.68043518]
[35.38573456 167.37147522]
[45.06643295 155.91354370]
[40.62653351 140.19122314]
[46.43328476 124.74430084]
[60.40752029 115.66007996]
[77.21136475 116.64206696]
[86.53813934 104.89424896]
[88.78166199 91.09358978]
[101.71404266 85.77897644]
[111.04081726 74.03115845]
[113.56179810 58.41209412]
[127.53518677 53.25518417]
[136.86195374 41.50736237]
[139.38293457 25.88829613]
[153.35632324 20.73138809]
[162.68310547 8.98356819]
[165.20408630 -6.63549805]
[179.17747498 -11.79240704]
[188.50424194 -23.54022789]
[186.89416504 -39.03362656]
[196.52020264 -50.81472397]
[211.30070496 -52.25419998]
[213.17301941 -68.54611969]
[228.32397461 -74.82147980]
[241.16760254 -64.62474060]
[238.49145508 -48.44541931]
[223.04852295 -42.92742538]
[224.99827576 -28.20553589]
[215.70695496 -16.15871239]
[200.25205994 -14.21345234]
[190.92529297 -2.46563244]
[189.07142639 12.31315136]
[174.43092346 18.31034279]
[165.10414124 30.05816269]
[163.25027466 44.83694839]
[148.60978699 50.83413696]
[139.28300476 62.58195877]
[137.42913818 77.36074066]
[122.78863525 83.35793304]
[113.46186066 95.10575104]
[111.21833801 108.90641022]
[98.28595734 114.22102356]
[88.95918274 125.96884155]
[93.64926147 139.03233337]
[91.24691772 152.59226990]
[82.49377441 163.08230591]
[69.78717041 167.79812622]
[56.52435684 165.59425354]
[46.84365845 177.05216980]
[43.61825562 185.78503418]
[36.68879700 188.70605469]
[26.66317749 199.86341858]
[16.63755608 211.02079773]
[6.61193657 222.17816162]
[14.62301445 233.84330750]
[19.79090881 247.00846863]
[21.85211945 260.99261475]
[20.70375633 275.07315063]
[16.40867805 288.52340698]
[9.19205666 300.64999390]
[-0.57042634 310.82861328]
[-12.37212944 318.53616333]
[-25.60174942 323.37771606]
[-39.57498169 325.10665894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[9 17]
[10 16]
[11 15]
[35 92]
[36 91]
[37 90]
[38 89]
[39 87]
[40 86]
[44 81]
[45 80]
[47 78]
[48 77]
[50 75]
[51 74]
[53 72]
[54 71]
[56 69]
[57 68]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
