%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCGGACAGGUCAGGCCAAGGUCUCAGCCACGUGACUGUGUUCCGGCUCGGUAAAGAUGGCGGCGCCCAGGGCGGUAGCGUGAAACUUGGUGGAAGACGCUGACCAGUCGUGUUGGAAUCAAAACAGCGGGGACCCUGCGCC\
) } def
/len { sequence length } bind def

/coor [
[307.21838379 419.18740845]
[318.08187866 404.99639893]
[310.91259766 391.82058716]
[303.74331665 378.64480591]
[296.57403564 365.46902466]
[289.40475464 352.29324341]
[281.67144775 339.44036865]
[273.38861084 326.93457031]
[265.10580444 314.42877197]
[251.62722778 308.09024048]
[250.45767212 292.31231689]
[242.17485046 279.80654907]
[233.89202881 267.30075073]
[225.60922241 254.79493713]
[217.32640076 242.28915405]
[209.04357910 229.78335571]
[199.70939636 218.04142761]
[189.39390564 207.15148926]
[179.07841492 196.26155090]
[168.76292419 185.37162781]
[158.44743347 174.48168945]
[148.13192749 163.59176636]
[135.28549194 165.04309082]
[123.78836823 158.71577454]
[117.97021484 146.73556519]
[120.16958618 133.40245056]
[110.09243774 122.29158783]
[100.01528931 111.18073273]
[89.81837463 100.17969513]
[79.50288391 89.28976440]
[62.04544449 89.15740967]
[50.28908539 76.71065521]
[51.11909103 59.94682693]
[40.57009506 49.28292847]
[30.02110100 38.61903381]
[17.10338402 37.75570679]
[8.53379154 28.59427643]
[8.53479958 16.45137215]
[-1.78069246 5.56143904]
[-12.09618473 -5.32849312]
[-27.20380020 -10.02641869]
[-30.33909416 -24.58729744]
[-40.65458679 -35.47723007]
[-55.76220322 -40.17515564]
[-58.89749527 -54.73603439]
[-69.21298981 -65.62596893]
[-79.52848053 -76.51589966]
[-94.63609314 -81.21382904]
[-97.77138519 -95.77470398]
[-108.20424652 -106.55225372]
[-118.75323486 -117.21614838]
[-134.55667114 -117.05111694]
[-145.78945923 -128.16865540]
[-145.78739929 -143.97294617]
[-134.55171204 -155.08757019]
[-118.74832916 -154.91842651]
[-107.75312042 -143.56585693]
[-108.08934021 -127.76514435]
[-97.54034424 -117.10124969]
[-90.54844666 -114.53902435]
[-86.88145447 -106.09019470]
[-72.51167297 -102.17119598]
[-68.63854218 -86.83139038]
[-58.32305527 -75.94145966]
[-48.00756073 -65.05152893]
[-33.63777924 -61.13252258]
[-29.76465225 -45.79272079]
[-19.44916153 -34.90279007]
[-5.07937765 -30.98378563]
[-1.20625186 -15.64398479]
[9.10923958 -4.75405264]
[19.42473221 6.13587952]
[36.46883392 10.18029118]
[40.68499756 28.07003784]
[51.23399353 38.73393250]
[61.78298950 49.39783096]
[74.59497833 47.66852570]
[86.22647858 53.74528503]
[92.30281067 65.59662628]
[90.39281464 78.97426605]
[100.70830536 89.86420441]
[108.15390778 93.11696625]
[111.12614441 101.10358429]
[121.20329285 112.21443939]
[131.28044128 123.32530212]
[148.73091125 123.83582306]
[160.21485901 136.53436279]
[159.02186584 153.27626038]
[169.33735657 164.16619873]
[179.65284729 175.05613708]
[189.96833801 185.94606018]
[200.28382874 196.83599854]
[210.59931946 207.72592163]
[210.61785889 192.72593689]
[219.31402588 180.50396729]
[233.47918701 175.56956482]
[247.88677979 179.74339294]
[257.22085571 191.48542786]
[258.03735352 206.46319580]
[250.03501892 219.15029907]
[236.16650391 224.86558533]
[221.54937744 221.50053406]
[229.83219910 234.00633240]
[238.11500549 246.51213074]
[246.39782715 259.01791382]
[254.68064880 271.52371216]
[262.96347046 284.02951050]
[277.03448486 291.26254272]
[277.61160278 306.14596558]
[285.89440918 318.65176392]
[294.17724609 331.15756226]
[298.29067993 333.01171875]
[301.26077271 335.82254028]
[302.92486572 339.09735107]
[303.30279541 342.34231567]
[302.58053589 345.12396240]
[309.74981689 358.29974365]
[316.91909790 371.47552490]
[324.08837891 384.65133667]
[331.25765991 397.82711792]
[343.67092896 395.98712158]
[356.02102661 398.06909180]
[367.10147095 403.85421753]
[375.83468628 412.76272583]
[381.37658691 423.91198730]
[383.19830322 436.20379639]
[381.13647461 448.43270874]
[375.40795898 459.40414429]
[366.58694458 468.05114746]
[372.88528442 481.66479492]
[379.18362427 495.27841187]
[385.48196411 508.89205933]
[391.78030396 522.50567627]
[403.91848755 534.34210205]
[395.90484619 549.28253174]
[379.32983398 545.71801758]
[378.16665649 528.80401611]
[371.86834717 515.19036865]
[365.57000732 501.57675171]
[359.27166748 487.96310425]
[352.97332764 474.34948730]
[335.36904907 474.76757812]
[319.28463745 467.47186279]
[307.93551636 453.87069702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 117]
[6 116]
[7 111]
[8 110]
[9 109]
[11 107]
[12 106]
[13 105]
[14 104]
[15 103]
[16 102]
[17 93]
[18 92]
[19 91]
[20 90]
[21 89]
[22 88]
[26 85]
[27 84]
[28 83]
[29 81]
[30 80]
[33 76]
[34 75]
[35 74]
[38 72]
[39 71]
[40 70]
[42 68]
[43 67]
[45 65]
[46 64]
[47 63]
[49 61]
[50 59]
[51 58]
[129 141]
[130 140]
[131 139]
[132 138]
[133 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
