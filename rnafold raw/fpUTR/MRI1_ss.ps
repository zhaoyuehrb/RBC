%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCCCCGCCCCGCUCCCAAGUGCGCGCGGACCCCUAGCUCCCUCUGAGUUGCGCUGGGCUUGGCUGCUGCACC\
) } def
/len { sequence length } bind def

/coor [
[59.73724747 289.49343872]
[51.24084473 290.41363525]
[42.86637878 288.85357666]
[34.66215897 301.41107178]
[26.45793533 313.96856689]
[22.85654259 330.53558350]
[5.93999958 331.66116333]
[0.17546038 315.71731567]
[13.90043736 305.76434326]
[22.10466003 293.20684814]
[30.30888176 280.64935303]
[22.52986526 259.68820190]
[31.85332680 239.10295105]
[53.18816757 230.95338440]
[57.46821213 216.57698059]
[50.17537689 203.64059448]
[54.31115341 188.99989319]
[67.92947388 181.43820190]
[72.20951843 167.06179810]
[76.48956299 152.68537903]
[80.76960754 138.30897522]
[85.04965210 123.93255615]
[89.32969666 109.55614471]
[86.27153778 95.91285706]
[96.29389191 86.16381073]
[100.27590942 71.70201111]
[103.95819092 57.16100693]
[107.64047241 42.62000275]
[111.32275391 28.07900047]
[115.00503540 13.53799629]
[101.46619415 19.99553680]
[86.66322327 17.57232475]
[75.89004517 7.13496113]
[72.99942017 -7.58388090]
[79.02512360 -21.32036209]
[91.81219482 -29.16196251]
[106.78765869 -28.30432129]
[118.59589386 -19.05415535]
[123.01397705 -4.72054386]
[131.21820068 -17.27803993]
[139.42242432 -29.83553886]
[147.62664795 -42.39303589]
[145.75488281 -58.32652283]
[157.14706421 -69.62243652]
[173.06410217 -67.61550903]
[181.29577637 -53.84529114]
[175.52748108 -38.87511063]
[160.18414307 -34.18881226]
[151.97991943 -21.63131523]
[143.77569580 -9.07381821]
[135.57147217 3.48367858]
[129.54603577 17.22027779]
[125.86376190 31.76128197]
[122.18147278 46.30228806]
[118.49919128 60.84329224]
[114.81690979 75.38429260]
[116.27040100 82.85488129]
[110.67030334 90.44385529]
[113.72846222 104.08714294]
[103.70610809 113.83618927]
[99.42606354 128.21260071]
[95.14601898 142.58901978]
[90.86597443 156.96542358]
[86.58592987 171.34184265]
[82.30588531 185.71824646]
[89.57084656 199.49716187]
[85.02547455 214.01591492]
[71.84462738 220.85702515]
[67.56458282 235.23342896]
[74.28504181 240.86257935]
[79.08503723 248.16529846]
[81.57128906 256.51440430]
[81.54845428 265.19821167]
[79.03431702 273.48138428]
[74.25698853 280.66696167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[14 69]
[15 68]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[25 58]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
