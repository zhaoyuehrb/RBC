%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCCCGCCCCGAGACCGGGCCCGGGGGCGCGGGGCGGCGGGAUGCGGCGCCCGGGGCGGCGAUGACCGCGGAGCGCACGCCGCGGGCCCGGCCCUGACCCCGCCGCCCGCCCGCUGAGCCCCCCGCCGAGGUCCGGACAGGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[94.16547394 540.66070557]
[79.05705261 542.57263184]
[64.47904968 538.16784668]
[52.95719910 528.20959473]
[46.48773193 514.42315674]
[46.19152069 499.19714355]
[52.11988449 485.16949463]
[63.24570084 474.77066040]
[77.64134979 469.80224609]
[78.89652252 454.85485840]
[80.15168762 439.90747070]
[80.93672943 424.92800903]
[81.25086212 409.93130493]
[81.56500244 394.93460083]
[78.54061127 388.13638306]
[82.04602814 379.62799072]
[82.67416382 364.64114380]
[83.30229950 349.65432739]
[83.93043518 334.66748047]
[74.96149445 319.61639404]
[84.87084961 304.13223267]
[85.18498230 289.13552856]
[85.49912262 274.13882446]
[77.33644867 265.15545654]
[77.51554871 252.61705017]
[86.48775482 243.29080200]
[87.11588287 228.30395508]
[87.74401855 213.31710815]
[88.37215424 198.33027649]
[89.00028992 183.34342957]
[89.62842560 168.35658264]
[82.43087769 155.31648254]
[90.73928070 141.85241699]
[91.36741638 126.86557007]
[91.99555206 111.87873077]
[85.68862152 99.40017700]
[93.01760864 87.49314117]
[90.23644257 78.72127533]
[93.81909180 72.19997406]
[94.76094818 57.22957230]
[95.70280457 42.25917053]
[96.64466095 27.28876877]
[97.58651733 12.31836796]
[98.52838135 -2.65203285]
[88.35437775 -14.44726372]
[89.52281189 -29.61596107]
[100.83045959 -39.24262619]
[101.77232361 -54.21302795]
[102.71417999 -69.18342590]
[103.65603638 -84.15383148]
[101.05918884 -92.98200989]
[104.77761841 -99.42685699]
[94.85286713 -111.43257141]
[96.33872223 -126.57347107]
[107.84548950 -135.96121216]
[109.10066223 -150.90859985]
[110.35582733 -165.85600281]
[111.61099243 -180.80339050]
[112.86616516 -195.75077820]
[114.12133026 -210.69818115]
[115.06318665 -225.66857910]
[115.69132233 -240.65542603]
[116.31945801 -255.64225769]
[103.47834015 -247.88948059]
[89.33755493 -252.89331055]
[84.23057556 -266.99716187]
[91.88935852 -279.89456177]
[106.71719360 -282.16067505]
[117.87883759 -272.13879395]
[120.07008362 -286.97787476]
[122.26132965 -301.81698608]
[124.45257568 -316.65606689]
[126.64382172 -331.49514771]
[128.83506775 -346.33422852]
[117.65473938 -357.09432983]
[114.96744537 -372.37695312]
[121.80650330 -386.30557251]
[135.54216003 -393.52438354]
[150.89277649 -391.25759888]
[161.95571899 -380.37686157]
[164.47706604 -365.06600952]
[157.48731995 -351.21237183]
[143.67414856 -344.14297485]
[141.48291016 -329.30389404]
[139.29165649 -314.46481323]
[137.10041809 -299.62573242]
[134.90916443 -284.78665161]
[132.71792603 -269.94757080]
[131.30630493 -255.01412964]
[130.67816162 -240.02728271]
[130.05003357 -225.04045105]
[132.61198425 -220.93858337]
[132.57846069 -215.17208862]
[129.06872559 -209.44300842]
[127.81356049 -194.49562073]
[126.55838776 -179.54821777]
[125.30322266 -164.60083008]
[124.04805756 -149.65344238]
[122.79288483 -134.70603943]
[132.57293701 -123.53079987]
[131.51295471 -108.35413361]
[119.72501373 -98.17169189]
[118.62643433 -83.21197510]
[117.68457794 -68.24156952]
[116.74272156 -53.27116776]
[115.80086517 -38.30076981]
[125.81280518 -27.33278847]
[125.07089233 -12.13725662]
[113.49877930 -1.71017504]
[112.55692291 13.26022625]
[111.61506653 28.23062706]
[110.67320251 43.20102692]
[109.73134613 58.17142868]
[108.78948975 73.14183044]
[108.00444794 88.12126923]
[114.31137848 100.59982300]
[106.98239136 112.50685883]
[106.35425568 127.49370575]
[105.72612000 142.48054504]
[112.87874603 156.59262085]
[104.61526489 168.98472595]
[103.98713684 183.97155762]
[103.35900116 198.95840454]
[102.73086548 213.94525146]
[102.10272980 228.93209839]
[101.47459412 243.91893005]
[110.39214325 259.99472046]
[100.49583435 274.45297241]
[100.18169403 289.44967651]
[99.86756134 304.44638062]
[108.23645782 314.31759644]
[107.62791443 326.84249878]
[98.91727448 335.29559326]
[98.28913879 350.28244019]
[97.66100311 365.26928711]
[97.03286743 380.25613403]
[96.56170654 395.24871826]
[96.24757385 410.24545288]
[95.93343353 425.24215698]
[98.51993561 429.92855835]
[98.95962524 434.65963745]
[97.60586548 438.59478760]
[95.09908295 441.16262817]
[93.84391022 456.11001587]
[92.58874512 471.05740356]
[105.95422363 478.35699463]
[115.19003296 490.46566772]
[118.69600677 505.28552246]
[115.86471558 520.24890137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 145]
[10 144]
[11 143]
[12 139]
[13 138]
[14 137]
[16 136]
[17 135]
[18 134]
[19 133]
[21 130]
[22 129]
[23 128]
[26 126]
[27 125]
[28 124]
[29 123]
[30 122]
[31 121]
[33 119]
[34 118]
[35 117]
[37 115]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[47 106]
[48 105]
[49 104]
[50 103]
[52 102]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[61 91]
[62 90]
[63 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
