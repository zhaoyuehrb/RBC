%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAGGAGUCACGUAGCUCUGCGACAUCCGCAGCCUCAUUUACCAGAGGGAGCCAGGGCUGCAGCCUCAUCUGUUUGCGGAUCAGAACCCGAGCUGUGCUUGUGGCUGCGGCUGCUAACUGGCUGCGCACAGGGAGCUGUCACC\
) } def
/len { sequence length } bind def

/coor [
[79.61063385 258.02688599]
[72.79846954 244.66255188]
[67.73561859 258.78231812]
[62.82498169 272.95571899]
[58.06711197 287.18115234]
[61.86692429 303.13400269]
[49.76697540 314.20300293]
[34.21465683 309.00134277]
[31.20885658 292.88000488]
[43.84169006 282.42327881]
[48.59955978 268.19784546]
[47.73203278 260.80319214]
[53.61586380 253.71946716]
[58.67870712 239.59970093]
[62.66481400 225.13903809]
[65.55158997 210.41943359]
[68.43836212 195.69984436]
[71.32513428 180.98023987]
[74.21190643 166.26065063]
[77.09867859 151.54104614]
[79.98545837 136.82145691]
[68.30123138 127.41513062]
[54.53747559 133.37826538]
[40.77372360 139.34141541]
[33.56091690 153.67163086]
[17.83102989 156.82601929]
[5.65068483 146.38481140]
[6.36359978 130.35760498]
[19.42288780 121.03910828]
[34.81058121 125.57765961]
[48.57433319 119.61451721]
[62.33808899 113.65137482]
[62.78993607 108.29524994]
[63.96228409 103.28652954]
[65.77296448 98.71749878]
[51.27024841 94.88719940]
[36.76753235 91.05690002]
[22.26481628 87.22660065]
[10.32645702 97.13897705]
[-5.16036463 98.10746765]
[-18.24065018 89.75966644]
[-23.88476372 75.30548096]
[-19.92242813 60.30282593]
[-7.87724066 50.52054214]
[7.61917591 49.72011185]
[20.60813522 58.20931244]
[26.09511566 72.72388458]
[40.59783173 76.55418396]
[55.10055161 80.38448334]
[69.60326385 84.21478271]
[89.13586426 67.51761627]
[114.78351593 69.10368347]
[124.06358337 57.31893921]
[133.34365845 45.53419113]
[142.62373352 33.74944305]
[151.90379333 21.96469498]
[161.18386841 10.17994595]
[169.81686401 -2.08672929]
[177.77781677 -14.79984283]
[185.73876953 -27.51295662]
[193.69972229 -40.22607040]
[201.66067505 -52.93918610]
[209.62162781 -65.65229797]
[217.58258057 -78.36540985]
[225.54351807 -91.07852936]
[233.50447083 -103.79164124]
[241.46542358 -116.50475311]
[242.23191833 -132.30738831]
[255.54434204 -138.98785400]
[263.50527954 -151.70095825]
[255.58479309 -169.03982544]
[259.59780884 -187.52275085]
[273.77078247 -199.82098389]
[292.33816528 -201.16743469]
[299.46243286 -214.36763000]
[306.58670044 -227.56781006]
[313.71096802 -240.76799011]
[320.83523560 -253.96817017]
[322.17547607 -263.07873535]
[328.25744629 -267.37332153]
[335.66406250 -280.41714478]
[330.04122925 -295.00885010]
[335.16213989 -309.78417969]
[348.60882568 -317.76669312]
[364.03219604 -315.18725586]
[374.14981079 -303.26385498]
[374.18444824 -287.62631226]
[364.11972046 -275.65820312]
[348.70791626 -273.01052856]
[341.30126953 -259.96667480]
[334.03540039 -246.84390259]
[326.91113281 -233.64372253]
[319.78686523 -220.44354248]
[312.66259766 -207.24336243]
[305.53833008 -194.04316711]
[312.24304199 -184.97557068]
[315.05917358 -174.00244141]
[313.53591919 -162.72456360]
[307.85836792 -152.80221558]
[298.82608032 -145.71086121]
[287.74072266 -142.52169800]
[276.21841431 -143.74000549]
[268.25744629 -131.02690125]
[268.06039429 -116.13359833]
[254.17854309 -108.54380035]
[246.21759033 -95.83068848]
[238.25663757 -83.11757660]
[230.29568481 -70.40446472]
[222.33473206 -57.69134903]
[214.37377930 -44.97823334]
[206.41284180 -32.26512146]
[198.45188904 -19.55200577]
[190.49093628 -6.83889246]
[182.52998352 5.87422132]
[197.52595520 5.52674198]
[207.31547546 16.89183235]
[204.75039673 31.67088318]
[191.70367432 39.07246399]
[177.70185852 33.69205475]
[172.96861267 19.46001816]
[163.68855286 31.24476433]
[154.40847778 43.02951431]
[145.12840271 54.81426239]
[135.84832764 66.59900665]
[126.56826019 78.38375854]
[131.89428711 85.83958435]
[135.12837219 94.59429932]
[135.95866394 104.06115723]
[134.23771667 113.58029175]
[129.99906921 122.46469116]
[123.46092224 130.04971313]
[115.01639557 135.74261475]
[105.21045685 139.06837463]
[94.70505524 139.70822144]
[91.81828308 154.42782593]
[88.93150330 169.14741516]
[86.04473114 183.86701965]
[83.15795898 198.58660889]
[80.27118683 213.30621338]
[77.38440704 228.02580261]
[90.08156586 220.03942871]
[104.96527863 221.90361023]
[115.30053711 232.77478027]
[116.41056061 247.73364258]
[107.79303741 260.01119995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 11]
[5 10]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 32]
[23 31]
[24 30]
[35 50]
[36 49]
[37 48]
[38 47]
[52 125]
[53 124]
[54 123]
[55 122]
[56 121]
[57 120]
[58 114]
[59 113]
[60 112]
[61 111]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 105]
[69 103]
[70 102]
[74 95]
[75 94]
[76 93]
[77 92]
[78 91]
[80 90]
[81 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
