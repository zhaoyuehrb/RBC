%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUGAGGCUGGCUGGCUGGAGGUUGACACAGGAGUGCUCAGGGGAGCAGCAUCACAAGAGGGCAGAUCGAAAGCAUCGUCCUUGCUGAAAAACAG\
) } def
/len { sequence length } bind def

/coor [
[72.43874359 136.87849426]
[64.64627075 129.49169922]
[58.77668381 120.50084686]
[55.14923477 110.39495850]
[40.18005371 111.35601044]
[25.21087265 112.31706238]
[10.24169159 113.27811432]
[-4.72748947 114.23916626]
[-19.67934418 115.44002533]
[-34.61003113 116.88037109]
[-49.54071808 118.32071686]
[-58.43251038 127.83222961]
[-71.02439880 128.62979126]
[-80.42371368 120.83049011]
[-95.39289856 121.79154205]
[-110.36207581 122.75259399]
[-116.33046722 126.25044250]
[-122.25001526 126.08535004]
[-126.31542206 123.26418304]
[-141.31542969 123.26418304]
[-150.32684326 135.89643860]
[-165.05293274 140.78744507]
[-179.83122253 136.05648804]
[-188.97914124 123.52272797]
[-188.97914124 108.00564575]
[-179.83122253 95.47189331]
[-165.05293274 90.74093628]
[-150.32684326 95.63192749]
[-141.31542969 108.26418304]
[-126.31542206 108.26418304]
[-111.32312775 107.78341675]
[-96.35395050 106.82235718]
[-81.38477325 105.86130524]
[-67.44324493 95.33621979]
[-50.98106384 103.39002991]
[-36.05037689 101.94968414]
[-21.11968994 100.50933838]
[-14.64342594 96.66185760]
[-5.68854284 99.26998901]
[9.28063774 98.30893707]
[24.24981880 97.34788513]
[39.21899796 96.38682556]
[54.18817902 95.42577362]
[60.30401993 76.67885590]
[73.70211029 62.21022034]
[91.92456818 54.67413712]
[111.62846375 55.45311356]
[129.19911194 64.40424347]
[141.41316223 79.88542938]
[155.79318237 75.61751556]
[170.17320251 71.34960175]
[184.55322266 67.08168793]
[198.93324280 62.81377792]
[186.42257690 54.53831482]
[181.90158081 40.23584747]
[187.38279724 26.27317238]
[200.42623901 18.86582947]
[215.22555542 21.31122780]
[225.19279480 32.52078629]
[225.89097595 47.50452805]
[217.00755310 59.59358597]
[231.97673035 58.63253403]
[246.94592285 57.67148209]
[261.91510010 56.71042633]
[276.88427734 55.74937439]
[285.43212891 52.01752853]
[292.34722900 55.00525665]
[307.33950806 54.52448273]
[322.33181763 54.04370880]
[337.31445312 53.32270432]
[350.65457153 43.78469849]
[365.47082520 50.81399155]
[366.52151489 67.17944336]
[352.72579956 76.04568481]
[338.27551270 68.29188538]
[331.67926025 71.92980957]
[322.81259155 69.03600311]
[307.82028198 69.51677704]
[292.82800293 69.99755096]
[277.84533691 70.71855164]
[262.87615967 71.67961121]
[247.90696716 72.64066315]
[232.93778992 73.60171509]
[217.96861267 74.56276703]
[203.20115662 77.19379425]
[188.82113647 81.46170807]
[174.44111633 85.72962189]
[160.06109619 89.99753571]
[145.68107605 94.26544952]
[145.76705933 105.00230408]
[143.36375427 115.46707916]
[138.60191345 125.09060669]
[131.74050903 133.34945679]
[123.15274811 139.79443359]
[113.30570984 144.07498169]
[102.73497009 145.95831299]
[92.01548004 145.34196472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 37]
[10 36]
[11 35]
[14 33]
[15 32]
[16 31]
[19 30]
[20 29]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[61 84]
[62 83]
[63 82]
[64 81]
[65 80]
[67 79]
[68 78]
[69 77]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
