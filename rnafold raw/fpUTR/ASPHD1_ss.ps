%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGGUGGGAGAGAGAAGCAGAGCGAGAGAGAGGAGGCUGCUGGAAGGAGAAAGAAGAGGGUGAGGAGGCGACAGAGGGAGAGGAGGAAGAAGAGGUAGAAGGAGAGAGAAAGGGGAGAGAAAGGAGAGAGGAGGGUUGGAGGUGC\
) } def
/len { sequence length } bind def

/coor [
[338.06579590 254.02783203]
[324.51455688 247.58865356]
[311.30981445 240.46592712]
[298.48599243 232.67823792]
[286.07653809 224.24592590]
[274.11380005 215.19097900]
[262.62905884 205.53701782]
[251.65220642 195.30923462]
[241.21192932 184.53430176]
[231.33543396 173.24034119]
[222.04850769 161.45680237]
[213.37538147 149.21444702]
[205.33865356 136.54521179]
[197.95932007 123.48213196]
[191.25662231 110.05929565]
[185.24803162 96.31172943]
[179.94924927 82.27529144]
[165.66372681 86.84953308]
[151.37820435 91.42376709]
[137.09266663 95.99800110]
[122.80713654 100.57224274]
[115.31716919 116.90791321]
[98.32324982 122.75261688]
[82.36972046 114.47985077]
[78.27552795 129.44705200]
[66.14472961 139.12298584]
[50.64187241 139.78703308]
[37.72811127 131.18386841]
[32.36905670 116.62158203]
[36.62537384 101.69966888]
[48.86041641 92.15591431]
[64.36956787 91.66007996]
[77.18923950 100.40282440]
[79.81909943 89.35930634]
[87.44580841 80.95045471]
[98.18096924 77.25831604]
[109.36652374 79.19708252]
[118.23290253 86.28671265]
[132.51843262 81.71247101]
[146.80395508 77.13823700]
[161.08949280 72.56400299]
[175.37501526 67.98976135]
[171.53526306 53.48614883]
[168.44107056 38.80539322]
[166.10052490 23.98579407]
[164.51972961 9.06601810]
[163.70281982 -5.91501188]
[163.65190125 -20.91821289]
[164.36714172 -35.90444183]
[165.84663391 -50.83460236]
[168.08656311 -65.66974640]
[171.08105469 -80.37116241]
[174.82229614 -94.90049744]
[179.30055237 -109.21985626]
[184.50410461 -123.29187012]
[190.41940308 -137.07983398]
[197.03100586 -150.54776001]
[204.32167053 -163.66053772]
[212.27236938 -176.38394165]
[220.86236572 -188.68478394]
[230.06924438 -200.53096008]
[239.86898804 -211.89158630]
[250.23603821 -222.73699951]
[261.14331055 -233.03892517]
[272.56240845 -242.77047729]
[284.46350098 -251.90626526]
[296.81555176 -260.42245483]
[309.58633423 -268.29684448]
[322.74252319 -275.50885010]
[336.24978638 -282.03970337]
[350.07293701 -287.87237549]
[364.17584229 -292.99157715]
[378.52175903 -297.38400269]
[393.07324219 -301.03820801]
[407.79229736 -303.94461060]
[422.64059448 -306.09567261]
[437.57934570 -307.48577881]
[452.56958008 -308.11126709]
[467.57220459 -307.97052002]
[482.54809570 -307.06393433]
[497.45812988 -305.39385986]
[512.26342773 -302.96463013]
[526.92541504 -299.78259277]
[541.40576172 -295.85604858]
[555.66674805 -291.19528198]
[569.67114258 -285.81240845]
[583.38244629 -279.72146606]
[596.76483154 -272.93835449]
[609.78338623 -265.48080444]
[622.40423584 -257.36822510]
[634.59436035 -248.62182617]
[646.32196045 -239.26438904]
[657.55645752 -229.32032776]
[668.26855469 -218.81559753]
[678.43035889 -207.77761841]
[688.01525879 -196.23515320]
[696.99829102 -184.21833801]
[705.35601807 -171.75851440]
[713.06658936 -158.88819885]
[720.10998535 -145.64097595]
[726.46777344 -132.05137634]
[732.12341309 -118.15486908]
[737.06207275 -103.98771667]
[741.27087402 -89.58686829]
[744.73889160 -74.98990631]
[747.45709229 -60.23489761]
[749.41833496 -45.36034775]
[750.61749268 -30.40506172]
[751.05145264 -15.40805149]
[750.71911621 -0.40844619]
[749.62127686 14.55462265]
[747.76086426 29.44211960]
[745.14276123 44.21520233]
[741.77368164 58.83532715]
[737.66253662 73.26435852]
[732.81994629 87.46464539]
[727.25860596 101.39914703]
[720.99304199 115.03150940]
[714.03961182 128.32615662]
[706.41632080 141.24842834]
[698.14324951 153.76458740]
[689.24182129 165.84197998]
[679.73535156 177.44911194]
[669.64862061 188.55569458]
[659.00793457 199.13275146]
[647.84100342 209.15269470]
[636.17706299 218.58938599]
[624.04650879 227.41818237]
[611.48095703 235.61607361]
[598.51318359 243.16166687]
[585.17706299 250.03527832]
[571.50738525 256.21896362]
[557.53973389 261.69659424]
[543.31066895 266.45388794]
[528.85723877 270.47845459]
[514.21716309 273.75973511]
[499.42864990 276.28921509]
[484.53027344 278.06030273]
[469.56088257 279.06832886]
[454.55953979 279.31069946]
[439.56539917 278.78677368]
[424.61758423 277.49792480]
[409.75506592 275.44754028]
[395.01663208 272.64089966]
[380.44073486 269.08538818]
[366.06539917 264.79025269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[24 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
