%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGACGGUUGAGAGCACACAAGCCGCUUUAGGAGCGAGGUUCGGAGCCAUCGCUGCUGCCUGCUGAUCCGCGCCUAGAGUUUGACCAGCCACUCUCCAGCUCGGCUUUCGCGGCGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[190.47354126 272.99349976]
[193.76115417 257.76754761]
[185.76908875 245.07397461]
[177.77702332 232.38040161]
[169.78497314 219.68682861]
[161.79290771 206.99324036]
[145.87400818 199.72619629]
[145.17762756 181.37930298]
[136.86399841 168.89396667]
[128.55035400 156.40863037]
[120.23672485 143.92330933]
[111.92309570 131.43797302]
[102.22800446 133.54910278]
[92.33888245 132.73855591]
[83.11694336 129.07693481]
[75.36528015 122.88311768]
[62.37490082 130.38311768]
[58.52705765 145.71183777]
[44.92445374 153.75823975]
[29.63727379 149.74855042]
[21.73512840 136.06163025]
[25.90622330 120.81770325]
[39.67591858 113.06070709]
[54.87490082 117.39273071]
[67.86528015 109.89273071]
[68.35604858 88.63485718]
[81.50259399 71.92239380]
[76.25247192 57.87119293]
[71.00234985 43.81999207]
[65.75222778 29.76879120]
[60.50210953 15.71759033]
[55.25199127 1.66639006]
[50.00186920 -12.38481045]
[44.75175095 -26.43601036]
[32.67368698 -36.65515900]
[35.46693039 -51.28550720]
[30.21681213 -65.33670807]
[24.96669197 -79.38790894]
[18.48310280 -92.91429138]
[10.81782246 -105.80783844]
[3.15254188 -118.70137787]
[-4.51273823 -131.59492493]
[-16.86532211 -135.56254578]
[-22.96486664 -146.55546570]
[-19.99003410 -158.35563660]
[-33.48649216 -166.61131287]
[-32.95929718 -181.49658203]
[-40.29279327 -194.58168030]
[-47.62628937 -207.66677856]
[-61.99132919 -215.57739258]
[-62.05249023 -231.97642517]
[-47.74685669 -239.99395752]
[-33.79084015 -231.38224792]
[-34.54119110 -215.00027466]
[-27.20769310 -201.91517639]
[-19.87419701 -188.83007812]
[-6.90227985 -181.51033020]
[-6.90493488 -165.68913269]
[8.62213421 -157.61872864]
[8.38080597 -139.26020813]
[16.04608536 -126.36666107]
[23.71136665 -113.47311401]
[31.37664604 -100.57957458]
[35.82649231 -114.90433502]
[48.32579803 -123.19694519]
[63.25372314 -121.72827911]
[73.89730072 -111.15879059]
[75.47020721 -96.24148560]
[67.26510620 -83.68456268]
[52.97177124 -79.13476562]
[39.01789093 -84.63803101]
[44.26801300 -70.58683014]
[49.51813126 -56.53562546]
[61.22066879 -47.32151413]
[58.80295181 -31.68613052]
[64.05307007 -17.63493156]
[69.30319214 -3.58372998]
[74.55331421 10.46747017]
[79.80342865 24.51867104]
[85.05355072 38.56987000]
[90.30367279 52.62107086]
[95.55379486 66.67227173]
[109.21679688 67.66493225]
[121.34982300 74.02517700]
[129.93879700 84.69722748]
[133.55795288 97.90953064]
[131.60652161 111.46884155]
[124.40842438 123.12433624]
[132.72206116 135.60966492]
[141.03569031 148.09500122]
[149.34931946 160.58033752]
[157.66296387 173.06565857]
[170.20201111 176.39738464]
[176.85490417 187.06451416]
[174.48648071 199.00117493]
[182.47854614 211.69476318]
[190.47061157 224.38833618]
[198.46267700 237.08190918]
[206.45474243 249.77549744]
[221.60589600 253.39210510]
[229.53016663 266.37905884]
[225.98890686 280.80108643]
[233.98097229 293.49465942]
[241.97303772 306.18823242]
[249.96508789 318.88180542]
[257.95715332 331.57540894]
[265.94921875 344.26898193]
[281.37652588 344.30941772]
[294.32052612 352.70327759]
[300.65081787 366.77206421]
[298.34741211 382.02651978]
[288.14535522 393.59896851]
[273.30007935 397.79669189]
[258.54861450 393.28021240]
[248.59815979 381.49075317]
[246.62384033 366.19024658]
[253.25564575 352.26104736]
[245.26358032 339.56747437]
[237.27151489 326.87387085]
[229.27944946 314.18029785]
[221.28738403 301.48672485]
[213.29533386 288.79315186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[8 92]
[9 91]
[10 90]
[11 89]
[12 88]
[16 25]
[17 24]
[27 82]
[28 81]
[29 80]
[30 79]
[31 78]
[32 77]
[33 76]
[34 75]
[36 73]
[37 72]
[38 71]
[39 63]
[40 62]
[41 61]
[42 60]
[45 58]
[47 56]
[48 55]
[49 54]
[102 122]
[103 121]
[104 120]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
