%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAACUCGGUGGUGGCCACUGCGCAGACCAGACUUCGCUCGUACUCGUGCGCCUCGCUUCGCUUUUCCUCCGCAACC\
) } def
/len { sequence length } bind def

/coor [
[58.44864273 393.90390015]
[43.53342819 396.83728027]
[28.63199043 393.83468628]
[16.01669121 385.35397339]
[7.61127281 372.68835449]
[4.69749928 357.76928711]
[7.71970034 342.87182617]
[16.21701241 330.26770020]
[28.89365578 321.87893677]
[43.81653595 318.98480225]
[46.77944565 304.28033447]
[49.74235916 289.57586670]
[52.70526886 274.87142944]
[47.63439941 260.86657715]
[57.94516754 248.86663818]
[60.90807724 234.16217041]
[49.99173737 225.71759033]
[43.80146790 213.30776978]
[43.61993027 199.37417603]
[49.54120636 186.68640137]
[60.44054794 177.79154968]
[74.18758392 174.50308228]
[77.73274994 159.92803955]
[81.27792358 145.35299683]
[76.76784515 131.15763855]
[87.54753113 119.57709503]
[91.09269714 105.00205994]
[89.77163696 96.80883026]
[95.07941437 89.92373657]
[91.43208313 74.52868652]
[102.36883545 64.41746521]
[106.49065399 49.99489212]
[100.57391357 42.04034805]
[99.17245483 32.36791229]
[102.49158478 23.32465363]
[109.60723114 17.04124451]
[118.71836090 14.93014622]
[124.52742767 1.10065877]
[130.33648682 -12.72882938]
[128.54737854 -28.44854927]
[140.60980225 -37.18622589]
[146.41886902 -51.01571655]
[143.82351685 -67.20819092]
[156.71788025 -77.34069061]
[171.83734131 -70.98977661]
[173.62829590 -54.68871689]
[160.24836731 -45.20664597]
[154.43930054 -31.37715912]
[156.64392090 -16.64661598]
[144.16598511 -6.91976166]
[138.35691833 6.90972614]
[132.54785156 20.73921394]
[137.33459473 40.64968491]
[120.91322327 54.11670685]
[116.79140472 68.53928375]
[120.73355865 82.90273285]
[109.50199127 94.04554749]
[105.66773987 108.54722595]
[102.12257385 123.12226105]
[106.37907410 138.36013794]
[95.85295868 148.89816284]
[92.30779266 163.47320557]
[88.76262665 178.04824829]
[100.77385712 189.22143555]
[105.56037903 204.81497192]
[101.92800903 220.62165833]
[90.94100189 232.42526245]
[75.61254120 237.12507629]
[72.64962769 251.82954407]
[77.50856781 266.88613892]
[67.40972900 277.83432007]
[64.44681549 292.53878784]
[61.48390961 307.24325562]
[58.52099609 321.94772339]
[71.15856171 330.39520264]
[79.59727478 343.03866577]
[82.55029297 357.94998169]
[79.56729126 372.85537720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 74]
[11 73]
[12 72]
[13 71]
[15 69]
[16 68]
[22 63]
[23 62]
[24 61]
[26 59]
[27 58]
[29 57]
[31 55]
[32 54]
[37 52]
[38 51]
[39 50]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
