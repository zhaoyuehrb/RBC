%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGGCCGUGCUGUUCCCGCCAAUUCCUGUGGUAAUCCUUACCGUGGCGAGUUCCGCGCUCA\
) } def
/len { sequence length } bind def

/coor [
[83.36524200 250.90406799]
[69.00286102 255.96784973]
[53.82306671 254.74566650]
[40.45584869 247.44926453]
[31.21716309 235.34280396]
[27.70766258 220.52378845]
[30.53539276 205.55969238]
[39.21043015 193.04316711]
[52.22977448 185.14274597]
[67.33774567 183.22724915]
[71.62693024 168.85356140]
[75.91611481 154.47987366]
[80.20529938 140.10618591]
[76.43037415 125.69787598]
[87.79071045 114.68637085]
[80.99507904 101.88927460]
[85.13829803 88.00474548]
[97.83560181 81.02444458]
[94.36746979 65.58804321]
[105.42101288 55.60463333]
[109.71019745 41.23094559]
[113.99938202 26.85725784]
[118.28856659 12.48357105]
[122.57775116 -1.89011669]
[108.33900452 2.82771635]
[94.25584412 -2.33606434]
[86.44165039 -15.13990784]
[88.28849792 -30.02577782]
[98.99468231 -40.53185272]
[113.91274261 -42.09753799]
[126.56688690 -34.04318237]
[131.46406555 -19.86411476]
[140.28083801 -31.99936867]
[149.09761047 -44.13462448]
[157.91439819 -56.26987839]
[166.73117065 -68.40513611]
[175.54795837 -80.54039001]
[179.96636963 -96.90846252]
[196.91792297 -97.19385529]
[201.88481140 -80.98378754]
[187.68321228 -71.72360992]
[178.86642456 -59.58835602]
[170.04965210 -47.45310211]
[161.23287964 -35.31784439]
[152.41609192 -23.18259048]
[143.59931946 -11.04733562]
[136.95144653 2.39906836]
[132.66226196 16.77275658]
[128.37307739 31.14644241]
[124.08388519 45.52013016]
[119.79470062 59.89381790]
[123.56962585 74.30212402]
[112.20928955 85.31362915]
[119.00492096 98.11072540]
[114.86170197 111.99525452]
[102.16439819 118.97555542]
[105.63253021 134.41195679]
[94.57898712 144.39537048]
[90.28980255 158.76905823]
[86.00061798 173.14274597]
[81.71143341 187.51643372]
[93.29907227 197.39804077]
[99.85984039 211.14128113]
[100.25703430 226.36500549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 61]
[11 60]
[12 59]
[13 58]
[15 56]
[18 53]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
