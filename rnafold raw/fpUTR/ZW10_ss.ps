%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCCGGCAGGCCUCGCGUCAAGACGGCCGGCGGGACGGGAGCUGCGGCGCUGGCUACGAGAGUGACCCAGUCAGCGUUGGUUCCCGUCUUGGCC\
) } def
/len { sequence length } bind def

/coor [
[95.38087463 162.09605408]
[85.97342682 150.41273499]
[82.38815308 135.84750366]
[85.29752350 121.13236237]
[94.15681458 109.02654266]
[79.53289795 112.36435699]
[64.90897369 115.70217133]
[50.28505707 119.03998566]
[38.55259705 129.65412903]
[24.42271233 124.94290161]
[16.58003998 129.99114990]
[9.27673912 128.14537048]
[-5.44664812 131.01274109]
[-20.17003632 133.88012695]
[-34.89342117 136.74749756]
[-49.56896210 139.85049438]
[-64.19287872 143.18830872]
[-71.16542816 157.18536377]
[-85.52439880 163.37843323]
[-100.48992157 158.84332275]
[-108.99573517 145.72138977]
[-107.02565002 130.20840454]
[-95.50988770 119.62911987]
[-79.88584137 118.97875977]
[-67.53069305 128.56439209]
[-52.90677643 125.22657776]
[-46.97568512 120.58251953]
[-37.76080322 122.02411652]
[-23.03741455 119.15673828]
[-8.31402779 116.28935242]
[6.40935993 113.42197418]
[21.08489799 110.31897736]
[31.77135849 99.94358826]
[46.94724274 104.41606903]
[61.57116318 101.07825470]
[76.19508362 97.74044037]
[90.81900024 94.40262604]
[104.53518677 88.33087921]
[116.83777618 79.74913025]
[129.14035034 71.16737366]
[141.44294739 62.58562851]
[153.74552917 54.00387573]
[166.04811096 45.42212677]
[178.35069275 36.84037781]
[190.65327454 28.25862694]
[193.94383240 22.17349625]
[199.09147644 19.24602699]
[204.03045654 19.55104637]
[216.85760498 11.77515793]
[229.68473816 3.99926925]
[242.51188660 -3.77661920]
[255.33901978 -11.55250740]
[268.16616821 -19.32839584]
[280.99331665 -27.10428429]
[293.82043457 -34.88017273]
[306.64758301 -42.65606308]
[319.47473145 -50.43194962]
[332.30187988 -58.20783997]
[344.46533203 -66.98567200]
[355.88702393 -76.70909882]
[360.87319946 -92.33184052]
[376.95141602 -95.56022644]
[387.58181763 -83.07315826]
[381.82873535 -67.71627045]
[365.61044312 -65.28740692]
[354.18875122 -55.56398010]
[354.11541748 -53.04955673]
[353.08355713 -50.40539169]
[351.04049683 -47.97613907]
[348.05136108 -46.11886978]
[344.29992676 -45.16460800]
[340.07775879 -45.38069916]
[327.25061035 -37.60480881]
[314.42349243 -29.82892036]
[301.59634399 -22.05303192]
[288.76919556 -14.27714348]
[275.94204712 -6.50125504]
[263.11489868 1.27463365]
[250.28776550 9.05052185]
[237.46063232 16.82641029]
[224.63348389 24.60229874]
[211.80635071 32.37818909]
[199.23503113 40.56121063]
[186.93244934 49.14295959]
[174.62985229 57.72471237]
[162.32727051 66.30645752]
[150.02468872 74.88821411]
[137.72210693 83.46996307]
[125.41952515 92.05171204]
[113.11693573 100.63346100]
[128.03349304 102.21346283]
[140.88305664 109.95224762]
[149.25544739 122.39825439]
[151.58027649 137.21699524]
[147.42146301 151.62895203]
[137.55908203 162.93086243]
[123.84300232 169.00286865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[7 35]
[8 34]
[10 32]
[12 31]
[13 30]
[14 29]
[15 28]
[16 26]
[17 25]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[48 82]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
