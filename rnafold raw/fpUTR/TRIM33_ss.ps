%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGGCUGGGGCUGGGGGCGGCGGCGGCGGCGACGCGGGCGGCGGGCGGCGCGGGGCGGUCCGGCGGGUUCAAAGAGGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[180.30819702 355.60183716]
[183.81439209 340.90887451]
[191.31924438 327.79956055]
[202.21437073 317.33663940]
[189.47055054 309.62664795]
[189.95329285 293.81280518]
[183.02023315 280.51119995]
[176.08717346 267.20959473]
[169.15411377 253.90797424]
[162.22105408 240.60636902]
[155.28799438 227.30476379]
[149.25976562 222.71949768]
[148.35481262 213.38107300]
[141.91801453 199.83236694]
[135.48120117 186.28366089]
[119.35897827 183.85351562]
[107.68395996 172.23793030]
[105.12076569 155.80294800]
[112.85581970 140.89147949]
[105.92276001 127.58987427]
[98.98970032 114.28826904]
[87.29790497 106.62058258]
[87.70869446 92.64479065]
[80.77563477 79.34318542]
[67.53590393 70.68176270]
[68.51454926 55.81934357]
[55.27481842 47.15792465]
[56.25345993 32.29550171]
[49.32040024 18.99389648]
[36.08067322 10.33247757]
[37.05931091 -4.52994204]
[30.12625504 -17.83154678]
[14.81956100 -21.03141403]
[5.19147062 -33.35350418]
[5.78807306 -48.97970200]
[16.32767105 -60.53179550]
[31.83378792 -62.55524063]
[44.98491287 -54.09462738]
[49.57147980 -39.14479828]
[43.42786026 -24.76460648]
[50.36091995 -11.46300030]
[63.10474777 -3.75300074]
[62.62200546 12.06083870]
[69.55506134 25.36244392]
[82.29888916 33.07244492]
[81.81615448 48.88628387]
[94.55998230 56.59628296]
[94.07723999 72.41012573]
[101.01029968 85.71173096]
[112.70209503 93.37941742]
[112.29130554 107.35520935]
[119.22436523 120.65681458]
[126.15742493 133.95841980]
[140.03767395 135.00315857]
[151.46321106 142.76113892]
[157.45899963 155.08103943]
[156.52944946 168.64160156]
[149.02990723 179.84684753]
[155.46672058 193.39555359]
[161.90353394 206.94425964]
[168.58959961 220.37170410]
[175.52265930 233.67330933]
[182.45571899 246.97491455]
[189.38877869 260.27651978]
[196.32183838 273.57812500]
[203.25489807 286.87973022]
[216.49462891 295.54116821]
[215.51597595 310.40356445]
[230.33288574 307.46487427]
[245.37741089 308.82101440]
[259.42996216 314.36203003]
[271.35134888 323.63873291]
[280.17514038 335.89910889]
[285.18609619 350.14926147]
[285.97793579 365.23400879]
[282.48651123 379.93051147]
[274.99481201 393.04733276]
[264.11019897 403.52120972]
[250.71504211 410.50302124]
[235.89518738 413.42684937]
[220.85203552 412.05560303]
[206.80506897 406.50048828]
[194.89300537 397.21179199]
[186.08151245 384.94256592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 68]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[13 60]
[14 59]
[15 58]
[19 53]
[20 52]
[21 51]
[23 49]
[24 48]
[26 46]
[28 44]
[29 43]
[31 41]
[32 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
