%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAUUGGCUGCGAGAGGCCGGUGCGGGCCGCACUCGCAGGGCCCGUGGCGGUUCAGGCGCCAGAGCUGGCCGAUCGGCGUUGGCCGCCGAC\
) } def
/len { sequence length } bind def

/coor [
[189.02861023 206.41322327]
[179.34419250 194.95845032]
[169.65977478 183.50366211]
[159.59800720 172.37887573]
[145.18835449 168.60913086]
[141.15632629 153.31033325]
[130.72843933 142.52796936]
[120.30055237 131.74562073]
[109.87266541 120.96326447]
[99.44477844 110.18090820]
[91.86654663 106.95104218]
[88.85609436 98.85969543]
[78.79432678 87.73490906]
[63.24642563 86.78590393]
[53.20083618 75.36045837]
[54.20138550 60.54376602]
[44.13961411 49.41898346]
[34.07784271 38.29420090]
[25.82679367 33.91252899]
[23.87336731 26.62549019]
[14.18895054 15.17070675]
[4.50453234 3.71592402]
[-10.31384945 -1.82719123]
[-12.62232494 -16.54181671]
[-22.30674171 -27.99659920]
[-31.99115944 -39.45138168]
[-41.67557907 -50.90616608]
[-51.35999680 -62.36095047]
[-61.04441452 -73.81573486]
[-70.72882843 -85.27051544]
[-80.41324615 -96.72529602]
[-90.47502136 -107.85008240]
[-100.90290833 -118.63243103]
[-116.81030273 -122.61825562]
[-121.05138397 -138.45950317]
[-109.26329041 -149.86006165]
[-93.57260132 -145.09202576]
[-90.12055206 -129.06031799]
[-79.69266510 -118.27796936]
[-74.82408905 -117.31809235]
[-70.58060455 -113.16005707]
[-68.95846558 -106.40971375]
[-59.27404785 -94.95493317]
[-49.58963013 -83.50015259]
[-39.90521240 -72.04536438]
[-30.22079468 -60.59058380]
[-20.53637695 -49.13579941]
[-10.85195923 -37.68101883]
[-1.16754162 -26.22623444]
[12.95814610 -21.50244141]
[15.95931530 -5.96849346]
[25.64373398 5.48628950]
[35.32815170 16.94107246]
[45.20262527 28.23243141]
[55.26439667 39.35721207]
[65.32616425 50.48199463]
[80.16860199 50.96955872]
[90.53114319 62.10833359]
[89.91910553 77.67314148]
[99.98087311 88.79792023]
[110.22713470 99.75302124]
[120.65502167 110.53537750]
[131.08291626 121.31773376]
[141.51078796 132.10008240]
[151.93867493 142.88244629]
[167.09420776 147.42341614]
[170.38035583 161.95098877]
[176.93443298 164.24066162]
[180.64683533 168.87904358]
[181.11456299 173.81924438]
[190.79898071 185.27403259]
[200.48339844 196.72880554]
[214.06709290 196.32020569]
[225.20713806 203.75653076]
[229.89990234 216.09225464]
[226.61788940 228.67356873]
[235.91413879 240.44555664]
[245.21038818 252.21754456]
[254.50663757 263.98953247]
[263.80288696 275.76153564]
[273.09912109 287.53350830]
[288.80059814 290.82638550]
[295.88690186 305.21957397]
[288.92196655 319.67190552]
[273.24874878 323.09674072]
[260.89038086 312.86688232]
[261.32714844 296.82977295]
[252.03088379 285.05776978]
[242.73463440 273.28579712]
[233.43838501 261.51379395]
[224.14215088 249.74180603]
[214.84590149 237.96981812]
[198.16184998 236.78918457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 67]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[12 60]
[13 59]
[16 56]
[17 55]
[18 54]
[20 53]
[21 52]
[22 51]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 39]
[33 38]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
