%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGCCUGAAGCGCGUGUCUGCUGUCUGUGCCAGUGCUCCUGCCGGGUCCCCUCAGGUGUGUCGUUUCCGUCGCGCUUCCGCCCUCUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[173.23539734 113.33664703]
[161.89021301 109.40270996]
[153.84477234 100.32610321]
[138.97860718 102.32540894]
[124.11244202 104.32471466]
[109.24628448 106.32402039]
[94.41560364 108.57145691]
[79.62454987 111.06639099]
[64.83349609 113.56133270]
[59.23653793 117.66895294]
[53.31144333 118.10453033]
[48.97382736 115.69425201]
[34.04916000 117.19568634]
[19.12449265 118.69712067]
[4.19982624 120.19855499]
[-10.72484112 121.69999695]
[-19.14674950 125.74354553]
[-26.17206001 122.99366760]
[-39.42461777 131.63543701]
[-52.64026260 124.76550293]
[-65.95429993 134.33987427]
[-80.78967285 127.35102844]
[-81.88500977 110.98850250]
[-68.11353302 102.08465576]
[-53.64215469 109.79900360]
[-41.46009827 101.22888947]
[-27.17394829 108.02716064]
[-12.22627640 106.77532959]
[2.69839072 105.27388763]
[17.62305832 103.77245331]
[32.54772568 102.27101898]
[47.47239304 100.76958466]
[62.33855438 98.77027893]
[77.12960815 96.27533722]
[91.92066193 93.78040314]
[98.87237549 89.36052704]
[107.24697876 91.45785522]
[122.11313629 89.45854950]
[136.97930908 87.45924377]
[151.84545898 85.45994568]
[162.55303955 70.02692413]
[180.79922485 67.16036987]
[195.22457886 78.18562317]
[209.92401123 75.19783020]
[224.62342834 72.21003723]
[239.32286072 69.22225189]
[254.02227783 66.23445892]
[268.72171021 63.24666977]
[271.01614380 48.28134918]
[278.27862549 35.02886200]
[289.61569214 25.07942963]
[303.64630127 19.61937523]
[318.67004395 19.28970337]
[332.87322998 24.11090851]
[344.54782104 33.48282623]
[352.29687500 46.25927353]
[366.99630737 43.27148056]
[381.69570923 40.28369141]
[396.39514160 37.29590225]
[411.09457397 34.30811310]
[425.79400635 31.32032204]
[440.49340820 28.33253288]
[452.47589111 18.00147438]
[466.48928833 23.04863739]
[481.18872070 20.06084824]
[493.10781860 8.79732513]
[508.74234009 13.74644852]
[512.00885010 29.81698608]
[499.54699707 40.47694397]
[484.17651367 34.76027298]
[469.47708130 37.74806213]
[458.54602051 47.86541748]
[443.48120117 43.03195953]
[428.78179932 46.01974869]
[414.08236694 49.00753784]
[399.38293457 51.99532700]
[384.68350220 54.98311615]
[369.98406982 57.97090912]
[355.28466797 60.95869827]
[353.13827515 75.74647522]
[346.04876709 88.93236542]
[334.85473633 98.91577911]
[320.89443970 104.47737885]
[305.84561157 104.92797852]
[291.52401733 100.19390106]
[279.66418457 90.82819366]
[271.70950317 77.94609833]
[257.01007080 80.93388367]
[242.31065369 83.92167664]
[227.61122131 86.90946960]
[212.91178894 89.89725494]
[198.21237183 92.88504791]
[194.01000977 103.74467468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[7 35]
[8 34]
[9 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[18 27]
[20 25]
[43 92]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
