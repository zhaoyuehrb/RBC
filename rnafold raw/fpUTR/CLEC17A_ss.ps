%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGCCUGAGUCGGAGAGACAGGGGGCAGAGGUUGCCAAGCCCUGGCUGCCACUUGUCAGGUUCCCUGUGCUAGAC\
) } def
/len { sequence length } bind def

/coor [
[6.89825153 306.90655518]
[-5.81383801 304.52249146]
[-14.33480930 316.86724854]
[-22.85577965 329.21200562]
[-19.76080894 344.71026611]
[-28.60065269 357.81115723]
[-44.13078690 360.74209595]
[-57.13746262 351.76422119]
[-59.90404510 336.20397949]
[-50.78917313 323.29293823]
[-35.20053864 320.69100952]
[-26.67956734 308.34625244]
[-18.15859604 296.00149536]
[-26.08220673 280.97964478]
[-25.46854019 263.92004395]
[-16.39395905 249.35847473]
[-1.19590092 241.20973206]
[16.12861443 241.71528625]
[23.62861443 228.72491455]
[30.86550522 215.58613586]
[37.83635330 202.30429077]
[44.80720139 189.02244568]
[51.77804947 175.74061584]
[58.74889755 162.45877075]
[65.71974182 149.17692566]
[72.69058990 135.89509583]
[79.66143799 122.61325073]
[86.63228607 109.33141327]
[85.41522980 92.71607208]
[99.42937469 83.70750427]
[105.85976410 70.15574646]
[110.89533234 56.02623749]
[114.48506927 41.46211243]
[118.07480621 26.89798355]
[113.86493683 11.64716244]
[124.42324066 1.14137900]
[128.01296997 -13.42274857]
[131.60270691 -27.98687553]
[135.19244385 -42.55100250]
[128.15666199 -56.96895981]
[135.17221069 -71.39676666]
[150.85734558 -74.76665497]
[163.17977905 -64.49352264]
[162.68679810 -48.45804596]
[149.75657654 -38.96126938]
[146.16683960 -24.39714050]
[142.57710266 -9.83301353]
[138.98736572 4.73111391]
[143.45399475 18.94021225]
[132.63893127 30.48771858]
[129.04919434 45.05184555]
[125.45946503 59.61597443]
[126.98368835 61.72892380]
[127.75659180 64.58439636]
[127.49416351 67.89981842]
[126.01862335 71.29688263]
[123.28795624 74.34049225]
[119.41152191 76.58613586]
[112.98113251 90.13789368]
[116.23320770 101.50134277]
[110.95220947 112.07559967]
[99.91412354 116.30226135]
[92.94327545 129.58409119]
[85.97243500 142.86593628]
[79.00158691 156.14778137]
[72.03073883 169.42962646]
[65.05989075 182.71145630]
[58.08904266 195.99330139]
[51.11819458 209.27514648]
[44.14734650 222.55697632]
[42.86258698 231.88851929]
[36.61899567 236.22491455]
[29.11899567 249.21528625]
[36.75829697 260.00238037]
[39.64287949 272.85336304]
[37.36325073 285.77719116]
[30.30714989 296.78591919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[18 73]
[19 72]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[30 59]
[31 58]
[32 52]
[33 51]
[34 50]
[36 48]
[37 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
