%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCACAGUUAUCACCCAUGCCCUCCUAAAAGGGUGUCUCAAAGCAUAUCUUUCUGUAGAGCAGAAUUCGGAACUGAGAAGACGAGGGCUCAAAUUGAAUCUCACAGGAUUUGCGUGCAAGAGAAACCCAAAGGA\
) } def
/len { sequence length } bind def

/coor [
[-49.70126724 397.14636230]
[-45.03097534 411.47994995]
[-43.92734528 426.51477051]
[-46.45454788 441.37667847]
[-52.46564865 455.20166016]
[-61.61116791 467.18594360]
[-73.35940552 476.63275146]
[-87.02732086 482.99288940]
[-101.82029724 485.89657593]
[-116.87828064 485.17498779]
[-131.32580566 480.87011719]
[-144.32293701 473.23217773]
[-155.11402893 462.70526123]
[-163.07170105 449.90139771]
[-167.73330688 435.56497192]
[-168.82781982 420.52951050]
[-166.29161072 405.66912842]
[-160.27212524 391.84777832]
[-151.11933899 379.86904907]
[-139.36538696 370.42935181]
[-125.69360352 364.07751465]
[-110.89888000 361.18280029]
[-95.84133911 361.91351318]
[-81.39641571 366.22714233]
[-73.79660797 353.29492188]
[-66.19680786 340.36267090]
[-58.59700775 327.43041992]
[-63.82495880 317.17227173]
[-63.40642929 305.54580688]
[-57.32993317 295.48388672]
[-47.02591324 289.58142090]
[-35.03161240 289.42660522]
[-26.84266281 276.85913086]
[-18.65371323 264.29168701]
[-10.46476364 251.72421265]
[-9.99911404 236.83688354]
[4.01736212 229.49870300]
[12.20631123 216.93124390]
[20.39525986 204.36378479]
[28.58420944 191.79631042]
[24.18072891 179.63156128]
[27.66666985 166.97029114]
[37.97796631 158.52636719]
[51.46731949 157.57785034]
[59.94436646 145.20288086]
[68.42140961 132.82792664]
[76.89846039 120.45295715]
[69.75543213 106.10499573]
[70.77353668 90.10967255]
[79.67804718 76.78313446]
[94.06618500 69.72138214]
[110.05549622 70.82994843]
[118.24444580 58.26248932]
[126.43339539 45.69502640]
[134.62234497 33.12756348]
[142.81129456 20.56010056]
[151.00024414 7.99263859]
[153.09332275 -0.99317193]
[159.52629089 -4.76750278]
[168.00334167 -17.14246559]
[176.48039246 -29.51742744]
[176.65135193 -34.06282043]
[178.15750122 -37.89794922]
[180.59465027 -40.68039703]
[183.48745728 -42.24130249]
[186.35485840 -42.59334183]
[195.93756104 -54.13335037]
[205.52026367 -65.67336273]
[215.10296631 -77.21337128]
[224.68566895 -88.75337982]
[234.26837158 -100.29338837]
[231.48913574 -113.52737427]
[236.78890991 -125.75582886]
[248.01286316 -132.57362366]
[260.91830444 -131.66728210]
[270.76501465 -142.98287964]
[280.61169434 -154.29846191]
[290.45840454 -165.61405945]
[285.38967896 -180.11245728]
[288.26498413 -195.19979858]
[298.31091309 -206.81767273]
[312.82513428 -211.84092712]
[327.90341187 -208.91833496]
[339.48971558 -198.83604431]
[344.46746826 -184.30615234]
[341.49761963 -169.23712158]
[331.37905884 -157.68244934]
[316.83361816 -152.75028992]
[301.77398682 -155.76736450]
[291.92730713 -144.45176697]
[282.08059692 -133.13618469]
[272.23388672 -121.82058716]
[274.13623047 -105.15153503]
[263.21273804 -91.97729492]
[245.80838013 -90.71068573]
[236.22567749 -79.17067719]
[226.64297485 -67.63066864]
[217.06027222 -56.09066010]
[207.47756958 -44.55064774]
[197.89486694 -33.01063919]
[188.85534668 -21.04038048]
[180.37829590 -8.66541862]
[171.90126038 3.70954323]
[163.56770325 16.18158722]
[155.37875366 28.74905014]
[147.18980408 41.31651306]
[139.00085449 53.88397598]
[130.81190491 66.45143890]
[122.62295532 79.01889801]
[129.45675659 90.81824493]
[130.53767395 104.41077423]
[125.65464020 117.14188385]
[115.76128387 126.52520752]
[102.78977203 130.72819519]
[89.27342224 128.93000793]
[80.79637909 141.30496216]
[72.31932831 153.67993164]
[63.84228134 166.05488586]
[67.38695526 183.14149475]
[57.70499420 197.25328064]
[41.15167236 199.98526001]
[32.96272278 212.55273438]
[24.77377319 225.12019348]
[16.58482552 237.68765259]
[15.53344631 253.47389221]
[2.10269856 259.91317749]
[-6.08625031 272.48062134]
[-14.27519989 285.04809570]
[-22.46414948 297.61553955]
[-17.80973053 315.90725708]
[-27.75417709 331.57550049]
[-45.66476059 335.03021240]
[-53.26456070 347.96246338]
[-60.86436462 360.89471436]
[-68.46416473 373.82696533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 135]
[25 134]
[26 133]
[27 132]
[32 129]
[33 128]
[34 127]
[35 126]
[37 124]
[38 123]
[39 122]
[40 121]
[44 118]
[45 117]
[46 116]
[47 115]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[59 103]
[60 102]
[61 101]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[75 92]
[76 91]
[77 90]
[78 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
