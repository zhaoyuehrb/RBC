%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUUCUUCCUUCUGCGUAUGGGACAGGACCCUUUCUGGAAUGGGGGUCUUAUGACCUACAAUCAAACAAGAAC\
) } def
/len { sequence length } bind def

/coor [
[79.43151093 329.12374878]
[63.74859238 327.16888428]
[54.10746384 314.64593506]
[56.22803879 298.98455811]
[68.85221863 289.47634888]
[70.70760345 274.59155273]
[72.56299591 259.70672607]
[74.41838837 244.82192993]
[76.27377319 229.93711853]
[62.71152115 223.64218140]
[51.74414825 213.44969177]
[44.45428848 200.34861755]
[41.56685638 185.61587524]
[43.37697983 170.69186401]
[49.71987152 157.03965759]
[59.98577499 146.00155640]
[73.17852783 138.66712952]
[88.01223755 135.76565552]
[89.86762238 120.88085175]
[91.72301483 105.99604797]
[89.47117615 97.99256897]
[93.97502136 90.53923035]
[96.44393921 75.74381256]
[84.47794342 63.98728180]
[81.79789734 47.59424973]
[89.24803925 32.93216324]
[103.77563477 25.58019638]
[105.63101959 10.69538689]
[107.48641205 -4.18942165]
[109.34180450 -19.07423019]
[111.19718933 -33.95903778]
[113.05258179 -48.84384918]
[114.90796661 -63.72865677]
[116.76335907 -78.61346436]
[118.61875153 -93.49827576]
[107.19814301 -104.00300598]
[104.16622162 -119.22099304]
[110.68881226 -133.30059814]
[124.25785065 -140.82794189]
[139.65576172 -138.90859985]
[150.96173096 -128.28059387]
[153.82839966 -113.03060913]
[147.15345764 -99.02258301]
[133.50355530 -91.64288330]
[131.64816284 -76.75807953]
[129.79278564 -61.87326813]
[127.93738556 -46.98845673]
[126.08200073 -32.10364914]
[124.22660828 -17.21884155]
[122.37122345 -2.33403254]
[120.51583099 12.55077648]
[118.66043854 27.43558502]
[129.31719971 35.73857498]
[134.45245361 48.35197067]
[132.59609985 61.95376587]
[124.13516235 72.90263367]
[111.23935699 78.21273041]
[108.77043915 93.00814819]
[106.60781860 107.85143280]
[104.75243378 122.73624420]
[102.89704132 137.62104797]
[116.56457520 144.07519531]
[127.55313873 154.42382812]
[134.79521179 167.64428711]
[137.59259033 182.43583679]
[135.68370056 197.34753418]
[129.26794434 210.92062378]
[118.98503113 221.83125305]
[105.85115051 229.01953125]
[91.15858459 231.79251099]
[89.30319214 246.67732239]
[87.44780731 261.56213379]
[85.59241486 276.44692993]
[83.73702240 291.33175659]
[93.64078522 303.64804077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[18 61]
[19 60]
[20 59]
[22 58]
[23 57]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
