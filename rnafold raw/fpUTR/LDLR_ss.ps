%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUGCAGUGAGGUGAAGACAUUUGAAAAUCACCCCACUGCAAACUCCUCCCCCUGCUAGAAACCUCACAUUGAAAUGCUGUAAAUGACGUGGGCCCCGAGUGCAAUCGCGGGAAGCCAGGGUUUCCAGCUAGGACACAGCAGGUCGUGAUCCGGGUCGGGACACUGCCUGGCAGAGGCUGCGAGC\
) } def
/len { sequence length } bind def

/coor [
[-52.34595871 306.66375732]
[-59.11070633 311.13653564]
[-67.00190735 312.54339600]
[-74.71240234 310.72705078]
[-85.49475861 321.15493774]
[-96.27711487 331.58282471]
[-107.05946350 342.01071167]
[-117.84181976 352.43859863]
[-128.62417603 362.86648560]
[-139.40653992 373.29437256]
[-150.18888855 383.72225952]
[-154.72987366 398.87777710]
[-169.25744629 402.16394043]
[-180.03979492 412.59182739]
[-190.82215881 423.01971436]
[-201.60450745 433.44760132]
[-212.38687134 443.87548828]
[-207.12802124 458.16760254]
[-208.14341736 473.36260986]
[-215.25715637 486.82794189]
[-227.23672485 496.23059082]
[-242.00659180 499.94149780]
[-257.00778198 497.31777954]
[-269.64126587 488.81393433]
[-277.71820068 475.90335083]
[-279.83920288 460.82287598]
[-275.63681030 446.18524170]
[-265.83911133 434.52655029]
[-252.14363098 427.86676025]
[-236.92315674 427.35964966]
[-222.81474304 433.09313965]
[-212.03239441 422.66525269]
[-201.25004578 412.23736572]
[-190.46768188 401.80947876]
[-179.68533325 391.38159180]
[-175.91557312 376.97192383]
[-160.61677551 372.93991089]
[-149.83441162 362.51202393]
[-139.05206299 352.08413696]
[-128.26971436 341.65625000]
[-117.48735046 331.22836304]
[-106.70500183 320.80047607]
[-95.92264557 310.37258911]
[-85.14028931 299.94470215]
[-81.31282806 278.64916992]
[-59.53791046 273.39974976]
[-49.47613907 262.27496338]
[-39.41436768 251.15017700]
[-29.44589806 239.94172668]
[-30.69388962 225.14381409]
[-20.84062004 213.55210876]
[-5.31075048 212.34342957]
[4.56372261 201.05206299]
[7.11775398 186.37806702]
[22.02669144 181.08334351]
[31.90116501 169.79199219]
[41.77563858 158.50062561]
[51.65011215 147.20927429]
[61.52458191 135.91790771]
[71.39905548 124.62654877]
[81.27352905 113.33518982]
[68.33615112 120.92624664]
[54.00576019 116.49454498]
[47.61223221 102.92536163]
[53.31809998 89.05297852]
[67.40853119 83.90906525]
[80.70960236 90.84226227]
[70.28172302 80.05990601]
[59.85383224 69.27754974]
[44.49633789 62.09537506]
[47.14645004 45.34983063]
[63.97119522 43.26074982]
[70.63618469 58.84966278]
[81.06407166 69.63201904]
[91.49195862 80.41437531]
[98.84167480 78.92047882]
[103.60359192 64.69641113]
[113.54109955 75.93268585]
[120.89081573 74.43878937]
[126.28192902 60.44108200]
[131.67304993 46.44337463]
[137.06416321 32.44566727]
[134.80375671 16.78676605]
[146.59832764 7.69076872]
[151.98944092 -6.30694008]
[157.38056946 -20.30464935]
[162.77168274 -34.30235672]
[162.12033081 -40.91397858]
[164.55300903 -46.07774353]
[168.58390808 -48.67275238]
[166.84800720 -64.39843750]
[178.93994141 -73.09523773]
[184.79577637 -86.90499115]
[190.65161133 -100.71473694]
[187.26945496 -120.57422638]
[203.16123962 -131.56935120]
[208.55235291 -145.56706238]
[213.94346619 -159.56477356]
[219.21745300 -173.60704041]
[224.37391663 -187.69287109]
[229.53038025 -201.77871704]
[222.65129089 -216.00733948]
[227.92703247 -230.90505981]
[242.22758484 -237.63333130]
[257.06869507 -232.20037842]
[263.64538574 -217.82948303]
[258.05584717 -203.04664612]
[243.61621094 -196.62225342]
[238.45974731 -182.53640747]
[233.30328369 -168.45057678]
[233.95761108 -161.07388306]
[227.94117737 -154.17366028]
[222.55006409 -140.17594910]
[217.15895081 -126.17823792]
[222.13682556 -117.22664642]
[221.33836365 -106.79476929]
[214.78674316 -98.35759735]
[204.46136475 -94.85889435]
[198.60552979 -81.04914856]
[192.74967957 -67.23940277]
[194.90443420 -52.50148010]
[182.39364624 -42.81691360]
[176.76939392 -28.91124153]
[171.37828064 -14.91353321]
[165.98715210 -0.91582364]
[160.59603882 13.08188534]
[163.24206543 27.73957443]
[151.06187439 37.83678055]
[145.67076111 51.83449173]
[140.27963257 65.83219910]
[134.88851929 79.82991028]
[146.33053589 70.13040161]
[155.30456543 58.11096954]
[169.54249573 53.39066315]
[183.91955566 57.66850281]
[193.26092529 69.40473175]
[194.20426941 84.37503815]
[186.41004944 97.19104767]
[172.68370056 103.23980713]
[157.96746826 100.34500885]
[142.97518921 100.82647705]
[156.36297607 107.59162140]
[169.75076294 114.35677338]
[183.13854980 121.12192535]
[196.58238220 127.77498627]
[210.08134460 134.31549072]
[223.58029175 140.85598755]
[239.37321472 139.91029358]
[247.45315552 152.42283630]
[260.95211792 158.96333313]
[274.45108032 165.50382996]
[287.95004272 172.04434204]
[304.25814819 170.31884766]
[313.68643188 183.73674011]
[306.53582764 198.49482727]
[290.16232300 199.41127014]
[281.40951538 185.54328918]
[267.91058350 179.00279236]
[254.41162109 172.46229553]
[240.91265869 165.92179871]
[226.08528137 167.33531189]
[217.03979492 154.35494995]
[203.54084778 147.81443787]
[190.04188538 141.27394104]
[182.63673401 141.18659973]
[176.37339783 134.50970459]
[162.98561096 127.74456024]
[149.59782410 120.97940826]
[136.21003723 114.21425629]
[92.56488800 123.20966339]
[82.69041443 134.50102234]
[72.81594086 145.79238892]
[62.94147110 157.08374023]
[53.06699753 168.37509155]
[43.19252396 179.66645813]
[33.31805038 190.95780945]
[30.05772972 206.43945312]
[15.85508156 210.92654419]
[5.98060846 222.21789551]
[6.85264587 237.77030945]
[-3.32232332 249.08068848]
[-18.15453911 249.81619263]
[-21.45743561 258.35443115]
[-28.28958511 261.21194458]
[-38.35135651 272.33673096]
[-48.41312790 283.46151733]
[-46.44544983 291.61956787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[46 186]
[47 185]
[48 184]
[49 182]
[52 179]
[53 178]
[55 176]
[56 175]
[57 174]
[58 173]
[59 172]
[60 171]
[61 170]
[67 75]
[68 74]
[69 73]
[79 131]
[80 130]
[81 129]
[82 128]
[84 126]
[85 125]
[86 124]
[87 123]
[90 122]
[92 120]
[93 119]
[94 118]
[96 114]
[97 113]
[98 112]
[99 110]
[100 109]
[101 108]
[141 169]
[142 168]
[143 167]
[144 166]
[145 164]
[146 163]
[147 162]
[149 160]
[150 159]
[151 158]
[152 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
