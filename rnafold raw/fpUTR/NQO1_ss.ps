%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCCUUGUAGGCUGUCCACCUCAAACGGGCCGGACAGGAUAUAUAAGAGAGAAUGCACCGUGCACUACACACGCGACUCCCACAAGGUUGCAGCCGGAGCCGCCCAGCUCACCGAGAGCCUAGUUCCGGCCAGGGUCGCCCCGGCAACCACGAGCCCAGCCAAUCAGCGCCCCGGACUGCACCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[-32.78769302 260.23364258]
[-42.82040405 271.45928955]
[-56.06342316 278.56167603]
[-70.90927887 280.70062256]
[-85.56341553 277.63708496]
[-98.26112366 269.75967407]
[-110.01042938 279.08459473]
[-121.75972748 288.40948486]
[-133.50903320 297.73440552]
[-145.25833130 307.05932617]
[-157.00762939 316.38421631]
[-158.44166565 335.26232910]
[-172.95967102 346.91098022]
[-191.06842041 344.31030273]
[-202.50633240 354.01464844]
[-213.94424438 363.71899414]
[-225.38215637 373.42333984]
[-236.82005310 383.12768555]
[-248.25796509 392.83203125]
[-254.04859924 410.30416870]
[-271.41415405 412.78689575]
[-282.69177246 422.67709351]
[-293.96936035 432.56726074]
[-296.44918823 448.41751099]
[-310.45834351 456.23565674]
[-325.25018311 450.02429199]
[-329.47769165 434.54824829]
[-319.89785767 421.67941284]
[-303.85955811 421.28967285]
[-292.58193970 411.39947510]
[-281.30435181 401.50930786]
[-280.19683838 389.45343018]
[-270.86813354 381.12176514]
[-257.96231079 381.39410400]
[-246.52439880 371.68978882]
[-235.08648682 361.98544312]
[-223.64859009 352.28109741]
[-212.21067810 342.57675171]
[-200.77276611 332.87240601]
[-202.32716370 321.55081177]
[-198.17347717 310.77590942]
[-189.23802185 303.27294922]
[-177.67166138 300.99929810]
[-166.33253479 304.63491821]
[-154.58323669 295.30999756]
[-142.83393860 285.98510742]
[-131.08464050 276.66018677]
[-119.33533478 267.33529663]
[-107.58603668 258.01037598]
[-112.37430573 243.85559082]
[-112.03022003 228.88861084]
[-106.57600403 214.91627502]
[-96.65196991 203.63198853]
[-83.44139862 196.41044617]
[-68.52945709 194.14015198]
[-53.71301651 197.11421204]
[-40.78412247 204.99261475]
[-29.03482246 195.66769409]
[-30.26084900 179.30516052]
[-21.40862465 165.29258728]
[-5.79579926 159.25210571]
[10.50263786 163.74626160]
[22.09779549 154.23036194]
[33.69295120 144.71446228]
[45.28810883 135.19856262]
[56.88326645 125.68266296]
[53.08942032 117.83394623]
[50.71101761 109.44712067]
[49.81981659 100.77524567]
[50.44270706 92.07997894]
[52.56089783 83.62368774]
[56.11047745 75.66152191]
[60.98433685 68.43371582]
[67.03542328 62.15837097]
[74.08116150 57.02482605]
[68.34090424 43.16663361]
[62.60065460 29.30843925]
[56.86040497 15.45024586]
[51.12015152 1.59205329]
[45.37990189 -12.26613998]
[30.41266441 -16.79557991]
[21.90188408 -29.91429329]
[23.86609459 -45.42802811]
[35.37785339 -56.01166534]
[51.00165939 -56.66794586]
[63.36042786 -47.08698654]
[66.61872864 -31.79262352]
[59.23809433 -18.00639153]
[64.97834778 -4.14819813]
[70.71859741 9.70999527]
[76.45884705 23.56818771]
[82.19909668 37.42638016]
[87.93935394 51.28457260]
[104.51033783 50.01691437]
[120.58670044 54.23058319]
[128.71507263 41.62385559]
[136.84344482 29.01712990]
[144.97183228 16.41040421]
[153.10020447 3.80367780]
[161.22857666 -8.80304813]
[169.35694885 -21.40977478]
[177.48532104 -34.01649857]
[171.53308105 -43.84569931]
[169.69465637 -55.13660812]
[172.19868469 -66.24613953]
[178.64465332 -75.57212067]
[188.06649780 -81.78432465]
[199.07710266 -84.01417542]
[210.07257080 -81.97603607]
[218.80973816 -94.16873932]
[227.54690552 -106.36143494]
[236.28405762 -118.55413818]
[235.09989929 -134.55342102]
[246.96777344 -145.34848022]
[262.78366089 -142.65824890]
[270.41497803 -128.54646301]
[264.00759888 -113.83846283]
[248.47676086 -109.81697083]
[239.73959351 -97.62426758]
[231.00242615 -85.43157196]
[222.26527405 -73.23886871]
[229.17956543 -55.89284897]
[224.22108459 -37.73453903]
[209.21339417 -26.12664604]
[190.09204102 -25.88812637]
[181.96366882 -13.28140068]
[173.83529663 -0.67467439]
[165.70692444 11.93205166]
[157.57855225 24.53877831]
[149.45018005 37.14550400]
[141.32180786 49.75222778]
[133.19343567 62.35895538]
[144.15240479 76.14171600]
[149.67590332 92.86159515]
[149.08395386 110.46026611]
[163.12254333 115.74401855]
[177.16113281 121.02777100]
[192.80226135 118.64749146]
[201.98832703 130.37205505]
[216.02691650 135.65580750]
[230.06550598 140.93955994]
[244.88763428 130.51939392]
[262.84066772 131.06523132]
[276.75683594 142.17073059]
[281.19314575 159.25123596]
[295.39709473 164.07283020]
[309.60104370 168.89442444]
[319.90740967 157.68287659]
[333.88546753 151.63856506]
[349.11343384 151.80870056]
[362.95297241 158.16378784]
[373.00628662 169.60278320]
[377.53158569 184.14381409]
[375.74484253 199.26754761]
[367.95562744 212.35371399]
[355.51342773 221.13505554]
[340.57397461 224.09014893]
[325.72561646 220.70701599]
[313.54089355 211.57179260]
[306.13088989 198.26721191]
[304.77944946 183.09837341]
[290.57550049 178.27677917]
[276.37155151 173.45518494]
[267.59127808 181.86479187]
[255.99813843 185.76034546]
[243.77774048 184.34252930]
[233.26167297 177.81999207]
[226.48266602 167.38116455]
[224.78175354 154.97814941]
[210.74316406 149.69439697]
[196.70457458 144.41064453]
[182.06758118 147.16885376]
[171.87738037 135.06636047]
[157.83879089 129.78260803]
[143.80020142 124.49885559]
[132.40522766 138.32171631]
[116.88128662 147.26176453]
[99.20639801 150.17990112]
[81.63262939 146.70429993]
[66.39916229 137.27781677]
[54.80400848 146.79371643]
[43.20885086 156.30961609]
[31.61369324 165.82551575]
[20.01853752 175.34141541]
[21.85117340 189.01194763]
[16.72641563 201.70063782]
[6.08365726 210.12950134]
[-7.22752523 212.17826843]
[-19.70991325 207.41700745]
[-31.45921516 216.74191284]
[-26.72247505 231.12205505]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[21 31]
[22 30]
[23 29]
[57 190]
[58 189]
[62 184]
[63 183]
[64 182]
[65 181]
[66 180]
[75 93]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[95 132]
[96 131]
[97 130]
[98 129]
[99 128]
[100 127]
[101 126]
[102 125]
[109 121]
[110 120]
[111 119]
[112 118]
[135 175]
[136 174]
[137 173]
[139 171]
[140 170]
[141 169]
[145 163]
[146 162]
[147 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
