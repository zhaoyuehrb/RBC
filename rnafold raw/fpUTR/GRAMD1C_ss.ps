%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCGCUGGAGGUGGGCGCGGGGCGGUGCGGUGCGGUGCGCGCGGGGCGGUGCCGCGGCGGCGGAGGGAGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[93.19110107 308.77993774]
[93.19110107 293.77993774]
[93.19110107 278.77993774]
[93.19110107 263.77993774]
[89.95020294 256.89880371]
[93.50955963 248.17123413]
[94.12139130 233.18371582]
[94.73322296 218.19619751]
[80.01525879 209.73133850]
[71.42160034 194.98736572]
[71.30867004 177.83505249]
[79.79312134 162.82765198]
[94.69785309 153.99214172]
[94.08602142 139.00462341]
[85.83603668 126.60353851]
[93.00400543 112.49925995]
[85.68797302 100.58425140]
[92.00847626 88.11257172]
[91.39665222 73.12505341]
[90.78482056 58.13753510]
[90.17298889 43.15002060]
[89.56116486 28.16250229]
[81.26741028 14.68940830]
[88.47914886 1.65713477]
[87.86731720 -13.33038235]
[79.57356262 -26.80347633]
[86.78530121 -39.83575058]
[86.17346954 -54.82326889]
[77.87972260 -68.29636383]
[85.09145355 -81.32863617]
[76.79770660 -94.80172729]
[84.00943756 -107.83400726]
[83.39760590 -122.82151794]
[82.78578186 -137.80903625]
[82.17395020 -152.79655457]
[81.56211853 -167.78407288]
[74.87475586 -183.36340332]
[87.99399567 -194.10220337]
[101.94489288 -184.46847534]
[96.54963684 -168.39590454]
[97.16146851 -153.40838623]
[97.77330017 -138.42086792]
[98.38512421 -123.43334961]
[98.99695587 -108.44583130]
[107.24694061 -96.04474640]
[100.07897186 -81.94046783]
[108.32895660 -69.53937531]
[101.16098785 -55.43509674]
[101.77281952 -40.44757843]
[110.02280426 -28.04649162]
[102.85483551 -13.94221115]
[103.46665955 1.04530597]
[111.71665192 13.44639301]
[104.54868317 27.55067444]
[105.16050720 42.53819275]
[105.77233887 57.52570724]
[106.38416290 72.51322174]
[106.99599457 87.50074005]
[114.31202698 99.41574860]
[107.99152374 111.88742828]
[116.28527069 125.36052704]
[109.07353973 138.39279175]
[109.68537140 153.38031006]
[121.91545105 158.41111755]
[131.22920227 167.73239136]
[136.21411133 179.87879944]
[136.13415527 192.96066284]
[131.03823853 204.95793152]
[121.74695587 214.03211975]
[109.72073364 218.80802917]
[109.10890961 233.79554749]
[108.49707794 248.78306580]
[108.19110107 263.77993774]
[108.19110107 278.77993774]
[108.19110107 293.77993774]
[108.19110107 308.77993774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[6 72]
[7 71]
[8 70]
[13 63]
[14 62]
[16 60]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[24 52]
[25 51]
[27 49]
[28 48]
[30 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
