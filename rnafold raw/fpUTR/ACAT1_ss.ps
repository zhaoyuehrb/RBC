%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGCUAGGGGUGCGGGGUUGGGGAGGAGGCCGCUAGUCUACGCCUGUGGAGCCGAUACUCAGCCCUCUGCGACC\
) } def
/len { sequence length } bind def

/coor [
[86.90200043 285.31872559]
[86.90200043 270.31872559]
[79.16470337 257.59146118]
[86.90200043 243.79129028]
[86.90200043 228.79129028]
[86.90200043 213.79129028]
[83.66110229 206.91014099]
[87.22045898 198.18258667]
[87.83229065 183.19506836]
[88.44412231 168.20755005]
[89.05594635 153.22003174]
[89.66777802 138.23251343]
[86.71025085 131.22489929]
[90.62262726 122.64978027]
[91.84526825 107.69969177]
[92.76269531 92.72777557]
[93.37451935 77.74025726]
[93.98635101 62.75274277]
[83.55496979 51.18450928]
[84.38895416 35.99375153]
[95.48178101 26.12031364]
[88.31381226 12.01603222]
[96.56379700 -0.38505450]
[97.17562866 -15.37257195]
[83.84656525 -28.51315880]
[84.05595398 -46.91773605]
[97.22706604 -59.32424927]
[88.93331909 -72.79734802]
[96.14505005 -85.82962036]
[95.53322601 -100.81713867]
[94.92139435 -115.80464935]
[94.30956268 -130.79217529]
[80.45117188 -137.28860474]
[71.20845795 -149.48822021]
[68.70532990 -164.58766174]
[73.51699066 -179.11715698]
[84.53775024 -189.73796082]
[99.23512268 -194.00949097]
[114.23175812 -190.95014954]
[126.08153534 -181.26298523]
[132.06147766 -167.17401123]
[130.79742432 -151.92079163]
[122.57984161 -139.00839233]
[109.29708099 -131.40399170]
[109.90891266 -116.41648102]
[110.52073669 -101.42896271]
[111.13256836 -86.44144440]
[119.38256073 -74.04035950]
[112.21458435 -59.93608093]
[122.34128571 -54.00143051]
[128.29272461 -43.74365616]
[128.42150879 -31.76341438]
[122.57440186 -21.16695976]
[112.16314697 -14.76074314]
[111.55131531 0.22677429]
[118.76304626 13.25904846]
[110.46929932 26.73214149]
[120.72043610 37.47689438]
[120.31346130 52.68508530]
[108.97386932 63.36457062]
[108.36203766 78.35208893]
[107.75021362 93.33960724]
[110.65814209 101.12317657]
[106.79535675 108.92233276]
[105.57271576 123.87242126]
[104.65529633 138.84434509]
[104.04346466 153.83186340]
[103.43163300 168.81938171]
[102.81980896 183.80688477]
[102.20797729 198.79440308]
[101.90200043 213.79129028]
[101.90200043 228.79129028]
[101.90200043 243.79129028]
[109.63929749 257.59146118]
[101.90200043 270.31872559]
[101.90200043 285.31872559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[4 73]
[5 72]
[6 71]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[14 65]
[15 64]
[16 62]
[17 61]
[18 60]
[21 57]
[23 55]
[24 54]
[27 49]
[29 47]
[30 46]
[31 45]
[32 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
