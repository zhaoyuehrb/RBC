%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUGACCCCACCUGCCUUGGCCGCUCUGCUCCCGCCUCCCACUGCCCCUCAGGCCAGCUCAGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[89.29557037 238.09480286]
[75.78253174 244.92681885]
[60.78297043 246.99851990]
[45.92393112 244.08517456]
[32.81720352 236.50279236]
[22.88451385 225.07386780]
[17.20328331 211.03811646]
[16.38976860 195.91802979]
[20.53221512 181.35372925]
[29.18128014 168.92503357]
[41.39878082 159.98013306]
[55.85944748 155.48927307]
[70.99470520 155.93960571]
[76.26532745 141.89608765]
[81.53594971 127.85256195]
[86.80657196 113.80904388]
[80.91001892 100.57360077]
[86.00127411 87.00800323]
[99.14990997 80.92033386]
[104.42053223 66.87681580]
[109.69115448 52.83329010]
[114.96177673 38.78976440]
[120.23239899 24.74624252]
[125.50302124 10.70271969]
[114.24312592 -0.82556492]
[109.08123779 -16.03054810]
[110.98175049 -31.91706467]
[119.52299500 -45.37825775]
[132.98951721 -53.80318451]
[148.71640015 -55.58317184]
[153.35165405 -69.84902191]
[141.77008057 -79.69460297]
[134.84228516 -93.22509003]
[133.62471008 -108.37718964]
[138.30303955 -122.84030151]
[148.16384888 -134.40892029]
[161.70344543 -141.31890869]
[176.85713196 -142.51654053]
[191.31407166 -137.81919861]
[202.86970520 -127.94317627]
[209.76188660 -114.39450836]
[210.93957520 -99.23925781]
[206.22322083 -84.78850555]
[196.33200073 -73.24587250]
[182.77427673 -66.37152863]
[167.61750793 -65.21376801]
[162.98225403 -50.94791794]
[173.57841492 -41.73316574]
[179.82705688 -29.10877991]
[180.73373413 -15.00797272]
[176.12487793 -1.60456586]
[166.67987061 9.02211857]
[153.83103943 15.20982838]
[139.54653931 15.97334194]
[134.27592468 30.01686478]
[129.00529480 44.06038666]
[123.73467255 58.10391235]
[118.46405029 72.14743805]
[113.19342804 86.19095612]
[119.08998108 99.42639923]
[113.99872589 112.99199677]
[100.85009003 119.07966614]
[95.57946777 133.12318420]
[90.30884552 147.16671753]
[85.03822327 161.21023560]
[96.73244476 170.82916260]
[104.66765594 183.72534180]
[107.98310089 198.49986267]
[106.31915283 213.55010986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 65]
[14 64]
[15 63]
[16 62]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[30 47]
[31 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
