%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCGCGGGCGGCCGAGCGGAGCCGAGCGCAGCCGAGCCGGGCCGAGCCGGGCCGGGCCGGGCCCAGGAGCGCGCGGAUGAUGCGGGCGGCCAGGCGGGGGUCGACGGGUCCCUGAAGCCCGCGCCCCGGGCCAGCAAGGGAGCCCCGCGCAGGCCGCGCGCAUCCGGAGGCGGCCGGGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[-115.02767181 353.57662964]
[-126.16255188 356.65377808]
[-137.28080750 353.99285889]
[-148.06317139 364.42074585]
[-158.84552002 374.84863281]
[-163.38650513 390.00415039]
[-177.91407776 393.29031372]
[-188.69642639 403.71820068]
[-199.47879028 414.14605713]
[-204.11846924 431.95663452]
[-221.28326416 435.56771851]
[-231.88986206 446.17431641]
[-242.49645996 456.78091431]
[-253.10307312 467.38751221]
[-252.47500610 478.27145386]
[-257.84011841 487.50860596]
[-267.21154785 492.16027832]
[-277.37652588 490.90197754]
[-288.33163452 501.14822388]
[-299.28671265 511.39447021]
[-297.23922729 526.77587891]
[-304.65332031 540.40710449]
[-318.67813110 547.04675293]
[-333.92083740 544.14160156]
[-344.52029419 532.80889893]
[-346.40081787 517.40618896]
[-338.83929443 503.85617065]
[-324.74325562 497.36911011]
[-309.53298950 500.43939209]
[-298.57788086 490.19311523]
[-287.62277222 479.94686890]
[-283.38845825 461.09182739]
[-263.70965576 456.78091431]
[-253.10307312 446.17431641]
[-242.49645996 435.56771851]
[-231.88986206 424.96112061]
[-231.57247925 412.85626221]
[-222.80532837 403.93215942]
[-209.90667725 403.36370850]
[-199.12431335 392.93582153]
[-188.34196472 382.50793457]
[-184.57221985 368.09829712]
[-169.27340698 364.06625366]
[-158.49105835 353.63836670]
[-147.70869446 343.21047974]
[-148.51795959 324.93661499]
[-135.50447083 311.63226318]
[-116.57956696 312.05136108]
[-106.15167999 301.26901245]
[-102.86553192 286.74142456]
[-87.71000671 282.20043945]
[-77.28211975 271.41809082]
[-66.85423279 260.63574219]
[-56.42634201 249.85337830]
[-45.99845886 239.07102966]
[-42.71231079 224.54344177]
[-27.55677986 220.00247192]
[-17.12889290 209.22010803]
[-6.70100641 198.43775940]
[3.72688007 187.65541077]
[14.15476704 176.87304688]
[11.40143967 162.25946045]
[17.85751915 148.66595459]
[31.23641586 141.39556885]
[46.50748444 143.42057800]
[56.93537140 132.63822937]
[59.33018875 125.63047028]
[67.62873840 121.76466370]
[78.23533630 111.15805817]
[88.84194183 100.55146027]
[99.35955048 89.85660553]
[109.78743744 79.07424927]
[120.21532440 68.29190063]
[130.64320374 57.50954056]
[141.07109070 46.72718811]
[151.49897766 35.94483185]
[161.92686462 25.16247559]
[172.35475159 14.38012123]
[176.39669800 -3.57553673]
[193.43124390 -7.75815344]
[203.67750549 -18.71325111]
[207.26385498 -27.13634109]
[214.18768311 -29.76398468]
[224.61557007 -40.54634094]
[235.04345703 -51.32869339]
[245.47134399 -62.11104965]
[255.89923096 -72.89340210]
[266.32711792 -83.67575836]
[276.66455078 -94.54486847]
[276.31268311 -110.11772919]
[286.85989380 -121.08179474]
[301.70840454 -121.32127380]
[311.95468140 -132.27636719]
[315.36853027 -154.41342163]
[336.27035522 -160.00476074]
[345.76202393 -171.61976624]
[355.25366211 -183.23478699]
[357.78302002 -201.46511841]
[374.40905762 -207.05477905]
[383.70532227 -218.82676697]
[393.00155640 -230.59877014]
[402.29782104 -242.37075806]
[405.16870117 -251.06376648]
[411.84909058 -254.26007080]
[421.34072876 -265.87509155]
[424.35647583 -274.51889038]
[431.08932495 -277.60314941]
[440.77374268 -289.05792236]
[450.45816040 -300.51269531]
[460.14257812 -311.96749878]
[469.82699585 -323.42227173]
[466.99066162 -338.80047607]
[474.74774170 -352.37844849]
[489.43557739 -357.74511719]
[504.11904907 -352.36648560]
[511.86505127 -338.78219604]
[509.01617432 -323.40631104]
[496.91754150 -313.49887085]
[481.28179932 -313.73785400]
[471.59738159 -302.28308105]
[461.91296387 -290.82827759]
[452.22854614 -279.37350464]
[442.54412842 -267.91873169]
[432.95574951 -256.38342285]
[423.46408081 -244.76841736]
[414.06979370 -233.07450867]
[404.77355957 -221.30252075]
[395.47729492 -209.53051758]
[386.18106079 -197.75852966]
[387.27856445 -185.69935608]
[379.61285400 -175.81304932]
[366.86868286 -173.74311829]
[357.37701416 -162.12811279]
[347.88537598 -150.51310730]
[350.33886719 -142.98109436]
[349.59545898 -135.00001526]
[345.70285034 -127.88558197]
[339.23391724 -122.84025574]
[331.20358276 -120.75013733]
[322.90975952 -122.03011322]
[312.66351318 -111.07501221]
[313.41632080 -96.24366760]
[303.18124390 -84.98767853]
[287.61965942 -84.29860687]
[285.34225464 -77.25181580]
[277.10946655 -73.24787140]
[266.68157959 -62.46551895]
[256.25369263 -51.68316269]
[245.82580566 -40.90081024]
[235.39791870 -30.11845398]
[224.97003174 -19.33609772]
[214.63259888 -8.46699238]
[204.38633728 2.48810577]
[204.47361755 14.59681225]
[196.00956726 23.80887985]
[183.13711548 24.80800819]
[172.70922852 35.59036255]
[162.28134155 46.37271881]
[151.85345459 57.15507126]
[141.42556763 67.93743134]
[130.99768066 78.71977997]
[120.56979370 89.50213623]
[110.14190674 100.28449249]
[107.23954773 107.82295990]
[99.44853973 111.15805817]
[88.84194183 121.76466370]
[78.23533630 132.37126160]
[67.71772766 143.06611633]
[57.28984070 153.84846497]
[59.82400131 169.04335022]
[53.00473022 182.65771484]
[39.63455963 189.56440735]
[24.93712234 187.30093384]
[14.50923538 198.08329773]
[4.08134890 208.86564636]
[-6.34653759 219.64799500]
[-16.77442360 230.43035889]
[-20.80644417 245.72915649]
[-35.21610260 249.49891663]
[-45.64398956 260.28128052]
[-56.07187653 271.06362915]
[-66.49976349 281.84597778]
[-76.92765045 292.62832642]
[-80.95967102 307.92712402]
[-95.36932373 311.69689941]
[-105.79721069 322.47924805]
[-103.28596497 334.12374878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 45]
[4 44]
[5 43]
[7 41]
[8 40]
[9 39]
[11 36]
[12 35]
[13 34]
[14 33]
[18 31]
[19 30]
[20 29]
[48 186]
[49 185]
[51 183]
[52 182]
[53 181]
[54 180]
[55 179]
[57 177]
[58 176]
[59 175]
[60 174]
[61 173]
[65 169]
[66 168]
[68 167]
[69 166]
[70 165]
[71 163]
[72 162]
[73 161]
[74 160]
[75 159]
[76 158]
[77 157]
[78 156]
[80 153]
[81 152]
[83 151]
[84 150]
[85 149]
[86 148]
[87 147]
[88 146]
[89 144]
[92 141]
[93 140]
[95 134]
[96 133]
[97 132]
[99 129]
[100 128]
[101 127]
[102 126]
[104 125]
[105 124]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
