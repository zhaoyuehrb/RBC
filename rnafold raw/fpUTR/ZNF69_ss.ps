%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUCCUCCAGACACUGAGGGGGUCGCAUUCCUUACCUCACCUUUGUCCCUGCGCGGGCUGCGGCUGGGAUCCGGUCUUUCCAGCCCCGAGAGGGACCUGGUUCCUCUGCCCAGGCUUCUGUCACUCUGUCACCUACGCU\
) } def
/len { sequence length } bind def

/coor [
[88.01777649 298.68478394]
[73.62297058 294.10589600]
[61.10203934 285.65588379]
[51.47000885 274.01971436]
[45.50769806 260.14065552]
[43.69845200 245.14389038]
[46.18893051 230.24508667]
[52.77724457 216.65205383]
[62.92931366 205.46669006]
[75.82215118 197.59576416]
[90.41058350 193.67733765]
[90.74477386 178.68106079]
[91.07895660 163.68478394]
[91.41313934 148.68850708]
[70.67324829 139.80258179]
[56.04156876 122.62654877]
[41.81759644 127.38875580]
[27.59362602 132.15097046]
[13.36965561 136.91317749]
[-0.85431558 141.67538452]
[-14.96865845 146.75331116]
[-28.96636772 152.14442444]
[-42.96407700 157.53555298]
[-47.86722183 172.38455200]
[-61.19512177 180.56387329]
[-76.65475464 178.21145630]
[-86.94654846 166.43804932]
[-87.21103668 150.80270386]
[-77.32333374 138.68794250]
[-61.95211411 135.81399536]
[-48.35519409 143.53784180]
[-34.35748291 138.14672852]
[-20.35977554 132.75559998]
[-17.61266899 128.75909424]
[-12.29036045 126.49178314]
[-5.61652660 127.45141602]
[8.60744476 122.68920898]
[22.83141518 117.92699432]
[37.05538559 113.16478729]
[51.27935791 108.40257263]
[50.81467056 94.98924255]
[53.97470856 81.94517517]
[60.52658844 70.23165894]
[69.98746490 60.71193314]
[81.66012573 54.08754730]
[94.68434906 50.84668732]
[95.35255432 35.86157608]
[96.02075195 20.87646866]
[96.68895721 5.89135885]
[97.35716248 -9.09375095]
[98.02536011 -24.07885933]
[89.14864349 -40.16947937]
[99.06639099 -54.60541153]
[99.40057373 -69.60168457]
[96.44462585 -78.33202362]
[99.91296387 -84.92733002]
[100.58116913 -99.91243744]
[101.24937439 -114.89754486]
[101.91757202 -129.88265991]
[102.58577728 -144.86776733]
[103.25398254 -159.85287476]
[92.15060425 -178.11891174]
[103.69989777 -195.17073059]
[103.36571503 -210.16700745]
[103.03152466 -225.16328430]
[102.69734192 -240.15956116]
[102.36315918 -255.15583801]
[102.02897644 -270.15209961]
[95.63125610 -285.85260010]
[108.94710541 -296.34661865]
[122.71720886 -286.45620728]
[117.02525330 -270.48629761]
[117.35943604 -255.49002075]
[117.69361877 -240.49374390]
[118.02780151 -225.49746704]
[118.36199188 -210.50119019]
[118.69617462 -195.50491333]
[126.13726807 -190.40812683]
[130.42169189 -182.31454468]
[130.45413208 -173.01855469]
[126.09863281 -164.64968872]
[118.23908997 -159.18467712]
[117.57088470 -144.19956970]
[116.90268707 -129.21446228]
[116.23448181 -114.22934723]
[115.56627655 -99.24423981]
[114.89807892 -84.25912476]
[114.39685059 -69.26750183]
[114.06266785 -54.27122498]
[122.21754456 -45.26844406]
[122.01277924 -32.72111511]
[113.01047516 -23.41065788]
[112.34226990 -8.42554760]
[111.67406464 6.55956125]
[111.00586700 21.54467010]
[110.33766174 36.52978134]
[109.66945648 51.51488876]
[127.93037415 59.20541000]
[141.70510864 73.44837189]
[148.78114319 91.95606995]
[163.78021240 91.78897095]
[178.77928162 91.62186432]
[189.64883423 80.14892578]
[205.44940186 79.80579376]
[216.80677795 90.79603577]
[216.98283386 106.59934235]
[205.87312317 117.83989716]
[190.06884766 117.84886169]
[178.94638062 106.62093353]
[163.94731140 106.78804016]
[148.94824219 106.95513916]
[148.10711670 111.40219116]
[146.86283875 115.75368500]
[145.22584534 119.97316742]
[157.86923218 128.04440308]
[170.51261902 136.11563110]
[186.91065979 136.30522156]
[194.70852661 150.73176575]
[185.88444519 164.55448914]
[169.51585388 163.55374146]
[162.44137573 148.75901794]
[149.79798889 140.68778992]
[137.15460205 132.61654663]
[132.08691406 137.61296082]
[126.35437775 141.83003235]
[120.07579041 145.18038940]
[113.38123322 147.59460449]
[106.40941620 149.02268982]
[106.07523346 164.01896667]
[105.74105072 179.01524353]
[105.40686035 194.01152039]
[119.80626678 198.57592773]
[132.33567810 207.01338196]
[141.97940063 218.63987732]
[147.95564270 232.51290894]
[149.77995300 247.50785828]
[147.30444336 262.40914917]
[140.72978210 276.00881958]
[130.58895874 287.20434570]
[117.70404053 295.08822632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 131]
[12 130]
[13 129]
[14 128]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[21 33]
[22 32]
[23 31]
[46 97]
[47 96]
[48 95]
[49 94]
[50 93]
[51 92]
[53 89]
[54 88]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
[100 111]
[101 110]
[102 109]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
