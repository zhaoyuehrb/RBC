%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUCCAGCCUCCAGGCACCCGGGAUCCAGCGCCGCCGCUCAUAACACCCGCGACCCCGCAGCUAAGCGCAGCUCCCGACGCA\
) } def
/len { sequence length } bind def

/coor [
[61.52428055 229.16941833]
[55.43991852 235.09704590]
[48.25489426 239.60977173]
[40.29175186 242.50988770]
[31.90693283 243.67196655]
[23.47484016 243.04832458]
[15.37110901 240.67085266]
[7.95587683 236.64952087]
[1.55777872 231.16726685]
[-11.04738235 239.29808044]
[-23.65254402 247.42887878]
[-30.65713882 262.25680542]
[-47.02082062 263.33477783]
[-55.91003418 249.55384827]
[-48.18031693 235.09066772]
[-31.78334427 234.82371521]
[-19.17818260 226.69291687]
[-6.57302189 218.56211853]
[-8.79820633 195.42811584]
[2.27225852 174.87789917]
[22.99454498 163.91394043]
[46.41448593 166.34356689]
[54.77682877 153.89080811]
[63.13917160 141.43804932]
[71.50151062 128.98529053]
[79.86385345 116.53252411]
[74.31552887 104.36997986]
[75.52941132 91.05690765]
[83.18590546 80.09836578]
[95.26921082 74.37953186]
[108.59803772 75.40605164]
[117.41481781 63.27079391]
[126.23159790 51.13554001]
[135.04837036 39.00028610]
[129.79663086 26.10951042]
[131.64848328 12.42376041]
[140.00425720 1.56510580]
[152.55751038 -3.64725661]
[165.93086243 -1.92855370]
[175.19003296 -13.72972775]
[184.44920349 -25.53090096]
[169.55101013 -23.78627586]
[155.68257141 -29.50171089]
[146.33952332 -41.23659134]
[143.87684631 -56.03305054]
[148.91528320 -70.16153717]
[160.18487549 -80.06085968]
[174.84500122 -83.23581696]
[189.20050049 -78.88613892]
[199.63294983 -68.10820007]
[203.51278687 -53.61865616]
[199.86090088 -39.06759262]
[212.75788879 -46.72706223]
[225.65489197 -54.38653183]
[233.20262146 -68.94551086]
[249.59495544 -69.41807556]
[257.96887207 -55.31808853]
[249.71000671 -41.15040970]
[233.31436157 -41.48953247]
[220.41735840 -33.83006287]
[207.52037048 -26.17059708]
[196.25038147 -16.27172852]
[186.99121094 -4.47055435]
[177.73204041 7.33061981]
[182.74295044 22.84584808]
[177.54911804 38.47440720]
[163.97964478 48.09458160]
[147.18363953 47.81706238]
[138.36685181 59.95232010]
[129.55007935 72.08757019]
[120.73329926 84.22283173]
[126.04819489 99.47064209]
[121.35717010 114.92179871]
[108.46218872 124.64102173]
[92.31661224 124.89486694]
[83.95426941 137.34762573]
[75.59193420 149.80038452]
[67.22959137 162.25314331]
[58.86724854 174.70590210]
[64.26757812 181.35179138]
[68.14762115 188.97465515]
[70.33806610 197.23278809]
[70.74525452 205.75691223]
[69.35516357 214.16680908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 18]
[10 17]
[11 16]
[22 79]
[23 78]
[24 77]
[25 76]
[26 75]
[31 71]
[32 70]
[33 69]
[34 68]
[39 64]
[40 63]
[41 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
