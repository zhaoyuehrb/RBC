%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCUUUUACCCUGGCCGGGCGGGCGGGGCUCAGCCGGGCUGGGCUGGGCUCCGCGGCUGGAGCCGGGCUCUACCCAGAGCAAGACCCUG\
) } def
/len { sequence length } bind def

/coor [
[77.64160919 210.68600464]
[77.26905823 194.88610840]
[88.23814392 183.50828552]
[87.72602844 168.51702881]
[86.95803833 153.53671265]
[85.93440247 138.57167053]
[84.91076660 123.60664368]
[81.43273926 116.08845520]
[80.76818085 108.72558594]
[82.49819946 102.42836761]
[85.93984222 97.87224579]
[90.24690247 95.42921448]
[94.52602386 95.13743591]
[89.02320862 81.18326569]
[83.52039337 67.22908783]
[78.01758575 53.27490997]
[72.51477051 39.32073212]
[66.77452087 25.46253967]
[54.17977524 15.88741398]
[56.20595551 1.13126743]
[50.22993851 -12.62690163]
[44.25392151 -26.38507080]
[32.45117950 -31.91816902]
[27.81448364 -43.66805649]
[32.35907364 -55.02018738]
[26.85625839 -68.97436523]
[21.35344505 -82.92853546]
[15.85063267 -96.88271332]
[10.34781933 -110.83689117]
[4.84500599 -124.79106903]
[-0.65780717 -138.74523926]
[-6.16062021 -152.69941711]
[-11.66343403 -166.65359497]
[-17.16624641 -180.60777283]
[-22.66905975 -194.56195068]
[-28.17187309 -208.51612854]
[-33.67468643 -222.47030640]
[-48.26858902 -228.53607178]
[-54.22157669 -243.17634583]
[-48.00185013 -257.70529175]
[-33.29946136 -263.50317383]
[-18.83707619 -257.13018799]
[-13.19497299 -242.36730957]
[-19.72051048 -227.97311401]
[-14.21769714 -214.01893616]
[-8.71488380 -200.06475830]
[-3.21207047 -186.11059570]
[2.29074287 -172.15641785]
[7.79355621 -158.20223999]
[13.29636955 -144.24806213]
[18.79918289 -130.29388428]
[24.30199623 -116.33970642]
[29.80480957 -102.38552856]
[35.30762100 -88.43135071]
[40.81043625 -74.47717285]
[46.31324768 -60.52299881]
[60.60282516 -50.49283981]
[58.01209259 -32.36108780]
[63.98810959 -18.60291862]
[69.96412659 -4.84474897]
[82.13142395 3.74629998]
[80.53268433 19.48652267]
[86.20381165 24.47118568]
[86.46894836 33.81792068]
[91.97176361 47.77209473]
[97.47457123 61.72627258]
[102.97738647 75.68045044]
[108.48020172 89.63462830]
[118.71849823 100.59716797]
[132.26461792 107.03941345]
[145.81074524 113.48166656]
[159.35685730 119.92391968]
[172.90298462 126.36617279]
[189.19813538 124.52223969]
[198.72363281 137.87127686]
[191.68048096 152.68093872]
[175.31404114 153.71630859]
[166.46072388 139.91229248]
[152.91461182 133.47004700]
[139.36848450 127.02778625]
[125.82236481 120.58554077]
[112.27624512 114.14328766]
[99.87580109 122.58300781]
[100.89943695 137.54803467]
[101.92307281 152.51307678]
[105.69789886 161.06774902]
[102.71728516 168.00491333]
[103.22940063 182.99617004]
[114.94935608 193.59890747]
[115.65589905 209.38740540]
[104.92984009 220.99459839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 85]
[6 84]
[7 83]
[13 68]
[14 67]
[15 66]
[16 65]
[17 64]
[18 62]
[20 60]
[21 59]
[22 58]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
