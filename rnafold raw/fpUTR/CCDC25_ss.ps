%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCACGGAGGAGUUCCGGGGGCCAGGCGGCCGCCGCGAGUCUGGUAUCCUGAGCUUCGUGAGUUGAGCGCUGCUGCUCCGCGGUGGAGUCACCGCACCGCUCCCGGGAUC\
) } def
/len { sequence length } bind def

/coor [
[6.41348600 534.78070068]
[3.65950918 549.68682861]
[-4.02923965 562.75048828]
[-15.72430611 572.39416504]
[-30.01345444 577.45343018]
[-45.17119980 577.31726074]
[-59.36717224 572.00219727]
[-70.88713837 562.14996338]
[-78.34000397 548.95031738]
[-80.82580566 533.99719238]
[-78.04436493 519.09619141]
[-70.33155060 506.04675293]
[-58.61873245 496.42459106]
[-44.32028580 491.39169312]
[-29.16281509 491.55575562]
[-23.90325165 477.50808716]
[-18.64368820 463.46041870]
[-13.38412571 449.41275024]
[-8.12456226 435.36508179]
[-2.86499906 421.31741333]
[2.39456439 407.26974487]
[7.65412760 393.22207642]
[12.91369057 379.17440796]
[18.17325401 365.12673950]
[23.43281746 351.07907104]
[15.07720757 338.77777100]
[15.57316494 323.73724365]
[24.93995667 311.73239136]
[39.75071335 307.49591064]
[45.01027679 293.44824219]
[50.26984024 279.40057373]
[55.52940369 265.35290527]
[59.80944824 250.97650146]
[63.08966446 236.33955383]
[66.36988068 221.70260620]
[69.65009308 207.06565857]
[72.93031311 192.42871094]
[76.21052551 177.79176331]
[79.49074554 163.15481567]
[82.77095795 148.51786804]
[85.84918976 133.83712769]
[88.72485352 119.11534882]
[91.60050964 104.39357758]
[89.66612244 99.35630798]
[90.77310181 93.60105896]
[95.06149292 88.95001221]
[98.74377441 74.40900421]
[102.42606354 59.86800003]
[106.10834503 45.32699585]
[101.99554443 30.04971123]
[112.62044525 19.61128616]
[116.10202789 5.02092552]
[119.38224030 -9.61602020]
[114.85005188 -24.77417946]
[125.18328857 -35.50140381]
[128.46350098 -50.13835144]
[131.74372864 -64.77529907]
[135.02394104 -79.41223907]
[138.30415344 -94.04918671]
[135.86787415 -110.82717896]
[151.31575012 -117.81285095]
[162.30482483 -104.90251923]
[152.94110107 -90.76897430]
[149.66088867 -76.13202667]
[146.38067627 -61.49507904]
[143.10044861 -46.85813522]
[139.82023621 -32.22118759]
[144.58705139 -18.10996056]
[134.01918030 -6.33580399]
[130.73896790 8.30114174]
[132.36946106 15.61710835]
[127.16144562 23.29356766]
[131.53762817 37.53078461]
[120.64934540 49.00927734]
[116.96706390 63.55028152]
[113.28478241 78.09128571]
[109.60250092 92.63229370]
[106.32228088 107.26923370]
[103.44662476 121.99101257]
[100.57096100 136.71278381]
[102.00473785 145.87770081]
[97.40790558 151.79809570]
[94.12769318 166.43504333]
[90.84747314 181.07197571]
[87.56726074 195.70892334]
[84.28704071 210.34587097]
[81.00682831 224.98281860]
[77.72660828 239.61976624]
[74.44639587 254.25671387]
[88.60334778 249.29882812]
[101.45400238 257.03579712]
[103.69644165 271.86724854]
[93.70748138 283.05743408]
[78.71760559 282.50640869]
[69.57707214 270.61245728]
[64.31751251 284.66012573]
[59.05794525 298.70779419]
[53.79838181 312.75546265]
[62.18496704 325.67721558]
[61.36430740 340.88180542]
[51.86040497 352.54971313]
[37.48048782 356.33862305]
[32.22092438 370.38629150]
[26.96135902 384.43395996]
[21.70179558 398.48162842]
[16.44223213 412.52932739]
[11.18266964 426.57699585]
[5.92310619 440.62466431]
[0.66354299 454.67233276]
[-4.59602022 468.72000122]
[-9.85558414 482.76766968]
[-15.11514664 496.81533813]
[-3.57704449 506.64630127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[21 106]
[22 105]
[23 104]
[24 103]
[25 102]
[29 98]
[30 97]
[31 96]
[32 95]
[33 89]
[34 88]
[35 87]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[41 80]
[42 79]
[43 78]
[46 77]
[47 76]
[48 75]
[49 74]
[51 72]
[52 70]
[53 69]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
