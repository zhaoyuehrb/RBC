%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUUUGCAUGUCUAGCUGGAGAAUAAAAAUAAUAUAUCAUUUGCAUGUCUUAGUAAUGAAGUCAUGGGUGUCGUGGCAUGAGAUCAGCUGGAGGGAGAGGAGAGAUUAAAGUGAGGAGAGAGCUACAACCAAGUAAGCAAGUGUCAGGGCUCACCAACC\
) } def
/len { sequence length } bind def

/coor [
[372.30389404 275.04473877]
[374.58956909 260.07809448]
[361.45620728 252.83139038]
[346.57473755 253.45713806]
[338.22988892 240.01565552]
[325.09649658 232.76896667]
[311.96313477 225.52227783]
[298.57742310 231.99998474]
[283.76892090 229.32185364]
[273.25396729 218.30870056]
[271.21658325 203.03927612]
[256.33514404 203.66503906]
[247.99026489 190.22354126]
[234.85688782 182.97685242]
[221.72351074 175.73016357]
[208.59014893 168.48347473]
[195.45677185 161.23678589]
[182.32339478 153.99009705]
[169.19001770 146.74340820]
[156.05665588 139.49671936]
[149.68270874 147.26486206]
[142.24195862 154.01809692]
[133.89416504 159.61143494]
[124.81858063 163.92477417]
[115.21008301 166.86547852]
[105.27497864 168.37040710]
[95.22660828 168.40725708]
[85.28073883 166.97523499]
[75.65092468 164.10507202]
[66.54394531 159.85842896]
[58.15535736 154.32646179]
[50.66527557 147.62797546]
[44.23453522 139.90678406]
[39.00122452 131.32870483]
[35.07770538 122.07791138]
[32.54823685 112.35305786]
[31.46712494 102.36294556]
[31.85758972 92.32209778]
[33.71124268 82.44611359]
[19.71798706 77.04344940]
[5.72473049 71.64078522]
[-8.26852512 66.23811340]
[-22.26177979 60.83544922]
[-31.44488144 60.65776443]
[-36.47232437 55.18996429]
[-50.35818481 49.51696396]
[-63.47779083 57.80283356]
[-78.95986176 56.76113892]
[-90.85122681 46.79243088]
[-94.57940674 31.72988701]
[-88.71085358 17.36535835]
[-75.50213623 9.22230148]
[-60.03227615 10.43188572]
[-48.24975204 20.52900314]
[-44.68518829 35.63110352]
[-30.79932785 41.30410385]
[-16.85911369 46.84219360]
[-2.86585903 52.24486160]
[11.12739658 57.64752579]
[25.12065125 63.05019379]
[39.11390686 68.45285797]
[51.04327011 51.98357773]
[67.27812958 39.73709869]
[61.60512924 25.85123825]
[55.93213272 11.96537781]
[50.25913620 -1.92048144]
[44.58613586 -15.80634117]
[38.91313934 -29.69219971]
[24.73744202 -37.20413589]
[21.91383171 -52.99675369]
[32.60834122 -64.95530701]
[48.61705399 -63.90622330]
[57.65946198 -50.65426254]
[52.79899979 -35.36520004]
[58.47199631 -21.47933960]
[64.14499664 -7.59347916]
[69.81799316 6.29238033]
[75.49098969 20.17823982]
[81.16398621 34.06409836]
[100.15077972 31.42656708]
[119.12579346 34.14757156]
[136.60626221 42.01448059]
[151.22619629 54.41255569]
[161.84317017 70.37297058]
[167.62753296 88.64852905]
[168.12727356 107.81112671]
[163.30334473 126.36334229]
[176.43670654 133.61003113]
[189.57008362 140.85671997]
[202.70346069 148.10340881]
[215.83683777 155.35009766]
[228.97019958 162.59678650]
[242.10357666 169.84347534]
[255.23695374 177.09016418]
[271.05780029 176.98274231]
[278.46328735 189.90589905]
[292.46734619 183.48779297]
[307.39093018 186.51103210]
[317.55255127 197.61082458]
[319.20980835 212.38890076]
[332.34320068 219.63558960]
[345.47656250 226.88227844]
[361.29739380 226.77485657]
[368.70288086 239.69801331]
[381.83627319 246.94470215]
[393.27911377 237.03076172]
[407.39694214 231.64009094]
[422.47888184 231.40527344]
[436.70437622 236.33534241]
[448.36279297 245.81704712]
[456.05923462 258.69104004]
[458.88134766 273.39355469]
[456.50747681 288.14654541]
[469.64083862 295.39321899]
[482.77420044 302.63992310]
[495.90759277 309.88659668]
[509.04095459 317.13330078]
[526.98144531 311.16690063]
[543.33081055 320.01177979]
[547.99114990 337.67788696]
[561.39562988 344.40988159]
[577.20037842 343.68908691]
[585.10137939 356.31536865]
[598.69604492 362.65466309]
[612.46923828 368.59585571]
[626.24249268 374.53704834]
[640.07269287 380.34442139]
[653.95855713 386.01739502]
[668.43145752 379.66833496]
[683.12426758 385.49050903]
[689.31994629 400.02972412]
[683.34277344 414.66012573]
[668.73889160 420.70175171]
[654.17248535 414.57025146]
[648.28558350 399.90325928]
[634.39971924 394.23028564]
[626.98181152 394.61358643]
[620.30133057 388.31027222]
[606.52807617 382.36907959]
[592.75482178 376.42788696]
[589.32177734 377.41604614]
[585.23461914 376.75952148]
[581.28613281 374.16726685]
[578.36944580 369.71987915]
[563.52343750 370.92218018]
[554.66363525 357.81436157]
[541.25915527 351.08236694]
[531.41119385 356.95571899]
[519.83056641 357.32723999]
[509.41250610 351.98760986]
[502.81796265 342.16986084]
[501.79428101 330.26666260]
[488.66088867 323.01998901]
[475.52752686 315.77328491]
[462.39413452 308.52661133]
[449.26077271 301.27990723]
[438.04571533 311.15451050]
[424.10281372 316.60650635]
[409.10781860 316.95989990]
[394.87011719 312.15270996]
[383.11425781 302.74688721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 105]
[3 104]
[5 102]
[6 101]
[7 100]
[11 96]
[13 94]
[14 93]
[15 92]
[16 91]
[17 90]
[18 89]
[19 88]
[20 87]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[45 56]
[46 55]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[113 156]
[114 155]
[115 154]
[116 153]
[117 152]
[120 147]
[121 146]
[123 144]
[124 140]
[125 139]
[126 138]
[127 136]
[128 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
