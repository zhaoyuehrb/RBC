%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCAUUGAAUAACAGCCAAGUUGCUUUGGUUUCUAUUUCUUUGUUAAGUCGUUCCCUCUACAAAGGACUUCCUAGUGGGUGUGAAAGGCAGCGGUGGCCACAGAGGCGGCGGAGAG\
) } def
/len { sequence length } bind def

/coor [
[112.05230713 345.31533813]
[110.86554718 330.36236572]
[109.67879486 315.40939331]
[108.29476929 300.47335815]
[106.71371460 285.55691528]
[97.67801666 273.71609497]
[103.91762543 259.17724609]
[102.33657074 244.26081848]
[89.28250122 241.28392029]
[77.77922821 234.38754272]
[68.97215271 224.24179077]
[63.74336243 211.84109497]
[62.62330627 198.40678406]
[65.73699188 185.26678467]
[72.79022980 173.72444153]
[83.09735870 164.92907715]
[95.64788055 159.76174927]
[94.85625458 144.78265381]
[94.06462097 129.80355835]
[93.27299500 114.82446289]
[83.75609589 101.07365417]
[91.38036346 86.18988800]
[90.19361115 71.23690796]
[89.00685120 56.28392792]
[87.82009888 41.33094788]
[86.63333893 26.37796974]
[85.44658661 11.42498970]
[84.25983429 -3.52799034]
[83.07307434 -18.48097038]
[68.11788177 -25.39181137]
[58.71200943 -38.80361938]
[57.32451630 -55.03225708]
[64.23741150 -69.67704773]
[77.49465179 -78.81409454]
[75.91359711 -93.73053741]
[74.33254242 -108.64698029]
[72.75149536 -123.56342316]
[71.17044067 -138.47985840]
[68.21981049 -153.18679810]
[63.92478943 -167.55874634]
[59.62976837 -181.93067932]
[55.33474350 -196.30262756]
[51.03972244 -210.67457581]
[46.74469757 -225.04652405]
[42.44967651 -239.41845703]
[38.15465164 -253.79040527]
[24.52845764 -261.33789062]
[20.37742805 -275.97427368]
[27.65677643 -288.91824341]
[23.36175346 -303.29019165]
[8.93531895 -309.32443237]
[1.80873668 -323.24368286]
[5.34696102 -338.47573853]
[17.87935066 -347.82843018]
[33.48849487 -346.88577271]
[44.80423355 -336.09280396]
[46.48361969 -320.54565430]
[37.73369598 -307.58523560]
[42.02872086 -293.21328735]
[55.21669388 -286.38589478]
[59.77719116 -271.87188721]
[52.52659607 -258.08541870]
[56.82162094 -243.71348572]
[61.11664200 -229.34153748]
[65.41166687 -214.96958923]
[69.70668793 -200.59765625]
[74.00170898 -186.22570801]
[78.29673767 -171.85375977]
[82.59175873 -157.48182678]
[90.45552063 -170.25527954]
[104.61877441 -175.19514465]
[118.72072601 -170.08290100]
[126.42810822 -157.21447754]
[124.27950287 -142.36915588]
[113.23986053 -132.21405029]
[98.26713562 -131.30986023]
[86.08688354 -140.06091309]
[87.66793823 -125.14447784]
[89.24898529 -110.22803497]
[90.83003998 -95.31159210]
[92.41109467 -80.39514923]
[105.28926849 -75.65142059]
[114.89392853 -65.75555420]
[119.29319000 -52.61552811]
[117.56658173 -38.79967880]
[109.99695587 -27.03474998]
[98.02605438 -19.66772652]
[99.21281433 -4.71474600]
[100.39956665 10.23823357]
[101.58631897 25.19121361]
[102.77307892 40.14419556]
[103.95983124 55.09717560]
[105.14659119 70.05015564]
[106.33334351 85.00313568]
[114.76735687 93.14854431]
[115.54065704 104.84822083]
[108.25209045 114.03282928]
[109.04371643 129.01193237]
[109.83535004 143.99102783]
[110.62697601 158.97012329]
[126.52268982 164.28599548]
[139.16513062 175.23501587]
[146.66412354 190.14343262]
[147.91246033 206.74833679]
[142.74940491 222.54113770]
[131.98071289 235.14653015]
[117.25301361 242.67976379]
[118.83406830 257.59619141]
[127.98285675 270.50396729]
[121.63015747 283.97586060]
[123.21121216 298.89230347]
[127.27240753 307.21801758]
[124.63177490 314.22262573]
[125.81852722 329.17559814]
[127.00528717 344.12860107]
[136.74343872 357.32330322]
[129.93844604 372.24389648]
[113.59071350 373.54135132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 111]
[5 110]
[7 108]
[8 107]
[17 100]
[18 99]
[19 98]
[20 97]
[22 94]
[23 93]
[24 92]
[25 91]
[26 90]
[27 89]
[28 88]
[29 87]
[34 81]
[35 80]
[36 79]
[37 78]
[38 77]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
