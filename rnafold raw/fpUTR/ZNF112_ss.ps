%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGAGGUCAUCAUUCCUUUCAGGAAGUUGAGUGAGGCCUGAGACAGCAAUGUUUCGUUUAGCCUGGCGGCGGCCCUCCUUAUCUUCAAGAAGAGCAUCCGCGGCUAGCAGUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[80.97042084 177.19688416]
[72.43572998 164.86160278]
[68.77651215 150.31477356]
[70.45888519 135.40942383]
[77.26854706 122.04421997]
[88.33605194 111.92294312]
[74.14540863 116.78357697]
[59.95477295 121.64421082]
[45.76413345 126.50484467]
[31.57349586 131.36547852]
[24.36025238 137.17750549]
[16.94365311 136.16174316]
[2.62965274 140.64608765]
[-11.68434715 145.13044739]
[-25.99834633 149.61480713]
[-40.31234741 154.09915161]
[-54.62634659 158.58351135]
[-68.81698608 163.44413757]
[-82.87437439 168.67767334]
[-96.93176270 173.91119385]
[-110.98915100 179.14472961]
[-123.72335815 190.33741760]
[-138.00381470 181.19931030]
[-133.17604065 164.94726562]
[-116.22267914 165.08734131]
[-102.16529083 159.85380554]
[-88.10790253 154.62028503]
[-74.05051422 149.38674927]
[-71.24439240 145.38075256]
[-65.83716583 143.16792297]
[-59.11069870 144.26950073]
[-44.79669952 139.78515625]
[-30.48269844 135.30079651]
[-16.16869926 130.81645203]
[-1.85469949 126.33209229]
[12.45930004 121.84774017]
[26.71286201 117.17484283]
[40.90349960 112.31420898]
[55.09413910 107.45357513]
[69.28477478 102.59294128]
[83.47541809 97.73230743]
[88.70894623 83.67491913]
[81.15186310 70.71765900]
[73.59477997 57.76040649]
[66.03768921 44.80315018]
[58.48060608 31.84589386]
[50.92352295 18.88863945]
[36.42477798 11.22584343]
[36.08205414 -5.16972256]
[50.24791718 -13.43170547]
[64.34973907 -5.06088638]
[63.88077927 11.33155441]
[71.43786621 24.28880882]
[78.99494934 37.24606705]
[86.55203247 50.20331955]
[94.10911560 63.16057587]
[101.66619873 76.11782837]
[104.77449799 80.97853851]
[106.26235962 86.05914307]
[106.17128754 90.94969177]
[120.70200348 87.22702026]
[135.23272705 83.50434113]
[149.76344299 79.78166199]
[164.29414368 76.05899048]
[178.82485962 72.33631134]
[183.96391296 67.85869598]
[189.72613525 66.89355469]
[194.22084045 68.82228088]
[208.92776489 65.87165833]
[223.63470459 62.92103195]
[238.34162903 59.97040558]
[247.11418152 47.09873199]
[262.07113647 44.31588364]
[274.28823853 52.75849915]
[288.99517822 49.80787659]
[301.00372314 39.50713730]
[315.00433350 44.58970642]
[329.71127319 41.63908005]
[341.71981812 31.33834076]
[355.72042847 36.42090988]
[370.42733765 33.47028351]
[385.13427734 30.51965904]
[393.68325806 17.22715759]
[409.14501953 13.95466900]
[422.34640503 22.64370155]
[425.45523071 38.13920593]
[416.62710571 51.24797821]
[401.09960938 54.19281006]
[388.08489990 45.22658920]
[373.37796021 48.17721558]
[358.67105103 51.12784195]
[347.71441650 61.21752930]
[332.66189575 56.34601212]
[317.95495605 59.29663467]
[306.99835205 69.38632202]
[291.94580078 64.51480865]
[277.23886108 67.46543121]
[269.22378540 79.96719360]
[254.35090637 83.16905212]
[241.29225159 74.67733765]
[226.58532715 77.62796021]
[211.87838745 80.57859039]
[197.17146301 83.52921295]
[182.54754639 86.86702728]
[168.01683044 90.58970642]
[153.48611450 94.31237793]
[138.95539856 98.03505707]
[124.42468262 101.75773621]
[109.89396667 105.48040771]
[124.70237732 107.87018585]
[137.72837830 115.30815125]
[147.31268311 126.84683990]
[152.23440552 141.01640320]
[151.86660767 156.01188660]
[146.25614929 169.92314148]
[136.11769104 180.97807312]
[122.74271393 187.76850891]
[107.83495331 189.42944336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 28]
[19 27]
[20 26]
[21 25]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[65 104]
[68 103]
[69 102]
[70 101]
[71 100]
[74 97]
[75 96]
[77 94]
[78 93]
[80 91]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
