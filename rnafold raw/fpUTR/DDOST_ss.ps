%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCACCUCCCACCAGGGCACUUCCGGCGGCGCUCUCCGCGCCUUAUCGCCAAAGCUGCGGCUCUGGACGCCCAGCCGCGGCGUAUCCCGAUCACUUCCGGGUAGUGCUCCACGGGCACGAGCCGCGAUUGGGCUACCGUAG\
) } def
/len { sequence length } bind def

/coor [
[-86.56233215 263.37704468]
[-101.07207489 267.18066406]
[-116.07207489 267.18017578]
[-130.58157349 263.37567139]
[-143.65188599 256.01583862]
[-154.42843628 245.58195496]
[-162.20658875 232.75617981]
[-166.47778320 218.37715149]
[-166.96276855 203.38499451]
[-163.62982178 188.75996399]
[-156.69686890 175.45829773]
[-146.61720276 164.34973145]
[-134.04988098 156.16055298]
[-119.82023621 151.42694092]
[-134.46467590 148.18034363]
[-149.10911560 144.93374634]
[-163.75355530 141.68716431]
[-178.39799500 138.44056702]
[-193.04243469 135.19396973]
[-207.68687439 131.94737244]
[-216.82035828 133.14741516]
[-222.61372375 128.46691895]
[-231.65382385 134.68521118]
[-242.40419006 134.85478210]
[-251.26464844 129.16284180]
[-255.40261841 119.71895599]
[-269.80334473 115.52152252]
[-284.20410156 111.32408905]
[-298.60485840 107.12665558]
[-313.40451050 104.68321991]
[-328.39022827 104.02893066]
[-343.37594604 103.37464142]
[-358.36166382 102.72034454]
[-373.34741211 102.06605530]
[-386.09939575 111.80085754]
[-401.62542725 107.76089478]
[-408.01528931 93.04528046]
[-400.36718750 78.94257355]
[-384.54812622 76.27116394]
[-372.69311523 87.08032990]
[-357.70739746 87.73462677]
[-342.72164917 88.38891602]
[-327.73593140 89.04320526]
[-312.75021362 89.69749451]
[-324.25866699 80.07693481]
[-330.10226440 66.26199341]
[-328.99060059 51.30324173]
[-321.16918945 38.50381088]
[-308.36511230 30.69001961]
[-293.40570068 29.58727837]
[-279.59423828 35.43909073]
[-269.98052979 46.95328140]
[-266.68743896 61.58733749]
[-270.44210815 76.10981750]
[-280.41546631 87.31392670]
[-294.40740967 92.72590637]
[-280.00668335 96.92333984]
[-265.60592651 101.12077332]
[-251.20516968 105.31820679]
[-232.87672424 99.29780579]
[-219.04844666 113.89678955]
[-204.44029236 117.30293274]
[-189.79585266 120.54953003]
[-175.15141296 123.79611969]
[-160.50695801 127.04271698]
[-145.86251831 130.28930664]
[-131.21807861 133.53590393]
[-116.57364655 136.78250122]
[-111.96795654 134.40817261]
[-106.26383209 134.25318909]
[-100.56683350 136.78250122]
[-85.92239380 133.53590393]
[-71.27795410 130.28930664]
[-56.63351440 127.04271698]
[-41.98907471 123.79611969]
[-27.34463310 120.54953003]
[-16.59370613 110.24095154]
[-1.44599509 114.80793762]
[13.19844532 111.56134796]
[27.84288597 108.31475067]
[42.48732376 105.06815338]
[57.13176346 101.82156372]
[71.77620697 98.57496643]
[72.72533417 85.91945648]
[79.47576141 73.99348450]
[91.47696686 65.47154236]
[106.95677185 62.64238358]
[123.17135620 66.86290741]
[135.99504089 59.08130646]
[148.81871033 51.29970932]
[161.64239502 43.51810837]
[162.79307556 28.04375839]
[172.84527588 16.22288704]
[187.93370056 12.60085869]
[202.25654602 18.57042122]
[210.30639648 31.83615303]
[208.98789978 47.29711151]
[198.80805969 59.00823975]
[183.68122864 62.46637344]
[169.42399597 56.34178925]
[156.60031128 64.12339020]
[143.77662659 71.90498352]
[130.95295715 79.68658447]
[132.17466736 87.08641052]
[134.61810303 101.88606262]
[135.83981323 109.28588104]
[150.48425293 112.53247833]
[165.12869263 115.77907562]
[179.77313232 119.02566528]
[194.41758728 122.27226257]
[209.06202698 125.51885223]
[225.83436584 123.04405212]
[232.85549927 138.47584534]
[219.97044373 149.49452209]
[205.81542969 140.16329956]
[191.17098999 136.91670227]
[176.52655029 133.67010498]
[161.88211060 130.42350769]
[147.23767090 127.17691803]
[132.59323120 123.93032074]
[109.47978210 135.11955261]
[87.11219788 129.63723755]
[75.02279663 113.21940613]
[60.37836075 116.46600342]
[45.73392105 119.71259308]
[31.08947945 122.95919037]
[16.44503975 126.20578766]
[1.80059910 129.45237732]
[-9.99779606 139.99317932]
[-24.09803963 135.19396973]
[-38.74247742 138.44056702]
[-53.38692093 141.68716431]
[-68.03135681 144.93374634]
[-82.67579651 148.18034363]
[-97.32023621 151.42694092]
[-83.08725739 156.16215515]
[-70.52045441 164.35212708]
[-60.44149780 175.46133423]
[-53.50938034 188.76342773]
[-50.17735672 203.38867188]
[-50.66328430 218.38079834]
[-54.93539047 232.75956726]
[-62.71435547 245.58483887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[20 62]
[22 61]
[26 59]
[27 58]
[28 57]
[29 56]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[71 135]
[72 134]
[73 133]
[74 132]
[75 131]
[76 130]
[78 128]
[79 127]
[80 126]
[81 125]
[82 124]
[83 123]
[88 103]
[89 102]
[90 101]
[91 100]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
