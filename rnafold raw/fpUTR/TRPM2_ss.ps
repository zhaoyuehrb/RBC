%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCACCCCAUGUGUCUCUAGAACCCCAGUGUAGCGAGCUGGAGAGAGGACUGUCCUGAGGGCAGCAGGCCUGGUUGCAGCUGGCGUGGGGGUCUCAGA\
) } def
/len { sequence length } bind def

/coor [
[31.06532097 266.53594971]
[27.18707657 276.63046265]
[19.45967293 284.07800293]
[9.38368607 287.52844238]
[-1.12440014 286.39859009]
[-9.86551571 298.58847046]
[-18.60663033 310.77832031]
[-17.42765808 326.77798462]
[-29.29902649 337.56921387]
[-45.11404037 334.87387085]
[-52.74077225 320.75958252]
[-46.32864761 306.05368042]
[-30.79649925 302.03720093]
[-22.05538368 289.84735107]
[-13.31426907 277.65747070]
[-18.03698540 258.91796875]
[-7.53058577 242.34428406]
[12.01693439 238.50479126]
[19.58417702 225.55346680]
[27.15142059 212.60214233]
[34.51633072 199.53469849]
[41.67712784 186.35429382]
[48.83792877 173.17388916]
[49.27275848 165.66148376]
[56.43191528 159.70001221]
[63.99915695 146.74868774]
[71.56639862 133.79736328]
[79.13364410 120.84603119]
[72.79019165 111.38368988]
[70.50572968 100.22319794]
[72.62102509 89.02941132]
[78.82054138 79.47215271]
[88.17947388 72.97709656]
[99.30171967 70.51315308]
[110.52812195 72.44786072]
[119.26924133 60.25799179]
[121.02339172 44.53432846]
[134.72787476 38.70025253]
[143.46897888 26.51038361]
[152.21009827 14.32051468]
[160.95121765 2.13064647]
[169.69233704 -10.05922222]
[171.44648743 -25.78288460]
[185.15095520 -31.61696053]
[193.89207458 -43.80682755]
[191.52626038 -59.20295334]
[200.56465149 -71.44069672]
[215.25708008 -73.60125732]
[223.99819946 -85.79112244]
[232.73930359 -97.98099518]
[233.24778748 -119.28318024]
[252.03163147 -127.58869171]
[259.59887695 -140.54002380]
[267.16613770 -153.49134827]
[274.73336792 -166.44267273]
[282.30059814 -179.39399719]
[289.86785889 -192.34532166]
[292.63787842 -209.07144165]
[309.47717285 -211.03991699]
[316.03027344 -195.40365601]
[302.81918335 -184.77807617]
[295.25192261 -171.82675171]
[287.68469238 -158.87542725]
[280.11746216 -145.92410278]
[272.55020142 -132.97277832]
[264.98297119 -120.02144623]
[268.71166992 -111.62485504]
[268.04370117 -102.32217407]
[263.00534058 -94.30842590]
[254.66940308 -89.53605652]
[244.92918396 -89.23987579]
[236.18806458 -77.05001068]
[227.44694519 -64.86013794]
[230.11430359 -50.25121307]
[221.42321777 -37.76443100]
[206.08193970 -35.06571198]
[197.34083557 -22.87584496]
[196.21189880 -8.02408409]
[181.88220215 -1.31810677]
[173.14108276 10.87176228]
[164.39996338 23.06163025]
[155.65885925 35.25149918]
[146.91773987 47.44136810]
[145.78881836 62.29312897]
[131.45910645 68.99910736]
[122.71799469 81.18897247]
[129.44538879 98.28794861]
[124.74501038 116.05136871]
[110.44108582 127.58524323]
[92.08496857 128.41326904]
[84.51772308 141.36459351]
[76.95048523 154.31591797]
[69.38323975 167.26725769]
[62.01832962 180.33470154]
[54.85752869 193.51509094]
[47.69673157 206.69549561]
[46.30422974 215.90708923]
[40.10274506 220.16938782]
[32.53550339 233.12071228]
[24.96825981 246.07203674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[18 100]
[19 99]
[20 98]
[21 96]
[22 95]
[23 94]
[25 93]
[26 92]
[27 91]
[28 90]
[35 86]
[36 85]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[44 77]
[45 76]
[48 73]
[49 72]
[50 71]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
