%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAAGCCCAUCCACCAAUCCUCACCUCUCACCUCUGUGUCCGCCCUGCUGGGAAAUAUUCCAGGCUUUGGCCAAGGCCAGUGCAGCCCCAGGUUCCCGAGCGGCAGGUUGGGUGCGGACC\
) } def
/len { sequence length } bind def

/coor [
[-12.86318588 376.69918823]
[-28.86711502 378.49365234]
[-34.51803207 392.38851929]
[-40.16895294 406.28338623]
[-33.79687881 420.74618530]
[-39.59568024 435.44818115]
[-54.12503052 441.66699219]
[-68.76492310 435.71307373]
[-74.82976532 421.11880493]
[-68.72140503 406.54266357]
[-54.06381226 400.63247681]
[-48.41289139 386.73760986]
[-42.76197433 372.84274292]
[-51.87122345 362.58270264]
[-55.66491699 349.32821655]
[-53.34141922 335.67135620]
[-45.30126572 324.30874634]
[-33.07948303 317.50918579]
[-19.05280685 316.66070557]
[-13.04599857 302.91595459]
[-7.03918934 289.17120361]
[-9.03232288 274.41055298]
[3.58382916 264.86364746]
[9.59063721 251.11889648]
[15.59744644 237.37414551]
[21.60425568 223.62939453]
[27.61106300 209.88464355]
[22.99659538 200.60562134]
[24.34322548 190.10748291]
[31.44044113 181.95993042]
[42.08132172 179.07009888]
[48.78772736 165.65278625]
[55.49413300 152.23548889]
[62.20054245 138.81817627]
[47.97674561 143.58091736]
[33.61170578 139.26284790]
[24.37138557 127.44691467]
[23.64311218 112.46459961]
[31.69385910 99.80815887]
[45.57236862 94.11721039]
[60.19103622 97.47794342]
[70.19092560 108.65837860]
[71.90649414 123.55881500]
[81.21563721 111.79701233]
[90.52478027 100.03521729]
[91.11648560 94.69361877]
[94.71782684 90.10106659]
[100.62849426 87.92387390]
[110.53077698 76.65689087]
[120.43305969 65.38991547]
[130.18945312 53.99637604]
[139.79835510 42.47816849]
[149.40725708 30.95996284]
[159.01614380 19.44175720]
[168.62504578 7.92355013]
[153.75234985 5.97348928]
[145.77940369 -6.73211288]
[150.49241638 -20.97246361]
[164.47100830 -26.41296387]
[177.57054138 -19.10529709]
[180.28413391 -4.35201597]
[191.29241943 -14.54111576]
[196.24786377 -33.99962234]
[215.14920044 -37.73126602]
[225.61836243 -48.47354889]
[236.08752441 -59.21583176]
[246.55668640 -69.95811462]
[256.60321045 -81.09667206]
[266.21209717 -92.61487579]
[275.82101440 -104.13307953]
[285.42990112 -115.65129089]
[295.03878784 -127.16949463]
[297.30560303 -143.41122437]
[312.60427856 -149.31735229]
[325.19686890 -138.81216431]
[322.12918091 -122.70250702]
[306.55700684 -117.56060028]
[296.94808960 -106.04238892]
[287.33920288 -94.52418518]
[277.73031616 -83.00598145]
[268.12139893 -71.48777008]
[268.12448120 -67.84899139]
[266.28860474 -64.03802490]
[262.55825806 -60.95551682]
[257.29895020 -59.48895264]
[246.82980347 -48.74666977]
[236.36064148 -38.00438690]
[225.89147949 -27.26210403]
[226.93611145 -16.95180511]
[221.97280884 -7.60354757]
[212.45776367 -2.48331141]
[201.48152161 -3.53283548]
[190.47323608 6.65626478]
[180.14324951 17.53244781]
[170.53436279 29.05065536]
[160.92546082 40.56886292]
[151.31655884 52.08706665]
[141.70765686 63.60527420]
[139.81654358 70.84272766]
[131.70004272 75.29219818]
[121.79775238 86.55917358]
[111.89546967 97.82615662]
[102.28657532 109.34436035]
[92.97743225 121.10615540]
[83.66828918 132.86795044]
[75.61784363 145.52458191]
[68.91143799 158.94189453]
[62.20503235 172.35920715]
[55.49862671 185.77650452]
[57.72576904 205.73219299]
[41.35581589 215.89144897]
[35.34900665 229.63619995]
[29.34219933 243.38095093]
[23.33539200 257.12570190]
[17.32858276 270.87045288]
[18.89206886 286.61422729]
[6.70556402 295.17800903]
[0.69875544 308.92276001]
[-5.30805302 322.66751099]
[4.62019730 335.81890869]
[6.58488131 352.08535767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[19 119]
[20 118]
[21 117]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[31 109]
[32 108]
[33 107]
[34 106]
[43 105]
[44 104]
[45 103]
[48 102]
[49 101]
[50 100]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[61 93]
[62 92]
[64 88]
[65 87]
[66 86]
[67 85]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
