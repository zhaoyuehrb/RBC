%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGACACGUGGGUGGGGGAAGCUGAGCGCUGAGACCAAGGGCUAAAGCUGGGAGGUGAGUCUGUCACCUUGAGCCGGGCGAGCGCUGUGGGCCAAGCAGGGGUUGCAGGGUAGUAGGAGUGCAGACUGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[134.45379639 147.95877075]
[124.40790558 153.77137756]
[113.41914368 157.50682068]
[101.91200256 159.02078247]
[90.33099365 158.25477600]
[79.12350464 155.23838806]
[72.08142853 168.48260498]
[65.03935242 181.72682190]
[66.15212250 198.08816528]
[52.39013290 207.00666809]
[37.91054535 199.30773926]
[37.60871887 182.91137695]
[51.79514313 174.68473816]
[58.83721542 161.44053650]
[65.87928772 148.19631958]
[58.99733353 142.49575806]
[53.05437088 135.82200623]
[48.18650436 128.32789612]
[44.50521088 120.18505096]
[42.09479904 111.57995605]
[41.01046371 102.70967102]
[26.06019020 101.48929596]
[11.10991669 100.26891327]
[-3.84035683 99.04853058]
[-20.24081039 107.32765961]
[-34.30474091 96.89689636]
[-49.27936172 96.02472687]
[-64.25398254 95.15254974]
[-78.48069763 102.07434845]
[-90.73654938 93.61011505]
[-105.71117401 92.73794556]
[-116.31001282 104.23571014]
[-131.82632446 106.17942810]
[-144.93377686 97.65132904]
[-149.44345093 82.67811584]
[-143.22599792 68.32969666]
[-129.21710205 61.38094330]
[-114.03136444 65.11284637]
[-104.83899689 77.76332092]
[-89.86437988 78.63549805]
[-76.70875549 71.65130615]
[-63.38181305 80.17792511]
[-48.40719223 81.05010223]
[-33.43256760 81.92227173]
[-24.13651276 74.09284973]
[-11.59805584 74.75464630]
[-2.61997676 84.09825897]
[12.33029652 85.31864166]
[27.28056908 86.53901672]
[42.23084259 87.75939941]
[49.90699387 68.73022461]
[63.63136673 53.47656250]
[81.74687958 43.84012604]
[102.06626892 40.98442459]
[122.13617706 45.25424576]
[139.53337097 56.13406372]
[152.15731812 72.31024170]
[162.33869934 60.20033646]
[176.97770691 62.94789505]
[191.01245117 57.65393829]
[205.04718018 52.35997772]
[219.08192444 47.06602097]
[233.11666870 41.77206039]
[247.15141296 36.47810364]
[254.15383911 30.46751022]
[261.57479858 31.22841644]
[275.72894287 26.26246452]
[289.88305664 21.29651451]
[303.97845459 16.16621208]
[318.01318359 10.87225342]
[332.04794312 5.57829475]
[346.08267212 0.28433618]
[357.36346436 -14.21610928]
[374.53808594 -10.80615807]
[388.44583130 -16.42525673]
[402.35357666 -22.04435539]
[408.59487915 -36.31615067]
[422.77935791 -41.81659698]
[436.34686279 -35.77853394]
[450.25463867 -41.39763260]
[464.16238403 -47.01673126]
[478.07015991 -52.63582993]
[487.96701050 -64.97937012]
[502.66595459 -62.57318497]
[512.56280518 -74.91672516]
[527.26177979 -72.51054382]
[541.16955566 -78.12963867]
[555.07727051 -83.74874115]
[568.98504639 -89.36783600]
[573.64495850 -104.29498291]
[586.83740234 -112.69095612]
[602.33343506 -110.59143829]
[612.81622314 -98.98776245]
[613.33612061 -83.35882568]
[603.64764404 -71.08412933]
[588.32543945 -67.95941925]
[574.60412598 -75.46008301]
[560.69641113 -69.84098053]
[546.78863525 -64.22188568]
[532.88085938 -58.60278320]
[523.97882080 -46.66116333]
[508.28506470 -48.66542816]
[499.38299561 -36.72380829]
[483.68923950 -38.72807312]
[469.78149414 -33.10897446]
[455.87371826 -27.48987579]
[441.96597290 -21.87077713]
[436.40069580 -8.10257244]
[422.37631226 -2.20588589]
[407.97268677 -8.13659763]
[394.06494141 -2.51749873]
[380.15716553 3.10160017]
[375.10516357 14.15572643]
[363.48931885 18.92257881]
[351.37664795 14.31907845]
[337.34188843 19.61303711]
[323.30715942 24.90699577]
[309.27239990 30.20095444]
[304.07672119 35.55394745]
[294.84902954 35.45064163]
[280.69488525 40.41659164]
[266.54077148 45.38254547]
[252.44537354 50.51284790]
[238.41062927 55.80680466]
[224.37588501 61.10076141]
[210.34114075 66.39472198]
[196.30639648 71.68868256]
[182.27165222 76.98263550]
[173.09411621 88.71388245]
[157.45126343 86.34498596]
[159.01243591 97.84581757]
[158.29396057 109.42987061]
[155.32359314 120.64964294]
[150.21609497 131.07173157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 15]
[7 14]
[8 13]
[21 50]
[22 49]
[23 48]
[24 47]
[26 44]
[27 43]
[28 42]
[30 40]
[31 39]
[57 130]
[59 128]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
[66 122]
[67 121]
[68 120]
[69 118]
[70 117]
[71 116]
[72 115]
[74 112]
[75 111]
[76 110]
[79 107]
[80 106]
[81 105]
[82 104]
[84 102]
[86 100]
[87 99]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
