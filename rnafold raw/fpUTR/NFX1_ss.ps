%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAACGCGCCACACAGAUUCGGGCUGCGCAACCUCUGUGGCCGUCUACACGGCGCGCAGAUGCGAAUAUUCUCGCGGCGCCGGAAGUCCGGGGCACGUGACCUGGUGACAGUGCUGACUUGGCUGUACAGCUCGAUCUAGGUUCUGCGGCACGGG\
) } def
/len { sequence length } bind def

/coor [
[100.01021576 481.82348633]
[108.39358521 467.72912598]
[108.09345245 452.73211670]
[95.48704529 441.63848877]
[94.76322937 424.52420044]
[106.85433197 411.91912842]
[106.25418854 396.93112183]
[105.65404510 381.94314575]
[105.05390167 366.95513916]
[93.96877289 357.07305908]
[93.14663696 341.88165283]
[103.58703613 330.32156372]
[102.98689270 315.33358765]
[91.90176392 305.45150757]
[91.07962036 290.26010132]
[101.52001953 278.70001221]
[100.91987610 263.71200562]
[100.31973267 248.72401428]
[99.71958923 233.73602295]
[96.29039001 227.14144897]
[99.26042175 218.44277954]
[98.96028900 203.44577026]
[98.66015625 188.44877625]
[98.36002350 173.45178223]
[98.05989075 158.45478821]
[97.75975800 143.45779419]
[97.45962524 128.46078491]
[74.92173767 104.14881897]
[60.54871368 99.85742188]
[46.17568588 95.56602478]
[31.80265808 91.27462769]
[26.61694527 92.51567841]
[21.95503426 91.68957520]
[18.52661324 89.35420227]
[16.71032333 86.27046967]
[2.62064528 81.12450409]
[-11.46903229 75.97853088]
[-25.55871010 70.83256531]
[-39.64838791 65.68659973]
[-53.73806381 60.54063034]
[-67.87852478 55.53588486]
[-82.06834412 50.67286301]
[-96.25816345 45.80984116]
[-110.44798279 40.94682312]
[-124.63780975 36.08380127]
[-140.61834717 39.76544571]
[-151.59751892 27.58390617]
[-146.28088379 12.07050800]
[-130.13775635 9.18410397]
[-119.77478790 21.89398003]
[-105.58496094 26.75699997]
[-91.39514160 31.62001991]
[-77.20532227 36.48303986]
[-63.01549911 41.34606171]
[-55.62699127 40.53501511]
[-48.59209442 46.45095062]
[-34.50241852 51.59692001]
[-20.41274071 56.74288940]
[-6.32306337 61.88885498]
[7.76661396 67.03482819]
[21.85629082 72.18079376]
[36.09405518 76.90160370]
[50.46708298 81.19300079]
[64.84011078 85.48439789]
[79.21313477 89.77579498]
[65.20504761 84.41171265]
[57.41154480 71.59526825]
[59.09408569 56.68992996]
[69.54855347 45.93334579]
[84.39992523 43.82696915]
[97.43313599 51.25228500]
[103.19400787 65.10192108]
[99.27099609 79.58106995]
[104.27574158 65.44061279]
[109.28048706 51.30015945]
[114.28523254 37.15970230]
[119.28997803 23.01924324]
[124.15299225 8.82942200]
[128.87380981 -5.40834284]
[125.87287903 -20.94233894]
[137.22253418 -30.58777809]
[141.94334412 -44.82554245]
[146.66415405 -59.06330872]
[151.38496399 -73.30107117]
[147.54362488 -89.24397278]
[159.61470032 -100.34446716]
[175.18052673 -95.18331909]
[178.22828674 -79.06987762]
[165.62272644 -68.58026123]
[160.90191650 -54.34249878]
[156.18110657 -40.10473251]
[151.46029663 -25.86696815]
[154.79888916 -11.35135269]
[143.11157227 -0.68753344]
[138.39076233 13.55023193]
[139.27568054 20.93025780]
[133.43043518 28.02398872]
[128.42568970 42.16444778]
[123.42094421 56.30490112]
[118.41619873 70.44535828]
[113.41145325 84.58581543]
[123.30633545 95.85929108]
[137.97647095 92.73082733]
[149.85943604 82.28546143]
[163.92054749 87.19815826]
[178.59066772 84.06969452]
[193.26080322 80.94123840]
[205.14376831 70.49586487]
[219.20487976 75.40856171]
[227.59230042 62.01353455]
[243.01330566 58.55409622]
[256.31890869 67.08266449]
[259.61511230 82.53939819]
[250.94635010 95.75408936]
[235.45562744 98.88668823]
[222.33332825 90.07869720]
[211.49967957 100.30029297]
[196.38926697 95.61136627]
[181.71913147 98.73983002]
[167.04899597 101.86828613]
[156.21534729 112.08988953]
[141.10493469 107.40096283]
[126.43479919 110.52941895]
[141.23161316 112.98999786]
[149.39501953 125.57406616]
[145.61018372 140.08871460]
[132.34126282 147.08412170]
[118.22703552 142.00587463]
[112.45662689 128.16065979]
[112.75675201 143.15765381]
[113.05688477 158.15464783]
[113.35701752 173.15165710]
[113.65715027 188.14865112]
[113.95728302 203.14564514]
[114.25741577 218.14263916]
[114.70757294 233.13587952]
[115.30772400 248.12387085]
[115.90786743 263.11187744]
[116.50801086 278.09985352]
[127.83927155 288.78817749]
[128.23439026 303.99667358]
[117.97487640 314.73342896]
[118.57501984 329.72143555]
[129.90628052 340.40975952]
[130.30140686 355.61825562]
[120.04189301 366.35501099]
[120.64203644 381.34298706]
[121.24217987 396.33099365]
[121.84232330 411.31896973]
[132.74882507 419.27923584]
[137.00007629 431.88946533]
[133.25054932 444.45455933]
[123.09044647 452.43197632]
[123.39057922 467.42898560]
[132.33114624 481.17663574]
[124.65544891 495.66857910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[6 149]
[7 148]
[8 147]
[9 146]
[12 143]
[13 142]
[16 139]
[17 138]
[18 137]
[19 136]
[21 135]
[22 134]
[23 133]
[24 132]
[25 131]
[26 130]
[27 129]
[28 65]
[29 64]
[30 63]
[31 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 95]
[79 94]
[81 92]
[82 91]
[83 90]
[84 89]
[102 123]
[103 122]
[105 120]
[106 119]
[107 118]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
