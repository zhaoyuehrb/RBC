%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUUCCAAGCGCUUAUUGGUGAAGGCUGCCGUCGCUCGGGCGGUGGCGGGCUCCGGGAUUGGCGGUUGCUUGGCGGGCGGUGUCAGGCUCUCGGUGGCGGCGGAGGCGGCGGAGGCCAGGGAGGAAGAUGUCGUA\
) } def
/len { sequence length } bind def

/coor [
[93.83473969 223.32167053]
[105.36174011 212.93379211]
[103.65803528 198.03086853]
[94.52523804 186.26475525]
[100.64504242 171.67507935]
[98.94133759 156.77214050]
[97.23764038 141.86921692]
[95.53393555 126.96628571]
[88.46697998 124.45468903]
[77.04982758 134.18344116]
[74.33306122 119.43148804]
[67.26610565 116.91989136]
[56.53946304 127.40508270]
[45.81282043 137.89027405]
[35.08617783 148.37545776]
[31.18517113 164.30386353]
[15.36674118 168.62928772]
[3.90353274 156.90209961]
[8.58791256 141.18623352]
[24.60099220 137.64881897]
[35.32763672 127.16362762]
[46.05427933 116.67843628]
[56.78092194 106.19325256]
[54.51206207 99.04466248]
[39.86148071 95.82588959]
[49.97434235 84.74749756]
[47.70548248 77.59890747]
[32.89553833 75.21867371]
[18.08559418 72.83843231]
[3.27564931 70.45819092]
[-11.53429508 68.07795715]
[-26.34424019 65.69771576]
[-41.15418625 63.31747818]
[-55.96413040 60.93724060]
[-70.77407837 58.55700302]
[-84.56479645 66.75428772]
[-99.52053070 60.94863129]
[-104.16851044 45.59363937]
[-94.94320679 32.46834564]
[-78.92148590 31.64135170]
[-68.39383698 43.74705887]
[-53.58389282 46.12729645]
[-38.77394867 48.50753403]
[-23.96400261 50.88777161]
[-9.15405750 53.26801300]
[5.65588760 55.64825058]
[20.46583176 58.02848816]
[35.27577591 60.40872574]
[50.08572388 62.78896332]
[95.92443848 50.86330032]
[125.16694641 73.76770782]
[125.00617218 57.94731522]
[137.90428162 50.49829483]
[145.10664368 37.34055328]
[152.30899048 24.18281555]
[159.51135254 11.02507591]
[166.71369934 -2.13266301]
[160.24838257 -16.11500740]
[163.22128296 -31.04870415]
[174.28674316 -41.24770355]
[189.05914307 -42.95479965]
[196.26148987 -56.11254120]
[203.46385193 -69.27027893]
[203.30307007 -85.09066772]
[216.20118713 -92.53968811]
[223.40353394 -105.69743347]
[230.60589600 -118.85517120]
[226.39503479 -133.85205078]
[233.88667297 -147.09326172]
[248.20985413 -151.01525879]
[255.41221619 -164.17300415]
[262.61456299 -177.33073425]
[269.81692505 -190.48847961]
[277.01928711 -203.64622498]
[284.22161865 -216.80395508]
[291.42398071 -229.96170044]
[298.62634277 -243.11943054]
[295.52059937 -258.85900879]
[305.99938965 -271.00701904]
[322.02432251 -270.24453735]
[331.30239868 -257.15649414]
[326.71630859 -241.78291321]
[311.78408813 -235.91708374]
[304.58172607 -222.75933838]
[297.37936401 -209.60160828]
[290.17700195 -196.44386292]
[282.97467041 -183.28613281]
[275.77230835 -170.12838745]
[268.56994629 -156.97064209]
[261.36758423 -143.81291199]
[265.78256226 -129.63392639]
[258.66580200 -116.18750000]
[243.76362610 -111.65281677]
[236.56127930 -98.49507904]
[229.35893250 -85.33733368]
[230.03486633 -70.45807648]
[216.62158203 -62.06792450]
[209.41923523 -48.91018677]
[202.21688843 -35.75244522]
[208.73970032 -22.38865852]
[206.11152649 -7.57121229]
[195.13389587 2.98081207]
[179.87144470 5.06969070]
[172.66908264 18.22743034]
[165.46673584 31.38516808]
[158.26437378 44.54290771]
[151.06202698 57.70064545]
[151.73796082 72.57991028]
[138.32469177 80.97006226]
[142.53578186 95.36682129]
[155.69351196 102.56917572]
[168.85125732 109.77153015]
[185.22491455 108.85749054]
[193.97567749 122.72674561]
[186.10151672 137.11178589]
[169.70268250 137.21452332]
[161.64891052 122.92926788]
[148.49116516 115.72691345]
[135.33341980 108.52455902]
[129.10928345 112.70906067]
[140.91540527 121.96193695]
[135.76367188 136.04949951]
[120.77362061 135.50318909]
[116.66101074 121.07807159]
[110.43686676 125.26258087]
[112.14057159 140.16551208]
[113.84427643 155.06845093]
[115.54797363 169.97137451]
[124.80263519 182.80343628]
[118.56096649 196.32716370]
[120.26467133 211.23008728]
[133.83869934 218.74841309]
[140.37063599 232.82369995]
[137.34881592 248.04368591]
[125.93518829 258.55599976]
[110.51852417 260.31845093]
[97.02685547 252.65328979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 131]
[3 130]
[5 128]
[6 127]
[7 126]
[8 125]
[12 23]
[13 22]
[14 21]
[15 20]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[51 109]
[53 107]
[54 106]
[55 105]
[56 104]
[57 103]
[61 99]
[62 98]
[63 97]
[65 95]
[66 94]
[67 93]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
