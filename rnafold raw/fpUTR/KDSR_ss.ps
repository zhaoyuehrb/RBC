%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCCCCUCCGCCGCGGCCCGCCCCGGCCCGCAAACCCAAACACUCCAGGCGCCCGCCCGCCGCGCGUGAUUCUCGCCUCGCCGCAGCCCAGCCCUGCGCGCCUUGCCCGGCGGCCCCCGCCCGGCCGCUCCGGGCCCCUGGCCCCGCGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[105.73005676 251.92268372]
[91.73088074 258.24081421]
[76.44978333 256.69689941]
[63.99730301 247.70626831]
[57.72309875 233.68736267]
[59.31489563 218.41117859]
[68.34451294 205.98693848]
[82.38302612 199.75669861]
[83.89085388 184.83268738]
[85.39868164 169.90866089]
[86.90650940 154.98463440]
[88.41434479 140.06062317]
[89.92217255 125.13659668]
[76.39963531 118.41657257]
[67.51198578 104.43901062]
[55.16722488 112.95998383]
[42.82246780 121.48095703]
[30.47770882 130.00192261]
[23.51567841 144.20899963]
[8.64605141 145.07122803]
[-3.69870687 153.59220886]
[-16.04346466 162.11317444]
[-25.64410210 176.08686829]
[-41.72941971 170.72973633]
[-41.03450012 153.79002380]
[-24.56443596 149.76841736]
[-12.21967793 141.24745178]
[0.12507990 132.72647095]
[6.20413160 119.12889099]
[21.95673943 117.65716553]
[34.30149460 109.13619995]
[46.64625549 100.61522675]
[58.99101257 92.09425354]
[44.07229614 93.65371704]
[30.35064507 99.71311188]
[15.36202145 100.29718781]
[1.21045089 95.32395172]
[-10.11753941 85.49153137]
[-17.03178596 72.18013763]
[-18.56169891 57.25835800]
[-14.49252033 42.82084656]
[-5.39545918 30.89426041]
[7.45248556 23.15279198]
[22.24778557 20.68315315]
[36.91355133 23.83201599]
[49.39107513 32.15736008]
[57.92882919 44.49051666]
[61.32837677 59.10148239]
[69.04397583 71.96497345]
[68.43998718 56.97714233]
[67.83599854 41.98930740]
[67.23200989 27.00147057]
[66.62802124 12.01363659]
[66.02403259 -2.97419834]
[65.26915741 -17.95519257]
[53.38229752 -34.18928146]
[62.62438583 -51.13564682]
[61.11655426 -66.05966949]
[47.37739563 -76.84368896]
[45.69279099 -93.88958740]
[56.61700821 -106.64224243]
[54.80895996 -121.53287506]
[45.46464539 -134.29980469]
[51.61142731 -147.86689758]
[49.80337906 -162.75753784]
[47.99532700 -177.64816284]
[43.83310699 -185.84513855]
[46.30391693 -192.85647583]
[44.79608536 -207.78048706]
[43.28825378 -222.70451355]
[41.78042603 -237.62854004]
[28.30630493 -245.32449341]
[21.95978737 -259.48434448]
[25.18123817 -274.66333008]
[36.73194504 -285.02484131]
[52.17042160 -286.58465576]
[65.56026459 -278.74298096]
[71.75279999 -264.51510620]
[68.36687469 -249.37196350]
[56.70444870 -239.13636780]
[58.21227646 -224.21234131]
[59.72010803 -209.28833008]
[61.22793579 -194.36430359]
[62.88596344 -179.45622253]
[64.69401550 -164.56558228]
[66.50205994 -149.67495728]
[75.71704865 -137.97309875]
[69.69959259 -123.34091949]
[71.50764465 -108.45028687]
[82.68757629 -101.97751617]
[88.16358185 -90.06215668]
[85.72335815 -76.97940063]
[76.04057312 -67.56750488]
[77.54840851 -52.64347839]
[86.06525421 -46.87180710]
[90.05419922 -37.14974213]
[87.95979309 -26.62727737]
[80.24179077 -18.86087036]
[83.80530548 -12.33667850]
[81.01186371 -3.57818747]
[81.61585999 11.40964699]
[82.21984863 26.39748192]
[82.82383728 41.38531876]
[83.42782593 56.37315369]
[84.03181458 71.36098480]
[112.61998749 66.25967407]
[136.92590332 86.67491150]
[151.92590332 86.67491150]
[166.92590332 86.67491150]
[180.72607422 78.93761444]
[193.45333862 86.67491150]
[208.45333862 86.67491150]
[223.45333862 86.67491150]
[238.45333862 86.67491150]
[253.45333862 86.67491150]
[269.29248047 80.62857056]
[279.48724365 94.17491150]
[269.29248047 107.72125244]
[253.45333862 101.67491150]
[238.45333862 101.67491150]
[223.45333862 101.67491150]
[208.45333862 101.67491150]
[193.45333862 101.67491150]
[180.72607422 109.41221619]
[166.92590332 101.67491150]
[151.92590332 101.67491150]
[136.92590332 101.67491150]
[133.57490540 108.38467407]
[146.99443054 115.08664703]
[160.41384888 121.78883362]
[153.71145630 135.20814514]
[140.29244995 128.50616455]
[126.87293243 121.80419159]
[123.52194214 128.51394653]
[132.53308105 140.50559998]
[141.54421997 152.49723816]
[150.55534363 164.48887634]
[159.56648254 176.48051453]
[173.91542053 185.51071167]
[169.21031189 201.79869080]
[152.25637817 201.78642273]
[147.57484436 185.49165344]
[138.56370544 173.50001526]
[129.55256653 161.50836182]
[120.54143524 149.51672363]
[111.53030396 137.52508545]
[107.85263062 132.22613525]
[104.84619904 126.64442444]
[103.33836365 141.56845093]
[101.83053589 156.49246216]
[100.32270813 171.41648865]
[98.81487274 186.34051514]
[97.30704498 201.26454163]
[109.81564331 210.17692566]
[116.17760468 224.15621948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 153]
[9 152]
[10 151]
[11 150]
[12 149]
[13 148]
[15 33]
[16 32]
[17 31]
[18 30]
[20 28]
[21 27]
[22 26]
[49 105]
[50 104]
[51 103]
[52 102]
[53 101]
[54 100]
[55 98]
[57 94]
[58 93]
[61 89]
[62 88]
[64 86]
[65 85]
[66 84]
[68 83]
[69 82]
[70 81]
[71 80]
[107 127]
[108 126]
[109 125]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
[134 146]
[135 145]
[136 144]
[137 143]
[138 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
