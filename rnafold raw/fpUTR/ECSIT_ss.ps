%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUGCUACCUCCCUGGAGCUCCCUGACCCGGACGCUCUCUGGGCCAAUAUGGCAGCGCCCAGCAACAAGACAGAGCUGGCCUGGAGUCCGCGGCUGGCCGCGUGAGUAGGUGAUUGUCUGACAAGCAGAGGC\
) } def
/len { sequence length } bind def

/coor [
[34.26643372 134.82562256]
[25.08814049 136.41616821]
[16.35592270 133.59512329]
[10.03674412 127.13330078]
[-4.79198122 129.39358521]
[-19.62070656 131.65386963]
[-34.44943237 133.91415405]
[-49.27816010 136.17445374]
[-64.10688782 138.43473816]
[-72.05826569 155.73645020]
[-88.64817047 164.77647400]
[-107.20380402 162.12077332]
[-120.38176727 148.99952698]
[-135.01669312 152.28871155]
[-149.65162659 155.57788086]
[-162.84069824 168.36723328]
[-179.37359619 162.60021973]
[-193.92802429 166.22904968]
[-208.48246765 169.85787964]
[-223.03689575 173.48670959]
[-237.59133911 177.11553955]
[-252.10256958 180.91346741]
[-266.56863403 184.87997437]
[-281.03466797 188.84648132]
[-287.39599609 203.13171387]
[-301.47396851 209.93936157]
[-316.62145996 206.05506897]
[-325.68624878 193.31288147]
[-324.38824463 177.72926331]
[-313.34030151 166.66232300]
[-297.75894165 165.33753967]
[-285.00119019 174.38043213]
[-270.53512573 170.41392517]
[-256.06909180 166.44740295]
[-250.39831543 161.60052490]
[-241.22016907 162.56109619]
[-226.66572571 158.93226624]
[-212.11129761 155.30343628]
[-197.55685425 151.67462158]
[-183.00242615 148.04579163]
[-176.46115112 137.80233765]
[-164.29492188 134.69848633]
[-152.94081116 140.94294739]
[-138.30587769 137.65377808]
[-123.67094421 134.36459351]
[-121.22100067 123.32392883]
[-114.76271057 113.97730255]
[-105.21579742 107.72419739]
[-93.96584320 105.51864624]
[-82.66320038 107.72384644]
[-72.98094177 114.05301666]
[-66.36717224 123.60601044]
[-51.53844452 121.34571838]
[-36.70972061 119.08543396]
[-21.88099289 116.82514954]
[-7.05226707 114.56486511]
[7.77645874 112.30458069]
[22.56046677 97.97521210]
[42.47904205 105.71266937]
[57.11397552 102.42349243]
[71.74890900 99.13431549]
[86.34458160 95.67507935]
[96.53472137 86.10153961]
[110.02658844 89.77048492]
[124.58102417 86.14166260]
[128.94883728 70.23953247]
[140.65423584 58.75644302]
[156.45581055 54.74044800]
[172.04356384 59.18982697]
[183.21453857 70.80702972]
[197.68060303 66.84051514]
[212.14665222 62.87400436]
[226.61271667 58.90748978]
[241.07876587 54.94097900]
[255.54483032 50.97446442]
[259.33572388 47.12249756]
[263.79043579 45.35168076]
[267.97998047 45.55778885]
[271.15927124 47.27377701]
[283.16983032 36.97538757]
[297.16943359 42.06069183]
[311.87695312 39.11294174]
[326.58444214 36.16519547]
[341.29196167 33.21744537]
[355.99945068 30.26969528]
[361.56240845 20.78902626]
[371.24945068 16.07881927]
[381.70419312 17.49927139]
[389.45202637 24.33159065]
[404.28076172 22.07130623]
[419.08218384 19.63863754]
[433.85430908 17.03391457]
[448.62640381 14.42919159]
[463.39852905 11.82446861]
[478.17065430 9.21974659]
[490.37847900 -1.73017836]
[505.87908936 3.62363553]
[508.72677612 19.77364349]
[495.99206543 30.10610008]
[480.77536011 23.99186325]
[466.00326538 26.59658432]
[451.23114014 29.20130730]
[436.45901489 31.80603027]
[421.68692017 34.41075134]
[415.59017944 38.70955658]
[406.54104614 36.90003204]
[391.71231079 39.16031647]
[377.64468384 52.34797287]
[358.94720459 44.97720337]
[344.23971558 47.92495346]
[329.53219604 50.87269974]
[314.82467651 53.82044983]
[300.11718750 56.76819992]
[289.15859985 66.85574341]
[274.10702515 61.98128510]
[259.51135254 65.44052124]
[245.04528809 69.40703583]
[230.57922363 73.37354279]
[216.11317444 77.34005737]
[201.64710999 81.30657196]
[187.18106079 85.27308655]
[184.58357239 98.73061371]
[176.38610840 109.79753876]
[164.15246582 116.26631927]
[150.25837708 116.81590271]
[137.43017578 111.28105164]
[128.20985413 100.69609833]
[113.65541840 104.32492065]
[103.46527863 113.89846039]
[89.97341156 110.22951508]
[82.32054138 115.38652802]
[75.03808594 113.76924896]
[60.40315628 117.05842590]
[45.76821899 120.34761047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 57]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[13 45]
[14 44]
[15 43]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 34]
[23 33]
[24 32]
[59 134]
[60 133]
[61 132]
[62 130]
[64 128]
[65 127]
[70 121]
[71 120]
[72 119]
[73 118]
[74 117]
[75 116]
[79 115]
[81 113]
[82 112]
[83 111]
[84 110]
[85 109]
[89 107]
[90 106]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
