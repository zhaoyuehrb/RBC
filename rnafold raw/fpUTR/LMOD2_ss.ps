%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUGUCACAGCCCUGUAUCACCACUCUUAAAAGGCUCCCACAGCCACUCCUAGCACCAGUUGUUGACCAGCCUGCCACUUGCCUCCCUGCCUGCUUCUGGCCGCCUUGAAUGCCUGGUCCUUCAAGCUCCUUCUGGGUCUGACAAAGCAGGGACC\
) } def
/len { sequence length } bind def

/coor [
[124.58678436 339.25411987]
[122.50575256 324.39916992]
[113.07754517 312.86840820]
[118.82544708 298.12826538]
[116.74441528 283.27331543]
[114.66338348 268.41836548]
[112.58235168 253.56343079]
[110.50131989 238.70848083]
[108.42028809 223.85354614]
[98.93408203 216.29270935]
[97.10591125 203.89450073]
[104.46201324 193.25628662]
[102.67674255 178.36289978]
[100.89146423 163.46952820]
[99.10619354 148.57614136]
[94.31415558 162.79010010]
[85.87033081 175.18774414]
[74.39897156 184.85252380]
[60.74818039 191.06991577]
[45.92716980 193.38024902]
[31.03167343 191.61271667]
[17.16292953 185.89799500]
[5.34627295 176.65859985]
[-3.54468107 164.57757568]
[-8.85261345 150.54811096]
[-10.18510342 135.60742188]
[-7.44363737 120.86006927]
[-0.83089602 107.39635468]
[9.16423416 96.21165466]
[21.80280113 88.13288116]
[36.15042496 83.75730133]
[51.14636612 83.40840149]
[65.68196106 87.11197662]
[78.67946625 94.59181213]
[66.26990509 86.16549683]
[53.86034775 77.73918152]
[41.45078659 69.31286621]
[29.04122734 60.88655090]
[16.42759514 66.52022552]
[2.78694367 65.18204498]
[-8.31433868 57.32970810]
[-14.02721691 45.10989761]
[-12.95085049 31.77240181]
[-25.19042397 23.10102081]
[-37.43000031 14.42964172]
[-49.66957092 5.75826168]
[-65.40299225 4.09390974]
[-71.31521606 -9.57704163]
[-83.55478668 -18.24842262]
[-95.79435730 -26.91980171]
[-110.06400299 -21.05628586]
[-125.23431396 -23.86080933]
[-136.46449280 -34.43845367]
[-140.17103577 -49.41393661]
[-135.17120361 -64.00863647]
[-123.06040955 -73.56542969]
[-107.70317841 -75.03479004]
[-93.99993896 -67.94783783]
[-86.32334900 -54.56600189]
[-87.12297821 -39.15937424]
[-74.88340759 -30.48799515]
[-62.64383316 -21.81661606]
[-47.78586960 -20.77249908]
[-40.99819183 -6.48131227]
[-28.75861931 2.19006753]
[-16.51904488 10.86144733]
[-4.27947044 19.53282738]
[11.06727219 13.77656937]
[26.98582077 18.32861900]
[37.17123032 31.59127808]
[37.46754456 48.47698975]
[49.87710190 56.90330505]
[62.28666306 65.32962036]
[74.69622803 73.75593567]
[87.10578156 82.18225098]
[101.52835846 78.06044006]
[107.61123657 64.34918213]
[113.69411469 50.63792419]
[119.77700043 36.92666626]
[112.17098999 23.53059196]
[113.89133453 8.40135479]
[124.07005310 -2.68276405]
[138.64924622 -5.61277199]
[144.73213196 -19.32402992]
[135.62321472 -31.69023895]
[133.93370056 -46.95592499]
[140.11808777 -61.01469421]
[152.51278687 -70.08480835]
[167.78369141 -71.72644806]
[181.82301331 -65.49803162]
[190.85423279 -53.07496262]
[192.44799805 -37.79898453]
[186.17559814 -23.77926064]
[173.72428894 -14.78702831]
[158.44338989 -13.24114895]
[152.36050415 0.47010788]
[159.97236633 13.24498749]
[158.58587646 28.22970009]
[148.52406311 39.65831375]
[133.48825073 43.00954437]
[127.40537262 56.72080231]
[121.32249451 70.43206024]
[115.23961639 84.14331818]
[119.51425171 90.30590820]
[132.33815002 108.79367065]
[147.31147766 107.89944458]
[155.74485779 104.24705505]
[162.59083557 107.13929749]
[177.57896423 106.54295349]
[192.56710815 105.94660187]
[207.55525208 105.35025787]
[222.54339600 104.75390625]
[236.02503967 96.47407532]
[249.04986572 103.69927216]
[259.58657837 91.91991425]
[275.37084961 91.12466431]
[287.03814697 101.78533173]
[287.66647339 117.57712555]
[276.88305664 129.13105774]
[261.08547974 129.59239197]
[249.64620972 118.68740845]
[237.23661804 126.92458344]
[223.13973999 119.74205017]
[208.15159607 120.33839417]
[193.16345215 120.93474579]
[178.17532349 121.53108978]
[163.18717957 122.12744141]
[148.20570374 122.87276459]
[133.23239136 123.76699066]
[128.42417908 129.52296448]
[143.42031860 129.86361694]
[152.50405884 141.80035400]
[148.83532715 156.34478760]
[135.17668152 162.54492188]
[121.81312561 155.73204041]
[118.80777740 141.03489685]
[113.99957275 146.79087830]
[115.78485107 161.68424988]
[117.57012177 176.57763672]
[119.35539246 191.47100830]
[130.73681641 205.91452026]
[123.27523041 221.77250671]
[125.35626221 236.62745667]
[127.43729401 251.48239136]
[129.51832581 266.33734131]
[131.59936523 281.19229126]
[133.68038940 296.04721069]
[143.25744629 308.64050293]
[137.36068726 322.31814575]
[139.44172668 337.17306519]
[153.20202637 344.34478760]
[160.08876038 358.24993896]
[157.45382690 373.54165649]
[146.31040955 384.33999634]
[130.94338989 386.49276733]
[117.26170349 379.17218018]
[110.52622223 365.19314575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[12 140]
[13 139]
[14 138]
[15 137]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[43 67]
[44 66]
[45 65]
[46 64]
[48 62]
[49 61]
[50 60]
[76 103]
[77 102]
[78 101]
[79 100]
[83 96]
[84 95]
[105 129]
[106 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
