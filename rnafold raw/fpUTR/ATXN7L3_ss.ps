%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAACAACACCCCCACCCCCGUGUGUGCAGCCGUGUUGCCGCCCGCUGUGCUAUGAGCAGUCAGAGCGCCGUCUCCACAAGAGUUUACAA\
) } def
/len { sequence length } bind def

/coor [
[82.42556763 229.35292053]
[68.23432922 234.21180725]
[53.34930038 236.06542969]
[38.39981461 234.83540344]
[24.01794052 230.57376099]
[10.81173897 223.46064758]
[-0.66043442 213.79684448]
[-9.91353607 201.99090576]
[-16.55634689 188.54200745]
[-20.30800819 174.01873779]
[-21.00990105 159.03517151]
[-18.63235092 144.22479248]
[-13.27587795 130.21379089]
[-5.16695452 117.59455109]
[5.35157537 106.90059662]
[17.83498955 98.58409119]
[31.75549126 92.99663544]
[46.52452087 90.37447357]
[61.51765060 90.82846832]
[76.10096741 94.33943176]
[89.65554810 100.75749969]
[78.34985352 90.89944458]
[62.86350250 87.66162109]
[58.35577393 73.46550751]
[47.05007935 63.60745239]
[35.74438095 53.74939728]
[27.02611160 50.36953735]
[24.22839928 43.35659790]
[13.26586056 33.11830139]
[2.30332112 22.88000488]
[-8.65921783 12.64170837]
[-19.62175751 2.40341091]
[-35.32451248 -3.98875618]
[-33.52910995 -20.84737015]
[-16.83231926 -23.78906059]
[-9.38346100 -8.55912876]
[1.57907879 1.67916870]
[12.54161835 11.91746616]
[23.50415802 22.15576363]
[34.46669769 32.39406204]
[45.60243607 42.44370270]
[56.90813446 52.30175781]
[68.21382904 62.15981293]
[82.89151764 64.69252014]
[88.20790863 79.59374237]
[99.51360321 89.45179749]
[100.72307587 79.93612671]
[103.48771667 70.61183929]
[107.77904510 61.66951752]
[119.73112488 52.60596848]
[131.68319702 43.54242325]
[143.63526917 34.47887802]
[155.58735657 25.41533279]
[161.90824890 10.91164589]
[176.72454834 9.38648605]
[188.67663574 0.32293978]
[200.62870789 -8.74060631]
[206.48834229 -24.05715752]
[222.72309875 -26.37328911]
[232.63206482 -13.30636501]
[226.02174377 1.70148468]
[209.69226074 3.21147060]
[197.74017334 12.27501678]
[185.78810120 21.33856201]
[180.32209778 35.19396210]
[164.65089417 37.36740875]
[152.69882202 46.43095398]
[140.74674988 55.49449921]
[128.79466248 64.55804443]
[116.84259033 73.62158966]
[116.71454620 81.12049866]
[129.57514954 88.84092712]
[116.45845032 96.11831665]
[116.33039856 103.61721802]
[127.96607208 113.08354187]
[139.60174561 122.54985809]
[155.64349365 122.34616089]
[165.69271851 134.85188293]
[162.04048157 150.47367859]
[147.48849487 157.22787476]
[133.19978333 149.93319702]
[130.13542175 134.18553162]
[118.49974823 124.71920776]
[106.86408234 115.25289154]
[115.49322510 127.52227783]
[121.43047333 141.29722595]
[124.42480469 155.99531555]
[124.34962463 170.99513245]
[121.20809937 185.66246033]
[115.13305664 199.37719727]
[106.38135529 211.55946350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 46]
[22 45]
[24 43]
[25 42]
[26 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[55 64]
[56 63]
[57 62]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
