%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCGACUUCCGGGUGAGACCGUGAAGGUGUGGCGCGACGUUGGAGACCGGGGCAGCGCCAUGUACCACAGUGG\
) } def
/len { sequence length } bind def

/coor [
[94.54930878 141.00941467]
[87.78189850 139.52467346]
[81.35717010 136.93138123]
[75.45532227 133.30226135]
[70.24188232 128.73910522]
[65.86307526 123.36990356]
[62.44171524 117.34523773]
[60.07376099 110.83408356]
[45.12499237 112.07277679]
[30.17622566 113.31147003]
[15.22745800 114.55015564]
[0.30748284 116.09752655]
[-14.57732582 117.95291901]
[-29.46213531 119.80830383]
[-38.97032547 132.43247986]
[-54.63170242 134.55305481]
[-67.15464783 124.91192627]
[-69.10951996 109.22901154]
[-59.33653259 96.80869293]
[-43.63381958 95.01973724]
[-31.31752396 104.92350006]
[-16.43271446 103.06810760]
[-1.54790664 101.21271515]
[4.88326740 97.14304352]
[13.98876762 99.60138702]
[28.93753433 98.36270142]
[43.88630295 97.12400818]
[58.83506775 95.88532257]
[70.51013947 70.98569489]
[95.21668243 58.90739822]
[122.03696442 64.98779297]
[132.19618225 53.95193863]
[142.35540771 42.91608047]
[152.51463318 31.88022041]
[162.67385864 20.84436226]
[172.83308411 9.80850315]
[182.99230957 -1.22735536]
[182.51718140 -16.79694176]
[192.97729492 -27.84414864]
[207.82344055 -28.20115662]
[211.47752380 -43.59460449]
[225.78999329 -47.71803284]
[235.94920349 -58.75389099]
[246.10842896 -69.78974915]
[256.26766968 -80.82560730]
[262.54678345 -96.57391357]
[279.41784668 -94.89974976]
[282.47949219 -78.22454071]
[267.30352783 -70.66638184]
[257.14428711 -59.63052368]
[246.98506165 -48.59466553]
[236.82585144 -37.55880737]
[233.89842224 -22.95471954]
[218.85929871 -18.04193306]
[219.72949219 -3.21700978]
[209.58380127 8.11964226]
[194.02816772 8.93186855]
[183.86894226 19.96772766]
[173.70971680 31.00358582]
[163.55049133 42.03944397]
[153.39126587 53.07530212]
[143.23204041 64.11116028]
[133.07281494 75.14701843]
[136.75660706 81.01490021]
[139.40946960 87.41526031]
[140.95701599 94.16859436]
[141.35581970 101.08547211]
[140.59471130 107.97190857]
[138.69503784 114.63475800]
[135.71006775 120.88714600]
[131.72354126 126.55370331]
[126.84725189 131.47549438]
[121.21797180 135.51449585]
[114.99358368 138.55741882]
[108.34867096 140.51890564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 28]
[9 27]
[10 26]
[11 25]
[12 23]
[13 22]
[14 21]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[40 54]
[42 52]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
