%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACUUUGCGCCCAGUCCGCAGGGCGGGCCGCGCCUUUACCGCCCAGCUGCCUCCCGGAGCCCCCGCGCCCUCCCGACGCGCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[58.77413177 428.39874268]
[44.49902344 422.01477051]
[37.71373749 407.92596436]
[41.62208176 392.78466797]
[54.37865448 383.74014282]
[55.42499924 368.77667236]
[56.47134781 353.81320190]
[57.51769257 338.84973145]
[58.56404114 323.88629150]
[59.61038971 308.92282104]
[60.65673447 293.95935059]
[61.70308304 278.99591064]
[59.47504807 275.99725342]
[58.71800995 271.70034790]
[60.05817413 266.87359619]
[63.72246552 262.54934692]
[66.32718658 247.77722168]
[68.93191528 233.00509644]
[63.52222824 219.12762451]
[73.53835297 206.88067627]
[68.12866974 193.00318909]
[78.14479828 180.75624084]
[80.74951935 165.98411560]
[83.35424042 151.21200562]
[85.95896149 136.43988037]
[88.56369019 121.66777039]
[91.16841125 106.89565277]
[93.51493073 92.08032990]
[95.60252380 77.22631073]
[86.36342621 64.68530273]
[88.69214630 49.65095139]
[100.70501709 40.92016983]
[102.79261780 26.06614876]
[97.05122375 11.32345581]
[106.48451996 -0.20313151]
[108.57212067 -15.05715275]
[96.43611908 -22.52206039]
[88.12062836 -34.03812027]
[84.87248230 -47.82143784]
[87.15673065 -61.75268555]
[94.59038544 -73.70295715]
[106.00617981 -81.85911560]
[119.63570404 -84.99882507]
[122.24042511 -99.77094269]
[112.97129059 -112.57167053]
[115.55097198 -128.16400146]
[128.44898987 -137.29728699]
[144.01316833 -134.55290222]
[153.00956726 -121.55903625]
[150.10078430 -106.02474213]
[137.01254272 -97.16621399]
[134.40782166 -82.39410400]
[147.49201965 -73.39814758]
[155.41726685 -59.57243729]
[156.57612610 -43.62062454]
[150.69001770 -28.68721008]
[138.87405396 -17.73765755]
[123.42613983 -12.96955585]
[121.33854675 1.88446498]
[127.22924805 15.56470013]
[117.64663696 28.15374565]
[115.55903625 43.00776672]
[124.70001984 54.71152878]
[122.79450226 69.80535889]
[110.45654297 79.31390381]
[108.36894989 94.16792297]
[110.48576355 102.14393616]
[105.94052887 109.50037384]
[103.33580780 124.27249146]
[100.73107910 139.04461670]
[98.12635803 153.81672668]
[95.52163696 168.58883667]
[92.91691589 183.36096191]
[98.14028931 198.29504395]
[88.31047058 209.48539734]
[93.53385162 224.41947937]
[83.70402527 235.60981750]
[81.09930420 250.38194275]
[78.49458313 265.15405273]
[76.66654205 280.04223633]
[75.62019348 295.00570679]
[74.57385254 309.96917725]
[73.52750397 324.93261719]
[72.48115540 339.89608765]
[71.43480682 354.85955811]
[70.38845825 369.82302856]
[69.34210968 384.78646851]
[80.71578217 395.51837158]
[82.47882843 411.05624390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 87]
[6 86]
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[12 80]
[16 79]
[17 78]
[18 77]
[20 75]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 66]
[29 65]
[32 62]
[33 61]
[35 59]
[36 58]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
