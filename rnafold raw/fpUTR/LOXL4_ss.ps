%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGGGGGGCCGCGGGCGGGAGGCGGAUAAAAAGGCCCCAGGGCGCCCGGGGAGGGAGCCCGUUAGCGCUGCUCCGCCGCGGCGCCCGCCCAGCCCCGGACUGUCCGCGCUCCAUCUGGUAUCUUGGCCUCAGCUGUCCUUGAAGUCACC\
) } def
/len { sequence length } bind def

/coor [
[238.95756531 502.32421875]
[234.38131714 488.03933716]
[229.80506897 473.75445557]
[225.22882080 459.46957397]
[220.65257263 445.18466187]
[216.83639526 442.21838379]
[214.88037109 436.79772949]
[216.19563293 430.21401978]
[212.21360779 415.75222778]
[208.23159790 401.29043579]
[204.24958801 386.82864380]
[200.26757812 372.36685181]
[195.54394531 358.13000488]
[190.09133911 344.15615845]
[178.25686646 335.11209106]
[180.44839478 319.44342041]
[174.99577332 305.46954346]
[161.29501343 299.74026489]
[155.56622314 285.64645386]
[161.66850281 271.31466675]
[156.21588135 257.34082031]
[150.76325989 243.36694336]
[145.31065369 229.39308167]
[139.71391296 215.47630310]
[133.97366333 201.61811829]
[128.23341370 187.75991821]
[122.49315643 173.90173340]
[116.75290680 160.04353333]
[111.01265717 146.18534851]
[105.27239990 132.32714844]
[88.27875519 130.58522034]
[74.47334290 120.52395630]
[67.61130524 104.88008118]
[69.55914307 87.90879822]
[79.78704071 74.22638702]
[73.47900391 60.61724472]
[67.17096710 47.00810623]
[50.71737289 45.71146774]
[37.22942734 36.36298752]
[30.31943893 21.58107567]
[31.78013039 5.42338419]
[41.12057877 -7.72689772]
[34.53262711 -21.20276260]
[27.94467926 -34.67862701]
[21.35673141 -48.15449142]
[14.76878262 -61.63035583]
[8.18083382 -75.10622406]
[1.59288478 -88.58208466]
[-5.13397217 -101.98915100]
[-11.99901772 -115.32598877]
[-18.86406326 -128.66282654]
[-25.86656570 -141.92799377]
[-33.00577927 -155.12010193]
[-40.14498901 -168.31221008]
[-47.28419876 -181.50431824]
[-59.43664932 -185.94802856]
[-65.09880829 -197.13439941]
[-61.70780945 -208.78710938]
[-68.57285309 -222.12394714]
[-75.43790436 -235.46078491]
[-88.63323212 -244.18969727]
[-87.57871246 -259.04690552]
[-101.65430450 -267.46176147]
[-101.13411713 -283.85266113]
[-86.55326843 -291.35806274]
[-72.91129303 -282.25704956]
[-74.24187469 -265.91195679]
[-61.53758240 -258.13699341]
[-62.10106659 -242.32582092]
[-55.23602295 -228.98898315]
[-48.37097549 -215.65216064]
[-33.13217926 -207.00337219]
[-34.09209442 -188.64352417]
[-26.95288277 -175.45141602]
[-19.81367111 -162.25930786]
[-12.67446041 -149.06721497]
[-6.68709564 -144.65356445]
[-5.52723026 -135.52786255]
[1.33781600 -122.19103241]
[8.20286179 -108.85419464]
[14.09773159 -104.31775665]
[15.06874943 -95.17003632]
[21.65669823 -81.69416809]
[28.24464798 -68.21830750]
[34.83259583 -54.74243927]
[41.42054367 -41.26657486]
[48.00849533 -27.79071045]
[54.59644318 -14.31484699]
[68.28714752 -14.26859474]
[80.67587280 -8.28722763]
[89.30948639 2.50842667]
[92.45108032 16.03813362]
[89.42914581 29.66297913]
[80.78010559 40.70006943]
[87.08814240 54.30920792]
[93.39617920 67.91834259]
[106.04718018 67.80878448]
[117.79598999 72.50189972]
[126.88977814 81.29751587]
[131.97181702 92.88339996]
[132.28390503 105.53102112]
[127.77949524 117.35346222]
[119.13059235 126.58689880]
[124.87084961 140.44509888]
[130.61109924 154.30328369]
[136.35134888 168.16148376]
[142.09159851 182.01966858]
[147.83184814 195.87786865]
[153.57209778 209.73605347]
[159.78616333 216.51905823]
[159.28451538 223.94046021]
[164.73713684 237.91432190]
[170.18975830 251.88819885]
[175.64236450 265.86206055]
[189.83862305 272.27331543]
[195.16928101 286.52249146]
[188.96963501 300.01693726]
[194.42225647 313.99078369]
[206.64672852 324.03433228]
[204.06520081 338.70352173]
[209.51782227 352.67739868]
[218.14216614 340.40463257]
[233.10025024 339.28396606]
[243.45701599 350.13464355]
[241.64120483 365.02435303]
[228.98025513 373.06799316]
[214.72937012 368.38482666]
[218.71138000 382.84661865]
[222.69338989 397.30841064]
[226.67541504 411.77023315]
[230.65742493 426.23202515]
[234.93746948 440.60842896]
[239.51371765 454.89331055]
[244.08995056 469.17819214]
[248.66619873 483.46310425]
[253.24244690 497.74798584]
[268.39019775 498.31478882]
[282.42941284 504.03115845]
[293.66473389 514.20672607]
[300.73950195 527.61285400]
[302.79937744 542.63061523]
[299.59561157 557.44653320]
[291.51507568 570.27154541]
[279.53356934 579.55694580]
[265.09786987 584.18151855]
[249.95118713 583.58679199]
[235.92254639 577.84454346]
[224.70597839 567.64825439]
[217.65592957 554.22912598]
[215.62373352 539.20764160]
[218.85479736 524.39764404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 132]
[8 131]
[9 130]
[10 129]
[11 128]
[12 127]
[13 121]
[14 120]
[16 118]
[17 117]
[20 114]
[21 113]
[22 112]
[23 111]
[24 109]
[25 108]
[26 107]
[27 106]
[28 105]
[29 104]
[30 103]
[35 96]
[36 95]
[37 94]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[49 80]
[50 79]
[51 78]
[52 76]
[53 75]
[54 74]
[55 73]
[58 71]
[59 70]
[60 69]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
