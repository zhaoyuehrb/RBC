%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCCCGCCGAGGAACGCCUGAGGGCCGGGCCGCGCCAUUCCCGGAUCCGCCGGCUGGGAAUCGCGGGUCCCCGCGCGUCCUGCAGCACUUCCCGCGCCGCGCCCCCAGCCCAGUGCGCCGGCUCUGUGCCGGGGUGCCCGGGCGGUCGGGAGA\
) } def
/len { sequence length } bind def

/coor [
[96.55167389 255.66423035]
[85.66406250 244.20841980]
[86.14936066 228.41157532]
[97.71963501 217.64570618]
[98.02169037 202.64874268]
[98.32374573 187.65177917]
[98.62580109 172.65483093]
[98.92785645 157.65786743]
[99.07889557 142.65863037]
[99.07889557 127.65862274]
[85.47109985 120.60250854]
[78.83992767 108.34556580]
[80.14314270 95.86624146]
[67.62930298 87.59558105]
[55.11545944 79.32492828]
[42.60161591 71.05426788]
[28.13044930 76.33551025]
[13.49538612 72.13214111]
[4.25101900 60.25755692]
[3.77718115 45.39439774]
[-8.73666096 37.12374115]
[-21.25050354 28.85308647]
[-33.84698868 20.70885086]
[-46.52484131 12.69186401]
[-59.20269012 4.67487669]
[-71.88053894 -3.34211063]
[-84.55839539 -11.35909748]
[-97.47259521 -18.98951912]
[-110.61137390 -26.22640991]
[-123.75014496 -33.46330261]
[-136.88891602 -40.70019150]
[-150.24028015 -47.53694916]
[-163.79203796 -53.96733856]
[-177.34379578 -60.39772797]
[-190.89555359 -66.82811737]
[-204.44731140 -73.25850677]
[-211.14991760 -73.10554504]
[-216.14460754 -75.96526337]
[-218.40728760 -80.23040009]
[-231.68911743 -87.20124817]
[-244.97096252 -94.17209625]
[-258.25280762 -101.14293671]
[-271.53463745 -108.11378479]
[-284.81649780 -115.08463287]
[-298.09832764 -122.05548096]
[-311.38015747 -129.02633667]
[-320.49053955 -130.25729370]
[-324.85717773 -136.27362061]
[-337.99597168 -143.51051331]
[-354.37194824 -142.63949585]
[-363.08627319 -156.53167725]
[-355.17434692 -170.89599609]
[-338.77529907 -170.95565796]
[-330.75906372 -156.64929199]
[-317.62030029 -149.41239929]
[-304.40933228 -142.30816650]
[-291.12747192 -135.33732605]
[-277.84564209 -128.36647034]
[-264.56381226 -121.39562988]
[-251.28195190 -114.42478180]
[-238.00012207 -107.45393372]
[-224.71827698 -100.48308563]
[-211.43643188 -93.51223755]
[-198.01692200 -86.81026459]
[-184.46516418 -80.37987518]
[-170.91340637 -73.94948578]
[-157.36164856 -67.51909637]
[-143.80989075 -61.08870697]
[-140.33700562 -61.95870590]
[-136.26580811 -61.15345001]
[-132.40525818 -58.40862274]
[-129.65203857 -53.83896637]
[-116.51325989 -46.60207748]
[-103.37448120 -39.36518478]
[-90.23571014 -32.12829208]
[-86.71662903 -32.78701782]
[-82.70147705 -31.73741531]
[-79.01370239 -28.76450539]
[-76.54140472 -24.03694916]
[-63.86355591 -16.01996231]
[-51.18570328 -8.00297451]
[-38.50785065 0.01401298]
[-25.82999992 8.03100014]
[-18.45346832 8.95318222]
[-12.97984695 16.33924484]
[-0.46600449 24.60990143]
[12.04783726 32.88055801]
[25.90736580 27.49061584]
[40.45521927 31.34080505]
[50.05868912 43.15718079]
[50.87227249 58.54042816]
[63.38611603 66.81108093]
[75.89995575 75.08174133]
[88.41379547 83.35239410]
[112.22985077 79.37506104]
[127.51367950 102.97413635]
[142.36488342 105.08167267]
[151.35981750 103.18280792]
[157.49275208 107.38409424]
[172.29850769 109.79026031]
[187.10424805 112.19643402]
[201.96687317 106.77303314]
[213.28817749 116.45172882]
[228.09393311 118.85790253]
[242.92315674 121.11486816]
[257.77435303 123.22240448]
[272.62557983 125.32994080]
[287.47677612 127.43747711]
[302.22717285 121.71588898]
[313.74108887 131.16465759]
[328.59228516 133.27218628]
[343.34268188 127.55059814]
[354.85656738 136.99935913]
[369.70779419 139.10690308]
[384.55899048 141.21443176]
[399.30938721 135.49284363]
[410.82330322 144.94160461]
[425.67449951 147.04914856]
[440.67745972 140.42770386]
[453.75170898 150.32699585]
[451.44757080 166.56347656]
[436.13537598 172.43443298]
[423.56695557 161.90034485]
[408.71575928 159.79281616]
[395.02761841 165.66514587]
[382.45144653 156.06564331]
[367.60025024 153.95809937]
[352.74905396 151.85057068]
[339.06091309 157.72290039]
[326.48474121 148.12339783]
[311.63354492 146.01585388]
[297.94540405 151.88819885]
[285.36923218 142.28868103]
[270.51803589 140.18115234]
[255.66682434 138.07360840]
[240.81562805 135.96607971]
[233.71049500 138.15255737]
[225.68775940 133.66365051]
[210.88200378 131.25749207]
[197.07839966 136.85299683]
[184.69808960 127.00218201]
[169.89233398 124.59601593]
[155.08657837 122.18984985]
[140.25733948 119.93287659]
[125.40614319 117.82534027]
[114.07889557 127.65862274]
[114.07889557 142.65863037]
[117.22273254 151.29753113]
[113.92481995 157.95991516]
[113.62276459 172.95687866]
[113.32070923 187.95384216]
[113.01864624 202.95079041]
[112.71659088 217.94775391]
[123.84399414 229.17079163]
[123.69281769 244.97436523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 147]
[10 146]
[13 94]
[14 93]
[15 92]
[16 91]
[20 87]
[21 86]
[22 85]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[28 75]
[29 74]
[30 73]
[31 72]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[48 55]
[49 54]
[96 145]
[97 144]
[99 143]
[100 142]
[101 141]
[103 139]
[104 138]
[105 136]
[106 135]
[107 134]
[108 133]
[110 131]
[111 130]
[113 128]
[114 127]
[115 126]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
