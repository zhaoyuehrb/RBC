%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGUUGCAGCUGGCAGUGCGGCGGGCGCGGGCGCCGGAGCGAGGGGCCCGCGGGCCCGGCUAUUAAUAACGCGGCCGCCAGCCCGGGGUCGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[96.91090393 221.00579834]
[80.58309937 219.47773743]
[73.98938751 204.46258545]
[83.91280365 191.40663147]
[85.31049347 176.47189331]
[86.70818329 161.53715515]
[88.10587311 146.60241699]
[89.50356293 131.66766357]
[90.90125275 116.73293304]
[84.48521423 112.84906006]
[65.23710632 101.19744110]
[52.65280914 109.36050415]
[50.91872025 124.90164185]
[39.56507111 135.65472412]
[23.95270729 136.54246521]
[11.45330906 127.14569855]
[7.96871090 111.90130615]
[15.14423370 98.00720978]
[29.59181404 92.02378082]
[44.48974609 96.77621460]
[57.07403946 88.61315155]
[60.54168320 74.01947021]
[46.89918137 66.00743866]
[47.15904236 51.11510086]
[39.59180069 38.16377258]
[32.02455902 25.21244812]
[24.45731544 12.26112270]
[16.89007187 -0.69020301]
[8.92370510 -13.39992332]
[0.56592071 -25.85574341]
[-7.79186344 -38.31156158]
[-16.14964676 -50.76738358]
[-24.50743103 -63.22320175]
[-32.86521530 -75.67902374]
[-46.97943497 -82.82740784]
[-47.64592743 -97.70709229]
[-56.00370789 -110.16291046]
[-71.56993866 -111.65509796]
[-82.49828339 -122.84014893]
[-83.62871552 -138.43681335]
[-74.42748260 -151.08084106]
[-59.23912430 -154.80209351]
[-45.23511505 -147.84352112]
[-39.02772522 -133.49073792]
[-43.54788971 -118.52069855]
[-35.19010544 -106.06488037]
[-21.67369270 -99.80741882]
[-20.40939522 -84.03680420]
[-12.05161190 -71.58098602]
[-3.69382763 -59.12516785]
[4.66395617 -46.66934586]
[13.02174091 -34.21352768]
[21.37952423 -21.75770760]
[25.97734833 -19.95472145]
[29.40831757 -15.14450550]
[29.84139824 -8.25744629]
[37.40864182 4.69387960]
[44.97588348 17.64520454]
[52.54312515 30.59653091]
[60.11037064 43.54785538]
[73.21161652 50.63352203]
[73.49301147 66.45222473]
[75.10765076 51.53938293]
[82.40135193 38.43206024]
[94.22296143 29.19898605]
[108.70666504 25.29741096]
[123.56651306 27.34312057]
[136.45718384 35.01324081]
[145.34413147 47.09719849]
[148.82475281 61.68778992]
[146.34968567 76.48217773]
[138.30958557 89.14538574]
[125.97134399 97.67964935]
[139.26152039 104.63460541]
[152.55168152 111.58955383]
[165.84185791 118.54450989]
[179.13203430 125.49945831]
[192.42219543 132.45442200]
[201.65434265 133.70349121]
[206.01255798 139.83793640]
[219.08000183 147.20285034]
[234.85685730 144.29246521]
[246.87402344 154.92105103]
[245.91296387 170.93530273]
[232.71092224 180.05043030]
[217.39537048 175.27409363]
[211.71508789 160.27029419]
[198.64764404 152.90538025]
[185.46723938 145.74458313]
[172.17707825 138.78962708]
[158.88690186 131.83468628]
[145.59674072 124.87972260]
[132.30656433 117.92477417]
[119.01639557 110.96981812]
[105.83599091 118.13061523]
[104.43830109 133.06535339]
[103.04061127 148.00009155]
[101.64292908 162.93484497]
[100.24523926 177.86958313]
[98.84754944 192.80432129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[11 21]
[12 20]
[22 62]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[36 46]
[37 45]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[78 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
