%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACCCAGAUCUUCAAGGUUGGCAAAGAAGAGAAAAGCUCCUUGGGAACUUAGUUACCAGGUCUUAUAGCACCAGCUCUGUGUCCUCAGAGUCGCUGUCAUCAAGGAGACCUCUCACUGGUCACCGCCGCAGCCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[120.72928619 325.70343018]
[110.93363953 337.17062378]
[98.59349823 345.84078979]
[84.48457336 351.16891479]
[69.49375916 352.82006836]
[54.56339645 350.69049072]
[40.63201904 344.91403198]
[28.57536697 335.85379028]
[19.15132904 324.07931519]
[12.95230770 310.33074951]
[10.36798000 295.47235107]
[11.56079960 280.43814087]
[16.45578194 266.17312622]
[24.74522781 253.57409668]
[35.90805435 243.43298340]
[49.24255753 236.38728333]
[63.91051483 232.87989807]
[78.98989105 233.13128662]
[82.95282745 218.66424561]
[86.91575623 204.19721985]
[90.55538940 189.64547729]
[93.86992645 175.01626587]
[97.18446350 160.38705444]
[100.49900055 145.75784302]
[90.77578735 144.96827698]
[81.41065216 142.12969971]
[72.83171082 137.35833740]
[65.43401337 130.85905457]
[59.56131363 122.91658783]
[55.49015427 113.88313293]
[53.41683197 104.16266632]
[38.42520905 103.66143799]
[23.43358421 103.16021729]
[10.78167152 113.02473450]
[-4.78482485 109.14352417]
[-11.32462025 94.49393463]
[-3.82094407 80.31386566]
[11.97002602 77.48105621]
[23.93480873 88.16859436]
[38.92643356 88.66981506]
[53.91805649 89.17104340]
[59.61968994 75.29691315]
[48.60768890 65.11183929]
[37.59568787 54.92675781]
[26.58368492 44.74168015]
[15.57168388 34.55660248]
[0.00102582 34.99520874]
[-11.02161884 24.50922012]
[-11.34380627 9.66227436]
[-22.35580826 -0.52280420]
[-38.08934021 -6.83883810]
[-36.37561417 -23.70594978]
[-19.69326973 -26.72847939]
[-12.17072868 -11.53480530]
[-1.15872741 -1.34972703]
[13.66819572 -2.18515277]
[24.98102188 7.98709536]
[25.75676155 23.54460144]
[36.76876450 33.72967911]
[47.78076553 43.91475677]
[58.79276657 54.09983826]
[69.80477142 64.28491211]
[78.62975311 59.58641815]
[88.04479218 56.96674347]
[97.57882690 56.45707703]
[106.77535248 57.98547745]
[115.21423340 61.38463211]
[123.14411926 48.65211868]
[131.07400513 35.91960144]
[139.00389099 23.18708801]
[146.93377686 10.45457458]
[143.54695129 1.50090194]
[144.69242859 -7.86372519]
[149.98020935 -15.50935459]
[158.09301758 -19.75728989]
[167.11227417 -19.74802589]
[175.87487793 -31.92244911]
[184.63749695 -44.09687042]
[193.40011597 -56.27129364]
[202.16271973 -68.44571686]
[210.92533875 -80.62014008]
[208.13641357 -96.17640686]
[217.23274231 -109.10050964]
[232.81762695 -111.72480774]
[245.64483643 -102.49234772]
[248.10421753 -86.88058472]
[238.73664856 -74.15171051]
[223.09976196 -71.85752869]
[214.33714294 -59.68310165]
[205.57453918 -47.50867844]
[196.81192017 -35.33425522]
[188.04930115 -23.15983391]
[179.28669739 -10.98541069]
[179.15798950 9.60910320]
[159.66629028 18.38445854]
[151.73640442 31.11697388]
[143.80651855 43.84948730]
[135.87663269 56.58200455]
[127.94674683 69.31451416]
[134.40682983 75.71769714]
[139.39688110 83.47953033]
[142.63191223 92.26184845]
[143.90487671 101.66700745]
[143.09896851 111.25583649]
[140.19581604 120.56815338]
[135.27897644 129.14485168]
[148.74130249 135.76043701]
[164.53924561 134.90272522]
[172.54936218 147.46008301]
[186.01167297 154.07568359]
[199.47398376 160.69126892]
[212.93630981 167.30685425]
[227.16671753 160.82386780]
[242.22114563 165.05453491]
[250.99131775 178.00126648]
[249.33625793 193.55101013]
[238.03741455 204.36166382]
[222.42976379 205.32876587]
[209.88276672 195.99566650]
[206.32070923 180.76918030]
[192.85839844 174.15357971]
[179.39608765 167.53799438]
[165.93376160 160.92240906]
[151.09873962 162.25331116]
[142.12570190 149.22276306]
[128.66339111 142.60717773]
[115.12821198 149.07237244]
[111.81367493 163.70158386]
[108.49913788 178.33079529]
[105.18460083 192.96002197]
[106.80744171 199.50427246]
[105.08425140 205.02680969]
[101.38278961 208.16014099]
[97.41986084 222.62718201]
[93.45693207 237.09422302]
[106.55936432 244.56262207]
[117.39228058 255.05541992]
[125.27469635 267.91302490]
[129.71113586 282.32720947]
[130.42269897 297.39190674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 135]
[19 134]
[20 133]
[21 130]
[22 129]
[23 128]
[24 127]
[31 41]
[32 40]
[33 39]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[49 55]
[50 54]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[106 126]
[107 125]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
