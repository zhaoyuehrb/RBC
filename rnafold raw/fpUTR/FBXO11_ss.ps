%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGCCCCGAAGCUCGCUGUGCGUGUGCGUGUGUGUGUCCCUCCGCCAACGCCGCCACCUCAGCCCGGCAA\
) } def
/len { sequence length } bind def

/coor [
[60.57083511 284.09802246]
[51.50973511 296.25009155]
[38.83713531 304.56759644]
[24.08331871 308.04620361]
[9.02987766 306.26583862]
[-4.50541210 299.44149780]
[-14.88809776 288.39721680]
[-20.86441994 274.46670532]
[-21.71270752 259.33209229]
[-17.33052635 244.82099915]
[-8.24704647 232.68566895]
[4.44085741 224.39152527]
[19.20105934 220.94010925]
[34.25119400 222.74821472]
[41.00424957 209.35432434]
[47.75730896 195.96043396]
[45.69639206 178.66418457]
[60.85496521 168.46060181]
[67.03348541 154.79217529]
[73.21200562 141.12374878]
[79.39052582 127.45532227]
[77.58245087 112.67086029]
[90.31720734 103.28275299]
[90.53693390 94.96060944]
[97.05899811 89.17401123]
[103.81204987 75.78012848]
[110.56510925 62.38623810]
[111.70281982 53.01088333]
[117.89960480 48.57633591]
[125.21503448 35.48112106]
[132.53045654 22.38591194]
[134.06504822 13.06729317]
[140.44445801 8.89973736]
[148.30906677 -3.87319970]
[156.17367554 -16.64613724]
[164.03828430 -29.41907310]
[171.35371399 -42.51428604]
[178.10676575 -55.90817261]
[184.85981750 -69.30206299]
[179.67485046 -84.23161316]
[186.64039612 -98.41811371]
[201.62393188 -103.44495392]
[215.73599243 -96.32980347]
[220.60414124 -81.29395294]
[213.34017944 -67.25791168]
[198.25370789 -62.54900360]
[191.50065613 -49.15511703]
[184.74760437 -35.76123047]
[185.48191833 -30.75967789]
[182.85983276 -25.28584290]
[176.81121826 -21.55446434]
[168.94660950 -8.78152752]
[161.08200073 3.99140954]
[153.21739197 16.76434708]
[145.62567139 29.70133591]
[138.31024170 42.79654694]
[130.99482727 55.89175797]
[123.95899200 69.13928986]
[117.20594025 82.53318024]
[110.45288086 95.92707062]
[103.98564148 109.46127319]
[105.35177612 125.22338867]
[93.05895233 133.63383484]
[86.88043213 147.30226135]
[80.70191193 160.97068787]
[74.52339172 174.63911438]
[78.35729218 187.15950012]
[72.69628906 198.51608276]
[61.15119553 202.71350098]
[54.39813995 216.10739136]
[47.64508438 229.50126648]
[58.04810333 240.52638245]
[64.05008698 254.44586182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 71]
[15 70]
[16 69]
[18 66]
[19 65]
[20 64]
[21 63]
[23 61]
[25 60]
[26 59]
[27 58]
[29 57]
[30 56]
[31 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 48]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
