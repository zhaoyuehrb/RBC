%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCUGAGGCGGAGGCAGGGGAGUUGCAGCGCGCGAGGCUCCGUGAGUGUGUCUCCUGCGCGCUGAGAGGCGGGGGGAGGCGGAGGACCAGGAGGAGGAGGAGGAGGAGGAGGAGGGGGAGA\
) } def
/len { sequence length } bind def

/coor [
[136.90780640 148.04841614]
[126.36805725 137.37538147]
[115.82830811 126.70235443]
[105.28855896 116.02931976]
[90.96559143 111.57369232]
[76.23128510 114.38441467]
[61.49697495 117.19512939]
[55.83103561 126.64443970]
[46.07184982 131.26284790]
[35.60956573 129.71723938]
[27.93066406 122.77049255]
[13.07374191 124.83734131]
[-1.78317964 126.90419769]
[-16.64010048 128.97105408]
[-31.49702263 131.03790283]
[-46.35394287 133.10476685]
[-58.95635605 142.66978455]
[-72.62835693 136.75997925]
[-82.15412140 149.08465576]
[-97.25059509 150.96910095]
[-108.94158173 141.81178284]
[-121.54399109 151.37681580]
[-135.21598816 145.46701050]
[-147.81840515 155.03202820]
[-161.49040222 149.12222290]
[-176.34732056 151.18908691]
[-188.94453430 161.68870544]
[-204.24061584 155.77583313]
[-206.50025940 139.53311157]
[-193.39894104 129.66966248]
[-178.41418457 136.33216858]
[-163.55725098 134.26530457]
[-152.01750183 124.84811401]
[-137.28285217 130.61009216]
[-125.74309540 121.19289398]
[-111.00843811 126.95485687]
[-102.26088715 114.95419312]
[-87.22330475 112.64646912]
[-74.69520569 121.90306091]
[-63.15546036 112.48587036]
[-48.42079926 118.24784088]
[-33.56387711 116.18098450]
[-18.70695496 114.11412811]
[-3.85003400 112.04727936]
[11.00688744 109.98042297]
[25.86380959 107.91356659]
[40.07853317 94.90264893]
[58.68625641 102.46082306]
[73.42056274 99.65010071]
[88.15486908 96.83938599]
[88.69248962 87.94371033]
[95.93566132 79.60216522]
[100.02993774 65.17175293]
[104.12421417 50.74133682]
[108.21849823 36.31092072]
[112.31277466 21.88050652]
[116.40705109 7.45009184]
[120.50133514 -6.98032284]
[124.59561157 -21.41073799]
[120.91889954 -36.79879761]
[131.83633423 -46.93087387]
[131.17158508 -56.15612411]
[136.21907043 -61.67004395]
[140.67468262 -75.99301147]
[145.13031006 -90.31597900]
[149.58593750 -104.63894653]
[145.44921875 -120.50777435]
[157.31210327 -131.83049011]
[172.97106934 -126.95926666]
[176.31752014 -110.90518951]
[163.90890503 -100.18332672]
[159.45327759 -85.86035919]
[154.99765015 -71.53739166]
[150.54203796 -57.21442032]
[146.26673889 -42.83659363]
[150.23631287 -28.48069572]
[139.02603149 -17.31645966]
[134.93174744 -2.88604403]
[130.83746338 11.54437065]
[126.74318695 25.97478676]
[122.64891052 40.40520096]
[118.55463409 54.83561707]
[114.46035004 69.26602936]
[110.36607361 83.69644928]
[121.27075958 73.39655304]
[136.23008728 74.50048065]
[145.50469971 86.28951263]
[143.05635071 101.08834839]
[130.47901917 109.26213837]
[115.96159363 105.48957062]
[126.50134277 116.16260529]
[137.04109192 126.83563995]
[147.58084106 137.50866699]
[160.04293823 129.08187866]
[173.84135437 123.08869934]
[188.50613403 119.73324585]
[203.53778076 119.12981415]
[218.42434692 121.29894257]
[232.65876770 126.16676331]
[245.75625610 133.56748962]
[257.27069092 143.24902344]
[266.80990601 154.88165283]
[274.04901123 168.06913757]
[278.74142456 182.36235046]
[280.72735596 197.27445984]
[279.93911743 212.29754639]
[276.40359497 226.91995239]
[270.24121094 240.64363098]
[261.66180420 253.00117493]
[250.95764160 263.57165527]
[238.49327087 271.99508667]
[224.69323730 277.98455811]
[210.02755737 281.33605957]
[194.99574280 281.93545532]
[180.10977173 279.76229858]
[165.87666321 274.89062500]
[152.78117371 267.48638916]
[141.26934814 257.80175781]
[131.73324585 246.16654968]
[124.49770355 232.97711182]
[119.80913544 218.68263245]
[117.82723999 203.76998901]
[118.61952209 188.74711609]
[122.15898132 174.12567139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 50]
[6 49]
[7 48]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[18 39]
[21 36]
[23 34]
[25 32]
[26 31]
[52 84]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[61 75]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
