%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGCGGAGCCAAAUUUGAAGCAAGCGGAGGCGCGGGGGCGCGUCUACGAAGCCGGACCUGUAGCAGUUUCUUUGGCUGCCUGGGCCCCUUGAGUCCAGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[204.96667480 181.99562073]
[204.96803284 163.71798706]
[191.69406128 156.73214722]
[178.42010498 149.74630737]
[165.14614868 142.76046753]
[151.87219238 135.77462769]
[138.59822083 128.78877258]
[125.32426453 121.80294037]
[112.05030823 114.81709290]
[98.18125153 119.01179504]
[85.35903168 112.26369476]
[80.96385193 98.45686340]
[67.68988800 91.47102356]
[53.81533432 98.16452026]
[38.83494186 95.43666840]
[28.45603943 84.53976440]
[26.50717545 69.79731750]
[13.23321438 62.81147385]
[-0.04074538 55.82563019]
[-13.31470585 48.83979034]
[-18.99506760 52.63123703]
[-25.49642181 54.58488464]
[-32.24397278 54.55297852]
[-38.64840698 52.56221771]
[-44.15736771 48.80933762]
[-48.30307388 43.64194107]
[-50.74202347 37.52639008]
[-51.28336716 31.00579262]
[-49.90364838 24.65174866]
[-61.47256851 15.10396957]
[-73.04148865 5.55619001]
[-88.60996246 2.73960376]
[-93.50107574 -11.32902241]
[-105.06999969 -20.87680244]
[-116.63891602 -30.42458153]
[-128.20783997 -39.97236252]
[-144.46133423 -42.15314102]
[-150.44837952 -57.42033768]
[-140.01002502 -70.06836700]
[-123.88433838 -67.08602142]
[-118.66005707 -51.54128265]
[-107.09114075 -41.99349976]
[-95.52221680 -32.44572067]
[-83.95330048 -22.89794159]
[-69.21231079 -20.76427650]
[-63.49370575 -6.01272964]
[-51.92478561 3.53504992]
[-40.35586929 13.08282948]
[-16.55169868 13.33108330]
[-6.32886362 35.56583023]
[6.94509649 42.55167007]
[20.21905708 49.53751373]
[33.49301529 56.52335358]
[46.74815750 49.78248978]
[61.60667038 52.16757965]
[72.33711243 62.97086716]
[74.67573547 78.19705963]
[87.94969177 85.18290710]
[101.81874847 80.98820496]
[114.64096832 87.73630524]
[119.03614807 101.54313660]
[132.31010437 108.52897644]
[145.58407593 115.51481628]
[158.85803223 122.50066376]
[172.13198853 129.48649597]
[185.40594482 136.47235107]
[198.67991638 143.45819092]
[211.95387268 150.44403076]
[221.42712402 142.63052368]
[232.97087097 138.54675293]
[245.18011475 138.66432190]
[256.57754517 142.94503784]
[265.79232788 150.84840393]
[271.72491455 161.39978027]
[273.67825317 173.31051636]
[271.43957520 185.13533020]
[284.04754639 193.26177979]
[296.65551758 201.38821411]
[309.26348877 209.51466370]
[321.87145996 217.64111328]
[326.58242798 217.67187500]
[330.57760620 219.14414978]
[333.47225952 221.62429810]
[335.07586670 224.59530640]
[335.40209961 227.53253174]
[346.97100830 237.08030701]
[358.53994751 246.62809753]
[370.10885620 256.17587280]
[385.45230103 253.15719604]
[399.12139893 260.75256348]
[404.66201782 275.37570190]
[399.45803833 290.12194824]
[385.96664429 298.02865601]
[370.55801392 295.36245728]
[360.50769043 283.38229370]
[360.56106567 267.74478149]
[348.99215698 258.19702148]
[337.42324829 248.64923096]
[325.85430908 239.10145569]
[313.74499512 230.24908447]
[301.13702393 222.12263489]
[288.52905273 213.99618530]
[275.92108154 205.86975098]
[263.31311035 197.74330139]
[247.79467773 206.75251770]
[229.76727295 206.78456116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[12 58]
[13 57]
[17 53]
[18 52]
[19 51]
[20 50]
[29 48]
[30 47]
[31 46]
[33 44]
[34 43]
[35 42]
[36 41]
[76 104]
[77 103]
[78 102]
[79 101]
[80 100]
[85 99]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
