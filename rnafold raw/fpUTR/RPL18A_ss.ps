%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGUGAAGGCCUGGUGAACGGCUGCGCGACAGAGGACACUUCCUUUUGCGGGUGGCGGCGAACGCGGAGAGCACGCC\
) } def
/len { sequence length } bind def

/coor [
[85.30474091 320.78024292]
[85.30474091 305.78024292]
[85.30474091 290.78024292]
[82.06964874 283.91058350]
[85.61080933 275.19424438]
[86.19970703 260.20581055]
[86.78860474 245.21737671]
[74.11901855 237.38493347]
[67.02378845 224.17457581]
[67.49666595 209.08673096]
[75.51073456 196.17660522]
[88.99880219 188.96417236]
[89.58769989 173.97573853]
[79.32012939 163.24667358]
[79.70384216 148.03788757]
[91.02707672 137.34106445]
[91.61597443 122.35262299]
[80.11431122 113.20950317]
[76.14516449 99.06274414]
[81.21201324 85.27100372]
[93.39559174 77.05847931]
[86.20604706 62.96517944]
[94.43704987 50.55148697]
[95.02594757 35.56304932]
[95.61484528 20.57461548]
[96.20374298 5.58617926]
[96.79264069 -9.40225601]
[89.60309601 -23.49555397]
[97.83409882 -35.90924835]
[98.42299652 -50.89768600]
[87.97393036 -62.44994354]
[88.78466797 -77.64196014]
[99.86238098 -87.53235626]
[100.45127869 -102.52079010]
[101.04017639 -117.50923157]
[101.62907410 -132.49766541]
[102.21797180 -147.48609924]
[102.80686951 -162.47453308]
[94.69648743 -176.72773743]
[103.21728516 -190.73945618]
[119.60379028 -190.09562683]
[126.99897003 -175.45857239]
[117.79530334 -161.88563538]
[117.20640564 -146.89720154]
[116.61750793 -131.90876770]
[116.02861023 -116.92033386]
[115.43971252 -101.93189240]
[114.85081482 -86.94345856]
[125.11838531 -76.21440125]
[124.73467255 -61.00561142]
[113.41143799 -50.30878830]
[112.82254028 -35.32035065]
[120.05419922 -22.29912758]
[111.78107452 -8.81335926]
[111.19217682 6.17507648]
[110.60327911 21.16351318]
[110.01438141 36.15194702]
[109.42548370 51.14038467]
[116.65715027 64.16160583]
[108.38402557 77.64737701]
[119.88568878 86.79049683]
[123.85483551 100.93725586]
[118.78798676 114.72899628]
[106.60440826 122.94152069]
[106.01551819 137.92996216]
[116.46458435 149.48222351]
[115.65383911 164.67424011]
[104.57613373 174.56463623]
[103.98723602 189.55307007]
[116.86784363 197.80152893]
[123.84429169 211.30064392]
[123.13193512 226.37907410]
[115.02210236 238.99201965]
[101.77704620 245.80627441]
[101.18814850 260.79470825]
[100.59925079 275.78314209]
[100.30474091 290.78024292]
[100.30474091 305.78024292]
[100.30474091 320.78024292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[5 76]
[6 75]
[7 74]
[12 69]
[13 68]
[16 65]
[17 64]
[21 60]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[29 52]
[30 51]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
