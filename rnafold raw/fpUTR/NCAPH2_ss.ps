%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCUACGCAUUUUCCUGGGCGGGAACAGCAAAAUGGCGCCAGAACUAGUGGCGGGCUGAGGACGCCGUACCCCUCGGAAGGCAGCCCUGCGGUCCCUUUGCCGCCCGUUCCCUCCCGGAC\
) } def
/len { sequence length } bind def

/coor [
[21.74641037 337.02252197]
[17.58730316 351.43438721]
[13.42819691 365.84625244]
[17.89149857 381.62634277]
[6.26479626 393.19146729]
[-9.49135685 388.64440918]
[-13.16837978 372.66281128]
[-0.98366743 361.68716431]
[3.17543888 347.27529907]
[7.33454514 332.86343384]
[-1.19366252 325.37292480]
[-6.28395700 315.16979980]
[-7.14723349 303.74822998]
[-3.61663914 292.79745483]
[3.82193947 283.95184326]
[14.09635639 278.54699707]
[25.70261955 277.41830444]
[30.95273972 263.36709595]
[36.20285797 249.31590271]
[41.45298004 235.26470947]
[46.70309830 221.21350098]
[43.90985489 206.58316040]
[55.98791885 196.36399841]
[61.23803711 182.31280518]
[66.48815918 168.26161194]
[71.73828125 154.21040344]
[76.98839569 140.15921021]
[82.23851776 126.10800171]
[65.11546326 113.22016907]
[58.29208755 89.39832306]
[43.56646347 86.54244995]
[30.60976410 95.59228516]
[15.06361675 92.74749756]
[6.15127325 79.69583893]
[9.16026974 64.18064117]
[22.30541992 55.40678406]
[37.78794098 58.57964706]
[46.42232895 71.81682587]
[61.14795303 74.67269135]
[68.48145294 61.58759689]
[58.35937119 50.51765823]
[48.23729324 39.44771957]
[38.11521530 28.37777901]
[22.50054550 29.22397804]
[10.02619362 19.79399681]
[6.58216858 4.54038286]
[13.79463387 -9.33457088]
[28.25808334 -15.27953815]
[43.14331818 -10.48748493]
[51.42198944 2.77892590]
[49.18515396 18.25570107]
[59.30723190 29.32563972]
[69.42931366 40.39558029]
[79.55139160 51.46551895]
[94.47317505 49.93569946]
[102.13845062 37.04215240]
[109.80373383 24.14860916]
[117.46901703 11.25506496]
[125.13429260 -1.63847888]
[132.79957581 -14.53202343]
[125.38236237 -25.26002884]
[122.62382507 -37.95930481]
[124.90537262 -50.70513535]
[131.84732056 -61.57968903]
[142.37150574 -68.96059418]
[154.86856079 -71.76293182]
[167.44407654 -69.59861755]
[175.75770569 -82.08395386]
[184.07133484 -94.56928253]
[179.49819946 -109.52322388]
[185.65473938 -123.89789581]
[199.63403320 -130.90600586]
[214.83546448 -127.23854828]
[224.08140564 -114.62718201]
[223.00619507 -99.02660370]
[212.11752319 -87.80293274]
[196.55667114 -86.25564575]
[188.24304199 -73.77031708]
[179.92941284 -61.28498459]
[188.11647034 -46.24853897]
[187.62765503 -29.04642296]
[178.50689697 -14.34921265]
[163.15383911 -6.19200516]
[145.69311523 -6.86674261]
[138.02783203 6.02680111]
[130.36256409 18.92034531]
[122.69728088 31.81389046]
[115.03199768 44.70743179]
[107.36671448 57.60097885]
[129.47901917 77.13756561]
[131.47721863 102.50645447]
[145.71920776 107.21452332]
[159.96119690 111.92259216]
[174.20317078 116.63066101]
[188.44515991 121.33872986]
[202.44892883 114.01275635]
[217.50616455 118.81434631]
[224.68367004 132.89479065]
[219.72315979 147.90042114]
[205.56761169 154.92864990]
[190.61528015 149.80976868]
[183.73709106 135.58071899]
[169.49510193 130.87265015]
[155.25312805 126.16457367]
[141.01113892 121.45651245]
[126.76915741 116.74844360]
[118.73636627 125.41744995]
[108.07890320 130.52587891]
[96.28971863 131.35812378]
[91.03959656 145.40931702]
[85.78947449 159.46052551]
[80.53936005 173.51171875]
[75.28923798 187.56292725]
[70.03911591 201.61412048]
[72.45684052 217.24951172]
[60.75429916 226.46362305]
[55.50418091 240.51481628]
[50.25405884 254.56602478]
[45.00394058 268.61721802]
[39.75381851 282.66842651]
[50.98945618 298.00775146]
[50.85141373 316.87350464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[17 120]
[18 119]
[19 118]
[20 117]
[21 116]
[23 114]
[24 113]
[25 112]
[26 111]
[27 110]
[28 109]
[30 39]
[31 38]
[40 54]
[41 53]
[42 52]
[43 51]
[55 89]
[56 88]
[57 87]
[58 86]
[59 85]
[60 84]
[67 79]
[68 78]
[69 77]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
