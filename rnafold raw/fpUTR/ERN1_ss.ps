%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCUAGUCAGUUCUGCGUCCGCUGAGGCUCGGUCACCGCCUCGCUGUCGUCGCGGCGCCCCCGCCCCGUCCUCUGUCCGUACCGCCCCCGGAGCCAGGGCCGAGUCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[-19.76374817 330.92199707]
[-32.69935989 331.80029297]
[-40.90358353 344.35778809]
[-41.97415161 360.14273071]
[-55.41271973 366.56567383]
[-63.61693954 379.12316895]
[-71.82116699 391.68066406]
[-68.33299255 407.09521484]
[-76.83674622 420.41668701]
[-92.28731537 423.74166870]
[-105.51813507 415.09756470]
[-108.67960358 399.61270142]
[-99.89607239 386.47399902]
[-84.37866211 383.47644043]
[-76.17443848 370.91894531]
[-67.97021484 358.36145020]
[-67.48646545 343.47470093]
[-53.46107864 336.15356445]
[-45.25685883 323.59606934]
[-49.43262100 307.36965942]
[-40.46133041 292.82257080]
[-23.43087196 289.12658691]
[-15.57577801 276.34777832]
[-14.74243832 268.89880371]
[-7.32406378 263.32931519]
[0.88015878 250.77180481]
[9.08438110 238.21430969]
[17.28860283 225.65681458]
[25.31902313 212.98747253]
[33.17411804 200.20867920]
[41.02921295 187.42988586]
[48.88430405 174.65109253]
[56.73939896 161.87229919]
[64.59449005 149.09350586]
[72.44958496 136.31472778]
[70.38928223 121.45688629]
[59.35342407 111.29766846]
[43.95997620 107.64357758]
[39.83654785 93.33111572]
[28.80068970 83.17189026]
[13.05238724 76.89277649]
[14.72654915 60.02169037]
[31.40176010 56.96004486]
[38.95991516 72.13603210]
[49.99577332 82.29525757]
[64.59986115 85.22268677]
[69.51264954 100.26181030]
[80.54850769 110.42102814]
[81.28114319 91.28869629]
[96.03294373 81.18765259]
[91.08480072 66.16013336]
[101.11853790 55.15225601]
[103.99419403 40.43048096]
[99.04605103 25.40295982]
[109.07978821 14.39508247]
[111.95545197 -0.32669011]
[114.83110809 -15.04846287]
[117.70676422 -29.77023506]
[111.87310791 -45.09669495]
[122.43776703 -57.63942337]
[138.53273010 -54.49552917]
[143.60089111 -38.89918900]
[132.42854309 -26.89457512]
[129.55288696 -12.17280293]
[126.67722321 2.54896927]
[123.80155945 17.27074242]
[128.95539856 31.24526405]
[118.71596527 43.30614090]
[115.84030914 58.02791214]
[120.99414062 72.00243378]
[110.75471497 84.06331635]
[120.05069733 97.78112793]
[115.35616302 114.49991608]
[98.83380127 122.03630066]
[113.82810211 122.44961548]
[128.82240295 122.86293030]
[143.82240295 122.86293030]
[158.81671143 122.44961548]
[173.81101990 122.03630066]
[188.80532837 121.62298584]
[196.69702148 108.36686707]
[210.51292419 101.50215149]
[225.84442139 103.21933746]
[237.79930115 112.97047424]
[242.56277466 127.64402008]
[238.61486816 142.55769348]
[227.21531677 152.95259094]
[212.00169373 155.51173401]
[197.82861328 149.41853333]
[189.21864319 136.61729431]
[174.22433472 137.03060913]
[159.23002625 137.44392395]
[144.23571777 137.85723877]
[140.27874756 140.75190735]
[134.43017578 141.09590149]
[128.40908813 137.85723877]
[113.41478729 137.44392395]
[98.42048645 137.03060913]
[85.22837830 144.16981506]
[77.37328339 156.94860840]
[69.51818848 169.72740173]
[61.66309738 182.50619507]
[53.80800247 195.28497314]
[45.95290756 208.06376648]
[38.09781647 220.84255981]
[36.22699738 229.92834473]
[29.84609985 233.86103821]
[21.64187813 246.41853333]
[13.43765640 258.97604370]
[5.23343372 271.53353882]
[-2.79698682 284.20288086]
[-10.65208054 296.98165894]
[-6.02534056 309.71908569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[5 16]
[6 15]
[7 14]
[22 112]
[23 111]
[25 110]
[26 109]
[27 108]
[28 107]
[29 105]
[30 104]
[31 103]
[32 102]
[33 101]
[34 100]
[35 99]
[36 48]
[37 47]
[39 45]
[40 44]
[50 71]
[52 69]
[53 68]
[55 66]
[56 65]
[57 64]
[58 63]
[74 98]
[75 97]
[76 96]
[77 93]
[78 92]
[79 91]
[80 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
