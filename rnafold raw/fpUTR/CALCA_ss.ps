%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGCUGCCACCGCCUCUGAUCCAAGCCACCUCCCGCCAGGUGAGCCCCGAGAUCCUGGCUCAGAGAGGUGUC\
) } def
/len { sequence length } bind def

/coor [
[60.70244598 308.50488281]
[49.22888565 318.51873779]
[34.67235565 322.99392700]
[19.55486107 321.15509033]
[6.49560261 313.32083130]
[-2.24282670 300.84848022]
[-5.14644051 285.89892578]
[-1.71217048 271.06231689]
[7.46497583 258.90911865]
[20.79500198 251.54499817]
[35.96839905 250.24581909]
[40.83889008 236.05856323]
[45.70938492 221.87130737]
[50.57987595 207.68403625]
[45.52260208 196.49720764]
[49.68802643 184.51924133]
[61.31389999 178.51168823]
[66.76651764 164.53782654]
[72.21913910 150.56396484]
[77.67176056 136.59008789]
[83.12437439 122.61622620]
[88.57699585 108.64236450]
[86.65593719 94.79312897]
[97.44913483 85.90502167]
[102.90175629 71.93115234]
[108.35437775 57.95728683]
[99.78440094 33.77280426]
[116.62631226 15.19548416]
[116.62631226 0.19548392]
[116.31630707 -14.80131245]
[115.69643402 -29.78849792]
[115.07656097 -44.77568436]
[114.45668793 -59.76287079]
[113.83680725 -74.75006104]
[102.04093170 -85.26827240]
[101.22090912 -101.05126953]
[111.86324310 -112.73528290]
[127.65402985 -113.38839722]
[139.22486877 -102.62312317]
[139.71099854 -86.82631683]
[128.82398987 -75.36993408]
[129.44387817 -60.38274765]
[130.06375122 -45.39556122]
[130.68362427 -30.40837288]
[131.30349731 -15.42118740]
[134.82818604 -8.67590714]
[131.62631226 0.19548392]
[131.62631226 15.19548416]
[137.40539551 17.85378265]
[142.31370544 21.94266891]
[146.00347900 27.19085312]
[148.20857239 33.24432373]
[148.76354980 39.69020844]
[147.61601257 46.08493423]
[144.83125305 51.98475266]
[140.58865356 56.97653580]
[135.17016602 60.70668411]
[128.94166565 62.90617371]
[122.32823944 63.40990448]
[116.87562561 77.38377380]
[111.42300415 91.35763550]
[113.34406281 105.20687103]
[102.55086517 114.09497833]
[97.09824371 128.06884766]
[91.64562225 142.04270935]
[86.19300842 156.01658630]
[80.74038696 169.99044800]
[75.28776550 183.96430969]
[78.58688354 201.94274902]
[64.76713562 212.55453491]
[59.89664078 226.74179077]
[55.02614975 240.92904663]
[50.15565872 255.11630249]
[61.33162689 265.46124268]
[67.32775116 279.46005249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 73]
[12 72]
[13 71]
[14 70]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[24 61]
[25 60]
[26 59]
[28 48]
[29 47]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
