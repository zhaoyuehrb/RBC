%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGCGGGGGCCCGCUCCCAGGCCCGCUCCCGAGCCCGUUCCGCUCCCGUCCGCCUUCUUCUCGCCUUCUCUCCGCGUGGCUCCUCCGUCCCGGCGUCUCCAAAACUGAAUGAGCGAGCGGCGCGUAGGGCGCGCGGCGGCGGCGGCGGCGGCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[-78.57771301 315.39617920]
[-88.26926422 326.84494019]
[-97.96081543 338.29367065]
[-107.65235901 349.74243164]
[-117.34391022 361.19119263]
[-120.35475159 376.72326660]
[-134.48338318 381.43826294]
[-144.17492676 392.88699341]
[-153.75431824 404.42974854]
[-163.22064209 416.06542969]
[-172.68695068 427.70111084]
[-182.15327454 439.33676147]
[-191.61959839 450.97244263]
[-187.50761414 465.93475342]
[-193.00706482 480.44461060]
[-206.00332642 488.92263794]
[-221.49903870 488.10888672]
[-233.53581238 478.31625366]
[-237.48524475 463.31018066]
[-231.82870483 448.86087036]
[-218.74124146 440.52432251]
[-203.25526428 441.50613403]
[-193.78894043 429.87045288]
[-184.32263184 418.23477173]
[-174.85630798 406.59912109]
[-165.38998413 394.96343994]
[-163.59912109 387.75375366]
[-155.62367249 383.19546509]
[-145.93212891 371.74670410]
[-143.61448669 357.03350830]
[-128.79266357 351.49963379]
[-119.10111237 340.05087280]
[-109.40956116 328.60214233]
[-99.71800995 317.15338135]
[-90.02645874 305.70462036]
[-87.86557007 288.31088257]
[-70.52670288 282.18026733]
[-61.06038284 270.54458618]
[-51.59406281 258.90893555]
[-51.19145966 254.10385132]
[-47.73273468 249.51445007]
[-41.52431488 247.01339722]
[-31.61122704 235.75593567]
[-21.69813728 224.49845886]
[-11.78504658 213.24098206]
[-1.87195730 201.98352051]
[0.73231959 187.31835938]
[15.65930462 182.07472229]
[25.57239532 170.81724548]
[35.48548508 159.55978394]
[37.55628586 152.42544556]
[45.70349884 148.18179321]
[55.83435440 137.11988831]
[65.96520996 126.05798340]
[76.09606171 114.99607849]
[86.22692108 103.93417358]
[89.43666077 90.32574463]
[102.71117401 85.93497467]
[112.84202576 74.87306976]
[116.45658112 59.47029114]
[130.75840759 55.31012726]
[140.88926697 44.24822235]
[144.50381470 28.84544373]
[158.80564880 24.68528366]
[168.93649292 13.62337685]
[179.06735229 2.56147099]
[177.96142578 -8.32307148]
[182.95159912 -17.81119347]
[192.16058350 -22.85578156]
[202.40397644 -21.98964882]
[212.95870972 -32.64786530]
[223.51344299 -43.30608368]
[234.06817627 -53.96429825]
[238.28092957 -69.21432495]
[252.73419189 -72.81331635]
[263.28890991 -83.47153473]
[273.84365845 -94.12975311]
[284.39837646 -104.78796387]
[294.95312500 -115.44618225]
[299.16586304 -130.69621277]
[313.61914062 -134.29519653]
[324.17385864 -144.95341492]
[334.72860718 -155.61163330]
[345.28332520 -166.26985168]
[355.73358154 -177.03053284]
[366.07833862 -187.89266968]
[376.42309570 -198.75479126]
[372.55386353 -210.70222473]
[374.14251709 -223.08673096]
[380.82418823 -233.54872131]
[391.26950073 -240.12150574]
[403.44885254 -241.60086060]
[415.02655029 -237.76528931]
[425.78723145 -248.21553040]
[436.54791260 -258.66577148]
[432.14767456 -273.32513428]
[435.07540894 -288.34802246]
[444.65829468 -300.28228760]
[458.69427490 -306.38552856]
[473.95797729 -305.25527954]
[486.94195557 -297.15124512]
[494.66253662 -283.93569946]
[495.34561157 -268.64541626]
[488.83419800 -254.79406738]
[476.62460327 -245.56454468]
[461.52246094 -243.07774353]
[446.99816895 -247.90509033]
[436.23748779 -237.45484924]
[425.47680664 -227.00460815]
[428.81054688 -209.70288086]
[421.05737305 -193.70616150]
[405.13278198 -185.45959473]
[387.28524780 -188.41003418]
[376.94046021 -177.54789734]
[366.59570312 -166.68577576]
[364.24813843 -159.63768005]
[355.94155884 -155.71511841]
[345.38681030 -145.05690002]
[334.83209229 -134.39868164]
[324.27734375 -123.74046326]
[320.81954956 -109.25279236]
[305.61132812 -104.89144897]
[295.05661011 -94.23323059]
[284.50186157 -83.57501221]
[273.94714355 -72.91680145]
[263.39239502 -62.25858307]
[259.93460083 -47.77090454]
[244.72639465 -43.40956497]
[234.17166138 -32.75134659]
[223.61692810 -22.09313202]
[213.06219482 -11.43491459]
[209.58822632 7.55672455]
[190.12925720 12.69232655]
[179.99841309 23.75423241]
[169.86755371 34.81613922]
[166.97763062 49.42769623]
[151.95117188 54.37907791]
[141.82031250 65.44098663]
[138.93038940 80.05254364]
[123.90393829 85.00392151]
[113.77307892 96.06582642]
[110.56333923 109.67425537]
[97.28882599 114.06502533]
[87.15797424 125.12693024]
[77.02711487 136.18884277]
[66.89626312 147.25074768]
[56.76540375 158.31265259]
[46.74295425 169.47286987]
[36.82986450 180.73034668]
[26.91677666 191.98780823]
[23.60344887 207.45819092]
[9.38551331 211.89660645]
[-0.52757603 223.15408325]
[-10.44066525 234.41154480]
[-20.35375595 245.66902161]
[-30.26684570 256.92648315]
[-39.95839310 268.37524414]
[-49.42471313 280.01089478]
[-58.89103317 291.64657593]
[-58.35619354 304.56668091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[7 29]
[8 28]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[37 159]
[38 158]
[39 157]
[42 156]
[43 155]
[44 154]
[45 153]
[46 152]
[48 150]
[49 149]
[50 148]
[52 147]
[53 146]
[54 145]
[55 144]
[56 143]
[58 141]
[59 140]
[61 138]
[62 137]
[64 135]
[65 134]
[66 133]
[70 131]
[71 130]
[72 129]
[73 128]
[75 126]
[76 125]
[77 124]
[78 123]
[79 122]
[81 120]
[82 119]
[83 118]
[84 117]
[85 115]
[86 114]
[87 113]
[93 109]
[94 108]
[95 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
