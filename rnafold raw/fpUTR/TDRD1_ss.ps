%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAGGCCAGGAGGGCGCACUGGGGAUUGGAGGCGAGGGAAGUGCAGGGCGCAUCCCAGGCGGCAGGGCUCCCAGCAUCGGCAGUCGCCAUCACCGCCAGACCGCAGAGACAGGUUCGGAUCCGCGGUCCUCUUGCCUCUUUCCAGGCCUCG\
) } def
/len { sequence length } bind def

/coor [
[84.08592224 449.59201050]
[69.96160126 441.98391724]
[67.24538422 426.17248535]
[78.02091980 414.28686523]
[78.63275146 399.29934692]
[79.24457550 384.31185913]
[79.85640717 369.32434082]
[80.46823120 354.33682251]
[81.08006287 339.34930420]
[73.86833191 326.31701660]
[82.16207886 312.84393311]
[82.77391052 297.85641479]
[83.38573456 282.86889648]
[83.99756622 267.88137817]
[84.60939789 252.89385986]
[85.22122192 237.90634155]
[76.23700714 222.86140442]
[86.13729095 207.36817932]
[86.44326782 192.37129211]
[86.74924469 177.37442017]
[84.10399628 173.33226013]
[84.01141357 167.57395935]
[87.38603210 161.77545166]
[88.30345917 146.80354309]
[89.22088623 131.83161926]
[90.13830566 116.85970306]
[84.66188049 107.87176514]
[85.11667633 98.60876465]
[90.00611877 92.23448181]
[82.68347168 79.14330292]
[75.36083221 66.05213165]
[61.87122345 57.78526306]
[62.41076279 42.90043259]
[55.08811951 29.80925751]
[41.59851456 21.54239082]
[42.13805389 6.65756035]
[34.81541061 -6.43361616]
[23.57994652 -16.37164307]
[9.69265938 -22.04114342]
[-4.19462872 -27.71064377]
[-18.08191681 -33.38014603]
[-33.78282166 -31.43280983]
[-42.64153290 -43.40663528]
[-56.52882004 -49.07613754]
[-70.41610718 -54.74563599]
[-84.30339813 -60.41513824]
[-101.25288391 -60.80398560]
[-105.57131958 -77.19872284]
[-91.01275635 -85.88690948]
[-78.63389587 -74.30242157]
[-64.74660492 -68.63292694]
[-50.85932159 -62.96342468]
[-36.97203445 -57.29392242]
[-22.26443863 -59.64677811]
[-12.41241550 -47.26743317]
[1.47487199 -41.59793091]
[15.36215973 -35.92843246]
[29.24944687 -30.25893211]
[32.61565781 -40.51340866]
[40.21110916 -46.34158707]
[38.98847198 -61.29167557]
[37.76583099 -76.24176025]
[36.54319382 -91.19184875]
[35.32055283 -106.14193726]
[34.09791565 -121.09202576]
[25.35568237 -127.69026184]
[21.79363441 -137.81434631]
[24.37056732 -148.00570679]
[31.99063110 -154.92344666]
[31.37880325 -169.91096497]
[30.76697350 -184.89848328]
[17.40752411 -192.61396790]
[10.36046219 -206.33775330]
[11.87448215 -221.69064331]
[21.46646309 -233.77359009]
[36.07564163 -238.73095703]
[51.04027939 -234.98086548]
[61.58521652 -223.71997070]
[64.34560394 -208.54156494]
[58.44060516 -194.28903198]
[45.75448990 -185.51031494]
[46.36632156 -170.52279663]
[46.97814941 -155.53527832]
[58.51908875 -140.06474304]
[49.04800415 -122.31466675]
[50.27064133 -107.36457825]
[51.49328232 -92.41448975]
[52.71591949 -77.46440125]
[53.93856049 -62.51431274]
[55.16119766 -47.56422424]
[65.90139008 -29.43485451]
[47.90658569 -13.75625896]
[55.22922897 -0.66508275]
[68.19506836 6.66541529]
[68.17929840 22.48661423]
[75.50193787 35.57778931]
[88.46778107 42.90828705]
[88.45200348 58.72948837]
[95.77465057 71.82066345]
[103.09729004 84.91184235]
[116.03637695 92.50000000]
[131.03637695 92.50000000]
[146.03637695 92.50000000]
[161.03637695 92.50000000]
[176.03637695 92.50000000]
[191.03637695 92.50000000]
[204.83654785 84.76270294]
[217.56381226 92.50000000]
[232.56381226 92.50000000]
[243.69694519 81.60544586]
[258.90908813 81.81912994]
[269.22674561 92.50000000]
[280.22344971 81.14886475]
[296.02685547 80.98176575]
[307.26110840 92.09785461]
[307.26110840 107.90214539]
[296.02685547 119.01823425]
[280.22344971 118.85113525]
[269.22674561 107.50000000]
[258.90908813 118.18087006]
[243.69694519 118.39455414]
[232.56381226 107.50000000]
[217.56381226 107.50000000]
[204.83654785 115.23729706]
[191.03637695 107.50000000]
[176.03637695 107.50000000]
[161.03637695 107.50000000]
[146.03637695 107.50000000]
[131.03637695 107.50000000]
[116.03637695 107.50000000]
[105.11022949 117.77712250]
[104.19280243 132.74903870]
[103.27537537 147.72096252]
[102.35794830 162.69288635]
[101.74612427 177.68038940]
[101.44014740 192.67727661]
[101.13417053 207.67414856]
[109.50653839 217.53733826]
[108.90824127 230.05892944]
[100.20874023 238.51817322]
[99.59690857 253.50569153]
[98.98508453 268.49319458]
[98.37325287 283.48071289]
[97.76142883 298.46823120]
[97.14959717 313.45574951]
[104.31756592 327.56002808]
[96.06758118 339.96112061]
[95.45574951 354.94863892]
[94.84392548 369.93615723]
[94.23209381 384.92367554]
[93.62026215 399.91119385]
[93.00843811 414.89871216]
[102.77932739 427.62307739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[11 145]
[12 144]
[13 143]
[14 142]
[15 141]
[16 140]
[18 137]
[19 136]
[20 135]
[23 134]
[24 133]
[25 132]
[26 131]
[29 100]
[30 99]
[31 98]
[33 96]
[34 95]
[36 93]
[37 92]
[38 58]
[39 57]
[40 56]
[41 55]
[43 53]
[44 52]
[45 51]
[46 50]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[69 83]
[70 82]
[71 81]
[101 130]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
[108 123]
[109 122]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
