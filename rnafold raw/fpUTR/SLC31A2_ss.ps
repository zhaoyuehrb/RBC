%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCCGUGCGGCCAGGGUAGCUAUCGCGGCGGCGGCGGCGGCGGCGGUUGAACUGACUCGGAGCGAGGAGACCCGAGCGAGCAGACGCGGCCCUGGCGCCCGCCCUGCGCACUCACC\
) } def
/len { sequence length } bind def

/coor [
[79.95439911 324.30450439]
[68.50960541 314.14205933]
[63.10931396 299.82092285]
[64.99447632 284.63195801]
[73.73189545 272.06549072]
[87.31376648 265.00918579]
[87.31376648 250.00918579]
[87.31376648 235.00918579]
[87.31376648 220.00918579]
[87.31376648 205.00918579]
[84.53677368 200.98020935]
[84.35044861 195.13755798]
[87.73433685 189.21617126]
[88.53266907 174.23742676]
[89.33100128 159.25869751]
[90.12933350 144.27995300]
[90.92766571 129.30120850]
[91.72599792 114.32247162]
[82.75521088 108.66468811]
[78.08973694 97.45306396]
[63.51828766 101.01296997]
[48.94683838 104.57286835]
[39.42359924 117.48361969]
[23.38714600 117.94375610]
[13.13927364 105.60031128]
[16.54127312 89.92211151]
[30.98342133 82.93613434]
[45.38693619 90.00141907]
[59.95838547 86.44152069]
[74.52983093 82.88161469]
[85.68591309 72.85455322]
[90.77449036 58.74405289]
[95.86307526 44.63354874]
[100.95166016 30.52304268]
[98.35473633 14.91642475]
[109.95079803 5.56866980]
[115.03938293 -8.54183388]
[120.12796783 -22.65233803]
[120.10852814 -31.91822052]
[125.54438782 -37.06768036]
[131.00680542 -51.03772354]
[136.46920776 -65.00776672]
[134.28865051 -80.67798615]
[146.12945557 -89.71373749]
[151.59185791 -103.68377686]
[157.05427551 -117.65382385]
[150.96202087 -131.98986816]
[156.70069885 -146.07966614]
[170.40547180 -151.79934692]
[175.86787415 -165.76937866]
[175.23318481 -172.55987549]
[177.81710815 -177.80339050]
[182.01075745 -180.32484436]
[188.20893860 -193.98435974]
[182.88833618 -208.62432861]
[189.36875916 -222.38873291]
[203.35852051 -227.37091064]
[209.55670166 -241.03042603]
[215.75488281 -254.68995667]
[221.95306396 -268.34948730]
[228.15124512 -282.00900269]
[222.83062744 -296.64895630]
[229.31105042 -310.41336060]
[243.30082703 -315.39553833]
[239.02668762 -330.85876465]
[248.56767273 -343.75640869]
[264.60473633 -344.19451904]
[274.83563232 -331.83697510]
[271.41207886 -316.16348267]
[256.96035767 -309.19735718]
[262.42333984 -295.38824463]
[256.33206177 -281.44726562]
[241.81077576 -275.81082153]
[235.61259460 -262.15127563]
[229.41441345 -248.49177551]
[223.21621704 -234.83224487]
[217.01803589 -221.17272949]
[222.48101807 -207.36361694]
[216.38977051 -193.42262268]
[201.86846924 -187.78617859]
[195.67028809 -174.12666321]
[189.83792114 -160.30697632]
[184.37551880 -146.33692932]
[190.56570435 -132.83815002]
[185.22505188 -118.59272766]
[171.02432251 -112.19141388]
[165.56190491 -98.22136688]
[160.09950256 -84.25132751]
[162.67076111 -69.58033752]
[150.43925476 -59.54535675]
[144.97683716 -45.57531357]
[139.51443481 -31.60527229]
[134.23846436 -17.56375504]
[129.14988708 -3.45325136]
[124.06130219 10.65725231]
[127.02220154 25.25459290]
[115.06216431 35.61162567]
[109.97357941 49.72212982]
[104.88499451 63.83263397]
[99.79641724 77.94313812]
[118.86186218 95.91470337]
[106.70474243 115.12080383]
[105.90641022 130.09954834]
[105.10807800 145.07829285]
[104.30974579 160.05702209]
[103.51141357 175.03576660]
[102.71307373 190.01451111]
[102.31376648 205.00918579]
[102.31376648 220.00918579]
[102.31376648 235.00918579]
[102.31376648 250.00918579]
[102.31376648 265.00918579]
[115.89564514 272.06549072]
[124.63306427 284.63195801]
[126.51822662 299.82092285]
[121.11793518 314.14205933]
[109.67314148 324.30450439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 112]
[7 111]
[8 110]
[9 109]
[10 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[20 30]
[21 29]
[22 28]
[31 100]
[32 99]
[33 98]
[34 97]
[36 95]
[37 94]
[38 93]
[40 92]
[41 91]
[42 90]
[44 88]
[45 87]
[46 86]
[49 83]
[50 82]
[53 81]
[54 80]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
