%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUCUGAAUGCUGUGUGGACAGAGGAGGAGGACCCAAUAAGAGACCACACCGCUGUUCCAGACCCUCUCC\
) } def
/len { sequence length } bind def

/coor [
[103.17428589 237.07365417]
[107.85397339 222.44505310]
[119.23178864 212.12803650]
[115.98519897 197.48359680]
[112.73860168 182.83915710]
[109.49201202 168.19471741]
[106.24541473 153.55027771]
[102.68013000 138.98014832]
[98.79784393 124.49125671]
[94.91555786 110.00236511]
[90.71811676 95.60162354]
[86.20753479 81.29586792]
[74.67854309 70.46105957]
[78.23057556 55.99619293]
[73.71998596 41.69043732]
[69.20940399 27.38468361]
[64.69881439 13.07892990]
[60.18822861 -1.22682428]
[55.67764282 -15.53257847]
[40.00613403 -15.57434559]
[25.11746407 -20.40374756]
[12.43642521 -29.54625511]
[3.17276502 -42.11518860]
[-1.79422677 -56.89769363]
[-1.99916673 -72.47177887]
[2.56584263 -87.34310913]
[11.45158386 -100.08837128]
[23.79590225 -109.49149323]
[18.66559982 -123.58688354]
[4.79184151 -131.64283752]
[2.58271956 -147.53306580]
[13.73288250 -159.06794739]
[29.68888092 -157.39889526]
[38.21063614 -143.80628967]
[32.76099014 -128.71719360]
[37.89129257 -114.62179565]
[52.27546310 -115.46036530]
[66.31898499 -112.16639709]
[78.85801697 -105.00348663]
[88.85070801 -94.55624390]
[95.46380615 -81.68260193]
[98.14209747 -67.44336700]
[96.65503693 -53.01480484]
[91.11653137 -39.59146118]
[81.97631073 -28.28728104]
[69.98339844 -20.04316521]
[74.49398041 -5.73741150]
[79.00457001 8.56834316]
[83.51515961 22.87409782]
[88.02574158 37.17985153]
[92.53633118 51.48560715]
[103.74269104 61.29716873]
[100.51329041 76.78527832]
[105.02387238 91.09103394]
[110.41624451 97.44863892]
[109.40444183 106.12007904]
[113.28672791 120.60897064]
[117.16901398 135.09785461]
[122.57047272 142.86106873]
[120.88985443 150.30368042]
[124.13645172 164.94812012]
[127.38304138 179.59255981]
[130.62963867 194.23699951]
[133.87623596 208.88143921]
[148.54820251 213.42335510]
[158.97174072 224.70365906]
[162.34300232 239.68798828]
[157.75511169 254.34564209]
[146.44219971 264.73379517]
[131.44737244 268.05807495]
[116.80417633 263.42425537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[8 58]
[9 57]
[10 56]
[11 54]
[12 53]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[28 36]
[29 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
