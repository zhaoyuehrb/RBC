%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGACUGGGCGAGCACCGAGGGCGUGAACCCGGAAGGUGGCGCGGCCACCAGUAACAUGAUCUCUAGACUGGGACGGUGGGGUUCCUGCCGGCUGUAUUCGGGCCUUGGACUGGACUGAGAAGCUACGGUGGAGACCAUCC\
) } def
/len { sequence length } bind def

/coor [
[86.30956268 340.16040039]
[69.94552612 339.08782959]
[62.93603134 324.26220703]
[72.49184418 310.93484497]
[73.47289276 295.96697998]
[74.45394135 280.99908447]
[71.73217010 274.06640625]
[75.62316132 265.71652222]
[76.93049622 250.77359009]
[78.23783875 235.83067322]
[66.52787781 228.72451782]
[58.99950409 217.20214844]
[57.17752075 203.49258423]
[61.47613525 190.27774048]
[71.10655212 180.16770935]
[84.22102356 175.18528748]
[85.85402679 160.27444458]
[87.48703003 145.36360168]
[89.12003326 130.45275879]
[90.75303650 115.54191589]
[80.81733704 104.10645294]
[82.69260406 87.84397125]
[96.94060516 77.52490234]
[88.07096100 65.42823029]
[79.20131683 53.33156204]
[70.33167267 41.23489380]
[55.93179703 34.68095779]
[54.64574051 19.84197807]
[45.77609634 7.74530935]
[36.90645218 -4.35135984]
[28.03680611 -16.44802856]
[19.16716194 -28.54469872]
[10.29751682 -40.64136887]
[6.29571009 -35.01436996]
[0.05878691 -30.50217628]
[-8.06847763 -27.79769135]
[-17.55022049 -27.48648262]
[-27.69187737 -29.99779701]
[-41.55007172 -35.73804855]
[-55.40826416 -41.47829819]
[-69.26645660 -47.21855164]
[-83.12464905 -52.95880127]
[-96.98284149 -58.69905472]
[-113.93013000 -59.17433929]
[-118.16489410 -75.59088898]
[-103.56221008 -84.20471191]
[-91.24259186 -72.55724335]
[-77.38439941 -66.81699371]
[-63.52620697 -61.07674408]
[-49.66801071 -55.33649063]
[-35.80981827 -49.59624100]
[-21.95162582 -43.85598755]
[-15.95202732 -48.35652542]
[-28.22049522 -56.98697662]
[-23.80358696 -71.32192993]
[-8.80533600 -71.55092621]
[-3.95282888 -57.35759354]
[2.04677057 -61.85812759]
[0.41376734 -76.76897430]
[-1.21923578 -91.67981720]
[-13.26106358 -101.56071472]
[-14.70475101 -116.70569611]
[-5.21061563 -128.12484741]
[-6.84361839 -143.03569031]
[-8.47662163 -157.94653320]
[-10.10962486 -172.85737610]
[-22.59047127 -182.55294800]
[-24.47703743 -198.24423218]
[-14.65005875 -210.62187195]
[1.06029522 -212.34243774]
[13.33334827 -202.38514709]
[14.88771629 -186.65747070]
[4.80122042 -174.49038696]
[6.43422318 -159.57954407]
[8.06722641 -144.66868591]
[9.70022964 -129.75784302]
[21.44087219 -120.66428375]
[23.30937958 -105.56582642]
[13.69160938 -93.31282043]
[15.32461262 -78.40197754]
[16.95761490 -63.49113083]
[22.39418602 -49.51101303]
[31.26383018 -37.41434097]
[40.13347626 -25.31767273]
[49.00312042 -13.22100449]
[57.87276459 -1.12433541]
[66.74240875 10.97233391]
[80.50787354 16.66103363]
[82.42834473 32.36524963]
[91.29798889 44.46191788]
[100.16763306 56.55858612]
[109.03727722 68.65525818]
[122.10869598 76.01310730]
[137.05162048 77.32044220]
[151.99453735 78.62777710]
[166.93745422 79.93511963]
[174.92639160 72.41399384]
[185.52584839 70.61100769]
[195.14906311 74.88882446]
[200.67549133 83.59331512]
[215.54716492 85.55120850]
[230.41883850 87.50910187]
[245.29051208 89.46698761]
[260.16220093 91.42488098]
[274.85421753 85.55506134]
[286.46267700 94.88741302]
[301.33435059 96.84530640]
[312.74060059 86.14801788]
[328.35711670 85.33682251]
[340.81030273 94.79474640]
[344.22012329 110.05603790]
[336.97656250 123.91478729]
[322.49984741 129.82731628]
[307.62536621 125.00191498]
[299.37646484 111.71697998]
[284.50479126 109.75908661]
[270.87649536 115.76894379]
[258.20428467 106.29655457]
[243.33262634 104.33866119]
[228.46095276 102.38076782]
[213.58927917 100.42288208]
[198.71760559 98.46498871]
[181.51832581 107.20350647]
[165.63012695 94.87803650]
[150.68719482 93.57070160]
[135.74427795 92.26336670]
[120.80136108 90.95603180]
[118.60314178 108.33139038]
[105.66388702 117.17491913]
[104.03088379 132.08575439]
[102.39788055 146.99661255]
[100.76487732 161.90745544]
[99.13187408 176.81829834]
[112.54401398 186.42660522]
[119.26243591 201.39280701]
[117.54853058 217.61389160]
[107.96143341 230.69451904]
[93.18075562 237.13800049]
[91.87342072 252.08093262]
[90.56608582 267.02383423]
[89.42182159 281.98013306]
[88.44077301 296.94802856]
[87.45973206 311.91589355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 143]
[5 142]
[6 141]
[8 140]
[9 139]
[10 138]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[23 92]
[24 91]
[25 90]
[26 89]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[58 81]
[59 80]
[60 79]
[63 76]
[64 75]
[65 74]
[66 73]
[93 127]
[94 126]
[95 125]
[96 124]
[100 122]
[101 121]
[102 120]
[103 119]
[104 118]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
