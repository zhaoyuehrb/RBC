%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAGCCCGUGCCCCCCGCGCGCCGGGGCCGAAUGCGCGCCGCGUAGGGUCCCCCGGGCCGAGAGGGGUGCCCGGAGGGAAGAGCGCGGUGGGGGCGCCCCGGCCCCGCUGCCCUGGGGCU\
) } def
/len { sequence length } bind def

/coor [
[48.40572357 422.48706055]
[43.06033325 436.74703979]
[32.37240219 447.59542847]
[18.19367218 453.15274048]
[2.98069787 452.45608521]
[-10.63078022 445.62619019]
[-20.28249168 433.84634399]
[-24.30222130 419.15753174]
[-21.99352264 404.10461426]
[-13.75639534 391.29565430]
[-1.01796961 382.94985962]
[14.01474476 380.51318359]
[17.80443573 365.99978638]
[21.59412575 351.48641968]
[25.38381577 336.97302246]
[29.17350769 322.45965576]
[21.44585609 309.77819824]
[25.08239365 295.00558472]
[38.43625259 286.98611450]
[37.06595612 279.63400269]
[42.51249313 272.15289307]
[46.67160034 257.74102783]
[50.83070374 243.32916260]
[46.92571640 228.95556641]
[58.18606949 217.84182739]
[62.34517670 203.42996216]
[66.50428009 189.01809692]
[70.66339111 174.60623169]
[74.82249451 160.19436646]
[78.98159790 145.78250122]
[83.14070892 131.37063599]
[87.29981232 116.95877838]
[79.86944580 106.60724640]
[79.72026825 93.86588287]
[86.90624237 83.34322357]
[98.82820129 78.84529114]
[103.35401154 64.54434204]
[107.87982178 50.24339676]
[112.40563202 35.94245148]
[116.19532013 21.42906952]
[119.23900604 6.74111605]
[122.28269196 -7.94683743]
[125.32637787 -22.63479042]
[128.37005615 -37.32274628]
[131.41374207 -52.01069641]
[134.45742798 -66.69865417]
[124.40954590 -76.22998810]
[120.44395447 -89.38610840]
[123.50196838 -102.67085266]
[132.67314148 -112.60942841]
[145.46278381 -116.65724182]
[148.88058472 -131.26268005]
[152.29838562 -145.86810303]
[155.71618652 -160.47354126]
[158.94720459 -175.12142944]
[161.99089050 -189.80937195]
[165.03457642 -204.49732971]
[168.07826233 -219.18528748]
[171.12194824 -233.87324524]
[174.16561890 -248.56118774]
[177.02149963 -263.28680420]
[166.88250732 -275.19207764]
[166.81983948 -290.82952881]
[176.86306763 -302.81567383]
[192.27009583 -305.49099731]
[205.76620483 -297.59231567]
[210.97892761 -282.84912109]
[205.44697571 -268.22271729]
[191.78239441 -260.61923218]
[193.71145630 -253.39360046]
[188.85357666 -245.51750183]
[185.80989075 -230.82955933]
[182.76620483 -216.14160156]
[179.72251892 -201.45364380]
[176.67883301 -186.76568604]
[173.63514709 -172.07774353]
[175.37907410 -164.80520630]
[170.32162476 -157.05574036]
[166.90382385 -142.45030212]
[163.48602295 -127.84487152]
[160.06822205 -113.23944092]
[171.17541504 -101.22467804]
[172.99253845 -84.79713440]
[164.61369324 -70.35907745]
[149.14538574 -63.65496826]
[146.10169983 -48.96701431]
[143.05801392 -34.27906036]
[140.01432800 -19.59110641]
[136.97064209 -4.90315247]
[133.92695618 9.78480148]
[130.88327026 24.47275543]
[132.42393494 26.94698334]
[133.01776123 30.21506691]
[132.34370422 33.89648056]
[130.23318481 37.49699783]
[126.70657349 40.46826172]
[122.18076324 54.76920700]
[117.65496063 69.07015228]
[113.12915039 83.37110138]
[121.07044220 97.77932739]
[116.30730438 113.52651215]
[101.71167755 121.11788177]
[97.55257416 135.52975464]
[93.39346313 149.94161987]
[89.23435974 164.35348511]
[85.07525635 178.76533508]
[80.91614532 193.17720032]
[76.75704193 207.58906555]
[72.59793091 222.00093079]
[76.20543671 237.40536499]
[65.24256897 247.48826599]
[61.08346176 261.90011597]
[56.92435837 276.31198120]
[52.94963455 290.77578735]
[60.67801666 304.30020142]
[56.62798309 318.96487427]
[43.68688965 326.24935913]
[39.89719772 340.76272583]
[36.10750580 355.27609253]
[32.31781769 369.78948975]
[28.52812576 384.30285645]
[40.45047379 393.77798462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 121]
[13 120]
[14 119]
[15 118]
[16 117]
[19 114]
[21 113]
[22 112]
[23 111]
[25 109]
[26 108]
[27 107]
[28 106]
[29 105]
[30 104]
[31 103]
[32 102]
[36 99]
[37 98]
[38 97]
[39 96]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[51 81]
[52 80]
[53 79]
[54 78]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
