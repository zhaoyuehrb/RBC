%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGCCCGGGCGCGGCGCGGUGGCCUCGCGGUGCCUAGGCUGGGGCUGCCGGACCGUGAGGCUGUGAGUCGCGCGGACGGAGCCGGACAAAAGCGGGCGGCGGCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[67.56473541 118.98682404]
[63.64115906 109.51737976]
[48.66393661 110.34369659]
[33.68671417 111.17001343]
[18.70949173 111.99633026]
[3.73226905 112.82264709]
[-9.62071705 121.30841827]
[-22.75489426 114.28398132]
[-37.73211670 115.11029816]
[-52.70933914 115.93661499]
[-67.68656158 116.76293182]
[-82.66378784 117.58924866]
[-96.01676941 126.07501984]
[-109.15094757 119.05058289]
[-119.66700745 130.54190063]
[-134.86781311 131.16653442]
[-145.75820923 121.07026672]
[-160.73544312 121.89658356]
[-175.71266174 122.72290039]
[-190.68988037 123.54921722]
[-205.66709900 124.37552643]
[-219.02009583 132.86129761]
[-232.15426636 125.83686829]
[-247.13148499 126.66318512]
[-262.10870361 127.48950195]
[-275.53411865 136.90707397]
[-290.28649902 129.74475098]
[-291.18988037 113.37050629]
[-277.31494141 104.62876129]
[-262.93502808 112.51227570]
[-247.95780945 111.68595886]
[-232.98059082 110.85964203]
[-220.69886780 102.43297577]
[-206.49342346 109.39830780]
[-191.51620483 108.57199097]
[-176.53897095 107.74567413]
[-161.56175232 106.91935730]
[-146.58453369 106.09304047]
[-136.87089539 94.86000824]
[-121.69364166 93.80865479]
[-109.97726440 104.07336426]
[-97.69554901 95.64669800]
[-83.49010468 102.61202240]
[-68.51287842 101.78570557]
[-53.53565598 100.95938873]
[-38.55843353 100.13307953]
[-23.58121109 99.30676270]
[-11.29949474 90.88008881]
[2.90595269 97.84542084]
[17.88317490 97.01910400]
[32.86039734 96.19278717]
[47.83761978 95.36647034]
[62.81484222 94.54015350]
[69.05265045 78.67378998]
[81.65832520 67.19559479]
[98.03807068 62.46739197]
[114.82151031 65.46207428]
[123.36862946 53.13540268]
[131.91575623 40.80873871]
[140.46287537 28.48206902]
[149.00999451 16.15540314]
[150.51510620 0.40595084]
[164.12554932 -5.64426279]
[172.67266846 -17.97093010]
[181.21978760 -30.29759789]
[189.76690674 -42.62426376]
[193.82342529 -59.08576584]
[210.76455688 -59.74477386]
[216.08758545 -43.64813995]
[202.09358215 -34.07714462]
[193.54646301 -21.75047684]
[184.99932861 -9.42380905]
[176.45220947 2.90285802]
[175.55845642 17.77062416]
[161.33666992 24.70252419]
[152.78953552 37.02919006]
[144.24241638 49.35585785]
[135.69529724 61.68252563]
[127.14817810 74.00919342]
[136.55746460 91.27658844]
[135.95880127 110.93209839]
[149.15089417 118.07131195]
[164.12742615 113.78862000]
[177.40440369 121.21672058]
[181.39498901 135.52093506]
[194.58709717 142.66015625]
[207.77920532 149.79936218]
[220.97131348 156.93856812]
[235.94784546 152.65588379]
[249.22480774 160.08398438]
[253.21540833 174.38819885]
[268.28924561 169.63902283]
[282.26745605 177.01365662]
[286.85699463 192.13687134]
[279.33499146 206.03633118]
[264.16409302 210.46572876]
[250.34495544 202.79718018]
[246.07620239 187.58030701]
[231.91853333 192.06318665]
[218.43815613 185.01094055]
[213.83210754 170.13067627]
[200.63999939 162.99147034]
[187.44789124 155.85226440]
[174.25578308 148.71304321]
[160.09811401 153.19592285]
[146.61775208 146.14367676]
[142.01168823 131.26341248]
[128.81958008 124.12420654]
[121.22993469 131.01347351]
[112.06121063 135.59596252]
[101.99537659 137.53083801]
[91.78112030 136.67417908]
[82.17819214 133.08970642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[14 41]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[23 32]
[24 31]
[25 30]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[63 73]
[64 72]
[65 71]
[66 70]
[81 108]
[82 107]
[85 104]
[86 103]
[87 102]
[88 101]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
