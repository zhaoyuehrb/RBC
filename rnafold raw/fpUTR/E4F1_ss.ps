%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCCGUCAAUCCGCUCCGGUUCUGCCCCGCCCUCCUCUUGCCGUUCCCUCACGCUGGCCUCGGCGCGGCCCGUUGUUAUGACGACAUGGUCGUAAAUCCGCCAUCUUCCUGCGGCGCGUUGCGAC\
) } def
/len { sequence length } bind def

/coor [
[241.91186523 214.70841980]
[229.58335876 206.16397095]
[217.25483704 197.61952209]
[204.92631531 189.07508850]
[197.55747986 187.83746338]
[192.40208435 180.16369629]
[180.28868103 171.31692505]
[168.17526245 162.47015381]
[156.06185913 153.62338257]
[145.31472778 157.81141663]
[133.76817322 156.22619629]
[124.35455322 149.15196228]
[119.52199554 138.28176880]
[120.59819794 126.31351471]
[108.93711853 116.87850952]
[94.51696014 118.29460144]
[83.25273132 109.18069458]
[81.62788391 94.78256989]
[69.96680450 85.34756470]
[58.30572128 75.91256714]
[53.74617004 75.37902069]
[50.01435089 73.55008698]
[47.42621613 70.86666870]
[46.11320877 67.82803345]
[46.01969910 64.92333984]
[35.34770966 54.38253784]
[24.67571640 43.84173203]
[9.42020226 39.64889526]
[5.80233717 25.20035744]
[-4.86965513 14.65955067]
[-15.54164696 4.11874533]
[-26.21364021 -6.42206001]
[-39.55033493 -2.01391888]
[-53.41610718 -3.79694319]
[-65.09223938 -11.36366177]
[-72.31438446 -23.17827606]
[-73.71163177 -36.88806534]
[-69.06636047 -49.79182053]
[-79.47436523 -60.59336853]
[-94.62150574 -65.16225433]
[-97.88088226 -79.69586182]
[-108.28889465 -90.49740601]
[-116.59100342 -94.56434631]
[-118.81664276 -101.69721222]
[-128.95428467 -112.75289154]
[-144.75263977 -113.18635559]
[-155.55641174 -124.72124481]
[-154.95594788 -140.51412964]
[-143.30747986 -151.19535828]
[-127.52182770 -150.42794800]
[-116.96435547 -138.66719055]
[-117.89861298 -122.89054108]
[-107.76096344 -111.83486176]
[-97.48734283 -100.90541840]
[-87.07933807 -90.10386658]
[-72.67665100 -86.30757904]
[-68.67282104 -71.00137329]
[-58.26481247 -60.19982910]
[-42.73397827 -64.47819519]
[-27.06670380 -60.34666443]
[-15.53281498 -48.83398438]
[-11.32441521 -32.99357224]
[-15.67283344 -17.09405327]
[-5.00084162 -6.55324697]
[5.67115068 3.98755860]
[16.34314346 14.52836418]
[30.83532524 17.96725082]
[35.21652222 33.16973877]
[45.88851547 43.71054459]
[56.56050491 54.25135040]
[67.74072266 64.25148773]
[79.40180206 73.68648529]
[91.06288147 83.12149048]
[105.48303986 81.70539856]
[116.74726868 90.81930542]
[118.37211609 105.21743011]
[130.03320312 114.65243530]
[148.69007874 111.88960266]
[163.26325989 123.35690308]
[164.90863037 141.50997925]
[177.02203369 150.35675049]
[189.13545227 159.20352173]
[201.24885559 168.05029297]
[213.47074890 176.74656677]
[225.79927063 185.29101562]
[238.12779236 193.83544922]
[250.45631409 202.37989807]
[263.33505249 200.85736084]
[273.44815063 208.31608582]
[275.65090942 220.27885437]
[287.76431274 229.12562561]
[299.87771606 237.97239685]
[311.99111938 246.81916809]
[324.10452271 255.66593933]
[336.21792603 264.51272583]
[348.33135986 273.35949707]
[361.37780762 269.76208496]
[373.91937256 274.30233765]
[381.41671753 285.09695435]
[381.29562378 298.04397583]
[393.18652344 307.18765259]
[405.07739258 316.33132935]
[416.96829224 325.47500610]
[431.13327026 319.53796387]
[446.36700439 321.49475098]
[458.57168579 330.81900024]
[464.46429443 345.00253296]
[462.45977783 360.23004150]
[453.09732056 372.40542603]
[438.89538574 378.25357056]
[423.67422485 376.20132446]
[411.52822876 366.80075073]
[405.72463989 352.58053589]
[407.82458496 337.36590576]
[395.93371582 328.22219849]
[384.04284668 319.07852173]
[372.15194702 309.93484497]
[355.63754272 312.84652710]
[341.82458496 302.75698853]
[339.48458862 285.47290039]
[327.37115479 276.62612915]
[315.25775146 267.77935791]
[303.14434814 258.93258667]
[291.03094482 250.08581543]
[278.91754150 241.23904419]
[266.80413818 232.39227295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[6 83]
[7 82]
[8 81]
[9 80]
[14 77]
[15 76]
[18 73]
[19 72]
[20 71]
[25 70]
[26 69]
[27 68]
[29 66]
[30 65]
[31 64]
[32 63]
[38 58]
[39 57]
[41 55]
[42 54]
[44 53]
[45 52]
[90 126]
[91 125]
[92 124]
[93 123]
[94 122]
[95 121]
[96 120]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
