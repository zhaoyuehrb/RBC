%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACCCUCGCCUCCCAAGUCCUGGAACGGGCCUCCCCACCCUCCGGGGCACCGACACUCACGGAGUCACUCCAACUUCUCUGGGUGCUCCGUGGAGCGAAGAGCGCUCUAGGACAAGCAAGGAUUCCUCUUCUCCUGUAAAUGACCACAGAGGAAGACA\
) } def
/len { sequence length } bind def

/coor [
[193.69532776 300.60501099]
[185.36607361 292.30059814]
[179.70321655 281.96969604]
[177.17463684 270.44332886]
[177.99566650 258.65206909]
[182.11067200 247.55108643]
[189.19683838 238.04267883]
[180.71273804 225.67256165]
[172.22863770 213.30242920]
[158.64924622 207.18284607]
[157.22453308 191.42591858]
[148.74041748 179.05578613]
[130.74018860 172.07206726]
[129.35754395 151.99349976]
[120.40016937 139.96165466]
[111.44278717 127.92980957]
[92.63337708 131.77801514]
[73.79077148 123.28452301]
[62.72943115 104.10672760]
[65.08740234 80.61381531]
[50.36857224 83.50450134]
[35.64974213 86.39517975]
[20.93091393 89.28586578]
[6.21208382 92.17655182]
[-8.50674629 95.06723785]
[-23.22557640 97.95791626]
[-37.94440460 100.84860229]
[-43.23123550 104.94988251]
[-48.93645096 105.62576294]
[-53.28942490 103.55434418]
[-68.10926819 105.87212372]
[-82.92911530 108.18991089]
[-89.88038635 122.06288147]
[-103.67386627 129.17059326]
[-119.00568390 126.77998352]
[-129.98043823 115.81027985]
[-132.37811279 100.47956848]
[-125.27676392 86.68281555]
[-111.40699005 79.72515106]
[-96.10201263 82.28195190]
[-85.24690247 93.37005615]
[-70.42705536 91.05227661]
[-55.60720444 88.73449707]
[-40.83509064 86.12977600]
[-26.11625862 83.23908997]
[-11.39742947 80.34840393]
[3.32139993 77.45771790]
[18.04022980 74.56703949]
[32.75905991 71.67635345]
[47.47789001 68.78566742]
[62.19672012 65.89498901]
[47.89386368 61.37521744]
[32.92351151 60.43255615]
[21.20154762 51.07330704]
[16.96824646 36.68305969]
[21.75495148 22.46731377]
[33.83013153 13.56843567]
[48.82574081 13.20548630]
[61.31729889 21.50975800]
[66.78618622 35.47792435]
[75.45716095 47.71778488]
[73.71576691 32.81921005]
[71.97437286 17.92063332]
[70.23297882 3.02205825]
[68.49158478 -11.87651730]
[66.75019073 -26.77509308]
[65.00879669 -41.67366791]
[60.88628387 -49.88133240]
[63.38098145 -56.87765884]
[61.92881775 -71.80719757]
[60.47665405 -86.73674011]
[56.51406860 -95.02280426]
[59.14396667 -101.96943665]
[57.98157883 -116.92433167]
[56.81919098 -131.87922668]
[43.99284744 -140.82455444]
[39.96717072 -155.93507385]
[46.64296341 -170.07608032]
[60.86812592 -176.57058716]
[75.92596436 -172.35212708]
[84.70663452 -159.41250610]
[83.06416321 -143.86141968]
[71.77408600 -133.04161072]
[72.93647003 -118.08672333]
[74.09886169 -103.13182831]
[75.40619659 -88.18890381]
[76.85836029 -73.25936127]
[78.31052399 -58.32982254]
[79.90737152 -43.41506195]
[81.64876556 -28.51648521]
[83.39015961 -13.61791039]
[85.13155365 1.28066468]
[86.87294769 16.17923927]
[88.61434174 31.07781601]
[90.35573578 45.97639084]
[104.34899139 51.37905502]
[115.65052795 41.51623535]
[126.95207214 31.65341568]
[138.25360107 21.79059410]
[149.55514526 11.92777443]
[152.07339478 -3.91640329]
[166.10145569 -11.70056343]
[180.87818909 -5.45336390]
[185.06816101 10.03287792]
[175.45718384 22.87844276]
[159.41796875 23.22931290]
[148.11642456 33.09213257]
[136.81489563 42.95495224]
[125.51335144 52.81777573]
[114.21181488 62.68059540]
[130.72360229 79.95643616]
[133.39007568 101.69898224]
[123.47463226 118.97242737]
[132.43200684 131.00427246]
[141.38938904 143.03613281]
[152.28591919 143.99836731]
[160.66447449 150.68348694]
[163.88659668 160.67532349]
[161.11054993 170.57168579]
[169.59465027 182.94180298]
[183.78088379 189.94619751]
[184.59875488 204.81832886]
[193.08285522 217.18846130]
[201.56695557 229.55857849]
[219.81999207 226.05755615]
[237.73023987 230.83015442]
[251.74412537 242.88395691]
[259.10098267 259.78646851]
[258.37677002 278.15579224]
[249.75961304 294.33743286]
[259.17678833 306.01290894]
[268.59396362 317.68838501]
[278.01116943 329.36386108]
[287.42834473 341.03930664]
[296.84552002 352.71478271]
[311.53189087 358.59878540]
[313.49978638 373.36282349]
[322.91696167 385.03829956]
[332.33413696 396.71377563]
[341.75131226 408.38925171]
[357.24130249 407.47271729]
[370.29351807 415.86437988]
[375.88906860 430.33743286]
[371.87640381 445.32669067]
[359.79846191 455.06851196]
[344.29946899 455.81692505]
[331.33905029 447.28417969]
[325.90081787 432.75128174]
[330.07583618 417.80642700]
[320.65866089 406.13095093]
[311.24148560 394.45547485]
[301.82431030 382.77999878]
[287.81152344 377.73110962]
[285.17004395 362.13198853]
[275.75286865 350.45651245]
[266.33569336 338.78103638]
[256.91851807 327.10556030]
[247.50132751 315.43008423]
[238.08413696 303.75460815]
[227.14038086 307.84854126]
[215.46734619 308.69635010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 124]
[8 123]
[9 122]
[11 120]
[12 119]
[14 115]
[15 114]
[16 113]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[30 43]
[31 42]
[32 41]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[69 88]
[70 87]
[71 86]
[73 85]
[74 84]
[75 83]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
[130 159]
[131 158]
[132 157]
[133 156]
[134 155]
[135 154]
[137 152]
[138 151]
[139 150]
[140 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
