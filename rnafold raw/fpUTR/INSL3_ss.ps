%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCAGCUGGGACGGCCCAGGCGCCUAUAAAGGGGGUCCCCGCUUGGCCCCGGCGCCACCCACCACC\
) } def
/len { sequence length } bind def

/coor [
[142.79914856 191.64759827]
[127.80877686 191.11021423]
[113.58610535 186.34411621]
[101.29872131 177.74061584]
[91.95536804 166.00598145]
[86.32305908 152.10356140]
[84.86418152 137.17468262]
[87.69850159 122.44489288]
[94.59249115 109.12462616]
[80.06034851 112.84174347]
[65.52821350 116.55886078]
[50.99607468 120.27597809]
[39.65349960 132.11987305]
[23.79162407 127.95658875]
[19.72778702 112.06894684]
[31.64251518 100.80078888]
[47.27895737 105.74384308]
[61.81109619 102.02672577]
[76.34323120 98.30960846]
[90.87537384 94.59249115]
[102.51103973 85.12616730]
[109.10706329 71.65425110]
[115.70308685 58.18233871]
[122.29910278 44.71042252]
[128.89512634 31.23850822]
[135.49114990 17.76659203]
[120.70671082 20.30044174]
[107.56583405 13.06736660]
[101.79759979 -0.77920270]
[105.91680145 -15.20252228]
[118.12758636 -23.91440010]
[133.10635376 -23.11668587]
[144.32276917 -13.15716267]
[146.88662720 1.62287796]
[157.37181091 -9.10376453]
[167.85699463 -19.83040619]
[178.34217834 -30.55704880]
[188.82737732 -41.28369141]
[199.31256104 -52.01033401]
[197.59248352 -67.55303192]
[206.30844116 -80.53632355]
[221.34503174 -84.82991028]
[235.60243225 -78.40648651]
[242.34873962 -64.29899597]
[238.39854431 -49.16856003]
[225.61701965 -40.15931320]
[210.03919983 -41.52514648]
[199.55401611 -30.79850578]
[189.06883240 -20.07186317]
[178.58363342 -9.34522057]
[168.09844971 1.38142216]
[157.61326599 12.10806465]
[148.96305847 24.36261368]
[142.36703491 37.83452988]
[135.77102661 51.30644608]
[129.17500305 64.77835846]
[122.57897949 78.25027466]
[115.98295593 91.72219086]
[130.42869568 87.68229675]
[145.42704773 87.90454102]
[159.74673462 92.37068176]
[172.21221924 100.71405792]
[181.80012512 112.24974823]
[187.72335815 126.03072357]
[189.49565125 140.92565918]
[186.97151184 155.71174622]
[180.35815430 169.17517090]
[170.19850159 180.21063232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 20]
[10 19]
[11 18]
[12 17]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
