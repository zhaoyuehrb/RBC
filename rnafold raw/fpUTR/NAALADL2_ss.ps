%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUAGAAAGUCAGAAGGUCACAAAGCUUGCAGGGUAAGUGACACAACUUGAAACUGCUUGGCCCUCUUUAAAAAGAAAUAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[102.02806091 387.93109131]
[89.28826141 379.93032837]
[78.23566437 369.72470093]
[69.24673462 357.66180420]
[62.62762833 344.15246582]
[58.60378647 329.65682983]
[57.31225967 314.66860962]
[58.79703903 299.69830322]
[63.00755310 285.25579834]
[69.80039215 271.83297729]
[78.94419861 259.88702393]
[90.12753296 249.82484436]
[102.96949005 241.98912048]
[117.03269196 236.64672852]
[114.36939240 221.88507080]
[111.70610046 207.12339783]
[101.83196259 195.97212219]
[106.99606323 181.01744080]
[104.33276367 166.25576782]
[101.66947174 151.49411011]
[99.00617218 136.73243713]
[96.34287262 121.97077179]
[90.00321198 119.90361023]
[84.55956268 116.05248260]
[80.49983978 110.76258087]
[78.18791199 104.50802612]
[77.83100891 97.84941101]
[79.46110535 91.38356018]
[82.93209839 85.69000244]
[87.93289185 81.27904510]
[94.01525879 78.54604340]
[95.08535004 63.58426285]
[96.15543365 48.62248230]
[97.22552490 33.66069794]
[85.55594635 20.77603912]
[86.67947388 3.76408768]
[99.43167877 -7.04097891]
[99.96706390 -22.03142166]
[100.50244904 -37.02186203]
[101.03783417 -52.01230621]
[101.57321930 -67.00274658]
[90.62181091 -78.39758301]
[91.01888275 -94.19688416]
[102.52886963 -105.02720642]
[118.32308197 -104.46311188]
[129.03111267 -92.83927155]
[128.30006409 -77.05189514]
[116.56365967 -66.46736145]
[116.02827454 -51.47692108]
[115.49288940 -36.48647690]
[114.95750427 -21.49603653]
[114.42211914 -6.50559378]
[124.51760864 1.71117628]
[128.02075195 14.45098495]
[123.41116333 27.04240227]
[112.18730164 34.73078537]
[111.11721802 49.69256973]
[110.04712677 64.65435028]
[108.97704315 79.61613464]
[122.24113464 98.80785370]
[111.10453796 119.30747223]
[113.76783752 134.06913757]
[116.43113708 148.83081055]
[119.09443665 163.59248352]
[121.75773621 178.35414124]
[131.82235718 190.56126404]
[126.46776581 204.46009827]
[129.13105774 219.22177124]
[131.79435730 233.98342896]
[146.83784485 234.07440186]
[161.60842896 236.92826843]
[175.60302734 242.44786072]
[188.34498596 250.44517517]
[199.40032959 260.64782715]
[208.39250183 272.70831299]
[215.01525879 286.21585083]
[219.04301453 300.71041870]
[220.33857727 315.69827271]
[218.85783386 330.66897583]
[214.65121460 345.11264038]
[207.86198425 358.53726196]
[198.72140503 370.48568726]
[187.54078674 380.55087280]
[174.70092773 388.39007568]
[160.63917542 393.73623657]
[145.83444214 396.40731812]
[130.79098511 396.31228638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 69]
[15 68]
[16 67]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[31 59]
[32 58]
[33 57]
[34 56]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
