%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCGCGGAGCUGAGCGGCGGCGGCGGCGGCGGCAGGAGCCCGGGAGGCGGAGGCGGGAGGCGGCGGCGGCGCGCGGAGACGCAGCAGCGGCAGCGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[63.08214188 124.76467896]
[56.07328796 106.83091736]
[41.07503128 106.60217285]
[26.07677650 106.37342072]
[11.07677650 106.37342072]
[-2.60379839 114.32027435]
[-15.44758320 106.77796173]
[-30.44583893 107.00671387]
[-45.44409561 107.23545837]
[-54.14701080 110.54081726]
[-60.90159225 107.23545837]
[-75.89984894 107.00671387]
[-90.89810181 106.77796173]
[-103.13819885 119.16078949]
[-120.21275330 118.94992065]
[-131.68334961 106.75704956]
[-146.68161011 106.98579407]
[-160.36218262 114.93264771]
[-173.20596313 107.39033508]
[-188.20422363 107.61908722]
[-201.88479614 115.56593323]
[-214.72857666 108.02362823]
[-229.72683716 108.25237274]
[-243.51689148 117.12740326]
[-257.97210693 109.38281250]
[-258.22219849 92.98557281]
[-244.00988770 84.80375671]
[-229.95558167 93.25411987]
[-214.95732117 93.02536774]
[-202.34953308 85.09487915]
[-188.43296814 92.62082672]
[-173.43470764 92.39208221]
[-160.82691956 84.46159363]
[-146.91035461 91.98754120]
[-131.91209412 91.75879669]
[-124.24587250 81.27966309]
[-111.74061584 77.11791992]
[-98.94958496 81.02767944]
[-90.66935730 91.77970886]
[-75.67109680 92.00845337]
[-60.67284393 92.23720551]
[-45.67284393 92.23720551]
[-30.67458725 92.00845337]
[-15.67633152 91.77970886]
[-3.06853175 83.84922028]
[10.84802818 91.37516785]
[17.60260773 88.06980896]
[26.30552483 91.37516785]
[41.30377960 91.60391235]
[56.30203629 91.83266449]
[59.65861893 81.32406616]
[65.49945831 71.96555328]
[73.46487427 64.33341980]
[83.06435394 58.89767456]
[93.70673370 55.99304199]
[104.73666382 55.79840088]
[115.47490692 58.32572937]
[125.26019287 63.41940308]
[133.48992920 70.76573944]
[139.65733337 79.91234589]
[143.38259888 90.29597473]
[144.43630981 101.27717590]
[159.14248657 104.23157501]
[174.19627380 99.36391449]
[185.15029907 109.45641327]
[199.85647583 112.41080475]
[214.91026306 107.54314423]
[225.86428833 117.63564301]
[240.57046509 120.59003448]
[255.62425232 115.72237396]
[266.57827759 125.81487274]
[281.28445435 128.76927185]
[296.03396606 131.49905396]
[310.82339478 134.00358582]
[325.64932251 136.28230286]
[340.50823975 138.33465576]
[355.36718750 140.38700867]
[370.34542847 133.70988464]
[383.45635986 143.56053162]
[381.21258545 159.80545044]
[365.92227173 165.73326111]
[353.31481934 155.24594116]
[338.45590210 153.19358826]
[323.59695435 151.14123535]
[316.41864014 153.38211060]
[308.31887817 148.79301453]
[293.52944946 146.28848267]
[286.28613281 148.30940247]
[278.33004761 143.47543335]
[263.62390137 140.52104187]
[249.62197876 145.60002136]
[237.61607361 135.29620361]
[222.90989685 132.34181213]
[208.90800476 137.42079163]
[196.90208435 127.11698151]
[182.19590759 124.16258240]
[168.19401550 129.24156189]
[156.18809509 118.93774414]
[141.48191833 115.98335266]
[130.83226013 132.02482605]
[114.39838409 142.05833435]
[95.26333618 144.20159912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[5 46]
[7 44]
[8 43]
[9 42]
[11 41]
[12 40]
[13 39]
[16 35]
[17 34]
[19 32]
[20 31]
[22 29]
[23 28]
[62 99]
[63 98]
[65 96]
[66 95]
[68 93]
[69 92]
[71 90]
[72 89]
[73 87]
[74 86]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
