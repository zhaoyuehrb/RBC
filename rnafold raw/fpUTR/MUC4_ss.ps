%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUUGUCCUCUUCCCAGGUUCCCUGGCCCCUUCGGAGAAACGCACUUGGUUCGGGCCAGCCGCCUGAGGGGACGGGCUCACGUCUGCUCCUCACACUGCAGCUGCUGGGCCGUGGAGCUUCCCCAGGGAGCCAGGGGGACUUUUGCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[63.02910233 573.72460938]
[56.31090927 560.20538330]
[53.49040985 545.37475586]
[54.77690887 530.33325195]
[60.07493210 516.19702148]
[68.99133301 504.01504517]
[80.86446381 494.69134521]
[94.81324768 488.91778564]
[93.01665497 474.02575684]
[91.22006989 459.13372803]
[89.42347717 444.24172974]
[87.62689209 429.34970093]
[85.83029938 414.45767212]
[84.03371429 399.56564331]
[82.23712158 384.67364502]
[80.05622101 382.82879639]
[78.49611664 379.98489380]
[77.95021820 376.38192749]
[78.71479797 372.40097046]
[80.94182587 368.52520752]
[80.34168243 353.53723145]
[79.74153900 338.54922485]
[79.14139557 323.56124878]
[78.54125214 308.57324219]
[77.94110107 293.58526611]
[77.34095764 278.59729004]
[76.74081421 263.60928345]
[76.14067078 248.62129211]
[75.54052734 233.63331604]
[65.12608337 244.42864990]
[50.22768402 246.17155457]
[37.60272980 238.07153320]
[32.97745895 223.80244446]
[38.44973373 209.83625793]
[51.53752136 202.50755310]
[66.30465698 205.14038086]
[76.05368805 216.54165649]
[77.55194855 201.61666870]
[79.05020905 186.69169617]
[80.54846954 171.76670837]
[78.82298279 169.49020386]
[77.92144775 166.37428284]
[78.17539215 162.73904419]
[79.79071808 159.02108765]
[82.81024170 155.72508240]
[85.49703217 140.96766663]
[78.68983459 124.81860352]
[90.65067291 110.85198212]
[85.85919952 97.71678925]
[94.54110718 86.75704193]
[96.93208313 71.94882965]
[99.32305908 57.14061356]
[101.71403503 42.33239746]
[104.10501099 27.52418137]
[106.49598694 12.71596622]
[108.88695526 -2.09224868]
[111.27793121 -16.90046310]
[109.26036072 -23.29165459]
[110.61049652 -28.88465118]
[114.07224274 -32.24843216]
[117.05377197 -46.94912720]
[120.03530884 -61.64982224]
[123.01683807 -76.35051727]
[118.17696381 -91.41326141]
[128.28965759 -102.34864807]
[131.27119446 -117.04933929]
[123.16334534 -136.84605408]
[137.29530334 -151.84637451]
[139.38951111 -166.69946289]
[141.48370361 -181.55255127]
[143.57791138 -196.40565491]
[145.67210388 -211.25874329]
[147.76631165 -226.11183167]
[149.86050415 -240.96492004]
[147.95372009 -249.95671082]
[152.14808655 -256.09307861]
[154.53906250 -270.90130615]
[156.93003845 -285.70953369]
[159.32101440 -300.51773071]
[161.71199036 -315.32595825]
[155.37847900 -330.45269775]
[165.52583313 -343.33538818]
[181.71530151 -340.72140503]
[187.29255676 -325.29977417]
[176.52020264 -312.93496704]
[174.12922668 -298.12677002]
[171.73825073 -283.31854248]
[169.34727478 -268.51034546]
[166.95629883 -253.70211792]
[164.71360779 -238.87072754]
[162.61940002 -224.01762390]
[160.52519226 -209.16453552]
[158.43099976 -194.31144714]
[156.33679199 -179.45835876]
[154.24259949 -164.60527039]
[152.14839172 -149.75216675]
[158.63858032 -143.55155945]
[161.56118774 -134.91864014]
[160.12974548 -125.77769470]
[154.54374695 -118.22932434]
[145.97189331 -114.06781006]
[142.99035645 -99.36711121]
[148.04348755 -85.35586548]
[137.71752930 -73.36898804]
[134.73600769 -58.66829300]
[131.75447083 -43.96759415]
[128.77293396 -29.26689911]
[126.08615112 -14.50948906]
[123.69517517 0.29872614]
[121.30419922 15.10694122]
[118.91322327 29.91515732]
[116.52224731 44.72337341]
[114.13127136 59.53158569]
[111.74030304 74.33980560]
[109.34932709 89.14801788]
[114.14080048 102.28321075]
[105.45889282 113.24295807]
[112.37548828 124.17308807]
[110.04247284 136.48718262]
[100.25444794 143.65446472]
[97.56765747 158.41186523]
[95.47344971 173.26496887]
[93.97519684 188.18994141]
[92.47693634 203.11492920]
[90.97867584 218.03991699]
[90.52851868 233.03315735]
[91.12866211 248.02114868]
[91.72880554 263.00915527]
[92.32894897 277.99713135]
[92.92909241 292.98510742]
[93.52923584 307.97311401]
[94.12937927 322.96109009]
[94.72952271 337.94909668]
[95.32967377 352.93707275]
[95.92981720 367.92507935]
[97.12914276 382.87704468]
[98.92572784 397.76907349]
[100.72232056 412.66107178]
[102.51891327 427.55310059]
[104.31549835 442.44512939]
[106.11209106 457.33715820]
[107.90867615 472.22915649]
[109.70526886 487.12118530]
[124.62692261 489.41177368]
[138.37677002 495.64431763]
[149.93447876 505.35626221]
[158.44239807 517.82696533]
[163.26916504 532.13092041]
[164.05662537 547.20684814]
[160.74632263 561.93585205]
[153.58392334 575.22509766]
[143.10090637 586.08825684]
[130.07519531 593.71936035]
[115.47338867 597.55206299]
[100.37901306 597.30194092]
[85.91219330 592.98754883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 143]
[9 142]
[10 141]
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 129]
[27 128]
[28 127]
[29 126]
[37 125]
[38 124]
[39 123]
[40 122]
[45 121]
[46 120]
[48 117]
[50 115]
[51 114]
[52 113]
[53 112]
[54 111]
[55 110]
[56 109]
[57 108]
[60 107]
[61 106]
[62 105]
[63 104]
[65 102]
[66 101]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[73 91]
[74 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
