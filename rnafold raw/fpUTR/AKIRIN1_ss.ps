%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGAAGGCGGGGCCAGCGCCGCUGCCGGGUGCUGGAGGCGCCAUUGGAGCCGGCUUGGCUGGCGAGCCCGGCUGAGGAGCCUCUUGGGCCGCACUUACCGCCGCGUCCGCUCCCGGUCCCUGGCCCCUCAGCGGC\
) } def
/len { sequence length } bind def

/coor [
[-25.40335274 402.55590820]
[-24.15812492 412.54864502]
[-26.01391983 422.41592407]
[-30.77613831 431.22116089]
[-37.97518921 438.13421631]
[-46.91273880 442.50961304]
[-56.72943115 443.94686890]
[-66.48751068 442.32699585]
[-74.28127289 455.14328003]
[-82.07502747 467.95956421]
[-85.13867950 484.63442993]
[-102.00996399 486.30654907]
[-108.28718567 470.55749512]
[-94.89131927 460.16580200]
[-87.09755707 447.34951782]
[-79.30380249 434.53323364]
[-88.59947205 416.58728027]
[-85.30982208 396.50799561]
[-70.57733917 382.27691650]
[-50.12559509 379.64947510]
[-43.83794785 366.03091431]
[-37.55029678 352.41235352]
[-31.26265144 338.79376221]
[-24.97500229 325.17520142]
[-18.68735504 311.55664062]
[-12.39970779 297.93804932]
[-16.28733826 286.42639160]
[-11.09083080 275.00015259]
[0.88319480 270.05664062]
[7.47921562 256.58471680]
[14.07523632 243.11280823]
[14.19237518 235.65805054]
[20.97780991 229.41189575]
[27.87878418 216.09361267]
[34.77975845 202.77532959]
[41.68073654 189.45706177]
[48.58171082 176.13877869]
[48.86851501 168.68861389]
[55.79437256 162.59852600]
[62.99672699 149.44079590]
[63.45304489 141.99908447]
[70.51573944 136.06823730]
[78.01573944 123.07785797]
[85.51573944 110.08747864]
[82.35766602 100.54683685]
[84.91880798 90.82892609]
[92.36890411 84.08405304]
[102.29282379 82.49874115]
[110.37629700 69.86318207]
[118.45977783 57.22762299]
[126.54325867 44.59206390]
[134.62673950 31.95650482]
[135.54595947 16.16202354]
[148.92234802 9.61056423]
[157.00582886 -3.02499485]
[165.08929443 -15.66055393]
[166.00851440 -31.45503426]
[179.38490295 -38.00649261]
[187.46838379 -50.64205170]
[195.55186462 -63.27761078]
[203.63534546 -75.91316986]
[205.65194702 -84.91260529]
[212.04940796 -88.74143219]
[220.41841125 -101.18971252]
[221.69692993 -116.95917511]
[235.21897888 -123.20445251]
[243.58798218 -135.65272522]
[251.95700073 -148.10101318]
[249.12731934 -163.41867065]
[257.79202271 -175.92376709]
[272.41250610 -178.52703857]
[280.78152466 -190.97532654]
[289.15051270 -203.42359924]
[297.51953125 -215.87188721]
[305.88854980 -228.32015991]
[307.16705322 -244.08963013]
[320.68911743 -250.33489990]
[329.05810547 -262.78317261]
[337.42712402 -275.23144531]
[345.79614258 -287.67974854]
[349.61557007 -304.19784546]
[366.54547119 -305.10037231]
[372.09936523 -289.08193970]
[358.24441528 -279.31072998]
[349.87539673 -266.86245728]
[341.50640869 -254.41416931]
[333.13739014 -241.96588135]
[332.45748901 -227.08680725]
[318.33682251 -219.95115662]
[309.96780396 -207.50286865]
[301.59881592 -195.05459595]
[293.22979736 -182.60630798]
[284.86077881 -170.15803528]
[287.96807861 -155.63632202]
[279.65805054 -142.89277649]
[264.40527344 -139.73199463]
[256.03625488 -127.28372192]
[247.66725159 -114.83544159]
[246.98735046 -99.95635986]
[232.86668396 -92.82070160]
[224.49768066 -80.37242126]
[216.27090454 -67.82968903]
[208.18742371 -55.19413376]
[200.10394287 -42.55857468]
[192.02046204 -29.92301369]
[191.67942810 -15.03231335]
[177.72485352 -7.57707453]
[169.64138794 5.05848455]
[161.55790710 17.69404411]
[161.21687317 32.58474350]
[147.26229858 40.03998184]
[139.17881775 52.67554474]
[131.09533691 65.31110382]
[123.01185608 77.94666290]
[114.92838287 90.58222198]
[115.08119202 109.17107391]
[98.50611877 117.58747864]
[91.00611877 130.57786560]
[83.50611877 143.56823730]
[76.15446472 156.64314270]
[68.95211029 169.80088806]
[61.89999008 183.03974915]
[54.99901581 196.35803223]
[48.09803772 209.67631531]
[41.19706345 222.99458313]
[34.29608917 236.31286621]
[27.54715157 249.70883179]
[20.95113182 263.18075562]
[14.35511017 276.65264893]
[16.07071304 294.94665527]
[1.21886396 304.22570801]
[-5.06878376 317.84426880]
[-11.35643196 331.46286011]
[-17.64407921 345.08142090]
[-23.93172646 358.69998169]
[-30.21937561 372.31857300]
[-36.50702286 385.93713379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 16]
[9 15]
[10 14]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 131]
[29 129]
[30 128]
[31 127]
[33 126]
[34 125]
[35 124]
[36 123]
[37 122]
[39 121]
[40 120]
[42 119]
[43 118]
[44 117]
[48 115]
[49 114]
[50 113]
[51 112]
[52 111]
[54 109]
[55 108]
[56 107]
[58 105]
[59 104]
[60 103]
[61 102]
[63 101]
[64 100]
[66 98]
[67 97]
[68 96]
[71 93]
[72 92]
[73 91]
[74 90]
[75 89]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
