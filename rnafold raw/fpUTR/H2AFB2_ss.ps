%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUACUGGACGCGGUAACUGUCCUCUUGAGAGCCAUCUUGCCUAGCUGGGCCAAGCCGAGAUAGCACACUCAACGCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[134.67219543 138.58692932]
[122.21938324 146.87655640]
[107.91882324 151.26797485]
[92.95973969 151.39599609]
[78.58612061 147.24995422]
[65.99326324 139.17466736]
[56.22836685 127.84164429]
[42.54081345 133.97767639]
[28.85326004 140.11370850]
[15.16570473 146.24974060]
[1.47815073 152.38575745]
[-5.28024006 158.91534424]
[-12.85320091 158.48345947]
[-22.52892303 171.72402954]
[-38.80220032 169.69610596]
[-44.93247986 154.48585510]
[-34.61345673 141.74028015]
[-18.46045685 144.57092285]
[-4.65787888 138.69821167]
[9.02967548 132.56217957]
[22.71722984 126.42614746]
[36.40478516 120.29012299]
[50.09233856 114.15409088]
[48.19117737 102.63795471]
[48.91280365 90.98826599]
[52.22068787 79.79479218]
[57.94736862 69.62419891]
[65.80294037 60.99135971]
[57.64942551 48.40087891]
[49.49591064 35.81039810]
[41.34239960 23.21991539]
[26.50185966 16.24206543]
[25.39439583 -0.11964580]
[39.15927505 -9.03369045]
[53.63636398 -1.33006406]
[53.93288040 15.06640244]
[62.08639526 27.65688324]
[70.23990631 40.24736404]
[78.39341736 52.83784485]
[94.75791931 48.38959885]
[111.68260956 49.45665741]
[127.35884857 55.92498779]
[140.11140442 67.10336304]
[148.57748413 81.79721069]
[151.85237122 98.43628693]
[166.75340271 100.15653992]
[181.65443420 101.87679291]
[196.55546570 103.59704590]
[211.45649719 105.31729889]
[226.35752869 107.03754425]
[241.25856018 108.75779724]
[247.68624878 98.74738312]
[257.41586304 91.99326324]
[268.93975830 89.49332428]
[280.49072266 91.58999634]
[290.31307983 97.92392731]
[296.92947388 107.49486542]
[299.36309814 118.81938171]
[313.96853638 122.23718262]
[328.57394409 125.65498352]
[340.22662354 115.40829468]
[355.67980957 114.00135040]
[368.99136353 121.97514343]
[375.04281616 136.26359558]
[371.50720215 151.37249756]
[359.74404907 161.49217224]
[344.27651978 162.73139954]
[331.05221558 154.61367798]
[325.15615845 140.26042175]
[310.55072021 136.84262085]
[295.94528198 133.42481995]
[282.86859131 146.39830017]
[264.51388550 149.18778992]
[247.91590881 140.55114746]
[239.53829956 123.65882874]
[224.63726807 121.93857574]
[209.73623657 120.21832275]
[194.83520508 118.49807739]
[179.93417358 116.77782440]
[165.03314209 115.05757141]
[150.13211060 113.33731842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[13 18]
[28 39]
[29 38]
[30 37]
[31 36]
[45 81]
[46 80]
[47 79]
[48 78]
[49 77]
[50 76]
[51 75]
[58 71]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
