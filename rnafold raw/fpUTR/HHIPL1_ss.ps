%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAAGGGGAGCGCCCGCCCCUUCCCUGCCGCCGCGAGCGCCCCGGGAGGGGACCGGGGCUGCCGUCCCUCCGCCUCUUCCCCCGCGGGGCGUAGCG\
) } def
/len { sequence length } bind def

/coor [
[-83.30233765 212.20324707]
[-95.23876190 221.28739929]
[-107.17519379 230.37153625]
[-119.11161804 239.45568848]
[-131.04804993 248.53984070]
[-142.98448181 257.62399292]
[-154.92089844 266.70812988]
[-166.85733032 275.79226685]
[-178.79376221 284.87640381]
[-190.73017883 293.96057129]
[-190.25091553 309.47024536]
[-199.00733948 322.28054810]
[-213.63244629 327.46572876]
[-228.50257874 323.03189087]
[-237.89987183 310.68402100]
[-238.21087646 295.17004395]
[-229.31599426 282.45547485]
[-214.63549805 277.42926025]
[-199.81433105 282.02413940]
[-187.87789917 272.93997192]
[-175.94148254 263.85583496]
[-164.00505066 254.77169800]
[-152.06861877 245.68754578]
[-140.13218689 236.60340881]
[-128.19577026 227.51925659]
[-116.25933838 218.43511963]
[-104.32290649 209.35096741]
[-92.38648224 200.26683044]
[-93.03785706 192.01020813]
[-90.23579407 184.11505127]
[-84.39358521 177.97819519]
[-76.46933746 174.71875000]
[-67.80931091 174.97444153]
[-59.91931534 178.77856445]
[-46.92893219 171.27856445]
[-33.93855286 163.77856445]
[-30.44196701 152.07829285]
[-19.52366447 145.75962830]
[-6.85145187 148.74092102]
[6.37034845 141.65686035]
[19.59214973 134.57278442]
[32.81394958 127.48872375]
[46.03575134 120.40465546]
[59.25754929 113.32059479]
[72.47934723 106.23652649]
[85.70114899 99.15245819]
[93.23521423 87.37410736]
[107.21478271 87.62574005]
[113.44169617 80.68672180]
[120.97038269 80.53423309]
[134.41029358 73.87323761]
[147.85018921 67.21223450]
[161.29010010 60.55123901]
[174.73001099 53.89023972]
[179.65211487 41.83843613]
[191.13238525 36.60983658]
[202.69137573 40.54842758]
[216.33584595 34.31719971]
[229.98033142 28.08597565]
[243.62481689 21.85475159]
[257.26928711 15.62352562]
[257.52911377 0.36262006]
[264.39236450 -13.27038383]
[276.49627686 -22.56864357]
[291.43768311 -25.68598175]
[306.24987793 -22.00344849]
[317.99194336 -12.25221539]
[324.33248901 1.63160431]
[324.01254272 16.89136887]
[317.09570312 30.49724007]
[304.95523071 39.74776077]
[290.00167847 42.80623627]
[275.20410156 39.06540298]
[263.50051880 29.26800537]
[249.85603333 35.49922943]
[236.21154785 41.73045731]
[222.56707764 47.96168137]
[208.92259216 54.19290543]
[199.64360046 68.99485016]
[181.39100647 67.33014679]
[167.95109558 73.99114227]
[154.51119995 80.65214539]
[141.07128906 87.31314087]
[127.63137817 93.97414398]
[114.29885101 100.84754181]
[106.76478577 112.62589264]
[92.78521729 112.37425995]
[79.56341553 119.45832825]
[66.34161377 126.54238892]
[53.11981583 133.62646484]
[39.89801407 140.71052551]
[26.67621613 147.79458618]
[13.45441437 154.87866211]
[0.23261434 161.96272278]
[-8.99890137 177.79647827]
[-26.43855286 176.76895142]
[-39.42893219 184.26895142]
[-52.41931534 191.76895142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[34 98]
[35 97]
[36 96]
[39 94]
[40 93]
[41 92]
[42 91]
[43 90]
[44 89]
[45 88]
[46 87]
[48 85]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
