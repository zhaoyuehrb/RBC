%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCAGGACUGCCCGGCCCAGCCUUGGAGGAAGACUUCUGGGCAGAAGCGGAACACAGGAGCAGAGACACAUAGUCUUGGCUCCAGUUUCGUUUCAGUU\
) } def
/len { sequence length } bind def

/coor [
[90.41356659 124.86781311]
[87.61101532 133.75253296]
[80.82415771 137.00277710]
[71.34210968 148.62564087]
[61.86006546 160.24850464]
[59.13177490 175.83268738]
[45.09110260 180.80348206]
[35.60905457 192.42633057]
[35.79105377 208.46835327]
[23.27176285 218.50064087]
[7.65491199 214.82730103]
[0.92041117 200.26618958]
[8.23439407 185.98735046]
[23.98619843 182.94429016]
[33.46824265 171.32142639]
[35.51831436 156.56858826]
[50.23720932 150.76644897]
[59.71925354 139.14360046]
[69.20130157 127.52073669]
[78.50144196 115.75182343]
[73.97766113 105.75721741]
[73.86317444 94.78709412]
[60.57300568 87.83214569]
[47.28283691 80.87718964]
[33.99266815 73.92224121]
[18.17805290 74.37893677]
[10.48904991 61.62242889]
[-2.80112076 54.66747665]
[-16.09129143 47.71252441]
[-29.38146210 40.75757217]
[-45.06017303 44.15721512]
[-57.40208054 33.90748596]
[-56.93952560 17.87110329]
[-44.02734756 8.34980392]
[-28.57065773 12.64751530]
[-22.42650795 27.46739960]
[-9.13633823 34.42235184]
[4.15383196 41.37730789]
[17.44400215 48.33226013]
[32.30801392 47.37809372]
[40.94762039 60.63206863]
[54.23778915 67.58702087]
[67.52796173 74.54197693]
[80.81813049 81.49692535]
[102.48337555 73.46434784]
[122.28198242 85.37738037]
[136.63185120 81.00916290]
[150.98171997 76.64093781]
[165.33158875 72.27272034]
[179.68144226 67.90449524]
[194.03131104 63.53627777]
[208.38117981 59.16805649]
[222.73104858 54.79983521]
[237.08091736 50.43161392]
[251.43077087 46.06339264]
[256.09597778 35.99156189]
[265.39822388 30.35251617]
[276.04260254 30.85444641]
[284.41671753 37.07941437]
[299.01040649 33.61177063]
[313.60406494 30.14412498]
[328.19775391 26.67648125]
[342.79141235 23.20883560]
[354.42910767 12.49085140]
[368.60028076 17.07631874]
[383.19396973 13.60867405]
[397.78765869 10.14102936]
[412.38131714 6.67338419]
[426.97500610 3.20573950]
[436.57974243 -9.64450455]
[452.61877441 -10.00318432]
[462.78836060 2.40484691]
[459.28723145 18.06121063]
[444.80117798 24.95568466]
[430.44265747 17.79941750]
[415.84896851 21.26706314]
[401.25527954 24.73470688]
[386.66162109 28.20235252]
[372.06793213 31.66999626]
[361.47409058 42.13995361]
[346.25906372 37.80251312]
[331.66540527 41.27016068]
[317.07171631 44.73780441]
[302.47802734 48.20544815]
[287.88436890 51.67309189]
[275.04663086 65.99111938]
[255.79899597 60.41326141]
[241.44912720 64.78147888]
[227.09925842 69.14970398]
[212.74940491 73.51792145]
[198.39953613 77.88614655]
[184.04966736 82.25436401]
[169.69979858 86.62258148]
[155.34992981 90.99080658]
[141.00007629 95.35902405]
[126.65020752 99.72724915]
[125.34359741 108.24682617]
[121.38632202 115.90386963]
[115.19227600 121.89755249]
[107.40927887 125.60098267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[3 19]
[4 18]
[5 17]
[7 15]
[8 14]
[22 44]
[23 43]
[24 42]
[25 41]
[27 39]
[28 38]
[29 37]
[30 36]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[54 88]
[55 87]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
