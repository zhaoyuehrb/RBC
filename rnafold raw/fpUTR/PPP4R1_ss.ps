%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCAGCCCGGCCCUCCUCCUCCCCGCCGCCCCUCCCGCGCGCGUCCACCGGCUCCCCGGCUCGCGCCGCUCCAUGUAGCCCCGGCUCCCCGGGCGGCCGCGGAGGAGGGGGCGACCACAAG\
) } def
/len { sequence length } bind def

/coor [
[94.75769043 472.90103149]
[85.71027374 460.93673706]
[82.17766571 446.35736084]
[76.26232910 460.14172363]
[70.34698486 473.92608643]
[74.93891907 489.29794312]
[65.66579437 502.38949585]
[49.64115906 503.15802002]
[39.15774155 491.01397705]
[42.25752640 475.27325439]
[56.56262207 468.01074219]
[62.47795868 454.22637939]
[68.39329529 440.44201660]
[71.96883392 425.87438965]
[73.10783386 410.91769409]
[74.24683380 395.96099854]
[75.38582611 381.00430298]
[76.52482605 366.04760742]
[77.66381836 351.09091187]
[78.80281830 336.13421631]
[79.94181061 321.17752075]
[81.08081055 306.22085571]
[82.21981049 291.26416016]
[83.35880280 276.30746460]
[84.30825043 261.33752441]
[77.22550201 248.23471069]
[85.65184021 234.84413147]
[86.41157532 219.86338806]
[87.17131805 204.88264465]
[87.93105316 189.90190125]
[88.69078827 174.92114258]
[89.45053101 159.94039917]
[90.21026611 144.95965576]
[73.42001343 137.55946350]
[60.85646820 124.18662262]
[54.51746750 106.96766663]
[55.41103363 88.64072418]
[63.39506912 72.12010956]
[77.19996643 60.03291702]
[71.99038696 45.96663666]
[66.78081512 31.90035439]
[61.39346695 17.90119171]
[55.82922363 3.97139668]
[50.26498032 -9.95839787]
[44.70073700 -23.88819313]
[32.94214249 -26.40208626]
[23.98415565 -34.24127579]
[20.01430702 -45.33551407]
[21.92580795 -56.84030914]
[29.11960793 -65.86610413]
[24.26803970 -80.05984497]
[19.41646957 -94.25358582]
[14.56489944 -108.44732666]
[1.86338937 -118.82054138]
[4.76281738 -134.96134949]
[20.28050041 -140.26544189]
[32.45317459 -129.27645874]
[28.75864029 -113.29889679]
[33.61021042 -99.10515594]
[38.46178055 -84.91141510]
[43.31335068 -70.71767426]
[60.15664673 -63.76298904]
[66.78901672 -46.45110321]
[58.63053131 -29.45243645]
[64.19477844 -15.52264214]
[69.75901794 -1.59284723]
[75.32326508 12.33694744]
[80.78853607 17.43951797]
[80.84709167 26.69077492]
[86.05667114 40.75705719]
[91.26625061 54.82333755]
[97.63663483 54.04759598]
[104.05298615 54.16570663]
[110.39050293 55.17538071]
[116.52590942 57.05697250]
[122.33985138 59.77388763]
[127.71924591 63.27326965]
[132.55944824 67.48705292]
[136.76631165 72.33327484]
[150.06170654 65.38832855]
[163.35711670 58.44337845]
[171.68734741 44.31754303]
[188.08106995 44.73937225]
[195.67381287 59.27492142]
[186.65483093 72.97126007]
[170.30206299 71.73877716]
[157.00665283 78.68373108]
[143.71125793 85.62867737]
[145.98091125 101.72193909]
[142.51394653 117.60036469]
[133.74293518 131.28295898]
[120.76212311 141.06268311]
[105.19101715 145.71939087]
[104.43127441 160.70013428]
[103.67153931 175.68087769]
[102.91180420 190.66163635]
[102.15206146 205.64237976]
[101.39232635 220.62312317]
[100.63259125 235.60386658]
[107.66098785 249.77822876]
[99.28899384 262.09725952]
[102.00260925 270.94177246]
[98.31549835 277.44644165]
[97.17649841 292.40313721]
[96.03750610 307.35983276]
[94.89850616 322.31652832]
[93.75951385 337.27322388]
[92.62051392 352.22991943]
[91.48152161 367.18661499]
[90.34252167 382.14331055]
[89.20352173 397.10000610]
[88.06452942 412.05670166]
[86.92552948 427.01339722]
[96.80587006 415.72717285]
[110.36433411 409.31094360]
[125.35652161 408.82684326]
[139.30067444 414.35498047]
[149.88854980 424.98028564]
[155.36746216 438.94387817]
[154.83044434 453.93426514]
[148.36640930 467.47000122]
[137.04537964 477.31042480]
[122.74140167 481.82662964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[14 113]
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[21 106]
[22 105]
[23 104]
[24 103]
[25 101]
[27 99]
[28 98]
[29 97]
[30 96]
[31 95]
[32 94]
[33 93]
[39 71]
[40 70]
[41 69]
[42 67]
[43 66]
[44 65]
[45 64]
[50 61]
[51 60]
[52 59]
[53 58]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
