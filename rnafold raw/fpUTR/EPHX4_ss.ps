%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGAGGCGCGCGUCGAGAGGCGACGGCGGGCUGGCCUGGCGCGCUGCGGCGCUCGCUCACCCGCUCCCGAGGAAGGGCAGUGGGCCCCGCCGCCGCCUCCCA\
) } def
/len { sequence length } bind def

/coor [
[50.97103882 381.80508423]
[43.43932343 367.23779297]
[52.51568604 353.57940674]
[52.96442032 338.58612061]
[53.41315079 323.59283447]
[53.86188126 308.59954834]
[54.31061554 293.60626221]
[54.75934601 278.61297607]
[55.20808029 263.61968994]
[55.65681076 248.62640381]
[52.66188431 241.73384094]
[56.34991837 233.19317627]
[57.24697876 218.22003174]
[45.11172485 209.40324402]
[31.14861870 214.88336182]
[17.18551254 220.36347961]
[3.22240615 225.84359741]
[-4.48516178 239.91387939]
[-20.31537628 242.51846313]
[-32.12464905 231.65934753]
[-30.85391998 215.66670227]
[-17.47798157 206.80871582]
[-2.25770903 211.88049316]
[11.70539665 206.40037537]
[25.66850281 200.92025757]
[39.63161087 195.44013977]
[50.62738800 185.23754883]
[57.13564301 171.72302246]
[63.64389801 158.20848083]
[70.15215302 144.69395447]
[76.66041565 131.17941284]
[83.16867065 117.66488647]
[76.24267578 105.56159210]
[77.07663727 91.64170074]
[85.39814758 80.45191193]
[80.55000305 66.25699615]
[75.70185852 52.06208801]
[64.40620422 45.61647415]
[60.71541977 33.56679916]
[66.10813904 22.62424469]
[61.68681335 8.29065323]
[57.26548767 -6.04293871]
[52.84415817 -20.37653160]
[48.42283249 -34.71012497]
[34.33465958 -41.87245560]
[29.51685715 -56.92450714]
[36.82773590 -70.93616486]
[51.92988586 -75.59455872]
[65.86346436 -68.13594818]
[70.36193085 -52.98539734]
[62.75642395 -39.13145065]
[67.17774963 -24.79785919]
[71.59908295 -10.46426678]
[76.02040863 3.86932564]
[80.44173431 18.20291710]
[93.92552948 29.32429695]
[89.89676666 47.21394348]
[94.74491119 61.40885544]
[99.59306335 75.60376740]
[107.52660370 76.79026031]
[114.64661407 80.48542786]
[120.18351746 86.28987122]
[134.58164978 82.08346558]
[148.97976685 77.87705231]
[163.37789917 73.67063904]
[177.77603149 69.46423340]
[192.17416382 65.25782013]
[206.50775146 60.83649063]
[220.77360535 56.20123672]
[235.03944397 51.56598282]
[241.99021912 37.37224197]
[256.96853638 32.32980728]
[271.08798218 39.43026352]
[275.97177124 54.46103668]
[268.72244263 68.50463104]
[253.64086914 73.22924042]
[239.67469788 65.83183289]
[225.40885925 70.46708679]
[211.14300537 75.10234070]
[205.66471863 80.24678802]
[196.38056946 79.65594482]
[181.98243713 83.86235809]
[167.58432007 88.06877136]
[153.18618774 92.27517700]
[138.78805542 96.48159027]
[124.38992310 100.68800354]
[115.77678680 118.61275482]
[96.68320465 124.17314148]
[90.17494202 137.68766785]
[83.66668701 151.20220947]
[77.15843201 164.71673584]
[70.65017700 178.23127747]
[64.14192200 191.74580383]
[72.22013092 219.11708069]
[71.32306671 234.09024048]
[70.65010071 249.07513428]
[70.20136261 264.06842041]
[69.75263214 279.06170654]
[69.30390167 294.05499268]
[68.85517120 309.04827881]
[68.40644073 324.04156494]
[67.95770264 339.03485107]
[67.50897217 354.02813721]
[75.75225830 368.20489502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 103]
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[12 95]
[13 94]
[14 26]
[15 25]
[16 24]
[17 23]
[27 93]
[28 92]
[29 91]
[30 90]
[31 89]
[32 88]
[35 59]
[36 58]
[37 57]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
