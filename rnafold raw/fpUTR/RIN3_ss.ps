%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGGAGCGAGAGCCCCAGAGCGCGGCGGCAGCGGCGGCCUGGCCCUUCCAGAGGGCCAGAGCCAGGGACAUGCGGGCGCCCGGGACUCCGCGUUCCGCGCGGCCCGGCGCCUGAGCGCCUCCGUUCCCCGUCCCGGAGCUGCCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[20.52771378 314.34484863]
[17.33420181 326.35369873]
[9.36569786 335.79400635]
[-1.80482674 340.89813232]
[-14.01285172 340.74502563]
[-21.10925484 353.96020508]
[-28.20565796 367.17538452]
[-29.52399635 376.27801514]
[-35.58584976 380.58685303]
[-42.95208740 393.65356445]
[-42.24276352 410.03735352]
[-56.22030258 418.61410522]
[-70.50581360 410.56076050]
[-70.40358734 394.16192627]
[-56.01878357 386.28732300]
[-48.65254593 373.22061157]
[-41.42084122 360.07897949]
[-34.32444000 346.86380005]
[-27.22803497 333.64862061]
[-35.63864899 318.17565918]
[-33.10145950 300.59017944]
[-20.43907166 287.90420532]
[-2.54874921 285.28900146]
[3.99912143 271.79360962]
[4.08995819 264.35696411]
[10.82248116 258.09045410]
[17.64605713 244.73236084]
[16.54538155 229.87847900]
[29.71352386 221.10861206]
[36.53709793 207.75050354]
[43.36067581 194.39241028]
[50.18424988 181.03431702]
[57.00782776 167.67620850]
[63.83140182 154.31811523]
[70.65497589 140.96000671]
[65.83679962 126.91292572]
[72.56658173 113.26870728]
[87.33312988 108.31020355]
[83.52527618 93.80157471]
[71.02124023 85.51609802]
[58.51720047 77.23062897]
[45.92876053 69.07395935]
[33.25724792 61.04696274]
[20.58572960 53.01996613]
[7.91421461 44.99296951]
[-4.75730133 36.96597290]
[-17.42881775 28.93897438]
[-30.10033417 20.91197777]
[-42.77185059 12.88498020]
[-55.44336700 4.85798359]
[-72.05934906 1.48969138]
[-73.42245483 -15.40937042]
[-57.56116104 -21.39732933]
[-47.41636658 -7.81353235]
[-34.74485397 0.21346459]
[-22.07333565 8.24046135]
[-9.40182018 16.26745796]
[3.26969552 24.29445648]
[15.94121170 32.32145309]
[28.61272812 40.34844971]
[41.28424454 48.37544632]
[53.95576096 56.40244293]
[61.33481216 57.33076477]
[66.80267334 64.72659302]
[79.30670929 73.01206207]
[91.81074524 81.29753876]
[100.04191589 84.98932648]
[103.90153503 91.22346497]
[117.04316711 83.99176025]
[130.18479919 76.76006317]
[143.32643127 69.52835846]
[156.46806335 62.29665375]
[155.40003967 45.89733505]
[162.86059570 30.65534973]
[177.35311890 20.83594704]
[195.34350586 19.47505379]
[212.11686707 27.46189499]
[222.88554382 17.01988602]
[233.65422058 6.57787704]
[244.42289734 -3.86413217]
[255.19158936 -14.30614090]
[265.96026611 -24.74814987]
[276.72894287 -35.19015884]
[280.74472046 -43.46477509]
[287.82754517 -45.73318481]
[298.80834961 -55.95189285]
[309.78915405 -66.17060089]
[311.34875488 -71.28166199]
[314.43099976 -74.88794708]
[318.19052124 -76.65875244]
[321.77481079 -76.65454865]
[333.36386108 -86.17788696]
[344.95291138 -95.70122528]
[356.54196167 -105.22456360]
[368.13101196 -114.74790192]
[379.72006226 -124.27124023]
[388.11865234 -138.99874878]
[404.59558105 -135.00535583]
[405.31951904 -118.06686401]
[389.24337769 -112.68218994]
[377.65435791 -103.15885162]
[366.06530762 -93.63551331]
[354.47625732 -84.11218262]
[342.88720703 -74.58884430]
[331.29815674 -65.06550598]
[320.00787354 -55.18979645]
[309.02706909 -44.97109222]
[298.04626465 -34.75238419]
[287.17095947 -24.42148018]
[276.40228271 -13.97947121]
[265.63360596 -3.53746247]
[254.86491394 6.90454674]
[244.09623718 17.34655571]
[233.32756042 27.78856468]
[222.55888367 38.23057556]
[225.91813660 52.84958267]
[240.16482544 57.54338074]
[254.41151428 62.23718262]
[268.65820312 66.93098450]
[282.90490723 71.62478638]
[298.84048462 67.75321198]
[309.96386719 79.80322266]
[304.83224487 95.37879944]
[288.72460938 98.45712280]
[278.21109009 85.87147522]
[263.96441650 81.17767334]
[249.71771240 76.48387146]
[235.47102356 71.79007721]
[221.22433472 67.09627533]
[209.69831848 81.19721222]
[193.35545349 87.60527039]
[176.62052917 85.27451324]
[163.69976807 75.43828583]
[150.55813599 82.66999054]
[137.41650391 89.90169525]
[124.27487183 97.13339233]
[111.13323975 104.36509705]
[100.69123077 115.13377380]
[105.32875061 130.00425720]
[98.21838379 143.45407104]
[84.01307678 147.78358459]
[77.18949890 161.14169312]
[70.36592865 174.49978638]
[63.54235077 187.85787964]
[56.71877289 201.21598816]
[49.89519882 214.57408142]
[43.07162476 227.93218994]
[43.68423080 243.74153137]
[31.00415611 251.55593872]
[24.18058014 264.91403198]
[17.49450493 278.34149170]
[10.94663525 291.83685303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[9 16]
[10 15]
[23 152]
[24 151]
[26 150]
[27 149]
[29 147]
[30 146]
[31 145]
[32 144]
[33 143]
[34 142]
[35 141]
[38 138]
[39 66]
[40 65]
[41 64]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[68 137]
[69 136]
[70 135]
[71 134]
[72 133]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[85 108]
[86 107]
[87 106]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
