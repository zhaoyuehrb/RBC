%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGGGGCCAGAGUGGGCGAGGCGCGGAGGUCUGGCCUAUAAAGUAGUCGCGGAGACGGGGUGCUGGUUUGCGUCGUAGUCUCCUGCAGCGUCUGGGGUUUCCGUUGCAGUCCUCGGAACCAGGACCUCGGCGUGGCCUAGCGAGUU\
) } def
/len { sequence length } bind def

/coor [
[103.40298462 247.15556335]
[101.82457733 232.23883057]
[100.24616241 217.32211304]
[97.10868073 213.63989258]
[96.29576111 207.92892456]
[98.92931366 201.74519348]
[97.98114014 186.77517700]
[97.03297424 171.80517578]
[96.08480072 156.83517456]
[95.13662720 141.86517334]
[94.18846130 126.89517212]
[82.02920532 125.62461853]
[70.28543854 118.64595795]
[61.64384460 106.25294495]
[47.89390564 112.24787903]
[34.14396667 118.24280548]
[20.39402962 124.23773193]
[6.64409018 130.23266602]
[-7.10584879 136.22758484]
[-16.66364670 148.83549500]
[-31.42256546 146.82960510]
[-45.17250443 152.82453918]
[-58.92244339 158.81945801]
[-72.67237854 164.81439209]
[-78.21601868 179.61451721]
[-92.63562775 186.08369446]
[-107.37631226 180.38389587]
[-113.69268799 165.89669800]
[-107.83735657 151.21710205]
[-93.28418732 145.05424500]
[-78.66731262 151.06445312]
[-64.91737366 145.06951904]
[-51.16743469 139.07460022]
[-37.41749573 133.07966614]
[-28.84318352 120.90056610]
[-13.10077763 122.47765350]
[0.64916110 116.48272705]
[14.39910030 110.48779297]
[28.14903831 104.49286652]
[41.89897919 98.49794006]
[55.64891815 92.50300598]
[56.59519196 85.06294250]
[42.76230621 90.86391449]
[30.82214165 81.78467560]
[32.71501541 66.90458679]
[46.54802704 61.10391998]
[58.48773956 70.18281555]
[59.43401337 62.74274826]
[47.62251282 53.49675369]
[35.81101227 44.25075912]
[19.77591133 44.75586700]
[9.49346733 32.44120407]
[12.85149002 16.75352669]
[27.27399063 9.72707748]
[41.69726181 16.75194740]
[45.05700684 32.43925476]
[56.86850739 41.68524933]
[68.68000793 50.93124390]
[83.67250824 50.45692444]
[94.87593842 40.48279953]
[106.07936859 30.50867271]
[117.28279877 20.53454781]
[128.48622131 10.56042194]
[133.64865112 -4.39484119]
[148.29945374 -7.07878208]
[159.50286865 -17.05290794]
[170.70629883 -27.02703285]
[181.90972900 -37.00115967]
[193.11315918 -46.97528458]
[204.31658936 -56.94940948]
[197.81958008 -67.68196106]
[199.71350098 -83.36207581]
[204.67834473 -97.51659393]
[209.64318848 -111.67110443]
[214.60803223 -125.82562256]
[211.87457275 -141.40890503]
[223.38835144 -150.85783386]
[228.35319519 -165.01234436]
[233.31803894 -179.16685486]
[238.28288269 -193.32138062]
[234.71615601 -209.32795715]
[246.97625732 -220.21931458]
[262.45104980 -214.79136658]
[265.22140503 -198.62791443]
[252.43739319 -188.35653687]
[247.47254944 -174.20201111]
[242.50770569 -160.04750061]
[237.54286194 -145.89299011]
[240.63145447 -131.32212830]
[228.76254272 -120.86077881]
[223.79769897 -106.70626068]
[218.83285522 -92.55174255]
[213.86801147 -78.39723206]
[223.95968628 -67.29956818]
[238.52090454 -70.90111542]
[253.08210754 -74.50266266]
[267.64331055 -78.10420227]
[282.20452881 -81.70574951]
[296.76574707 -85.30729675]
[299.39675903 -100.30721283]
[307.90673828 -112.93656158]
[320.82122803 -121.00723267]
[335.90274048 -123.12092590]
[350.53833008 -118.91143036]
[362.19226074 -109.10807800]
[368.84542847 -95.40934753]
[369.34512329 -80.18863678]
[363.60479736 -66.08301544]
[352.61898804 -55.53636932]
[338.29104614 -50.37597656]
[323.10336304 -51.49589920]
[309.68731689 -58.70211029]
[300.36727905 -70.74607849]
[285.80609131 -67.14453888]
[271.24487305 -63.54299164]
[256.68365479 -59.94144821]
[242.12245178 -56.33990479]
[227.56123352 -52.73836136]
[214.29071045 -45.74597931]
[203.08729553 -35.77185440]
[191.88386536 -25.79772949]
[180.68043518 -15.82360363]
[169.47700500 -5.84947824]
[158.27357483 4.12464714]
[153.91249084 18.36649323]
[138.46034241 21.76385117]
[127.25691986 31.73797607]
[116.05348969 41.71210098]
[104.85005951 51.68622589]
[93.64663696 61.66035080]
[115.22398376 66.72402191]
[129.29026794 82.10567474]
[132.02226257 101.43816376]
[123.92292023 117.74409485]
[109.15846252 125.94700623]
[110.10662842 140.91700745]
[111.05480194 155.88700867]
[112.00297546 170.85700989]
[112.95114136 185.82701111]
[113.89931488 200.79701233]
[115.16288757 215.74369812]
[116.74129486 230.66041565]
[118.31970978 245.57714844]
[130.76498413 255.31832886]
[132.59410095 271.01641846]
[122.72187042 283.35800171]
[107.00532532 285.02105713]
[94.76880646 275.01889038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[6 140]
[7 139]
[8 138]
[9 137]
[10 136]
[11 135]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[21 34]
[22 33]
[23 32]
[24 31]
[48 58]
[49 57]
[50 56]
[59 130]
[60 129]
[61 128]
[62 127]
[63 126]
[65 124]
[66 123]
[67 122]
[68 121]
[69 120]
[70 119]
[72 93]
[73 92]
[74 91]
[75 90]
[77 88]
[78 87]
[79 86]
[80 85]
[94 118]
[95 117]
[96 116]
[97 115]
[98 114]
[99 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
