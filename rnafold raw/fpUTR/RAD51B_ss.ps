%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCUUUGCGGCGUUUUCCGCGGGGAAACUGUGUAAAGGGUGGGGAAACUUGAAAGUUGGAUGCUGCAGACCCGGC\
) } def
/len { sequence length } bind def

/coor [
[59.41583252 117.90911865]
[50.66632462 118.60977936]
[42.50125504 115.66042328]
[36.35680008 109.66430664]
[33.27856827 101.75283051]
[18.58170700 98.75244904]
[3.88484764 95.75205994]
[-10.81201267 92.75167847]
[-25.50887108 89.75128937]
[-40.20573044 86.75090790]
[-54.90259171 83.75051880]
[-67.98991394 92.19799042]
[-82.85187531 88.94580841]
[-90.82460022 76.41699219]
[-105.52145386 73.41660309]
[-120.21831512 70.41622162]
[-134.91517639 67.41583252]
[-149.61203003 64.41545105]
[-164.30889893 61.41506195]
[-179.00575256 58.41467667]
[-195.73420715 61.17059326]
[-203.01332092 45.85880280]
[-190.31498718 34.62543869]
[-176.00537109 43.71781921]
[-161.30851746 46.71820450]
[-146.61164856 49.71858978]
[-131.91479492 52.71897507]
[-117.21793365 55.71936035]
[-102.52107239 58.71974564]
[-87.82421112 61.72013092]
[-75.57859802 53.31891251]
[-60.63114548 56.15236664]
[-51.90220642 69.05365753]
[-37.20534515 72.05404663]
[-22.50848579 75.05442810]
[-7.81162691 78.05481720]
[6.88523293 81.05519867]
[21.58209229 84.05558777]
[36.27895355 87.05596924]
[55.63884735 77.65735626]
[73.12055969 91.41070557]
[88.10839081 92.01469421]
[100.57676697 85.68767548]
[112.49559784 92.99746704]
[127.48342896 93.60145569]
[142.47126770 94.20544434]
[148.81250000 86.57205200]
[157.89213562 82.92868042]
[167.47206116 84.02954102]
[175.25848389 89.47666168]
[179.45106506 97.84766388]
[194.25682068 100.25383759]
[209.06257629 102.66000366]
[220.13787842 95.70351410]
[232.56459045 98.19609070]
[239.63337708 108.22489166]
[254.33023071 111.22528076]
[269.02709961 114.22566223]
[283.15005493 106.61504364]
[297.84866333 113.04394531]
[301.84738159 128.58067322]
[292.07876587 141.30676270]
[276.03643799 141.45986938]
[266.02670288 128.92253113]
[251.32984924 125.92214203]
[236.63298035 122.92175293]
[220.47036743 129.44425964]
[206.65641785 117.46575928]
[191.85066223 115.05959320]
[177.04490662 112.65341949]
[158.81840515 121.97990417]
[141.86727905 109.19328308]
[126.87944031 108.58929443]
[111.89160919 107.98530579]
[99.42323303 114.31232452]
[87.50440216 107.00253296]
[72.51657104 106.39854431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[41 77]
[42 76]
[44 74]
[45 73]
[46 72]
[51 70]
[52 69]
[53 68]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
