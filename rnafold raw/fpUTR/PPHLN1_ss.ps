%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCGCGCGCCGGAAGUACCUACCUGGGAUAACGGCGGCGAGCGGACGGCUGCAUUUACGGGGUCUCCCGGAGGGCCAGAGUCGUGGCUUACAGAAGAGACGAA\
) } def
/len { sequence length } bind def

/coor [
[93.67111969 147.00515747]
[81.46412659 143.65731812]
[70.57730865 137.20005798]
[61.78606033 128.09332275]
[55.71652603 116.98567963]
[41.03817749 120.07536316]
[26.35983086 123.16503906]
[18.45739174 128.06779480]
[11.20098591 126.12198639]
[-3.56247282 128.77534485]
[-18.32593155 131.42869568]
[-33.08938980 134.08204651]
[-47.85284805 136.73539734]
[-56.88327026 149.42749023]
[-71.89331818 151.90806580]
[-83.93763733 143.22071838]
[-90.36471558 155.16679382]
[-102.34743500 161.09658813]
[-115.35710144 159.02165222]
[-124.62143707 149.93243408]
[-139.45703125 152.14712524]
[-150.11921692 164.13452148]
[-166.13070679 163.12864685]
[-175.20886230 149.90115356]
[-170.38969421 134.59901428]
[-155.37005615 128.96073914]
[-141.67173767 137.31152344]
[-126.83613586 135.09683228]
[-117.49760437 121.19802094]
[-100.67921448 118.21833801]
[-86.59098816 128.45726013]
[-78.32535553 116.11972046]
[-63.39090347 113.21852875]
[-50.50620270 121.97193909]
[-35.74274445 119.31858826]
[-20.97928619 116.66522980]
[-6.21582699 114.01187897]
[8.54763126 111.35852814]
[23.27015114 108.48669434]
[37.94849777 105.39701080]
[52.62684631 102.30733490]
[59.52318573 75.27820587]
[80.42076874 56.80054092]
[76.46696472 42.33100891]
[72.51315308 27.86147308]
[68.55934906 13.39194012]
[56.53189468 2.24418497]
[60.43574142 -13.68352699]
[76.25494385 -18.00613213]
[87.71605682 -6.27690411]
[83.02887726 9.43813229]
[86.98268890 23.90766716]
[90.93649292 38.37720108]
[94.89030457 52.84673309]
[103.07118225 52.67022705]
[111.16065216 53.90250015]
[118.91791534 56.50687408]
[126.11209106 60.40583038]
[132.52902222 65.48331451]
[137.97773743 71.58818817]
[142.29603577 78.53874969]
[145.35537720 86.12810516]
[147.06471252 94.13036346]
[147.37315369 102.30733490]
[162.05149841 105.39701080]
[176.72984314 108.48669434]
[191.40820312 111.57637024]
[206.08654785 114.66605377]
[218.39949036 103.18222809]
[234.96017456 101.25980377]
[249.28962708 109.45365906]
[255.89848328 124.39922333]
[270.84970093 119.22505188]
[282.00759888 129.09167480]
[296.77105713 131.74502563]
[311.53451538 134.39837646]
[326.29797363 137.05172729]
[341.06143188 139.70507812]
[355.82489014 142.35844421]
[368.65609741 133.13151550]
[384.23983765 135.76251221]
[393.33059692 148.69053650]
[390.53497314 164.24560547]
[377.51156616 173.19917297]
[361.98690796 170.23924255]
[353.17153931 157.12190247]
[338.40808105 154.46853638]
[323.64462280 151.81518555]
[308.88116455 149.16183472]
[294.11770630 146.50848389]
[279.35424805 143.85513306]
[265.45904541 149.21908569]
[253.24513245 139.16267395]
[244.43801880 149.31427002]
[231.64884949 153.78558350]
[218.22114563 151.29319763]
[207.72254944 142.38941956]
[202.99685669 129.34440613]
[188.31851196 126.25472260]
[173.64016724 123.16503906]
[158.96182251 120.07536316]
[144.28347778 116.98567963]
[138.21394348 128.09332275]
[129.42269897 137.20005798]
[118.53587341 143.65731812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 41]
[6 40]
[7 39]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[16 31]
[20 28]
[21 27]
[43 54]
[44 53]
[45 52]
[46 51]
[64 102]
[65 101]
[66 100]
[67 99]
[68 98]
[72 93]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
