%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGUGACAAUUGUGUCUUCUUCCAGAUGUCAUCGCUAUAAGGAGUGGGGCUUUCAUCACCUCCUUGACGUAGGAUGUGUAC\
) } def
/len { sequence length } bind def

/coor [
[79.56734467 134.26634216]
[83.50234222 119.79167938]
[93.16841125 108.31719208]
[78.26273346 109.99665833]
[63.35704803 111.67612457]
[48.45136261 113.35559082]
[33.54568100 115.03505707]
[18.63999748 116.71453094]
[3.73431396 118.39399719]
[-11.17136955 120.07346344]
[-24.01846695 129.30723572]
[-37.53201294 123.04359436]
[-52.43769836 124.72306061]
[-67.34338379 126.40252686]
[-75.75865173 130.56201172]
[-82.83638000 127.85535431]
[-91.81719971 140.65687561]
[-106.93881989 144.64067078]
[-121.06127167 137.92572021]
[-127.51635742 123.68262482]
[-123.25618744 108.63652802]
[-110.29228973 99.89174652]
[-94.74581146 101.57728577]
[-83.95732880 112.89730072]
[-69.02285004 111.49684143]
[-54.11716461 109.81737518]
[-39.21148300 108.13790894]
[-27.43053818 99.02426147]
[-12.85083675 105.16777802]
[2.05484676 103.48831177]
[16.96052933 101.80884552]
[31.86621284 100.12937927]
[46.77189636 98.44991302]
[61.67757797 96.77044678]
[76.58325958 95.09097290]
[91.48894501 93.41150665]
[105.64719391 88.45732117]
[118.34806061 80.47684479]
[131.04891968 72.49636078]
[143.74978638 64.51587677]
[155.98320007 55.83581161]
[167.71066284 46.48346329]
[179.43814087 37.13111496]
[191.16561890 27.77876854]
[202.89308167 18.42642212]
[214.62055969 9.07407475]
[226.17109680 -0.49592757]
[237.54067993 -10.28023911]
[248.91024780 -20.06455040]
[247.50079346 -35.51747894]
[255.47241211 -48.83036041]
[269.75988770 -54.88411713]
[284.86935425 -51.35095596]
[294.99096680 -39.58945465]
[296.23269653 -24.12214279]
[288.11712646 -10.89652252]
[273.76483154 -4.99811316]
[258.69458008 -8.69497395]
[247.32499695 1.08933711]
[235.95541382 10.87364864]
[232.86460876 17.79225922]
[223.97290039 20.80154610]
[212.24543762 30.15389442]
[200.51795959 39.50624084]
[188.79048157 48.85858917]
[177.06301880 58.21093369]
[165.33554077 67.56328583]
[164.64251709 71.26143646]
[161.96604919 74.75357819]
[157.45292664 77.03369904]
[151.73027039 77.21674347]
[139.02940369 85.19721985]
[126.32853699 93.17770386]
[113.62767792 101.15818787]
[128.33612061 104.10127258]
[140.43826294 112.96343994]
[147.68429565 126.09717560]
[148.72715759 141.06088257]
[143.37295532 155.07275391]
[132.61708069 165.52793884]
[118.45906830 170.48280334]
[103.53093719 169.01620483]
[90.60787201 161.40078735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[12 27]
[13 26]
[14 25]
[16 24]
[37 74]
[38 73]
[39 72]
[40 71]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
