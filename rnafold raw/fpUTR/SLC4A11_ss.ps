%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUUUGGACCAACGGCUCUGGCUUCCAGGCGGCCGGGACGCGGUCCCAGGACUGGAGACCGUUGCCUGUCGGCCCCCGUGUGACCCGGGGCGCGUGACGGGGGUCGGGGGAACUGCGCCUGCA\
) } def
/len { sequence length } bind def

/coor [
[131.00811768 231.55691528]
[126.23081207 217.33801270]
[121.45351410 203.11909485]
[116.67621613 188.90019226]
[111.89891815 174.68127441]
[108.80723572 172.77865601]
[106.52846527 169.22872925]
[105.85222626 164.45220947]
[107.33937073 159.21774292]
[103.63800812 144.68157959]
[99.93664551 130.14541626]
[96.23528290 115.60926056]
[86.30999756 104.36254883]
[72.34689331 98.88243103]
[58.38378525 93.40231323]
[44.42068100 87.92219543]
[30.45757294 82.44208527]
[16.42723465 77.13645935]
[2.33184624 72.00615692]
[-11.76354313 66.87585449]
[-25.85893250 61.74555588]
[-39.95432281 56.61525345]
[-54.04970932 51.48495102]
[-60.79323578 52.27650452]
[-66.08024597 49.83857727]
[-68.70903778 45.73159027]
[-82.53118134 39.90506744]
[-96.35332489 34.07854462]
[-112.07528687 35.84781647]
[-120.79772949 23.77436447]
[-134.61987305 17.94784164]
[-143.85501099 17.48092842]
[-148.71109009 11.79990673]
[-162.38368225 5.63059950]
[-176.05627441 -0.53870684]
[-189.72885132 -6.70801353]
[-203.40144348 -12.87732029]
[-218.85560608 -8.57052040]
[-231.77337646 -18.08422470]
[-232.24536133 -34.12033463]
[-219.90948486 -44.37731552]
[-204.22877502 -40.98689270]
[-197.23213196 -26.54990768]
[-183.55955505 -20.38060188]
[-169.88696289 -14.21129417]
[-156.21437073 -8.04198837]
[-142.54179382 -1.87268150]
[-128.79335022 4.12569904]
[-114.97120667 9.95222092]
[-100.23789215 7.76619768]
[-90.52680206 20.25640297]
[-76.70465851 26.08292580]
[-62.88251495 31.90944672]
[-48.91941071 37.38956070]
[-34.82402039 42.51986313]
[-20.72863007 47.65016556]
[-6.63324118 52.78046799]
[7.46214819 57.91077042]
[21.55753708 63.04107285]
[29.00054741 62.36491394]
[35.93769073 68.47898102]
[49.90079498 73.95909119]
[63.86390305 79.43920898]
[77.82701111 84.91932678]
[91.79011536 90.39943695]
[99.08826447 84.62303162]
[110.09759521 84.88723755]
[123.44567108 78.04407501]
[136.79374695 71.20092010]
[150.14183044 64.35775757]
[163.48989868 57.51459885]
[176.83798218 50.67143631]
[190.18605042 43.82827759]
[203.44778442 36.81924820]
[216.62110901 29.64543915]
[229.70397949 22.30796432]
[242.69436646 14.80796432]
[255.68473816 7.30796385]
[268.67510986 -0.19203609]
[281.66549683 -7.69203615]
[284.20257568 -23.12243652]
[296.09817505 -33.27273941]
[311.73556519 -33.35028458]
[323.73126221 -23.31845284]
[326.42123413 -7.91397285]
[318.53536987 5.58963346]
[303.79714966 10.81637573]
[289.16549683 5.29834509]
[276.17510986 12.79834461]
[263.18475342 20.29834557]
[250.19436646 27.79834557]
[237.20397949 35.29834366]
[232.93766785 41.43464661]
[223.79492188 42.81876373]
[210.62159729 49.99257278]
[206.20362854 56.02060699]
[197.02922058 57.17635345]
[183.68113708 64.01951599]
[170.33305359 70.86267853]
[156.98498535 77.70583344]
[143.63690186 84.54899597]
[130.28883362 91.39215088]
[116.94075012 98.23531342]
[110.77144623 111.90790558]
[114.47280884 126.44406128]
[118.17416382 140.98022461]
[121.87552643 155.51637268]
[126.11782837 169.90397644]
[130.89512634 184.12287903]
[135.67242432 198.34179688]
[140.44972229 212.56069946]
[145.22702026 226.77961731]
[155.35327148 231.11447144]
[161.24865723 240.15644836]
[161.13462830 250.72898865]
[155.29463196 259.27664185]
[159.35723877 273.71600342]
[163.41984558 288.15536499]
[175.53086853 299.21228027]
[171.74700928 315.16891479]
[155.96080017 319.61047363]
[144.41171265 307.96783447]
[148.98048401 292.21795654]
[144.91787720 277.77859497]
[140.85527039 263.33923340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[3 110]
[4 109]
[5 108]
[9 107]
[10 106]
[11 105]
[12 104]
[13 65]
[14 64]
[15 63]
[16 62]
[17 61]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[26 53]
[27 52]
[28 51]
[30 49]
[31 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[67 103]
[68 102]
[69 101]
[70 100]
[71 99]
[72 98]
[73 97]
[74 95]
[75 94]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
