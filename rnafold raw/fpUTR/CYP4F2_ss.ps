%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCACAGCCUUUGCUAUAUCAAGGGCCAGGGUCAAAGGCCUCCCAGCAGACAGAGAGAGGAGGUUGUCUGGGACAGACUGCUCCUGACAGAAGG\
) } def
/len { sequence length } bind def

/coor [
[88.11122894 129.43968201]
[81.05790710 124.83623505]
[75.57095337 118.62781525]
[61.78349686 124.53594971]
[47.99604034 130.44409180]
[44.41448975 143.54652405]
[34.05184174 152.02220154]
[20.88997269 152.90740967]
[9.81930733 146.10063171]
[-4.15223455 151.55920410]
[-18.12377548 157.01777649]
[-32.09531784 162.47634888]
[-46.06686020 167.93492126]
[-60.03839874 173.39349365]
[-74.00994110 178.85206604]
[-80.12191772 193.42668152]
[-94.78097534 199.33325195]
[-109.29015350 193.06752014]
[-115.04141235 178.34684753]
[-108.62263489 163.90472412]
[-93.84196472 158.30941772]
[-79.46851349 164.88052368]
[-65.49697113 159.42195129]
[-51.52543259 153.96337891]
[-37.55389023 148.50480652]
[-23.58234978 143.04623413]
[-9.61080837 137.58766174]
[4.36073303 132.12908936]
[10.36115360 116.51116943]
[26.07333183 109.84931183]
[42.08790588 116.65663147]
[55.87535858 110.74849701]
[69.66281128 104.84035492]
[69.10692596 94.48080444]
[72.06234741 84.30683136]
[78.33697510 75.49856567]
[87.34597015 69.12644958]
[98.16426086 66.02207947]
[109.62088013 66.67207336]
[120.42559052 71.14822388]
[124.73625183 56.78096771]
[129.04692078 42.41370773]
[133.35758972 28.04644775]
[137.66825867 13.67918777]
[141.97892761 -0.68807226]
[146.05636597 -15.12325096]
[134.42709351 -25.00873375]
[128.24649048 -38.96447754]
[128.74169922 -54.21955872]
[135.81440735 -67.74507141]
[148.06033325 -76.85551453]
[163.04801941 -79.74200439]
[177.80166626 -75.83142090]
[189.39192200 -65.90022278]
[195.51753235 -51.92024612]
[194.96224976 -36.66723633]
[187.83633423 -23.16967773]
[175.55462646 -14.10752964]
[160.55567932 -11.28008461]
[161.91073608 -3.86722469]
[156.34617615 3.62259412]
[152.03550720 17.98985481]
[147.72485352 32.35711288]
[143.41418457 46.72437286]
[139.10351562 61.09163284]
[134.79284668 75.45889282]
[141.14434814 89.04779816]
[154.93180847 94.95594025]
[168.71926880 100.86407471]
[182.50671387 106.77220917]
[191.82205200 107.30711365]
[196.64006042 113.10137939]
[210.22897339 119.45288086]
[223.81787109 125.80438232]
[237.40678406 132.15588379]
[250.91938782 124.52771759]
[266.33117676 126.33235168]
[277.71597290 136.87586975]
[280.69610596 152.10408020]
[274.12567139 166.16142273]
[260.53109741 173.64256287]
[245.13980103 171.67083740]
[233.87005615 161.00444031]
[231.05528259 145.74479675]
[217.46636963 139.39329529]
[203.87747192 133.04179382]
[190.28855896 126.69029236]
[176.59858704 120.55966949]
[162.81112671 114.65152740]
[149.02366638 108.74339294]
[135.23622131 102.83525848]
[132.74697876 111.88127899]
[128.01676941 119.82469940]
[121.44707489 126.13308716]
[113.55929565 130.40638733]
[104.95375061 132.40184021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 59]
[67 91]
[68 90]
[69 89]
[70 88]
[72 87]
[73 86]
[74 85]
[75 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
