%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGCAGAAUCAGGCCCAGCUCCCAAUUCCCUCUCCCCAGUCUUCUCCAGGUGUCCCCUCCCAUGAGCGCACAGGAAAAGGACCAC\
) } def
/len { sequence length } bind def

/coor [
[-51.96658325 170.11839294]
[-62.94500351 180.33966064]
[-73.92341614 190.56094360]
[-78.69885254 209.98721313]
[-97.46923828 214.02273560]
[-107.69050598 225.00115967]
[-104.58557129 240.20442200]
[-111.04049683 254.31517029]
[-124.57324982 261.90756226]
[-139.98019409 260.06213379]
[-151.33706665 249.48854065]
[-154.27688599 234.25248718]
[-147.66926575 220.21258545]
[-134.05494690 212.76745605]
[-118.66892242 214.77989197]
[-108.44765472 203.80146790]
[-109.72477722 193.38395691]
[-104.84451294 183.84155273]
[-95.26100159 178.56439209]
[-84.14469147 179.58251953]
[-73.16626740 169.36125183]
[-62.18785477 159.13998413]
[-66.53150177 151.46481323]
[-69.46633911 143.14297485]
[-70.90003967 134.43080139]
[-70.78654480 125.59702301]
[-69.12757111 116.91442871]
[-65.97254944 108.65145874]
[-61.41723251 101.06389618]
[-55.60072327 94.38696289]
[-48.70125961 88.82800293]
[-40.93075180 84.56007385]
[-32.52826691 81.71653748]
[-23.75267410 80.38691711]
[-14.87467289 80.61404419]
[-6.16844320 82.39270782]
[2.09682560 85.66975403]
[9.66525555 90.34568787]
[16.30220222 96.27764130]
[21.80152893 103.28381348]
[25.99201012 111.14897156]
[40.52606964 107.43937683]
[55.06012726 103.72978210]
[69.59418488 100.02017975]
[84.12825012 96.31058502]
[95.68898773 84.28569031]
[111.76733398 88.72817230]
[126.15972900 84.50218201]
[140.55212402 80.27619171]
[147.51229858 69.24155426]
[159.75877380 66.10224152]
[170.46212769 72.03694153]
[184.99618530 68.32733917]
[199.53024292 64.61774445]
[214.06431580 60.90814590]
[219.21774292 51.00606537]
[228.83840942 45.79695511]
[239.50445557 46.85042953]
[247.57775879 53.55694580]
[262.33944702 50.89364624]
[277.10110474 48.23035049]
[289.26541138 37.23208618]
[304.78710938 42.52437210]
[307.69885254 58.66295624]
[295.00524902 69.04584503]
[279.76440430 62.99201584]
[265.00274658 65.65531158]
[250.24105835 68.31861115]
[236.69812012 81.92749786]
[217.77391052 75.44220734]
[203.23985291 79.15180206]
[188.70578003 82.86140442]
[174.17172241 86.57099915]
[162.43974304 99.48991394]
[144.77810669 94.66858673]
[130.38571167 98.89457703]
[115.99332428 103.12056732]
[109.70333862 113.09081268]
[98.33483887 116.20960999]
[87.83784485 110.84464264]
[73.30378723 114.55424500]
[58.76972580 118.26383972]
[44.23566818 121.97343445]
[29.70160675 125.68303680]
[26.47760201 148.99473572]
[13.10057449 168.29371643]
[-7.50597191 179.44435120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[5 16]
[6 15]
[41 84]
[42 83]
[43 82]
[44 81]
[45 80]
[47 77]
[48 76]
[49 75]
[52 73]
[53 72]
[54 71]
[55 70]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
