%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGGACGUCGCCAUUCCUGGCCCAUGGGAAGAUUGCGUUUCACCUGCUCCUGAAGGCCGAAGGUGGCUCUAGCGCAUCCUUUGUCGCGCCGUGACCUGCAGGUACUGACAGAUCCGUAGGGAGGACACCGUGACUUCCCGGACGCUGGGAA\
) } def
/len { sequence length } bind def

/coor [
[-45.73061752 593.95275879]
[-56.56140900 599.42199707]
[-56.52058792 608.61651611]
[-61.87657547 613.77337646]
[-67.22843933 627.78613281]
[-72.58029175 641.79888916]
[-67.36918640 656.97198486]
[-76.10414886 670.42858887]
[-92.08447266 671.84588623]
[-103.05142212 660.13671875]
[-100.59208679 644.28326416]
[-86.59306335 636.44702148]
[-81.24120331 622.43426514]
[-75.88934326 608.42150879]
[-70.67976379 594.35522461]
[-74.75202942 577.31103516]
[-60.66912079 565.48931885]
[-55.88953400 551.27117920]
[-51.10994720 537.05303955]
[-46.33036041 522.83489990]
[-41.55077362 508.61676025]
[-36.77118683 494.39862061]
[-31.99160004 480.18048096]
[-27.21201324 465.96234131]
[-35.98045731 453.95184326]
[-35.99544144 438.90313721]
[-27.04163551 426.58715820]
[-12.38325310 421.85028076]
[-7.60366631 407.63214111]
[-2.82407951 393.41400146]
[1.95550740 379.19586182]
[6.73509455 364.97772217]
[11.51468086 350.75958252]
[16.29426765 336.54144287]
[15.43952847 329.15570068]
[21.31748390 322.08529663]
[26.38424873 307.96694946]
[31.45101166 293.84857178]
[36.51777649 279.73022461]
[41.58453751 265.61187744]
[36.70653152 246.93653870]
[52.15839005 234.05067444]
[56.64883423 219.73858643]
[61.13928223 205.42649841]
[56.37963486 188.56134033]
[69.97189331 176.17866516]
[74.17135620 161.77850342]
[78.37081909 147.37835693]
[82.57028198 132.97819519]
[86.76974487 118.57804108]
[77.42094421 103.22018433]
[82.10372162 85.86117554]
[97.90798950 77.28862000]
[101.52042389 62.73011017]
[105.13286591 48.17159653]
[99.61217499 30.63300705]
[112.20796204 18.44964981]
[115.52459717 3.82091403]
[118.69281769 -10.84068108]
[121.71229553 -25.53363037]
[124.73177338 -40.22657776]
[114.84174347 -54.62182236]
[118.32521057 -71.39213562]
[132.55885315 -80.30003357]
[135.27992249 -95.05115509]
[138.00100708 -109.80228424]
[140.72207642 -124.55341339]
[135.61657715 -139.52819824]
[145.53428650 -150.64073181]
[148.25537109 -165.39184570]
[138.02117920 -174.67457581]
[133.75854492 -187.70349121]
[136.48355103 -201.02775574]
[145.37623596 -211.17388916]
[158.02328491 -215.55126953]
[161.04277039 -230.24421692]
[164.06224060 -244.93716431]
[166.93266296 -259.65997314]
[169.65374756 -274.41110229]
[161.77661133 -288.38714600]
[167.92555237 -303.20504761]
[183.38363647 -307.49774170]
[196.29272461 -297.97229004]
[196.75009155 -281.93572998]
[184.40486145 -271.69000244]
[181.68379211 -256.93887329]
[183.57431030 -249.74822998]
[178.75518799 -241.91769409]
[175.73571777 -227.22474670]
[172.71623230 -212.53178406]
[184.15563965 -200.79579163]
[186.38909912 -184.39250183]
[178.34439087 -169.73449707]
[163.00650024 -162.67077637]
[160.28541565 -147.91964722]
[165.58555603 -133.99995422]
[155.47320557 -121.83233643]
[152.75213623 -107.08120728]
[150.03105164 -92.33008575]
[147.30998230 -77.57895660]
[156.04731750 -68.06224060]
[157.71476746 -55.05440140]
[151.47775269 -43.29705429]
[139.42472839 -37.20709991]
[136.40524292 -22.51415253]
[133.38577271 -7.82120323]
[135.13015747 -0.59370667]
[130.15333557 7.13755322]
[126.83669281 21.76628876]
[133.02975464 32.20009232]
[130.34396362 44.44392776]
[119.69137573 51.78403473]
[116.07894135 66.34254456]
[112.46649933 80.90106201]
[120.12268829 89.26405334]
[122.80580139 100.28030396]
[119.85274506 111.22727966]
[111.99332428 119.39957428]
[101.16989899 122.77750397]
[96.97043610 137.17765808]
[92.77097321 151.57781982]
[88.57151031 165.97796631]
[84.37205505 180.37812805]
[89.88791656 192.07983398]
[86.05162048 204.01332092]
[75.45137024 209.91694641]
[70.96092224 224.22903442]
[66.47047424 238.54112244]
[72.08806610 247.94146729]
[71.58151245 258.66015625]
[65.36289978 267.13339233]
[55.70289230 270.67864990]
[50.63612747 284.79699707]
[45.56936646 298.91534424]
[40.50260162 313.03369141]
[35.43583679 327.15206909]
[30.51240921 341.32104492]
[25.73282242 355.53918457]
[20.95323563 369.75732422]
[16.17364883 383.97546387]
[11.39406204 398.19360352]
[6.61447525 412.41174316]
[1.83488810 426.62988281]
[10.65535259 439.25942993]
[10.35139370 454.48312378]
[1.24911571 466.46697998]
[-12.99387169 470.74194336]
[-17.77345848 484.96008301]
[-22.55304527 499.17822266]
[-27.33263206 513.39636230]
[-32.11222076 527.61450195]
[-36.89180756 541.83264160]
[-41.67139435 556.05078125]
[-46.45098114 570.26892090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[4 14]
[5 13]
[6 12]
[17 154]
[18 153]
[19 152]
[20 151]
[21 150]
[22 149]
[23 148]
[24 147]
[28 143]
[29 142]
[30 141]
[31 140]
[32 139]
[33 138]
[34 137]
[36 136]
[37 135]
[38 134]
[39 133]
[40 132]
[42 128]
[43 127]
[44 126]
[46 123]
[47 122]
[48 121]
[49 120]
[50 119]
[53 114]
[54 113]
[55 112]
[57 109]
[58 108]
[59 106]
[60 105]
[61 104]
[64 100]
[65 99]
[66 98]
[67 97]
[69 95]
[70 94]
[75 90]
[76 89]
[77 88]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
