%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCGGCCGCCUGUCAGAGGGAGGUGGCGAUGGUGCGCCCGGUGGCGGUGGCGGCGGCGGUUGCGGAGGCUUCCUUGGUCGGAUUGCAACGAGGAGAAGAUGACUGACCAACCGACUGGCUGAAUGA\
) } def
/len { sequence length } bind def

/coor [
[81.22555542 186.29066467]
[86.32553864 171.73066711]
[98.50170135 162.25729370]
[97.05399323 147.32731628]
[95.60628510 132.39735413]
[94.15857697 117.46737671]
[87.28263092 114.47213745]
[66.65480804 105.48643494]
[54.73614502 114.59387207]
[42.81747818 123.70130920]
[30.89881325 132.80874634]
[18.98014832 141.91618347]
[7.06148291 151.02362061]
[-4.85718203 160.13105774]
[-11.12469292 174.65789795]
[-25.93529701 176.23753357]
[-37.85396194 185.34497070]
[-46.76827240 199.76618958]
[-63.09362793 195.19244385]
[-63.21793365 178.23893738]
[-46.96139908 173.42630005]
[-35.04273605 164.31886292]
[-29.62772751 150.44345093]
[-13.96461964 148.21240234]
[-2.04595470 139.10496521]
[9.87271023 129.99752808]
[21.79137611 120.89008331]
[33.71004105 111.78264618]
[45.62870789 102.67520905]
[57.54737091 93.56777191]
[57.45674896 86.06832123]
[44.37668228 78.72585297]
[57.27550888 71.06941223]
[57.18488693 63.56996155]
[41.47244263 61.71802902]
[35.72373581 47.97751999]
[23.58848000 39.16073990]
[11.45322609 30.34396362]
[-3.95731902 32.61395645]
[-16.13859558 23.49961662]
[-18.20771599 8.79402828]
[-30.34296989 -0.02275093]
[-42.47822571 -8.83952999]
[-58.83521652 -10.01465321]
[-65.75162506 -24.88392639]
[-56.11244965 -38.15111542]
[-39.83364487 -36.16807175]
[-33.66144562 -20.97478485]
[-21.52619171 -12.15800571]
[-9.39093685 -3.34122705]
[5.23430252 -5.91765308]
[17.66677475 2.85094285]
[20.27000427 18.20870781]
[32.40525818 27.02548599]
[44.54051590 35.84226608]
[59.38496399 37.06356049]
[66.00167084 51.43470764]
[110.21514893 89.39606476]
[123.81826782 83.07505035]
[137.34400940 76.59013367]
[150.79042053 69.94226074]
[164.23681641 63.29438400]
[177.68322754 56.64651108]
[191.12962341 49.99863815]
[204.57603455 43.35076523]
[210.96142578 36.67443466]
[218.42863464 36.70913696]
[223.93400574 22.13763428]
[237.81954956 15.92100525]
[251.67732239 21.25933266]
[265.28042603 14.93831635]
[278.56228638 7.96746826]
[291.49182129 0.36307055]
[304.42135620 -7.24132729]
[317.35092163 -14.84572506]
[330.18762207 -22.60579300]
[342.92965698 -30.52039528]
[355.67166138 -38.43500137]
[363.31195068 -52.28911591]
[378.20587158 -52.43194580]
[390.94790649 -60.34654999]
[398.58819580 -74.20066833]
[413.48211670 -74.34349823]
[418.51843262 -89.57553864]
[433.61672974 -94.99962616]
[447.19488525 -86.45487213]
[448.83691406 -70.49607086]
[437.28317261 -59.36545563]
[421.39672852 -61.60147858]
[414.66781616 -48.31346893]
[398.86248779 -47.60453033]
[386.12048340 -39.68992615]
[379.39157104 -26.40191841]
[363.58627319 -25.69297981]
[350.84423828 -17.77837753]
[338.10223389 -9.86377335]
[334.03912354 -3.59865355]
[324.95529175 -1.91618001]
[312.02575684 5.68821764]
[299.09622192 13.29261589]
[286.16665649 20.89701271]
[285.36224365 23.68338585]
[283.34893799 26.30073357]
[280.19229126 28.26503563]
[276.13967896 29.12790489]
[271.60144043 28.54143143]
[257.99832153 34.86244965]
[253.14242554 48.89654160]
[239.43698120 55.50073242]
[224.74964905 50.31225204]
[211.22390747 56.79716873]
[197.77749634 63.44504166]
[184.33110046 70.09291840]
[170.88468933 76.74079132]
[157.43829346 83.38866425]
[143.99188232 90.03653717]
[139.34307861 95.88026428]
[130.13928223 96.67816162]
[116.53617096 102.99918365]
[109.08854675 116.01966858]
[110.53625488 130.94964600]
[111.98397064 145.87960815]
[113.43167877 160.80958557]
[127.20108032 167.76710510]
[135.00341797 181.07600403]
[134.34899902 196.48948669]
[125.44664001 209.08914185]
[111.13704681 214.85449219]
[95.98636627 211.94581604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 123]
[4 122]
[5 121]
[6 120]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[16 22]
[17 21]
[34 57]
[36 55]
[37 54]
[38 53]
[41 50]
[42 49]
[43 48]
[58 119]
[59 118]
[60 116]
[61 115]
[62 114]
[63 113]
[64 112]
[65 111]
[67 110]
[70 107]
[71 106]
[72 101]
[73 100]
[74 99]
[75 98]
[76 96]
[77 95]
[78 94]
[80 92]
[81 91]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
