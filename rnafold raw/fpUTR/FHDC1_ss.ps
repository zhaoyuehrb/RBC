%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUACACAAGUUUGAUGUUUGUGUCUUCUUCUCCAAGGCCAAGAAAUUAUCUCCAUAGGAGGCAACAGUACU\
) } def
/len { sequence length } bind def

/coor [
[79.75074768 210.51278687]
[79.75074768 195.51278687]
[79.75074768 180.51278687]
[79.75074768 165.51278687]
[79.75074768 150.51278687]
[79.75074768 135.51278687]
[68.30448914 125.81829071]
[53.50906754 128.28721619]
[38.71364594 130.75613403]
[23.91822815 133.22505188]
[9.12280750 135.69396973]
[-5.67261171 138.16288757]
[-20.46803093 140.63180542]
[-28.25450706 154.19294739]
[-42.95394897 159.52778625]
[-57.62573242 154.11734009]
[-65.34228516 140.51628113]
[-62.46009445 125.14661407]
[-50.34003448 115.26541138]
[-34.70483017 115.53827667]
[-22.93695068 125.83638763]
[-8.14153099 123.36746216]
[6.65388870 120.89854431]
[21.44930840 118.42962646]
[36.24472809 115.96070862]
[51.04014587 113.49179077]
[65.83556366 111.02287292]
[71.28800964 83.34032440]
[93.72776794 70.16025543]
[94.34764099 55.17306519]
[94.96752167 40.18587875]
[95.58739471 25.19869423]
[96.20726776 10.21150780]
[85.78209686 -1.36232388]
[86.62423706 -16.55263138]
[97.72235870 -26.42011261]
[89.64146423 -40.69004822]
[98.19120026 -54.68412018]
[114.57633972 -54.00642395]
[121.94125366 -39.35411835]
[112.70954895 -25.80023766]
[122.95491791 -15.04998398]
[122.53977966 0.15798503]
[111.19445038 10.83138275]
[110.57457733 25.81856918]
[109.95470428 40.80575562]
[109.33483124 55.79294205]
[108.71495819 70.78012848]
[115.39907837 73.68232727]
[121.20372009 78.08759308]
[125.79737091 83.74432373]
[128.91767883 90.32945251]
[130.38642883 97.46689606]
[145.18183899 99.93581390]
[159.97726440 102.40473175]
[174.77268982 104.87364960]
[189.56809998 107.34256744]
[206.18640137 103.98572540]
[214.01246643 119.02531433]
[201.72709656 130.70889282]
[187.09918213 122.13798523]
[172.30375671 119.66906738]
[157.50834656 117.20014954]
[142.71292114 114.73123169]
[127.91750336 112.26231384]
[124.65727234 119.72016907]
[119.38200378 126.28036499]
[112.34782410 131.39495850]
[103.96009064 134.59133911]
[94.75074768 135.51278687]
[94.75074768 150.51278687]
[94.75074768 165.51278687]
[94.75074768 180.51278687]
[94.75074768 195.51278687]
[94.75074768 210.51278687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[36 41]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
