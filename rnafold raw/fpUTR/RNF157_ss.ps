%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGUGAAGCGCGGAGGGCGGCGCGGGCACCGGGGCCGGGCCGGGGCUGCAGCCGCAGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[164.13038635 146.67727661]
[160.02806091 140.81944275]
[146.81913757 133.71141052]
[133.61019897 126.60338593]
[120.40126801 119.49535370]
[107.19232941 112.38732147]
[93.21233368 112.61360168]
[85.69963837 100.82160950]
[72.49070740 93.71357727]
[59.28177261 86.60555267]
[46.07283783 79.49752045]
[32.86390686 72.38948822]
[16.38369370 77.76453400]
[1.33299458 69.85762024]
[-3.40224028 53.87647247]
[-16.91677284 47.36821365]
[-30.43130684 40.85995865]
[-43.94583893 34.35170364]
[-59.73645401 35.33509827]
[-67.84623718 22.84187698]
[-84.15019226 24.60629082]
[-93.61046600 11.21094704]
[-86.49514771 -3.56417441]
[-70.12385559 -4.51969481]
[-61.33798599 9.32734299]
[-46.51401901 7.87843323]
[-37.43758392 20.83716965]
[-23.92304993 27.34542656]
[-10.40851688 33.85368347]
[3.10601568 40.36193848]
[14.74213696 34.40052795]
[27.86749649 36.36066055]
[37.53660583 45.73521423]
[39.97193527 59.18055725]
[53.18087006 66.28858948]
[66.38980103 73.39661407]
[79.59873199 80.50464630]
[92.80767059 87.61267853]
[106.78766632 87.38639832]
[114.30036163 99.17839050]
[127.50929260 106.28642273]
[140.71823120 113.39444733]
[153.92715454 120.50247955]
[167.13609314 127.61051178]
[180.65061951 134.11875916]
[194.44354248 140.01414490]
[208.23646545 145.90951538]
[222.02937317 151.80488586]
[227.88259888 151.05810547]
[232.81794739 152.69435120]
[236.02297974 155.86947632]
[237.19258118 159.53092957]
[250.06932068 167.22442627]
[262.94604492 174.91790771]
[275.82278442 182.61140442]
[288.69952393 190.30488586]
[305.09600830 190.00904846]
[313.31744385 204.19848633]
[304.90631104 218.27630615]
[288.51528931 217.76048279]
[281.00601196 203.18162537]
[268.12930298 195.48812866]
[255.25256348 187.79464722]
[242.37582397 180.10115051]
[229.49909973 172.40766907]
[216.13400269 165.59780884]
[202.34107971 159.70243835]
[188.54817200 153.80705261]
[174.75524902 147.91168213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[15 30]
[16 29]
[17 28]
[18 27]
[20 25]
[45 69]
[46 68]
[47 67]
[48 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
