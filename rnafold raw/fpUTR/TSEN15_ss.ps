%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCAGCUGCGAGCCUCGGGGAAGCGGAACCCACAGGCGCGCGCGCCGCUGCUUCUGGCCGGGCGCGGGUCGUGGUGCACCACGGGAGCGCCGCACCGGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[98.20362854 124.20004272]
[88.20074463 121.20487213]
[80.38248444 114.28363037]
[76.19640350 104.71778870]
[61.30168152 102.94368744]
[46.40696716 101.16959381]
[31.51225090 99.39549255]
[16.61753464 97.62139893]
[1.64387810 96.73278809]
[-13.35612202 96.73278809]
[-28.35612106 96.73278809]
[-43.35612106 96.73278809]
[-57.15629578 104.47008514]
[-69.88356781 96.73278809]
[-84.88356781 96.73278809]
[-99.88356781 96.73278809]
[-114.88356781 96.73278809]
[-126.01669312 107.62734222]
[-141.22882080 107.41365814]
[-151.54650879 96.73278809]
[-166.54650879 96.73278809]
[-181.54650879 96.73278809]
[-190.55792236 109.36504364]
[-205.28401184 114.25604248]
[-220.06230164 109.52508545]
[-229.21022034 96.99132538]
[-229.21022034 81.47425079]
[-220.06230164 68.94049072]
[-205.28401184 64.20953369]
[-190.55792236 69.10052490]
[-181.54650879 81.73278809]
[-166.54650879 81.73278809]
[-151.54650879 81.73278809]
[-141.22882080 71.05191803]
[-126.01669312 70.83823395]
[-114.88356781 81.73278809]
[-99.88356781 81.73278809]
[-84.88356781 81.73278809]
[-69.88356781 81.73278809]
[-57.15629578 73.99548340]
[-43.35612106 81.73278809]
[-28.35612106 81.73278809]
[-13.35612202 81.73278809]
[1.64387810 81.73278809]
[3.76584649 79.67161560]
[6.89727783 78.39899445]
[10.71356583 78.32987976]
[14.73669338 79.74263000]
[18.39163208 82.72667694]
[33.28634644 84.50077820]
[48.18106461 86.27487183]
[63.07578278 88.04897308]
[77.97049713 89.82306671]
[92.13774872 77.04234314]
[111.16570282 78.45478821]
[123.29064941 93.18718719]
[138.28405762 93.63169098]
[153.27748108 94.07618713]
[168.27088928 94.52069092]
[183.26429749 94.96518707]
[198.25772095 95.40969086]
[213.25112915 95.85418701]
[228.24453735 96.29869080]
[243.24288940 96.52095795]
[258.24288940 96.52095795]
[273.24288940 96.52095795]
[288.24124146 96.29869080]
[303.23464966 95.85418701]
[314.91177368 82.93295288]
[331.98327637 82.38450623]
[343.98440552 94.06174469]
[358.95806885 93.17313385]
[373.93173218 92.28452301]
[388.90539551 91.39591217]
[403.87902832 90.50730896]
[418.85269165 89.61869812]
[432.23880005 80.14535522]
[447.02087402 87.24625397]
[447.99237061 103.61660004]
[434.15390015 112.41598511]
[419.74130249 104.59235382]
[404.76763916 105.48096466]
[389.79400635 106.36956787]
[374.82034302 107.25817871]
[359.84667969 108.14678955]
[344.87301636 109.03540039]
[337.67953491 119.83796692]
[325.37625122 124.54811859]
[312.42904663 121.21366119]
[303.67916870 110.84760284]
[288.68576050 111.29209900]
[281.98574829 114.69085693]
[273.24288940 111.52095795]
[258.24288940 111.52095795]
[243.24288940 111.52095795]
[236.44511414 114.71968079]
[227.80003357 111.29209900]
[212.80662537 110.84760284]
[197.81321716 110.40309906]
[182.81980896 109.95860291]
[167.82638550 109.51409912]
[152.83297729 109.06960297]
[137.83956909 108.62509918]
[122.84615326 108.18060303]
[117.29357910 117.02354431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 44]
[10 43]
[11 42]
[12 41]
[14 39]
[15 38]
[16 37]
[17 36]
[20 33]
[21 32]
[22 31]
[56 104]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[64 95]
[65 94]
[66 93]
[67 91]
[68 90]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
