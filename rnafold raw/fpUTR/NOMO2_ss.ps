%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCUGCGGCGUGCAGUGUGAGGGGCGGGACCCGGCUGCCGGCGGUGGGUCUAGCUGGGGGAGGUCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[160.18791199 191.91836548]
[155.75849915 178.79849243]
[158.49057007 165.11184692]
[147.54721069 154.85305786]
[136.60385132 144.59426880]
[125.66048431 134.33547974]
[114.71712494 124.07668304]
[103.77375793 113.81789398]
[90.20357513 110.45014191]
[85.96744537 97.12547302]
[75.02408600 86.86667633]
[59.45083237 87.20072174]
[48.49884796 76.64096069]
[48.27635956 61.79218292]
[37.33299637 51.53339386]
[26.38963509 41.27460098]
[15.44627190 31.01581001]
[4.50290823 20.75701904]
[-5.33979321 22.39207840]
[-14.63530731 19.17364311]
[-21.17004204 12.01022911]
[-23.45608139 2.73212576]
[-21.06855011 -6.37503672]
[-30.60003471 -17.95738602]
[-40.13151932 -29.53973389]
[-55.88402557 -30.81802177]
[-66.05504608 -42.91454697]
[-64.61028290 -58.65266037]
[-52.40689850 -68.69522095]
[-36.68493652 -67.08414459]
[-26.77196503 -54.77526474]
[-28.54916954 -39.07122040]
[-19.01768494 -27.48887062]
[-9.48620033 -15.90652084]
[10.35361671 -10.93253136]
[14.76169968 9.81365490]
[25.70506287 20.07244682]
[36.64842606 30.33123779]
[47.59178925 40.59003067]
[58.53515244 50.84881973]
[73.36734772 50.11297226]
[84.61161804 60.36095428]
[85.28287506 75.92331696]
[96.22624207 86.18210602]
[109.79642487 89.54985809]
[114.03255463 102.87452698]
[124.97591400 113.13332367]
[135.91928101 123.39211273]
[146.86264038 133.65090942]
[157.80599976 143.90969849]
[168.74937439 154.16848755]
[185.15850830 150.72798157]
[200.28271484 157.57452393]
[208.36363220 171.88850403]
[206.45063782 188.04893494]
[217.82522583 197.82742310]
[229.19981384 207.60591125]
[244.70849609 210.73498535]
[249.31571960 224.89912415]
[260.69030762 234.67759705]
[276.73168945 234.90916443]
[286.43795776 247.68287659]
[282.36328125 263.19985962]
[267.63342285 269.55679321]
[253.54786682 261.87719727]
[250.91183472 246.05218506]
[239.53724670 236.27371216]
[224.84213257 233.84405518]
[219.42132568 218.98049927]
[208.04673767 209.20201111]
[196.67214966 199.42352295]
[183.85028076 203.71066284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[8 46]
[10 44]
[11 43]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[23 34]
[24 33]
[25 32]
[55 71]
[56 70]
[57 69]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
