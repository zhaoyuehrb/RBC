%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUGUAGGGCGGGCUGAGGAGCCGGCGUGCGGCGCGGCGGGACGGGACGUGCGGCCCAGCGAGUUGGUCGGUCCCGGGGUCACCCGCUACGGGAAGCAGGCCUCGCCACAGACUAAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[113.10652161 234.35289001]
[125.03738403 224.83358765]
[121.64666748 210.22184753]
[118.25594330 195.61009216]
[114.86522675 180.99835205]
[112.43219757 179.39738464]
[110.52560425 176.68104553]
[109.59508514 173.05976868]
[109.99983215 168.91049194]
[111.95085907 164.73799133]
[110.05578613 149.85818481]
[108.16070557 134.97837830]
[106.26562500 120.09856415]
[92.63553619 113.83592987]
[80.11095428 122.09032440]
[67.58638000 130.34471130]
[55.06180191 138.59910583]
[48.20339203 153.49522400]
[31.85110474 154.73408508]
[22.82677269 141.04125977]
[30.41385460 126.50274658]
[46.80741119 126.07452393]
[59.33198929 117.82013702]
[71.85656738 109.56574249]
[84.38114166 101.31135559]
[92.47621918 88.68321991]
[94.74763489 73.85619354]
[97.01905060 59.02917099]
[91.46070099 44.21649551]
[101.03604126 32.80763245]
[103.30745697 17.98060799]
[105.57887268 3.15358257]
[96.49581909 -9.50089645]
[99.01057434 -24.50525093]
[111.13066101 -33.08657074]
[105.57231903 -47.89924622]
[115.14765167 -59.30810928]
[117.41907501 -74.13513184]
[119.31414795 -89.01494598]
[120.83167267 -103.93798065]
[122.34919739 -118.86102295]
[123.86672211 -133.78405762]
[125.38424683 -148.70710754]
[113.84649658 -168.79292297]
[126.93164825 -187.02528381]
[126.55165100 -202.02047729]
[126.17166138 -217.01565552]
[125.79167175 -232.01084900]
[125.41168213 -247.00602722]
[125.03169250 -262.00122070]
[122.17542267 -266.64352417]
[121.53218079 -271.43203735]
[122.76885223 -275.47113037]
[125.23613739 -278.13973999]
[125.99588013 -293.12048340]
[126.75561523 -308.10122681]
[127.51535034 -323.08200073]
[128.27508545 -338.06274414]
[115.67624664 -346.96624756]
[109.91222382 -361.27636719]
[112.82229614 -376.42678833]
[123.47787476 -387.58303833]
[138.47880554 -391.18524170]
[153.03833008 -386.08392334]
[162.51057434 -373.90689087]
[163.87297058 -358.53979492]
[156.69079590 -344.88623047]
[143.25584412 -337.30300903]
[142.49609375 -322.32223511]
[141.73635864 -307.34149170]
[140.97662354 -292.36074829]
[140.21688843 -277.38000488]
[140.02687073 -262.38119507]
[140.40687561 -247.38601685]
[140.78686523 -232.39083862]
[141.16685486 -217.39564514]
[141.54684448 -202.40046692]
[141.92683411 -187.40527344]
[148.39414978 -183.81207275]
[153.20831299 -178.10386658]
[155.70448303 -170.99324036]
[155.51121521 -163.39088440]
[152.60490417 -156.28895569]
[147.31916809 -150.63162231]
[140.30729675 -147.18957520]
[138.78976440 -132.26654053]
[137.27224731 -117.34349823]
[135.75471497 -102.42045593]
[134.23719788 -87.49742126]
[136.58287048 -83.21779633]
[136.18392944 -77.40383148]
[132.24609375 -71.86371613]
[129.97468567 -57.03669357]
[135.69549561 -43.28454590]
[125.95768738 -30.81515503]
[134.95300293 -18.99907303]
[132.86068726 -3.93000412]
[120.40589905 5.42499924]
[118.13448334 20.25202370]
[115.86306763 35.07904816]
[121.58387756 48.83119583]
[111.84607697 61.30058670]
[109.57466125 76.12760925]
[107.30324554 90.95463562]
[119.68291473 98.21593475]
[121.14543152 118.20348358]
[123.04051208 133.08329773]
[124.93559265 147.96310425]
[126.83066559 162.84291077]
[129.47695923 177.60763550]
[132.86769104 192.21937561]
[136.25840759 206.83111572]
[139.64912415 221.44285583]
[154.55296326 224.73506165]
[166.54710388 234.17449951]
[173.25013733 247.88699341]
[173.33113098 263.14990234]
[166.77403259 276.93273926]
[154.88075256 286.49896240]
[140.01269531 289.94915771]
[125.12194824 286.59829712]
[113.16506195 277.11169434]
[106.51609039 263.37292480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 113]
[3 112]
[4 111]
[5 110]
[10 109]
[11 108]
[12 107]
[13 106]
[14 25]
[15 24]
[16 23]
[17 22]
[26 104]
[27 103]
[28 102]
[30 100]
[31 99]
[32 98]
[35 95]
[37 93]
[38 92]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
