%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCGUGCGUGGAGCAGUCGGGGCUGGAGGCGAGGCCGCCGGGCGGGCAGGGGUUGUGGCGCGGCAAGCGGCGGGCCAGCGACGGCGCGA\
) } def
/len { sequence length } bind def

/coor [
[82.66277313 298.52560425]
[69.85205841 287.42056274]
[76.97675323 272.03631592]
[78.01161957 257.07208252]
[79.04648590 242.10780334]
[80.08135223 227.14355469]
[81.11621857 212.17929077]
[82.15109253 197.21502686]
[79.41311646 190.17518616]
[83.48873138 181.75497437]
[85.03948975 166.83534241]
[75.48253632 155.46871948]
[76.84268951 140.31600952]
[88.82984924 130.36886597]
[90.38060760 115.44924164]
[84.33705139 106.55332947]
[84.62645721 96.54016876]
[72.89898682 87.18782043]
[61.17151642 77.83547211]
[48.14942932 78.47937012]
[38.54583359 70.26988220]
[37.24307251 58.10890198]
[21.72702980 55.01650620]
[17.08632278 40.86330414]
[5.68864632 31.11174202]
[-5.70903111 21.36017990]
[-17.10670853 11.60861874]
[-32.62275314 8.51622105]
[-37.26345825 -5.63698101]
[-48.66113663 -15.38854218]
[-60.05881500 -25.14010429]
[-76.02484894 -30.84290695]
[-74.96475220 -47.76367950]
[-58.41178894 -51.42914963]
[-50.30725098 -36.53778076]
[-38.90957642 -26.78622055]
[-27.51189804 -17.03465843]
[-12.81109047 -14.63975716]
[-7.35514736 0.21094178]
[4.04253006 9.96250343]
[15.44020748 19.71406364]
[26.83788490 29.46562576]
[41.53869247 31.86052704]
[46.99463654 46.71122742]
[64.31623840 48.87818146]
[70.52386475 66.10800171]
[82.25133514 75.46035004]
[93.97880554 84.81269836]
[86.71952057 71.68628693]
[88.09009552 56.74903107]
[97.61691284 45.16284180]
[112.00775909 40.93158340]
[126.28955841 45.51746368]
[135.52691650 57.33572388]
[136.52764893 72.30230713]
[128.94592285 85.24516296]
[115.40145874 91.69166565]
[130.38134766 90.91524506]
[145.36123657 90.13882446]
[160.34112549 89.36240387]
[173.72230530 80.92115784]
[186.83302307 87.98930359]
[201.81291199 87.21288300]
[215.19409180 78.77164459]
[228.30479431 85.83979034]
[241.76148987 76.46698761]
[256.48992920 83.67841339]
[257.33877563 100.05558014]
[243.43479919 108.75105286]
[229.08120728 100.81967926]
[216.77149963 109.20539093]
[202.58932495 102.19277954]
[187.60943604 102.96920013]
[175.29971313 111.35490417]
[161.11755371 104.34229279]
[146.13766479 105.11871338]
[131.15776062 105.89513397]
[116.17787170 106.67155457]
[105.30023193 117.00000000]
[103.74947357 131.91963196]
[113.43466187 144.11941528]
[111.64943695 159.22795105]
[99.95911407 168.38610840]
[98.40835571 183.30572510]
[97.11534882 198.24989319]
[96.08048248 213.21415710]
[95.04561615 228.17842102]
[94.01074982 243.14266968]
[92.97588348 258.10693359]
[91.94100952 273.07119751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[10 84]
[11 83]
[14 80]
[15 79]
[17 48]
[18 47]
[19 46]
[22 44]
[24 42]
[25 41]
[26 40]
[27 39]
[29 37]
[30 36]
[31 35]
[57 78]
[58 77]
[59 76]
[60 75]
[62 73]
[63 72]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
