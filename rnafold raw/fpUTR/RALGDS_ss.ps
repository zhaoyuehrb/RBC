%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCUCACAGCGGUGGCAAAGCCCAGCCGCGCGGGCCGCGCCGCCGCCCCCGCCGCGCGCCGGGCCGGCCCCGCGCCCGCGCUGCGAGCCUUCC\
) } def
/len { sequence length } bind def

/coor [
[87.93940735 282.57901001]
[87.59466553 266.77847290]
[98.58375549 255.41996765]
[98.09803009 240.42784119]
[97.61230469 225.43569946]
[97.12657166 210.44357300]
[96.64084625 195.45143127]
[96.15512085 180.45930481]
[88.00974274 167.98925781]
[95.29611206 153.94577026]
[94.81037903 138.95364380]
[94.32465363 123.96150208]
[93.83892059 108.96936798]
[91.04258728 108.96643066]
[88.08384705 108.20287323]
[73.10153961 108.93130493]
[58.11923981 109.65974426]
[43.13693619 110.38817596]
[28.15463448 111.11660767]
[19.76729965 124.17157745]
[5.29609919 129.77192688]
[-9.69449425 125.76422119]
[-19.44029236 113.68949890]
[-20.19383621 98.19072723]
[-11.66537189 85.22751617]
[2.86572981 79.78446960]
[17.81196594 83.95456696]
[27.42620087 96.13430786]
[42.40850449 95.40586853]
[57.39080811 94.67743683]
[72.37310791 93.94900513]
[87.35540771 93.22057343]
[100.38608551 85.79080200]
[108.64374542 73.26837921]
[116.90141296 60.74596024]
[125.15907288 48.22354126]
[133.41673279 35.70111847]
[141.67439270 23.17869759]
[143.85142517 14.10554123]
[150.40771484 10.39046764]
[159.06654358 -1.85798764]
[167.72537231 -14.10644245]
[165.25593567 -29.48628807]
[174.21171570 -41.78461456]
[188.88925171 -44.04406738]
[197.54809570 -56.29252243]
[206.20692444 -68.54097748]
[214.86575317 -80.78942871]
[216.51397705 -96.52455139]
[230.17886353 -102.45077515]
[238.83769226 -114.69923401]
[247.49652100 -126.94768524]
[249.14474487 -142.68280029]
[262.80963135 -148.60903931]
[271.46847534 -160.85749817]
[270.18176270 -176.84886169]
[281.98019409 -187.71977234]
[297.81301880 -185.13098145]
[305.53460693 -171.06838989]
[299.22167969 -156.31962585]
[283.71691895 -152.19865417]
[275.05807495 -139.95021057]
[274.02920532 -125.09117889]
[259.74496460 -118.28885651]
[251.08615112 -106.04040527]
[242.42732239 -93.79194641]
[241.39842224 -78.93292236]
[227.11421204 -72.13059998]
[218.45536804 -59.88214493]
[209.79653931 -47.63368988]
[201.13771057 -35.38523483]
[203.90338135 -20.79460144]
[195.29658508 -8.24957752]
[179.97383118 -5.44761181]
[171.31500244 6.80084324]
[162.65617371 19.04929733]
[154.19682312 31.43635941]
[145.93914795 43.95878220]
[137.68148804 56.48120117]
[129.42382812 69.00362396]
[121.16616821 81.52604675]
[112.90850830 94.04846191]
[108.83105469 108.48364258]
[109.31678772 123.47577667]
[109.80251312 138.46791077]
[110.28823853 153.46003723]
[118.46836090 167.00242615]
[111.14724731 179.97357178]
[111.63298035 194.96571350]
[112.11870575 209.95783997]
[112.60443878 224.94998169]
[113.09016418 239.94210815]
[113.57588959 254.93424988]
[125.27717590 265.55758667]
[125.95592499 281.34729004]
[115.20944977 292.93560791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 88]
[10 86]
[11 85]
[12 84]
[13 83]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[33 82]
[34 81]
[35 80]
[36 79]
[37 78]
[38 77]
[40 76]
[41 75]
[42 74]
[45 71]
[46 70]
[47 69]
[48 68]
[50 66]
[51 65]
[52 64]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
