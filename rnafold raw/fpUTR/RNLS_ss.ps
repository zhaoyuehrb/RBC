%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCUCAGGGCCCAGGUCGGCCCAGGGAGCACGGAACCAAAGAGCGCUAGCGCCGGUUCGGCCGCCUUUCCAGAAAGCCCGGGCCGAACGGCCCCGCCGCAGAGACUCAGCGCGGAUCGCUGCUCCCUCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[67.58457947 307.60214233]
[57.14170456 318.36996460]
[43.56147385 324.73999023]
[28.60531235 325.88598633]
[14.21312237 321.65930176]
[2.25164580 312.60818481]
[-5.72764874 299.90655518]
[-8.68980312 285.20196533]
[-6.24974680 270.39920044]
[-16.60852814 281.24795532]
[-26.96730995 292.09671021]
[-37.32609177 302.94549561]
[-47.68487549 313.79425049]
[-47.06930923 329.58654785]
[-57.86206055 341.13177490]
[-73.65998077 341.58032227]
[-85.09044647 330.66610718]
[-85.37196350 314.86431885]
[-74.33750916 303.54989624]
[-58.53363419 303.43545532]
[-48.17485428 292.58670044]
[-37.81607056 281.73794556]
[-27.45729065 270.88919067]
[-17.09850883 260.04040527]
[-8.76495552 247.56837463]
[-2.70614004 233.84646606]
[3.35267496 220.12455750]
[9.41149044 206.40264893]
[15.47030544 192.68074036]
[21.52911949 178.95883179]
[27.58793449 165.23692322]
[33.64675140 151.51501465]
[28.04348183 137.76223755]
[33.99250793 123.75996399]
[48.45568085 117.97598267]
[54.51449585 104.25407410]
[47.16078186 117.32781982]
[33.73171234 124.01065063]
[18.86800766 121.99314880]
[7.70615482 111.97251892]
[4.10338116 97.41160583]
[9.30470657 83.34226990]
[21.51269531 74.62648010]
[36.50860596 74.27617645]
[49.11048889 82.41268158]
[37.35221481 73.09908295]
[21.05821037 71.24504852]
[14.76586151 56.10112762]
[24.94819641 43.24608612]
[41.13050461 45.90409088]
[46.66581345 61.34081268]
[58.42408371 70.65441132]
[72.59048462 65.72358704]
[76.02474213 51.12201691]
[79.45900726 36.52044678]
[82.89326477 21.91887665]
[81.81031036 12.75628948]
[86.57915497 7.02159548]
[90.34976196 -7.49675560]
[94.12036896 -22.01510620]
[97.89097595 -36.53345871]
[101.66158295 -51.05180740]
[105.43218994 -65.57015991]
[109.20279694 -80.08850861]
[98.97672272 -95.95283508]
[103.42641449 -113.96912384]
[119.31064606 -122.93657684]
[122.40672302 -137.61357117]
[125.50279999 -152.29057312]
[128.59887695 -166.96757507]
[122.99567413 -182.37979126]
[133.74722290 -194.76269531]
[149.79324341 -191.37782288]
[154.62696838 -175.70724487]
[143.27587891 -163.87150574]
[140.17979431 -149.19450378]
[137.08372498 -134.51750183]
[133.98764038 -119.84049988]
[142.20454407 -111.77552032]
[145.50248718 -100.61878967]
[142.93858337 -89.14740753]
[135.04447937 -80.27636719]
[123.72115326 -76.31790161]
[119.95054626 -61.79955292]
[116.17993927 -47.28120041]
[112.40933228 -32.76285172]
[108.63871765 -18.24449921]
[104.86811066 -3.72614789]
[101.09750366 10.79220295]
[97.49483490 25.35313606]
[94.06057739 39.95470428]
[90.62631989 54.55627823]
[87.19205475 69.15784454]
[114.24464417 74.77865601]
[124.26439667 96.35897064]
[139.06872559 98.77391052]
[153.87304688 101.18885040]
[168.67738342 103.60378265]
[177.74298096 101.88897705]
[183.79412842 106.24928284]
[198.53872681 109.00552368]
[213.52565002 103.93573761]
[224.61448669 113.87992859]
[239.35908508 116.63616943]
[256.03955078 113.60321045]
[263.57156372 128.79217529]
[251.06126404 140.23458862]
[236.60284424 131.38076782]
[221.85824585 128.62452698]
[207.92594910 133.89144897]
[195.78248596 123.75012207]
[181.03788757 120.99387360]
[166.26243591 118.40811157]
[151.45811462 115.99317169]
[136.65379333 113.57823944]
[121.84945679 111.16329956]
[97.70822144 128.87513733]
[68.23640442 110.31288910]
[62.17758942 124.03479767]
[67.64695740 138.61985779]
[61.30698395 152.44950867]
[47.36865997 157.57383728]
[41.30984497 171.29574585]
[35.25102997 185.01765442]
[29.19221306 198.73956299]
[23.13339806 212.46147156]
[17.07458305 226.18336487]
[11.01576805 239.90527344]
[4.95695305 253.62718201]
[17.69676781 245.70903015]
[32.41544724 242.81759644]
[47.20390320 245.32789612]
[60.14398575 252.91435242]
[69.55730438 264.59292603]
[74.22289276 278.84890747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[25 129]
[26 128]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[32 122]
[35 119]
[36 118]
[45 52]
[46 51]
[53 93]
[54 92]
[55 91]
[56 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[67 78]
[68 77]
[69 76]
[70 75]
[95 116]
[96 115]
[97 114]
[98 113]
[100 112]
[101 111]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
