%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUAUAGGCGCCCCCACACCCGGGCCCGGCUCAGCGCCGCCGCCGCUCCUCGCCUCCUUGCUGCACG\
) } def
/len { sequence length } bind def

/coor [
[165.74325562 206.59707642]
[154.78071594 196.35877991]
[143.81817627 186.12048340]
[132.38174438 189.01535034]
[120.89157867 185.84642029]
[112.38336945 177.32583618]
[109.16655731 165.59571838]
[112.19832611 153.69046021]
[102.21221924 142.49771118]
[92.22612000 131.30494690]
[78.90783691 124.40397644]
[64.00490570 122.70027161]
[49.10197449 120.99657440]
[34.19904327 119.29286957]
[23.81116486 130.81987000]
[8.62484837 134.00662231]
[-5.52046013 127.62775421]
[-13.18559933 114.13607788]
[-11.42316723 98.71941376]
[-0.91085440 87.30578613]
[14.30913925 84.28396606]
[28.38441658 90.81590271]
[35.90274429 104.38993835]
[50.80567932 106.09363556]
[65.70861053 107.79734039]
[80.61154175 109.50104523]
[81.46294403 94.03379822]
[91.79539490 84.70595551]
[91.11267853 69.72149658]
[90.42995453 54.73704529]
[89.74723816 39.75259018]
[78.91560364 27.91809654]
[81.55699158 12.09398270]
[95.64516449 4.41915178]
[110.37287140 10.78107834]
[114.44228363 26.29943657]
[104.73168945 39.06987000]
[105.41441345 54.05432510]
[106.09712982 69.03878021]
[106.77985382 84.02323914]
[117.87843323 94.29170227]
[117.18905640 110.57099152]
[103.41887665 121.31884766]
[113.40497589 132.51161194]
[123.39107513 143.70436096]
[142.06468201 143.83927917]
[154.75019836 157.11750793]
[154.05647278 175.15794373]
[165.01901245 185.39624023]
[175.98155212 195.63453674]
[197.22059631 192.62033081]
[214.12881470 205.39448547]
[216.96223450 226.13235474]
[229.95262146 233.63235474]
[245.15161133 229.30032349]
[258.92129517 237.05732727]
[263.09240723 252.30125427]
[255.19024658 265.98815918]
[239.90307617 269.99786377]
[226.30046082 261.95144653]
[222.45262146 246.62274170]
[209.46223450 239.12274170]
[201.62475586 244.52766418]
[192.36013794 246.90640259]
[182.79943848 245.93673706]
[174.12081909 241.70719910]
[167.40446472 234.70993042]
[163.49807739 225.78361511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[8 45]
[9 44]
[10 43]
[11 26]
[12 25]
[13 24]
[14 23]
[28 40]
[29 39]
[30 38]
[31 37]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
