%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGUCCCAGCUCCGGUGAGUGGCCCCUGCUGGACCGUGGAUCCCGGGCGGGCGUGCGGGCGGCAGCGUACGAGGCCUUCUACUCGCCCGGGUGUCCGGUGCCUCGCUUCUCCCUGGGACCCUGUCGUCAACAUCGAGGCCUGCCAGUGAGCUUCUACCAUC\
) } def
/len { sequence length } bind def

/coor [
[-115.12094116 556.14135742]
[-130.10629272 556.80419922]
[-143.26295471 549.59985352]
[-150.77633667 536.61718750]
[-150.46873474 521.62274170]
[-161.07533264 532.22930908]
[-171.68193054 542.83593750]
[-182.28854370 553.44250488]
[-186.16845703 561.76470947]
[-193.20135498 564.14825439]
[-204.00918579 574.54974365]
[-214.81700134 584.95123291]
[-212.82934570 600.22723389]
[-220.13243103 613.58831787]
[-233.74166870 620.01110840]
[-248.34848022 617.22204590]
[-259.15631104 627.62353516]
[-269.96414185 638.02502441]
[-271.70779419 653.97308350]
[-285.34014893 662.43115234]
[-300.40356445 656.91094971]
[-305.34274292 641.64715576]
[-296.36871338 628.34875488]
[-280.36563110 627.21722412]
[-269.55780029 616.81573486]
[-258.74996948 606.41424561]
[-260.97750854 591.71130371]
[-254.03811646 578.35809326]
[-240.40711975 571.57214355]
[-225.21849060 574.14343262]
[-214.41065979 563.74194336]
[-203.60284424 553.34045410]
[-192.89514160 542.83593750]
[-182.28854370 532.22930908]
[-171.68193054 521.62274170]
[-161.07533264 511.01611328]
[-158.55088806 500.82556152]
[-147.92478943 495.67840576]
[-139.06158447 483.57702637]
[-130.19837952 471.47564697]
[-121.33516693 459.37423706]
[-112.47196198 447.27285767]
[-103.96009064 434.92184448]
[-95.80657959 422.33135986]
[-95.38286591 407.44277954]
[-81.38711548 400.06512451]
[-80.96340942 385.17654419]
[-66.96765900 377.79891968]
[-58.81414795 365.20843506]
[-50.66063309 352.61795044]
[-42.50712204 340.02746582]
[-34.35360718 327.43698120]
[-26.20009422 314.84649658]
[-18.04658127 302.25601196]
[-10.38130093 289.36248779]
[-3.21550393 276.18478394]
[3.95029330 263.00711060]
[-0.50402302 248.84043884]
[6.57539320 235.37431335]
[21.46490669 230.79826355]
[28.63070297 217.62059021]
[35.79650116 204.44290161]
[42.96229935 191.26521301]
[50.12809372 178.08753967]
[57.29389191 164.90985107]
[64.45968628 151.73216248]
[71.62548828 138.55448914]
[70.90824127 123.67715454]
[84.29817200 115.24980164]
[91.46396637 102.07211304]
[80.55875397 96.38681030]
[74.70767975 82.48585510]
[73.27317047 67.55460358]
[71.83866119 52.62335587]
[70.40415192 37.69210815]
[56.96799850 29.93006706]
[50.69110870 15.73921490]
[53.98707581 0.57622629]
[65.58853912 -9.72842026]
[81.03449249 -11.21237850]
[94.38565063 -3.30503607]
[100.50823212 10.95307255]
[97.04796600 26.07941437]
[85.33540344 36.25759888]
[86.76991272 51.18885040]
[88.20442200 66.12009430]
[89.63893127 81.05134583]
[103.65631866 86.39108276]
[114.66139984 76.19852448]
[125.66648102 66.00596619]
[136.67155457 55.81341171]
[147.67663574 45.62085342]
[158.68171692 35.42829895]
[162.87756348 27.26085091]
[169.99659729 25.14839554]
[168.59550476 9.80749893]
[176.40498352 -3.26404595]
[190.25025940 -9.16087914]
[204.73953247 -5.81438971]
[215.93782043 -15.79427528]
[227.13612366 -25.77416039]
[238.33442688 -35.75404739]
[246.13639832 -50.80614090]
[262.76004028 -47.47591019]
[264.16183472 -30.58001518]
[248.31430054 -24.55574799]
[237.11601257 -14.57586288]
[225.91770935 -4.59597683]
[214.71940613 5.38390875]
[216.38214111 20.16136932]
[208.93638611 33.23901367]
[195.05548096 39.49788666]
[179.97647095 36.34669495]
[168.87428284 46.43338013]
[157.86920166 56.62593460]
[146.86412048 66.81848907]
[135.85903931 77.01104736]
[124.85395813 87.20360565]
[113.84887695 97.39616394]
[104.64165497 109.23791504]
[97.47585297 122.41559601]
[97.68055725 138.23547363]
[84.80316925 145.72027588]
[77.63737488 158.89796448]
[70.47157288 172.07565308]
[63.30577850 185.25332642]
[56.13998032 198.43101501]
[48.97418594 211.60870361]
[41.80838776 224.78637695]
[34.64258957 237.96406555]
[38.89507294 252.94920349]
[31.44021606 266.21115112]
[17.12797737 270.17291260]
[9.96218014 283.35058594]
[2.79638243 296.52828979]
[3.07691407 300.96792603]
[2.01082826 304.86001587]
[-0.05650971 307.84265137]
[-2.69660735 309.70666504]
[-5.45609999 310.40954590]
[-13.60961342 323.00003052]
[-21.76312637 335.59048462]
[-29.91663933 348.18096924]
[-38.07015228 360.77145386]
[-46.22366714 373.36193848]
[-54.37717819 385.95242310]
[-55.38408279 401.74154663]
[-68.79663849 408.21865845]
[-69.80354309 424.00778198]
[-83.21609497 430.48486328]
[-91.36960602 443.07534790]
[-91.63420105 448.38204956]
[-93.72444916 452.61300659]
[-96.91284180 455.24780273]
[-100.37057495 456.13607788]
[-109.23377991 468.23745728]
[-118.09699249 480.33883667]
[-126.96019745 492.44024658]
[-135.82341003 504.54162598]
[-121.04916382 501.94897461]
[-107.07223511 507.39373779]
[-97.94503784 519.29724121]
[-96.31388855 534.20831299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 36]
[6 35]
[7 34]
[8 33]
[10 32]
[11 31]
[12 30]
[16 26]
[17 25]
[18 24]
[38 159]
[39 158]
[40 157]
[41 156]
[42 155]
[43 151]
[44 150]
[46 148]
[48 146]
[49 145]
[50 144]
[51 143]
[52 142]
[53 141]
[54 140]
[55 135]
[56 134]
[57 133]
[60 130]
[61 129]
[62 128]
[63 127]
[64 126]
[65 125]
[66 124]
[67 123]
[69 121]
[70 120]
[72 87]
[73 86]
[74 85]
[75 84]
[88 119]
[89 118]
[90 117]
[91 116]
[92 115]
[93 114]
[95 113]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
