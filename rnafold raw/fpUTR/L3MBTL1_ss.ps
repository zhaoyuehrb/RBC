%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCGCGCGGCGCCCGGCUCGGACCGUAGCUAGGCGCUGGGCGGCCACCGGCUGGCCAGGCAGGGGAGGUCAGC\
) } def
/len { sequence length } bind def

/coor [
[178.52905273 179.51290894]
[165.60397339 171.71490479]
[158.26934814 158.40701294]
[158.58268738 143.11488342]
[145.80108643 135.26437378]
[133.01948547 127.41384888]
[120.08039856 119.82569122]
[106.98921967 112.50304413]
[93.00739288 112.50115204]
[85.68813324 100.58812714]
[72.59695435 93.26548767]
[59.50578308 85.94284058]
[46.41460419 78.62020111]
[33.32342911 71.29755402]
[20.23225212 63.97491455]
[7.14107609 56.65227127]
[-8.68012238 56.66804504]
[-16.01062012 43.70220566]
[-29.10179710 36.37956238]
[-42.19297409 29.05691910]
[-55.28414917 21.73427582]
[-68.52197266 14.68019676]
[-81.90093231 7.89761782]
[-98.76232910 6.12852383]
[-101.73007202 -10.56365490]
[-86.51177979 -18.03627205]
[-75.11835480 -5.48134422]
[-61.73939514 1.30123448]
[-54.13644791 1.52203977]
[-47.96150589 8.64309883]
[-34.87033081 15.96574211]
[-21.77915382 23.28838539]
[-8.68797779 30.61102867]
[6.19685268 30.07148933]
[14.46371937 43.56109619]
[27.55489540 50.88373947]
[40.64607239 58.20638275]
[53.73724747 65.52902222]
[66.82842255 72.85166931]
[79.91960144 80.17430878]
[93.01078033 87.49695587]
[106.99260712 87.49884796]
[114.31186676 99.41187286]
[127.40304565 106.73451233]
[136.70271301 108.26928711]
[140.86999512 114.63224792]
[153.65159607 122.48276520]
[166.43319702 130.33328247]
[179.93104553 123.13915253]
[195.11727905 123.66366577]
[207.91691589 131.66589355]
[214.94552612 144.91181946]
[214.40393066 159.79713440]
[227.18553162 167.64764404]
[239.96713257 175.49816895]
[252.74873352 183.34869385]
[265.53033447 191.19920349]
[278.31192017 199.04972839]
[291.09353638 206.90025330]
[304.56027222 199.51493835]
[319.91506958 199.86846924]
[333.02761841 207.86576843]
[340.37069702 221.35557556]
[339.96902466 236.70921326]
[331.93066406 249.79663086]
[318.41790771 257.09738159]
[303.06561279 256.64758301]
[290.00344849 248.56825256]
[282.74511719 235.03266907]
[283.24301147 219.68185425]
[270.46142578 211.83132935]
[257.67980957 203.98080444]
[244.89820862 196.13029480]
[232.11660767 188.27976990]
[219.33500671 180.42924500]
[206.55340576 172.57873535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 48]
[5 47]
[6 46]
[7 44]
[8 43]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[18 33]
[19 32]
[20 31]
[21 30]
[22 28]
[23 27]
[53 76]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
