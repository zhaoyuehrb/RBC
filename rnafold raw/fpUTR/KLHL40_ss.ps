%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGAAGACAGCUGCUCAGUCUAAGCAAACCCCAGCAGGAAAGCAGGGGUACAGAGAGGAGCCCCCUUGGCACCGCCACCGCACCCUAGGCCACCCACC\
) } def
/len { sequence length } bind def

/coor [
[68.05317688 97.09719086]
[53.84610748 92.28480530]
[39.63903046 87.47241211]
[25.43195915 82.66002655]
[8.61124420 98.10791016]
[-13.83911991 101.43603516]
[-34.16162872 91.65578461]
[-46.21408081 100.58541870]
[-58.26653671 109.51505280]
[-70.31899261 118.44468689]
[-69.19199371 133.83082581]
[-76.58235168 147.37284851]
[-90.13182831 154.74952698]
[-105.51682281 153.60699463]
[-117.82804871 144.30982971]
[-123.13703918 129.82473755]
[-119.74971771 114.77383423]
[-108.74695587 103.95982361]
[-93.63970184 100.83341217]
[-79.24862671 106.39223480]
[-67.19616699 97.46260071]
[-55.14371490 88.53296661]
[-43.09125900 79.60333252]
[-45.35889053 73.49427795]
[-46.55825806 67.08926392]
[-46.65465164 60.57363129]
[-45.64528275 54.13594055]
[-43.55935669 47.96247864]
[-40.45724487 42.23189163]
[-36.42870712 37.11001587]
[-45.16982269 24.92014885]
[-53.91093826 12.73027897]
[-62.65205383 0.54041052]
[-71.39317322 -11.64945793]
[-85.72287750 -18.35543442]
[-86.85179901 -33.20719528]
[-95.59291840 -45.39706421]
[-111.22573090 -47.71883774]
[-120.57081604 -60.46422958]
[-118.08389282 -76.07162476]
[-105.24040985 -85.28143311]
[-89.66017914 -82.62963867]
[-80.58667755 -69.68949890]
[-83.40304565 -54.13817978]
[-74.66193390 -41.94831085]
[-60.95745087 -36.11423492]
[-59.20330048 -20.39057350]
[-50.46218491 -8.20070457]
[-41.72106934 3.98916364]
[-32.97995377 16.17903328]
[-24.23884010 28.36890030]
[-11.13804722 24.93397903]
[2.38255572 26.26947594]
[14.63510323 32.23854828]
[24.07965469 42.12405777]
[29.51773262 54.71461105]
[30.24434471 68.45295715]
[44.45141983 73.26534271]
[58.65849304 78.07772827]
[72.86556244 82.89011383]
[96.51461029 68.11148071]
[122.79773712 77.43257141]
[135.62980652 69.66482544]
[148.46188354 61.89707947]
[153.67280579 46.72388077]
[168.83239746 41.47354889]
[182.31153870 50.17368317]
[183.77017212 66.15029144]
[172.08937073 77.14748383]
[156.22962952 74.72915649]
[143.39755249 82.49690247]
[130.56547546 90.26464081]
[131.65867615 94.82755280]
[132.07455444 99.50112152]
[131.80421448 104.18536377]
[130.85345459 108.78006744]
[143.92089844 116.14497375]
[156.98834229 123.50988770]
[169.80415344 115.14245605]
[185.04161072 113.70080566]
[199.19927979 119.51621246]
[209.02381897 131.25234985]
[212.25764465 146.21232605]
[208.15762329 160.95846558]
[197.66590881 172.10218811]
[183.19345093 177.08277893]
[168.06587219 174.75570679]
[155.75941467 165.65573120]
[149.10198975 151.87394714]
[149.62344360 136.57733154]
[136.55599976 129.21241760]
[123.48854828 121.84751129]
[117.39905548 126.94992828]
[110.24236298 130.39933777]
[102.45743561 131.98416138]
[94.52178955 131.60719299]
[86.92214966 129.29156494]
[80.12465668 125.17929077]
[74.54624939 119.52260590]
[70.52907562 112.66848755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[4 57]
[7 23]
[8 22]
[9 21]
[10 20]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[36 45]
[37 44]
[62 72]
[63 71]
[64 70]
[76 92]
[77 91]
[78 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
