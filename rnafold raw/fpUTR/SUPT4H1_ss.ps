%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCGCCGGAAGUGGUGGGCAUUCUGGGUAACGAGCUAUUUACUUCCUGCGGGUGCACAGGCUGUGGUCGUCUAUCUCCCUGUUGUUCUUCCCAUCGGCGAAG\
) } def
/len { sequence length } bind def

/coor [
[71.12565613 458.17306519]
[63.37411499 444.59191895]
[66.21673584 429.21487427]
[78.31131744 419.30249023]
[78.31131744 404.30249023]
[78.31131744 389.30249023]
[78.31131744 374.30249023]
[78.31131744 359.30249023]
[75.93051910 356.48886108]
[74.88774872 352.32290649]
[75.83061981 347.49258423]
[79.05230713 342.96041870]
[80.40979004 328.02197266]
[81.76727295 313.08352661]
[83.12475586 298.14508057]
[73.64325714 281.40750122]
[85.08249664 264.94546509]
[85.53554535 249.95230103]
[85.98858643 234.95913696]
[86.44163513 219.96598816]
[86.89467621 204.97282410]
[75.55561829 197.75218201]
[69.25231934 185.75563049]
[69.74668121 172.10406494]
[77.01605225 160.41004944]
[89.23067474 153.82180786]
[90.13635254 138.84918213]
[91.04203033 123.87654114]
[76.55088806 110.02366638]
[76.55088806 89.97633362]
[91.04203033 76.12345886]
[90.13635254 61.15082550]
[89.23067474 46.17819214]
[88.32499695 31.20555878]
[79.76857758 17.89772987]
[86.72330475 4.72651243]
[84.18121338 1.41757858]
[82.84152985 -2.16328025]
[82.65250397 -5.63693190]
[83.45343018 -8.67401314]
[84.99787903 -11.02391529]
[86.98403931 -12.53493786]
[88.34152222 -27.47338486]
[78.49921417 -39.54677200]
[80.08869934 -54.67714310]
[91.65947723 -63.98588181]
[93.01696014 -78.92433167]
[94.37444305 -93.86277771]
[95.73192596 -108.80122375]
[89.27527618 -123.24498749]
[98.13262939 -135.21981812]
[90.76457214 -149.87054443]
[99.99335480 -163.42640686]
[116.32521057 -161.94230652]
[122.95932007 -146.94494629]
[113.07108307 -133.86233521]
[119.62482452 -120.48706818]
[110.67037964 -107.44374084]
[109.31289673 -92.50529480]
[107.95541382 -77.56684875]
[106.59793091 -62.62839890]
[116.30123138 -51.38644791]
[115.13735199 -36.21739960]
[103.27997589 -26.11590195]
[101.92249298 -11.17745399]
[101.69593811 3.82083488]
[110.18757629 16.05772018]
[103.29763031 30.29988098]
[104.20330811 45.27251434]
[105.10898590 60.24514771]
[106.01466370 75.21778107]
[114.79386139 79.22799683]
[121.45393372 86.21366119]
[125.04087830 95.17412567]
[125.04087830 104.82587433]
[121.45393372 113.78633881]
[114.79386139 120.77200317]
[106.01466370 124.78221893]
[105.10898590 139.75485229]
[104.20330811 154.72747803]
[117.36571503 165.22207642]
[121.69650269 181.31858826]
[115.69706726 196.69331360]
[101.88783264 205.42587280]
[101.43479156 220.41903687]
[100.98174286 235.41218567]
[100.52870178 250.40534973]
[100.07565308 265.39849854]
[108.11701965 273.03192139]
[110.48689270 283.63613892]
[106.62091064 293.55337524]
[98.06320190 299.50256348]
[96.70571899 314.44100952]
[95.34823608 329.37945557]
[93.99075317 344.31790161]
[93.31131744 359.30249023]
[93.31131744 374.30249023]
[93.31131744 389.30249023]
[93.31131744 404.30249023]
[93.31131744 419.30249023]
[105.40589905 429.21487427]
[108.24851990 444.59191895]
[100.49697876 458.17306519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[12 95]
[13 94]
[14 93]
[15 92]
[17 88]
[18 87]
[19 86]
[20 85]
[21 84]
[26 80]
[27 79]
[28 78]
[31 71]
[32 70]
[33 69]
[34 68]
[36 66]
[42 65]
[43 64]
[46 61]
[47 60]
[48 59]
[49 58]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
