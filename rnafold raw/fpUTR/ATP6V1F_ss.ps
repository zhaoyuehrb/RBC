%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUCGAAGGGUGGGGGUUGAGGCCGACGGGGCGCCGUACGGCGGAGGCGGGGUUUCAGUGGCUUCUGGUGCUCUAGGGUGAGCUCUGCCCGGCUGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[92.18619537 362.50692749]
[101.69805145 349.58776855]
[100.78359222 334.61569214]
[99.86913300 319.64358521]
[90.96352386 311.30044556]
[90.17396545 298.71890259]
[98.48067474 288.70672607]
[87.49011993 278.71957397]
[86.81262970 263.52105713]
[97.36259460 252.06085205]
[96.90515900 237.06782532]
[96.44771576 222.07481384]
[95.99027252 207.08178711]
[95.53282928 192.08876038]
[95.07538605 177.09573364]
[94.61794281 162.10272217]
[94.16049957 147.10969543]
[86.03866577 134.62429810]
[93.35151672 120.59458923]
[92.89407349 105.60156250]
[90.33174896 102.46575165]
[89.24665833 98.17474365]
[90.13814545 93.45412445]
[93.14374542 89.23140717]
[94.05820465 74.25930786]
[94.97266388 59.28720474]
[84.88265228 50.21196365]
[81.95865631 37.16025925]
[87.06093597 25.00837326]
[98.09361267 18.16271210]
[99.46424103 3.22546387]
[100.83486938 -11.71178436]
[102.20549774 -26.64903259]
[103.57611847 -41.58628082]
[104.94674683 -56.52352905]
[106.31737518 -71.46077728]
[107.68799591 -86.39802551]
[95.43479156 -77.74591064]
[80.46773529 -78.73942566]
[69.46564484 -88.93521118]
[67.33805847 -103.78355408]
[75.03437805 -116.65859985]
[89.12022400 -121.81504059]
[103.30999756 -116.95188141]
[111.27198029 -104.23809814]
[115.77650452 -118.54576111]
[120.28102875 -132.85342407]
[124.78555298 -147.16108704]
[129.29008484 -161.46875000]
[133.79460144 -175.77641296]
[130.55863953 -191.26315308]
[141.76084900 -201.07946777]
[132.41778564 -213.46844482]
[132.17480469 -228.98362732]
[141.12535095 -241.65908813]
[155.82774353 -246.62086487]
[170.62861633 -241.96105957]
[179.83673096 -229.47146606]
[179.91137695 -213.95455933]
[170.82386780 -201.37693787]
[156.06851196 -196.57493591]
[159.62666321 -182.11158752]
[148.10227966 -171.27189636]
[143.59774780 -156.96423340]
[139.09321594 -142.65657043]
[134.58869934 -128.34890747]
[130.08416748 -114.04123688]
[125.57964325 -99.73357391]
[122.62524414 -85.02739716]
[121.25462341 -70.09014893]
[119.88399506 -55.15290451]
[118.51336670 -40.21565628]
[117.14274597 -25.27840614]
[115.77211761 -10.34115791]
[114.40148926 4.59608984]
[113.03086090 19.53333855]
[124.31449127 31.89943314]
[123.22403717 48.94043732]
[109.94476318 60.20166397]
[109.03030396 75.17376709]
[108.11584473 90.14586639]
[107.88709259 105.14411926]
[108.34453583 120.13714600]
[116.49909210 133.69493103]
[109.15352631 146.65225220]
[109.61096191 161.64527893]
[110.06840515 176.63829041]
[110.52584839 191.63131714]
[110.98329163 206.62434387]
[111.44073486 221.61737061]
[111.89817810 236.61038208]
[112.35562134 251.60340881]
[123.58462524 262.39910889]
[123.83495331 277.61068726]
[113.47370148 288.24929810]
[123.54106140 303.57278442]
[114.84123230 318.72912598]
[115.75569153 333.70123291]
[116.67015076 348.67330933]
[127.68358612 360.33880615]
[125.28732300 376.20190430]
[111.31957245 384.09378052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[7 95]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[19 83]
[20 82]
[24 81]
[25 80]
[26 79]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[37 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
