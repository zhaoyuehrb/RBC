%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAUUGAGGGAAGGGAACCCGCGCCGCCGGAAGGAGCCGCUCGCUUCACGGCGCUGGGACCCGGGCUGGAAGGCAGGGCAUCAGCU\
) } def
/len { sequence length } bind def

/coor [
[96.82267761 114.85639954]
[91.23851776 113.68886566]
[78.61972046 121.79847717]
[79.54864502 134.52362061]
[74.91858673 146.33444214]
[65.69601440 154.93846130]
[53.73204422 158.69496155]
[41.39115524 156.92762756]
[31.08387947 150.04539490]
[17.91869354 157.23413086]
[4.75350952 164.42286682]
[1.84994662 179.78852844]
[-10.28384018 189.65286255]
[-25.91864777 189.35824585]
[-37.67219925 179.04379272]
[-39.99482346 163.57966614]
[-31.78985405 150.26754761]
[-16.93142128 145.39302063]
[-2.43522525 151.25769043]
[10.72995949 144.06895447]
[23.89514542 136.88021851]
[25.21780968 119.45370483]
[36.70725250 106.08052826]
[54.03619766 102.07789612]
[70.51010895 109.17967987]
[83.12890625 101.07006073]
[88.37087250 87.01581573]
[84.14488220 72.62342072]
[79.91889191 58.23102951]
[75.69290924 43.83863449]
[71.21070099 29.52396202]
[66.47370911 15.29157352]
[61.73671341 1.05918479]
[56.99972153 -13.17320442]
[52.00944519 -27.31877518]
[46.76748276 -41.37302017]
[41.52552032 -55.42726517]
[30.32519531 -68.15475464]
[39.45473480 -82.44068909]
[55.70967484 -77.62268066]
[55.57976913 -60.66922760]
[60.82173157 -46.61498260]
[66.06369019 -32.56073761]
[71.47352600 -27.27505684]
[71.23210907 -17.91019821]
[75.96910095 -3.67780900]
[80.70609283 10.55457973]
[85.44309235 24.78696823]
[90.66082001 30.26237106]
[90.08530426 39.61264420]
[94.31128693 54.00503922]
[98.53727722 68.39743805]
[102.76326752 82.78983307]
[113.36986542 93.39643097]
[127.76226044 97.62242126]
[142.15466309 101.84841156]
[156.54705811 106.07439423]
[170.93945312 110.30038452]
[184.69094849 102.98370361]
[199.22668457 107.47447968]
[206.11727905 120.62953186]
[220.50967407 124.85551453]
[234.90206909 129.08151245]
[246.72311401 123.56153107]
[258.72274780 127.54151917]
[264.51843262 138.32077026]
[278.75082397 143.05776978]
[292.98321533 147.79475403]
[308.93048096 143.97154236]
[320.01724243 156.05523682]
[314.83840942 171.61517334]
[298.72149658 174.64462280]
[288.24621582 162.02714539]
[274.01382446 157.29016113]
[259.78146362 152.55316162]
[242.92739868 157.07846069]
[230.67608643 143.47390747]
[216.28369141 139.24790955]
[201.89129639 135.02192688]
[188.98239136 142.36331177]
[174.32626343 138.28259277]
[166.71345520 124.69277954]
[152.32106018 120.46678925]
[137.92866516 116.24080658]
[123.53627777 112.01481628]
[109.14388275 107.78882599]
[106.34257507 111.42993927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[9 21]
[10 20]
[11 19]
[27 53]
[28 52]
[29 51]
[30 50]
[31 48]
[32 47]
[33 46]
[34 45]
[35 43]
[36 42]
[37 41]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[61 79]
[62 78]
[63 77]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
