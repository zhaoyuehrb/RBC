%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUGUCCUGAGAAGGCAGGCUUCAUUGAUCAAUUUGACCCCAUUUCAUGAUUUAUUUUAAUAGUGUAAGAGGAAAAGAAGUGUG\
) } def
/len { sequence length } bind def

/coor [
[20.94832611 229.64465332]
[16.14693451 231.00285339]
[6.64412642 242.60874939]
[-2.85868239 254.21463013]
[-12.36149120 265.82052612]
[-8.29650497 280.79568481]
[-13.84149837 295.28817749]
[-26.86430931 303.72537231]
[-42.35739899 302.86294556]
[-54.36336136 293.03256226]
[-58.26565933 278.01419067]
[-52.56377411 263.58270264]
[-39.45020294 255.28727722]
[-23.96737862 256.31771851]
[-14.46457005 244.71182251]
[-4.96176147 233.10594177]
[4.54104757 221.50004578]
[13.61866093 209.55865479]
[22.25924301 197.29731750]
[23.26600266 182.43678284]
[37.54008102 175.61318970]
[46.18066406 163.35185242]
[54.82124329 151.09051514]
[63.46182632 138.82919312]
[72.10240936 126.56784821]
[66.32790375 118.71673584]
[62.70843124 109.66773987]
[61.47563934 100.00000000]
[62.70843124 90.33226013]
[66.32790375 81.28326416]
[72.10240936 73.43215179]
[63.46182632 61.17081451]
[54.82124329 48.90947723]
[40.75487518 39.44514465]
[45.95538330 23.30850601]
[62.90103912 23.83870888]
[67.08258057 40.26889801]
[75.72315979 52.53023148]
[84.36374664 64.79156494]
[100.19752502 61.47614670]
[115.99647522 64.95375824]
[128.97471619 74.61118317]
[141.96510315 67.11118317]
[150.04774475 53.51039886]
[164.93853760 53.84746170]
[177.92892456 46.34746170]
[190.91929626 38.84746170]
[203.77215576 31.11415482]
[216.48330688 23.15005875]
[229.19444275 15.18596458]
[236.78080750 1.30224335]
[251.67405701 1.10149276]
[264.38519287 -6.86260223]
[277.09634399 -14.82669735]
[280.38827515 -30.28433990]
[293.69152832 -38.81658936]
[309.11349487 -35.36141586]
[317.50460815 -21.96870804]
[313.88659668 -6.58412600]
[300.40591431 1.66493297]
[285.06045532 -2.11555243]
[272.34930420 5.84854221]
[259.63815308 13.81263733]
[252.96098328 27.12671280]
[237.15853882 27.89710999]
[224.44740295 35.86120224]
[211.73625183 43.82529831]
[207.64616394 50.19144058]
[198.41929626 51.83784485]
[185.42892456 59.33784485]
[172.43853760 66.83784485]
[165.28504944 79.90217590]
[149.46510315 80.10156250]
[136.47471619 87.60156250]
[138.17063904 105.20848083]
[131.81953430 121.71736145]
[118.76029968 133.64784241]
[101.74607086 138.48477173]
[84.36374664 135.20843506]
[75.72315979 147.46977234]
[67.08258057 159.73110962]
[58.44199753 171.99243164]
[49.80141449 184.25376892]
[48.17662430 199.99133301]
[34.52057648 205.93789673]
[25.87999535 218.19923401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[18 86]
[19 85]
[21 83]
[22 82]
[23 81]
[24 80]
[25 79]
[31 39]
[32 38]
[33 37]
[42 74]
[43 73]
[45 71]
[46 70]
[47 69]
[48 67]
[49 66]
[50 65]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
