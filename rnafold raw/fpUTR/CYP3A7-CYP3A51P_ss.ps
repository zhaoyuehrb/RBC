%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCACUGCUGUGCAGGGCAGGAAAGCUCCACACACACAGCCCAGCAAACAGCAGCACGCUGCUGAAAAAAAGACUCAGAGGAGAGAGAUAAGGAAGGAAAGUAGUG\
) } def
/len { sequence length } bind def

/coor [
[232.94583130 148.80892944]
[223.42350769 151.19560242]
[213.63967896 149.85328674]
[205.01019287 144.93212891]
[198.80020142 137.10336304]
[195.93879700 127.46797943]
[181.24868774 124.43471527]
[166.55857849 121.40145111]
[151.86846924 118.36819458]
[137.17835999 115.33493042]
[122.48825073 112.30166626]
[107.79814148 109.26840210]
[93.02602386 106.66368103]
[78.18439484 104.48970032]
[63.40855026 110.14522552]
[51.93703842 100.64502716]
[37.09541702 98.47104645]
[22.25378990 96.29707336]
[7.41216612 94.12309265]
[-14.28719616 106.59376526]
[-34.36195755 92.75855255]
[-49.30487823 94.06588745]
[-64.24780273 95.37322235]
[-77.36352539 105.21749878]
[-92.33853149 98.53308868]
[-93.76781464 82.19635010]
[-80.18104553 73.01310730]
[-65.55513763 80.43030548]
[-50.61221695 79.12297058]
[-35.66929626 77.81562805]
[-33.46842957 72.10274506]
[-29.79629517 67.16315460]
[-24.90786743 63.36936569]
[-19.15059471 61.01331711]
[-12.93971920 60.28397369]
[-6.72834110 61.25227356]
[-0.97435951 63.86466599]
[3.89327908 67.94574738]
[7.50654936 73.20994568]
[9.58614445 79.28147125]
[24.42776871 81.45544434]
[39.26939392 83.62942505]
[54.11101913 85.80340576]
[67.82529449 79.99238586]
[80.35837555 89.64807129]
[95.19999695 91.82205200]
[100.15599060 89.64195251]
[105.97674561 90.48559570]
[110.83140564 94.57829285]
[125.52151489 97.61155701]
[140.21162415 100.64482117]
[154.90173340 103.67807770]
[169.59184265 106.71134186]
[184.28195190 109.74460602]
[198.97206116 112.77787018]
[215.48168945 100.00862885]
[235.82055664 103.19213104]
[247.31590271 119.92554474]
[262.25881958 121.23287964]
[277.20175171 122.54021454]
[292.14465332 123.84755707]
[307.08758545 125.15489197]
[322.03051758 126.46222687]
[336.97341919 127.76956177]
[342.31674194 112.64778137]
[351.33926392 99.40116882]
[363.43801880 88.90547943]
[377.80673218 81.85292053]
[393.48983765 78.70649719]
[409.44580078 79.66963196]
[424.61639404 84.67301941]
[437.99688721 93.37958527]
[448.70257568 105.20716858]
[456.02722168 119.36748505]
[459.48974609 134.91862488]
[474.48339844 135.35488892]
[489.47705078 135.79116821]
[498.85205078 123.42634583]
[513.71417236 118.96572113]
[528.34863281 124.12450409]
[537.12811279 136.91902161]
[536.67681885 152.42953491]
[527.16821289 164.69192505]
[512.25860596 168.99105835]
[497.68096924 163.67382812]
[489.04077148 150.78482056]
[474.04711914 150.34855652]
[459.05346680 149.91227722]
[455.41717529 163.47425842]
[448.81207275 175.87364197]
[439.57537842 186.46975708]
[428.18038940 194.71423340]
[415.21224976 200.17927551]
[401.33786011 202.58000183]
[387.27157593 201.78915405]
[373.73852539 197.84393311]
[361.43707275 190.94421387]
[351.00292969 181.44245911]
[342.97619629 169.82566833]
[337.77343750 156.69049072]
[335.66610718 142.71247864]
[320.72317505 141.40515137]
[305.78024292 140.09780884]
[290.83734131 138.79048157]
[275.89440918 137.48313904]
[260.95147705 136.17579651]
[246.00857544 134.86846924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 46]
[14 45]
[16 43]
[17 42]
[18 41]
[19 40]
[21 30]
[22 29]
[23 28]
[58 107]
[59 106]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
