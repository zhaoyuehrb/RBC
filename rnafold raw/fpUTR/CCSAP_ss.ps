%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAUCGGCCGGGCGCGGCGGGAAGGAGGCUGCGGGCAGCGAGGAGCGGCUGGCGCUCGAGGCGGCGGACGGCACC\
) } def
/len { sequence length } bind def

/coor [
[45.92720413 404.02767944]
[31.84390450 409.82257080]
[16.62137032 409.38174438]
[2.89699602 402.78164673]
[-6.95138597 391.16574097]
[-11.21748352 376.54656982]
[-9.16217136 361.45697021]
[-1.14154232 348.51135254]
[11.45477962 339.95257568]
[26.44440651 337.26351929]
[29.98957253 322.68847656]
[33.53474045 308.11343384]
[37.07990646 293.53839111]
[29.14015579 280.98867798]
[32.52783203 266.15701294]
[45.74498749 257.91415405]
[49.29015350 243.33911133]
[52.83531952 228.76406860]
[48.32524109 214.56871033]
[59.10493469 202.98817444]
[62.65010071 188.41313171]
[53.62556076 181.10993958]
[48.06965256 170.85679626]
[46.86839294 159.20457458]
[50.24563217 147.93341064]
[57.72265625 138.78073120]
[68.18562317 133.17338562]
[80.05135345 132.00537109]
[85.30601501 117.95587158]
[90.56067657 103.90637207]
[90.22414398 95.61415100]
[96.31365204 89.40971375]
[96.79452515 80.00819397]
[102.63841248 75.15323639]
[108.99269867 61.56563187]
[107.82995605 45.78721237]
[120.23023224 37.53600311]
[126.58451843 23.94839668]
[132.93881226 10.36079025]
[131.77606201 -5.41763163]
[144.17634583 -13.66884041]
[150.53062439 -27.25644684]
[146.43394470 -42.76762772]
[156.12208557 -55.55510712]
[172.16311646 -55.80942154]
[182.25175476 -43.33548737]
[178.64883423 -27.70223427]
[164.11824036 -20.90215874]
[157.76394653 -7.31455326]
[159.38119507 7.49199247]
[146.52641296 16.71507835]
[140.17211914 30.30268288]
[133.81784058 43.89028931]
[135.43508911 58.69683456]
[122.58030701 67.91992188]
[116.22602081 81.50752258]
[110.14313507 95.21878052]
[104.61017609 109.16103363]
[99.35551453 123.21053314]
[94.10085297 137.26004028]
[105.32313538 152.38931274]
[105.48409271 171.08090210]
[94.69245911 186.16569519]
[77.22514343 191.95829773]
[73.67997742 206.53334045]
[77.93647766 221.77120972]
[67.41036224 232.30923462]
[63.86519241 246.88427734]
[60.32002640 261.45932007]
[68.27468109 274.85189819]
[64.47174835 289.58255005]
[51.65494537 297.08358765]
[48.10977936 311.65859985]
[44.56461334 326.23364258]
[41.01944733 340.80868530]
[53.09939575 350.08203125]
[60.35747147 363.47009277]
[61.53615952 378.65332031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 75]
[11 74]
[12 73]
[13 72]
[16 69]
[17 68]
[18 67]
[20 65]
[21 64]
[28 60]
[29 59]
[30 58]
[32 57]
[34 56]
[35 55]
[37 53]
[38 52]
[39 51]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
