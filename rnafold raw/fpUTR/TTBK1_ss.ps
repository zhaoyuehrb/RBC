%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCGCAGCCGCAGCGGGCACAGAGCAGGUAGAUGGCCCCCUCAGGGCAGGCCCGGCGGACACCCCUCCCUCUGGCUGGCGG\
) } def
/len { sequence length } bind def

/coor [
[89.73032379 306.20639038]
[73.43428802 304.37023926]
[67.12529755 289.23324585]
[77.29349518 276.36703491]
[78.97296143 261.46133423]
[80.65242767 246.55566406]
[82.33190155 231.64997864]
[83.73235321 216.71549988]
[84.85330200 201.75744629]
[85.97425842 186.79939270]
[87.09520721 171.84132385]
[88.21615601 156.88327026]
[81.45159912 143.61337280]
[90.19855499 130.43000793]
[91.31950378 115.47194672]
[82.27171326 99.33665466]
[92.50000000 83.92262268]
[92.50000000 68.92262268]
[92.50000000 53.92262268]
[78.50568390 48.05450058]
[67.85289764 37.30456543]
[62.14283752 23.33284760]
[62.21679688 8.28020287]
[68.03237152 -5.55973768]
[78.67464447 -16.09004593]
[92.50000000 -21.72820473]
[92.50000000 -36.72820282]
[82.89602661 -52.30447006]
[91.96421051 -67.20487976]
[91.40334320 -82.19438934]
[90.84247589 -97.18389893]
[81.09309387 -102.48390961]
[74.58287048 -111.36882019]
[72.49830627 -122.10086823]
[75.16867065 -132.61763000]
[82.01625061 -140.92837524]
[91.67957306 -145.49082947]
[92.80052948 -160.44888306]
[93.92147827 -175.40695190]
[95.04242706 -190.36500549]
[85.70973206 -203.41415405]
[90.23154449 -218.80676270]
[105.13912964 -224.73495483]
[118.99666595 -216.65112305]
[121.17382812 -200.75648499]
[110.00048828 -189.24404907]
[108.87953949 -174.28599548]
[107.75858307 -159.32794189]
[106.63763428 -144.36987305]
[120.42890167 -130.92411804]
[120.26949310 -111.36882019]
[105.83198547 -97.74476624]
[106.39285278 -82.75525665]
[106.95372009 -67.76574707]
[115.68402100 -59.17229843]
[116.13279724 -46.52600479]
[107.50000000 -36.72820282]
[107.50000000 -21.72820473]
[121.32535553 -16.09004593]
[131.96763611 -5.55973768]
[137.78320312 8.28020287]
[137.85716248 23.33284760]
[132.14710999 37.30456543]
[121.49431610 48.05450058]
[107.50000000 53.92262268]
[107.50000000 68.92262268]
[107.50000000 83.92262268]
[115.13867950 90.75053406]
[117.72828674 100.66334534]
[114.40513611 110.35491180]
[106.27756500 116.59289551]
[105.15661621 131.55094910]
[111.84098816 145.89074707]
[103.17421722 158.00422668]
[102.05326080 172.96228027]
[100.93231201 187.92033386]
[99.81136322 202.87838745]
[98.69040680 217.83645630]
[101.21289062 226.87831116]
[97.23757935 233.32945251]
[95.55811310 248.23513794]
[93.87864685 263.14080811]
[92.19918060 278.04650879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 83]
[5 82]
[6 81]
[7 80]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[14 72]
[15 71]
[17 67]
[18 66]
[19 65]
[26 58]
[27 57]
[29 54]
[30 53]
[31 52]
[37 49]
[38 48]
[39 47]
[40 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
