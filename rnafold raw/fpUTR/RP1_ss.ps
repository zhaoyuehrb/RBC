%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUACUGAGAAUAAAUCCAAAGACAUUAGUUUCUUUGCACGAAAUGAGGUUACAUAUCCAGUGACAUUUAUUUGAGCUAUUUAAACAACUUAAACAUCUUUUUCUUUUCUUAAUAAGGGACGUUUCAAGUUGUGGUCUCAGCCAAA\
) } def
/len { sequence length } bind def

/coor [
[88.07205200 303.65939331]
[74.46701813 296.74087524]
[65.21797943 284.59927368]
[62.16133118 269.64535522]
[65.90396881 254.84822083]
[75.70279694 243.14584351]
[89.61224365 236.86174011]
[89.92848969 221.86506653]
[90.24472809 206.86840820]
[90.56097412 191.87173462]
[90.87722015 176.87507629]
[91.19346619 161.87840271]
[83.68072510 160.33384705]
[76.41373444 157.88073730]
[69.50193024 154.55603027]
[63.04938126 150.40975952]
[57.15326691 145.50439453]
[51.90236664 139.91377258]
[47.37575912 133.72212219]
[43.64160156 127.02264404]
[29.43553543 131.83799744]
[15.22946644 136.65335083]
[1.02339792 141.46870422]
[-13.18267059 146.28405762]
[-27.38873863 151.09941101]
[-31.86794281 165.95593262]
[-44.24447632 175.31547546]
[-59.75931168 175.57910156]
[-72.44667816 166.64543152]
[-77.42802429 151.94966125]
[-72.78791809 137.14259338]
[-60.31058121 127.91786194]
[-44.79379654 127.82256317]
[-32.20409012 136.89334106]
[-17.99802208 132.07798767]
[-3.79195428 127.26263428]
[10.41411400 122.44728088]
[24.62018204 117.63192749]
[38.82625198 112.81657410]
[37.49814606 100.10150909]
[38.78494263 87.38220215]
[42.63280869 75.19078064]
[48.88075638 64.03730774]
[57.26739120 54.38842010]
[48.39951706 42.29045105]
[39.53164291 30.19248390]
[30.66377068 18.09451675]
[21.79589653 5.99654913]
[12.92802334 -6.10141850]
[4.06015015 -18.19938660]
[-4.93476772 -30.20319557]
[-14.05573082 -42.11151505]
[-23.17669487 -54.01983261]
[-32.29765701 -65.92814636]
[-41.41862106 -77.83646393]
[-57.04772186 -78.35149384]
[-68.65467072 -88.83065033]
[-70.75903320 -104.32599640]
[-62.36717987 -117.52110291]
[-47.44149399 -122.18564606]
[-33.02943039 -116.11716461]
[-25.93591881 -102.18102264]
[-29.51030350 -86.95742798]
[-20.38933945 -75.04911041]
[-11.26837635 -63.14079285]
[-2.14741349 -51.23247528]
[6.97354984 -39.32415771]
[13.58245754 -35.90328979]
[16.15811729 -27.06725883]
[25.02599144 -14.96929169]
[33.89386368 -2.87132430]
[42.76173782 9.22664356]
[51.62961197 21.32461166]
[60.49748611 33.42257690]
[69.36535645 45.52054596]
[78.49064636 41.31576157]
[88.17178345 38.62748718]
[98.15857697 37.52519608]
[108.19296265 38.03736877]
[118.01561737 40.15077591]
[127.37271881 43.81079865]
[136.02246094 48.92285919]
[143.74131775 55.35484695]
[150.32980347 62.94055176]
[155.61767578 71.48394012]
[159.46829224 80.76423645]
[161.78213501 90.54162598]
[176.77462769 90.06730652]
[191.76712036 89.59297943]
[206.75962830 89.11865997]
[221.75212097 88.64433289]
[236.74462891 88.17001343]
[251.73712158 87.69569397]
[266.72378540 87.06334686]
[281.70294189 86.27304077]
[296.68212891 85.48273468]
[311.66128540 84.69243622]
[325.03463745 76.23879242]
[338.15188599 83.29478455]
[353.13104248 82.50448608]
[368.11022949 81.71417999]
[383.08938599 80.92387390]
[398.06854248 80.13357544]
[413.04772949 79.34326935]
[418.88885498 65.24206543]
[430.27551270 55.07809448]
[444.94692993 50.86941910]
[459.99002075 53.45167542]
[472.41799927 62.31215668]
[479.76327515 75.69160461]
[480.56744385 90.93352509]
[474.67080688 105.01161957]
[463.24420166 115.13066864]
[448.55633545 119.28153992]
[433.52352905 116.64006042]
[421.13055420 107.73070526]
[413.83801270 94.32243347]
[398.85885620 95.11273956]
[383.87969971 95.90304565]
[368.90051270 96.69334412]
[353.92135620 97.48365021]
[338.94219971 98.27394867]
[326.64025879 106.67106628]
[312.45159912 99.67160034]
[297.47241211 100.46190643]
[282.49325562 101.25220490]
[267.51409912 102.04251099]
[260.95584106 105.55954742]
[252.21144104 102.68818665]
[237.21894836 103.16251373]
[222.22644043 103.63683319]
[207.23394775 104.11116028]
[192.24145508 104.58547974]
[177.24894714 105.05979919]
[162.25645447 105.53412628]
[153.29626465 132.64965820]
[133.20970154 152.94911194]
[106.19013214 162.19465637]
[105.87388611 177.19131470]
[105.55764008 192.18798828]
[105.24139404 207.18464661]
[104.92515564 222.18132019]
[104.60890961 237.17797852]
[118.24107361 244.04287720]
[127.53785706 256.14794922]
[130.65336609 271.08969116]
[126.96903229 285.90145874]
[117.21636963 297.64236450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 143]
[8 142]
[9 141]
[10 140]
[11 139]
[12 138]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[87 135]
[88 134]
[89 133]
[90 132]
[91 131]
[92 130]
[93 129]
[94 127]
[95 126]
[96 125]
[97 124]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
