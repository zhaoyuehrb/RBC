%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCUGCCACGAGGCCGCAGUAUAACCGCGUGGCCCGCGCGCGCGCUUCCCUCCCGGCGCAGUCACCGGCGCGGUCU\
) } def
/len { sequence length } bind def

/coor [
[-22.56202698 202.41238403]
[-27.44371796 217.46162415]
[-42.04172516 220.41923523]
[-53.05656433 230.60124207]
[-64.07140350 240.78326416]
[-75.08624268 250.96527100]
[-86.10107422 261.14727783]
[-86.47103119 276.94723511]
[-97.96240997 287.79730225]
[-113.75756836 287.26031494]
[-124.48553467 275.65487671]
[-123.78158569 259.86627197]
[-112.06336975 249.26161194]
[-96.28308868 250.13244629]
[-85.26824951 239.95042419]
[-74.25341034 229.76841736]
[-63.23857498 219.58641052]
[-52.22373581 209.40440369]
[-48.12990189 195.08343506]
[-32.74403763 191.39755249]
[-36.22137451 180.33058167]
[-35.18350983 168.72421265]
[-29.74926567 158.35722351]
[-20.71431541 150.83386230]
[-9.43490410 147.33560181]
[2.37565970 148.43580627]
[12.90724277 154.00608826]
[25.04249763 145.18930054]
[37.17775345 136.37252808]
[49.31300735 127.55574799]
[61.44826126 118.73896790]
[73.58351898 109.92218781]
[85.71877289 101.10540771]
[91.58059692 88.41168213]
[105.46444702 86.75933838]
[105.59590912 71.35514832]
[114.66661072 59.12503052]
[129.02966309 54.63429642]
[143.11430359 59.40510941]
[155.24955750 50.58833313]
[167.20938110 41.53499222]
[178.98913574 32.24858475]
[190.76889038 22.96217346]
[202.54862976 13.67576504]
[207.51885986 5.68756914]
[214.97807312 4.26692438]
[227.11332703 -4.54985428]
[226.12995911 -19.94584465]
[233.64636230 -33.41830826]
[247.26408386 -40.66823196]
[262.63775635 -39.38218689]
[274.86169434 -29.97055054]
[280.03527832 -15.43653965]
[276.50765991 -0.41790473]
[265.40444946 10.29296303]
[250.26869202 13.27826500]
[235.93011475 7.58540058]
[223.79486084 16.40217972]
[211.83505249 25.45551872]
[200.05529785 34.74192810]
[188.27554321 44.02833557]
[176.49578857 53.31474686]
[173.10374451 60.10829544]
[164.06634521 62.72358704]
[151.93109131 71.54036713]
[152.11601257 86.40992737]
[143.40663147 98.68228912]
[128.97210693 103.52971649]
[114.28122711 98.89459229]
[108.41940308 111.58831787]
[94.53555298 113.24066162]
[82.40029907 122.05744171]
[70.26503754 130.87422180]
[58.12978745 139.69099426]
[45.99452972 148.50778198]
[33.85927582 157.32455444]
[21.72402191 166.14134216]
[22.72999001 184.95787048]
[12.53705978 200.63395691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[27 77]
[28 76]
[29 75]
[30 74]
[31 73]
[32 72]
[33 71]
[35 69]
[39 65]
[40 64]
[41 62]
[42 61]
[43 60]
[44 59]
[46 58]
[47 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
