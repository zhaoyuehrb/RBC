%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACGGCGCCCGCCCCCGCGCGCCCGGCGCCUCCCUCACGCCCGCCCUCCUUGCCGCCCAGCCGGUCCAGGCCUCUGGCGAAC\
) } def
/len { sequence length } bind def

/coor [
[8.05586243 171.62268066]
[-5.70452929 172.38079834]
[-19.09058762 169.17651367]
[-30.98675156 162.28691101]
[-40.40448380 152.29571533]
[-46.56443024 140.04397583]
[-61.35744095 142.52728271]
[-76.15045166 145.01058960]
[-90.94346619 147.49391174]
[-105.73647308 149.97721863]
[-120.52948761 152.46052551]
[-135.16217041 155.75971985]
[-149.58955383 159.86465454]
[-164.01693726 163.96960449]
[-171.48744202 177.89680481]
[-186.64184570 182.38232422]
[-200.48928833 174.76498413]
[-204.81433105 159.56402588]
[-197.05101013 145.79788208]
[-181.80516052 141.63378906]
[-168.12188721 149.54222107]
[-153.69448853 145.43727112]
[-139.26710510 141.33233643]
[-137.20187378 138.19293213]
[-133.39134216 136.00631714]
[-128.35656738 135.64021301]
[-123.01279449 137.66751099]
[-108.21977997 135.18420410]
[-93.42677307 132.70089722]
[-78.63375854 130.21759033]
[-63.84075165 127.73427582]
[-49.04773712 125.25096893]
[-46.45893478 109.21172333]
[-38.60017014 94.96324921]
[-26.37743568 84.18338776]
[-11.21174145 78.14807892]
[5.12609291 77.58034515]
[20.72219467 82.56371307]
[33.74383545 92.53043365]
[42.65481186 106.32611847]
[57.22402573 102.75708771]
[71.79324341 99.18806458]
[86.36245728 95.61903381]
[96.59182739 86.08742523]
[110.06851196 89.81175232]
[114.38584900 76.57870483]
[124.63956451 67.32719421]
[138.03225708 64.43493652]
[150.98219299 68.56433105]
[160.08123779 78.51461029]
[174.77238464 75.48637390]
[189.46353149 72.45813751]
[202.78326416 59.90726089]
[219.20771790 65.78641510]
[233.77694702 62.21739197]
[248.34616089 58.64836121]
[262.91537476 55.07933426]
[270.89541626 41.43769073]
[286.20520020 37.51520920]
[299.76171875 45.63903046]
[303.52212524 60.98943710]
[295.25540161 74.45930481]
[279.86611938 78.05719757]
[266.48440552 69.64855194]
[251.91517639 73.21757507]
[237.34596252 76.78660583]
[222.77674866 80.35563660]
[216.12055969 90.63607025]
[203.82759094 93.62535858]
[192.49176025 87.14928436]
[177.80061340 90.17752075]
[163.10946655 93.20575714]
[156.91307068 108.28674316]
[142.85317993 116.86271667]
[126.28032684 115.44184113]
[113.63754272 104.38096619]
[103.40817261 113.91257477]
[89.93148804 110.18824768]
[75.36227417 113.75727844]
[60.79305649 117.32630920]
[46.22383881 120.89533234]
[45.31203079 134.73173523]
[40.48779678 147.71372986]
[32.16312408 158.76062012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 23]
[13 22]
[14 21]
[40 81]
[41 80]
[42 79]
[43 78]
[45 76]
[50 72]
[51 71]
[52 70]
[54 67]
[55 66]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
