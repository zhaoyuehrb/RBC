%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGGGUUCGCUUGCCUCGUCAGCGUCCGCGUUUUUCCCGGCCCCCCCCAACCCCCCCGGACAGGACCCCCUUGAGCUUGUCCCUCAGCUGCCACC\
) } def
/len { sequence length } bind def

/coor [
[211.94979858 166.86341858]
[198.65080261 159.92535400]
[185.35180664 152.98727417]
[172.05282593 146.04919434]
[158.75382996 139.11112976]
[145.45484924 132.17304993]
[132.15585327 125.23497772]
[111.31314087 139.27870178]
[86.19351196 138.47315979]
[66.29340363 123.12289429]
[52.57721329 129.19464111]
[38.86102295 135.26640320]
[25.14483452 141.33815002]
[15.65771389 153.99931335]
[0.88780552 152.07601929]
[-12.82838345 158.14776611]
[-24.86442947 170.08802795]
[-39.66997528 161.82775879]
[-35.83109283 145.31414795]
[-18.90013313 144.43157959]
[-5.18394470 138.35983276]
[3.32210326 126.13294983]
[19.07308578 127.62195587]
[32.78927612 121.55020905]
[46.50546265 115.47845459]
[60.22165298 109.40670776]
[59.46012878 94.77296448]
[63.90866470 80.81098175]
[52.18119049 71.45863342]
[40.45372009 62.10628510]
[24.84018326 59.55128479]
[19.71372795 45.56669617]
[3.67471933 45.92688751]
[-6.49602842 33.51981735]
[-2.99638724 17.86312103]
[11.48901749 10.96728230]
[25.84822273 18.12219429]
[29.06607628 33.83922195]
[43.84078598 35.72528076]
[49.80606842 50.37881470]
[61.53353882 59.73115921]
[73.26100922 69.08351135]
[78.94746399 64.96296692]
[85.25528717 61.87656403]
[91.99831390 59.91539001]
[98.97750854 59.13733292]
[105.98689270 59.56536102]
[112.81955719 61.18683243]
[119.27385712 63.95389938]
[125.15927124 67.78488159]
[130.30210876 72.56671143]
[134.55055237 78.15824127]
[137.77922058 84.39444733]
[139.89282227 91.09126282]
[140.82896423 98.05101776]
[140.56002808 105.06829834]
[139.09393311 111.93598938]
[152.39291382 118.87406158]
[165.69190979 125.81213379]
[178.99089050 132.75021362]
[192.28988647 139.68827820]
[205.58888245 146.62635803]
[218.88786316 153.56443787]
[233.83972168 154.76528931]
[248.07556152 150.03866577]
[262.31140137 145.31204224]
[272.79586792 132.70219421]
[288.91055298 135.74339294]
[294.07806396 151.30709839]
[282.98248291 163.38270569]
[267.03802490 159.54788208]
[252.80218506 164.27450562]
[238.56634521 169.00112915]
[237.36933899 176.40498352]
[234.97534180 191.21270752]
[233.77835083 198.61657715]
[245.79954529 207.58824158]
[257.82077026 216.55989075]
[269.84194946 225.53155518]
[284.61932373 220.79771423]
[299.34637451 225.68583679]
[308.36026001 238.31632996]
[308.19494629 253.83251953]
[298.91403198 266.26812744]
[284.08618164 270.84136963]
[269.41302490 265.79379272]
[260.53668213 253.06623840]
[260.87030029 237.55274963]
[248.84909058 228.58110046]
[236.82789612 219.60943604]
[224.80668640 210.63778687]
[218.30670166 205.98701477]
[213.20315552 200.43304443]
[209.59097290 194.32473755]
[207.48577881 188.01223755]
[206.82723999 181.83010864]
[207.48570251 176.08161926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[7 57]
[10 26]
[11 25]
[12 24]
[13 23]
[15 21]
[16 20]
[28 42]
[29 41]
[30 40]
[32 38]
[64 73]
[65 72]
[66 71]
[76 91]
[77 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
