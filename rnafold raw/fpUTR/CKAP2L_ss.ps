%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAGGACGCGUGGACGCGCGGCACGCCGGUCCUGGCUACAGGCGCGGCGUUUGAAGAAAAACUGUCACUGAAGAGUC\
) } def
/len { sequence length } bind def

/coor [
[98.93479919 159.90417480]
[90.92581177 159.22248840]
[83.08013916 157.47488403]
[75.53900909 154.69281006]
[68.43814087 150.92634583]
[61.90533829 146.24328613]
[56.05818939 140.72789001]
[51.00193024 134.47946167]
[46.82757187 127.61045074]
[32.75469971 132.80220032]
[18.68183136 137.99395752]
[4.60896063 143.18571472]
[-9.46390915 148.37747192]
[-19.52844620 161.32495117]
[-35.73434830 158.81480408]
[-41.41036987 143.42927551]
[-30.71751213 130.99565125]
[-14.65566540 134.30459595]
[-0.58279520 129.11285400]
[13.49007511 123.92108917]
[27.56294441 118.72933197]
[41.63581467 113.53758240]
[42.59748459 82.83621979]
[58.64676666 56.64617538]
[85.56528473 41.85119629]
[83.80222321 26.95517159]
[82.03916168 12.05914402]
[80.27610016 -2.83688283]
[78.51303864 -17.73291016]
[76.74998474 -32.62893677]
[64.62238312 -42.40437317]
[63.04659271 -57.53617859]
[72.44071198 -69.03774261]
[70.67765045 -83.93376923]
[68.91459656 -98.82979584]
[67.15153503 -113.72582245]
[56.91131592 -126.53480530]
[63.13529205 -141.70695496]
[79.42076874 -143.63447571]
[89.01464081 -130.33448792]
[82.04756165 -115.48888397]
[83.81062317 -100.59285736]
[85.57367706 -85.69683075]
[87.33673859 -70.80080414]
[99.15629578 -61.81004333]
[101.15648651 -46.72846985]
[91.64601135 -34.39199829]
[93.40907288 -19.49596977]
[95.17212677 -4.59994364]
[96.93518829 10.29608345]
[98.69824982 25.19211006]
[100.46131134 40.08813858]
[109.22777557 40.80124664]
[117.79537964 42.79013443]
[125.97947693 46.01193619]
[133.60369873 50.39722061]
[140.50373840 55.85147858]
[146.53088379 62.25717163]
[151.55526733 69.47624969]
[155.46858215 77.35313416]
[158.18652344 85.71807861]
[159.65049744 94.39080811]
[159.82894897 103.18441772]
[158.71806335 111.90940857]
[156.34175110 120.37773132]
[152.75122070 128.40690613]
[148.02388000 135.82389832]
[142.26158142 142.46884155]
[135.58851624 148.19856262]
[142.91783142 161.28599548]
[150.24716187 174.37344360]
[164.60966492 182.28863525]
[164.66560364 198.68768311]
[150.35740662 206.70065308]
[136.40414429 198.08448792]
[137.15971375 181.70275879]
[129.83039856 168.61532593]
[122.50108337 155.52787781]
[114.86580658 158.04008484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[33 44]
[34 43]
[35 42]
[36 41]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
