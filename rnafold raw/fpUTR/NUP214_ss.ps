%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCACCAAAGCGCGCCGGAAAUGCGAGGUCAACUGCGCGCCGCUGGCGCUGAGGGGAGGAAGUUUGCUGUCGAGCGGCCUGGGUUCCGUGGGCAAGGCCGUGGGAGGCAGCGUUGGCUGCUUCGACACACUGAGGGCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[-75.72597504 145.52943420]
[-87.19204712 156.43078613]
[-101.43424988 152.07084656]
[-115.97103882 155.76971436]
[-123.58307648 160.95492554]
[-130.86285400 159.38760376]
[-145.47636414 162.77066040]
[-148.87426758 176.38107300]
[-157.77485657 187.13804626]
[-170.38818359 192.96809387]
[-184.21611023 192.77967834]
[-196.54707336 186.66699219]
[-204.98777771 175.88038635]
[-219.67115784 178.94606018]
[-234.35453796 182.01173401]
[-249.03791809 185.07740784]
[-263.72131348 188.14308167]
[-278.40469360 191.20875549]
[-293.08807373 194.27442932]
[-299.52416992 208.27023315]
[-312.81204224 215.70567322]
[-327.75350952 213.91221619]
[-338.64352417 203.78573608]
[-353.32690430 206.85140991]
[-368.01028442 209.91708374]
[-382.69366455 212.98275757]
[-397.34298706 216.20730591]
[-411.95648193 219.59037781]
[-421.63549805 232.38476562]
[-437.67633057 232.65054321]
[-447.77389526 220.18382263]
[-444.18212891 204.54800415]
[-429.65640259 197.73754883]
[-415.33956909 204.97685242]
[-400.72604370 201.59379578]
[-394.87561035 196.98680115]
[-385.75933838 198.29937744]
[-371.07595825 195.23370361]
[-356.39257812 192.16802979]
[-341.70919800 189.10235596]
[-335.78085327 175.46444702]
[-322.80520630 167.84230042]
[-307.65228271 169.33973694]
[-296.15374756 179.59104919]
[-281.47036743 176.52537537]
[-266.78698730 173.45970154]
[-252.10359192 170.39402771]
[-237.42021179 167.32835388]
[-222.73683167 164.26268005]
[-208.05345154 161.19700623]
[-203.40304565 145.75727844]
[-191.54716492 134.69027710]
[-175.64166260 131.07073975]
[-159.98562622 135.97360229]
[-148.85943604 148.15715027]
[-134.24591064 144.77407837]
[-119.66990662 141.23291016]
[-105.13311005 137.53405762]
[-94.70680237 126.89725494]
[-79.42483521 130.99263000]
[-76.62347412 119.09514618]
[-68.96143341 109.47914124]
[-57.85994720 104.02766418]
[-45.42110825 103.84195709]
[-34.02988815 109.01953888]
[-25.89684486 118.62368011]
[-11.21346569 115.55800629]
[3.46991467 112.49233246]
[18.15329552 109.42666626]
[32.83667374 106.36099243]
[47.52005386 103.29531860]
[62.20343399 100.22964478]
[70.70684814 76.11392975]
[92.61753082 62.93070984]
[117.90711975 66.71384430]
[127.49349976 55.17689133]
[137.07987976 43.63993454]
[146.66625977 32.10297775]
[156.25263977 20.56602287]
[165.83901978 9.02906704]
[175.42539978 -2.50788879]
[175.02716064 -15.44829750]
[183.31089783 -24.86899567]
[195.39622498 -26.05002213]
[205.23030090 -37.37658691]
[215.06437683 -48.70315170]
[224.89843750 -60.02971649]
[230.71702576 -75.95391846]
[247.62965393 -74.77098083]
[251.17483521 -58.19183350]
[236.22500610 -50.19564438]
[226.39093018 -38.86907959]
[216.55686951 -27.54251671]
[206.72279358 -16.21595192]
[204.35671997 1.14090228]
[186.96234131 7.07848978]
[177.37597656 18.61544609]
[167.78959656 30.15240097]
[158.20321655 41.68935776]
[148.61683655 53.22631073]
[139.03045654 64.76326752]
[129.44407654 76.30022430]
[134.27165222 84.05989838]
[137.09570312 92.75143433]
[137.75114441 101.86672974]
[152.28793335 105.56558990]
[166.82472229 109.26445007]
[181.36152649 112.96331024]
[195.89831543 116.66217041]
[210.43511963 120.36103058]
[224.97190857 124.05989838]
[239.50871277 127.75875854]
[255.13893127 122.79607391]
[267.06781006 134.04925537]
[263.02392578 149.94198608]
[247.16728210 154.12519836]
[235.80984497 142.29554749]
[221.27305603 138.59669495]
[206.73625183 134.89782715]
[192.19946289 131.19897461]
[177.66265869 127.50010681]
[163.12586975 123.80124664]
[148.58906555 120.10238647]
[134.05227661 116.40351868]
[130.32818604 122.55734253]
[125.50576019 127.89424896]
[119.75963593 132.22094727]
[113.29790497 135.38076782]
[106.35459137 137.25926208]
[99.18114471 137.78839111]
[92.03734589 136.94900513]
[85.18192291 134.77151489]
[78.86314392 131.33474731]
[73.30983734 126.76318359]
[68.72312164 121.22238922]
[65.26911163 114.91302490]
[50.58572769 117.97869873]
[35.90234756 121.04437256]
[21.21896744 124.11003876]
[6.53558826 127.17571259]
[-8.14779186 130.24139404]
[-22.83117104 133.30706787]
[-29.71345901 150.01521301]
[-45.08362198 159.21644592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[3 58]
[4 57]
[6 56]
[7 55]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[23 40]
[24 39]
[25 38]
[26 37]
[27 35]
[28 34]
[66 142]
[67 141]
[68 140]
[69 139]
[70 138]
[71 137]
[72 136]
[75 102]
[76 101]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[84 94]
[85 93]
[86 92]
[87 91]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
