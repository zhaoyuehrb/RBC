%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCCCGCCCGCCGCCAGCCGAGCAGGGCUUGCGGAUCGGAGGCGGUCACGCUCCGACCUCCUCGACCGCCGCCCGCCGAGCCAGGCAGGAGCAACGCGCGCGGGUCCGUUCUGCUGCCACCCUCCCAGGUCUCGGCCGUCCAGCCGAUCUGACAGCCGGCG\
) } def
/len { sequence length } bind def

/coor [
[82.04224396 124.57273102]
[73.17903137 136.67411804]
[64.31582642 148.77551270]
[55.45262146 160.87689209]
[46.58941269 172.97828674]
[37.72620773 185.07966614]
[35.81409454 200.78489685]
[22.05166054 206.48092651]
[13.18845272 218.58230591]
[11.27633858 234.28755188]
[-2.48609519 239.98356628]
[-11.34930229 252.08496094]
[-13.26141644 267.79019165]
[-27.02384949 273.48620605]
[-28.26163101 289.83859253]
[-43.15729523 296.69796753]
[-56.38745499 287.00805664]
[-54.34206009 270.73693848]
[-39.12523651 264.62301636]
[-37.84708023 249.78334045]
[-23.45068932 243.22175598]
[-14.58748245 231.12036133]
[-13.30932331 216.28070068]
[1.08706594 209.71910095]
[9.95027256 197.61772156]
[11.22843075 182.77806091]
[25.62482071 176.21646118]
[34.48802567 164.11508179]
[43.35123444 152.01368713]
[52.21443939 139.91230774]
[61.07764816 127.81091309]
[69.94085693 115.70952606]
[66.10484314 101.20832062]
[52.41729355 95.07228851]
[38.72973633 88.93625641]
[25.04218292 82.80023193]
[15.88399506 82.13700867]
[11.15296936 76.41333771]
[-2.41453838 70.01625061]
[-15.98204613 63.61916351]
[-25.12585068 62.78064346]
[-29.74637222 56.96739578]
[-43.18885422 50.31159973]
[-56.63134003 43.65579987]
[-72.43177032 44.46629333]
[-80.40431976 31.88504791]
[-93.84680176 25.22924995]
[-107.28928375 18.57345200]
[-120.73177338 11.91765499]
[-134.98150635 18.35808754]
[-150.02320862 14.08244514]
[-158.75465393 1.10955596]
[-157.05311584 -14.43517971]
[-145.72201538 -25.21201134]
[-130.11154175 -26.13245010]
[-117.59249115 -16.76189232]
[-114.07597351 -1.52482831]
[-100.63349152 5.13096905]
[-87.19100952 11.78676701]
[-73.74851990 18.44256401]
[-58.90958786 17.15600586]
[-49.97554016 30.21331787]
[-36.53305817 36.86911392]
[-23.09057426 43.52491379]
[-9.58495903 50.05165482]
[3.98254895 56.44874191]
[17.55005646 62.84582901]
[31.17821312 69.11267853]
[44.86576843 75.24870300]
[58.55332184 81.38473511]
[72.24087524 87.52076721]
[81.36017609 77.68333435]
[93.31922150 73.09815216]
[105.47029114 74.21294403]
[115.35891724 80.27075195]
[121.21970367 89.56948853]
[136.08505249 87.56412506]
[150.95039368 85.55876160]
[165.81575012 83.55339813]
[180.68109131 81.54803467]
[188.81187439 77.28157806]
[195.85006714 79.64945221]
[210.75109863 77.92919922]
[218.96432495 57.33303070]
[240.96440125 46.78886032]
[266.43316650 54.54067230]
[277.24099731 44.13918304]
[288.04882812 33.73769760]
[298.85665894 23.33621025]
[309.66445923 12.93472195]
[314.24249268 -2.20965815]
[328.77807617 -5.46027040]
[339.58590698 -15.86175728]
[343.62451172 -24.10807800]
[350.70178223 -26.35650826]
[361.70684814 -36.54906464]
[372.71194458 -46.74162292]
[383.71701050 -56.93417740]
[388.58428955 -71.98809052]
[403.17947388 -74.95967865]
[414.18453979 -85.15222931]
[418.51303101 -100.96982574]
[434.44219971 -104.86775208]
[445.58547974 -92.83615112]
[440.47961426 -77.25211334]
[424.37710571 -74.14715576]
[413.37200928 -63.95459747]
[409.29190063 -49.62972641]
[393.90957642 -45.92909622]
[382.90447998 -35.73654175]
[371.89941406 -25.54398537]
[360.89434814 -15.35142803]
[349.98739624 -5.05393362]
[339.17956543 5.34755373]
[335.37457275 19.74794960]
[320.06594849 23.74254608]
[309.25814819 34.14403152]
[298.45031738 44.54552078]
[287.64248657 54.94701004]
[276.83465576 65.34849548]
[277.19369507 72.83989716]
[288.45993042 62.93674088]
[303.22689819 65.57035828]
[310.37506104 78.75761414]
[304.52178955 92.56845093]
[290.07464600 96.60324860]
[277.91177368 87.82270050]
[278.27081299 95.31410217]
[290.02383423 104.63431549]
[301.77685547 113.95453644]
[313.52987671 123.27475739]
[325.28289795 132.59497070]
[337.03591919 141.91519165]
[343.58337402 143.27386475]
[347.79956055 147.17161560]
[349.05160522 151.82444763]
[360.43899536 161.58799744]
[371.82641602 171.35154724]
[387.56317139 169.89199829]
[399.66925049 180.05163574]
[400.96234131 195.80294800]
[390.67526245 207.80093384]
[374.91119385 208.92741394]
[363.02261353 198.51408386]
[362.06286621 182.73895264]
[350.67544556 172.97540283]
[339.28805542 163.21185303]
[327.71569824 153.66821289]
[315.96267700 144.34799194]
[304.20965576 135.02778625]
[292.45663452 125.70755768]
[280.70361328 116.38734436]
[268.95059204 107.06712341]
[252.03445435 116.11006165]
[234.05053711 115.52254486]
[219.78729248 106.63280487]
[212.47135925 92.83023071]
[197.57032776 94.55048370]
[182.68644714 96.41337585]
[167.82110596 98.41873932]
[152.95576477 100.42410278]
[138.09040833 102.42946625]
[123.22506714 104.43482971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[8 25]
[9 24]
[11 22]
[12 21]
[14 19]
[33 71]
[34 70]
[35 69]
[36 68]
[38 67]
[39 66]
[40 65]
[42 64]
[43 63]
[44 62]
[46 60]
[47 59]
[48 58]
[49 57]
[76 163]
[77 162]
[78 161]
[79 160]
[80 159]
[82 158]
[83 157]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[92 114]
[93 113]
[95 112]
[96 111]
[97 110]
[98 109]
[100 107]
[101 106]
[128 153]
[129 152]
[130 151]
[131 150]
[132 149]
[133 148]
[136 147]
[137 146]
[138 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
