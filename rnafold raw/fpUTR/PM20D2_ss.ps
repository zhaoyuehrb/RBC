%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCCUGGAGGCCUCUGGGCGCGUGCGCGGGCGGUCGCUACCUGCGGCCGAGCCAGGGAGCGAGAGGGCGCAGAGGGCAGCGGGCUUGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[140.84614563 337.46066284]
[137.44000244 322.85250854]
[134.03385925 308.24435425]
[129.35855103 302.33074951]
[130.76356506 293.10263062]
[127.83721161 278.39083862]
[124.91085815 263.67907715]
[121.98450470 248.96728516]
[109.49597931 240.93159485]
[106.31866455 226.05343628]
[114.83191681 213.00881958]
[104.76032257 202.03556824]
[109.65666962 186.99108887]
[106.73031616 172.27931213]
[103.80396271 157.56752014]
[100.87760162 142.85574341]
[97.95124817 128.14396667]
[95.02489471 113.43218994]
[85.95128632 102.79446411]
[90.26332855 89.49416351]
[87.33696747 74.78238678]
[77.05606079 62.75685120]
[82.16172028 48.76465988]
[68.22755432 42.19616318]
[60.91839218 28.83841133]
[62.85339355 13.91461277]
[73.08264923 3.12108159]
[70.15629578 -11.59069729]
[67.22994232 -26.30247688]
[63.11111069 -40.72590256]
[57.82736206 -54.76449203]
[43.34637451 -65.99134827]
[46.64553452 -83.14209747]
[40.90528107 -97.00028992]
[35.16503143 -110.85848236]
[29.42477989 -124.71667480]
[23.68452835 -138.57487488]
[17.94427681 -152.43305969]
[12.20402527 -166.29125977]
[-2.00792360 -173.73437500]
[-4.90806484 -189.51312256]
[5.72834158 -201.52337646]
[21.74195480 -200.55192566]
[30.84850121 -187.34394836]
[26.06221771 -172.03150940]
[31.80246925 -158.17330933]
[37.54272079 -144.31512451]
[43.28297424 -130.45692444]
[49.02322388 -116.59873199]
[54.76347733 -102.74053955]
[60.50372696 -88.88234711]
[71.65287781 -83.88396454]
[76.48897552 -72.22544098]
[71.86595154 -60.04824448]
[77.14970398 -46.00965500]
[79.49981689 -45.09260178]
[81.64771271 -43.22247314]
[83.24726105 -40.46683502]
[83.98092651 -37.01000595]
[83.59696198 -33.14078522]
[81.94171906 -29.22883224]
[84.86807251 -14.51705265]
[87.79443359 0.19472678]
[101.37553406 6.25208187]
[108.87433624 19.29938126]
[107.23333740 34.43743134]
[96.87350464 45.83830261]
[106.94509888 56.81155396]
[102.04875183 71.85603333]
[104.97510529 86.56781006]
[114.04871368 97.20553589]
[109.73667145 110.50583649]
[112.66303253 125.21761322]
[115.58938599 139.92939758]
[118.51573944 154.64117432]
[121.44209290 169.35295105]
[124.36844635 184.06472778]
[134.64935303 196.09027100]
[129.54370117 210.08245850]
[142.40087891 218.87623596]
[145.15904236 233.83776855]
[136.69627380 246.04092407]
[139.62263489 260.75271606]
[142.54899597 275.46447754]
[145.47534180 290.17626953]
[148.64201355 304.83819580]
[152.04815674 319.44635010]
[155.45429993 334.05450439]
[169.80285645 339.96203613]
[177.91001892 353.19281006]
[176.65844727 368.65933228]
[166.52938843 380.41439819]
[151.41766357 383.93795776]
[137.13404846 377.87512207]
[129.17088318 364.55718994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[5 85]
[6 84]
[7 83]
[8 82]
[11 79]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[20 70]
[21 69]
[23 67]
[27 63]
[28 62]
[29 61]
[30 55]
[31 54]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
