%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACACCUGUCACUGCCUAUCCUUGUCCAGGGGGGGCCCCAUCAGCCCCUCCUCAGCUGCCCAGCAAAGCAAGCAGUUAGUGGGGAGGGGAGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[92.07520294 110.67929840]
[77.90018463 115.58531952]
[63.72517776 120.49134064]
[59.11903000 135.19132996]
[46.88330078 144.25445557]
[31.83505249 144.37348938]
[19.74692917 135.71235657]
[5.57191610 140.61837769]
[-8.60309601 145.52439880]
[-22.77810860 150.43041992]
[-29.18628883 161.76216125]
[-41.23609924 165.49537659]
[-52.20348740 160.12519836]
[-66.52702332 164.57899475]
[-69.23235321 179.64352417]
[-78.63777924 191.71813965]
[-92.58201599 198.02819824]
[-107.86077881 197.12368774]
[-120.96311188 189.21246338]
[-128.87820435 176.11247253]
[-129.78721619 160.83398438]
[-123.48126221 146.88787842]
[-111.40941620 137.47888184]
[-96.34569550 134.76911926]
[-81.75162506 139.38125610]
[-70.98082733 150.25546265]
[-56.65729523 145.80166626]
[-45.57913971 132.29345703]
[-27.68412781 136.25540161]
[-13.50911522 131.34938049]
[0.66589665 126.44336700]
[14.84090900 121.53734589]
[18.98885727 107.25685120]
[30.89116478 98.04821014]
[46.11155319 97.60868835]
[58.81915665 106.31632996]
[72.99417114 101.41030884]
[87.16918182 96.50428772]
[101.00449371 90.70911407]
[114.44440460 84.04811096]
[127.88430786 77.38711548]
[129.08753967 68.71096039]
[133.67161560 61.35924530]
[140.77473450 56.56723785]
[149.12020874 55.10251999]
[157.24560547 57.14288330]
[163.75900269 62.25870514]
[177.93402100 57.35268784]
[192.10902405 52.44666672]
[206.28404236 47.54064941]
[220.45904541 42.63462830]
[234.63406372 37.72861099]
[248.80908203 32.82258987]
[262.98410034 27.91657066]
[277.15908813 23.01055145]
[291.33410645 18.10453224]
[305.25964355 12.52959442]
[318.90411377 6.29836941]
[332.54858398 0.06714445]
[346.19308472 -6.16408062]
[359.83755493 -12.39530563]
[363.10766602 -25.57454109]
[373.26260376 -34.29156494]
[386.39532471 -35.49147034]
[397.62344360 -28.95587540]
[411.45877075 -34.75105286]
[423.73208618 -46.44729233]
[438.36883545 -37.89146042]
[434.19921875 -21.45824242]
[417.25393677 -20.91573715]
[403.41864014 -15.12056065]
[397.79492188 0.64040601]
[382.24319458 7.67685890]
[366.06878662 1.24917400]
[352.42428589 7.48039913]
[338.77981567 13.71162415]
[325.13534546 19.94285011]
[311.49084473 26.17407417]
[309.92071533 29.52653694]
[306.54611206 32.21833038]
[301.72991943 33.36096954]
[296.24014282 32.27954483]
[282.06512451 37.18556213]
[267.89010620 42.09158325]
[253.71508789 46.99760056]
[239.54008484 51.90362167]
[225.36506653 56.80964279]
[211.19006348 61.71566010]
[197.01504517 66.62168121]
[182.84002686 71.52770233]
[168.66502380 76.43371582]
[156.57954407 94.29936218]
[134.54530334 90.82701874]
[121.10540009 97.48802185]
[107.66549683 104.14901733]
[106.43862915 107.16477203]
[104.00531769 109.75923920]
[100.53675079 111.45304871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[7 32]
[8 31]
[9 30]
[10 29]
[13 27]
[14 26]
[39 95]
[40 94]
[41 93]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
