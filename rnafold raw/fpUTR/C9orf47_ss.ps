%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGCGGAGAGGGACCAGGCAGGCGCCGGAGGGGACCCGCGCGGAAAAGGAAGAAGCCCAAACAAAAACGCUGUCCGGCGCCAGGCGCCCACCUGCAAGCCCAAGCCGGUGCUCGGCCAGUUACAAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[195.09211731 377.30432129]
[206.90956116 367.87884521]
[201.41386414 353.92187500]
[195.91815186 339.96490479]
[190.42245483 326.00790405]
[184.92675781 312.05093384]
[179.43106079 298.09396362]
[173.77212524 284.20236206]
[167.95074463 270.37805176]
[153.42982483 267.17169189]
[143.46345520 255.89624023]
[142.03076172 240.73706055]
[149.88981628 227.48785400]
[144.06843567 213.66354370]
[138.24705505 199.83923340]
[120.95309448 194.04776001]
[113.16513062 177.20654297]
[120.18858337 159.69061279]
[113.72562408 146.15435791]
[107.26267242 132.61810303]
[100.79971313 119.08184052]
[87.17475128 114.15165710]
[80.93174744 101.07606506]
[85.66403198 87.38111115]
[79.20107269 73.84485626]
[72.73812103 60.30860519]
[66.27516174 46.77235031]
[59.81220627 33.23609543]
[53.34925079 19.69983864]
[46.72806549 6.24027348]
[39.94956207 -7.14075327]
[23.25617409 -9.57304287]
[11.39498138 -21.33473969]
[8.87271881 -37.67972565]
[16.48269844 -52.17657471]
[9.39237118 -65.39501953]
[2.30204391 -78.61346436]
[-4.78828382 -91.83190155]
[-16.94133568 -96.33129120]
[-22.55583572 -107.56332397]
[-19.08913803 -119.21353149]
[-25.86764145 -132.59455872]
[-32.64614487 -145.97558594]
[-49.05437851 -143.76748657]
[-65.20948792 -147.27099609]
[-79.18575287 -156.05073547]
[-89.32323456 -169.04344177]
[-94.42488861 -184.68673706]
[-93.89793396 -201.10693359]
[-87.82266235 -216.34355164]
[-76.94075012 -228.58331299]
[-84.33900452 -241.63191223]
[-99.74910736 -244.28948975]
[-109.80613708 -256.26406860]
[-109.76147461 -271.90158081]
[-99.63620758 -283.81851196]
[-84.21117401 -286.38800049]
[-70.76960754 -278.39688110]
[-65.65820312 -263.61825562]
[-71.29040527 -249.03016663]
[-63.89215469 -235.98156738]
[-50.64770508 -238.90747070]
[-37.10010910 -237.96006775]
[-24.36014557 -233.20744324]
[-13.47509480 -225.03005981]
[-5.34264803 -214.09034729]
[-0.63687330 -201.27899170]
[0.24764365 -187.64248657]
[-2.77112913 -174.29760742]
[-9.45516491 -162.33998108]
[-19.26511955 -152.75408936]
[-12.48661518 -139.37306213]
[-5.70811081 -125.99203491]
[9.47017574 -117.26357269]
[8.43015957 -98.92223358]
[15.52048779 -85.70378876]
[22.61081505 -72.48534393]
[29.70114326 -59.26690292]
[43.09055328 -58.67933655]
[54.52016068 -51.47467804]
[60.92713547 -39.45640564]
[60.53180695 -25.73414230]
[53.33058929 -13.91925812]
[60.10909271 -0.53823143]
[65.99298859 4.04990387]
[66.88550568 13.23688221]
[73.34846497 26.77313805]
[79.81141663 40.30939102]
[86.27437592 53.84564590]
[92.73732758 67.38190460]
[99.20028687 80.91815948]
[112.82524872 85.84834290]
[119.06825256 98.92393494]
[114.33596802 112.61888885]
[120.79892731 126.15514374]
[127.26187897 139.69139099]
[133.72483826 153.22764587]
[145.59869385 154.96144104]
[155.03804016 162.17370605]
[159.73495483 172.95375061]
[158.61297607 184.53790283]
[152.07136536 194.01786804]
[157.89274597 207.84217834]
[163.71412659 221.66648865]
[178.68357849 225.30267334]
[188.52651978 236.92031860]
[189.62817383 251.92866516]
[181.77505493 264.55667114]
[187.59643555 278.38098145]
[193.86894226 285.15246582]
[193.38803101 292.59826660]
[198.88374329 306.55523682]
[204.37944031 320.51220703]
[209.87513733 334.46920776]
[215.37083435 348.42617798]
[220.86654663 362.38314819]
[235.93772888 361.22094727]
[250.68154907 364.55429077]
[263.78698730 372.08682251]
[274.08871460 383.14874268]
[280.67071533 396.75640869]
[282.94772339 411.69985962]
[280.71725464 426.65032959]
[274.17764282 440.27841187]
[263.91043091 451.37234497]
[250.82850647 458.94564819]
[236.09513855 462.32489014]
[221.02040100 461.20962524]
[206.94474792 455.69897461]
[195.11973572 446.28298950]
[186.59687805 433.79891968]
[182.13400269 419.35681152]
[182.12794495 404.24087524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 116]
[3 115]
[4 114]
[5 113]
[6 112]
[7 111]
[8 109]
[9 108]
[13 104]
[14 103]
[15 102]
[18 97]
[19 96]
[20 95]
[21 94]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 86]
[30 84]
[31 83]
[35 78]
[36 77]
[37 76]
[38 75]
[41 73]
[42 72]
[43 71]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
