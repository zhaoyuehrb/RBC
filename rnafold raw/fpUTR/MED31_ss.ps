%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUGCCCCGGGACCGGAAGAGGGAGCCGUGGUUUCCGGAACUUCGCCCGCGUCUCUGGGCUUUUGCUCUGUCAGGCUGGUGGCGUUUUGGUGUCUUCGUUUGUU\
) } def
/len { sequence length } bind def

/coor [
[26.56142616 269.21231079]
[18.64085960 256.47399902]
[14.53722572 242.04623413]
[14.56829357 227.04626465]
[18.73165894 212.63562012]
[26.70178223 199.93395996]
[12.86474895 205.72503662]
[-0.97228348 211.51611328]
[-10.71536064 223.98138428]
[-25.44302368 221.75759888]
[-39.28005600 227.54867554]
[-53.11708832 233.33975220]
[-59.18097305 247.68782043]
[-73.29618835 253.36367798]
[-86.93750763 247.49426270]
[-100.77454376 253.28533936]
[-105.24901581 268.26910400]
[-118.33641052 276.82797241]
[-133.85725403 274.92071533]
[-144.48306274 263.44787598]
[-145.19668579 247.82658386]
[-135.66114807 235.43272400]
[-120.37883759 232.11831665]
[-106.56561279 239.44830322]
[-92.72858429 233.65724182]
[-87.33441925 219.82110596]
[-73.38420105 213.75100708]
[-58.90816116 219.50271606]
[-45.07112885 213.71163940]
[-31.23409843 207.92056274]
[-22.48073769 195.86950684]
[-6.76335716 197.67907715]
[7.07367563 191.88800049]
[20.91070747 186.09692383]
[23.10492897 181.89712524]
[27.11269760 178.63883972]
[32.49005508 177.09872437]
[41.51923370 165.12066650]
[50.54841232 153.14259338]
[59.57759476 141.16453552]
[68.60677338 129.18647766]
[77.63594818 117.20841980]
[86.66513062 105.23036194]
[88.56179810 91.37776947]
[101.35681152 85.74046326]
[110.38598633 73.76239777]
[119.41516876 61.78433990]
[128.44435120 49.80628204]
[137.47352600 37.82822037]
[139.60194397 22.15083694]
[153.44158936 16.64506531]
[162.47077942 4.66700602]
[164.59919739 -11.01037884]
[178.43884277 -16.51614952]
[176.44067383 -31.96428871]
[185.76817322 -43.98311996]
[200.50793457 -45.79287338]
[202.63635254 -61.47026062]
[216.47599792 -66.97602844]
[225.50517273 -78.95408630]
[234.53436279 -90.93215179]
[243.56353760 -102.91020966]
[245.02661133 -119.24395752]
[260.01541138 -125.89736938]
[273.11074829 -116.02597809]
[270.84124756 -99.78462982]
[255.54159546 -93.88102722]
[246.51242065 -81.90296936]
[237.48323059 -69.92491150]
[228.45405579 -57.94684982]
[226.97146606 -43.12621689]
[212.48599243 -36.76369476]
[214.80438232 -22.09534073]
[205.81814575 -9.81926060]
[190.41690063 -7.48696947]
[188.93431091 7.33366346]
[174.44883728 13.69618511]
[165.41966248 25.67424583]
[163.93705750 40.49487686]
[149.45158386 46.85739899]
[140.42240906 58.83546066]
[131.39323425 70.81352234]
[122.36405182 82.79158020]
[113.33486938 94.76963806]
[111.43820190 108.62223053]
[98.64318848 114.25953674]
[89.61401367 126.23760223]
[80.58483124 138.21565247]
[71.55565643 150.19372559]
[62.52647400 162.17178345]
[53.49729538 174.14984131]
[44.46811676 186.12789917]
[58.74957275 181.54095459]
[73.74208832 181.06712341]
[88.28469086 184.74307251]
[101.25126648 192.28416443]
[111.63771820 203.10643005]
[118.63976288 216.37185669]
[121.71517944 231.05319214]
[120.62583160 246.01358032]
[115.45606995 260.09454346]
[106.60621643 272.20571899]
[94.76158142 281.40921021]
[80.83936310 286.99237061]
[65.91764069 288.52288818]
[51.15191650 285.88217163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 34]
[7 33]
[8 32]
[10 30]
[11 29]
[12 28]
[15 25]
[16 24]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[42 87]
[43 86]
[45 84]
[46 83]
[47 82]
[48 81]
[49 80]
[51 78]
[52 77]
[54 75]
[57 72]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
