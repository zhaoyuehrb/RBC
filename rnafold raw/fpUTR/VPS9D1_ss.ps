%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGUCCCUUCCUGCGGUCCGCUGCUCGGGCGGCUCCAGCACCAGCGCCGGCUGCGUUCCGGGCCUCCGGUCGCCCGUCCAGCCCCUCGGCUACCGCCGCCGCCUCCCCCGCUCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[91.07249451 122.30731201]
[81.43067932 133.79797363]
[71.78887177 145.28865051]
[62.14705276 156.77931213]
[52.64923477 168.38928223]
[43.29689026 180.11676025]
[33.94454193 191.84422302]
[24.59219551 203.57170105]
[15.23984814 215.29917908]
[19.49761772 230.22067261]
[14.13998413 244.78347778]
[1.22706330 253.38789368]
[-14.27586079 252.72535706]
[-26.40759850 243.05062866]
[-30.50325012 228.08381653]
[-24.98795128 213.57998657]
[-11.98244953 205.11614990]
[3.51237535 205.94682312]
[12.86472225 194.21936035]
[22.21706963 182.49188232]
[31.56941605 170.76440430]
[40.92176437 159.03694153]
[42.65131378 151.76615906]
[50.65638733 147.13749695]
[60.29820251 135.64683533]
[69.94001770 124.15616608]
[79.58183289 112.66549683]
[76.17377472 87.70193481]
[98.14830780 70.45960236]
[84.45622253 63.03231430]
[80.17655945 48.43303299]
[87.34172058 35.42549133]
[82.92038727 21.09190178]
[78.49906158 6.75830889]
[74.07773590 -7.57528305]
[69.65641022 -21.90887451]
[65.23507690 -36.24246597]
[60.81375122 -50.57605743]
[56.39242554 -64.90965271]
[51.97109604 -79.24324036]
[38.27901077 -86.67053223]
[33.99934387 -101.26981354]
[41.16450500 -114.27735138]
[36.74317932 -128.61094666]
[23.05109406 -136.03822327]
[18.77142525 -150.63751221]
[25.93658638 -163.64505005]
[21.51525879 -177.97863770]
[16.73796082 -192.19755554]
[11.60765743 -206.29293823]
[6.47735548 -220.38833618]
[1.34705341 -234.48371887]
[-3.78324866 -248.57911682]
[-17.65700722 -256.63507080]
[-19.86612892 -272.52529907]
[-8.71596527 -284.06018066]
[7.24003220 -282.39111328]
[15.76178837 -268.79852295]
[10.31214046 -253.70941162]
[15.44244289 -239.61402893]
[20.57274437 -225.51863098]
[25.70304680 -211.42324829]
[30.83334923 -197.32785034]
[34.80419922 -194.49761963]
[36.97555542 -189.09565735]
[35.84885025 -182.39997864]
[40.27017975 -168.06637573]
[53.51771927 -161.35533142]
[58.20576477 -146.88200378]
[51.07677078 -133.03227234]
[55.49809647 -118.69867706]
[68.74563599 -111.98762512]
[73.43368530 -97.51430511]
[66.30468750 -83.66457367]
[70.72601318 -69.33097839]
[75.14734650 -54.99738693]
[79.56867218 -40.66379547]
[83.98999786 -26.33020210]
[88.41132355 -11.99661064]
[92.83265686 2.33698153]
[97.25398254 16.67057419]
[101.67530823 31.00416565]
[114.92285156 37.71521759]
[119.61089325 52.18853760]
[112.48190308 66.03827667]
[125.18276215 74.01875305]
[140.01522827 71.78311920]
[154.84768677 69.54748535]
[169.68014526 67.31185150]
[182.15718079 56.66968155]
[197.51948547 62.40827179]
[199.96365356 78.62425232]
[186.97532654 88.63601685]
[171.91578674 82.14431763]
[157.08332825 84.37995148]
[142.25085449 86.61558533]
[127.41839600 88.85121918]
[127.65109253 97.76358795]
[125.23317719 105.76966095]
[120.72758484 112.15251923]
[130.65287781 123.39923859]
[140.57815552 134.64596558]
[150.50344849 145.89266968]
[160.42872620 157.13938904]
[173.29891968 158.74383545]
[181.33300781 168.40798950]
[180.60658264 180.55149841]
[190.24839783 192.04216003]
[205.88493347 191.86123657]
[217.94668579 201.81352234]
[220.73844910 217.19989014]
[212.94206238 230.75534058]
[198.23870850 236.07940674]
[183.57089233 230.65823364]
[175.86428833 217.05154419]
[178.75773621 201.68397522]
[169.11592102 190.19331360]
[152.35578918 185.15155029]
[149.18202209 167.06468201]
[139.25672913 155.81796265]
[129.33143616 144.57124329]
[119.40615082 133.32452393]
[109.48086548 122.07781219]
[104.98622894 123.50434113]
[100.29953003 124.02554321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[29 85]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[43 71]
[44 70]
[47 67]
[48 66]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[86 97]
[87 96]
[88 95]
[89 94]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
