%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGGCCUCCUCUAAGUCUUGAGCCCGCAGUUCCUGAGAGAAGAACCCUGAGGAACAGACGUUCCCUCGCGGCCCUGGCACCUCUAACCCCAGAC\
) } def
/len { sequence length } bind def

/coor [
[166.50863647 213.03684998]
[158.17507935 200.56480408]
[149.84153748 188.09277344]
[141.50798035 175.62072754]
[133.17442322 163.14868164]
[124.84087372 150.67663574]
[116.50731659 138.20458984]
[98.84836578 141.60235596]
[81.40443420 137.23287964]
[67.43232727 125.91194153]
[54.20351028 132.98289490]
[40.97468948 140.05384827]
[38.98213577 155.44245911]
[28.30047989 166.69775391]
[13.03703880 169.49186707]
[-0.93908280 162.75038147]
[-8.25378132 149.06553650]
[-6.09440660 133.69944763]
[4.70871878 122.56068420]
[20.00157166 119.93231964]
[33.90373993 126.82502747]
[47.13255692 119.75407410]
[60.36137772 112.68312836]
[58.90387726 93.42802429]
[66.29356384 75.58773804]
[80.93958282 63.00293732]
[76.58531189 48.64883041]
[71.99676514 34.36789322]
[60.23416519 23.78716660]
[63.46980286 9.24825478]
[58.64820862 -4.95569706]
[53.82661819 -19.15964890]
[49.00502396 -33.36360168]
[44.18343353 -47.56755447]
[39.36184311 -61.77150345]
[27.59923935 -72.35222626]
[30.83487320 -86.89114380]
[26.01328278 -101.09509277]
[20.18243217 -108.38437653]
[21.27458382 -115.84335327]
[7.22005033 -123.07147217]
[2.47266626 -138.14587402]
[9.84897041 -152.12321472]
[24.97273254 -156.71095276]
[38.87129211 -149.18728638]
[43.29888153 -134.01586914]
[35.62868881 -120.19762421]
[40.21723557 -105.91668701]
[45.03882599 -91.71273041]
[56.45655441 -82.14797211]
[53.56579208 -66.59309387]
[58.38738632 -52.38914490]
[63.20897675 -38.18519211]
[68.03057098 -23.98124123]
[72.85215759 -9.77728844]
[77.67375183 4.42666292]
[89.09148407 13.99142647]
[86.20072174 29.54629898]
[91.43315887 34.97314835]
[90.93942261 44.29455948]
[95.29368591 58.64866638]
[105.60726929 58.76117325]
[115.57645416 61.40652466]
[124.58895111 66.42224884]
[132.09123230 73.50027466]
[137.62248230 82.20588684]
[140.84301758 92.00439453]
[141.55502319 102.29398346]
[139.71475220 112.44268036]
[135.43525696 121.82715607]
[128.97935486 129.87103271]
[137.31291199 142.34307861]
[145.64646912 154.81512451]
[153.98002625 167.28717041]
[162.31356812 179.75921631]
[170.64712524 192.23126221]
[178.98068237 204.70330811]
[193.46154785 200.36788940]
[208.57695007 200.49508667]
[222.98281860 205.07353210]
[235.39820862 213.69616699]
[244.71913147 225.59623718]
[250.11680603 239.71560669]
[251.11125183 254.79879761]
[247.61404419 269.50460815]
[239.93615723 282.52542114]
[228.76031494 292.70343018]
[215.08024597 299.13360596]
[200.11238098 301.24420166]
[185.18766785 298.84750366]
[171.63317871 292.15667725]
[160.65417480 281.76663208]
[153.22691345 268.60125732]
[150.01181030 253.83122253]
[151.29473877 238.76982117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[10 23]
[11 22]
[12 21]
[26 61]
[27 60]
[28 58]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[37 49]
[38 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
