%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGCUGGAGCCUGCGGCUGAGGCUCGGGCGCGCUCAGGCCCGGAUCCUGGCGGCCUGGGCGGCCGCACC\
) } def
/len { sequence length } bind def

/coor [
[94.96736145 109.45075226]
[80.66161346 113.96134186]
[73.14138794 119.69628143]
[65.63256073 118.34190369]
[51.14367294 122.22418976]
[36.65478516 126.10647583]
[22.16589928 129.98876953]
[14.23184490 143.39355469]
[-0.51725221 147.12434387]
[-13.24778080 139.47782898]
[-27.73666763 143.36012268]
[-42.22555542 147.24240112]
[-56.71444321 151.12469482]
[-70.44895935 161.06446838]
[-83.80239105 150.61831665]
[-77.46105957 134.89495850]
[-60.59672928 136.63580322]
[-46.10784149 132.75350952]
[-31.61895370 128.87123108]
[-17.13006592 124.98894501]
[-9.92836380 112.00160217]
[4.71012306 107.85800934]
[18.28361320 115.49987793]
[32.77250290 111.61759186]
[47.26138687 107.73530579]
[61.75027466 103.85301971]
[76.15102386 99.65558624]
[90.45677948 95.14499664]
[104.05139160 88.80572510]
[116.70226288 80.74623108]
[129.35313416 72.68673706]
[135.13279724 65.20082855]
[142.73631287 64.56562805]
[155.72668457 57.06562805]
[168.71707153 49.56562805]
[181.70745850 42.06562805]
[194.69783020 34.56562805]
[207.68821716 27.06562805]
[220.67860413 19.56562805]
[233.66897583 12.06562710]
[246.65936279 4.56562757]
[259.64974976 -2.93437266]
[272.47341919 -10.71597099]
[273.28625488 -26.21174240]
[283.07818604 -38.24908829]
[298.08401489 -42.19940567]
[312.53369141 -36.54371643]
[320.87100220 -23.45674896]
[319.89010620 -7.97070694]
[309.96817017 3.95970774]
[294.92037964 7.74700832]
[280.53289795 1.93490028]
[276.45855713 8.38599300]
[267.14974976 10.05600834]
[254.15936279 17.55600929]
[241.16897583 25.05600929]
[228.17860413 32.55600739]
[215.18821716 40.05600739]
[202.19783020 47.55600739]
[189.20745850 55.05600739]
[176.21707153 62.55600739]
[163.22668457 70.05600739]
[150.23631287 77.55600739]
[137.41262817 85.33760834]
[124.76176453 93.39710236]
[112.11088562 101.45659637]
[125.75172424 107.69580078]
[131.35786438 121.60878754]
[125.85356903 135.56237793]
[112.25870514 141.90112305]
[98.03191376 137.14733887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[4 26]
[5 25]
[6 24]
[7 23]
[10 20]
[11 19]
[12 18]
[13 17]
[29 66]
[30 65]
[31 64]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
