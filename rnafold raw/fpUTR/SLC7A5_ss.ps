%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCGGCGGGCGGCGCGCACACUGCUCGCUGGGCCGCGGCUCCCGGGUGUCCCAGGCCCGGCCGGUGCGCAGAGC\
) } def
/len { sequence length } bind def

/coor [
[100.91751862 198.34019470]
[97.91713715 183.64332581]
[94.91674805 168.94647217]
[84.79003143 158.02406311]
[89.61058044 142.95512390]
[86.61019135 128.25827026]
[74.99111938 118.77159119]
[59.99111938 118.77159119]
[44.99111938 118.77159119]
[29.99111748 118.77159119]
[14.99111843 118.77159119]
[-0.00888183 118.77159119]
[-15.00888157 118.77159119]
[-30.00888252 118.77159119]
[-45.00888062 118.77159119]
[-58.80905533 126.50888824]
[-71.53632355 118.77159119]
[-85.46012878 127.43528748]
[-99.79556274 119.47116089]
[-99.79556274 103.07201385]
[-85.46012878 95.10788727]
[-71.53632355 103.77159119]
[-58.80905533 96.03428650]
[-45.00888062 103.77159119]
[-30.00888252 103.77159119]
[-15.00888157 103.77159119]
[-0.00888183 103.77159119]
[14.99111843 103.77159119]
[29.99111748 103.77159119]
[44.99111938 103.77159119]
[59.99111938 103.77159119]
[74.99111938 103.77159119]
[86.79583740 82.38442230]
[107.87987518 82.99913788]
[119.10754395 73.05229950]
[130.33520508 63.10546112]
[141.56286621 53.15861893]
[152.79052734 43.21178055]
[157.30079651 34.94222641]
[164.67636108 33.10163498]
[176.29544067 23.61495590]
[187.91452026 14.12827492]
[199.53358459 4.64159489]
[200.04486084 -6.57231808]
[206.64054871 -15.37865353]
[216.83605957 -18.87823105]
[227.01921082 -16.09620094]
[239.36398315 -24.61717224]
[251.70874023 -33.13814163]
[261.30938721 -47.11183548]
[277.39468384 -41.75469589]
[276.69976807 -24.81499672]
[260.22970581 -20.79338455]
[247.88494873 -12.27241325]
[235.54019165 -3.75144243]
[228.88539124 14.22385502]
[209.02027893 16.26066971]
[197.40119934 25.74734879]
[185.78211975 35.23403168]
[174.16305542 44.72071075]
[162.73736572 54.43944168]
[151.50970459 64.38628387]
[140.28204346 74.33312225]
[129.05438232 84.27996063]
[117.82672119 94.22679901]
[118.13297272 112.48414612]
[101.30705261 125.25788116]
[104.30743408 139.95474243]
[114.64875793 151.92835999]
[109.61360931 165.94609070]
[112.61399078 180.64294434]
[115.61437988 195.33979797]
[128.93574524 203.84373474]
[132.26054382 219.29434204]
[123.61624146 232.52505493]
[108.13134766 235.68630981]
[94.99277496 226.90261841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[5 68]
[6 67]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[17 22]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[40 60]
[41 59]
[42 58]
[43 57]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
