%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGGCCUCUGGGGUGGGAUCGCGGGCCGUAAGUGGCUGUGGAGCUGGGGUCACUGCGCGGUGGGACC\
) } def
/len { sequence length } bind def

/coor [
[91.32666016 254.43098450]
[75.88107300 258.76843262]
[62.94445038 249.28036499]
[62.44065475 233.24522400]
[74.75616455 222.96379089]
[77.43451691 208.20484924]
[79.78102875 193.38952637]
[81.79453278 178.52528381]
[83.80802917 163.66104126]
[77.84917450 150.01034546]
[87.36889648 137.37367249]
[81.41004181 123.72297668]
[90.92976379 111.08630371]
[85.80568695 98.07724762]
[94.20599365 86.90019226]
[96.21949005 72.03594971]
[98.23299408 57.17170334]
[100.24649048 42.30745697]
[101.92595673 27.40177345]
[103.27054596 12.46215916]
[104.61513519 -2.47745562]
[105.95972443 -17.41707039]
[99.49060822 -31.85525322]
[108.33762360 -43.83772278]
[109.68222046 -58.77733612]
[111.02680969 -73.71694946]
[102.84423065 -90.04110718]
[113.11598206 -104.09427643]
[113.78894806 -119.07917023]
[114.46192169 -134.06407166]
[115.13489532 -149.04896545]
[115.80786896 -164.03385925]
[104.96152496 -175.52874756]
[105.50361633 -191.32373047]
[117.11253357 -202.04794312]
[132.90090942 -201.33888245]
[143.50178528 -189.61723328]
[142.62583923 -173.83723450]
[130.79277039 -163.36088562]
[130.11979675 -148.37599182]
[129.44682312 -133.39109802]
[128.77384949 -118.40619659]
[128.10087585 -103.42130280]
[136.11740112 -94.09139252]
[135.47335815 -81.40158844]
[125.96642303 -72.37236023]
[124.62183380 -57.43274689]
[123.27724457 -42.49313354]
[129.84252930 -29.12353134]
[120.89933777 -16.07248116]
[119.55474854 -1.13286591]
[118.21015930 13.80674839]
[116.86557007 28.74636269]
[119.48928833 35.92225647]
[115.11073303 44.32095718]
[113.09723663 59.18520355]
[111.08374023 74.04944611]
[109.07023621 88.91369629]
[114.19431305 101.92275238]
[105.79400635 113.09980774]
[111.60884094 127.81368256]
[102.23313904 139.38716125]
[108.04797363 154.10104370]
[98.67227936 165.67453003]
[96.65877533 180.53877258]
[94.64527893 195.40303040]
[96.63167572 204.66390991]
[92.19345856 210.88320923]
[89.51510620 225.64215088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 66]
[8 65]
[9 64]
[11 62]
[13 60]
[15 58]
[16 57]
[17 56]
[18 55]
[19 53]
[20 52]
[21 51]
[22 50]
[24 48]
[25 47]
[26 46]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
