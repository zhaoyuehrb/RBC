%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGAAGUUGACCGGGGUGCGGAGCUCCUGGGCUGCAGCUCCUGGAGUUUCCGAGGUUCGUGCGCGUCUGGUGGCGGCGGCGUG\
) } def
/len { sequence length } bind def

/coor [
[80.22848511 137.87643433]
[71.06088257 149.74888611]
[61.89327621 161.62133789]
[52.72566986 173.49377441]
[43.55806732 185.36622620]
[47.07270432 200.60372925]
[39.92458344 214.51193237]
[25.48882294 220.52383423]
[10.58155155 215.80076599]
[2.24152470 202.57284546]
[4.40664911 187.08587646]
[16.05461884 176.65232849]
[31.68561745 176.19862366]
[40.85322571 164.32617188]
[50.02082825 152.45372009]
[59.18843460 140.58128357]
[68.35604095 128.70883179]
[59.23890305 112.80898285]
[57.62244415 94.55207825]
[63.80412292 77.29767609]
[76.64640808 64.22086334]
[70.77983856 50.41566849]
[64.91326904 36.61047745]
[59.04669571 22.80528259]
[53.18012238 9.00009060]
[47.06239319 -4.69565201]
[40.69554138 -18.27737617]
[34.32869339 -31.85909843]
[27.96184158 -45.44082260]
[15.09854126 -54.65201569]
[16.70208931 -69.46005249]
[10.33523941 -83.04177094]
[3.72139359 -96.50495148]
[-3.13724113 -109.84507751]
[-17.20878983 -118.26669312]
[-16.68072128 -134.65733337]
[-2.09626818 -142.15571594]
[11.54133511 -133.04815674]
[10.20289135 -116.70371246]
[17.06152534 -103.36357880]
[23.06113625 -98.74681091]
[23.91696358 -89.40862274]
[30.28381348 -75.82690430]
[42.69171524 -67.58716583]
[41.54356384 -51.80767441]
[47.91041565 -38.22594833]
[54.27726746 -24.64422607]
[60.64411545 -11.06250286]
[66.47110748 -6.22969484]
[66.98531342 3.13351965]
[72.85189056 16.93871307]
[78.71846008 30.74390602]
[84.58502960 44.54909897]
[90.45159912 58.35429001]
[101.18116760 57.29002762]
[111.83551788 58.94567490]
[121.73613739 63.21580124]
[130.25253296 69.82846832]
[136.84234619 78.36255646]
[141.08590698 88.27458954]
[142.71298218 98.93334198]
[141.61996460 109.66001892]
[137.87643433 119.77151489]
[149.74888611 128.93911743]
[161.62133789 138.10671997]
[173.49377441 147.27432251]
[188.96406555 145.45559692]
[200.87382507 154.92198181]
[202.51235962 169.68174744]
[214.38481140 178.84936523]
[226.25726318 188.01696777]
[242.57292175 189.66954041]
[249.05191040 204.73455811]
[239.02917480 217.71443176]
[222.81526184 215.25656128]
[217.08966064 199.88941956]
[205.21720886 190.72180176]
[193.34475708 181.55419922]
[178.65048218 183.70217896]
[166.47953796 174.57405090]
[164.32617188 159.14677429]
[152.45372009 149.97917175]
[140.58128357 140.81156921]
[128.70883179 131.64395142]
[113.87903595 140.40927124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 48]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[33 40]
[34 39]
[63 84]
[64 83]
[65 82]
[66 81]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
