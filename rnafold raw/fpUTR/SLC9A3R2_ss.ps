%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCCCGAGCCGGAUCCCGAGGCGACGGGAGCCGAACAGGAGCCGCCGCUGAAGCCACCGCCGGGUGCCCAGCGCCGCCGCCGCCCCCGAGCUCCCCCGCGCCCCUGCCCGCGGGCGGCCGGUGGGCAGCGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[230.52784729 199.06910706]
[218.33309937 190.33482361]
[206.13833618 181.60052490]
[193.94357300 172.86622620]
[181.74882507 164.13192749]
[166.89643860 163.01132202]
[160.18243408 148.68536377]
[147.98768616 139.95106506]
[128.70477295 139.56382751]
[120.47987366 121.22064209]
[107.90289307 113.04631805]
[92.91150665 112.53788757]
[79.80960083 119.84130859]
[66.70769501 127.14472961]
[58.42103577 140.62219238]
[43.53701401 140.06080627]
[30.43510437 147.36422729]
[17.33319664 154.66764832]
[4.23128653 161.97106934]
[-8.87062263 169.27449036]
[-12.94898796 184.54350281]
[-26.67128372 192.38404846]
[-41.89631653 188.14447021]
[-49.59134293 174.34004211]
[-45.19104004 159.16069031]
[-31.30603218 151.61204529]
[-16.17404556 156.17259216]
[-3.07213569 148.86915588]
[10.02977371 141.56573486]
[23.13168335 134.26231384]
[36.23359299 126.95889282]
[43.58311081 114.00382996]
[59.40427017 114.04282379]
[72.50617981 106.73939514]
[85.60808563 99.43597412]
[70.60975647 99.21232605]
[62.10569382 86.85591125]
[67.25365448 72.76696777]
[81.72067261 68.80395508]
[93.33008575 78.30257416]
[88.02320099 64.27271271]
[75.90393066 54.10247040]
[78.63800812 39.46094894]
[66.51873016 29.29071045]
[69.25280762 14.64919186]
[63.94593048 0.61932951]
[51.82665634 -9.55091000]
[54.56073380 -24.19242859]
[49.25385666 -38.22229004]
[43.94697571 -52.25215530]
[38.64009476 -66.28201294]
[33.33321762 -80.31187439]
[21.87505150 -86.35305786]
[17.76963234 -98.21387482]
[22.71508217 -109.31108093]
[17.72662544 -123.45729065]
[11.87341785 -130.58207703]
[12.78922272 -137.97993469]
[8.12173653 -152.23527527]
[3.45425081 -166.49061584]
[-9.11195850 -177.02732849]
[-6.00389910 -193.12925720]
[9.58112335 -198.23210144]
[21.61057472 -187.08650208]
[17.70958519 -171.15809631]
[22.37707138 -156.90275574]
[27.04455757 -142.64743042]
[31.87283707 -128.44573975]
[36.86129379 -114.29953766]
[50.78186035 -103.67301178]
[47.36307907 -85.61875916]
[52.66996002 -71.58889771]
[57.97683716 -57.55903244]
[63.28371811 -43.52917099]
[68.59059906 -29.49930954]
[80.33028412 -20.33257866]
[77.97579193 -4.68755007]
[83.28266907 9.34231186]
[95.02236176 18.50904274]
[92.66786957 34.15407181]
[104.40756226 43.32080078]
[102.05306244 58.96583176]
[107.35994720 72.99568939]
[116.07721710 100.46933746]
[128.65419006 108.64366150]
[139.25068665 105.75549316]
[149.46296692 109.15232086]
[155.94668579 117.46435547]
[156.72198486 127.75631714]
[168.91673279 136.49061584]
[184.64137268 138.23596191]
[190.48312378 151.93717957]
[202.67787170 160.67147827]
[214.87263489 169.40576172]
[227.06738281 178.14006042]
[239.26214600 186.87435913]
[252.26062012 183.15760803]
[264.83401489 187.56744385]
[272.43725586 198.27101135]
[272.46035767 211.20507812]
[284.45462036 220.21273804]
[296.44885254 229.22039795]
[308.44311523 238.22805786]
[320.43737793 247.23571777]
[332.43161011 256.24337769]
[344.52688599 265.11489868]
[356.72164917 273.84921265]
[368.91641235 282.58349609]
[381.11117554 291.31781006]
[393.30590820 300.05209351]
[405.50067139 308.78637695]
[417.69543457 317.52069092]
[429.89019775 326.25497437]
[445.61483765 328.00033569]
[451.45657349 341.70153809]
[463.65133667 350.43585205]
[480.04898071 354.74316406]
[480.44931030 371.69238281]
[464.27328491 376.76907349]
[454.91702271 362.63058472]
[442.72229004 353.89630127]
[427.86990356 352.77569580]
[421.15588379 338.44973755]
[408.96115112 329.71542358]
[396.76638794 320.98114014]
[384.57162476 312.24685669]
[372.37686157 303.51254272]
[360.18209839 294.77825928]
[347.98736572 286.04397583]
[335.79260254 277.30966187]
[328.46133423 275.96081543]
[323.42395020 268.23760986]
[311.42971802 259.22994995]
[299.43545532 250.22230530]
[287.44119263 241.21464539]
[275.44696045 232.20698547]
[263.45269775 223.19932556]
[246.96083069 226.29405212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[7 90]
[8 89]
[10 85]
[11 84]
[12 35]
[13 34]
[14 33]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[40 83]
[41 82]
[43 80]
[45 78]
[46 77]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[55 69]
[56 68]
[58 67]
[59 66]
[60 65]
[100 137]
[101 136]
[102 135]
[103 134]
[104 133]
[105 132]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
