%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACCAAGGACGCGACUUCUUGUUUGGAGAGGGUGGAGCUUUGGAGUGAGACCCAGGAGGCCAAAUCCCAAAGAGAAAAAUAGGAGCCUAAAUAAGGAUCAGGACCAAGGGAAGGGAAUCGUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[23.49484634 177.83564758]
[8.32377625 173.98049927]
[-4.90592337 165.65026855]
[-14.91423988 153.66502380]
[-28.77243233 159.40527344]
[-42.63062668 165.14552307]
[-56.48881912 170.88578796]
[-70.34701538 176.62603760]
[-84.20520782 182.36628723]
[-87.92906952 197.31416321]
[-99.60420990 207.08885193]
[-114.61875153 208.10250854]
[-127.20051575 200.17552185]
[-133.31701660 214.50123596]
[-147.45297241 220.12525940]
[-161.07264709 214.20582581]
[-174.93084717 219.94607544]
[-188.78904724 225.68632507]
[-202.64723206 231.42657471]
[-216.50543213 237.16682434]
[-230.36361694 242.90708923]
[-237.80674744 257.11901855]
[-253.58547974 260.01916504]
[-265.59573364 249.38276672]
[-264.62429810 233.36915588]
[-251.41632080 224.26260376]
[-236.10386658 229.04888916]
[-222.24568176 223.30863953]
[-208.38748169 217.56838989]
[-194.52929688 211.82814026]
[-180.67109680 206.08787537]
[-166.81291199 200.34762573]
[-161.36799622 186.53138733]
[-147.39559937 180.51254272]
[-132.94076538 186.31733704]
[-129.64933777 171.81544495]
[-118.31568909 161.91534424]
[-103.14836884 160.57151794]
[-89.94545746 168.50808716]
[-76.08726501 162.76783752]
[-62.22906876 157.02758789]
[-48.37087631 151.28733826]
[-34.51268387 145.54708862]
[-20.65449142 139.80683899]
[-22.12238121 125.57592010]
[-19.50311661 111.49507904]
[-13.00164318 98.71543884]
[-3.14065671 88.28436279]
[9.28140831 81.05957794]
[23.25502396 77.63869476]
[37.64160538 78.30974579]
[51.26628876 83.02696991]
[63.01388168 91.41381073]
[71.92012024 102.79296112]
[85.91500854 97.39453125]
[94.84488678 86.63586426]
[108.68656158 88.61057281]
[122.68145752 83.21215057]
[129.14768982 69.04085541]
[143.41740417 63.76544571]
[156.88771057 70.01734161]
[170.88261414 64.61891174]
[174.91752625 51.70239258]
[185.52120972 43.61332321]
[198.65460205 43.14914703]
[209.47644043 50.25522232]
[223.59959412 45.20187378]
[237.72276306 40.14852905]
[251.84591675 35.09518051]
[250.45252991 23.01289940]
[251.51737976 10.90359020]
[254.99443054 -0.73795944]
[260.73907471 -11.43659210]
[268.51428223 -20.75617027]
[278.00024414 -28.31735420]
[288.80758667 -33.81304550]
[300.49340820 -37.02085876]
[312.57928467 -37.81211472]
[324.57104492 -36.15701294]
[335.97882080 -32.12572479]
[346.33712769 -25.88544655]
[355.22384644 -17.69344711]
[362.27743530 -7.88647509]
[367.21160889 3.13309360]
[381.92337036 0.20673877]
[393.94891357 -10.07417107]
[407.94110107 -4.96850872]
[422.65289307 -7.89486361]
[437.36468506 -10.82121849]
[447.43737793 -23.30800819]
[463.47872925 -23.07414436]
[473.18316650 -10.29902649]
[469.10626221 5.21736670]
[454.37548828 11.57218742]
[440.29101562 3.89056063]
[425.57925415 6.81691551]
[410.86746216 9.74326992]
[399.89422607 19.81486893]
[384.84973145 14.91851807]
[370.13796997 17.84487343]
[368.70349121 35.92404938]
[361.90319824 52.75392532]
[350.35522461 66.77920532]
[335.11700439 76.70070648]
[317.58834839 81.59569550]
[299.38281250 81.00368500]
[282.17929077 74.96977997]
[267.56713867 64.04132843]
[256.89926147 49.21834183]
[242.77610779 54.27169037]
[228.65293884 59.32503510]
[214.52978516 64.37838745]
[208.04287720 79.84304810]
[192.08282471 85.99992371]
[176.28103638 78.61380768]
[162.28613281 84.01222992]
[156.50381470 97.69068909]
[142.38790894 103.36482239]
[128.07987976 97.20703888]
[114.08499146 102.60546875]
[105.15511322 113.36413574]
[91.31343842 111.38942719]
[77.31854248 116.78784943]
[78.24774170 132.52986145]
[74.28794861 147.77400208]
[65.83573151 161.04103088]
[53.72299576 171.04737854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[13 35]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[54 123]
[55 122]
[57 120]
[58 119]
[61 116]
[62 115]
[66 112]
[67 111]
[68 110]
[69 109]
[84 100]
[85 99]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
