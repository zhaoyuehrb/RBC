%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACAGUCCCUGAGAAGAGGAGCUCUUGGGCCAAUCACCUAGUUUCUGCCUGUGUUACAGUGAAGAGAAGCUGCUUAAGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[57.70468903 246.71757507]
[48.26285553 258.37313843]
[34.59811020 264.55978394]
[19.60991478 263.96484375]
[6.47853136 256.71456909]
[-2.00975609 244.34730530]
[-4.05386209 229.48724365]
[0.77983779 215.28759766]
[-12.56029415 222.14624023]
[-25.90042686 229.00486755]
[-39.11306763 236.10601807]
[-52.19380951 243.44728088]
[-60.09588242 257.81701660]
[-76.49487305 257.88790894]
[-84.52091217 243.58705139]
[-75.91748810 229.62591553]
[-59.53507614 230.36653137]
[-46.45433426 223.02526855]
[-42.05976105 216.86105347]
[-32.75905991 215.66474915]
[-19.41893005 208.80610657]
[-6.07879686 201.94747925]
[-1.75247574 194.52867126]
[7.41692591 191.52641296]
[17.42670822 180.35482788]
[27.43649101 169.18324280]
[37.44627380 158.01167297]
[47.45605469 146.84008789]
[57.46583557 135.66850281]
[67.47561646 124.49691772]
[77.48540497 113.32533264]
[87.49518585 102.15375519]
[72.50078583 102.56364441]
[59.53361893 95.02357483]
[52.47297287 81.78925323]
[53.43112564 66.81988525]
[62.12143326 54.59374237]
[75.94408417 48.76842499]
[90.76386261 51.08664703]
[102.14725494 60.85488510]
[106.68877411 75.15084839]
[103.02852631 89.69987488]
[116.10926819 82.35861206]
[129.19000244 75.01734161]
[142.27075195 67.67607117]
[155.35148621 60.33480835]
[168.43223572 52.99353790]
[181.51296997 45.65227127]
[190.72770691 27.90350151]
[209.91513062 28.38987160]
[222.27185059 19.88625336]
[234.47120667 11.15837002]
[246.67054749 2.43048644]
[258.86990356 -6.29739714]
[268.23358154 -20.43096352]
[284.40692139 -15.34577370]
[283.99771118 1.60323441]
[267.59777832 5.90194893]
[255.39843750 14.62983227]
[243.19908142 23.35771561]
[230.99974060 32.08560181]
[227.30572510 38.69348145]
[218.19165039 40.89984131]
[216.98832703 51.33724976]
[209.99482727 59.47386169]
[199.42726135 62.34886169]
[188.85424805 58.73301315]
[175.77349854 66.07427979]
[162.69276428 73.41555023]
[149.61201477 80.75681305]
[136.53128052 88.09808350]
[123.45053864 95.43935394]
[110.36979675 102.78061676]
[98.66676331 112.16353607]
[88.65698242 123.33511353]
[78.64720154 134.50669861]
[68.63742065 145.67828369]
[58.62763596 156.84986877]
[48.61785507 168.02145386]
[38.60807419 179.19302368]
[28.59829140 190.36460876]
[18.58850861 201.53619385]
[33.54922104 200.45126343]
[47.40903854 206.18759155]
[57.22711563 217.52803040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 22]
[9 21]
[10 20]
[11 18]
[12 17]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[50 63]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
