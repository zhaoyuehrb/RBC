%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAGGUCCGAGACCCGAGUCCUGGCACUGGAGUUUGCUGACUCCCUCUGGUUUCCGGUCAGGUCGGUCGGUCCCCACU\
) } def
/len { sequence length } bind def

/coor [
[85.86727905 261.52462769]
[82.50839233 245.83712769]
[92.79016113 233.52191162]
[92.79016113 218.52191162]
[85.05286407 205.79463196]
[92.79016113 191.99446106]
[92.79016113 176.99446106]
[85.05286407 164.26719666]
[92.79016113 150.46702576]
[92.79016113 135.46702576]
[92.79016113 120.46701813]
[92.79016113 105.46701813]
[90.24035645 102.18687439]
[89.28083038 97.73869324]
[90.42163086 92.92411804]
[93.76376343 88.75100708]
[95.50515747 73.85242462]
[97.24655151 58.95385361]
[98.98794556 44.05527878]
[96.57574463 37.44152069]
[97.87050629 31.56537247]
[101.48547363 28.08613968]
[104.37615204 13.36730957]
[107.26683807 -1.35152006]
[110.15752411 -16.07035065]
[113.04820251 -30.78917885]
[115.93888855 -45.50801086]
[117.39105225 -60.43754959]
[117.39105225 -75.43755341]
[117.39105225 -90.43755341]
[116.22866821 -105.39244843]
[113.91088104 -120.21229553]
[111.59310150 -135.03213501]
[109.27532196 -149.85198975]
[106.95754242 -164.67182922]
[104.63975525 -179.49168396]
[93.92861938 -191.90956116]
[99.58200073 -207.30342102]
[115.78419495 -209.83740234]
[125.86776733 -196.90473938]
[119.45960236 -181.80946350]
[121.77738953 -166.98962402]
[124.09516907 -152.16976929]
[126.41294861 -137.34992981]
[128.73072815 -122.53007507]
[131.04850769 -107.71022797]
[133.53196716 -105.92736053]
[135.35664368 -102.92436981]
[136.00018311 -98.98950195]
[135.07273865 -94.61505890]
[132.39105225 -90.43755341]
[132.39105225 -75.43755341]
[132.39105225 -60.43754959]
[134.35466003 -58.75043106]
[135.77168274 -56.17886353]
[136.30769348 -52.92493439]
[135.70593262 -49.30506134]
[133.82365417 -45.72056961]
[130.65771484 -42.61732483]
[127.76703644 -27.89849472]
[124.87635040 -13.17966557]
[121.98566437 1.53916383]
[119.09498596 16.25799370]
[116.20429993 30.97682381]
[113.88652039 45.79666901]
[112.14512634 60.69524765]
[110.40373230 75.59381866]
[108.66233826 90.49239349]
[107.79016113 105.46701813]
[107.79016113 120.46701813]
[107.79016113 135.46702576]
[107.79016113 150.46702576]
[115.52746582 164.26719666]
[107.79016113 176.99446106]
[107.79016113 191.99446106]
[115.52746582 205.79463196]
[107.79016113 218.52191162]
[107.79016113 233.52191162]
[118.07192993 245.83712769]
[114.71305084 261.52462769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 78]
[4 77]
[6 75]
[7 74]
[9 72]
[10 71]
[11 70]
[12 69]
[16 68]
[17 67]
[18 66]
[19 65]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[28 53]
[29 52]
[30 51]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
