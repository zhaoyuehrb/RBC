%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUGGGCCGCCCCGCCUGGCGCUGUGCUGGGAGGAGCCGCCGCCAGUCGCGCGGUCAGUGCCUCCCUCCAGACUCGGGAGGGUCGAGGGGGCGCGGGAGAGAGCGCGGGCGGCCGCCGGGGCUGGUCGCCUGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[114.78041840 295.06115723]
[112.43389893 280.24581909]
[110.08737946 265.43051147]
[107.38278198 263.04827881]
[105.73756409 259.20263672]
[105.84273529 254.42518616]
[108.11649323 249.54267883]
[106.77190399 234.60305786]
[105.42731476 219.66343689]
[104.08272552 204.72383118]
[102.57060242 189.80024719]
[100.89113617 174.89456177]
[99.21166229 159.98887634]
[97.53219604 145.08319092]
[95.85272980 130.17750549]
[94.17326355 115.27182770]
[81.04491425 108.01604462]
[67.53038025 114.52429962]
[54.01584625 121.03255463]
[40.50131226 127.54080963]
[26.98678017 134.04907227]
[13.47224808 140.55732727]
[6.83770561 155.16424561]
[-8.75360203 158.94454956]
[-21.34135818 148.99830627]
[-21.26931381 132.95541382]
[-8.59273529 123.12261200]
[6.96399212 127.04278564]
[20.47852516 120.53453064]
[33.99305725 114.02627563]
[47.50759125 107.51802063]
[61.02212524 101.00976562]
[74.53665924 94.50151062]
[79.42829132 91.40874481]
[84.47972870 89.86390686]
[89.30174255 89.80168915]
[93.53771210 91.06912231]
[96.88202667 93.43582916]
[102.15264893 79.39231110]
[99.75775146 63.75341415]
[111.47372437 54.55639267]
[116.74434662 40.51286697]
[122.01496887 26.46934509]
[127.28559113 12.42582226]
[132.55621338 -1.61770070]
[137.82682800 -15.66122341]
[136.93394470 -20.97268677]
[138.10354614 -25.60596657]
[140.71255493 -28.87531853]
[143.95344543 -30.45217133]
[150.15682983 -44.10933685]
[156.36019897 -57.76649857]
[162.56358337 -71.42366028]
[168.76695251 -85.08082581]
[161.41362000 -102.47030640]
[168.89889526 -119.45741272]
[186.09657288 -125.55312347]
[191.68098450 -139.47485352]
[188.62196350 -157.59436035]
[202.75256348 -167.94122314]
[208.02319336 -181.98474121]
[213.29382324 -196.02827454]
[218.56443787 -210.07179260]
[223.83506775 -224.11531067]
[223.93009949 -233.33378601]
[229.38471985 -238.41259766]
[234.96911621 -252.33432007]
[240.55352783 -266.25604248]
[246.13792419 -280.17776489]
[251.72233582 -294.09948730]
[251.15367126 -300.82080078]
[253.72982788 -306.00314331]
[257.88226318 -308.51138306]
[264.08566284 -322.16854858]
[270.28903198 -335.82571411]
[276.49240112 -349.48287964]
[282.69577026 -363.14004517]
[280.56597900 -379.40029907]
[293.74569702 -389.15875244]
[308.67672729 -382.37673950]
[309.99935913 -366.03103638]
[296.35293579 -356.93667603]
[290.14956665 -343.27951050]
[283.94619751 -329.62234497]
[277.74279785 -315.96517944]
[271.53942871 -302.30801392]
[265.64407349 -288.51510620]
[260.05966187 -274.59338379]
[254.47525024 -260.67166138]
[248.89083862 -246.74992371]
[243.30644226 -232.82820129]
[237.87858582 -218.84469604]
[232.60795593 -204.80117798]
[227.33734131 -190.75764465]
[222.06671143 -176.71412659]
[216.79609680 -162.67060852]
[221.51828003 -151.47776794]
[217.17764282 -139.70219421]
[205.60270691 -133.89044189]
[200.01831055 -119.96871948]
[206.71488953 -110.61328888]
[208.03991699 -99.06351471]
[203.54389954 -88.21212006]
[194.25006104 -80.83414459]
[182.42411804 -78.87744904]
[176.22074890 -65.22028351]
[170.01736450 -51.56312180]
[163.81398010 -37.90595627]
[157.61061096 -24.24879456]
[151.87036133 -10.39060116]
[146.59973145 3.65292168]
[141.32911682 17.69644547]
[136.05848694 31.73996735]
[130.78787231 45.78348923]
[125.51724243 59.82701492]
[128.28913879 74.46142578]
[116.19616699 84.66293335]
[110.92554474 98.70645905]
[109.07894897 113.59235382]
[110.75841522 128.49804688]
[112.43788147 143.40371704]
[114.11734772 158.30940247]
[115.79681396 173.21508789]
[117.47628021 188.12077332]
[121.57669830 196.37763977]
[119.02233887 203.37924194]
[120.36692810 218.31884766]
[121.71151733 233.25846863]
[123.05610657 248.19807434]
[124.90270996 263.08398438]
[127.24922180 277.89932251]
[129.59573364 292.71463013]
[143.48217773 299.63897705]
[150.61662292 313.41864014]
[148.25573730 328.75506592]
[137.30734253 339.75109863]
[121.98130798 342.17849731]
[108.17080688 335.10391235]
[101.18626404 321.24765015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[7 129]
[8 128]
[9 127]
[10 126]
[11 124]
[12 123]
[13 122]
[14 121]
[15 120]
[16 119]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[38 118]
[39 117]
[41 115]
[42 114]
[43 113]
[44 112]
[45 111]
[46 110]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[57 100]
[58 99]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
