%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCGCCGAGGGUGACGCGUGGCGUAGACGACGCCGUCGGCCUGCGCCUGUCACCCCCCUCCUCCCGGGGUUUGUAGCGGAGGAGGAGCGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[92.39353180 218.47685242]
[78.45041656 210.54156494]
[76.10353851 194.67109680]
[87.15322113 183.03991699]
[88.11427307 168.07073975]
[89.07532501 153.10156250]
[90.03637695 138.13238525]
[90.99742889 123.16320038]
[80.98053741 115.99500275]
[75.63616180 104.89730072]
[76.27727509 92.59647369]
[63.97468567 84.01472473]
[51.67210388 75.43297577]
[39.36951828 66.85121918]
[27.06693649 58.26947403]
[14.76435184 49.68772125]
[2.46176839 41.10597229]
[-9.84081554 32.52422333]
[-15.42499828 32.06915665]
[-19.75210381 29.65311623]
[-22.26543236 26.13778877]
[-22.85835457 22.48014832]
[-34.28004456 12.75672245]
[-45.70173264 3.03329682]
[-57.12342453 -6.69012928]
[-68.54511261 -16.41355515]
[-79.96680450 -26.13698196]
[-91.38848877 -35.86040878]
[-109.49803925 -38.67318726]
[-114.91091156 -55.28174973]
[-126.63838196 -64.63409424]
[-138.36585999 -73.98644257]
[-150.09332275 -83.33879089]
[-166.24668884 -88.48710632]
[-165.77127075 -105.43438721]
[-149.35467529 -109.66902161]
[-140.74098206 -95.06626129]
[-129.01350403 -85.71391296]
[-117.28603363 -76.36157227]
[-105.55856323 -67.00922394]
[-93.38739014 -68.02848816]
[-83.51616669 -60.17032623]
[-81.66506195 -47.28209686]
[-70.24337769 -37.55867004]
[-58.82168579 -27.83524513]
[-47.39999771 -18.11181831]
[-35.97830963 -8.38839245]
[-24.55661964 1.33503330]
[-13.13492966 11.05845928]
[-1.25906551 20.22163963]
[11.04351807 28.80338860]
[23.34610176 37.38513947]
[35.64868546 45.96688843]
[47.95127106 54.54863739]
[60.25385284 63.13039017]
[72.55643463 71.71213531]
[84.85902405 80.29389191]
[107.07083893 76.17599487]
[123.43984222 91.74447632]
[138.43214417 91.26370239]
[153.42443848 90.78292847]
[168.41673279 90.30215454]
[183.40901184 89.82138062]
[198.40130615 89.34060669]
[213.39360046 88.85983276]
[228.38589478 88.37905884]
[243.36856079 87.65805054]
[250.10801697 73.85677338]
[262.85415649 65.28754425]
[278.17831421 64.25546265]
[291.95840454 71.03813934]
[300.48764038 83.81107330]
[301.47167969 99.13840485]
[294.64584351 112.89717102]
[281.84625244 121.38631439]
[266.51589966 122.32231903]
[252.77859497 115.45338440]
[244.32962036 102.62723541]
[237.73335266 106.26515961]
[228.86666870 103.37135315]
[213.87437439 103.85212708]
[198.88208008 104.33290100]
[183.88978577 104.81367493]
[168.89750671 105.29444885]
[153.90521240 105.77522278]
[138.91291809 106.25599670]
[123.92061615 106.73677063]
[121.98192596 111.59202576]
[119.07038116 115.93426514]
[115.31484222 119.57129669]
[110.88151550 122.34217072]
[105.96661377 124.12425232]
[105.00556183 139.09342957]
[104.04450989 154.06262207]
[103.08345032 169.03179932]
[102.12239838 184.00097656]
[111.59400177 196.94966125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 96]
[5 95]
[6 94]
[7 93]
[8 92]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[30 40]
[31 39]
[32 38]
[33 37]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
