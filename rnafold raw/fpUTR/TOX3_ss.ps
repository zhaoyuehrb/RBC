%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCGACACGAGGCUUCACCUGGGAAGCUUCAAGUCUGCCUACCUGUGAAAGGUCAGGCCCCAACACCCCUUCUGGGAAAUCCUACAGCUAGGAUGCAUUUCUCUCACUGAACCCCAUCCAGCAGAGGACAGAAGAGUCAGAAGAGGGUAGAGAGGAUUUAGAUACUCAUAGAAGAUGUAGUGGAGG\
) } def
/len { sequence length } bind def

/coor [
[84.43309784 296.55697632]
[68.05432892 295.73956299]
[60.81466675 281.02496338]
[70.16164398 267.55032349]
[70.90933228 252.56896973]
[60.75603104 241.73171997]
[61.30087662 226.52783203]
[72.73683167 215.95159912]
[73.48451996 200.97024536]
[74.23220825 185.98889160]
[60.31512451 180.39291382]
[50.48365402 191.72174072]
[40.65217972 203.05055237]
[30.82070541 214.37937927]
[20.98923302 225.70819092]
[11.15775967 237.03701782]
[1.32628596 248.36582947]
[-8.50518703 259.69464111]
[-7.13976574 275.43984985]
[-17.37161827 287.48495483]
[-33.13037109 288.68383789]
[-45.06663132 278.32519531]
[-46.09883118 262.55465698]
[-35.61458206 250.72859192]
[-19.83400536 249.86317444]
[-10.00253296 238.53436279]
[-0.17105936 227.20553589]
[9.66041374 215.87672424]
[19.49188805 204.54789734]
[29.32336044 193.21908569]
[39.15483475 181.89027405]
[48.98630905 170.56144714]
[46.13058472 163.62640381]
[32.26049423 169.33784485]
[18.39031029 175.04905701]
[12.67932510 161.17878723]
[26.54904938 155.46775818]
[40.41913986 149.75631714]
[37.56341934 142.82127380]
[22.60536003 141.70031738]
[7.64730358 140.57936096]
[-7.31075335 139.45841980]
[-22.27761078 138.46182251]
[-37.25223160 137.58964539]
[-52.22685623 136.71746826]
[-67.20147705 135.84530640]
[-80.09369659 145.39360046]
[-95.55934906 141.12826538]
[-101.73450470 126.32126617]
[-93.88211823 112.33129120]
[-78.02586365 109.89023590]
[-66.32930756 120.87067413]
[-51.35468292 121.74285126]
[-36.38005829 122.61502075]
[-21.40543747 123.48719788]
[-14.53207207 120.73222351]
[-6.18980217 124.50035858]
[8.76825523 125.62130737]
[23.72631264 126.74225616]
[38.68436813 127.86321259]
[35.64892578 106.25478363]
[39.71142578 85.70954895]
[49.86317825 68.40089417]
[64.48316193 55.97089005]
[81.56941223 49.37733459]
[99.00062561 48.83162308]
[114.79491425 53.82964325]
[121.52690125 40.42515564]
[128.25889587 27.02066612]
[134.99087524 13.61617565]
[141.61122131 0.15619950]
[148.11947632 -13.35833359]
[154.62774658 -26.87286568]
[161.13600159 -40.38739777]
[167.64425659 -53.90193176]
[174.15251160 -67.41646576]
[180.66076660 -80.93099976]
[169.15663147 -96.31172943]
[167.04718018 -115.32058716]
[174.83262634 -132.70050049]
[190.28811646 -143.68699646]
[209.09878540 -145.31431580]
[214.69476318 -159.23139954]
[220.29074097 -173.14848328]
[225.88671875 -187.06555176]
[226.18736267 -196.21443176]
[231.69309998 -201.16619873]
[229.92382812 -216.88816833]
[241.99726868 -225.61061096]
[247.82379150 -239.43275452]
[253.65031433 -253.25489807]
[254.10299683 -262.39749146]
[259.69027710 -267.25708008]
[265.74572754 -280.98046875]
[271.80117798 -294.70385742]
[277.85665894 -308.42724609]
[283.91210938 -322.15063477]
[276.27932739 -335.53146362]
[277.96945190 -350.66412354]
[288.12597656 -361.76855469]
[302.69931030 -364.72769165]
[308.75476074 -378.45108032]
[314.81021118 -392.17446899]
[307.74658203 -406.12579346]
[311.35354614 -421.34167480]
[323.92803955 -430.63769531]
[339.53277588 -429.62454224]
[350.79965210 -418.78057861]
[352.40881348 -403.22601318]
[343.60043335 -390.30523682]
[328.53359985 -386.11901855]
[322.47814941 -372.39562988]
[316.42269897 -358.67224121]
[324.06005859 -345.91259766]
[322.70352173 -330.92514038]
[312.66458130 -319.47644043]
[297.63549805 -316.09515381]
[291.58004761 -302.37176514]
[285.52456665 -288.64837646]
[279.46911621 -274.92498779]
[273.41366577 -261.20159912]
[267.47247314 -247.42837524]
[261.64593506 -233.60623169]
[255.81941223 -219.78408813]
[258.00543213 -205.05076599]
[245.51522827 -195.33967590]
[239.80378723 -181.46958923]
[234.20782471 -167.55250549]
[228.61184692 -153.63542175]
[223.01586914 -139.71835327]
[231.20214844 -132.23736572]
[236.72789001 -122.59174347]
[239.05169678 -111.69383240]
[237.93591309 -100.58016205]
[233.47085571 -90.31285858]
[226.06767273 -81.87814331]
[216.42060852 -76.09162140]
[205.44183350 -73.51939392]
[194.17529297 -74.42274475]
[187.66703796 -60.90821075]
[181.15878296 -47.39367676]
[174.65052795 -33.87914276]
[168.14227295 -20.36461067]
[161.63401794 -6.85007763]
[155.12576294 6.66445541]
[155.05607605 14.06905842]
[148.39537048 20.34816360]
[141.66337585 33.75265121]
[134.93139648 47.15714264]
[128.19940186 60.56163406]
[148.63287354 78.43526459]
[157.53153992 106.66424561]
[149.93627930 137.80540466]
[125.61137390 162.28982544]
[137.49267578 171.44595337]
[149.37397766 180.60208130]
[163.54518127 174.67987061]
[178.77685547 176.65260315]
[190.97175598 185.98962402]
[196.84951782 200.17932129]
[194.82905579 215.40473938]
[185.45385742 227.57031250]
[171.24580383 233.40356445]
[156.02679443 231.33538818]
[143.89067078 221.92210388]
[138.10197449 207.69583130]
[140.21784973 192.48338318]
[128.33654785 183.32725525]
[116.45524597 174.17112732]
[109.64482117 177.31250000]
[115.92755127 190.93333435]
[122.21027374 204.55418396]
[128.49299622 218.17501831]
[134.77572632 231.79586792]
[141.05822754 245.41680908]
[127.43717957 251.69908142]
[121.15488434 238.07858276]
[114.87216187 224.45774841]
[108.58943176 210.83689880]
[102.30670929 197.21606445]
[96.02397919 183.59521484]
[89.21356201 186.73658752]
[88.46587372 201.71794128]
[87.71818542 216.69929504]
[98.04425049 228.36161804]
[97.07257080 243.54418945]
[85.89068604 253.31665039]
[85.14299774 268.29800415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 188]
[5 187]
[8 184]
[9 183]
[10 182]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[39 60]
[40 59]
[41 58]
[42 57]
[43 55]
[44 54]
[45 53]
[46 52]
[67 150]
[68 149]
[69 148]
[70 147]
[71 145]
[72 144]
[73 143]
[74 142]
[75 141]
[76 140]
[77 139]
[82 130]
[83 129]
[84 128]
[85 127]
[87 126]
[89 124]
[90 123]
[91 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[101 113]
[102 112]
[103 111]
[154 169]
[155 168]
[156 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
