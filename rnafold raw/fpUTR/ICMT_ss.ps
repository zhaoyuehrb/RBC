%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGCAGGCGCAGCCGGCGCGUUUCUCCGGGCUACAGCCGGCGCCGCCGCCCGCUAGUCCGCCGCCCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[50.27380371 233.36250305]
[42.40919495 246.13545227]
[34.54458618 258.90838623]
[26.67997551 271.68130493]
[26.75702095 288.08029175]
[12.45915985 296.11166382]
[-1.50519252 287.51348877]
[-0.77070749 271.13079834]
[13.90703869 263.81671143]
[21.77164841 251.04377747]
[29.63625717 238.27082825]
[37.50086594 225.49789429]
[44.25392151 212.10400391]
[49.84677124 198.18566895]
[55.43961716 184.26733398]
[61.03246307 170.34899902]
[66.62531281 156.43066406]
[66.18260193 148.82347107]
[72.76222992 142.04850769]
[78.94075012 128.38008118]
[85.11926270 114.71165466]
[80.76993561 108.25066376]
[79.08467865 100.64665985]
[80.29696655 92.95306396]
[84.23885345 86.23572540]
[90.36424255 81.42525482]
[97.82453918 79.18807220]
[105.58621979 79.83411407]
[114.50572205 67.77415466]
[123.42521667 55.71419525]
[132.34471130 43.65423965]
[141.26420593 31.59428215]
[150.18371582 19.53432655]
[151.39076233 12.53062534]
[155.49220276 8.05666161]
[160.40687561 6.87316608]
[170.31700134 -4.38691807]
[180.22712708 -15.64700317]
[183.53637695 -31.11824799]
[197.75314331 -35.56042099]
[207.66325378 -46.82050705]
[217.57337952 -58.08058929]
[227.48350525 -69.34067535]
[230.17900085 -85.51677704]
[245.62850952 -91.01628876]
[257.93890381 -80.18179321]
[254.44628906 -64.15887451]
[238.74359131 -59.43055344]
[228.83346558 -48.17046738]
[218.92333984 -36.91038513]
[209.01321411 -25.65029907]
[206.41281128 -10.98445034]
[191.48721313 -5.73688221]
[181.57708740 5.52320242]
[171.66696167 16.78328705]
[162.24366760 28.45382309]
[153.32417297 40.51377869]
[144.40467834 52.57373810]
[135.48516846 64.63369751]
[126.56567383 76.69364929]
[117.64617920 88.75360870]
[118.04737091 110.59062195]
[98.78769684 120.89017487]
[92.60917664 134.55859375]
[86.43065643 148.22702026]
[80.54364777 162.02351379]
[74.95079803 175.94184875]
[69.35795593 189.86018372]
[63.76510620 203.77851868]
[58.17226028 217.69685364]
[59.13127899 222.67076111]
[58.32745361 227.15655518]
[56.19115448 230.60574341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[19 65]
[20 64]
[21 63]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[36 55]
[37 54]
[38 53]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
