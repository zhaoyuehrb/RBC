%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUCCCACCUGCGCCCGACGGCGGAAGUUCCGGGAGUGCCAAGUACCCGCGUGCAUACGGCUGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[122.99777985 116.35183716]
[108.90238953 111.22153473]
[95.10092163 113.46010590]
[85.96730804 102.87385559]
[70.35308075 105.42459869]
[61.03966522 93.80093384]
[46.94427872 88.67063141]
[32.84888840 83.54032898]
[18.75349998 78.41002655]
[4.35275126 74.21259308]
[-10.29168892 70.96599579]
[-25.43939972 75.53298950]
[-36.19032669 65.22440338]
[-51.33803940 69.79139709]
[-62.08896637 59.48281479]
[-76.73340607 56.23622131]
[-91.37784576 52.98962784]
[-106.02228546 49.74303436]
[-121.49120331 55.18770981]
[-133.76307678 44.30960464]
[-130.21365356 28.29918480]
[-114.49427795 23.62659264]
[-102.77568817 35.09859467]
[-88.13124847 38.34518814]
[-73.48680878 41.59178162]
[-58.84236908 44.83837509]
[-44.74212646 40.03916550]
[-32.94373322 50.57996750]
[-18.84348869 45.78075790]
[-7.04509449 56.32155609]
[7.59934568 59.56814957]
[10.95489311 57.72154999]
[15.44631672 57.61271667]
[20.14103889 59.79100800]
[23.88380051 64.31463623]
[37.97919083 69.44493866]
[52.07458115 74.57524109]
[66.16996765 79.70554352]
[80.77600861 76.78784180]
[91.09761047 88.77846527]
[104.89907837 86.53989410]
[114.03269196 97.12614441]
[128.12808228 102.25644684]
[136.80749512 95.15403748]
[147.61596680 92.48767090]
[158.44111633 94.70549011]
[167.19848633 101.30811310]
[172.23292542 110.95889282]
[172.63119507 121.75404358]
[185.93635559 128.68026733]
[201.74993896 128.18940735]
[209.46649170 140.92927551]
[222.77165222 147.85551453]
[236.07681274 154.78173828]
[245.44963074 156.04411316]
[249.80148315 162.31135559]
[262.79187012 169.81135559]
[278.59805298 167.06469727]
[290.50436401 177.81732178]
[289.37731934 193.82072449]
[276.08148193 202.79849243]
[260.81628418 197.86361694]
[255.29187012 182.80172729]
[242.30148315 175.30172729]
[229.15058899 168.08689880]
[215.84541321 161.16067505]
[202.54025269 154.23443604]
[187.67834473 155.22071838]
[179.01013184 141.98542786]
[165.70497131 135.05920410]
[148.00111389 142.47700500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[4 40]
[6 38]
[7 37]
[8 36]
[9 35]
[10 31]
[11 30]
[13 28]
[15 26]
[16 25]
[17 24]
[18 23]
[49 70]
[50 69]
[52 67]
[53 66]
[54 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
