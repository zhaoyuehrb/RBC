%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCUUGCGCGCUGGGGACAACCGUUGCUGGGUGUCCCAGGGCCUGAGGCAGGACGGUACUCCGCUGACACCUUCCCUUUCGGCCUUGAGGUUCCCAGCCUGGUGGCCCCAGGACGUUCCGGUCGCAUGGCAGAGUGCUACGGACGACGCCU\
) } def
/len { sequence length } bind def

/coor [
[114.59657288 125.12141418]
[110.69019318 110.63951874]
[103.44904327 112.59289551]
[98.38227844 126.71125031]
[93.31551361 140.82960510]
[88.24874878 154.94795227]
[91.69998932 170.97982788]
[79.36167908 181.78253174]
[63.92641449 176.24314880]
[61.27267456 160.06015015]
[74.13039398 149.88119507]
[79.19715881 135.76284790]
[84.26392365 121.64448547]
[89.33068848 107.52613831]
[87.81316376 92.60309601]
[80.00811005 79.79367828]
[72.20306396 66.98426056]
[64.39801025 54.17484283]
[56.59296036 41.36542130]
[49.41205978 35.62295914]
[48.76256561 28.21635628]
[35.13455582 20.17969704]
[35.42131424 5.28785133]
[27.87747574 -7.67712021]
[20.33363724 -20.64209175]
[12.78979683 -33.60706329]
[0.50823480 -37.67129898]
[-5.49798393 -48.67358398]
[-2.47367430 -60.42398071]
[-9.75320339 -73.53917694]
[-17.03273392 -86.65438080]
[-24.31226349 -99.76957703]
[-31.59179115 -112.88477325]
[-38.87132263 -125.99997711]
[-52.33365631 -134.31118774]
[-51.74514389 -149.19415283]
[-58.68742371 -155.22291565]
[-59.03622818 -162.64974976]
[-66.04845428 -175.90979004]
[-73.19470215 -189.09808350]
[-80.47423553 -202.21328735]
[-87.75376129 -215.32849121]
[-95.03329468 -228.44367981]
[-102.31282043 -241.55888367]
[-109.59235382 -254.67408752]
[-116.87187958 -267.78927612]
[-132.86564636 -276.86010742]
[-131.95285034 -294.36022949]
[-139.49668884 -307.32519531]
[-147.04052734 -320.29019165]
[-154.58436584 -333.25515747]
[-170.75868225 -341.99996948]
[-170.20074463 -359.51501465]
[-178.00579834 -372.32443237]
[-185.81083679 -385.13385010]
[-203.91120911 -393.91918945]
[-203.67433167 -413.21963501]
[-211.99208069 -425.70220947]
[-220.30982971 -438.18481445]
[-228.62757874 -450.66738892]
[-244.01278687 -455.21438599]
[-249.91658020 -470.13165283]
[-241.81010437 -483.97592163]
[-225.91192627 -486.12710571]
[-214.41777039 -474.93493652]
[-216.14498901 -458.98513794]
[-207.82723999 -446.50256348]
[-199.50949097 -434.01995850]
[-191.19174194 -421.53735352]
[-180.96224976 -420.42288208]
[-172.88607788 -413.69665527]
[-169.81304932 -403.41543579]
[-173.00141907 -392.93890381]
[-165.19638062 -380.12948608]
[-157.39132690 -367.32006836]
[-145.68128967 -364.14303589]
[-139.08398438 -353.48468018]
[-141.61938477 -340.79898071]
[-134.07554626 -327.83401489]
[-126.53171539 -314.86904907]
[-118.98787689 -301.90408325]
[-107.34464264 -298.49038696]
[-100.96469879 -287.70050049]
[-103.75668335 -275.06881714]
[-96.47714996 -261.95361328]
[-89.19762421 -248.83840942]
[-81.91809082 -235.72322083]
[-74.63856506 -222.60801697]
[-67.35903168 -209.49281311]
[-60.07950592 -196.37762451]
[-54.04813766 -192.02995300]
[-52.78841782 -182.92202759]
[-45.77618790 -169.66198730]
[-38.62994385 -156.47369385]
[-25.68829155 -149.10057068]
[-25.75612259 -133.27951050]
[-18.47659302 -120.16430664]
[-11.19706345 -107.04911041]
[-3.91753387 -93.93390656]
[3.36199546 -80.81871033]
[10.64152527 -67.70350647]
[26.14451218 -59.53372574]
[25.75476837 -41.15090179]
[33.29860687 -28.18593025]
[40.84244919 -15.22095966]
[48.38628769 -2.25598788]
[61.47471237 4.85333014]
[61.72753906 20.67251587]
[69.40237427 33.56037140]
[77.20742798 46.36978912]
[85.01248169 59.17920685]
[92.81752777 71.98862457]
[100.62258148 84.79804230]
[142.06840515 93.29959106]
[153.54820251 102.95433807]
[162.18458557 106.10936737]
[165.16026306 112.92295837]
[176.44203186 122.80838013]
[187.72380066 132.69380188]
[199.20359802 142.34855652]
[210.87672424 151.76866150]
[222.54983521 161.18875122]
[234.22296143 170.60885620]
[247.39788818 167.64506531]
[259.68768311 172.75354004]
[266.67190552 183.85330200]
[265.97970581 196.75407410]
[277.45950317 206.40882874]
[288.93930054 216.06356812]
[300.41912842 225.71832275]
[316.14126587 224.10908508]
[328.34347534 234.15306091]
[329.78640747 249.89134216]
[319.61398315 261.98669434]
[303.86132812 263.26312256]
[291.87420654 252.96339417]
[290.76437378 237.19812012]
[279.28457642 227.54336548]
[267.80477905 217.88862610]
[256.32495117 208.23388672]
[239.67520142 210.40934753]
[226.32305908 199.68096924]
[224.80285645 182.28198242]
[213.12973022 172.86187744]
[201.45661926 163.44177246]
[189.78350830 154.02166748]
[184.96917725 153.63961792]
[180.35964966 150.19027710]
[177.83837891 143.97557068]
[166.55661011 134.09014893]
[155.27482605 124.20472717]
[143.89346313 114.43414307]
[132.41366577 104.77939606]
[125.17250061 106.73277283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[15 113]
[16 112]
[17 111]
[18 110]
[19 109]
[21 108]
[23 106]
[24 105]
[25 104]
[26 103]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[36 94]
[38 93]
[39 92]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[48 81]
[49 80]
[50 79]
[51 78]
[53 75]
[54 74]
[55 73]
[57 69]
[58 68]
[59 67]
[60 66]
[114 153]
[115 152]
[117 151]
[118 150]
[119 149]
[120 146]
[121 145]
[122 144]
[123 143]
[127 140]
[128 139]
[129 138]
[130 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
