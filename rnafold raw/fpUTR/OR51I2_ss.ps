%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUCCUCCAGCAAGUGCAACUGUUAGAAUUCUCCAAGUCAGAAGAUCUGACUCUGAAAAGUACCCUAAGUUUGUUUUGCU\
) } def
/len { sequence length } bind def

/coor [
[26.41277122 359.96075439]
[21.26654053 374.43182373]
[9.56383991 384.37881470]
[-5.54736376 387.12600708]
[-20.00223160 381.93444824]
[-29.91247940 370.20062256]
[-32.61229706 355.08087158]
[-27.37544823 340.64236450]
[-15.61061954 330.76892090]
[-0.48249075 328.11651611]
[4.58776236 313.99942017]
[9.65801525 299.88232422]
[14.72826862 285.76522827]
[19.79852104 271.64813232]
[24.86877441 257.53100586]
[24.14715195 249.98016357]
[30.41307259 242.97662354]
[36.02032852 229.06408691]
[41.62758636 215.15155029]
[47.23484039 201.23901367]
[40.53510284 190.05976868]
[41.59323883 176.87289429]
[50.24250412 166.60485840]
[63.43791199 163.22419739]
[69.57394409 149.53665161]
[75.70996857 135.84909058]
[81.84600067 122.16153717]
[73.20991516 110.14854431]
[71.71916962 95.42876434]
[77.77136993 81.92821503]
[89.75229645 73.24768829]
[104.46644592 71.70243073]
[110.60247803 58.01487732]
[107.41788483 38.28573227]
[123.08361816 27.21745682]
[128.15386963 13.10035706]
[132.95277405 -1.11127388]
[137.47859192 -15.41222000]
[142.00439453 -29.71316528]
[146.53021240 -44.01411057]
[151.05601501 -58.31505585]
[155.58183289 -72.61600494]
[160.10763550 -86.91694641]
[159.12207031 -103.84222412]
[175.11306763 -109.47465515]
[184.95213318 -95.66780853]
[174.40858459 -82.39114380]
[169.88276672 -68.09019470]
[165.35696411 -53.78924942]
[160.83114624 -39.48830414]
[156.30534363 -25.18735695]
[151.77954102 -10.88641071]
[147.25372314 3.41453505]
[148.26403809 10.93221569]
[142.27096558 18.17061043]
[137.20071411 32.28771210]
[142.49131775 41.39239883]
[141.74110413 52.11922836]
[134.95959473 60.74941635]
[124.29003143 64.15090942]
[118.15399933 77.83846283]
[126.79008484 89.85145569]
[128.28083801 104.57123566]
[122.22863007 118.07178497]
[110.24770355 126.75231171]
[95.53355408 128.29757690]
[89.39752197 141.98512268]
[83.26149750 155.67268372]
[77.12546539 169.36022949]
[83.67097473 185.44953918]
[76.80712891 201.04103088]
[61.14737701 206.84626770]
[55.54012299 220.75880432]
[49.93286514 234.67134094]
[44.32561111 248.58387756]
[38.98587418 262.60125732]
[33.91562271 276.71838379]
[28.84536934 290.83547974]
[23.77511597 304.95257568]
[18.70486259 319.06967163]
[13.63461018 333.18676758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[17 75]
[18 74]
[19 73]
[20 72]
[24 69]
[25 68]
[26 67]
[27 66]
[32 61]
[33 60]
[35 56]
[36 55]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
