%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAGGGUCGGGGCCACCGCGCGGCGACCUCGGGUCCCGGAGCGACCGCAGGGCAGCCCCGGGCGCCGGCCCCGGUGCGCGUCUCCUGUGCGCGCCCCUCCGCGCGCGGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[38.03498459 360.25613403]
[33.63214874 374.59542847]
[29.22930908 388.93469238]
[33.42444229 404.78817749]
[21.60334396 416.15451050]
[5.92654324 411.34100342]
[2.52099061 395.29934692]
[14.89002609 384.53186035]
[19.29286575 370.19256592]
[23.69570351 355.85330200]
[27.70862770 341.40005493]
[31.32869720 326.84344482]
[34.94876480 312.28680420]
[38.56883240 297.73019409]
[42.18890381 283.17358398]
[45.80897141 268.61697388]
[39.82274246 258.00967407]
[42.81715775 245.78869629]
[53.70350266 238.71051025]
[57.71642685 224.25726318]
[61.72935104 209.80400085]
[65.74227905 195.35075378]
[69.75520325 180.89750671]
[73.76812744 166.44425964]
[77.78105164 151.99101257]
[73.73068237 137.65769958]
[84.87789154 126.43048859]
[74.19086456 116.15975189]
[69.61901093 102.06015015]
[72.24556732 87.47241974]
[81.44821167 75.85295105]
[75.52083588 62.07375717]
[69.59345245 48.29456329]
[63.66607666 34.51536942]
[49.25885010 28.59341240]
[43.44393539 14.53491211]
[49.17840576 0.83631873]
[43.25102615 -12.94287491]
[37.32364655 -26.72206879]
[31.39627075 -40.50126266]
[25.46889114 -54.28045654]
[12.90805149 -63.90001297]
[14.98634624 -78.64891052]
[9.05896759 -92.42810822]
[-5.34825897 -98.35005951]
[-11.16317368 -112.40856171]
[-5.42870569 -126.10715485]
[-11.35608387 -139.88635254]
[-24.81678200 -149.25340271]
[-23.16559982 -165.56921387]
[-8.10113144 -172.04946899]
[4.87959003 -162.02784729]
[2.42311025 -145.81372070]
[8.35048866 -132.03453064]
[22.23919678 -126.77721405]
[28.44668961 -112.88758850]
[22.83816147 -98.35548401]
[28.76553917 -84.57628632]
[40.90241241 -75.94231415]
[39.24808502 -60.20783615]
[45.17546463 -46.42864227]
[51.10284042 -32.64944839]
[57.03022003 -18.87025261]
[62.95759964 -5.09105921]
[76.84630585 0.16625854]
[83.05380249 14.05588341]
[77.44527435 28.58799171]
[83.37265015 42.36718369]
[89.30002594 56.14637756]
[95.22740936 69.92557526]
[103.87648773 69.79698944]
[112.21276093 72.10560608]
[119.56354523 76.66512299]
[125.33567047 83.10761261]
[129.06336975 90.91321564]
[144.04136658 90.10112762]
[159.01936340 89.28904724]
[173.99736023 88.47696686]
[188.97537231 87.66487885]
[203.95336914 86.85279846]
[218.93136597 86.04071045]
[233.90937805 85.22863007]
[242.44020081 81.59856415]
[249.30288696 84.60293579]
[262.98696899 75.56536102]
[277.53280640 83.13838196]
[277.97689819 99.53150940]
[263.86239624 107.88091278]
[249.70907593 99.59743500]
[234.72145081 100.20662689]
[219.74345398 101.01871490]
[204.76545715 101.83079529]
[189.78744507 102.64288330]
[174.80944824 103.45496368]
[159.83145142 104.26705170]
[144.85345459 105.07913208]
[129.87544250 105.89121246]
[119.07770538 123.73372650]
[99.33114624 130.44342041]
[103.09448242 145.81051636]
[92.23429871 156.00393677]
[88.22137451 170.45718384]
[84.20845032 184.91043091]
[80.19552612 199.36367798]
[76.18260193 213.81692505]
[72.16967773 228.27018738]
[68.15675354 242.72343445]
[73.21222687 260.36560059]
[60.36558914 272.23703003]
[56.74551773 286.79364014]
[53.12545013 301.35025024]
[49.50538254 315.90689087]
[45.88531494 330.46350098]
[42.26524734 345.02011108]
[43.76997757 351.68057251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[11 114]
[12 113]
[13 112]
[14 111]
[15 110]
[16 109]
[19 107]
[20 106]
[21 105]
[22 104]
[23 103]
[24 102]
[25 101]
[27 99]
[31 70]
[32 69]
[33 68]
[34 67]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[43 58]
[44 57]
[47 54]
[48 53]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
