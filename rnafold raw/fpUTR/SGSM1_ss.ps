%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCCCGCCCCGCCGCGGCUGCAGCAGCAGCGCCGCGGCCGGAGGAGCUACCGCCGCCACCGCCGCCACCGCCUCCUGGGACUCGGAACGCAGCGCUCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[48.70463181 354.30429077]
[51.46517944 335.12020874]
[51.90967941 320.12680054]
[52.35417938 305.13336182]
[44.99742889 292.18240356]
[53.14027405 278.61758423]
[53.58477402 263.62417603]
[54.02927399 248.63075256]
[43.90812683 240.50645447]
[40.30907059 227.83351135]
[44.78000641 215.23356628]
[55.88208008 207.43869019]
[56.77068710 192.46504211]
[57.65929794 177.49137878]
[50.68955612 164.32810974]
[59.23080063 151.01052856]
[60.11941147 136.03688049]
[61.00801849 121.06321716]
[50.40141678 110.45661926]
[35.42776108 111.34522247]
[20.45410538 112.23383331]
[5.48044920 113.12244415]
[-9.49320698 114.01105499]
[-22.87931252 123.48439789]
[-37.66136932 116.38349152]
[-38.63286591 100.01314545]
[-24.79440880 91.21376801]
[-10.38181591 99.03739929]
[4.59183979 98.14878845]
[19.56549644 97.26017761]
[34.53915024 96.37156677]
[49.51280975 95.48296356]
[58.79048538 83.69632721]
[56.13713074 68.93286896]
[46.08072662 56.71897125]
[51.44468689 42.82374954]
[48.79133224 28.06028938]
[46.13797760 13.29683018]
[43.48462296 -1.46662807]
[29.75008965 -16.07449341]
[36.68235397 -34.02262497]
[33.15906525 -48.60297012]
[29.63577271 -63.18331146]
[18.87347221 -74.78001404]
[23.40484619 -88.96859741]
[19.88155556 -103.54894257]
[6.99476624 -113.10457611]
[6.57490349 -129.14213562]
[18.94404984 -139.35897827]
[34.61365509 -135.91760254]
[41.56333923 -121.45795441]
[34.46189880 -107.07222748]
[37.98519135 -92.49188995]
[48.49548340 -81.93807220]
[44.21611786 -66.70660400]
[47.73940659 -52.12625885]
[51.26269913 -37.54591751]
[60.59076309 -32.91382599]
[65.86298370 -23.67597961]
[65.07496643 -12.84654903]
[58.24808121 -4.11998224]
[60.90143585 10.64347649]
[63.55479050 25.40693474]
[66.20814514 40.17039490]
[76.07476044 51.32831192]
[70.90058899 66.27951813]
[73.55394745 81.04297638]
[93.15846252 70.66939545]
[113.04859924 75.56902313]
[123.65156555 91.08320618]
[138.62521362 90.19459534]
[153.59887695 89.30598450]
[168.51824951 87.75279999]
[183.35385132 85.53810120]
[198.18945312 83.32340240]
[212.96226501 75.00473785]
[225.04536438 86.89739227]
[216.96240234 101.80048370]
[200.40414429 98.15900421]
[185.56854248 100.37370300]
[170.73294067 102.58840179]
[168.30343628 105.35207367]
[164.34497070 106.99587250]
[159.43875122 106.78189087]
[154.48748779 104.27964020]
[139.51382446 105.16825104]
[124.54016876 106.05686188]
[115.84654236 122.71619415]
[96.67550659 129.93389893]
[75.98167419 121.95182800]
[75.09306335 136.92547607]
[74.20445251 151.89913940]
[81.11063385 166.13343811]
[72.63295746 178.37998962]
[71.74434662 193.35365295]
[70.85573578 208.32730103]
[82.68904877 221.10566711]
[81.71944427 238.15841675]
[69.02268982 249.07525635]
[68.57818604 264.06866455]
[68.13368988 279.06207275]
[75.45864105 293.08547974]
[67.34758759 305.57788086]
[66.90309143 320.57128906]
[66.45858765 335.56469727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 105]
[3 104]
[4 103]
[6 101]
[7 100]
[8 99]
[12 96]
[13 95]
[14 94]
[16 92]
[17 91]
[18 90]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[33 67]
[34 66]
[36 64]
[37 63]
[38 62]
[39 61]
[41 57]
[42 56]
[43 55]
[45 53]
[46 52]
[70 87]
[71 86]
[72 85]
[73 81]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
