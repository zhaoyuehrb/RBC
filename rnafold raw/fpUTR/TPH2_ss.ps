%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUGCUCUUCAGCACCAGGGUUCUGGACAGCGCCCCAAGCAGGCAGCUGAUCGCACGCCCCUUCCUCUCAAUCUCCGCCAGCGCUGCUACUGCCCCUCUAGUACCCCCUGCUGCAGAGAAAGAAUAUUACACCGGGAUCC\
) } def
/len { sequence length } bind def

/coor [
[177.98815918 488.34826660]
[180.20471191 473.45599365]
[185.46949768 459.35009766]
[193.55233765 446.64727783]
[204.09989929 435.90286255]
[216.65107727 427.58651733]
[211.14154053 413.63497925]
[205.63201904 399.68347168]
[200.12249756 385.73193359]
[188.25128174 376.73620605]
[190.37892151 361.05871582]
[184.86940002 347.10717773]
[179.35987854 333.15563965]
[173.85035706 319.20413208]
[168.34083557 305.25259399]
[155.87742615 301.80639648]
[147.56973267 291.64382935]
[146.64338684 278.35485840]
[153.66326904 266.80447388]
[148.46372986 252.73448181]
[143.26419067 238.66448975]
[138.06465149 224.59449768]
[126.39533234 215.33834839]
[128.86927795 199.71176147]
[123.66973877 185.64175415]
[118.47020721 171.57176208]
[113.27066803 157.50177002]
[108.07112885 143.43177795]
[94.47599030 137.45616150]
[89.00248718 123.26125336]
[95.36243439 109.04194641]
[89.79418945 103.11883545]
[90.20726776 94.60276031]
[85.32025909 80.42118835]
[71.83295441 77.36888885]
[61.70926285 68.10899353]
[57.53592682 55.15320969]
[60.30689240 41.93773270]
[69.18907928 31.91199684]
[64.61698914 17.62577820]
[60.04490280 3.33956099]
[55.47281647 -10.94665718]
[50.90073013 -25.23287582]
[45.26150131 -32.52143478]
[46.38930511 -39.88595581]
[40.91269302 -47.29748154]
[42.20314026 -54.63525009]
[38.26745605 -69.10972595]
[34.33177185 -83.58419800]
[30.39608955 -98.05867004]
[26.57132530 -101.84078979]
[24.81140137 -106.27734375]
[25.01246071 -110.45077515]
[26.71367455 -113.62441254]
[23.74664497 -128.32804871]
[8.68712902 -129.26257324]
[-5.61706448 -134.06387329]
[-18.19064903 -142.40458679]
[-28.17633820 -153.71601868]
[-34.89329147 -167.22692871]
[-37.88353348 -182.01614380]
[-36.94318390 -197.07530212]
[-32.13636017 -211.37763977]
[-23.79080200 -223.94799805]
[-12.47551727 -233.92932129]
[1.03799546 -240.64105225]
[15.82836342 -243.62559509]
[30.88715553 -242.67942810]
[45.18763733 -237.86708069]
[57.75477600 -229.51667786]
[67.73172760 -218.19754028]
[74.43824005 -204.68142700]
[77.41706085 -189.88990784]
[76.46508789 -174.83148193]
[71.64722443 -160.53286743]
[63.29195786 -147.96894836]
[51.96896744 -137.99636841]
[38.45027542 -131.29507446]
[41.41730499 -116.59144592]
[44.87056351 -101.99435425]
[48.80624771 -87.51988220]
[52.74193192 -73.04541016]
[56.67761612 -58.57093430]
[60.77317047 -44.14088058]
[65.18695068 -29.80496216]
[69.75903320 -15.51874352]
[74.33112335 -1.23252547]
[78.90320587 13.05369282]
[83.47529602 27.33991051]
[99.19171906 31.95317078]
[109.18433380 45.13994598]
[109.37878418 61.84970093]
[99.50183868 75.53417969]
[104.38884735 89.71575165]
[109.43243408 103.84240723]
[123.51065826 110.50882721]
[128.58329773 124.85187531]
[122.14112091 138.23223877]
[127.34066010 152.30223083]
[132.54020691 166.37222290]
[137.73974609 180.44223022]
[142.93927002 194.51222229]
[154.98049927 204.77474976]
[152.13464355 219.39495850]
[157.33418274 233.46495056]
[162.53372192 247.53494263]
[167.73326111 261.60494995]
[183.72929382 268.59222412]
[189.64385986 284.65682983]
[182.29235840 299.74307251]
[187.80187988 313.69461060]
[193.31140137 327.64611816]
[198.82093811 341.59765625]
[204.33045959 355.54919434]
[216.59576416 365.54281616]
[214.07402039 380.22241211]
[219.58355713 394.17395020]
[225.09307861 408.12545776]
[230.60260010 422.07699585]
[245.44940186 419.57376099]
[260.49218750 420.21243286]
[275.07339478 423.96511841]
[288.55554199 430.66772461]
[300.34927368 440.02728271]
[309.93902588 451.63464355]
[316.90557861 464.98233032]
[320.94433594 479.48687744]
[321.87881470 494.51422119]
[319.66809082 509.40737915]
[314.40887451 523.51531982]
[306.33102417 536.22131348]
[295.78768921 546.96990967]
[283.23980713 555.29119873]
[269.23587036 560.82141113]
[254.38807678 563.31878662]
[239.34553528 562.67419434]
[224.76582336 558.91577148]
[211.28630066 552.20788574]
[199.49624634 542.84362793]
[189.91105652 531.23254395]
[182.94978333 517.88208008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 119]
[7 118]
[8 117]
[9 116]
[11 114]
[12 113]
[13 112]
[14 111]
[15 110]
[19 107]
[20 106]
[21 105]
[22 104]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[31 95]
[33 94]
[34 93]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[45 84]
[47 83]
[48 82]
[49 81]
[50 80]
[54 79]
[55 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
