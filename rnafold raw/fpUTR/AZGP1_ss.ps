%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUGGCCUGUAGAUUCACCUCCCCUGGGCAGGGCCCCAGGACCCAGGAUAAUAUCUGUGCCUCCUGCCCAGAACCCUCCAAGCAGACACA\
) } def
/len { sequence length } bind def

/coor [
[51.40847778 469.81472778]
[36.28553391 468.27685547]
[22.90463638 461.06436157]
[13.30627632 449.27709961]
[8.95413399 434.71249390]
[10.51187992 419.59158325]
[17.74196815 406.22018433]
[29.54186249 396.63735962]
[44.11216736 392.30438232]
[45.62969208 377.38131714]
[47.14721680 362.45828247]
[48.66474152 347.53524780]
[35.64562988 343.16329956]
[23.85268402 336.11193848]
[13.82999229 326.70312500]
[6.04068756 315.36773682]
[0.84553546 302.62573242]
[-1.51377118 289.06225586]
[-0.92585468 275.30099487]
[2.58509254 261.97518921]
[8.86028957 249.69879150]
[17.61354446 239.03793335]
[28.44430923 230.48498535]
[40.85600281 224.43572998]
[54.27878571 221.17108154]
[68.09571075 220.84403992]
[71.11518860 206.15109253]
[74.13466644 191.45814514]
[77.15414429 176.76519775]
[80.17362213 162.07223511]
[83.19309998 147.37928772]
[86.21257782 132.68634033]
[89.23205566 117.99339294]
[92.25153351 103.30044556]
[90.73614502 101.00087738]
[89.96542358 98.09692383]
[90.15900421 94.84565735]
[91.44477081 91.57842255]
[93.83535004 88.66779327]
[97.21627808 86.48762512]
[102.66268921 72.51133728]
[108.10909271 58.53504944]
[108.33595276 49.19144440]
[113.98269653 44.18381119]
[112.31462097 28.45078659]
[124.44395447 19.80620956]
[130.35928345 6.02184296]
[136.27462769 -7.76252413]
[128.21981812 -21.02524185]
[129.53251648 -36.48669434]
[139.70797729 -48.20162964]
[154.83351135 -51.66542435]
[169.09304810 -45.54617691]
[177.00350952 -32.19685745]
[175.52314758 -16.75055885]
[165.22120667 -5.14669371]
[150.05899048 -1.84718645]
[144.14366150 11.93718052]
[138.22831726 25.72154808]
[140.31950378 40.46862411]
[127.76706696 50.09915161]
[122.08538055 63.98145676]
[116.63897705 77.95774841]
[111.19256592 91.93403625]
[106.94448090 106.31992340]
[103.92500305 121.01287079]
[100.90552521 135.70582581]
[97.88604736 150.39877319]
[94.86656952 165.09172058]
[91.84709167 179.78466797]
[88.82761383 194.47761536]
[85.80813599 209.17056274]
[82.78865814 223.86351013]
[97.55316162 230.98257446]
[110.03561401 241.59048462]
[119.43136597 254.99673462]
[125.13644409 270.33062744]
[126.78635406 286.59783936]
[124.27938843 302.74496460]
[117.78286743 317.72753906]
[107.72199249 330.57788086]
[94.75199890 340.46731567]
[79.71550751 346.75979614]
[63.58778000 349.05276489]
[62.07025528 363.97583008]
[60.55273056 378.89886475]
[59.03520584 393.82189941]
[72.43502808 400.99914551]
[82.06436920 412.76113892]
[86.45481110 427.31423950]
[84.93685913 442.43917847]
[77.74197388 455.82955933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 87]
[10 86]
[11 85]
[12 84]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[40 64]
[41 63]
[42 62]
[44 61]
[46 59]
[47 58]
[48 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
