%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAUGCGCGGGCGGCGGACGGGGCGCUCUCCUCCCGUCUGACUCUGGGCGGAGCGGGGCUCGAGGCUGCUGGAGUCGCUCGCUGACUCGCCCUGCGCCCUCGCCGCGGACACCGGAGCUGCGGCCGCUCCCCGCUGUCCCCCAGAG\
) } def
/len { sequence length } bind def

/coor [
[-86.35562897 279.60766602]
[-86.96401978 287.65148926]
[-89.93134308 295.64666748]
[-95.25727081 302.88973999]
[-102.73049164 308.67965698]
[-111.93169403 312.38107300]
[-117.81870270 326.17755127]
[-115.31475830 342.38439941]
[-128.26608276 352.44400024]
[-143.34945679 346.00787354]
[-145.04840088 329.69696045]
[-131.61518860 320.29055786]
[-125.72817993 306.49404907]
[-130.91772461 301.07937622]
[-141.29679871 290.25003052]
[-146.48634338 284.83535767]
[-160.52026367 290.13153076]
[-174.55416870 295.42770386]
[-188.58807373 300.72387695]
[-202.62199402 306.02001953]
[-216.65589905 311.31619263]
[-230.68980408 316.61236572]
[-244.72372437 321.90853882]
[-258.75762939 327.20468140]
[-262.72848511 342.20507812]
[-274.77923584 351.98052979]
[-290.27609253 352.77215576]
[-303.26022339 344.27557373]
[-308.73895264 329.75790405]
[-304.60562134 314.80145264]
[-292.44952393 305.15731812]
[-276.94497681 304.53384399]
[-264.05380249 313.17077637]
[-250.01988220 307.87460327]
[-235.98597717 302.57846069]
[-221.95205688 297.28228760]
[-207.91815186 291.98611450]
[-193.88424683 286.68997192]
[-179.85032654 281.39379883]
[-165.81642151 276.09762573]
[-151.78251648 270.80145264]
[-127.75292969 246.69850159]
[-100.69131470 254.17988586]
[-89.02077484 244.75657654]
[-77.35024261 235.33328247]
[-65.67970276 225.90997314]
[-54.00917053 216.48667908]
[-42.33863449 207.06338501]
[-30.66809654 197.64007568]
[-27.41732407 190.94454956]
[-18.64837074 188.14378357]
[-6.78045034 178.97032166]
[5.08746958 169.79685974]
[16.75800514 160.37356567]
[28.22590065 150.70466614]
[39.69379425 141.03578186]
[51.16168976 131.36689758]
[62.62958145 121.69800568]
[74.09747314 112.02911377]
[70.42924500 94.75296021]
[77.73510742 77.70880127]
[94.27651215 67.52127838]
[114.54810333 68.76985931]
[119.84426880 54.73595047]
[125.14043427 40.70203781]
[130.43659973 26.66812897]
[128.07015991 11.02490234]
[139.80285645 1.84921098]
[145.09901428 -12.18469906]
[150.39518738 -26.21860886]
[141.12333679 -43.96976089]
[147.68852234 -62.56948090]
[165.49467468 -70.32551575]
[169.88702393 -84.66802216]
[174.27935791 -99.01052094]
[178.67170715 -113.35301971]
[183.06404114 -127.69552612]
[187.45639038 -142.03802490]
[181.23147583 -156.82417297]
[189.03678894 -170.84046936]
[204.88475037 -173.33482361]
[216.61814880 -162.39376831]
[215.23614502 -146.41035461]
[201.79888916 -137.64567566]
[197.40653992 -123.30318451]
[193.01420593 -108.96067810]
[188.62185669 -94.61817932]
[184.22952271 -80.27568054]
[179.83717346 -65.93317413]
[186.99125671 -58.40704727]
[190.36743164 -48.50166702]
[189.28237915 -38.01154327]
[183.86753845 -28.86726952]
[175.05746460 -22.78023148]
[164.42909241 -20.92244339]
[159.13291931 -6.88853407]
[153.83676147 7.14537621]
[156.58201599 21.78480339]
[144.47050476 31.96429443]
[139.17434692 45.99820328]
[133.87818909 60.03211594]
[128.58201599 74.06602478]
[136.31062317 86.92171478]
[151.18913269 88.82698059]
[166.06762695 90.73224640]
[180.94613647 92.63751221]
[195.82464600 94.54277802]
[210.70315552 96.44805145]
[225.58166504 98.35331726]
[234.56208801 96.33078003]
[240.75448608 100.46017456]
[253.31045532 90.86209869]
[268.96444702 93.03642273]
[278.42926025 105.69316864]
[276.08953857 121.32331085]
[263.33343506 130.65376282]
[247.72889709 128.14892578]
[238.53384399 115.29489136]
[223.67639160 113.23181915]
[208.79788208 111.32655334]
[193.91937256 109.42128754]
[179.04087830 107.51602173]
[164.16236877 105.61075592]
[149.28385925 103.70548248]
[134.40534973 101.80021667]
[129.56126404 115.27347565]
[119.91256714 125.17126465]
[107.48883057 129.99591064]
[94.67720032 129.25778198]
[83.76636505 123.49700928]
[72.29846954 133.16589355]
[60.83057785 142.83479309]
[49.36268234 152.50367737]
[37.89478683 162.17256165]
[26.42689514 171.84144592]
[23.78112793 178.02273560]
[19.09193039 181.38578796]
[14.26093483 181.66477966]
[2.39301491 190.83824158]
[-9.47490501 200.01170349]
[-21.24479675 209.31062317]
[-32.91533279 218.73391724]
[-44.58586884 228.15721130]
[-56.25640488 237.58052063]
[-67.92694092 247.00381470]
[-79.59748077 256.42712402]
[-91.26801300 265.85040283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 13]
[7 12]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[43 147]
[44 146]
[45 145]
[46 144]
[47 143]
[48 142]
[49 141]
[51 140]
[52 139]
[53 138]
[54 135]
[55 134]
[56 133]
[57 132]
[58 131]
[59 130]
[63 102]
[64 101]
[65 100]
[66 99]
[68 97]
[69 96]
[70 95]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[103 125]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
