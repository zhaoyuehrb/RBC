%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUCGCUGCACAGUCUGUCUCUUCGCCGGUUCCCGGCCCCGUGGAUCCUACUUCUCUGUCGCCCGCGGUUCGCCGCCCCGCUCGCCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[102.93646240 116.85978699]
[97.13896942 130.69413757]
[91.34148407 144.52847290]
[85.54399872 158.36282349]
[84.99866486 175.30799866]
[68.56475067 179.47486877]
[60.01136398 164.83670044]
[71.70964813 152.56533813]
[77.50714111 138.73098755]
[83.30462646 124.89664459]
[89.10211182 111.06230164]
[86.63319397 96.26687622]
[76.65782928 85.06455994]
[66.68245697 73.86223602]
[56.70708847 62.65991211]
[46.47382355 67.87754059]
[35.36208344 70.74956512]
[23.90169907 71.14341736]
[12.63818359 69.04458618]
[2.10675788 64.55709839]
[-7.19307709 57.89839935]
[-14.82123280 49.38879395]
[-20.41786003 39.43605423]
[-23.72031593 28.51587296]
[-24.57550049 17.14913368]
[-22.94693375 5.87706280]
[-18.91630173 -4.76454020]
[-31.19567299 -13.37947083]
[-43.47504425 -21.99440002]
[-55.75441742 -30.60933113]
[-68.03379059 -39.22425842]
[-84.47268677 -43.37144470]
[-85.03831482 -60.31595230]
[-68.91258240 -65.55018616]
[-59.41886139 -51.50363159]
[-47.13948822 -42.88870239]
[-34.86011505 -34.27377319]
[-22.58074379 -25.65884209]
[-10.30137157 -17.04391289]
[-3.45761538 -23.12855721]
[4.34508419 -27.92207336]
[12.86605930 -31.27660561]
[21.84248734 -33.08868790]
[22.33843803 -48.08048630]
[22.83438873 -63.07228470]
[23.33033943 -78.06408691]
[17.81100082 -94.09446716]
[31.68700600 -103.83576202]
[44.88886642 -93.19869232]
[38.32213974 -77.56813049]
[37.82618713 -62.57633591]
[37.33023834 -47.58453369]
[36.83428574 -32.59273529]
[56.96920395 -24.50505447]
[72.10655975 -8.89659786]
[79.60427094 11.56043339]
[78.13250732 33.34312820]
[67.90940857 52.68454361]
[77.88478088 63.88686752]
[87.86014557 75.08918762]
[97.83551788 86.29151154]
[109.82333374 95.30772400]
[123.35320282 101.78404236]
[136.88307190 108.26036072]
[149.41650391 104.70599365]
[160.61502075 110.53375244]
[164.62936401 122.07626343]
[177.93771362 128.99638367]
[191.24604797 135.91650391]
[204.55439758 142.83662415]
[217.86273193 149.75672913]
[232.76640320 145.22700500]
[246.16438293 152.43457031]
[250.39093018 166.67085266]
[263.69927979 173.59097290]
[278.69253540 168.59321594]
[292.79077148 175.73571777]
[297.62973022 190.78099060]
[290.33856201 204.80291748]
[275.24298096 209.48254395]
[261.29891968 202.04353333]
[256.77917480 186.89932251]
[243.47080994 179.97920227]
[229.38920593 184.69554138]
[215.79408264 177.86714172]
[210.94262695 163.06507874]
[197.63427734 156.14495850]
[184.32594299 149.22483826]
[171.01759338 142.30471802]
[157.70925903 135.38461304]
[140.33886719 137.18598938]
[130.40675354 121.79022980]
[116.87689209 115.31391144]
[103.34702301 108.83759308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[12 61]
[13 60]
[14 59]
[15 58]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[43 53]
[44 52]
[45 51]
[46 50]
[62 94]
[63 93]
[64 92]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
