%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAGGAGGCGGGCGGGAGGGGGCGCGGUACCGGGAGGGAACGGGGCGGGUCGGGCUUCGAGGUCAGCUGGUCCGCAGGGAAGCCUUUGGCUUCCCCACCGGCA\
) } def
/len { sequence length } bind def

/coor [
[85.45415497 220.46948242]
[75.22353363 231.92506409]
[60.63076401 236.71531677]
[45.60121918 233.55171204]
[34.17777634 223.28524780]
[29.43328094 208.67752075]
[32.64397812 193.65797424]
[42.94620895 182.26676941]
[57.56872177 177.56808472]
[52.61888504 163.52000427]
[63.03281021 151.60948181]
[66.12248993 136.93112183]
[69.21216583 122.25278473]
[57.56431198 112.80146790]
[43.83712769 118.84831238]
[40.68272781 134.04138184]
[29.17788124 144.45379639]
[13.74644089 146.08175659]
[0.32210675 138.29927063]
[-5.93318987 124.09889221]
[-2.61415982 108.94093323]
[9.00296211 98.65394592]
[24.45115471 97.19348907]
[37.79027557 105.12113190]
[51.51745987 99.07427979]
[59.14542770 86.15862274]
[57.81348801 71.21788025]
[56.48154831 56.27713013]
[55.14961243 41.33638382]
[51.21591187 32.90954590]
[54.00630569 25.93420982]
[53.11769867 10.96055412]
[52.22908783 -4.01310253]
[51.34047699 -18.98675919]
[50.45186996 -33.96041489]
[38.91691589 -44.42858505]
[38.22904587 -59.62665939]
[48.27993393 -70.55896759]
[47.39132309 -85.53262329]
[34.48541260 -93.94354248]
[29.07008362 -108.17475891]
[33.02620316 -122.69416809]
[44.63439560 -131.98867798]
[43.74578476 -146.96232605]
[42.85717773 -161.93598938]
[41.96856689 -176.90963745]
[41.07995987 -191.88330078]
[40.19134903 -206.85694885]
[27.53079224 -216.03543091]
[23.78221893 -231.21707153]
[30.71559143 -245.23356628]
[45.05718231 -251.46676636]
[60.03532791 -246.97354126]
[68.57781219 -233.87545776]
[66.65113068 -218.35700989]
[55.16500473 -207.74555969]
[56.05361557 -192.77191162]
[56.94222260 -177.79824829]
[57.83083344 -162.82460022]
[58.71944427 -147.85093689]
[59.60805130 -132.87728882]
[72.23406219 -125.02095032]
[77.87966919 -111.07135773]
[74.18551636 -96.29953766]
[62.36497879 -86.42122650]
[63.25358963 -71.44757080]
[74.52693176 -61.78075409]
[75.64141083 -46.60799408]
[65.42552185 -34.84902191]
[66.31413269 -19.87536812]
[67.20274353 -4.90171194]
[68.09135437 10.07194424]
[68.97996521 25.04560089]
[70.09035492 40.00444412]
[71.42229462 54.94519043]
[72.75423431 69.88594055]
[74.08617401 84.82669067]
[108.60279083 75.65139771]
[121.37683105 103.22080231]
[134.51286316 110.46268463]
[147.64888000 117.70456696]
[160.78491211 124.94644928]
[173.92092896 132.18833923]
[187.05696106 139.43022156]
[200.19297791 146.67210388]
[213.32899475 153.91398621]
[230.11900330 156.26600647]
[232.50685120 173.05094910]
[217.03887939 179.99200439]
[206.08711243 167.05000305]
[192.95109558 159.80812073]
[179.81506348 152.56623840]
[166.67904663 145.32435608]
[153.54302979 138.08247375]
[140.40699768 130.84059143]
[127.27097321 123.59870911]
[114.13494873 116.35682678]
[106.89825439 123.42732239]
[96.20252991 126.95939636]
[83.89051819 125.34246063]
[80.80083466 140.02081299]
[77.71115875 154.69915771]
[82.44000244 169.79711914]
[72.24707031 180.65776062]
[83.73464966 190.85241699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 104]
[11 102]
[12 101]
[13 100]
[14 25]
[15 24]
[26 77]
[27 76]
[28 75]
[29 74]
[31 73]
[32 72]
[33 71]
[34 70]
[35 69]
[38 66]
[39 65]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[79 97]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
