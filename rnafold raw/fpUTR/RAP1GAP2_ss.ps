%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGACCCCGCUGUACCACGGCCCUCUUGCGGACAGCCCCGGGGACGUCGUUGGGACAUCGCUGGGACCCCGGGCUCUGCAGCCACAACC\
) } def
/len { sequence length } bind def

/coor [
[68.43485260 391.58013916]
[53.70724106 388.06216431]
[40.92123032 379.95065308]
[31.46375084 368.12548828]
[26.36068153 353.86935425]
[26.16556358 338.72863770]
[30.89956474 324.34573364]
[40.04917145 312.28076172]
[52.62191010 303.84246826]
[67.25397491 299.94613647]
[68.28884125 284.98187256]
[69.32370758 270.01760864]
[70.35857391 255.05335999]
[71.39344025 240.08911133]
[72.42831421 225.12484741]
[65.31387329 219.20939636]
[61.78517532 210.50529480]
[62.80152130 201.02770996]
[68.25299072 193.03880310]
[76.95551300 188.50782776]
[79.53189850 173.73074341]
[82.10828400 158.95365906]
[84.68466949 144.17657471]
[87.26105499 129.39949036]
[76.12037659 122.95356750]
[68.10226440 112.34781647]
[64.72673798 99.04939270]
[66.84098053 85.06350708]
[74.43777466 72.63130951]
[63.04009628 62.87974548]
[46.99821091 62.68611908]
[37.26176834 49.93538666]
[41.29973221 34.40881348]
[56.01452637 28.01706505]
[70.11821747 35.66333771]
[72.79165649 51.48207092]
[84.18933868 61.23363113]
[98.86869049 58.14873123]
[105.37694550 44.63419724]
[111.88520050 31.11966515]
[118.39345551 17.60513306]
[124.90171051 4.09060001]
[123.91831970 -11.70001507]
[136.41154480 -19.80980110]
[142.91979980 -33.32433319]
[141.93640137 -49.11494827]
[154.42962646 -57.22473526]
[160.93788147 -70.73926544]
[167.44613647 -84.25379944]
[163.52595520 -99.81053162]
[173.35874939 -112.48710632]
[189.40164185 -112.55915070]
[199.34790039 -99.97139740]
[195.56759644 -84.38008881]
[180.96066284 -77.74554443]
[174.45240784 -64.23101044]
[167.94415283 -50.71648026]
[169.39306641 -35.89251709]
[156.43432617 -26.81607819]
[149.92607117 -13.30154514]
[151.37498474 1.52241910]
[138.41624451 10.59885597]
[131.90798950 24.11338806]
[125.39973450 37.62792206]
[118.89147949 51.14245605]
[112.38322449 64.65699005]
[126.06038666 74.37535858]
[133.83543396 88.78182983]
[134.42115784 104.73407745]
[128.05607605 118.92758942]
[116.38195038 128.58012390]
[102.03813934 131.97587585]
[99.46175385 146.75296021]
[96.88536835 161.53004456]
[94.30898285 176.30712891]
[91.73259735 191.08421326]
[100.57509613 210.44091797]
[87.39257050 226.15971375]
[86.35770416 241.12397766]
[85.32283783 256.08822632]
[84.28797150 271.05249023]
[83.25309753 286.01675415]
[82.21823120 300.98101807]
[96.17466736 306.85440063]
[107.46614838 316.94305420]
[114.86787415 330.15264893]
[117.57695007 345.05029297]
[115.29952240 360.01998901]
[108.28262329 373.43795776]
[97.28739929 383.84872437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[15 78]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[29 37]
[30 36]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[44 60]
[45 59]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
