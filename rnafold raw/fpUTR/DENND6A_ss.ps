%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCGGAGGCAAGCGCGCUCUGCGGCGCGGUCCGCUGUGGAGGCGGCGCGAACGGUCAGGGGGCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[97.04179382 127.43438721]
[88.84468842 125.23797607]
[81.70270538 120.65442657]
[76.29137421 114.11727905]
[61.80248642 117.99956512]
[47.31359863 121.88185120]
[32.82471085 125.76413727]
[18.33582306 129.64642334]
[3.84693646 133.52870178]
[-10.64195061 137.41099548]
[-25.04269791 141.60842896]
[-39.34845352 146.11901855]
[-50.02259445 158.56871033]
[-66.08940125 155.28392029]
[-71.02072144 139.64378357]
[-59.74363327 127.73751068]
[-43.85903931 131.81326294]
[-29.55328560 127.30267334]
[-23.94810867 122.12591553]
[-14.52423668 122.92210388]
[-0.03534928 119.03981781]
[14.45353794 115.15753174]
[28.94242477 111.27524567]
[43.43131256 107.39295959]
[57.92020035 103.51067352]
[72.40908813 99.62839508]
[81.35816193 79.65599823]
[102.03451538 72.48168945]
[107.16481781 58.38630295]
[112.29511261 44.29091263]
[117.42541504 30.19552422]
[116.59260559 23.11577034]
[119.27136230 17.65062904]
[123.66644287 15.12835884]
[130.00572205 1.53374207]
[136.34498596 -12.06087494]
[142.68426514 -25.65549088]
[149.02354431 -39.25010681]
[144.90972900 -54.75675583]
[154.58372498 -67.55493164]
[170.62448120 -67.82696533]
[180.72688293 -55.36417770]
[177.14123535 -39.72695541]
[162.61814880 -32.91083527]
[156.27888489 -19.31621742]
[149.93960571 -5.72160053]
[143.60032654 7.87301588]
[137.26106262 21.46763229]
[131.52081299 35.32582474]
[126.39050293 49.42121506]
[121.26020050 63.51660538]
[116.12989807 77.61199188]
[124.71372223 87.72692108]
[127.58506775 100.67871857]
[124.08023834 113.47363281]
[134.68684387 124.08023834]
[145.29344177 134.68684387]
[155.90003967 145.29344177]
[166.50663757 155.90003967]
[182.06790161 154.35697937]
[194.95115662 163.22015381]
[199.07331848 178.30465698]
[192.48802185 192.48802185]
[178.30465698 199.07331848]
[163.22015381 194.95115662]
[154.35697937 182.06790161]
[155.90003967 166.50663757]
[145.29344177 155.90003967]
[134.68684387 145.29344177]
[124.08023834 134.68684387]
[113.47363281 124.08023834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 18]
[12 17]
[28 52]
[29 51]
[30 50]
[31 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
