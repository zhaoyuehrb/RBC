%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUGCUAUAUUUAAGACGGUGCAGUCUCCGGGAUCGCAUUCUUCUCCCGGUGCCCGCUGAGCCGAGGGCAAGAAGAGAACAAGGACCCUCUCGGCCUCAGGAAUCUUCUCCCCAGAGACUCCUAAGUGGGCACACUGCUUCUGUUGUUGCUCUCGUAACC\
) } def
/len { sequence length } bind def

/coor [
[13.16962242 456.31231689]
[-0.10512860 463.29663086]
[-14.83443260 466.13348389]
[-29.75369263 464.57922363]
[-43.58200455 458.76736450]
[-55.13212585 449.19686890]
[-63.41241455 436.68939209]
[-67.71195221 422.31878662]
[-67.66160583 407.31887817]
[-63.26569366 392.97747803]
[-54.90163422 380.52584839]
[-43.28752899 371.03311157]
[-29.42051315 365.31417847]
[-14.49115467 363.86013794]
[0.21877444 366.79577637]
[13.44634151 373.86907959]
[24.05588150 384.47274780]
[31.13678932 397.69717407]
[31.71133041 382.70819092]
[32.28586960 367.71917725]
[32.86041260 352.73019409]
[33.43495178 337.74121094]
[24.41582680 322.71038818]
[34.29531479 307.19641113]
[34.58263779 292.19915771]
[34.86996078 277.20190430]
[35.15728378 262.20468140]
[35.44461060 247.20741272]
[25.61120033 258.53454590]
[11.10551453 254.71551514]
[8.12471962 240.01467896]
[19.99836731 230.84698486]
[5.00937462 230.27244568]
[-9.97961807 229.69790649]
[-24.96861076 229.12336731]
[-39.95760345 228.54882812]
[-47.52893448 241.85046387]
[-60.42084885 250.10014343]
[-75.67087555 251.40213013]
[-89.77468109 245.45727539]
[-99.49129486 233.63162231]
[-102.58792877 218.64263916]
[-98.35298920 203.93469238]
[-87.75963593 192.88754272]
[-73.24214172 188.03974915]
[-58.13652802 190.50531006]
[-45.91394806 199.71765137]
[-39.38306427 213.55982971]
[-24.39406967 214.13436890]
[-9.40507698 214.70890808]
[5.58391571 215.28346252]
[20.57290840 215.85800171]
[33.53927994 208.31655884]
[40.45134354 195.00402832]
[47.36341095 181.69151306]
[54.27547455 168.37898254]
[61.18754196 155.06645203]
[68.09960938 141.75393677]
[75.01167297 128.44140625]
[81.92373657 115.12887573]
[88.83580017 101.81635284]
[92.25360870 87.21092224]
[91.96628571 72.21367645]
[91.67896271 57.21642685]
[91.24800873 42.22261810]
[90.67346954 27.23362541]
[90.09892273 12.24463272]
[89.52438354 -2.74435997]
[88.94984436 -17.73335266]
[88.37530518 -32.72234726]
[87.80075836 -47.71133804]
[73.19226074 -51.59502792]
[60.37839127 -59.61351776]
[50.49855804 -71.05381012]
[44.43127060 -84.89864349]
[42.71602249 -99.91694641]
[45.50534058 -114.77329254]
[52.55119324 -128.14668274]
[63.22706985 -138.84794617]
[76.58367920 -145.92553711]
[91.43336487 -148.75012207]
[106.45569611 -147.07055664]
[120.31490326 -141.03616333]
[131.77862549 -131.18353271]
[139.82752991 -118.38874817]
[143.74591064 -103.78951263]
[143.18533325 -88.68397522]
[138.19566345 -74.41532135]
[129.22056580 -62.25229645]
[117.05809784 -53.27644348]
[102.78975677 -48.28588104]
[103.36429596 -33.29688644]
[103.93883514 -18.30789375]
[104.51337433 -3.31890106]
[105.08792114 11.67009163]
[105.66246033 26.65908432]
[106.23699951 41.64807892]
[109.65149689 48.24233627]
[106.67620850 56.92910385]
[106.96353149 71.92635345]
[107.25085449 86.92359924]
[119.60188293 95.43547058]
[133.71899414 90.36521912]
[147.83609009 85.29496765]
[161.95318604 80.22471619]
[172.32574463 68.27813721]
[186.91923523 71.25798798]
[201.03633118 66.18773651]
[215.15342712 61.11748123]
[229.27052307 56.04722977]
[234.51129150 41.31398392]
[248.02238464 33.44097900]
[263.42431641 36.14560699]
[273.44473267 48.15082550]
[273.35229492 63.78813553]
[263.19070435 75.67407990]
[247.75788879 78.19647980]
[234.34078979 70.16432953]
[220.22367859 75.23458099]
[206.10658264 80.30484009]
[191.98948669 85.37509155]
[182.62667847 96.95900726]
[167.02343750 94.34181213]
[152.90634155 99.41206360]
[138.78924561 104.48232269]
[124.67214203 109.55257416]
[111.70433807 113.30825043]
[102.14833069 108.72841644]
[95.23626709 122.04094696]
[88.32419586 135.35346985]
[81.41213226 148.66600037]
[74.50006866 161.97851562]
[67.58799744 175.29104614]
[60.67593384 188.60357666]
[53.76387024 201.91610718]
[46.85180283 215.22862244]
[50.44185638 247.49473572]
[50.15453339 262.49200439]
[49.86721039 277.48922729]
[49.57988739 292.48648071]
[49.29256439 307.48373413]
[57.67284393 317.32855225]
[57.09796524 329.84252930]
[48.42394638 338.31573486]
[47.84940338 353.30471802]
[47.27486420 368.29373169]
[46.70032120 383.28271484]
[46.12578201 398.27169800]
[48.27342987 413.11715698]
[53.07234192 427.32879639]
[57.87125397 441.54043579]
[62.67016602 455.75207520]
[67.46907806 469.96368408]
[80.13204193 480.38394165]
[77.17279053 496.51385498]
[61.63554764 501.76040649]
[49.50369644 490.72634888]
[53.25744629 474.76260376]
[48.45853424 460.55096436]
[43.65962219 446.33935547]
[38.86071396 432.12771606]
[34.06180191 417.91607666]
[31.01933861 432.60427856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 148]
[19 147]
[20 146]
[21 145]
[22 144]
[24 141]
[25 140]
[26 139]
[27 138]
[28 137]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[53 136]
[54 135]
[55 134]
[56 133]
[57 132]
[58 131]
[59 130]
[60 129]
[61 128]
[62 101]
[63 100]
[64 99]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[102 126]
[103 125]
[104 124]
[105 123]
[107 121]
[108 120]
[109 119]
[110 118]
[149 162]
[150 161]
[151 160]
[152 159]
[153 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
