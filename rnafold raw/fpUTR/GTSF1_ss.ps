%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCUGGGGCUUGCGUGGGAGGAAGGUGACUGUGAGGAAGGUGUGUGUCCACCGAGCACUUGGAUUCAGCUUCUUCAUUUCCAAC\
) } def
/len { sequence length } bind def

/coor [
[83.81452179 115.33296967]
[70.08940125 121.38449097]
[56.36427689 127.43601990]
[42.63915253 133.48754883]
[28.91403008 139.53907776]
[15.18890667 145.59060669]
[13.24355221 159.36825562]
[4.76335287 170.26194763]
[-7.91413498 175.44552612]
[-21.38130951 173.64297485]
[-32.07632065 165.44052124]
[-46.01097107 170.99258423]
[-59.94562149 176.54466248]
[-65.95980072 191.15989685]
[-80.57894897 197.16456604]
[-95.12978363 190.99620056]
[-100.97956085 176.31437683]
[-94.65769958 161.82957458]
[-79.91485596 156.13536072]
[-65.49769592 162.61000061]
[-51.56304550 157.05793762]
[-37.62839508 151.50585938]
[-34.16349792 135.56950378]
[-21.81420898 124.66686249]
[-5.24317837 123.17443848]
[9.13737869 131.86547852]
[22.86250305 125.81394958]
[36.58762741 119.76242828]
[50.31274796 113.71089935]
[64.03787231 107.65937042]
[77.76299286 101.60784149]
[88.50569916 80.89632416]
[111.83654785 81.10646820]
[123.61210632 71.81474304]
[135.38766479 62.52301407]
[147.16323853 53.23128891]
[158.93879700 43.93956375]
[170.71435547 34.64783859]
[182.48991394 25.35611343]
[194.26547241 16.06438828]
[206.04103088 6.77266312]
[212.08183289 -7.84990120]
[226.86607361 -9.65971851]
[238.64163208 -18.95144463]
[239.33105469 -30.09861183]
[246.01345825 -38.76807022]
[256.19531250 -42.13295364]
[266.29946899 -39.27347946]
[278.71478271 -47.69128799]
[291.13012695 -56.10909271]
[303.54547119 -64.52690125]
[315.96078491 -72.94470215]
[315.47821045 -88.36451721]
[323.42840576 -101.58563232]
[337.27450562 -108.38923645]
[352.59826660 -106.60433197]
[364.50994873 -96.80046844]
[369.20852661 -82.10602570]
[365.19476318 -67.20994568]
[353.74942017 -56.86551285]
[338.52462769 -54.37360001]
[324.37860107 -60.52936935]
[311.96325684 -52.11156464]
[299.54794312 -43.69375610]
[287.13259888 -35.27595139]
[274.71725464 -26.85814667]
[267.85784912 -8.92902660]
[247.93336487 -7.17588282]
[236.15779114 2.11584258]
[230.95927429 16.07380104]
[215.33276367 18.54822350]
[203.55720520 27.83995056]
[191.78164673 37.13167572]
[180.00607300 46.42340088]
[168.23051453 55.71512604]
[156.45495605 65.00685120]
[144.67939758 74.29857635]
[132.90383911 83.59030151]
[121.12827301 92.88202667]
[122.28861237 99.46405029]
[121.44597626 106.09423065]
[118.67608643 112.17675781]
[114.22785950 117.16500854]
[108.50104523 120.61071777]
[102.01027679 122.20423889]
[95.33885193 121.80236816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[11 22]
[12 21]
[13 20]
[33 79]
[34 78]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[43 69]
[44 68]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
