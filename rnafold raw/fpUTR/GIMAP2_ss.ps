%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCUUUUUCUCUUGGAGCUGAGCUAUAAGACAACAGGACUGAACAGGGAGCCAACUGUUUCUUUGAACAGUAAAUCAGGAACACCA\
) } def
/len { sequence length } bind def

/coor [
[71.45726013 99.02018738]
[57.12738800 94.58681488]
[42.79751587 90.15344238]
[28.46764565 85.72006989]
[14.13777447 81.28669739]
[-0.19209690 76.85332489]
[-14.59797859 72.67353821]
[-29.07538414 68.74864960]
[-43.55278778 64.82376099]
[-57.14870071 72.42566681]
[-71.77493286 68.23903656]
[-78.93840027 55.23056412]
[-93.41580963 51.30567551]
[-107.89321136 47.38078690]
[-122.37061310 43.45589828]
[-136.84802246 39.53100967]
[-150.44393921 47.13291550]
[-165.07017517 42.94628525]
[-172.23364258 29.93781281]
[-186.77806091 26.26903915]
[-201.38494873 22.85752487]
[-213.03321838 33.10923004]
[-228.48577881 34.52282715]
[-241.80079651 26.55476379]
[-247.85836792 12.26892090]
[-244.32925415 -2.84150529]
[-232.57046509 -12.96624565]
[-217.10348511 -14.21213150]
[-203.87568665 -6.10009384]
[-197.97343445 8.25062275]
[-183.36653137 11.66213799]
[-175.97348022 10.08209896]
[-168.30874634 15.46040821]
[-155.55578613 7.85137081]
[-140.81771851 11.62553024]
[-132.92312622 25.05360603]
[-118.44572449 28.97849464]
[-103.96832275 32.90338135]
[-89.49092102 36.82827377]
[-75.01351166 40.75316238]
[-62.26054764 33.14412308]
[-47.52248764 36.91828156]
[-39.62789917 50.34635925]
[-25.15049362 54.27124786]
[-10.67308998 58.19613647]
[-3.22886872 56.87799454]
[4.24127579 62.52345276]
[18.57114601 66.95682526]
[32.90101624 71.39019775]
[47.23088837 75.82357025]
[61.56076050 80.25694275]
[75.89063263 84.69031525]
[87.23999023 71.52582550]
[105.47380829 66.60010529]
[124.76975250 73.20700836]
[138.00160217 90.66494751]
[152.81275940 88.29228210]
[167.62391663 85.91962433]
[182.43508911 83.54695892]
[197.24624634 81.17430115]
[212.05740356 78.80163574]
[226.86856079 76.42897797]
[239.24667358 65.67191315]
[254.66137695 71.26823425]
[257.25537109 87.46092987]
[244.36013794 97.59233856]
[229.24122620 91.24013519]
[214.43006897 93.61280060]
[199.61891174 95.98545837]
[184.80773926 98.35812378]
[169.99658203 100.73078156]
[155.18542480 103.10344696]
[140.37426758 105.47610474]
[136.70094299 112.01496887]
[151.69990540 111.83858490]
[159.35205078 124.73993683]
[152.00512695 137.81750488]
[137.00616455 137.99356079]
[129.35430908 125.09269714]
[125.68099213 131.63156128]
[131.36004639 145.51493835]
[144.65040588 155.12214661]
[142.70657349 171.40568542]
[127.52819824 177.61445618]
[114.72948456 167.36140442]
[117.47665405 151.19400024]
[111.79760742 137.31060791]
[88.43238831 133.67610168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[5 48]
[6 47]
[7 45]
[8 44]
[9 43]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[19 33]
[20 31]
[21 30]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
