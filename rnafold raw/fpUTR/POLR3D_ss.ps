%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGGCGGCGCCCAGGCCCUGCCACGCAGACUUCCGCCCGGCGCGGAGACCGAAGGCUGGCGGCUGGUCGCGUUGCAGGCAAC\
) } def
/len { sequence length } bind def

/coor [
[36.16699982 288.63388062]
[26.62007713 294.01980591]
[15.84116554 295.78442383]
[5.15175009 293.73861694]
[-3.29805064 306.13220215]
[-11.74785137 318.52578735]
[-15.67463207 335.01870728]
[-32.61005402 335.81109619]
[-38.05965424 319.75686646]
[-24.14143372 310.07598877]
[-15.69163227 297.68240356]
[-7.24183130 285.28881836]
[-15.19850731 267.74343872]
[-11.30198097 248.73576355]
[3.11962461 235.55030823]
[22.67321396 233.33715820]
[29.18147087 219.82261658]
[35.68972778 206.30809021]
[35.75595093 198.73075867]
[42.70235443 192.41683960]
[49.71138382 179.15510559]
[56.72041321 165.89338684]
[55.82680130 151.02560425]
[69.11585236 142.44006348]
[76.12488556 129.17832947]
[83.13391113 115.91659546]
[90.14294434 102.65486908]
[90.86578369 94.41032410]
[97.67007446 89.03554535]
[105.17007446 76.04516602]
[112.67007446 63.05478287]
[120.17007446 50.06440353]
[119.64093018 31.77297401]
[134.94441223 23.40293694]
[141.95343018 10.14120579]
[148.96246338 -3.12052512]
[155.97149658 -16.38225555]
[162.98052979 -29.64398766]
[164.28428650 -38.94013214]
[170.50765991 -43.26330948]
[178.00765991 -56.25368881]
[185.50765991 -69.24407196]
[184.36125183 -89.20272827]
[201.09164429 -98.59730530]
[207.59989929 -112.11183929]
[214.10815430 -125.62637329]
[215.53292847 -142.52033997]
[232.16110229 -145.82797241]
[239.94259644 -130.76527405]
[227.62268066 -119.11811829]
[221.11442566 -105.60358429]
[214.60617065 -92.08905029]
[218.91973877 -82.49614716]
[217.06947327 -71.91593170]
[209.44686890 -64.03599548]
[198.49804688 -61.74407196]
[190.99804688 -48.75368881]
[183.49804688 -35.76330948]
[176.24226379 -22.63495827]
[169.23323059 -9.37322617]
[162.22419739 3.88850451]
[155.21516418 17.15023613]
[148.20613098 30.41196632]
[151.47007751 42.21925735]
[145.53558350 53.39565659]
[133.16046143 57.56440353]
[125.66045380 70.55478668]
[118.16045380 83.54516602]
[110.66045380 96.53554535]
[103.40467072 109.66389465]
[96.39564514 122.92562866]
[89.38661194 136.18736267]
[82.37758636 149.44909668]
[82.76986694 165.26542664]
[69.98214722 172.90240479]
[62.97311401 186.16413879]
[55.96408463 199.42587280]
[49.20426178 212.81634521]
[42.69600296 226.33088684]
[36.18774796 239.84541321]
[43.37224960 248.38034058]
[47.16689682 258.82995605]
[47.13321686 269.90823364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 12]
[5 11]
[6 10]
[16 80]
[17 79]
[18 78]
[20 77]
[21 76]
[22 75]
[24 73]
[25 72]
[26 71]
[27 70]
[29 69]
[30 68]
[31 67]
[32 66]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[40 58]
[41 57]
[42 56]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
