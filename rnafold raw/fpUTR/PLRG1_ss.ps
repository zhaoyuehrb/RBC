%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCUUGCAUCACAUCCGCCGCCUGGGCGCCCAAUUCCGGAAGGUGCUGCACAGCUGUGGCGGCGGGUACUGCGUUAGUGAUUAGAGUUUCUUCCCUGCCGGAGGUGGGAUACACGGUAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[221.62786865 240.83027649]
[226.31729126 227.43652344]
[215.32151794 217.23393250]
[204.32574463 207.03134155]
[193.32995605 196.82875061]
[182.33418274 186.62615967]
[171.33840942 176.42356873]
[156.51017761 177.23539734]
[145.21354675 167.04515076]
[144.46257019 151.48643494]
[133.46679688 141.28384399]
[122.47101593 131.08125305]
[111.47523499 120.87866211]
[100.47945404 110.67607117]
[88.41049194 101.76876831]
[75.42010498 94.26876831]
[62.42972565 86.76876831]
[49.43934631 79.26876831]
[36.44896698 71.76876831]
[23.45858383 64.26876831]
[10.46820259 56.76876831]
[-2.52217817 49.26876831]
[-15.51255894 41.76876831]
[-28.50294113 34.26876831]
[-43.59178543 38.13716507]
[-56.65903854 30.34604454]
[-60.25397873 15.93729687]
[-73.24436188 8.43729687]
[-86.23474121 0.93729722]
[-101.53464508 8.02491474]
[-117.89041138 4.66979837]
[-128.94294739 -7.62289619]
[-130.51451111 -23.91261482]
[-143.68783569 -31.08642387]
[-157.65612793 -24.59081268]
[-172.59623718 -27.53131866]
[-182.81921387 -38.57464218]
[-184.55833435 -53.34330750]
[-197.73165894 -60.51711655]
[-214.10328674 -59.56757736]
[-222.88409424 -73.41782379]
[-215.04113770 -87.81991577]
[-198.64257812 -87.95820618]
[-190.55784607 -73.69043732]
[-177.38452148 -66.51663208]
[-164.03489685 -73.06840515]
[-149.21179199 -70.47236633]
[-138.63600159 -59.51764679]
[-136.51402283 -44.25974655]
[-123.34070587 -37.08593750]
[-111.80889130 -43.93274307]
[-98.29096985 -44.16131210]
[-86.34383392 -37.60379410]
[-79.16448975 -25.89208984]
[-78.73474121 -12.05308342]
[-65.74436188 -4.55308390]
[-52.75397873 2.94691610]
[-38.47816467 -1.14414990]
[-25.19723320 6.27686357]
[-21.00294113 21.27838516]
[-8.01255894 28.77838516]
[4.97782183 36.27838516]
[17.96820259 43.77838516]
[30.95858383 51.27838516]
[43.94896698 58.77838516]
[56.93934631 66.27838898]
[69.92972565 73.77838898]
[82.92010498 81.27838898]
[95.91049194 88.77838898]
[91.32536316 74.49634552]
[95.01802826 59.95797729]
[105.86283112 49.59505463]
[120.55392456 46.56654739]
[134.61296082 51.79564667]
[143.75428772 63.68834686]
[145.19129944 78.61935425]
[138.48597717 92.03719330]
[125.68229675 99.85166931]
[110.68204498 99.68029022]
[121.67782593 109.88288116]
[132.67359924 120.08547211]
[143.66938782 130.28807068]
[154.66516113 140.49066162]
[170.23649597 140.07682800]
[181.24243164 150.58035278]
[181.54100037 165.42779541]
[192.53677368 175.63038635]
[203.53254700 185.83297729]
[214.52833557 196.03556824]
[225.52410889 206.23815918]
[236.51988220 216.44075012]
[251.56414795 210.38090515]
[267.68911743 211.45794678]
[281.69302368 219.40754700]
[290.81713867 232.60574341]
[293.28930664 248.40046692]
[288.66793823 263.64443970]
[299.91464233 273.56970215]
[311.16137695 283.49499512]
[322.40808105 293.42028809]
[333.65481567 303.34558105]
[344.90151978 313.27087402]
[357.87133789 313.26254272]
[367.04473877 321.85269165]
[367.83392334 333.99227905]
[383.03189087 330.86151123]
[397.15359497 337.29241943]
[404.76898193 350.81225586]
[402.94976807 366.22232056]
[392.39547729 377.59713745]
[377.16442871 380.56286621]
[363.11331177 373.97912598]
[355.64505005 360.37747192]
[357.63134766 344.98806763]
[340.37435913 342.06942749]
[334.97622681 324.51757812]
[323.72952271 314.59228516]
[312.48278809 304.66702271]
[301.23608398 294.74172974]
[289.98934937 284.81643677]
[278.74264526 274.89114380]
[266.18386841 280.91845703]
[252.23127747 281.68600464]
[239.00515747 277.04382324]
[228.52810669 267.66662598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[24 60]
[27 57]
[28 56]
[29 55]
[33 50]
[34 49]
[38 45]
[39 44]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
