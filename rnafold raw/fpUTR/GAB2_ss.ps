%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCUGGCCUCCCGCGAGCUGCGCACCGCCGGCCGCUGCCCCAGCUGCCCGAGCCCGCGCCCUCGUCCGCGCGACCCGGCGGGGGGCUCCAGGCCGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[-15.14803028 232.71511841]
[-25.17365074 243.87248230]
[-24.51111221 259.43521118]
[-34.83745956 270.60757446]
[-49.67823410 271.14328003]
[-59.70385361 282.30065918]
[-63.17234421 297.73696899]
[-77.43412781 302.03244019]
[-87.45974731 313.18978882]
[-88.04309845 329.22222900]
[-101.02664185 338.64599609]
[-116.45051575 334.23196411]
[-122.48284149 319.36621094]
[-114.49613953 305.45248413]
[-98.61711884 303.16418457]
[-88.59149933 292.00680542]
[-85.84010315 277.36853027]
[-70.86122131 272.27502441]
[-60.83560562 261.11767578]
[-61.88422394 246.30429077]
[-51.87575912 234.84631348]
[-36.33102417 233.84686279]
[-26.30540276 222.68949890]
[-31.40375519 209.92196655]
[-30.46268082 196.13970947]
[-23.61051178 184.06802368]
[-12.15011883 176.11892700]
[1.68845034 173.90934753]
[15.18182182 177.93247986]
[25.54303551 167.08604431]
[35.90425110 156.23960876]
[46.26546478 145.39315796]
[56.62667847 134.54672241]
[66.98789215 123.70028687]
[77.34910583 112.85385132]
[74.12979889 96.99719238]
[80.89561462 82.29952240]
[95.03516388 74.43372345]
[111.09098816 76.43574524]
[121.11660767 65.27837372]
[131.14222717 54.12100220]
[141.16784668 42.96363068]
[151.19346619 31.80625916]
[153.00492859 25.15888214]
[157.32688904 21.14265823]
[162.18664551 20.29826927]
[172.87380981 9.77285385]
[183.56098938 -0.75256282]
[194.24815369 -11.27797890]
[204.93531799 -21.80339622]
[208.94520569 -30.20500565]
[216.11257935 -32.48062515]
[220.37680054 -40.75604248]
[227.61024475 -42.81202316]
[228.84663391 -58.33971024]
[240.45590210 -68.17227936]
[255.25157166 -66.89788055]
[266.56051636 -76.75218964]
[277.86947632 -86.60649109]
[289.17846680 -96.46080017]
[300.48742676 -106.31510925]
[298.98260498 -121.75904083]
[306.87188721 -135.12088013]
[321.12170410 -141.26271057]
[336.25271606 -137.82287598]
[346.44671631 -126.12408447]
[347.78390503 -110.66473389]
[339.75012207 -97.38926697]
[325.43450928 -91.40237427]
[310.34173584 -95.00614166]
[299.03277588 -85.15183258]
[287.72378540 -75.29753113]
[276.41482544 -65.44322205]
[265.10586548 -55.58891678]
[264.34390259 -40.75803757]
[253.01538086 -30.60326958]
[237.46455383 -31.50306129]
[226.30717468 -21.47743988]
[215.46073914 -11.11622524]
[204.77357483 -0.59080893]
[194.08639526 9.93460751]
[183.39923096 20.46002388]
[172.71206665 30.98544121]
[162.35084534 41.83187866]
[152.32522583 52.98925018]
[142.29960632 64.14662170]
[132.27398682 75.30399323]
[122.24835968 86.46136475]
[126.03287506 99.24252319]
[122.99792480 112.22210693]
[113.93852997 122.00003815]
[101.22786713 126.01493073]
[88.19554901 123.21506500]
[77.83433533 134.06150818]
[67.47312164 144.90794373]
[57.11190414 155.75437927]
[46.75069046 166.60081482]
[36.38947678 177.44725037]
[26.02826118 188.29370117]
[30.83760262 204.02841187]
[27.12570572 219.96176147]
[15.98545361 231.81506348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[5 19]
[6 18]
[8 16]
[9 15]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[39 88]
[40 87]
[41 86]
[42 85]
[43 84]
[46 83]
[47 82]
[48 81]
[49 80]
[50 79]
[52 78]
[54 77]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
