%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUAUCGCGAGAAUCGGCUCCCGGAAGUUCCACGUCAGUCAGUCUGACGGUCAGUGGAUCGGUGGGUUUAUCUCAAGGCCUGAGUAGCCGGUAACAAACGAGGGUUCCCGGGAUUGGACCGACGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[72.78783417 462.56951904]
[57.56420517 461.47235107]
[44.32849884 453.87112427]
[35.70867538 441.27505493]
[33.41621017 426.18505859]
[37.90627289 411.59732056]
[48.28735733 400.40823364]
[62.49829483 394.83938599]
[63.57653809 379.87820435]
[64.65477753 364.91699219]
[62.81954575 362.67385864]
[61.80851364 359.53308105]
[61.98203278 355.82250977]
[63.56834412 351.99911499]
[66.62114716 348.59667969]
[69.12741089 333.80755615]
[71.63366699 319.01840210]
[74.13993073 304.22924805]
[76.46868134 289.41113281]
[78.08429718 274.49838257]
[79.16254425 259.53720093]
[80.24078369 244.57600403]
[81.31903076 229.61480713]
[82.39727020 214.65361023]
[83.47550964 199.69241333]
[72.47380829 192.03273010]
[66.66981506 179.82846069]
[67.68754578 166.24385071]
[75.36660767 154.86056519]
[87.77615356 148.73327637]
[89.21284485 133.80224609]
[90.64953613 118.87120056]
[76.62263489 106.83071899]
[76.31658936 85.73236847]
[62.76878738 79.29364777]
[49.22098923 72.85492706]
[35.67318726 66.41620636]
[22.12538719 59.97748947]
[8.57758808 53.53876877]
[-6.95878839 57.53884125]
[-19.68572998 47.77131653]
[-19.84021568 31.72900772]
[-7.30373859 21.71819878]
[8.30679035 25.41832733]
[15.01630783 39.99097061]
[28.56410789 46.42969131]
[42.11190796 52.86840820]
[55.65970612 59.30712891]
[69.20750427 65.74584961]
[82.75531006 72.18457031]
[96.97603607 67.41268158]
[103.89783478 54.10521698]
[99.36998749 39.20097733]
[106.57923889 25.80391312]
[120.81606293 21.57915497]
[127.73786163 8.27168560]
[124.60385132 -4.30679941]
[130.72140503 -15.27725792]
[142.30371094 -18.97655106]
[149.54261780 -32.11421585]
[156.78152466 -45.25187683]
[164.02043152 -58.38953781]
[171.25935364 -71.52719879]
[178.49826050 -84.66486359]
[184.93698120 -98.21266174]
[190.55236816 -112.12191772]
[196.16777039 -126.03117371]
[201.78315735 -139.94042969]
[207.39854431 -153.84968567]
[213.01394653 -167.75894165]
[206.60493469 -182.20539856]
[212.36614990 -196.92218018]
[226.87956238 -203.17810059]
[241.53462219 -197.26161194]
[247.63673401 -182.68287659]
[241.56564331 -168.09118652]
[226.92320251 -162.14353943]
[221.30780029 -148.23428345]
[215.69241333 -134.32502747]
[210.07702637 -120.41577911]
[204.46162415 -106.50652313]
[198.84623718 -92.59726715]
[213.58024597 -95.40953827]
[225.12385559 -85.83116913]
[225.07809448 -70.83123779]
[213.47625732 -61.32347488]
[198.75967407 -64.22559357]
[191.63592529 -77.42594910]
[184.39700317 -64.28829193]
[177.15809631 -51.15062714]
[169.91918945 -38.01296616]
[162.68028259 -24.87530327]
[155.44136047 -11.73764133]
[156.78042603 5.71759033]
[141.04533386 15.19348240]
[134.12353516 28.50095177]
[138.83808899 42.58315659]
[132.00798035 56.17742538]
[117.20529938 61.02701187]
[110.28350067 74.33448029]
[123.83086395 91.05899811]
[120.71560669 110.57086945]
[105.58057404 120.30789185]
[104.14388275 135.23893738]
[102.70719147 150.16996765]
[115.50456238 161.15711975]
[119.23056030 177.43746948]
[112.61828613 192.59356689]
[98.43670654 200.77066040]
[97.35846710 215.73185730]
[96.28022003 230.69305420]
[95.20198059 245.65425110]
[94.12374115 260.61544800]
[93.04549408 275.57662964]
[95.42259979 280.44793701]
[95.60484314 285.25122070]
[94.00363159 289.13916016]
[91.31366730 291.56204224]
[93.19066620 300.60556030]
[88.92906952 306.73553467]
[86.42281342 321.52465820]
[83.91654968 336.31381226]
[81.41028595 351.10293579]
[79.61597443 365.99523926]
[78.53773499 380.95642090]
[77.45948792 395.91763306]
[90.72502899 403.46667480]
[99.39438629 416.02871704]
[101.74625397 431.10955811]
[97.31367493 445.71487427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 126]
[9 125]
[10 124]
[15 123]
[16 122]
[17 121]
[18 120]
[19 118]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[30 105]
[31 104]
[32 103]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[51 100]
[52 99]
[55 96]
[56 95]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[64 88]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
