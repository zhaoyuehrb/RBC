%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAGGCUUGGCGGUCCUCAGAGGGGCUGAUAAAUCGGCGCUCGACUGGCCUAGGAGCUGUCCGCAGGGAGAUUUAUGACAAAGUCCAGUUUUCAACA\
) } def
/len { sequence length } bind def

/coor [
[95.86060333 134.46894836]
[98.38880157 119.68232727]
[91.57894135 133.04742432]
[84.76908875 146.41252136]
[77.95922852 159.77761841]
[79.35736847 176.11705017]
[65.75312805 185.27438354]
[51.14138031 177.82933044]
[50.55344009 161.44071960]
[64.59413147 152.96775818]
[71.40399170 139.60266113]
[78.21384430 126.23756409]
[85.02370453 112.87246704]
[80.61309814 98.53556824]
[67.46849823 91.30926514]
[54.32389832 84.08296204]
[41.17929840 76.85665894]
[28.04331970 84.69204712]
[12.84944057 84.89897919]
[-0.32047397 77.52200317]
[-7.97840357 64.62967682]
[-8.15379524 49.73555756]
[-21.29839516 42.50925446]
[-34.44299698 35.28294754]
[-47.14433289 38.12731934]
[-57.99290466 31.69399452]
[-61.36558533 19.95965767]
[-74.27671814 12.32403564]
[-87.18784332 4.68841457]
[-100.09897614 -2.94720674]
[-113.01010895 -10.58282757]
[-129.40509033 -10.21340752]
[-137.69013977 -24.36579704]
[-129.34228516 -38.48123169]
[-112.94910431 -38.03896332]
[-105.37448883 -23.49395752]
[-92.46335602 -15.85833740]
[-79.55222321 -8.22271633]
[-66.64109802 -0.58709466]
[-53.72996521 7.04852676]
[-36.27892685 6.20523119]
[-27.21669006 22.13834763]
[-14.07209015 29.36465263]
[-0.92748976 36.59095764]
[11.74201107 28.75837708]
[26.73068619 28.31612778]
[40.01606369 35.48307419]
[47.98263168 48.42257309]
[48.40560150 63.71205521]
[61.55020523 70.93836212]
[74.69480133 78.16466522]
[87.83940125 85.39096832]
[98.56900024 81.23267365]
[109.61294556 84.03511810]
[116.91501617 92.63362122]
[131.90762329 92.16246033]
[146.90022278 91.69129944]
[161.89280701 91.22013855]
[176.88540649 90.74897766]
[191.87800598 90.27781677]
[206.87060547 89.80665588]
[221.27500916 85.62178802]
[234.18614197 77.98616791]
[247.09727478 70.35054779]
[254.67189026 55.80554199]
[271.06506348 55.36326981]
[279.41293335 69.47870636]
[271.12786865 83.63109589]
[254.73289490 83.26167297]
[241.82176208 90.89730072]
[228.91062927 98.53292084]
[230.79063416 113.41464233]
[245.19503784 117.59950256]
[259.59945679 121.78437042]
[274.00384521 125.96923828]
[288.40826416 130.15409851]
[302.13516235 122.32165527]
[317.35769653 126.57020569]
[325.04458618 140.37916565]
[320.63531494 155.55592346]
[306.74588013 163.09638977]
[291.61657715 158.52691650]
[284.22338867 144.55851746]
[269.81896973 140.37364197]
[255.41458130 136.18878174]
[241.01017761 132.00390625]
[226.60577393 127.81904602]
[207.34176636 104.79925537]
[192.34916687 105.27041626]
[177.35656738 105.74157715]
[162.36396790 106.21273804]
[147.37138367 106.68389893]
[132.37878418 107.15505981]
[117.38617706 107.62622070]
[131.84092712 111.63375854]
[140.81800842 123.65091705]
[140.56065369 138.64871216]
[131.17655945 150.35079956]
[116.59284210 153.86006165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[14 52]
[15 51]
[16 50]
[17 49]
[22 44]
[23 43]
[24 42]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[55 94]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 71]
[63 70]
[64 69]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
