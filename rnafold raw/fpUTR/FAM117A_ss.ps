%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGGCCUCGGGGGUUGGGGGGCUGUGUGAGUCUCGCAGUGGGGCUGAGGCAGGCAGCCGGGAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[82.53221893 294.54727173]
[67.08663177 298.88473511]
[54.15000916 289.39666748]
[53.64621735 273.36154175]
[65.96172333 263.08010864]
[68.64007568 248.32115173]
[71.31842804 233.56221008]
[73.66494751 218.74688721]
[75.67844391 203.88264465]
[77.69194031 189.01838684]
[68.42654419 179.79396057]
[66.23478699 166.70529175]
[72.16259766 154.61251831]
[84.19731903 148.14154053]
[86.87567139 133.38259888]
[89.55402374 118.62365723]
[92.23237610 103.86471558]
[90.40068054 100.97100067]
[89.73645782 97.26902771]
[90.57094574 93.25528717]
[93.01956177 89.55191803]
[96.93835449 86.81300354]
[94.54345703 71.17411041]
[106.25942993 61.97708511]
[111.53005219 47.93356323]
[116.80067444 33.89003754]
[122.07129669 19.84651566]
[119.67639923 4.20762014]
[131.39236450 -4.98940325]
[128.99746704 -20.62829781]
[140.71345520 -29.82532120]
[145.98406982 -43.86884308]
[151.25469971 -57.91236877]
[156.52531433 -71.95588684]
[161.79594421 -85.99941254]
[167.06655884 -100.04293823]
[161.76766968 -115.18563843]
[170.42456055 -128.69258118]
[186.39640808 -130.20240784]
[197.43098450 -118.55690765]
[195.06349182 -102.68950653]
[181.11007690 -94.77231598]
[175.83946228 -80.72879028]
[170.56883240 -66.68526459]
[165.29821777 -52.64174652]
[160.02758789 -38.59822083]
[154.75697327 -24.55469894]
[157.52885437 -9.92029095]
[145.43589783 0.28121927]
[148.20777893 14.91562748]
[136.11482239 25.11713791]
[130.84419250 39.16065979]
[125.57357025 53.20418549]
[120.30294800 67.24770355]
[123.07483673 81.88211823]
[110.98187256 92.08362579]
[106.99132538 106.54306793]
[104.31297302 121.30200958]
[101.63461304 136.06095886]
[98.95626068 150.81990051]
[109.16089630 164.83253479]
[106.29189301 181.58996582]
[92.55619049 191.03189087]
[90.54269409 205.89613342]
[88.52919006 220.76039124]
[90.51558685 230.02127075]
[86.07736969 236.24057007]
[83.39901733 250.99951172]
[80.72066498 265.75845337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[8 65]
[9 64]
[10 63]
[14 60]
[15 59]
[16 58]
[17 57]
[22 56]
[24 54]
[25 53]
[26 52]
[27 51]
[29 49]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
