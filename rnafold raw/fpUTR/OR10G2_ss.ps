%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUCAAUCAUCCGACAAAAGCAUUCACUUACAACAUCAUUGUGCUGUGUUUCUCUUGUCAAACGUCACCAUUCAUCUUAGCAGACUACAAAAAGAC\
) } def
/len { sequence length } bind def

/coor [
[187.35009766 279.70745850]
[180.33952332 275.96649170]
[173.88461304 271.32821655]
[168.09957886 265.87390137]
[163.08686829 259.69931030]
[158.93536377 252.91293335]
[155.71881104 245.63415527]
[153.49450684 237.99113464]
[152.30226135 230.11846924]
[152.16371155 222.15493774]
[153.08190918 214.24098206]
[155.04129028 206.51623535]
[158.00785828 199.11711121]
[161.92988586 192.17433167]
[166.73872375 185.81065369]
[156.73718262 174.63168335]
[146.73564148 163.45272827]
[136.73411560 152.27375793]
[126.73258209 141.09478760]
[112.48009491 136.76860046]
[109.04489899 121.32482910]
[99.04336548 110.14585876]
[91.61018372 106.63272095]
[88.90875244 98.44989777]
[73.40680695 96.92431641]
[63.79232788 85.13378906]
[65.34226990 70.36445618]
[55.70045853 58.87379074]
[46.05864334 47.38312149]
[28.66985512 41.59014893]
[26.10384369 24.30973244]
[16.10230827 13.13076591]
[6.10077333 1.95179939]
[-3.90076160 -9.22716713]
[-13.90229607 -20.40613365]
[-29.77634430 -22.72866821]
[-37.73302460 -36.65959930]
[-31.66864967 -51.51230621]
[-16.23529434 -55.89306641]
[-3.27210331 -46.44133377]
[-2.72332978 -30.40766907]
[7.27820539 -19.22870255]
[17.27973938 -8.04973602]
[27.28127480 3.12923121]
[37.28281021 14.30819798]
[49.45118713 15.33437157]
[57.87205505 24.72712708]
[57.54930878 37.74131012]
[67.19112396 49.23197556]
[76.83293915 60.72264099]
[91.64704132 61.76091385]
[101.58889771 73.27673340]
[100.39942169 88.80808258]
[110.22233582 100.14432526]
[120.22386932 111.32329559]
[135.19172668 116.44908142]
[137.91154480 131.09326172]
[147.91308594 142.27221680]
[157.91461182 153.45118713]
[167.91615295 164.63015747]
[177.91767883 175.80912781]
[202.14126587 166.07891846]
[228.16358948 167.54995728]
[251.06430054 179.90930176]
[266.52801514 200.78854370]
[271.65756226 226.21755981]
[286.50488281 228.35227966]
[301.35220337 230.48699951]
[308.48916626 217.11390686]
[319.77166748 206.99060059]
[333.83724976 201.33952332]
[348.98748779 200.84306335]
[363.39288330 205.56118774]
[375.31390381 214.92413330]
[383.31103516 227.80130005]
[386.41860962 242.63771057]
[384.26135254 257.64178467]
[377.09976196 271.00170898]
[365.79864502 281.10418701]
[351.72265625 286.72933960]
[336.57153320 287.19787598]
[322.17486572 282.45321655]
[310.27111816 273.06829834]
[302.29772949 260.17642212]
[299.21749878 245.33432007]
[284.37017822 243.19960022]
[269.52285767 241.06488037]
[266.93347168 248.54559326]
[263.37460327 255.61927795]
[258.90847778 262.16088867]
[253.61332703 268.05474854]
[247.58210754 273.19644165]
[240.92080688 277.49484253]
[233.74656677 280.87359619]
[226.18566895 283.27258301]
[218.37126160 284.64892578]
[210.44108582 284.97772217]
[202.53495789 284.25253296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[21 55]
[22 54]
[24 53]
[27 50]
[28 49]
[29 48]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[66 87]
[67 86]
[68 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
