%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCCCCUGAACCCCAGAACAACCAGCUGGAUCAGUUCUCACAGGAGCUACAGCGCGGAGACUGGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[53.34638214 312.10940552]
[40.45085526 320.01895142]
[25.74182892 323.55444336]
[10.66034412 322.36953735]
[-3.31606841 316.58032227]
[-14.81814289 306.75393677]
[-22.71902275 293.85311890]
[-26.24466133 279.14172363]
[-25.04965019 264.06103516]
[-19.25106621 250.08851624]
[-9.41699600 238.59301758]
[3.48912001 230.70079041]
[18.20287132 227.18501282]
[33.28275299 228.39012146]
[39.02300644 214.53193665]
[44.76325607 200.67373657]
[50.50350952 186.81555176]
[56.24375916 172.95735168]
[48.24789429 163.36259460]
[45.19468307 151.17613220]
[47.75191116 138.80110168]
[55.47446823 128.70639038]
[66.88031769 122.93417358]
[79.73458862 122.68688965]
[86.66081238 109.38172913]
[85.37380219 92.78715515]
[99.32264709 83.70607758]
[105.66191864 70.11145782]
[112.00119781 56.51684570]
[118.34046936 42.92222595]
[113.71546936 34.06814957]
[113.88265991 24.22104263]
[118.66696167 15.77404594]
[126.78749847 10.71583080]
[136.19760132 10.16287613]
[144.25709534 -2.48799539]
[152.31658936 -15.13886738]
[160.37608337 -27.78973961]
[168.43557739 -40.44060898]
[176.49507141 -53.09148407]
[176.66943359 -69.48970032]
[191.08874512 -77.30096436]
[204.91963196 -68.48970795]
[203.93409729 -52.12020111]
[189.14595032 -45.03198624]
[181.08645630 -32.38111496]
[173.02696228 -19.73024559]
[164.96746826 -7.07937288]
[156.90797424 5.57149887]
[148.84848022 18.22237015]
[150.27664185 38.62181091]
[131.93508911 49.26150131]
[125.59580994 62.85611725]
[119.25653839 76.45073700]
[112.91726685 90.04534912]
[116.24692535 101.41003418]
[111.00915527 112.03117371]
[99.96598053 116.30796051]
[93.03974915 129.61312866]
[101.61178589 145.28588867]
[99.31983185 162.84761047]
[87.22357178 175.57339478]
[70.10195160 178.69760132]
[64.36170197 192.55580139]
[58.62145233 206.41398621]
[52.88119888 220.27218628]
[47.14094925 234.13037109]
[58.65618134 243.94131470]
[66.57434082 256.83154297]
[70.11968994 271.53820801]
[68.94489288 286.62048340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[24 59]
[25 58]
[27 55]
[28 54]
[29 53]
[30 52]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
