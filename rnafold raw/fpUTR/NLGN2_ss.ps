%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUCUCCCCCCCUUCUCUCUCUCUCCGAGGGGGGGGGGUCCCAGGGAGGGAGGGGGGGUCCCCCGAUCAGC\
) } def
/len { sequence length } bind def

/coor [
[89.27425385 100.55120087]
[78.01417542 90.64108276]
[66.75408936 80.73095703]
[55.49400330 70.82083893]
[44.23391724 60.91072083]
[32.97383499 51.00059891]
[21.71374893 41.09047699]
[9.28610420 32.69085693]
[-4.10778379 25.93779945]
[-17.50167084 19.18474388]
[-30.89555931 12.43168736]
[-44.28944778 5.67863083]
[-57.68333435 -1.07442546]
[-71.07722473 -7.82748175]
[-84.47110748 -14.58053780]
[-97.86499786 -21.33359337]
[-111.25888824 -28.08665085]
[-124.65277100 -34.83970642]
[-138.04666138 -41.59276199]
[-151.28463745 -33.67066574]
[-166.70338440 -34.18600464]
[-179.38285828 -42.97433090]
[-185.27705383 -57.23132706]
[-182.50518799 -72.40763092]
[-171.95173645 -83.66054535]
[-156.98425293 -87.39930725]
[-142.37882996 -82.43087769]
[-132.79600525 -70.34068298]
[-131.29360962 -54.98664856]
[-117.89971924 -48.23359299]
[-104.50582886 -41.48053741]
[-91.11194611 -34.72748184]
[-77.71805573 -27.97442627]
[-64.32416534 -21.22136879]
[-50.93027878 -14.46831322]
[-37.53639221 -7.71525717]
[-24.14250374 -0.96220094]
[-10.74861526 5.79085541]
[2.64527249 12.54391098]
[16.03915977 19.29696846]
[14.34403610 4.39305687]
[23.37665939 -7.58240604]
[38.17268372 -10.04768753]
[50.60019302 -1.64786434]
[53.82900620 13.00050640]
[46.08456039 25.84665680]
[31.62386894 29.83039284]
[42.88395309 39.74051285]
[54.14403915 49.65063477]
[65.40412140 59.56075668]
[76.66420746 69.47087860]
[87.92429352 79.38099670]
[99.18437958 89.29111481]
[111.95731354 97.15572357]
[125.87564850 102.74857330]
[139.79399109 108.34142303]
[153.71232605 113.93426514]
[167.63066101 119.52711487]
[184.58203125 119.82250977]
[188.99078369 136.19319153]
[174.48034668 144.96150208]
[162.03781128 133.44544983]
[148.11947632 127.85260773]
[134.20114136 122.25975800]
[120.28280640 116.66690826]
[106.36446381 111.07406616]
[110.85890961 125.38489532]
[106.39099884 139.70404053]
[94.55575562 148.91961670]
[79.57830048 149.74174500]
[66.80551147 141.87689209]
[60.79720306 128.13279724]
[63.69831085 113.41601562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
