%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUAUACAUAGGGAGGGCAAGAGCUCCGGGCCACUGAGAAGAUUCAAAACCUACAAAAGCCUGCCGCUGACAUUGAAGAACCAAUAUAUACA\
) } def
/len { sequence length } bind def

/coor [
[82.59490967 375.19979858]
[75.11425018 360.60626221]
[84.23837280 346.97970581]
[84.73960114 331.98809814]
[85.24082947 316.99645996]
[85.74205017 302.00485229]
[86.24327850 287.01321411]
[78.93557739 274.03451538]
[87.12969208 260.50057983]
[87.63091278 245.50897217]
[80.32321930 232.53025818]
[88.51732635 218.99633789]
[89.01855469 204.00471497]
[75.75611877 197.18023682]
[66.73483276 185.22508240]
[63.78676224 170.47822571]
[67.54916382 155.85412598]
[77.32766724 144.26672363]
[91.22369385 138.04885864]
[91.72492218 123.05723572]
[92.22614288 108.06561279]
[92.47679138 93.06771088]
[91.97557068 78.07608795]
[90.97367859 63.10958099]
[89.97178650 48.14307785]
[78.35795593 37.76248932]
[77.55509949 22.57005501]
[87.52297211 11.56201077]
[86.52108765 -3.40449190]
[85.51919556 -18.37099457]
[84.51731110 -33.33749771]
[83.51541901 -48.30400085]
[70.54622650 -56.61702347]
[65.02336884 -70.80686188]
[68.86950684 -85.35578156]
[80.40703583 -94.73786163]
[79.40514374 -109.70436859]
[78.15331268 -124.65203857]
[76.65187073 -139.57670593]
[62.28895569 -144.74093628]
[51.59521484 -155.63160706]
[46.69390106 -170.08636475]
[48.55817413 -185.23519897]
[56.81788254 -198.07029724]
[69.83305359 -206.04325867]
[85.01951599 -207.57102966]
[99.36199188 -202.35028076]
[110.01276398 -191.41758728]
[114.85711670 -176.94364929]
[112.93319702 -161.80226135]
[104.62300873 -148.99978638]
[91.57653809 -141.07814026]
[93.07798004 -126.15347290]
[96.95806885 -119.68341064]
[94.37165070 -110.70626068]
[95.37354279 -95.73975372]
[108.05863190 -87.97918701]
[113.80963898 -74.07271576]
[110.22737122 -59.27336502]
[98.48191833 -49.30589294]
[99.48381042 -34.33938599]
[100.48570251 -19.37288475]
[101.48758698 -4.40638161]
[102.48947906 10.56012154]
[113.83564758 20.14135933]
[115.06490326 35.30524826]
[104.93829346 47.14118958]
[105.94018555 62.10769272]
[106.94207001 77.07419586]
[110.04025269 80.95048523]
[110.59625244 86.86550140]
[107.47679138 93.06771088]
[110.67882538 100.65774536]
[107.21777344 108.56684113]
[106.71654510 123.55846405]
[106.21532440 138.55007935]
[119.66500854 145.68220520]
[128.64772034 157.89686584]
[131.42494202 172.73962402]
[127.49847412 187.25663757]
[117.69881439 198.58253479]
[104.01017761 204.50593567]
[103.50894928 219.49755859]
[110.78079987 233.54856873]
[102.62253571 246.01019287]
[102.12131500 261.00183105]
[109.39315796 275.05282593]
[101.23490143 287.51443481]
[100.73367310 302.50607300]
[100.23245239 317.49771118]
[99.73122406 332.48931885]
[99.23000336 347.48095703]
[107.42359924 361.68646240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[9 86]
[10 85]
[12 83]
[13 82]
[19 76]
[20 75]
[21 74]
[22 72]
[23 69]
[24 68]
[25 67]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[36 56]
[37 55]
[38 53]
[39 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
