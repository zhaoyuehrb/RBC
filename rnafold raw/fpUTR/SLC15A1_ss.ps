%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUCAGGUCGGAGGAGUAGCACCUGCCAGGAGCACGUCCCGCCGGCAGGUCGCAGGAGCCCUGGGAGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[118.51275635 182.63165283]
[103.60153198 181.00212097]
[91.02064514 172.83380127]
[83.46441650 159.87605286]
[82.55110168 144.90388489]
[88.47628021 131.12374878]
[99.97102356 121.48679352]
[114.57356262 118.05687714]
[101.89571381 110.03989410]
[93.70516968 108.67208099]
[88.87789154 101.43614197]
[76.53313446 92.91516876]
[64.18836975 84.39419556]
[55.07973480 81.99401855]
[51.52754211 75.27325439]
[39.53590012 66.26211548]
[23.85532951 64.15730286]
[18.32872772 50.32596207]
[6.33708668 41.31482697]
[-2.66751766 38.54981995]
[-5.94621229 31.69147682]
[-17.56528664 22.20479584]
[-33.14838791 19.47029305]
[-38.11357498 5.42763662]
[-49.73265076 -4.05904388]
[-61.35172653 -13.54572487]
[-77.44477844 -18.87958527]
[-76.77436066 -35.82027435]
[-60.31013489 -39.86571121]
[-51.86504364 -25.16479874]
[-40.24597168 -15.67811871]
[-28.62689590 -6.19143772]
[-13.87486839 -4.13548470]
[-8.07860565 10.58572197]
[3.54046845 20.07240295]
[15.34822083 29.32318497]
[27.33986282 38.33432007]
[42.16271210 39.79460144]
[48.54703522 54.27047729]
[60.53867722 63.28160858]
[72.70934296 72.04943848]
[85.05410004 80.57041168]
[97.39885712 89.09138489]
[109.91270447 97.36203766]
[122.59055328 105.37902832]
[136.72006226 110.41459656]
[151.61070251 112.22264099]
[166.50132751 114.03069305]
[181.13351440 108.01323700]
[192.83535767 117.22822571]
[207.46754456 111.21076202]
[219.16938782 120.42575836]
[234.06002808 122.23380280]
[248.69219971 116.21634674]
[260.39404297 125.43133545]
[275.28469849 127.23938751]
[290.17532349 129.04743958]
[305.06594849 130.85548401]
[321.51840210 126.76242828]
[330.00598145 141.43884277]
[318.25274658 153.65757751]
[303.25790405 145.74612427]
[288.36727905 143.93806458]
[273.47662354 142.13002014]
[258.58599854 140.32197571]
[245.01889038 146.46875000]
[232.25196838 137.12443542]
[217.36134338 135.31639099]
[203.79423523 141.46316528]
[191.02731323 132.11885071]
[177.46020508 138.26564026]
[164.69328308 128.92132568]
[149.80264282 127.11328125]
[134.91201782 125.30522919]
[144.05400085 137.19741821]
[146.86302185 151.93205261]
[142.73748779 166.35356140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 45]
[9 44]
[11 43]
[12 42]
[13 41]
[15 40]
[16 39]
[18 37]
[19 36]
[21 35]
[22 34]
[24 32]
[25 31]
[26 30]
[46 74]
[47 73]
[48 72]
[50 70]
[52 68]
[53 67]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
