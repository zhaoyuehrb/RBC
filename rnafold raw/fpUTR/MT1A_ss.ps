%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAGCCUUCCACGUGCGCCUUAUAGCCUCUCAACUUCUUGCUUGGGAUCUCCAACCUCACCGCGGCUCGAA\
) } def
/len { sequence length } bind def

/coor [
[90.70063019 220.63877869]
[87.34174347 204.95129395]
[97.62351227 192.63606262]
[89.88621521 179.90878296]
[97.62351227 166.10861206]
[97.62351227 151.10861206]
[97.62351227 136.10861206]
[97.62351227 121.10861969]
[93.19335938 135.43948364]
[80.29704285 143.10009766]
[65.59297180 140.13528442]
[56.67287827 128.07575989]
[58.14223480 113.14790344]
[69.24240875 103.05899048]
[84.24427032 103.01868439]
[74.81150055 103.48177338]
[69.39347076 98.12356567]
[55.25031281 93.12646484]
[42.54534149 102.03507996]
[27.03105545 101.74083710]
[14.67301464 92.35689545]
[10.22313786 77.49155426]
[15.39249325 62.86085510]
[28.19335747 54.09059525]
[43.70353699 54.55311584]
[55.95905304 64.07057190]
[60.24740982 78.98330688]
[74.39057159 83.98040009]
[88.63661194 88.67617798]
[101.57360077 81.08445740]
[104.73378754 66.42112732]
[107.89397430 51.75779724]
[111.05416870 37.09446716]
[114.21435547 22.43113899]
[117.37454224 7.76781082]
[120.22278595 -6.95929050]
[112.17019653 -20.83500099]
[118.13196564 -35.72919083]
[133.53472900 -40.21631241]
[146.56282043 -30.85423088]
[147.22218323 -14.82473278]
[135.00701904 -4.42427826]
[137.04248047 2.91890621]
[132.03787231 10.92799950]
[128.87768555 25.59132767]
[125.71749878 40.25465775]
[122.55730438 54.91798401]
[119.39711761 69.58131409]
[116.23693085 84.24464417]
[125.49597168 72.44336700]
[138.01184082 64.17577362]
[152.49990845 60.29045105]
[167.47314453 61.18618011]
[181.39468384 66.77102661]
[192.83566284 76.47176361]
[200.62174988 89.29271698]
[203.95379639 103.91794586]
[202.48982239 118.84633636]
[196.38006592 132.54563904]
[186.25164795 143.60977173]
[173.14413452 150.90312195]
[158.40286255 153.67709351]
[143.54087830 151.64697266]
[130.08358765 145.02114868]
[119.41226959 134.47966003]
[112.62351227 121.10861969]
[112.62351227 136.10861206]
[112.62351227 151.10861206]
[112.62351227 166.10861206]
[120.36081696 179.90878296]
[112.62351227 192.63606262]
[122.90528107 204.95129395]
[119.54640198 220.63877869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[5 69]
[6 68]
[7 67]
[8 66]
[15 29]
[17 28]
[18 27]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
