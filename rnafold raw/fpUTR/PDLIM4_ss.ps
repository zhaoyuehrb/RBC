%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGGCGGCGGCUGCGGCGGCGGCGGCUCCUCCUCAGAGUCCGGCUCAGGCUCCGGCUGCGGCUCCAGCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[131.38862610 332.28967285]
[128.98245239 317.48391724]
[126.57628632 302.67819214]
[123.87245941 287.92388916]
[120.87207794 273.22702026]
[116.32299805 267.13665771]
[118.05935669 257.87850952]
[115.65319061 243.07275391]
[113.24701691 228.26699829]
[103.56831360 216.94569397]
[108.99171448 202.08306885]
[106.58554840 187.27732849]
[104.17938232 172.47157288]
[101.77320862 157.66581726]
[99.36704254 142.86006165]
[96.96086884 128.05430603]
[94.55470276 113.24855042]
[85.86154938 102.29772186]
[90.63954163 89.15761566]
[88.23337555 74.35186005]
[85.82720184 59.54610825]
[82.53147888 44.91264725]
[78.35821533 30.50487709]
[74.18495178 16.09710503]
[62.91368866 4.99444199]
[66.80455780 -9.38298512]
[61.26694489 -17.00289536]
[62.76591492 -24.45540047]
[59.17617798 -39.01952744]
[55.58644485 -53.58365250]
[51.99670792 -68.14778137]
[48.40697479 -82.71190643]
[34.29165268 -89.44181824]
[27.85166550 -103.69175720]
[32.12778091 -118.73332214]
[45.10094452 -127.46436310]
[60.64562607 -125.76234436]
[71.42210388 -114.43090057]
[72.34204865 -98.82040405]
[62.97109985 -86.30164337]
[66.56083679 -71.73751831]
[70.15057373 -57.17338943]
[73.74030304 -42.60926056]
[77.33003998 -28.04513550]
[81.21232605 -13.55624771]
[92.18509674 -3.48412418]
[88.59272766 11.92384338]
[92.76598358 26.33161545]
[96.93924713 40.73938751]
[100.12811279 42.79424667]
[102.35477448 46.63846970]
[102.72006226 51.73649979]
[100.63295746 57.13993835]
[103.03913116 71.94569397]
[105.44529724 86.75144958]
[114.13845062 97.70227814]
[109.36045837 110.84238434]
[111.76662445 125.64813995]
[114.17279816 140.45388794]
[116.57896423 155.25964355]
[118.98513031 170.06539917]
[121.39130402 184.87115479]
[123.79747009 199.67691040]
[133.64828491 212.05722046]
[128.05276489 225.86082458]
[130.45893860 240.66658020]
[132.86511230 255.47233582]
[135.56893921 270.22662354]
[138.56932068 284.92349243]
[143.47583008 292.96429443]
[141.38203430 300.27200317]
[143.78820801 315.07775879]
[146.19438171 329.88351440]
[158.31849670 340.38995361]
[157.51956177 356.41308594]
[144.41044617 365.66137695]
[129.04734802 361.04028320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 69]
[5 68]
[7 67]
[8 66]
[9 65]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[19 55]
[20 54]
[21 53]
[22 49]
[23 48]
[24 47]
[26 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
