%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACAACGGGGGCGAAGCGCAGGCGCAAGGAGCAAGCGCAGAUUGUGGGCGGCUGUGUCAGCUGACCCAAGGGGCCUUCGAGGUGCCUUAGGCCGCUUGCCUUGCUCUCAGAAUCGCUGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[47.73944092 592.21734619]
[33.59282684 598.19805908]
[18.35313225 596.28826904]
[6.11975622 587.00170898]
[0.18341586 572.83642578]
[2.14095712 557.60278320]
[11.46581078 545.39855957]
[25.64963913 539.50665283]
[27.51479530 524.62310791]
[29.37994957 509.73950195]
[23.28525352 496.14889526]
[32.67847061 483.41790771]
[34.54362488 468.53433228]
[36.40878296 453.65075684]
[38.27393723 438.76715088]
[40.13909149 423.88357544]
[30.82405090 412.31787109]
[32.50356293 397.19720459]
[44.69789886 387.50515747]
[35.38285828 375.93945312]
[37.06236649 360.81881714]
[49.25670624 351.12677002]
[51.12186050 336.24316406]
[52.98701477 321.35958862]
[50.67158508 314.25363159]
[55.08869553 306.12991333]
[57.32432938 291.29745483]
[59.55996323 276.46499634]
[61.79559708 261.63253784]
[64.03123474 246.80007935]
[61.89751816 242.41542053]
[62.57409668 236.63284302]
[66.76583099 231.29139709]
[69.73802185 216.58880615]
[72.71021271 201.88623047]
[75.68240356 187.18363953]
[78.65459442 172.48104858]
[81.62679291 157.77845764]
[84.59898376 143.07588196]
[87.38765717 128.33737183]
[78.91672516 123.78015900]
[72.06757355 116.69932556]
[67.58735657 107.66552734]
[66.02430725 97.46846008]
[67.66446686 87.04813385]
[72.49190521 77.40822601]
[80.17743683 69.51950836]
[90.09803772 64.22261810]
[86.76022339 49.59870148]
[83.42240906 34.97478104]
[79.90254211 20.39361000]
[76.20118713 5.85745001]
[72.49982452 -8.67870903]
[68.79846191 -23.21486855]
[65.09709930 -37.75102615]
[61.39574051 -52.28718567]
[51.62794876 -66.14455414]
[62.23976517 -79.36671448]
[77.88285065 -72.82987213]
[75.93190002 -55.98854828]
[79.63326263 -41.45238876]
[83.33462524 -26.91622925]
[87.03598022 -12.38006973]
[90.73734283 2.15608907]
[94.43870544 16.69224930]
[99.19017029 22.46105766]
[98.04632568 31.63696671]
[101.38414001 46.26088715]
[104.72195435 60.88480377]
[118.99931335 65.48447418]
[130.24603271 55.55918884]
[141.49275208 45.63389969]
[152.73947144 35.70861435]
[157.96691895 20.77595139]
[172.62924194 18.15577888]
[183.87596130 8.23049164]
[195.12268066 -1.69479609]
[206.36940002 -11.62008381]
[214.24450684 -26.63404465]
[230.85176086 -23.22297859]
[232.17135620 -6.32046318]
[216.29469299 -0.37336558]
[205.04797363 9.55192184]
[193.80125427 19.47720909]
[182.55453491 29.40249634]
[178.13153076 43.62523651]
[162.66474915 46.95532990]
[151.41804504 56.88061905]
[140.17132568 66.80590820]
[128.92460632 76.73119354]
[135.04571533 101.70918274]
[123.61515808 123.12539673]
[102.15977478 130.94210815]
[103.75957489 140.04959106]
[99.30156708 146.04806519]
[96.32937622 160.75065613]
[93.35718536 175.45324707]
[90.38499451 190.15582275]
[87.41280365 204.85841370]
[84.44060516 219.56100464]
[81.46841431 234.26359558]
[78.86369324 249.03570557]
[76.62805939 263.86816406]
[74.39242554 278.70062256]
[72.15679169 293.53308105]
[69.92115784 308.36557007]
[67.87060547 323.22473145]
[66.00544739 338.10833740]
[64.14028931 352.99191284]
[73.56596375 365.39331055]
[71.46240234 380.46081543]
[59.58148575 389.37033081]
[69.00715637 401.77169800]
[66.90360260 416.83920288]
[55.02268219 425.74871826]
[53.15752411 440.63232422]
[51.29236984 455.51589966]
[49.42721558 470.39947510]
[47.56205750 485.28308105]
[53.52334595 499.93823242]
[44.26353836 511.60464478]
[42.39838409 526.48822021]
[40.53322601 541.37182617]
[52.82458115 550.58148193]
[58.84960556 564.70928955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 123]
[9 122]
[10 121]
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[19 112]
[22 109]
[23 108]
[24 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[33 101]
[34 100]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[40 93]
[48 69]
[49 68]
[50 67]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[70 90]
[71 89]
[72 88]
[73 87]
[75 85]
[76 84]
[77 83]
[78 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
