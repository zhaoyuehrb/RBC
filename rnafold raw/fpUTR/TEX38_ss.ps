%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGACUCUGAUUGGCUGGGCAGAUGGGCUGACUGGCUGGGCAGAUGGGUGGGUGAGUUCCCUCUCCCCAGAGCCAUCGGCCAGGUACCAAAGCUCAGCUGU\
) } def
/len { sequence length } bind def

/coor [
[5.25863552 461.60488892]
[-2.13105822 474.84002686]
[-13.60380363 484.74719238]
[-27.77420998 490.13006592]
[-42.93113327 490.33865356]
[-57.24429703 485.34774780]
[-68.98532104 475.76004028]
[-76.73641968 462.73327637]
[-79.56161499 447.84054565]
[-77.11973572 432.88015747]
[-69.70566559 419.65866089]
[-58.21468353 409.77267456]
[-44.03437805 404.41592407]
[-28.87709808 404.23526001]
[-23.93833733 390.07162476]
[-18.99957848 375.90798950]
[-14.06081772 361.74435425]
[-9.12205791 347.58071899]
[-4.18329763 333.41708374]
[0.75546271 319.25344849]
[5.69422293 305.08978271]
[-1.51264453 294.28961182]
[-1.12402952 281.11575317]
[6.94281769 270.44696045]
[19.88536263 266.36544800]
[25.25376129 252.35900879]
[30.62216187 238.35256958]
[22.46188354 229.10845947]
[19.05137062 217.18313599]
[21.11412430 204.87858582]
[28.31076813 194.59811401]
[39.29304123 188.37698364]
[51.95603180 187.47955322]
[58.16833115 173.82644653]
[64.38063812 160.17333984]
[70.59294128 146.52023315]
[76.80523682 132.86712646]
[83.01753998 119.21401978]
[89.22984314 105.56091309]
[95.02288818 91.72470856]
[100.39128876 77.71826935]
[105.75968933 63.71183014]
[98.86070251 52.02541351]
[99.99111938 38.69804382]
[108.50712585 28.63925934]
[121.08634949 25.42269707]
[126.87939453 11.58648968]
[132.67243958 -2.24971724]
[138.46548462 -16.08592415]
[138.91952515 -25.38431168]
[144.65196228 -30.25143623]
[150.86425781 -43.90454102]
[157.07656860 -57.55764771]
[155.74940491 -73.32308960]
[168.06300354 -81.70311737]
[162.28543091 -96.41349030]
[168.67837524 -110.86706543]
[183.44902039 -116.48878479]
[197.83419800 -109.94338226]
[203.29943848 -95.11413574]
[196.60231018 -80.79896545]
[181.71611023 -75.49081421]
[183.48760986 -60.70193100]
[170.72967529 -51.34534454]
[164.51736450 -37.69223785]
[158.30506897 -24.03913307]
[152.30169678 -10.29287910]
[146.50865173 3.54332829]
[140.71560669 17.37953568]
[134.92256165 31.21574211]
[141.97181702 46.39956284]
[135.81425476 62.32656097]
[119.76612854 69.08023071]
[114.39772797 83.08666992]
[109.02932739 97.09310150]
[110.07710266 102.42237854]
[107.96656036 107.93285370]
[102.88294983 111.77321625]
[96.67064667 125.42632294]
[90.45834351 139.07942200]
[84.24604034 152.73252869]
[78.03374481 166.38563538]
[71.82144165 180.03874207]
[65.60913849 193.69184875]
[75.00734711 209.02986145]
[73.46240997 226.79614258]
[61.76288986 240.04922485]
[44.62859726 243.72096252]
[39.26020050 257.72738647]
[33.89179993 271.73382568]
[41.31481552 287.48355103]
[35.24975967 303.44601440]
[19.85786057 310.02856445]
[14.91910076 324.19219971]
[9.98034096 338.35583496]
[5.04158068 352.51947021]
[0.10282049 366.68310547]
[-4.83593988 380.84674072]
[-9.77470016 395.01037598]
[-14.71345997 409.17401123]
[-2.95478535 418.74008179]
[4.82030678 431.75253296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 100]
[15 99]
[16 98]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[25 90]
[26 89]
[27 88]
[33 84]
[34 83]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[40 75]
[41 74]
[42 73]
[46 70]
[47 69]
[48 68]
[49 67]
[51 66]
[52 65]
[53 64]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
