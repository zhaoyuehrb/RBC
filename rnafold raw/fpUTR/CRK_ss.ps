%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCGGAGGGGGAGGCCCGCGGCUGCCGCCGCCAUUUCGGGCGCUGCUGUGAAGCUGAAACCGGAGCCGGUCCGCUGGGCGGCGGGCGCCGGGGGCCGGAGGGGCGCGCGCGGCGGCGGCACCCCAGCGUUUAGGCGCGGAGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[75.09525299 115.75917816]
[67.59565735 115.68115997]
[62.40023804 129.75268555]
[57.20482254 143.82420349]
[52.00940704 157.89572144]
[46.81399155 171.96723938]
[50.11875916 188.02995300]
[37.68236542 198.71957397]
[22.29830360 193.03955078]
[19.79238129 176.83299255]
[32.74247360 166.77182007]
[37.93788910 152.70030212]
[43.13330460 138.62878418]
[48.32872009 124.55726624]
[53.52413559 110.48574829]
[50.57865524 95.77778625]
[40.36517334 84.79212189]
[30.15169334 73.80645752]
[19.93821335 62.82079315]
[9.72473431 51.83512878]
[-5.33841038 46.99650574]
[-8.33776665 32.40702057]
[-18.55124664 21.42135429]
[-28.76472664 10.43568993]
[-38.97820663 -0.54997444]
[-54.53766251 -1.28553963]
[-64.73908997 -12.57206059]
[-63.94195175 -27.40109253]
[-74.15543365 -38.38675690]
[-84.36891174 -49.37242126]
[-94.58238983 -60.35808563]
[-104.79587555 -71.34375000]
[-115.00935364 -82.32941437]
[-125.22283173 -93.31507874]
[-135.43630981 -104.30074310]
[-148.99549866 -101.62724304]
[-161.99665833 -105.98416901]
[-171.06230164 -116.12639618]
[-173.89353943 -129.32092285]
[-169.85241699 -142.08279419]
[-179.83514404 -153.27856445]
[-189.81787109 -164.47433472]
[-199.80059814 -175.67008972]
[-209.78332520 -186.86585999]
[-217.88537598 -191.22575378]
[-219.85430908 -198.39993286]
[-234.70314026 -203.86097717]
[-237.09298706 -218.56260681]
[-246.84065247 -229.96362305]
[-256.58828735 -241.36463928]
[-271.43713379 -246.82568359]
[-273.82699585 -261.52731323]
[-283.57464600 -272.92831421]
[-298.66000366 -270.04269409]
[-313.16186523 -275.10150146]
[-323.17929077 -286.74395752]
[-326.01763916 -301.83831787]
[-320.91339111 -316.32424927]
[-309.23959351 -326.30511475]
[-294.13641357 -329.09613037]
[-279.66656494 -323.94650269]
[-269.72232056 -312.24148560]
[-266.97866821 -297.12963867]
[-272.17361450 -282.67596436]
[-262.42596436 -271.27496338]
[-248.27435303 -266.62939453]
[-245.18727112 -251.11228943]
[-235.43962097 -239.71127319]
[-225.69197083 -228.31025696]
[-211.54035950 -223.66468811]
[-208.45329285 -208.14758301]
[-198.58757019 -196.84858704]
[-188.60484314 -185.65281677]
[-178.62211609 -174.45704651]
[-168.63938904 -163.26129150]
[-158.65666199 -152.06552124]
[-142.41468811 -154.23437500]
[-127.92404175 -146.23519897]
[-120.96616364 -131.03422546]
[-124.45064545 -114.51422119]
[-114.23716736 -103.52855682]
[-104.02368927 -92.54289246]
[-93.81021118 -81.55722809]
[-83.59672546 -70.57156372]
[-73.38324738 -59.58589935]
[-63.16976929 -48.60023499]
[-52.95628738 -37.61457062]
[-38.10855865 -37.33072281]
[-27.59414482 -26.33519173]
[-27.99254227 -10.76345444]
[-17.77906227 0.22221039]
[-7.56558228 11.20787525]
[2.64789772 22.19354057]
[16.98050499 26.24639130]
[20.71039963 41.62164688]
[30.92387962 52.60731125]
[41.13735962 63.59297562]
[51.35083771 74.57864380]
[61.56431961 85.56430817]
[131.14537048 72.34667969]
[143.04161072 62.29097366]
[158.19789124 63.61083221]
[167.71115112 75.01405334]
[182.67140198 76.10536194]
[197.63165283 77.19667816]
[212.59188843 78.28798676]
[226.91841125 71.57521057]
[239.04904175 80.21796417]
[254.00929260 81.30927277]
[262.86141968 78.80098724]
[269.26837158 82.58209229]
[284.20266724 83.98439026]
[299.13699341 85.38669586]
[313.80975342 78.06262970]
[327.33786011 87.33205414]
[325.80474854 103.65938568]
[310.78756714 110.24845886]
[297.73468018 100.32100677]
[282.80038452 98.91870117]
[267.86605835 97.51639557]
[252.91798401 96.26952362]
[237.95773315 95.17821503]
[224.70126343 101.96904755]
[211.50057983 93.24823761]
[196.54032898 92.15692139]
[181.58009338 91.06561279]
[166.61984253 89.97430420]
[155.55242920 99.87621307]
[140.36505127 98.98258972]
[130.05406189 87.30692291]
[125.48319244 93.25311279]
[139.61845398 98.27249908]
[139.21275330 113.26700592]
[124.82675171 117.51470184]
[116.34146118 105.14549255]
[111.77059174 111.09168243]
[116.67214203 125.26824188]
[121.57369232 139.44480896]
[126.62245178 153.56961060]
[131.81787109 167.64112854]
[144.76795959 177.70228577]
[142.26203918 193.90884399]
[126.87797546 199.58886719]
[114.44157410 188.89924622]
[117.74634552 172.83653259]
[112.55092621 158.76501465]
[107.24946594 153.54580688]
[107.39713287 144.34635925]
[102.49558258 130.16979980]
[97.59403229 115.99323273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[16 99]
[17 98]
[18 97]
[19 96]
[20 95]
[22 93]
[23 92]
[24 91]
[25 90]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[34 81]
[35 80]
[40 76]
[41 75]
[42 74]
[43 73]
[44 72]
[46 71]
[48 69]
[49 68]
[50 67]
[52 65]
[53 64]
[100 130]
[103 127]
[104 126]
[105 125]
[106 124]
[108 122]
[109 121]
[111 120]
[112 119]
[113 118]
[136 150]
[137 149]
[138 148]
[139 146]
[140 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
