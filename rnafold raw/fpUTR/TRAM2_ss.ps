%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGAAGUUGUUCCGCGCUGGGCGGGCGAGCGGCUGUGGGAGAGCGGGCGGCGGGCCGGCGGGCGGACCGGGCCGGUGCUGGAGAAGUUUGCGCUGCGGUUCGUGAGCGCAGGGUGCGGGCCCCGCCGGCCGCUGCGCGCCCGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[-142.92086792 353.35925293]
[-152.53155518 349.44158936]
[-164.28695679 358.75881958]
[-176.04235840 368.07601929]
[-187.79776001 377.39324951]
[-193.80685425 392.02886963]
[-208.58714294 393.87069702]
[-220.34254456 403.18792725]
[-232.09794617 412.50515747]
[-243.85334778 421.82235718]
[-255.60874939 431.13958740]
[-267.36416626 440.45678711]
[-279.11956787 449.77401733]
[-290.87496948 459.09121704]
[-302.53213501 468.53103638]
[-308.23342896 483.28927612]
[-322.97189331 485.44027710]
[-334.52960205 495.00161743]
[-346.08728027 504.56298828]
[-354.43746948 519.31799316]
[-370.92742920 515.37878418]
[-371.70700073 498.44274902]
[-355.64865112 493.00527954]
[-344.09094238 483.44393921]
[-332.53326416 473.88256836]
[-327.65866089 459.80819702]
[-312.09350586 456.97332764]
[-308.92349243 450.24179077]
[-300.19216919 447.33581543]
[-288.43676758 438.01861572]
[-276.68136597 428.70138550]
[-264.92596436 419.38418579]
[-253.17056274 410.06695557]
[-241.41516113 400.74975586]
[-229.65975952 391.43252563]
[-217.90435791 382.11529541]
[-212.73608398 368.14611816]
[-197.11497498 365.63784790]
[-185.35957336 356.32061768]
[-173.60417175 347.00341797]
[-161.84877014 337.68618774]
[-161.11183167 318.27545166]
[-146.17619324 305.38790894]
[-126.26536560 307.56677246]
[-115.11819458 297.52981567]
[-103.97102356 287.49285889]
[-92.82385254 277.45590210]
[-81.67667389 267.41894531]
[-70.52950287 257.38198853]
[-59.38233185 247.34503174]
[-48.23516083 237.30807495]
[-37.19370270 227.15493774]
[-26.25917435 216.88671875]
[-15.32464504 206.61851501]
[-4.60755444 196.12356567]
[5.88739538 185.40647888]
[16.38234520 174.68939209]
[26.87729645 163.97230530]
[37.37224579 153.25520325]
[47.86719513 142.53811646]
[58.36214447 131.82102966]
[68.85709381 121.10393524]
[79.35204315 110.38684845]
[89.84700012 99.66975403]
[92.81476593 92.11344147]
[100.67573547 88.84101868]
[101.60292053 75.93288422]
[110.80091858 67.40997314]
[122.93876648 67.46496582]
[133.87329102 57.19675827]
[144.80781555 46.92855072]
[149.57116699 31.84143448]
[164.14549255 28.76926804]
[175.08003235 18.50106049]
[186.01455688 8.23285389]
[190.89085388 -9.49214649]
[208.07739258 -12.89806843]
[218.79447937 -23.39301872]
[229.51156616 -33.88796997]
[240.22866821 -44.38291931]
[250.94575500 -54.87786865]
[255.39208984 -70.06143188]
[269.89889526 -73.43814850]
[274.34521484 -88.62171173]
[288.85202026 -91.99842834]
[299.56912231 -102.49337769]
[310.28619385 -112.98832703]
[312.46334839 -119.34448242]
[316.88513184 -123.04601288]
[321.67871094 -123.68661499]
[332.82589722 -133.72357178]
[343.97305298 -143.76052856]
[355.12023926 -153.79750061]
[362.84521484 -168.88925171]
[379.48565674 -165.64398193]
[380.97375488 -148.75546265]
[365.15719604 -142.65032959]
[354.01004028 -132.61335754]
[342.86285400 -122.57640839]
[331.71566772 -112.53944397]
[320.78115845 -102.27124023]
[310.06405640 -91.77629089]
[299.34698486 -81.28134155]
[295.66717529 -66.84844208]
[280.39382935 -62.72105789]
[276.71405029 -48.28816223]
[261.44070435 -44.16077805]
[250.72361755 -33.66582870]
[240.00651550 -23.17087746]
[229.28942871 -12.67592812]
[218.57234192 -2.18097782]
[218.11900330 9.94852448]
[209.21839905 18.78154945]
[196.28276062 19.16738319]
[185.34823608 29.43559074]
[174.41371155 39.70379639]
[170.43246460 54.05646133]
[155.07603455 57.86308289]
[144.14149475 68.13128662]
[133.20697021 78.39949799]
[129.08433533 95.42832947]
[111.17068481 99.55810547]
[100.56408691 110.16471100]
[90.06913757 120.88179779]
[79.57418823 131.59889221]
[69.07923889 142.31597900]
[58.58428574 153.03306580]
[48.08933640 163.75015259]
[37.59438705 174.46725464]
[27.09943581 185.18434143]
[16.60448647 195.90142822]
[6.10953569 206.61851501]
[4.06598473 213.01887512]
[-0.27730957 216.81219482]
[-5.05643797 217.55305481]
[-15.99096775 227.82125854]
[-26.92549706 238.08946228]
[-31.07578468 246.30259705]
[-38.19820023 248.45524597]
[-49.34537506 258.49221802]
[-60.49254608 268.52917480]
[-71.63971710 278.56613159]
[-82.78688812 288.60308838]
[-93.93405914 298.64004517]
[-105.08123779 308.67700195]
[-116.22840881 318.71395874]
[-114.09484863 329.28494263]
[-116.55827332 339.70059204]
[-123.10128784 348.06799316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 27]
[17 25]
[18 24]
[19 23]
[44 146]
[45 145]
[46 144]
[47 143]
[48 142]
[49 141]
[50 140]
[51 139]
[52 137]
[53 136]
[54 135]
[55 132]
[56 131]
[57 130]
[58 129]
[59 128]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
[66 122]
[69 120]
[70 119]
[71 118]
[73 116]
[74 115]
[75 114]
[77 111]
[78 110]
[79 109]
[80 108]
[81 107]
[83 105]
[85 103]
[86 102]
[87 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
