%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCGCCGCGCCGAGGAGGCUGCCGCUCUGGCUUGCCGCCCCCCGCCGCCGCUGCACACCGGACCCAGCCGCCGUGCCGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[77.92665100 327.62872314]
[61.62146759 325.87573242]
[55.23535919 310.77108765]
[65.33780670 297.85317993]
[66.94123840 282.93911743]
[68.54466248 268.02508545]
[66.07301331 260.87695312]
[70.48076630 252.61071777]
[72.61548615 237.76339722]
[74.75021362 222.91607666]
[76.88493347 208.06875610]
[79.01965332 193.22143555]
[73.17239380 179.52256775]
[82.79490662 166.96400452]
[84.92962646 152.11668396]
[79.08235931 138.41781616]
[88.70487976 125.85924530]
[90.83959961 111.01192474]
[85.82185364 97.96148682]
[94.31307983 86.85335541]
[96.44779968 72.00603485]
[98.58252716 57.15871048]
[100.71724701 42.31138992]
[102.85196686 27.46406746]
[93.82932281 19.31415749]
[90.00382996 7.90104437]
[92.24664307 -3.80181980]
[99.86398315 -12.80662918]
[110.80562592 -16.87399292]
[113.99411011 -31.53119659]
[117.18258667 -46.18840027]
[120.37107086 -60.84560013]
[123.55954742 -75.50280762]
[115.28048706 -88.69730377]
[118.72285461 -103.51637268]
[131.35281372 -111.32788086]
[134.54129028 -125.98508453]
[137.72976685 -140.64228821]
[133.10273743 -155.77175903]
[143.36859131 -166.56349182]
[146.55706787 -181.22070312]
[134.78549194 -191.00276184]
[128.91896057 -205.13932800]
[130.30552673 -220.38189697]
[138.62658691 -233.22784424]
[151.97001648 -240.72528076]
[167.26959229 -241.15133667]
[181.00958252 -234.40811157]
[190.03263855 -222.04515076]
[192.26533508 -206.90336609]
[187.19461060 -192.46221924]
[175.98568726 -182.04020691]
[161.21426392 -178.03222656]
[158.02578735 -163.37501526]
[162.88088989 -149.29391479]
[152.38697815 -137.45381165]
[149.19850159 -122.79660797]
[146.01002502 -108.13940430]
[154.25361633 -95.78713226]
[151.22885132 -80.87722015]
[138.21675110 -72.31432343]
[135.02827454 -57.65712357]
[131.83979797 -42.99991989]
[128.65130615 -28.34271622]
[125.46282959 -13.68551350]
[136.29183960 0.86405164]
[133.22143555 19.05706406]
[117.69928741 29.59878922]
[115.56456757 44.44610977]
[113.42984772 59.29343414]
[111.29512024 74.14075470]
[109.16040039 88.98807526]
[114.17814636 102.03851318]
[105.68692017 113.14664459]
[103.55220032 127.99396515]
[109.24677277 142.75480652]
[99.77694702 154.25140381]
[97.64222717 169.09872437]
[103.33680725 183.85955811]
[93.86698151 195.35615540]
[91.73225403 210.20347595]
[89.59753418 225.05079651]
[87.46281433 239.89811707]
[85.32808685 254.74543762]
[83.45871735 269.62850952]
[81.85528564 284.54254150]
[80.25186157 299.45660400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 87]
[5 86]
[6 85]
[8 84]
[9 83]
[10 82]
[11 81]
[12 80]
[14 78]
[15 77]
[17 75]
[18 74]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[36 58]
[37 57]
[38 56]
[40 54]
[41 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
