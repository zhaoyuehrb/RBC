%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUAAACGGAGGCCUCCGGCAGACGCUGUGAAGAGAGGAGCCGCGGCGGUCAGUACCUUCGAGGAA\
) } def
/len { sequence length } bind def

/coor [
[79.95085907 299.63540649]
[65.41138458 295.10510254]
[53.97584152 285.04785156]
[47.62550735 271.20614624]
[47.46061325 255.97811890]
[53.50973129 242.00213623]
[64.72480774 231.69961548]
[79.16277313 226.85554504]
[80.54679871 211.91952515]
[81.93082428 196.98352051]
[83.31484985 182.04750061]
[84.69887543 167.11149597]
[86.08290100 152.17547607]
[76.43151855 143.34344482]
[73.69380188 130.34944153]
[79.11953735 118.01401520]
[90.88593292 111.05030060]
[85.81341553 98.02105713]
[94.25791168 86.87735748]
[96.33026123 72.02119446]
[98.40260315 57.16504288]
[96.13343048 51.68429184]
[96.42835999 46.46755981]
[98.67639160 42.53305435]
[101.92745209 40.45544434]
[106.03239441 26.02805710]
[110.13734436 11.60067272]
[114.24228668 -2.82671142]
[118.34722900 -17.25409698]
[122.45217896 -31.68148041]
[126.55712128 -46.10886383]
[115.42476654 -56.61264038]
[110.45987701 -71.09049988]
[112.80333710 -86.21553802]
[121.91664124 -98.51213074]
[135.70562744 -105.15460968]
[151.00167847 -104.61659241]
[164.28987122 -97.02169037]
[172.51667786 -84.11518097]
[173.79165649 -68.86286926]
[167.82179260 -54.76962662]
[155.97894287 -45.07398224]
[140.98451233 -42.00392151]
[136.87956238 -27.57653618]
[132.77461243 -13.14915085]
[128.66967773 1.27823341]
[124.56472778 15.70561790]
[120.45977783 30.13300323]
[116.35483551 44.56038666]
[113.25875854 59.23738480]
[111.18641663 74.09354401]
[109.11406708 88.94969940]
[114.18658447 101.97894287]
[105.74208832 113.12264252]
[116.51011658 126.69805908]
[114.34084320 143.55339050]
[101.01891327 153.55950928]
[99.63488770 168.49551392]
[98.25086212 183.43153381]
[96.86683655 198.36753845]
[95.48281097 213.30355835]
[94.09878540 228.23956299]
[107.40081787 235.65412903]
[116.53186035 247.84199524]
[119.90989685 262.69152832]
[116.94966888 277.62997437]
[108.16405487 290.06912231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[17 54]
[19 52]
[20 51]
[21 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
