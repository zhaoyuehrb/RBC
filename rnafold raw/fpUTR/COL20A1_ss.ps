%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGCUCCAGCCUUCCUGUGGCCACAGCAGGACCAGAGUGGACCAGCACACCCCAGGAGAGAGGACUGGGGUCCCAGGAGUAGGAGGAGCCCGAGCACC\
) } def
/len { sequence length } bind def

/coor [
[128.29837036 392.43670654]
[125.96352386 377.41616821]
[129.55938721 362.64666748]
[138.53761292 350.38046265]
[151.52908325 342.48803711]
[149.20561218 327.66906738]
[146.88214111 312.85012817]
[144.55865479 298.03115845]
[142.23518372 283.21221924]
[132.57936096 275.74340820]
[130.60911560 263.28778076]
[137.94194031 252.53666687]
[136.08045959 237.65261841]
[134.21897888 222.76856995]
[131.89550781 207.94961548]
[129.11228943 193.21008301]
[126.32907867 178.47056580]
[123.54586029 163.73103333]
[120.76264191 148.99150085]
[116.35070801 142.89558411]
[118.12956238 133.75073242]
[115.80609131 118.93177032]
[105.88957977 123.22052002]
[95.40704346 122.79076385]
[86.42743683 117.99814606]
[80.60612488 110.03285980]
[78.88111877 100.63684845]
[81.32926941 91.72666931]
[70.80547333 81.03791046]
[55.60997391 76.63251495]
[52.19416428 62.13487625]
[41.67036057 51.44611740]
[26.47486687 47.04072571]
[23.05905724 32.54308701]
[12.53525352 21.85432816]
[2.01145124 11.16556740]
[-13.40960026 4.12088823]
[-10.90920162 -12.64766407]
[5.89620829 -14.88697910]
[12.70021057 0.64176530]
[23.22401237 11.33052444]
[33.74781418 22.01928329]
[48.19057846 25.66014671]
[52.35912323 40.92231369]
[62.88292313 51.61107635]
[77.32568359 55.25193787]
[81.49423218 70.51410675]
[92.01803589 81.20286560]
[103.28045654 78.41252136]
[115.03382111 82.26589966]
[123.44722748 92.35330963]
[133.28616333 81.03096008]
[143.12509155 69.70861816]
[152.96401978 58.38627243]
[162.80294800 47.06393051]
[172.64187622 35.74158478]
[182.48080444 24.41924095]
[178.05673218 9.63982391]
[182.34729004 -5.17890501]
[193.98335266 -15.30834293]
[209.25190735 -17.51622200]
[223.28082275 -11.09801674]
[231.59350586 1.89824665]
[231.53741455 17.32550812]
[223.13044739 30.26098442]
[209.05525208 36.57701111]
[193.80314636 34.25817108]
[183.96421814 45.58051300]
[174.12528992 56.90285873]
[164.28636169 68.22520447]
[154.44743347 79.54754639]
[144.60850525 90.86988831]
[134.76957703 102.19223785]
[130.62504578 116.60829926]
[132.94851685 131.42726135]
[135.50216675 146.20828247]
[138.28538513 160.94781494]
[141.06860352 175.68734741]
[143.85182190 190.42687988]
[146.63504028 205.16639709]
[150.82556152 210.64898682]
[151.39094543 216.53031921]
[149.10302734 220.90708923]
[150.96450806 235.79113770]
[152.82598877 250.67518616]
[164.28628540 264.98284912]
[157.05415344 280.88873291]
[159.37762451 295.70770264]
[161.70109558 310.52664185]
[164.02456665 325.34561157]
[166.34803772 340.16455078]
[181.13162231 343.70211792]
[193.43316650 352.63186646]
[201.37678528 365.59207153]
[203.75112915 380.60644531]
[200.19413757 395.38534546]
[191.24822998 407.67514038]
[178.27755737 415.60171509]
[163.26010132 417.95629883]
[148.48587036 414.37988281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 91]
[6 90]
[7 89]
[8 88]
[9 87]
[12 85]
[13 84]
[14 83]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[21 75]
[22 74]
[28 48]
[29 47]
[31 45]
[32 44]
[34 42]
[35 41]
[36 40]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
