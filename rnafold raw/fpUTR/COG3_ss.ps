%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUUUCCGGGGUCAGGGCAUUCCGUCCCGCCCCGCCGCCGGUGCAGUGUUGGAAGCUCCGGUUCUCCCGGAAGUGGCCCAGGUCUCUCUGUCGGGGUCCCCUCCAUCUCGCUGCUGCUGAAGGCCGCGAGGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[55.31947708 243.10673523]
[60.00879288 257.35491943]
[57.67330933 272.17196655]
[48.82861328 284.28689575]
[35.42728043 291.02517700]
[20.42780876 290.89923096]
[7.14151192 283.93685913]
[-1.49850345 271.67514038]
[-3.58485103 256.82095337]
[1.34370470 242.65251160]
[-11.18525791 250.90023804]
[-23.71422005 259.14797974]
[-36.24318314 267.39572144]
[-48.77214432 275.64343262]
[-52.15810776 288.14160156]
[-62.82768250 294.74334717]
[-74.73504639 292.35269165]
[-87.44216156 300.32321167]
[-100.14928436 308.29373169]
[-112.85640717 316.26425171]
[-117.82574463 331.51824951]
[-132.90007019 337.00863647]
[-146.51565552 328.52362061]
[-148.22778320 312.57217407]
[-136.72305298 301.39093018]
[-120.82691956 303.55712891]
[-108.11979675 295.58660889]
[-95.41267395 287.61608887]
[-82.70555878 279.64556885]
[-75.38783264 263.73144531]
[-57.01987839 263.11447144]
[-44.49091721 254.86674500]
[-31.96195412 246.61901855]
[-19.43299103 238.37127686]
[-6.90402794 230.12355042]
[4.53943014 220.42575073]
[14.73051262 209.41931152]
[24.92159462 198.41285706]
[35.11267853 187.40641785]
[45.30376053 176.39996338]
[55.49484253 165.39352417]
[65.68592072 154.38708496]
[68.65555573 139.79151917]
[83.70881653 134.92222595]
[68.82654572 136.79785156]
[54.21176529 133.42024231]
[41.66164398 125.20473480]
[32.71945953 113.16159058]
[28.48482513 98.77173615]
[29.47846985 83.80468750]
[35.57820129 70.10092163]
[46.03394699 59.34557724]
[59.55998230 52.86123276]
[56.29104996 38.22176361]
[43.23212051 29.73046303]
[40.12550354 14.83739090]
[48.30113983 2.44002843]
[45.03220367 -12.19944191]
[41.76327133 -26.83891106]
[38.33373260 -41.44158936]
[34.74399567 -56.00571823]
[31.15426254 -70.56984711]
[27.56452751 -85.13397217]
[14.63430119 -94.63075256]
[14.14131737 -110.66622925]
[26.46375084 -120.93936157]
[42.14888382 -117.56947327]
[49.16442871 -103.14166260]
[42.12865448 -88.72370911]
[45.71839142 -74.15958405]
[49.30812454 -59.59545517]
[52.89785767 -45.03132629]
[57.58889771 -39.24486160]
[56.40274429 -30.10784340]
[59.67167664 -15.46837425]
[62.94060898 -0.82890415]
[75.61328125 6.91311836]
[79.13698578 21.71305466]
[70.93051910 34.95282745]
[74.19945526 49.59230042]
[88.83892059 52.86123276]
[98.02471161 41.00284958]
[107.21051025 29.14446831]
[116.39630127 17.28608513]
[118.07387543 0.97296953]
[133.14880371 -5.48291206]
[146.11329651 4.55969858]
[143.63058472 20.76982498]
[128.25468445 26.47187805]
[119.06888580 38.33026123]
[109.88309479 50.18864059]
[100.69730377 62.04702377]
[104.95778656 68.21940613]
[113.47875977 80.56416321]
[117.73925018 86.73654175]
[132.08435059 82.35271454]
[146.42945862 77.96888733]
[160.77456665 73.58506775]
[171.55845642 61.23031616]
[187.59556580 64.65713501]
[192.38829041 80.34030151]
[181.00630188 92.14632416]
[165.15838623 87.93017578]
[150.81327820 92.31399536]
[136.46817017 96.69782257]
[122.12306976 101.08164978]
[121.05570984 108.50531006]
[118.92098999 123.35263062]
[117.85362244 130.77629089]
[130.38258362 139.02401733]
[142.91154480 147.27175903]
[155.44052124 155.51948547]
[167.96948242 163.76722717]
[183.75061035 164.89253235]
[190.12690735 178.35330200]
[202.65586853 186.60104370]
[215.18482971 194.84877014]
[230.61137390 191.41409302]
[243.90327454 199.96400452]
[247.17466736 215.42601013]
[238.48469543 228.62677002]
[222.98896790 231.73449707]
[209.88082886 222.90545654]
[206.93708801 207.37773132]
[194.40812683 199.13000488]
[181.87916565 190.88226318]
[166.99418640 190.34687805]
[159.72174072 176.29618835]
[147.19277954 168.04844666]
[134.66381836 159.80072021]
[122.13485718 151.55297852]
[109.60589600 143.30525208]
[94.71526337 145.11329651]
[91.01669312 160.49612427]
[76.69236755 164.57815552]
[66.50128937 175.58460999]
[56.31020355 186.59104919]
[46.11912155 197.59750366]
[35.92803955 208.60394287]
[25.73695755 219.61038208]
[15.54587555 230.61683655]
[30.32961655 228.07891846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[17 29]
[18 28]
[19 27]
[20 26]
[36 141]
[37 140]
[38 139]
[39 138]
[40 137]
[41 136]
[42 135]
[44 133]
[53 80]
[54 79]
[57 76]
[58 75]
[59 74]
[60 72]
[61 71]
[62 70]
[63 69]
[81 92]
[82 91]
[83 90]
[84 89]
[95 106]
[96 105]
[97 104]
[98 103]
[109 132]
[110 131]
[111 130]
[112 129]
[113 128]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
