%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGUGGCGGGCGGCGGGAGCGGCGCGGGCGCGUGCGGGCGGCGGCAGCGGCGGUGACGGCAGCCUAGGCCGGGCGAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[120.74179840 309.45022583]
[107.64408875 302.13928223]
[103.22301483 287.80560303]
[109.92693329 274.38705444]
[124.04327393 269.31469727]
[137.75404358 275.39700317]
[134.96536255 260.65850830]
[132.17669678 245.92001343]
[129.38801575 231.18151855]
[126.05020142 216.55758667]
[122.16791534 202.06871033]
[118.28563690 187.57981873]
[114.40335083 173.09092712]
[110.25081635 158.67716980]
[99.10583496 148.79594421]
[102.43171692 133.32826233]
[98.01038361 118.99467468]
[85.24935913 112.13156128]
[80.97849274 98.28576660]
[87.65602112 85.42665100]
[76.19479370 74.52019501]
[79.83692169 60.07774734]
[75.41559601 45.74415588]
[63.95436859 34.83769608]
[67.59648895 20.39525223]
[63.17516327 6.06165934]
[58.75383759 -8.27193260]
[47.29261017 -19.17839241]
[50.93473434 -33.62083817]
[39.47350693 -44.52729797]
[43.11563492 -58.96974182]
[38.69430542 -73.30333710]
[34.27297974 -87.63692474]
[29.58440208 -101.88533783]
[24.63021469 -116.04358673]
[11.85395050 -126.32459259]
[14.63646507 -142.48596191]
[30.11534691 -147.90225220]
[42.36724854 -137.00166321]
[38.78846741 -120.99777222]
[43.74265289 -106.83952332]
[49.05380249 -101.43471527]
[48.60657120 -92.05825043]
[53.02789688 -77.72466278]
[57.44922638 -63.39106750]
[68.59420776 -53.50984192]
[65.26832581 -38.04216385]
[76.41330719 -28.16093826]
[73.08742523 -12.69326019]
[77.50875854 1.64033163]
[81.93008423 15.97392368]
[93.07506561 25.85515022]
[89.74918365 41.32282639]
[94.17050934 55.65642166]
[105.31549835 65.53764343]
[101.98961639 81.00532532]
[114.75064087 87.86843872]
[119.02150726 101.71423340]
[112.34397888 114.57334900]
[116.76530457 128.90693665]
[128.22653198 139.81340027]
[124.58440399 154.25584412]
[130.23588562 161.75111389]
[128.89224243 169.20864868]
[132.77452087 183.69754028]
[136.65679932 198.18641663]
[140.53909302 212.67530823]
[145.20581055 217.91244507]
[146.17927551 223.83033752]
[144.12651062 228.39283752]
[146.91519165 243.13133240]
[149.70385742 257.86984253]
[152.49253845 272.60833740]
[156.91386414 286.94192505]
[162.91224670 300.69036865]
[168.91062927 314.43878174]
[182.41946411 323.73626709]
[180.85247803 340.06039429]
[165.82164001 346.61828613]
[152.78938293 336.66375732]
[155.16218567 320.43716431]
[149.16381836 306.68875122]
[143.16543579 292.94030762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 73]
[7 72]
[8 71]
[9 70]
[10 67]
[11 66]
[12 65]
[13 64]
[14 62]
[16 60]
[17 59]
[20 56]
[22 54]
[23 53]
[25 51]
[26 50]
[27 49]
[29 47]
[31 45]
[32 44]
[33 43]
[34 41]
[35 40]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
