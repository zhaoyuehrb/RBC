%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGGAGGAGGAAGGAGAUGGCAUGGCUUACCAUAAAGAAGCACUGGACGCCGGGUGCACGUUCCAGGAUCCAGGUGCCCAGGGGUC\
) } def
/len { sequence length } bind def

/coor [
[66.57384491 133.63398743]
[57.18758392 120.38748932]
[42.79518890 124.61347961]
[28.40279579 128.83946228]
[14.01040077 133.06546021]
[7.05022526 144.10009766]
[-5.19625092 147.23941040]
[-15.89960575 141.30470276]
[-30.43366623 145.01431274]
[-44.96772385 148.72390747]
[-49.20074081 163.42182922]
[-60.15000534 173.95797729]
[-74.80552673 177.57489014]
[-89.20736694 173.39843750]
[-99.51560974 162.64642334]
[-107.36350250 176.36451721]
[-122.63468933 180.43470764]
[-136.26904297 172.44221497]
[-140.17755127 157.12884521]
[-132.04135132 143.57975769]
[-116.68751526 139.83337402]
[-103.22520447 148.11236572]
[-99.33077240 133.73533630]
[-88.69213867 123.16767120]
[-74.09589386 119.31852722]
[-59.43651199 123.31845856]
[-48.67732239 134.18984985]
[-34.14326096 130.48023987]
[-19.60920334 126.77064514]
[-7.87722588 113.85173798]
[9.78441238 118.67305756]
[24.17680740 114.44706726]
[38.56920242 110.22108459]
[52.96159744 105.99509430]
[53.20783234 92.31587982]
[57.34930038 79.27633667]
[65.04123688 67.96193695]
[75.64332581 59.31455994]
[88.27299500 54.05405426]
[101.87888336 52.61833191]
[115.32836151 55.12691498]
[127.50183105 61.37096786]
[137.38589478 70.83071136]
[144.15776062 82.71865845]
[158.81495667 79.53018188]
[173.47216797 76.34169769]
[188.12936401 73.15322113]
[199.96948242 62.65930557]
[214.05058289 67.51440430]
[228.70777893 64.32592773]
[243.36499023 61.13745117]
[258.02218628 57.94897079]
[272.62014771 54.49938202]
[287.15420532 50.78978348]
[301.68826294 47.08018875]
[316.22232056 43.37059021]
[327.68032837 32.46075821]
[341.92575073 36.81018066]
[347.53320312 22.34173012]
[360.59228516 13.96080494]
[376.08151245 14.89004040]
[388.04498291 24.77212524]
[391.88244629 39.80719757]
[386.11834717 54.21396637]
[372.96911621 62.45273209]
[357.49087524 61.35552597]
[345.63534546 51.34423828]
[335.21691895 61.98873520]
[319.93191528 57.90464783]
[305.39785767 61.61424637]
[290.86380005 65.32384491]
[276.32974243 69.03343964]
[270.49606323 73.84725952]
[261.21066284 72.60617065]
[246.55346680 75.79465485]
[231.89625549 78.98313141]
[217.23905945 82.17160797]
[206.44732666 92.43746948]
[191.31785583 87.81042480]
[176.66064453 90.99890137]
[162.00344849 94.18738556]
[147.34623718 97.37586212]
[145.45648193 113.50038910]
[138.23840332 128.04241943]
[126.53807831 139.29736328]
[111.72700500 145.94595337]
[95.54131317 147.20881653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[5 31]
[8 29]
[9 28]
[10 27]
[15 22]
[44 82]
[45 81]
[46 80]
[47 79]
[49 77]
[50 76]
[51 75]
[52 74]
[53 72]
[54 71]
[55 70]
[56 69]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
