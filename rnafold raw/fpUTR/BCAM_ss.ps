%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGGCUCCCAGCCCCGCAGCGGCCGAGCUGCAGCCCGGGCUCAGUCUCCGCCGCCGCCGUGAAC\
) } def
/len { sequence length } bind def

/coor [
[42.33266068 263.06964111]
[34.34423065 264.14306641]
[26.34775352 263.26489258]
[18.81208611 260.49420166]
[12.17724419 256.00085449]
[0.08346386 264.87442017]
[-12.01031685 273.74801636]
[-24.10409737 282.62158203]
[-33.29758453 296.86645508]
[-49.53076172 291.97561646]
[-49.32485962 275.02291870]
[-32.97768021 270.52780151]
[-20.88389969 261.65423584]
[-8.79011917 252.78065491]
[3.30366087 243.90705872]
[2.22932220 219.93415833]
[17.73454857 201.35426331]
[41.91443634 198.06652832]
[48.69294357 184.68550110]
[47.54219818 169.83541870]
[60.68070221 161.02120972]
[67.45920563 147.64018250]
[74.23770905 134.25915527]
[81.01622009 120.87812805]
[87.79472351 107.49710083]
[87.22206116 93.52700806]
[98.82424927 85.72438812]
[105.60276031 72.34336090]
[112.38126373 58.96233749]
[118.84421539 45.42608261]
[124.98807526 31.74203873]
[131.13192749 18.05799675]
[131.85585022 8.59139538]
[137.89790344 3.88709188]
[144.67640686 -9.49393463]
[151.45491028 -22.87496185]
[150.01846313 -39.21107483]
[163.60119629 -48.40027237]
[178.23036194 -40.98949432]
[178.85671997 -24.60231209]
[164.83593750 -16.09645653]
[158.05743408 -2.71543002]
[151.27893066 10.66559696]
[144.81597900 24.20185089]
[138.67211914 37.88589478]
[132.52825928 51.56993866]
[132.66873169 59.22611618]
[125.76229095 65.74084473]
[118.98377991 79.12187195]
[112.20527649 92.50289917]
[112.77793884 106.47299194]
[101.17575073 114.27561188]
[94.39723969 127.65663910]
[87.61873627 141.03765869]
[80.84023285 154.41868591]
[74.06172943 167.79971313]
[74.72763062 183.60690308]
[62.07397079 191.46400452]
[55.29546356 204.84503174]
[60.88182449 210.84948730]
[64.85204315 218.00781250]
[66.97950745 225.89587402]
[67.14655304 234.04841614]
[65.35090637 241.98643494]
[61.70538330 249.24536133]
[56.43084717 255.40219116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[8 12]
[18 59]
[19 58]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[27 50]
[28 49]
[29 48]
[30 46]
[31 45]
[32 44]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
