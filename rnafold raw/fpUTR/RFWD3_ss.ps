%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGGCAGUUGGCGUAGGUGCAUUCGGAGUGCGGCCGAGGUAACUACCGAGUCUUCGGCGGGCUCGCGAGCCCGGCCGCGGCCUGCUGGUUUCAGUG\
) } def
/len { sequence length } bind def

/coor [
[86.56436157 155.09675598]
[76.48926544 143.98403931]
[73.80034637 129.22700500]
[79.30828857 115.27485657]
[91.35301208 106.33387756]
[76.50569153 104.19915009]
[61.74485397 109.89373016]
[50.24826050 100.42390442]
[35.40093613 98.28918457]
[20.55361557 96.15445709]
[5.70629406 94.01973724]
[-9.14102745 91.88500977]
[-23.90186691 97.57958984]
[-35.39846039 88.10976410]
[-45.27469635 97.42887878]
[-58.53033447 99.27194214]
[-70.22701263 93.18127441]
[-76.13930511 81.61280060]
[-90.91142273 79.00807953]
[-105.68354034 76.40335846]
[-120.49511719 74.03333282]
[-135.34243774 71.89861298]
[-150.18975830 69.76388550]
[-165.03707886 67.62916565]
[-179.88441467 65.49444580]
[-196.42280579 69.22509766]
[-204.58595276 54.36577606]
[-192.56710815 42.40818024]
[-177.74967957 50.64712143]
[-162.90235901 52.78184509]
[-148.05503845 54.91656876]
[-133.20771790 57.05128860]
[-118.36039734 59.18601227]
[-111.16002655 56.98168564]
[-103.07881165 61.63123703]
[-88.30670166 64.23596191]
[-73.53458405 66.84068298]
[-60.28260040 56.62211609]
[-43.39545822 59.11057663]
[-33.26373672 73.26244354]
[-19.56487846 67.41517639]
[-7.00630474 77.03768921]
[7.84101677 79.17241669]
[22.68833923 81.30713654]
[37.53565979 83.44185638]
[52.38298035 85.57658386]
[66.08184052 79.72931671]
[78.64041138 89.35182953]
[93.48773956 91.48655701]
[108.48773956 91.48655701]
[123.33506012 89.35182953]
[138.18237305 87.21710968]
[144.33065796 77.96529388]
[154.39205933 73.80779266]
[164.84283447 75.93280029]
[172.17005920 83.37340546]
[187.12287903 82.18465424]
[202.07571411 80.99590302]
[217.02853394 79.80715942]
[231.98135376 78.61840820]
[246.93417358 77.42965698]
[261.88699341 76.24090576]
[276.83981323 75.05216217]
[291.79263306 73.86341095]
[300.27923584 70.00307465]
[307.23745728 72.88185883]
[322.22045898 72.16813660]
[337.20349121 71.45440674]
[352.18649292 70.74067688]
[360.79129028 67.15155029]
[367.65466309 70.24965668]
[382.65280151 70.01166534]
[398.39398193 63.71478271]
[408.80239868 77.09767151]
[398.82385254 90.80405426]
[382.89077759 85.00978088]
[367.89266968 85.24776459]
[352.90020752 85.72368622]
[337.91720581 86.43741608]
[322.93420410 87.15114594]
[307.95117188 87.86487579]
[292.98138428 88.81623077]
[278.02856445 90.00498199]
[263.07574463 91.19373322]
[248.12292480 92.38247681]
[233.17010498 93.57122803]
[218.21728516 94.75997925]
[203.26445007 95.94873047]
[188.31163025 97.13747406]
[173.35881042 98.32622528]
[158.48519897 110.50922394]
[140.31710815 102.06443024]
[125.46977997 104.19915009]
[110.62245941 106.33387756]
[122.66683197 115.27439880]
[128.17506409 129.22644043]
[125.48645782 143.98352051]
[115.41160583 155.09645081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 49]
[6 48]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[14 40]
[18 37]
[19 36]
[20 35]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[50 94]
[51 93]
[52 92]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[66 81]
[67 80]
[68 79]
[69 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
