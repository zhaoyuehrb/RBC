%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGACCAAUGGUGGAGGCUGCAGCCUGCGAACUAGUCGGUGGCUCGGGCGCCGGCGGGGAGCUGCUCGGCGGCGGACAGUGUA\
) } def
/len { sequence length } bind def

/coor [
[79.81036377 115.95004272]
[91.41270447 106.44610596]
[76.53803253 104.51111603]
[61.85505676 110.40355682]
[50.23223114 101.08909607]
[35.35756302 99.15410614]
[20.48289108 97.21912384]
[6.95150328 108.12149048]
[-9.96161938 106.02565002]
[-20.01959801 92.68423462]
[-34.95560837 91.30020905]
[-49.89162064 89.91618347]
[-64.82763672 88.53215790]
[-79.80458832 87.70098877]
[-93.74538422 95.18195343]
[-106.32750702 87.21079254]
[-121.32494354 86.93360901]
[-136.32238770 86.65642548]
[-151.31982422 86.37924194]
[-165.40133667 94.78416443]
[-179.58715820 86.55649567]
[-179.28411865 70.16014862]
[-164.80397034 62.46228027]
[-151.04263306 71.38179779]
[-136.04519653 71.65898132]
[-121.04776001 71.93616486]
[-106.05032349 72.21334839]
[-93.18224335 64.71255493]
[-79.52740479 72.70355225]
[-75.37685394 69.91822052]
[-69.38578796 69.88343048]
[-63.44361115 73.59614563]
[-48.50759888 74.98017120]
[-33.57158279 76.36419678]
[-18.63557243 77.74822235]
[-9.85313416 68.13005066]
[3.07387924 65.35900116]
[15.38695717 70.68790436]
[22.41787910 82.34445190]
[37.29254913 84.27943420]
[52.16722107 86.21442413]
[65.78625488 80.18357849]
[78.47302246 89.63644409]
[93.34768677 91.57143402]
[108.33744812 91.01715851]
[123.02859497 87.98892212]
[134.98258972 77.62492371]
[149.00982666 82.63349915]
[160.96383667 72.26950073]
[174.99107361 77.27807617]
[189.68222046 74.24983978]
[204.37336731 71.22160339]
[219.06451416 68.19336700]
[233.75566101 65.16513062]
[248.38833618 61.86593628]
[262.95755005 58.29690933]
[277.52676392 54.72788239]
[292.09597778 51.15885162]
[303.55850220 39.43099976]
[319.37719727 43.75550461]
[323.27911377 59.68368530]
[311.25033569 70.82999420]
[295.66500854 65.72806549]
[281.09579468 69.29709625]
[266.52658081 72.86612701]
[251.95736694 76.43515015]
[246.06944275 81.19926453]
[236.78388977 79.85627747]
[222.09274292 82.88451385]
[207.40159607 85.91275024]
[192.71044922 88.94098663]
[178.01930237 91.96922302]
[167.11611938 102.11662292]
[152.03807068 97.32464600]
[141.13487244 107.47204590]
[126.05683136 102.68006897]
[111.36568451 105.70830536]
[123.63955688 114.33106995]
[129.54350281 128.12031555]
[127.31243896 142.95347595]
[117.61336517 154.39584351]
[103.34603119 159.02651978]
[88.77593994 155.46104431]
[78.25913239 144.76541138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[5 41]
[6 40]
[7 39]
[10 35]
[11 34]
[12 33]
[13 32]
[14 29]
[16 27]
[17 26]
[18 25]
[19 24]
[45 77]
[46 76]
[48 74]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
