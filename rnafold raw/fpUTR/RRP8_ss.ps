%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGCCGCGCCGGCCGCUCUAGCAACCCCUGGCUGUCACGCUUUGGUUUCCGGGUCGGUUCUGGCAGGUCUGAGCGCUCCGACUUCCAGAGGAGCGCUGUGCACGUGGAGAAGAGCGGGGACUCGGCGACCCUGCCCUCCCGACCCUC\
) } def
/len { sequence length } bind def

/coor [
[106.85995483 140.44137573]
[88.95010376 141.59922791]
[83.10046387 155.41160583]
[77.25081635 169.22398376]
[71.54711151 183.09725952]
[65.98997498 197.02989197]
[60.43283844 210.96252441]
[60.18091583 227.91459656]
[43.82159424 232.36532593]
[35.01609421 217.87741089]
[46.50020599 205.40538025]
[52.05734253 191.47274780]
[57.61447906 177.54011536]
[57.16812897 170.11174011]
[63.43844604 163.37434387]
[69.28808594 149.56196594]
[75.13773346 135.74958801]
[70.83231354 129.60847473]
[64.50090027 143.20675659]
[49.55873108 144.52262878]
[40.94815826 132.24020386]
[47.27986145 118.64205170]
[62.22146988 117.32623291]
[57.91604996 111.18511200]
[42.93688202 111.97541809]
[27.95771790 112.76571655]
[12.97855091 113.55602264]
[5.15217638 124.56759644]
[-7.41133356 128.97601318]
[-20.02722740 125.37596130]
[-28.12765312 115.30493927]
[-43.12015152 115.77925873]
[-58.11265182 116.25358582]
[-68.74490356 127.94677734]
[-84.53511810 128.61351013]
[-96.11524963 117.85823059]
[-96.61500549 102.06184387]
[-85.73789215 90.59607697]
[-69.93710327 90.26335144]
[-58.58697510 101.26108551]
[-43.59447479 100.78676605]
[-28.60197639 100.31243896]
[-17.66165733 87.57976532]
[-0.56290436 86.64813995]
[12.18824768 98.57685852]
[27.16741371 97.78655243]
[42.14657974 96.99624634]
[57.12574768 96.20594788]
[67.98815918 75.16904449]
[87.34722137 64.18429565]
[108.14829254 65.49243927]
[123.69803619 77.13814545]
[136.58171082 69.45629883]
[149.46539307 61.77444458]
[162.34907532 54.09259415]
[175.23275757 46.41074371]
[188.11642456 38.72889328]
[201.00010681 31.04704475]
[201.23065186 17.22700119]
[208.21963501 5.42809963]
[220.04028320 -1.30757868]
[233.53683472 -1.30545056]
[245.16688538 5.32651567]
[258.20965576 -2.08200121]
[271.25244141 -9.49051762]
[284.29519653 -16.89903450]
[297.33798218 -24.30755234]
[310.38073730 -31.71606827]
[307.84036255 -45.63001251]
[311.83294678 -60.05480957]
[322.24392700 -71.92779541]
[337.53686523 -78.42407990]
[354.95812988 -77.60511017]
[361.66915894 -91.02009583]
[368.38021851 -104.43508148]
[375.09124756 -117.85006714]
[381.80230713 -131.26506042]
[388.51333618 -144.68003845]
[395.22439575 -158.09503174]
[401.93542480 -171.51002502]
[393.40869141 -184.28462219]
[392.42764282 -199.61215210]
[399.25616455 -213.36956787]
[412.05743408 -221.85621643]
[427.38796997 -222.78923035]
[441.12393188 -215.91761780]
[449.57040405 -203.08981323]
[450.45535278 -187.75643921]
[443.54071045 -174.04208374]
[430.68649292 -165.63584900]
[415.35043335 -164.79898071]
[408.63937378 -151.38398743]
[401.92834473 -137.96899414]
[395.21728516 -124.55401611]
[388.50625610 -111.13902283]
[381.79519653 -97.72403717]
[375.08416748 -84.30905151]
[368.37310791 -70.89406586]
[371.72863770 -64.18656921]
[382.41323853 -74.71459198]
[395.72769165 -67.80625153]
[393.27185059 -53.00865555]
[378.43969727 -50.77158356]
[381.79519653 -44.06408691]
[396.55496216 -41.39018250]
[411.31469727 -38.71627426]
[426.27310181 -43.86962128]
[437.41726685 -33.98747635]
[452.17703247 -31.31357002]
[466.93676758 -28.63966179]
[476.30114746 -40.74614334]
[490.22387695 -47.10351181]
[505.50561523 -46.25088501]
[518.63476562 -38.38419342]
[526.59423828 -25.31114388]
[527.55511475 -10.03582668]
[521.29656982 3.93159986]
[509.25674438 13.38152504]
[494.20233154 16.14242554]
[479.59268188 11.57986450]
[468.78500366 0.74228698]
[464.26284790 -13.87991142]
[449.50311279 -16.55381966]
[434.74334717 -19.22772789]
[420.84066772 -13.88312244]
[408.64080811 -23.95652390]
[393.88104248 -26.63043022]
[379.12130737 -29.30433846]
[361.16156006 -9.25538921]
[336.59774780 -6.12259436]
[317.78924561 -18.67329788]
[304.74649048 -11.26478100]
[291.70370483 -3.85626388]
[278.66094971 3.55225301]
[265.61816406 10.96076965]
[252.57540894 18.36928749]
[251.28523254 34.70314026]
[240.42317200 47.19052505]
[224.10191345 50.80296326]
[208.68196106 43.93072510]
[195.79827881 51.61257172]
[182.91459656 59.29442215]
[170.03092957 66.97627258]
[157.14724731 74.65812683]
[144.26356506 82.33997345]
[131.37988281 90.02182770]
[134.70039368 104.17675781]
[131.57008362 119.24517059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 13]
[6 12]
[7 11]
[24 48]
[25 47]
[26 46]
[27 45]
[31 42]
[32 41]
[33 40]
[52 146]
[53 145]
[54 144]
[55 143]
[56 142]
[57 141]
[58 140]
[63 136]
[64 135]
[65 134]
[66 133]
[67 132]
[68 131]
[73 98]
[74 97]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[104 128]
[105 127]
[106 126]
[108 124]
[109 123]
[110 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
