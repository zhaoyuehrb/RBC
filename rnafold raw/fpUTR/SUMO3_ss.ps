%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCACGUGACCCCCGUGCCGGCCAACGGGUGCGCCGGGAUUUGGGGGAUAAAGCGCGGCCCCGCGCACAGUUGCGGCGGGAGAGCGGCGGGGCCGAGAGCGUGACUCGCCCGCUCCGCGCUGCUUCCCCCGCGCCGCCUCCCCGCGCCGCUCGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 246.14540100]
[92.50000000 230.30625916]
[92.50000000 215.30625916]
[81.81912994 204.98858643]
[81.60544586 189.77644348]
[92.50000000 178.64332581]
[92.50000000 163.64332581]
[92.50000000 148.64332581]
[92.50000000 133.64332581]
[92.50000000 118.64331818]
[79.88835144 110.52259064]
[66.23290253 116.72975159]
[52.57746124 122.93691254]
[38.92201614 129.14407349]
[25.26657486 135.35122681]
[11.73406219 141.82202148]
[-1.67042708 148.55401611]
[-10.53021717 161.66181946]
[-25.37621689 160.45950317]
[-38.78070831 167.19149780]
[-52.18519592 173.92347717]
[-65.58968353 180.65547180]
[-78.99417877 187.38745117]
[-92.33276367 194.24909973]
[-105.60418701 201.23974609]
[-111.70847321 216.07609558]
[-127.15355682 220.41534424]
[-140.09127808 210.92878723]
[-140.59693909 194.89370728]
[-128.28263855 184.61083984]
[-112.59484100 187.96832275]
[-99.32341003 180.97767639]
[-94.84893036 175.04884338]
[-85.72616577 173.98297119]
[-72.32167053 167.25097656]
[-58.91718292 160.51899719]
[-45.51269531 153.78700256]
[-32.10820389 147.05502319]
[-24.20719337 134.42872620]
[-8.40241432 135.14952087]
[5.00207472 128.41754150]
[7.33893061 124.20110321]
[12.37343693 121.43343353]
[19.05941391 121.69578552]
[32.71485901 115.48862457]
[46.37030029 109.28146362]
[60.02574539 103.07430267]
[73.68119049 96.86714172]
[74.98355103 89.48108673]
[60.12952805 91.56865692]
[53.55400467 78.08673096]
[64.34415436 67.66690826]
[77.58827209 74.70896912]
[78.89063263 67.32291412]
[68.18168640 56.81965256]
[57.47274399 46.31639099]
[46.76379776 35.81313324]
[36.05485153 25.30987167]
[20.04775810 21.74545860]
[15.38988686 6.02170992]
[26.87285423 -5.68612909]
[42.68396759 -1.33403754]
[46.55810928 14.60092545]
[57.26705551 25.10418701]
[67.97600555 35.60744476]
[78.68495178 46.11070633]
[89.39389801 56.61396790]
[85.03144073 42.26234818]
[99.28885651 37.60120773]
[113.80738068 41.37113571]
[123.99588013 52.37997437]
[126.63246918 67.14643860]
[120.88361359 81.00070190]
[110.97334290 92.26065063]
[125.06873322 87.13034821]
[139.16412354 82.00004578]
[153.25950623 76.86974335]
[167.35490417 71.73944092]
[181.29512024 66.20134735]
[195.06835938 60.26015472]
[208.84159851 54.31895828]
[222.61483765 48.37776184]
[236.38807678 42.43656540]
[243.06858826 36.13325119]
[250.48648071 36.51657867]
[264.37234497 30.84357834]
[278.25820923 25.17058182]
[292.14407349 19.49758339]
[306.02990723 13.82458591]
[319.91577148 8.15158749]
[333.74597168 2.34421730]
[347.51922607 -3.59697914]
[361.29244995 -9.53817558]
[367.19995117 -23.95133591]
[381.25262451 -29.78034782]
[394.95697021 -24.05962372]
[408.73019409 -30.00082016]
[422.50344849 -35.94201660]
[436.21844482 -42.01647949]
[449.87387085 -48.22364044]
[463.52932739 -54.43080139]
[477.18475342 -60.63796234]
[490.84020996 -66.84512329]
[504.49566650 -73.05228424]
[504.78237915 -88.31270599]
[511.66964722 -101.93359375]
[523.78997803 -111.21049500]
[538.73681641 -114.30149078]
[553.54248047 -110.59284973]
[565.26739502 -100.82093048]
[571.58343506 -86.92595673]
[571.23657227 -71.66677856]
[564.29571533 -58.07312393]
[552.13897705 -48.84402084]
[537.18011475 -45.81191254]
[522.38909912 -49.57882690]
[510.70281982 -59.39684296]
[497.04736328 -53.18968201]
[483.39193726 -46.98252106]
[469.73648071 -40.77536011]
[456.08102417 -34.56819916]
[442.42559814 -28.36103630]
[437.61395264 -22.70240593]
[428.44464111 -22.16877556]
[414.67138672 -16.22757912]
[400.89816284 -10.28638268]
[395.65478516 3.60759163]
[381.77139282 9.82901478]
[367.23367310 4.23506594]
[353.46041870 10.17626286]
[339.68716431 16.11745834]
[334.76669312 21.68172264]
[325.58877563 22.03744698]
[311.70291138 27.71044540]
[297.81704712 33.38344193]
[283.93118286 39.05644226]
[270.04534912 44.72943878]
[256.15948486 50.40243530]
[242.32928467 56.20980835]
[228.55603027 62.15100479]
[214.78279114 68.09220123]
[201.00955200 74.03339386]
[187.23631287 79.97459412]
[185.59916687 83.14984131]
[182.31686401 85.67216492]
[177.72171021 86.76527405]
[172.48519897 85.83483124]
[158.38981628 90.96513367]
[144.29441833 96.09543610]
[130.19903564 101.22573853]
[116.10364532 106.35604095]
[107.50000000 118.64331818]
[107.50000000 133.64332581]
[107.50000000 148.64332581]
[107.50000000 163.64332581]
[107.50000000 178.64332581]
[118.39455414 189.77644348]
[118.18087006 204.98858643]
[107.50000000 215.30625916]
[107.50000000 230.30625916]
[113.54634094 246.14540100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 160]
[3 159]
[6 156]
[7 155]
[8 154]
[9 153]
[10 152]
[11 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 41]
[17 40]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 32]
[25 31]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[74 151]
[75 150]
[76 149]
[77 148]
[78 147]
[79 143]
[80 142]
[81 141]
[82 140]
[83 139]
[85 138]
[86 137]
[87 136]
[88 135]
[89 134]
[90 133]
[91 131]
[92 130]
[93 129]
[96 126]
[97 125]
[98 124]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
