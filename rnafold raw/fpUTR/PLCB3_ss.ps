%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGACAGACUGGCGGGCGGGCGGGCACUGACGCCGCGGGGCCGGAGCGGGCCGCGCGGUGGGAGCAGCGGCGCCGUCGGUCCCCGUCAGGGCUCCGUGGGUCCCCGACCCGCCCCUGGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[69.56755066 423.07604980]
[68.46408844 408.11669922]
[67.36061859 393.15731812]
[66.25714874 378.19796753]
[55.18091202 388.31317139]
[40.18775940 387.85995483]
[29.74269295 377.09423828]
[29.74290085 362.09423828]
[40.18827057 351.32882690]
[55.18143463 350.87603760]
[66.25714874 360.99102783]
[67.36061859 346.03167725]
[68.46408844 331.07232666]
[69.56755066 316.11297607]
[66.89388275 309.13739014]
[70.88610077 300.80148315]
[72.35635376 285.87371826]
[73.82661438 270.94595337]
[75.29686737 256.01818848]
[76.76712799 241.09040833]
[78.23738861 226.16262817]
[79.70764160 211.23486328]
[80.99459839 196.29017639]
[82.09806824 181.33081055]
[83.20153809 166.37145996]
[84.30500793 151.41209412]
[82.46690369 149.16366577]
[81.45795441 146.01387024]
[81.64086914 142.29367065]
[83.24458313 138.46423340]
[86.32135773 135.06394958]
[88.88578796 120.28478241]
[91.45021820 105.50562286]
[89.60385132 97.56482697]
[94.26319885 90.39710999]
[97.18955231 75.68533325]
[100.11590576 60.97355270]
[103.04226685 46.26177216]
[105.96862030 31.54999352]
[108.89497375 16.83821487]
[111.82132721 2.12643528]
[114.74768066 -12.58534431]
[117.67404175 -27.29712296]
[120.60039520 -42.00890350]
[114.25280762 -59.24225998]
[126.21161652 -72.02398682]
[128.77604675 -86.80315399]
[119.94522858 -99.63492584]
[122.75645447 -114.58657074]
[135.04400635 -122.92633057]
[137.60844421 -137.70549011]
[140.17286682 -152.48464966]
[142.55574036 -167.29417419]
[144.75669861 -182.13182068]
[146.95765686 -196.96946716]
[145.11053467 -206.02557373]
[149.39901733 -212.14247131]
[151.96343994 -226.92163086]
[154.52786255 -241.70079041]
[157.09230042 -256.47994995]
[159.65672302 -271.25912476]
[162.22114563 -286.03829956]
[150.37742615 -295.81692505]
[145.02482605 -310.21295166]
[147.60316467 -325.35388184]
[157.41888428 -337.16690063]
[171.83160400 -342.47433472]
[186.96438599 -339.84854126]
[198.74656677 -329.99584961]
[204.00881958 -315.56655884]
[201.33561707 -300.44210815]
[191.44602966 -288.69085693]
[177.00032043 -283.47384644]
[174.43588257 -268.69470215]
[171.87145996 -253.91552734]
[169.30703735 -239.13636780]
[166.74259949 -224.35720825]
[164.17817688 -209.57803345]
[161.79530334 -194.76850891]
[159.59434509 -179.93086243]
[157.39338684 -165.09321594]
[159.54666138 -157.93984985]
[154.95202637 -149.92022705]
[152.38760376 -135.14106750]
[149.82318115 -120.36190033]
[158.58287048 -108.37009430]
[156.19271851 -93.34539032]
[143.55520630 -84.23872375]
[140.99078369 -69.45955658]
[147.71844482 -59.32712555]
[145.62956238 -46.93719101]
[135.31217957 -39.08254623]
[132.38581848 -24.37076759]
[129.45945740 -9.65898895]
[126.53311157 5.05279016]
[123.60675049 19.76456833]
[120.68039703 34.47634888]
[117.75404358 49.18812943]
[114.82769012 63.89990616]
[111.90133667 78.61168671]
[108.97497559 93.32346344]
[106.22937775 108.07004547]
[103.66495514 122.84921265]
[101.10052490 137.62837219]
[99.26436615 152.51556396]
[98.16089630 167.47492981]
[97.05742645 182.43428040]
[95.95395660 197.39364624]
[98.46228027 206.28932190]
[94.63541412 212.70512390]
[93.16515350 227.63288879]
[91.69490051 242.56065369]
[90.22463989 257.48843384]
[88.75438690 272.41619873]
[87.28412628 287.34396362]
[85.81387329 302.27172852]
[84.52690887 317.21643066]
[83.42343903 332.17578125]
[82.31997681 347.13513184]
[81.21650696 362.09451294]
[81.21650696 377.09451294]
[82.31997681 392.05386353]
[83.42343903 407.01321411]
[84.52690887 421.97256470]
[94.19143677 435.22131348]
[87.30346680 450.10379028]
[70.94875336 451.31018066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[3 122]
[4 121]
[11 120]
[12 119]
[13 118]
[14 117]
[16 116]
[17 115]
[18 114]
[19 113]
[20 112]
[21 111]
[22 110]
[23 108]
[24 107]
[25 106]
[26 105]
[31 104]
[32 103]
[33 102]
[35 101]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[41 95]
[42 94]
[43 93]
[44 92]
[46 89]
[47 88]
[50 85]
[51 84]
[52 83]
[53 81]
[54 80]
[55 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
