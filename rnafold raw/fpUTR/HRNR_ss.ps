%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCCUGAAAGCUGUUUCUGUCUCUACCCUACUUGUUCCUCUGGUGAGCUAGGUUACUCAAACUUGCAAAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[62.34358215 117.20330811]
[73.64334869 107.33846283]
[87.91857147 102.72389221]
[74.29642487 96.44400024]
[60.67427826 90.16410065]
[47.05213165 83.88420868]
[34.52660751 87.62316132]
[23.22336578 81.90515137]
[19.08815765 70.36058807]
[5.72305965 63.55073166]
[-12.50523186 65.04429626]
[-21.67963028 50.21958923]
[-35.30177689 43.93969345]
[-48.92392731 37.65979767]
[-58.56387711 49.26728058]
[-70.88015747 57.98345566]
[-85.03302002 63.21403885]
[-100.05749512 64.60239410]
[-114.92919159 62.05386353]
[-128.63414001 55.74221420]
[-140.23789978 46.09778214]
[-148.94931030 33.77813721]
[-154.17443848 19.62325859]
[-155.55699158 4.59824848]
[-153.00271606 -10.27246475]
[-146.68577576 -23.97496986]
[-137.03686523 -35.57500839]
[-124.71385193 -44.28166962]
[-110.55696106 -49.50131989]
[-95.53141785 -50.87807465]
[-80.66168976 -48.31806183]
[-66.96162415 -41.99583054]
[-55.36531448 -32.34243774]
[-46.66341019 -20.01607132]
[-41.44922638 -5.85716200]
[-40.07827759 9.16891193]
[-42.64403152 24.03764915]
[-29.02188301 30.31754494]
[-15.39973450 36.59743881]
[-3.77351189 32.69772339]
[7.71470594 38.03436279]
[12.53291702 50.18563461]
[25.89801407 56.99549103]
[43.21992493 55.02241516]
[53.33202744 70.26205444]
[66.95417786 76.54195404]
[80.57632446 82.82185364]
[94.19847107 89.10174561]
[102.34855652 87.92273712]
[109.39734650 92.12499237]
[124.38578033 91.53609467]
[133.10211182 87.99492645]
[139.97178650 91.23002625]
[154.97178650 91.23002625]
[169.97178650 91.23002625]
[184.97178650 91.23002625]
[199.97178650 91.23002625]
[212.28701782 80.94825745]
[227.97450256 84.30713654]
[235.00016785 98.73002625]
[227.97450256 113.15290833]
[212.28701782 116.51179504]
[199.97178650 106.23002625]
[184.97178650 106.23002625]
[169.97178650 106.23002625]
[154.97178650 106.23002625]
[139.97178650 106.23002625]
[124.97467804 106.52452850]
[109.98624420 107.11342621]
[121.40731049 116.83757782]
[128.07276917 130.27528381]
[128.90408325 145.25222778]
[123.76676941 159.34506226]
[113.49205780 170.27348328]
[99.74246216 176.26919556]
[84.74275208 176.36207581]
[70.91996002 170.53709412]
[60.51070786 159.73674011]
[55.19926071 145.70861816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[5 46]
[6 45]
[9 43]
[10 42]
[12 39]
[13 38]
[14 37]
[50 69]
[51 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
