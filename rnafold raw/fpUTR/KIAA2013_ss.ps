%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCGUUUGACGGCUGGAGGCCACCGAGAAGAAGGAGGAAGCAGGGGUGGCGGCUGCUGCGGCGGUUGCGGCGGGGGCCGGGGUGGGCGCCGCGGUCCGGGCCGGGCAGUGAGGCGCGGGCGGCCGGGCCGGUGGGCUGGGCGGCGGGCCCGGCGGCCGCCCUCGCACCCUUGCCCGCGCCUGGCGGCCCG\
) } def
/len { sequence length } bind def

/coor [
[-23.32925987 484.26708984]
[-26.49593353 498.92901611]
[-29.66260719 513.59094238]
[-32.82928085 528.25286865]
[-27.30031586 543.69189453]
[-38.11132431 556.02288818]
[-54.14086914 552.56085205]
[-58.89912415 536.86718750]
[-47.49121094 525.08618164]
[-44.32453537 510.42425537]
[-41.15786362 495.76232910]
[-37.99118805 481.10040283]
[-46.11653137 473.06463623]
[-49.38051987 461.98773193]
[-46.85906601 450.59567261]
[-39.06695938 441.75070190]
[-27.85781288 437.73220825]
[-29.28455162 430.46823120]
[-24.03261185 422.97448730]
[-20.15032578 408.48559570]
[-16.26803970 393.99670410]
[-12.38575459 379.50781250]
[-16.56535149 365.21163940]
[-5.51994658 353.88427734]
[-1.63766074 339.39538574]
[-14.64444256 346.86691284]
[-29.43445396 344.36578369]
[-39.26125336 333.03292847]
[-39.64236069 318.03775024]
[-30.40393639 306.22033691]
[-15.76007175 302.97113037]
[-2.39054370 309.77230835]
[3.60619450 323.52200317]
[9.11893368 309.57174683]
[14.63167286 295.62149048]
[12.11332512 280.94131470]
[24.38093185 270.95050049]
[16.24914169 258.50012207]
[17.01700974 243.47100830]
[26.59936333 231.63749695]
[41.48431015 227.66957092]
[46.99704742 213.71929932]
[52.50978851 199.76904297]
[58.02252579 185.81878662]
[63.53526688 171.86853027]
[69.04800415 157.91827393]
[74.56074524 143.96801758]
[80.07348633 130.01776123]
[85.58621979 116.06749725]
[75.58288574 100.08677673]
[81.66024017 79.84612274]
[69.05351257 71.71774292]
[56.44678879 63.58937454]
[43.84006119 55.46099854]
[31.23333549 47.33262634]
[15.44222546 46.35723114]
[8.93838787 32.95762634]
[-3.66833854 24.82925224]
[-16.27506447 16.70088005]
[-28.88179016 8.57250595]
[-44.67290115 7.59711027]
[-51.17673874 -5.80249310]
[-63.78346634 -13.93086720]
[-80.18048859 -14.19466305]
[-87.91298676 -28.65635490]
[-79.02642822 -42.43899155]
[-62.66254044 -41.36417770]
[-55.65509033 -26.53759193]
[-43.04836655 -18.40921974]
[-28.15897179 -18.01521873]
[-20.75341606 -4.03422022]
[-8.14669037 4.09415340]
[4.46003532 12.22252655]
[17.06676102 20.35090065]
[31.95615387 20.74489975]
[39.36170959 34.72589874]
[51.96843719 42.85427475]
[64.57516479 50.98264694]
[77.18188477 59.11101913]
[89.78861237 67.23939514]
[104.73844147 66.01358032]
[115.85270691 55.94019318]
[126.96697235 45.86680984]
[138.08123779 35.79342651]
[149.19551086 25.72004128]
[160.30978394 15.64665604]
[165.33897400 0.64606583]
[179.96531677 -2.16808629]
[191.07958984 -12.24147034]
[202.19384766 -22.31485558]
[213.30812073 -32.38824081]
[224.42237854 -42.46162415]
[228.68855286 -50.55723190]
[235.80187988 -52.60707474]
[247.07948303 -62.49726105]
[258.35708618 -72.38745117]
[269.63467407 -82.27763367]
[280.91226196 -92.16782379]
[292.18988037 -102.05800629]
[297.69384766 -119.62257385]
[315.01647949 -122.38908386]
[326.13073730 -132.46246338]
[337.24499512 -142.53585815]
[342.27420044 -157.53643799]
[356.90054321 -160.35060120]
[368.01480103 -170.42398071]
[379.12908936 -180.49736023]
[374.89044189 -195.11911011]
[377.41027832 -210.07026672]
[386.13604736 -222.39428711]
[399.29327393 -229.67771912]
[414.24636841 -230.52278137]
[428.02645874 -224.81535339]
[439.14071655 -234.88874817]
[450.25497437 -244.96212769]
[455.28417969 -259.96270752]
[469.91052246 -262.77688599]
[481.02478027 -272.85025024]
[492.13906860 -282.92364502]
[496.63772583 -298.69366455]
[512.60797119 -302.41973877]
[523.62097168 -290.26876831]
[518.34747314 -274.74066162]
[502.21243286 -271.80938721]
[491.09817505 -261.73599243]
[479.98391724 -251.66259766]
[475.74966431 -237.38252258]
[460.32836914 -233.84785461]
[449.21411133 -223.77447510]
[438.09982300 -213.70109558]
[442.42910767 -199.42793274]
[440.12243652 -184.62966919]
[431.58444214 -172.24969482]
[418.46450806 -164.77392578]
[403.33834839 -163.73167419]
[389.20245361 -169.38310242]
[378.08819580 -159.30970764]
[366.97393799 -149.23632812]
[362.73968506 -134.95625305]
[347.31838989 -131.42158508]
[336.20413208 -121.34820557]
[325.08984375 -111.27481842]
[324.17974854 -99.20243835]
[314.98861694 -90.71925354]
[302.08004761 -90.78041077]
[290.80245972 -80.89022827]
[279.52487183 -71.00003815]
[268.24728394 -61.10985184]
[256.96966553 -51.21966553]
[245.69207764 -41.32947540]
[234.49577332 -31.34735680]
[223.38150024 -21.27397156]
[212.26722717 -11.20058823]
[201.15296936 -1.12720370]
[190.03869629 8.94618034]
[185.80447388 23.22625542]
[170.38316345 26.76092339]
[159.26889038 36.83430862]
[148.15463257 46.90769196]
[137.04035950 56.98107529]
[125.92609406 67.05445862]
[114.81182861 77.12784576]
[124.27577209 91.16563416]
[123.34053040 107.17095184]
[113.46955109 118.64479065]
[99.53648376 121.58023834]
[94.02374268 135.53050232]
[88.51100159 149.48075867]
[82.99826050 163.43101501]
[77.48552704 177.38127136]
[71.97278595 191.33152771]
[66.46004486 205.28178406]
[60.94730759 219.23204041]
[55.43456650 233.18229675]
[63.58610535 246.25360107]
[62.49062729 261.44085693]
[52.77727509 272.93499756]
[38.33118820 276.46325684]
[40.45522690 292.14123535]
[28.58193016 301.13421631]
[23.06919098 315.08447266]
[17.55645370 329.03475952]
[12.85122681 343.27767944]
[8.96894073 357.76654053]
[12.87085152 373.09906006]
[2.10313320 383.39010620]
[-1.77915251 397.87899780]
[-5.66143799 412.36785889]
[-9.54372406 426.85675049]
[-13.30734348 441.37692261]
[-2.95276904 457.22692871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[17 190]
[19 189]
[20 188]
[21 187]
[22 186]
[24 184]
[25 183]
[33 182]
[34 181]
[35 180]
[37 178]
[41 174]
[42 173]
[43 172]
[44 171]
[45 170]
[46 169]
[47 168]
[48 167]
[49 166]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[57 74]
[58 73]
[59 72]
[60 71]
[62 69]
[63 68]
[81 162]
[82 161]
[83 160]
[84 159]
[85 158]
[86 157]
[88 155]
[89 154]
[90 153]
[91 152]
[92 151]
[94 150]
[95 149]
[96 148]
[97 147]
[98 146]
[99 145]
[101 142]
[102 141]
[103 140]
[105 138]
[106 137]
[107 136]
[113 130]
[114 129]
[115 128]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
