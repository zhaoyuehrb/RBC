%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGGAGCCGGAGCGGAUCCUGGAGCCGGAGCGGAGCGGAGCGGAGCGGAGCCGGGGCGGAGCGGGCCGAGCGGGCCGAGCCAGCAGCCGAGCUGGGGGCGCGGGCGGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[81.24253845 100.59974670]
[67.30789185 95.04766846]
[53.37323761 89.49559784]
[39.43858719 83.94352722]
[25.50393677 78.39145660]
[9.82002831 80.47126007]
[0.86055869 68.57263184]
[-13.51434517 74.57262421]
[-27.56697083 68.74353027]
[-33.19845963 55.00228119]
[-47.13311005 49.45021057]
[-61.06776047 43.89813995]
[-55.98482132 58.01067734]
[-60.94860840 72.16556549]
[-73.73228455 80.01270294]
[-88.60090637 78.03174591]
[-98.88417053 67.11138153]
[-99.96886444 52.15065002]
[-91.36836243 39.86116791]
[-76.94081116 35.75619125]
[-89.57954407 27.67766953]
[-102.21827698 19.59915161]
[-114.85700989 11.52063179]
[-127.49573517 3.44211197]
[-140.13447571 -4.63640738]
[-155.38249207 -1.45279670]
[-168.08488464 -9.82560730]
[-171.02600098 -24.38189125]
[-183.66473389 -32.46041107]
[-196.30346680 -40.53893280]
[-210.69226074 -35.03723526]
[-225.38983154 -39.01653671]
[-234.81452942 -50.74850845]
[-235.51536560 -65.60269165]
[-248.15409851 -73.68121338]
[-262.55029297 -67.89075470]
[-277.59237671 -71.70069122]
[-287.49633789 -83.64602661]
[-288.45394897 -99.13352203]
[-280.09692383 -112.20793152]
[-265.63879395 -117.84187317]
[-250.63891602 -113.86898804]
[-240.86511230 -101.81691742]
[-240.07557678 -86.31994629]
[-227.43685913 -78.24142456]
[-213.66128540 -83.84246826]
[-199.05630493 -80.21497345]
[-189.27343750 -68.54668427]
[-188.22494507 -53.17766190]
[-175.58621216 -45.09914398]
[-162.94747925 -37.02062225]
[-148.50161743 -40.46336365]
[-135.56906128 -32.45063782]
[-132.05595398 -17.27513885]
[-119.41722107 -9.19661903]
[-106.77848816 -1.11809969]
[-94.13975525 6.96041965]
[-81.50102234 15.03893948]
[-68.86229706 23.11745834]
[-55.51568604 29.96348763]
[-41.58103561 35.51556015]
[-27.64638710 41.06763077]
[-14.10810184 34.96431732]
[0.10270704 40.39640427]
[6.41263103 54.63798523]
[21.09984016 52.16106033]
[31.05600929 64.45680237]
[44.99066162 70.00887299]
[58.92531204 75.56095123]
[72.85996246 81.11302185]
[86.79460907 86.66509247]
[106.23262024 82.29811859]
[118.64691162 97.87990570]
[132.98619080 102.28273773]
[150.75878906 97.70685577]
[162.27798462 110.87025452]
[177.64509583 107.10691833]
[187.83850098 117.96710205]
[202.29174805 121.98002625]
[216.74501038 125.99295044]
[232.11210632 122.22961426]
[242.30552673 133.08979797]
[256.75875854 137.10272217]
[271.21203613 141.11564636]
[284.85394287 133.59661865]
[299.45443726 137.87219238]
[306.53860474 150.92402649]
[320.99185181 154.93695068]
[335.44509888 158.94987488]
[349.89834595 162.96279907]
[366.77770996 161.37426758]
[372.97683716 177.15422058]
[359.52966309 187.47941589]
[345.88543701 177.41604614]
[331.43215942 173.40312195]
[316.97891235 169.39019775]
[302.52566528 165.37727356]
[289.72662354 172.90855408]
[275.01181030 169.04476929]
[267.19909668 155.56889343]
[252.74584961 151.55596924]
[238.29260254 147.54304504]
[223.95928955 151.59341431]
[212.73208618 140.44619751]
[198.27882385 136.43327332]
[183.82557678 132.42034912]
[169.49226379 136.47071838]
[158.26506042 125.32350922]
[147.49955750 131.02029419]
[135.36415100 127.69604492]
[128.58335876 116.62202454]
[114.24407196 112.21918488]
[106.98976135 117.41680908]
[98.15492249 118.67612457]
[89.73729706 115.71237946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[7 65]
[10 62]
[11 61]
[12 60]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[28 51]
[29 50]
[30 49]
[34 45]
[35 44]
[73 112]
[74 111]
[76 108]
[78 106]
[79 105]
[80 104]
[82 102]
[83 101]
[84 100]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
