%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGAGCGCUAGGCCUGGUCCCUCUUCCUAGAAUAGCGUUGCGCGCAUGCGCCUUGACGAGUGAGCCGGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[122.57276917 130.69360352]
[118.77272034 115.76491547]
[104.88543701 110.09542084]
[90.88538361 104.71038055]
[75.27697754 107.29650879]
[65.93724060 95.69398499]
[51.83026123 90.59564209]
[37.72327805 85.49730682]
[23.61629677 80.39896393]
[9.50931454 75.30062103]
[-4.59766722 70.20228577]
[-18.70464897 65.10394287]
[-32.87791061 71.56586456]
[-47.11176682 66.19446564]
[-53.18487549 52.64260483]
[-67.35813904 59.10452652]
[-81.59199524 53.73312378]
[-87.66510773 40.18126297]
[-101.77208710 35.08292389]
[-114.54058075 43.90024185]
[-130.05236816 43.49481201]
[-142.34281921 34.02252960]
[-146.68603516 19.12568283]
[-141.41195679 4.53240919]
[-128.54855347 -4.14587688]
[-113.04209137 -3.57219815]
[-100.85510254 6.03285456]
[-96.67374420 20.97594261]
[-82.56676483 26.07428169]
[-69.23302460 19.53615952]
[-54.85391617 24.50564194]
[-48.08653641 38.53562164]
[-34.75279999 31.99750137]
[-20.37368584 36.96698380]
[-13.60630989 50.99696350]
[0.50067228 56.09530258]
[14.60765362 61.19364166]
[28.71463585 66.29198456]
[42.82161713 71.39031982]
[56.92860031 76.48866272]
[71.03558350 81.58699799]
[85.63496399 78.63619995]
[95.98372650 90.60339355]
[104.28172302 90.17531586]
[110.55493164 96.20812988]
[124.44222260 101.87763214]
[137.60449219 93.87382507]
[152.77845764 95.14027405]
[164.16246033 104.98246002]
[167.52780151 119.46736145]
[181.41508484 125.13686371]
[197.11599731 123.18952942]
[205.97470093 135.16336060]
[219.86199951 140.83285522]
[233.74928284 146.50234985]
[247.63656616 152.17185974]
[261.52386475 157.84135437]
[277.22476196 155.89402771]
[286.08346558 167.86784363]
[300.55477905 161.51512146]
[315.24902344 167.33358765]
[321.44839478 181.87124634]
[315.47488403 196.50315857]
[300.87249756 202.54847717]
[286.30456543 196.42062378]
[280.41397095 181.75514221]
[265.70639038 184.10798645]
[255.85435486 171.72865295]
[241.96707153 166.05914307]
[228.07977295 160.38964844]
[214.19248962 154.72013855]
[200.30520630 149.05064392]
[185.59761047 151.40350342]
[175.74559021 139.02415466]
[161.85829163 133.35464478]
[149.31712341 141.34570312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 43]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[15 32]
[18 29]
[19 28]
[50 75]
[51 74]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
