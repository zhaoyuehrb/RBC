%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAGUGCUGGUUGGAGGGACGAGGGGGGUGCGGAGCCAGCCAGGCCGCCCUCCCGUUCUCACAGCAGCCGAGCAGAGCGCAGAGCGGGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[139.50892639 194.96163940]
[132.81024170 187.57334900]
[129.35150146 178.15673828]
[129.67910767 168.07154846]
[133.78927612 158.79173279]
[127.06386566 155.37980652]
[124.47492218 146.40750122]
[115.65814209 134.27224731]
[106.84136200 122.13699341]
[98.02458191 110.00173950]
[90.97549438 105.74542236]
[89.12477875 97.31631470]
[80.71405029 84.89618683]
[72.30332184 72.47605133]
[57.04002762 69.36646271]
[48.68728256 56.65087128]
[51.74586105 42.11881256]
[43.33513641 29.69868088]
[34.92440796 17.27854919]
[26.51368332 4.85841608]
[18.10295868 -7.56171656]
[9.69223213 -19.98184967]
[2.13640165 -25.46949959]
[1.21671343 -32.95459747]
[-6.77876234 -45.64602661]
[-14.77423859 -58.33745193]
[-22.76971436 -71.02888489]
[-30.76519012 -83.72031403]
[-38.76066589 -96.41174316]
[-46.75614166 -109.10317230]
[-54.75161743 -121.79459381]
[-59.10134888 -123.84659576]
[-62.14657211 -126.94022369]
[-63.71460724 -130.48933411]
[-63.85913849 -133.91612244]
[-62.83449936 -136.73045349]
[-69.08622742 -150.36555481]
[-75.33795166 -164.00064087]
[-89.81690979 -170.91001892]
[-93.30192566 -186.56996155]
[-83.11959839 -198.96754456]
[-67.08093262 -198.59236145]
[-57.48942184 -185.73225403]
[-61.70285416 -170.25238037]
[-55.45112991 -156.61727905]
[-49.19940186 -142.98217773]
[-42.06018829 -129.79006958]
[-34.06471252 -117.09864807]
[-26.06923676 -104.40721893]
[-18.07376099 -91.71578979]
[-10.07828522 -79.02436066]
[-2.08280969 -66.33293152]
[5.91266632 -53.64150238]
[13.90814209 -40.95007324]
[22.11236382 -28.39257431]
[30.52309036 -15.97244263]
[38.93381500 -3.55230999]
[47.34454346 8.86782265]
[55.75526810 21.28795433]
[64.16599274 33.70808792]
[78.79512787 36.26229477]
[87.50173187 48.73825836]
[84.72345734 64.06532288]
[93.13417816 76.48545837]
[101.54490662 88.90559387]
[110.15983582 101.18495941]
[118.97661591 113.32022095]
[127.79339600 125.45547485]
[136.61016846 137.59072876]
[145.62638855 149.57855225]
[166.43020630 150.49887085]
[179.93861389 165.97398376]
[178.09150696 186.14862061]
[188.78543091 196.66716003]
[199.47935486 207.18571472]
[210.17327881 217.70426941]
[225.75006104 217.74418640]
[236.44538879 228.56384277]
[236.31134033 243.41366577]
[247.00526428 253.93222046]
[257.69918823 264.45077515]
[273.23126221 271.24716187]
[271.00021362 288.05364990]
[254.23289490 290.56228638]
[247.18063354 275.14471436]
[236.48670959 264.62615967]
[225.79278564 254.10760498]
[210.94720459 254.48715210]
[199.95219421 243.97218323]
[199.65473938 228.39819336]
[188.96080017 217.87963867]
[178.26687622 207.36109924]
[167.57295227 196.84254456]
[158.27105713 199.91607666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 70]
[7 69]
[8 68]
[9 67]
[10 66]
[12 65]
[13 64]
[14 63]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[36 46]
[37 45]
[38 44]
[73 93]
[74 92]
[75 91]
[76 90]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
