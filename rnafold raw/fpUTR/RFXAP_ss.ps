%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCAGGCUGCGGUCGCGCAGGCGCAGUCGGGGCGCCUUCCCGGUAUAGGCGCCUUUUACCCCAGCGUGUCCUGAGUCUUUGGUUCGCGAAGUGCCGUUAGGCCAAGCAGGUGCUAAAAGCCCGGGGUCGUGGACCCCGGCCAGGUCUUAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[81.08228302 110.44586945]
[66.25088501 112.68856812]
[51.41949081 114.93126678]
[36.58809280 117.17396545]
[21.75669861 119.41667175]
[6.84119081 144.11053467]
[-24.91176414 144.00703430]
[-35.03023911 155.08026123]
[-45.14871597 166.15350342]
[-55.26719284 177.22673035]
[-65.38566589 188.29995728]
[-75.50414276 199.37319946]
[-85.62261963 210.44642639]
[-89.12860870 218.94325256]
[-96.05604553 221.63740540]
[-106.39405823 232.50595093]
[-107.43186188 248.51541138]
[-120.67743683 257.56716919]
[-135.96992493 252.71748352]
[-141.57823181 237.68663025]
[-133.20014954 224.00498962]
[-117.26261902 222.16795349]
[-106.92460632 211.29939270]
[-96.69584656 200.32794189]
[-86.57737732 189.25471497]
[-76.45890045 178.18148804]
[-66.34042358 167.10826111]
[-56.22194672 156.03501892]
[-46.10346985 144.96179199]
[-35.98499680 133.88856506]
[-40.70580673 119.65079498]
[-55.43559647 116.81649017]
[-70.16538239 113.98218536]
[-84.89517975 111.14788818]
[-99.62496948 108.31358337]
[-114.35475922 105.47927856]
[-129.08454895 102.64497375]
[-143.81433105 99.81067657]
[-158.54412842 96.97637177]
[-169.11216736 108.21559143]
[-184.08447266 111.93494415]
[-198.68344116 106.94759369]
[-208.25059509 94.84498596]
[-209.73307800 79.48902130]
[-202.65786743 65.77972412]
[-189.28259277 58.09169388]
[-173.87528992 58.87814331]
[-161.35235596 67.88812256]
[-155.70982361 82.24658203]
[-140.98004150 85.08088684]
[-126.25024414 87.91518402]
[-111.52045441 90.74948883]
[-96.79066467 93.58379364]
[-82.06087494 96.41809845]
[-67.33108521 99.25239563]
[-52.60129166 102.08670044]
[-37.87150192 104.92100525]
[-33.30343246 97.31035614]
[-27.01837349 91.29197693]
[-19.52330780 87.22482300]
[-11.39127827 85.31591034]
[-3.21791101 85.61122894]
[4.42211533 87.99861908]
[11.01547432 92.22199249]
[16.14463043 97.90547943]
[19.51399803 104.58527374]
[34.34539413 102.34257507]
[49.17678833 100.09986877]
[64.00818634 97.85717010]
[78.83957672 95.61447144]
[91.75057220 76.66945648]
[117.67689514 78.43766785]
[125.39245605 65.57415009]
[133.10801697 52.71062851]
[140.82357788 39.84711075]
[140.72845459 35.37808990]
[141.96702576 31.51823425]
[144.17417908 28.61861038]
[146.90719604 26.87149239]
[149.70571899 26.29878807]
[158.42507935 14.09335327]
[167.14445496 1.88791752]
[175.86381531 -10.31751823]
[184.58317566 -22.52295303]
[193.30255127 -34.72838974]
[202.02191162 -46.93382263]
[203.34848022 -65.27417755]
[219.54776001 -71.96099091]
[228.02116394 -84.33844757]
[236.49458313 -96.71590424]
[233.33998108 -112.20215607]
[242.12934875 -125.33694458]
[257.64810181 -128.32762146]
[270.68920898 -119.39988708]
[273.51565552 -103.85038757]
[264.45053101 -90.90438080]
[248.87202454 -88.24250031]
[240.39862061 -75.86504364]
[231.92521667 -63.48758698]
[233.83831787 -51.50779343]
[226.83253479 -41.11554718]
[214.22735596 -38.21445847]
[205.50798035 -26.00902367]
[196.78862000 -13.80358696]
[188.06924438 -1.59815192]
[179.34988403 10.60728359]
[170.63052368 22.81271935]
[161.91114807 35.01815414]
[153.68710327 47.56267548]
[145.97154236 60.42619324]
[138.25598145 73.28971100]
[130.54040527 86.15322876]
[133.52194214 100.85392761]
[145.63952637 109.69496918]
[157.75712585 118.53601074]
[169.87471008 127.37705231]
[181.99229431 136.21809387]
[194.10987854 145.05914307]
[209.81858826 146.94250488]
[215.53979492 160.69450378]
[231.24850464 162.57786560]
[236.96969604 176.32984924]
[249.34715271 184.80325317]
[261.97332764 192.90138245]
[274.59951782 200.99951172]
[287.22567749 209.09765625]
[299.85186768 217.19578552]
[312.47802734 225.29391479]
[325.10421753 233.39204407]
[337.73037720 241.49017334]
[354.32714844 244.95185852]
[355.59521484 261.85830688]
[339.70046997 267.75698853]
[329.63223267 254.11634827]
[317.00607300 246.01821899]
[304.37988281 237.92008972]
[291.75372314 229.82196045]
[279.12756348 221.72381592]
[266.50137329 213.62568665]
[253.87519836 205.52755737]
[241.24902344 197.42942810]
[237.69506836 197.85090637]
[233.76065063 196.53623962]
[230.28060913 193.32606506]
[228.12866211 188.44743347]
[213.28668213 187.19644165]
[206.69874573 172.81208801]
[191.85676575 171.56108093]
[185.26884460 157.17672729]
[173.15124512 148.33569336]
[161.03366089 139.49464417]
[148.91607666 130.65359497]
[136.79849243 121.81255341]
[124.68090057 112.97151184]
[113.72273254 122.45251465]
[100.25509644 124.74474335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[15 23]
[16 22]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[72 112]
[73 111]
[74 110]
[75 109]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[88 99]
[89 98]
[90 97]
[113 154]
[114 153]
[115 152]
[116 151]
[117 150]
[118 149]
[120 147]
[122 145]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
