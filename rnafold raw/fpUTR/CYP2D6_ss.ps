%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGAGAGUGUCCUGCCUGGUCCUCUGUGCCUGGUGGGGUGGGGGUGCCAGGUGUGUCCAGAGGAGCCCAUUUGGUAGUGAGGCAGGU\
) } def
/len { sequence length } bind def

/coor [
[72.45220184 238.77671814]
[67.66745758 253.18055725]
[57.99954224 264.88079834]
[44.75594711 272.29510498]
[29.72776604 274.42068481]
[14.94743538 270.97015381]
[2.41387367 262.41012573]
[-6.17785740 249.89825439]
[-9.66579723 235.12670898]
[-7.57822990 220.09318542]
[-0.19748273 206.83087158]
[11.47825909 197.13337708]
[25.86994743 192.31219482]
[41.03122711 193.01937866]
[47.06913376 179.28825378]
[53.10704422 165.55712891]
[59.14495087 151.82601929]
[65.18286133 138.09489441]
[71.22077179 124.36376953]
[77.25867462 110.63265228]
[91.23932648 86.54072571]
[91.23932648 71.54072571]
[90.98042297 56.54296112]
[90.46267700 41.55189896]
[89.94493866 26.56083679]
[89.42719269 11.56977463]
[88.90945435 -3.42128754]
[88.39170837 -18.41234970]
[87.87397003 -33.40341187]
[86.32321167 -48.32303619]
[83.74682617 -63.10012054]
[81.17044067 -77.87720490]
[78.59405518 -92.65428925]
[76.01766968 -107.43137360]
[73.44127655 -122.20845795]
[70.86489105 -136.98554993]
[68.28850555 -151.76263428]
[65.71212006 -166.53971863]
[51.45449066 -172.43237305]
[42.66479492 -185.11090088]
[42.14779282 -200.52960205]
[50.06845856 -213.76841736]
[63.89933777 -220.60292053]
[79.22704315 -218.85221863]
[91.16056824 -209.07498169]
[95.89196014 -194.39105225]
[91.91144562 -179.48605347]
[80.48920441 -169.11610413]
[83.06558990 -154.33901978]
[85.64197540 -139.56193542]
[88.21836853 -124.78484344]
[90.79475403 -110.00775909]
[93.37113953 -95.23067474]
[95.94752502 -80.45359039]
[98.52391052 -65.67650604]
[101.10029602 -50.89942169]
[103.55834961 -49.16085815]
[105.39479828 -46.23901749]
[106.11242676 -42.39841461]
[105.33287811 -38.09453583]
[102.86502838 -33.92115402]
[103.38277435 -18.93009186]
[103.90051270 -3.93902969]
[104.41825867 11.05203247]
[104.93599701 26.04309464]
[105.45374298 41.03415680]
[105.97148132 56.02521896]
[109.42259216 62.74427414]
[106.23932648 71.54072571]
[106.23932648 86.54072571]
[113.43839264 99.70026398]
[126.06990814 107.79006958]
[138.70141602 115.87986755]
[151.33293152 123.96966553]
[167.73068237 124.18334198]
[175.50735474 138.62132263]
[166.66296387 152.43106079]
[150.29586792 151.40628052]
[143.24313354 136.60118103]
[130.61161804 128.51138306]
[117.98010254 120.42157745]
[105.34859467 112.33177948]
[90.98979950 116.67056274]
[84.95188904 130.40168762]
[78.91397858 144.13279724]
[72.87606812 157.86392212]
[66.83816528 171.59504700]
[60.80025482 185.32615662]
[54.76234436 199.05728149]
[65.53166962 209.75242615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 70]
[22 69]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
