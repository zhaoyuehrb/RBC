%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCUAGAAUUCCCAGAAGCUCUGCUUCAGCACUGGAAGCUUUUGCUCGCAGUUUGCUUCAUAGCUCUGUGAAGAAGCUGUGGCCCACACUGGGGUCCCCUCUUUUCCUAAAUCCAG\
) } def
/len { sequence length } bind def

/coor [
[50.70759583 174.09498596]
[51.52543259 182.42120361]
[50.87367630 190.75625610]
[48.77447510 198.84294128]
[45.29460907 206.43206787]
[40.54337311 213.29014587]
[34.66913223 219.20658875]
[27.85471153 224.00013733]
[20.31168175 227.52444458]
[12.27381229 229.67250061]
[3.98981166 230.37997437]
[-4.28436184 229.62701416]
[-12.29340935 227.43890381]
[-19.79056931 223.88516235]
[-26.54521751 219.07733154]
[-32.34996796 213.16554260]
[-37.02703476 206.33374023]
[-51.08442307 211.56726074]
[-65.14180756 216.80079651]
[-79.19919586 222.03433228]
[-93.25658417 227.26785278]
[-105.99079895 238.46054077]
[-120.27124786 229.32243347]
[-115.44348907 213.07038879]
[-98.49011993 213.21046448]
[-84.43273163 207.97694397]
[-70.37533569 202.74340820]
[-56.31795120 197.50987244]
[-42.26056290 192.27635193]
[-41.18171692 169.14337158]
[-29.19100571 149.26312256]
[-9.13230038 137.45809937]
[14.18568611 136.62269592]
[35.14216232 147.01380920]
[46.61867523 137.35516357]
[58.09518814 127.69650269]
[69.57170105 118.03784180]
[81.04821777 108.37918854]
[81.24620819 93.38049316]
[70.02865601 83.42226410]
[58.81109619 73.46402740]
[42.64668274 70.69929504]
[37.21335983 55.22638321]
[48.10046387 42.96249390]
[64.10827637 46.52366638]
[68.76933289 62.24647141]
[79.98688507 72.20470428]
[91.20444489 82.16294098]
[105.73516083 78.44026184]
[110.78268433 64.31501770]
[115.83020020 50.18977356]
[120.87772369 36.06452942]
[125.92524719 21.93928528]
[130.97276306 7.81404209]
[136.02029419 -6.31120253]
[141.06781006 -20.43644714]
[141.02117920 -29.69972038]
[146.43949890 -34.86493683]
[151.85812378 -48.85202026]
[157.27674866 -62.83910370]
[162.69537354 -76.82618713]
[168.11399841 -90.81327057]
[173.53262329 -104.80035400]
[178.95124817 -118.78743744]
[175.90245056 -134.90069580]
[188.50732422 -145.39111328]
[203.79908752 -139.46705627]
[206.04685974 -123.22268677]
[192.93833923 -113.36881256]
[187.51971436 -99.38172913]
[182.10108948 -85.39464569]
[176.68246460 -71.40756226]
[171.26383972 -57.42047882]
[165.84521484 -43.43339539]
[160.42658997 -29.44631386]
[155.19305420 -15.38892555]
[150.14553833 -1.26368082]
[145.09800720 12.86156368]
[140.05049133 26.98680687]
[135.00297546 41.11205292]
[129.95544434 55.23729706]
[124.90792847 69.36254120]
[119.86040497 83.48778534]
[128.09077454 96.02815247]
[143.05812073 97.01743317]
[158.02546692 98.00671387]
[172.99281311 98.99599457]
[184.71418762 88.39482117]
[200.49420166 89.27035522]
[210.97085571 101.10316467]
[209.92852783 116.87303925]
[197.98562622 127.22400665]
[182.22764587 126.01501465]
[172.00352478 113.96333313]
[157.03617859 112.97405243]
[142.06884766 111.98477936]
[127.10150146 110.99549866]
[141.27902222 115.89425659]
[153.18435669 125.01911926]
[161.59930420 137.43638611]
[165.66282654 151.87548828]
[164.95913696 166.85897827]
[159.56022644 180.85368347]
[150.01853943 192.42762756]
[137.31039429 200.39651489]
[122.73615265 203.94496155]
[107.78708649 202.70986938]
[93.99283600 196.81761169]
[82.76487732 186.87110901]
[75.25208282 173.88812256]
[72.22319031 159.19711304]
[73.98812866 144.30131531]
[80.36630249 130.72489929]
[90.70687103 119.85570526]
[79.23036194 129.51435852]
[67.75384521 139.17301941]
[56.27733231 148.83166504]
[44.80081940 158.49032593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[34 118]
[35 117]
[36 116]
[37 115]
[38 114]
[39 48]
[40 47]
[41 46]
[49 83]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
