%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACCCAGGAAGGCGGAGCUGGGUGCGAGCGCCCUACCGCUUUCGCUUUCCCUUCGCGGUGCCCACUCCACUCCUUGUGCGGCGCUAGGCCCCCCGUCCCGGUC\
) } def
/len { sequence length } bind def

/coor [
[79.99907684 358.31857300]
[64.54329681 356.94070435]
[52.87134552 346.71597290]
[49.47132874 331.57598877]
[55.65061951 317.34237671]
[69.03315735 309.48822021]
[70.36509705 294.54748535]
[63.78848648 281.18344116]
[72.72061920 268.12481689]
[74.05255890 253.18408203]
[75.38449860 238.24333191]
[68.80789185 224.87930298]
[77.74002838 211.82067871]
[79.07196808 196.87992859]
[76.48950195 189.82496643]
[80.67118835 181.51840210]
[82.44528198 166.62368774]
[76.26758575 153.07063293]
[85.58277130 140.28244019]
[87.35686493 125.38771820]
[89.13096619 110.49300385]
[83.28818512 96.67771912]
[71.36537170 87.57571411]
[59.44255447 78.47371674]
[39.44869995 76.96612549]
[32.44887161 59.04423141]
[20.00778580 50.66453171]
[7.56669998 42.28482819]
[-4.87438536 33.90512848]
[-17.31546974 25.52542686]
[-33.08382797 24.23336601]
[-39.31748199 10.70595551]
[-51.75856781 2.32625413]
[-67.22056580 5.59768772]
[-80.42134094 -3.09224629]
[-83.52912140 -18.58796310]
[-74.70010376 -31.69613075]
[-59.17239761 -34.63990402]
[-46.15830612 -25.67279625]
[-43.37886810 -10.11483097]
[-30.93778229 -1.73512971]
[-16.05929184 -1.04244125]
[-8.93576908 13.08434105]
[3.50531626 21.46404266]
[15.94640160 29.84374428]
[28.38748741 38.22344589]
[40.82857132 46.60314560]
[50.83771133 43.72457504]
[60.96311951 46.98190308]
[67.69137573 55.50411606]
[68.54455566 66.55089569]
[80.46737671 75.65290070]
[92.39019012 84.75490570]
[86.93537903 70.78189087]
[93.57253265 57.33019257]
[107.98049927 53.15759659]
[120.77890778 60.98069000]
[123.63529205 75.70621490]
[114.69037628 87.74682617]
[128.59072876 82.10941315]
[142.49107361 76.47200012]
[156.39141846 70.83458710]
[170.29174805 65.19717407]
[184.19209290 59.55976105]
[198.00738525 53.71698380]
[211.73455811 47.67013550]
[225.46174622 41.62328339]
[227.04774475 26.34649658]
[236.07264709 13.91883755]
[250.10879517 7.68328094]
[265.38052368 9.31716156]
[277.77984619 18.38097382]
[283.97137451 32.43659592]
[282.28964233 47.70314026]
[273.18701172 60.07397842]
[259.11203003 66.22142029]
[243.85084534 64.49182892]
[231.50860596 55.35046768]
[217.78141785 61.39731979]
[204.05422974 67.44416809]
[199.12275696 73.11180878]
[189.82951355 73.46010590]
[175.92916870 79.09751892]
[162.02882385 84.73493195]
[148.12847900 90.37234497]
[134.22813416 96.00975800]
[120.32778931 101.64717102]
[113.08076477 110.30545044]
[104.02568054 112.26709747]
[102.25157928 127.16181183]
[100.47748566 142.05653381]
[106.52828979 156.67495728]
[97.33999634 168.39778137]
[95.56590271 183.29249573]
[94.01271057 198.21186829]
[92.68077850 213.15261841]
[99.16210938 227.58531189]
[90.32524872 239.57527161]
[88.99330902 254.51602173]
[87.66136932 269.45675659]
[94.14270782 283.88946533]
[85.30583954 295.87942505]
[83.97389984 310.82015991]
[95.75608826 320.91769409]
[99.32014465 336.01989746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 103]
[7 102]
[9 100]
[10 99]
[11 98]
[13 96]
[14 95]
[16 94]
[17 93]
[19 91]
[20 90]
[21 89]
[22 53]
[23 52]
[24 51]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[32 41]
[33 40]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 80]
[66 79]
[67 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
