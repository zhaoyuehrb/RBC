%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUUCCAGCCAUUGUCGGAGUGUCAGCCGUCACAAGGCACUUCCAGCCAGUCGCAACGGCGGGUCGCCAGCGCCGCAGUAGCUCGCGCGGUGCCUGUCGGUAGUCGCGUGCGGGGCGGCGGGGCGGCGGGGCGGCCGGCGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[-66.97144318 253.44514465]
[-71.90408325 264.98748779]
[-79.47646332 274.98431396]
[-89.23420715 282.84463501]
[-100.59394073 288.10549927]
[-112.87817383 290.45901489]
[-125.35573578 289.77062988]
[-137.28526306 286.08660889]
[-147.95924377 279.63107300]
[-156.74601746 270.79232788]
[-169.78878784 278.20086670]
[-182.83155823 285.60937500]
[-188.79820251 292.61712646]
[-196.22833252 293.03326416]
[-209.42440796 300.16516113]
[-222.62046814 307.29705811]
[-235.81652832 314.42895508]
[-248.85929871 321.83746338]
[-261.74298096 329.51931763]
[-274.62664795 337.20117188]
[-275.89739990 352.66610718]
[-286.04101562 364.40863037]
[-301.15710449 367.91345215]
[-315.43319702 361.83291626]
[-323.37985229 348.50512695]
[-321.94143677 333.05487061]
[-311.67102051 321.42309570]
[-296.51779175 318.08242798]
[-282.30850220 324.31747437]
[-269.42483521 316.63562012]
[-256.54116821 308.95376587]
[-254.51187134 304.56234741]
[-249.66665649 301.43188477]
[-242.94842529 301.23287964]
[-229.75236511 294.10098267]
[-216.55628967 286.96908569]
[-203.36022949 279.83721924]
[-190.24008179 272.56658936]
[-177.19731140 265.15808105]
[-164.15454102 257.74957275]
[-167.65281677 240.52143860]
[-165.10581970 223.10343933]
[-156.79885864 207.55682373]
[-143.69982910 195.72685242]
[-127.34648132 189.02374268]
[-109.66584778 188.25460815]
[-92.74725342 193.52629089]
[-78.59535980 204.23086548]
[-66.22302246 195.74998474]
[-53.85069275 187.26910400]
[-50.08637238 180.84960938]
[-41.12691116 178.74307251]
[-28.57852554 170.52491760]
[-16.03013992 162.30676270]
[-3.48175550 154.08860779]
[9.06662941 145.87045288]
[10.90898514 141.39739990]
[15.61792183 138.06544495]
[22.32179070 137.58338928]
[35.20547104 129.90155029]
[48.08914948 122.21969604]
[60.97282791 114.53784180]
[67.94197845 101.37425232]
[83.75756836 100.95252228]
[91.52072144 86.11383057]
[108.26697540 85.98639679]
[120.98583221 78.03462219]
[133.70469666 70.08285522]
[146.42355347 62.13108826]
[159.14241028 54.17931747]
[164.80833435 46.92626190]
[172.21430969 46.19725418]
[185.09799194 38.51540375]
[192.98866272 24.80235481]
[207.88272095 24.93008232]
[220.76640320 17.24823189]
[233.65008545 9.56638050]
[246.53376770 1.88453043]
[254.42443848 -11.82851982]
[269.31851196 -11.70079327]
[282.20217896 -19.38264275]
[286.13796997 -31.71208191]
[297.08285522 -37.83395767]
[308.86828613 -34.92586517]
[321.91104126 -42.33438492]
[334.87500000 -49.87998581]
[347.75866699 -57.56183624]
[360.64236450 -65.24369049]
[373.52603149 -72.92553711]
[386.40972900 -80.60739136]
[399.29339600 -88.28923798]
[412.17706299 -95.97108459]
[424.97906494 -103.78833008]
[437.69790649 -111.74010468]
[450.41677856 -119.69187164]
[463.13562012 -127.64363861]
[470.34918213 -142.37106323]
[486.72644043 -143.21755981]
[495.41995239 -129.31231689]
[487.48651123 -114.95987701]
[471.08740234 -114.92478180]
[458.36853027 -106.97301483]
[445.64968872 -99.02124023]
[432.93081665 -91.06947327]
[428.89923096 -84.81437683]
[419.85891724 -83.08740997]
[406.97525024 -75.40555573]
[394.09155273 -67.72370911]
[381.20788574 -60.04185867]
[368.32421875 -52.36000824]
[355.44052124 -44.67815781]
[342.55685425 -36.99630737]
[338.39425659 -30.82760048]
[329.31958008 -29.29161263]
[316.27679443 -21.88309479]
[308.26577759 -6.30176973]
[289.88403320 -6.49896479]
[277.00033569 1.18288529]
[270.03118896 14.34647751]
[254.21560669 14.76820946]
[241.33193970 22.45005989]
[228.44825745 30.13191032]
[215.56457520 37.81375885]
[208.59542847 50.97735214]
[192.77983093 51.39908218]
[179.89616394 59.08093262]
[167.09417725 66.89817810]
[154.37532043 74.84994507]
[141.65646362 82.80171204]
[128.93760681 90.75348663]
[116.21874237 98.70525360]
[112.90139008 109.91353607]
[102.92531586 116.00520325]
[91.43941498 113.83619690]
[83.54873657 127.54924774]
[68.65467834 127.42152405]
[55.77099991 135.10337830]
[42.88732147 142.78521729]
[30.00364113 150.46707153]
[17.28478241 158.41883850]
[4.73639727 166.63699341]
[-7.81198788 174.85514832]
[-20.36037254 183.07330322]
[-32.90876007 191.29145813]
[-45.36980820 199.64143372]
[-57.74214172 208.12231445]
[-70.11447906 216.60319519]
[-66.04373169 228.51220703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 40]
[11 39]
[12 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 31]
[19 30]
[20 29]
[48 147]
[49 146]
[50 145]
[52 144]
[53 143]
[54 142]
[55 141]
[56 140]
[59 139]
[60 138]
[61 137]
[62 136]
[64 134]
[66 131]
[67 130]
[68 129]
[69 128]
[70 127]
[72 126]
[73 125]
[75 123]
[76 122]
[77 121]
[78 120]
[80 118]
[81 117]
[84 115]
[85 114]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 106]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
