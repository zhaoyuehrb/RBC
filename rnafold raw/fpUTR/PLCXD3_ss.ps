%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAACUCUAGCGGGGCUAGAGCAAACAUUGGAUUAGCGGCAGCAGCCUGCCAGCCUGCCCGAGGAGUGCUGGGACCAGCGCGCUGCACGCCGACUGGCACG\
) } def
/len { sequence length } bind def

/coor [
[-46.04980087 232.74287415]
[-57.35876465 242.59718323]
[-56.12894440 257.95275879]
[-64.08380890 270.93634033]
[-77.99401093 276.67831421]
[-92.44503784 273.17034912]
[-103.75400543 283.02465820]
[-115.06296539 292.87896729]
[-126.37192535 302.73327637]
[-137.68089294 312.58758545]
[-148.98985291 322.44189453]
[-160.29881287 332.29620361]
[-168.26826477 347.26031494]
[-184.85371399 343.74478149]
[-186.06689453 326.83428955]
[-170.15312195 320.98724365]
[-158.84416199 311.13293457]
[-147.53520203 301.27862549]
[-136.22624207 291.42431641]
[-124.91727448 281.57000732]
[-113.60830688 271.71569824]
[-102.29934692 261.86138916]
[-103.79707336 247.06629944]
[-96.20586395 234.07255554]
[-82.25596619 227.96896362]
[-67.21307373 231.28822327]
[-55.90410614 221.43391418]
[-56.81119537 208.48168945]
[-49.94481277 197.23204041]
[-37.65095901 191.96348572]
[-24.38686180 194.83265686]
[-23.17295265 180.03190613]
[-11.54002094 170.22734070]
[3.97613001 171.60095215]
[15.58035183 162.09611511]
[27.18457413 152.59126282]
[38.78879547 143.08642578]
[50.24671936 133.40571594]
[61.55568314 123.55141449]
[72.86464691 113.69710541]
[84.17360687 103.84280396]
[89.11468506 87.88588715]
[105.50723267 84.67315674]
[116.51042175 74.47855377]
[127.51360321 64.28395081]
[138.51678467 54.08934784]
[149.51997375 43.89474487]
[160.04539490 33.20757294]
[170.07101440 22.05020142]
[180.09663391 10.89283085]
[189.60147095 -0.71139044]
[198.56564331 -12.73817730]
[207.52981567 -24.76496315]
[216.49398804 -36.79175186]
[225.45817566 -48.81853485]
[234.23789978 -60.98062897]
[242.83113098 -73.27519226]
[244.39521790 -89.01889801]
[258.02822876 -95.01808929]
[258.90383911 -111.39384460]
[273.64404297 -118.58119965]
[287.08541870 -109.18641663]
[285.40057373 -92.87404633]
[270.32278442 -86.42485046]
[269.37335205 -71.56053925]
[255.12568665 -64.68196106]
[246.53245544 -52.38739395]
[245.25891113 -44.97606277]
[237.48495483 -39.85436249]
[228.52078247 -27.82757759]
[219.55661011 -15.80078983]
[210.59243774 -3.77400351]
[201.62826538 8.25278282]
[201.85736084 11.93453026]
[200.20191956 15.90171719]
[196.55354309 19.21289825]
[191.25399780 20.91845131]
[181.22837830 32.07582474]
[171.20275879 43.23319244]
[171.09449768 46.92047501]
[169.08346558 50.71979904]
[165.14779663 53.68375778]
[159.71458435 54.89792633]
[148.71139526 65.09252930]
[137.70820618 75.28713226]
[126.70502472 85.48173523]
[115.70183563 95.67633820]
[114.52313232 107.37024689]
[105.78083801 115.22575378]
[94.02791595 115.15176392]
[82.71894836 125.00607300]
[71.40998840 134.86038208]
[60.10102463 144.71469116]
[55.58641434 152.85621643]
[48.29363632 154.69064331]
[36.68941498 164.19548035]
[25.08519554 173.70033264]
[13.48097324 183.20516968]
[11.77162457 198.68792725]
[-0.13210672 208.16189575]
[-14.88201904 206.43687439]
[-16.24013138 223.79515076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[31 101]
[34 98]
[35 97]
[36 96]
[37 95]
[38 93]
[39 92]
[40 91]
[41 90]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 79]
[49 78]
[50 77]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 67]
[57 66]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
