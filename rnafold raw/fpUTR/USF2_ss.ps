%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGCCGCGCGGCGUGAGCGCCGGGCUCGGGGCCCCCCCGGCCGCCCGCCCCCUCCCCUCCCUCCCUCCCCUCCCCUCCCCUCCCCCCCGGGCCCCGCGCCCCCCCCGCCCCCGCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.94072723 343.18554688]
[77.49176025 347.62612915]
[62.37583923 347.60888672]
[47.93705750 343.13531494]
[35.45929718 334.60321045]
[26.05207443 322.77120972]
[20.55187416 308.69146729]
[19.44777107 293.61593628]
[22.83794022 278.88507080]
[30.42093086 265.80877686]
[41.52246857 255.54975891]
[55.15540695 249.02026367]
[70.10752106 246.80087280]
[72.36090851 231.97109985]
[74.61428833 217.14132690]
[76.86767578 202.31155396]
[71.13014221 188.56637573]
[80.85277557 176.08514404]
[75.11524200 162.33996582]
[84.83787537 149.85873413]
[87.09126282 135.02896118]
[89.34464264 120.19918823]
[78.03958893 106.26770782]
[80.28823090 88.46787262]
[94.70273590 77.78553009]
[96.20816040 62.86126328]
[97.71358490 47.93699646]
[99.21901703 33.01273346]
[92.90578461 18.50570679]
[101.88135529 6.61922407]
[103.38677979 -8.30504131]
[104.89220428 -23.22930717]
[106.39762878 -38.15357208]
[107.90305328 -53.07783508]
[109.40848541 -68.00210571]
[110.91390991 -82.92636871]
[112.41933441 -97.85063171]
[100.06787872 -106.87221527]
[93.93096924 -120.77311707]
[95.56513977 -135.77964783]
[104.43196106 -147.87243652]
[118.06935883 -153.86300659]
[119.57478333 -168.78726196]
[104.99100494 -172.40585327]
[91.07067871 -178.06317139]
[78.09720612 -185.64405823]
[66.33470917 -194.99415588]
[56.02265930 -205.92312622]
[47.37099457 -218.20846558]
[40.55584717 -231.60005188]
[35.71597290 -245.82525635]
[32.94990158 -260.59445190]
[32.31394958 -275.60699463]
[33.82106018 -290.55722046]
[37.44055176 -305.14077759]
[43.09873581 -319.06076050]
[50.68041992 -332.03375244]
[60.03125000 -343.79568481]
[70.96086121 -354.10705566]
[83.24672699 -362.75796509]
[96.63873291 -369.57226562]
[110.86423492 -374.41128540]
[125.63362122 -377.17642212]
[140.64619446 -377.81146240]
[155.59632874 -376.30343628]
[170.17965698 -372.68301392]
[184.09928894 -367.02398682]
[197.07182312 -359.44149780]
[208.83316040 -350.08993530]
[219.14385986 -339.15969849]
[227.79400635 -326.87329102]
[234.60749817 -313.48086548]
[239.44560242 -299.25506592]
[242.20985413 -284.48550415]
[242.84394836 -269.47286987]
[241.33499146 -254.52284241]
[237.71368408 -239.93972778]
[232.05378723 -226.02046204]
[224.47048950 -213.04840088]
[215.11820984 -201.28762817]
[204.18731689 -190.97761536]
[191.90037537 -182.32823181]
[178.50753784 -175.51556396]
[164.28143311 -170.67832947]
[149.51170349 -167.91500854]
[134.49905396 -167.28184509]
[132.99362183 -152.35757446]
[145.15992737 -143.76416016]
[151.43307495 -130.14419556]
[150.03736877 -115.11360931]
[141.24792480 -102.71833801]
[127.34359741 -96.34520721]
[125.83817291 -81.42094421]
[124.33274841 -66.49667358]
[122.82732391 -51.57241058]
[121.32189941 -36.64814758]
[119.81646729 -21.72388077]
[118.31104279 -6.79961538]
[116.80561829 8.12465000]
[123.22652435 21.56418991]
[114.14328003 34.51815796]
[112.63785553 49.44242096]
[111.13243103 64.36669159]
[109.62699890 79.29095459]
[118.43808746 86.52480316]
[122.65457153 97.11654663]
[121.22574615 108.42682648]
[114.50767517 117.63720703]
[104.17442322 122.45257568]
[101.92103577 137.28234863]
[99.66765594 152.11212158]
[105.24401093 166.91802979]
[95.68255615 178.33853149]
[101.25891113 193.14443970]
[91.69744873 204.56492615]
[89.44406891 219.39471436]
[87.19068146 234.22448730]
[84.93730164 249.05426025]
[98.55529785 255.61486816]
[109.63337708 265.89920044]
[117.18649292 278.99279785]
[120.54301453 293.73135376]
[119.40448761 308.80435181]
[113.87215424 322.87149048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 118]
[14 117]
[15 116]
[16 115]
[18 113]
[20 111]
[21 110]
[22 109]
[25 104]
[26 103]
[27 102]
[28 101]
[30 99]
[31 98]
[32 97]
[33 96]
[34 95]
[35 94]
[36 93]
[37 92]
[42 87]
[43 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
