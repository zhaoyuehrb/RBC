%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAUUUUGUUCCGCCCGAGGAGACCCUAAGAUGGCGGCGAGGGGGACGGUGAAGGUUGCCUCCCGCCCGUCCGGGCUCUGAUCCUCCGUCUCCCCGUCCCCCGGCGGCCGGCCCAUGGCCUGGCGGAGGCCCGAACC\
) } def
/len { sequence length } bind def

/coor [
[94.40362549 135.33808899]
[93.88342285 120.34775543]
[82.36875153 129.96089172]
[70.85408020 139.57402039]
[59.33941269 149.18716431]
[47.82474136 158.80029297]
[36.31007004 168.41343689]
[24.79539680 178.02656555]
[13.28072643 187.63969421]
[1.76605546 197.25283813]
[-9.30572987 207.37289429]
[-19.91233063 217.97949219]
[-30.51893234 228.58609009]
[-41.12553406 239.19268799]
[-40.87490082 254.99499512]
[-51.93144608 266.28784180]
[-67.73551178 266.37139893]
[-78.91083527 255.19607544]
[-78.82728577 239.39199829]
[-67.53443909 228.33546448]
[-51.73213577 228.58609009]
[-41.12553406 217.97949219]
[-30.51893234 207.37289429]
[-19.91233063 196.76628113]
[-19.82222748 193.88569641]
[-18.53767586 190.87013245]
[-16.00231552 188.19303894]
[-12.33882427 186.33886719]
[-7.84707880 185.73815918]
[3.66759229 176.12503052]
[15.18226337 166.51188660]
[26.69693375 156.89875793]
[38.21160507 147.28562927]
[49.72627640 137.67248535]
[61.24094772 128.05935669]
[72.75561523 118.44622040]
[84.27028656 108.83308411]
[85.94976044 93.92740631]
[76.86290741 81.99303436]
[67.77605438 70.05867004]
[58.68920517 58.12429810]
[50.93426514 53.13930130]
[49.53594208 45.81865692]
[40.71916199 33.68340302]
[31.76678276 21.64783478]
[22.67993355 9.71346664]
[13.59308243 -2.22090197]
[4.50623131 -14.15527058]
[-3.24870825 -19.14027023]
[-4.64703369 -26.46091080]
[-13.46381187 -38.59616470]
[-22.28059196 -50.73142242]
[-31.09737015 -62.86667633]
[-39.91415024 -75.00193024]
[-54.11574936 -84.26210785]
[-49.14885712 -100.47217560]
[-32.19731140 -100.18678284]
[-27.77889442 -83.81871033]
[-18.96211433 -71.68345642]
[-10.14533615 -59.54819870]
[-1.32855737 -47.41294479]
[7.48822165 -35.27769089]
[16.44059944 -23.24212074]
[25.52745056 -11.30775261]
[34.61429977 0.62661558]
[43.70115280 12.56098366]
[50.31034470 16.00564194]
[52.85441589 24.86662483]
[61.67119598 37.00188065]
[70.62357330 49.03744888]
[79.71042633 60.97181702]
[88.79727173 72.90618896]
[97.88412476 84.84055328]
[111.39865875 91.34880829]
[126.39488220 91.01223755]
[141.39109802 90.67566681]
[156.38732910 90.33909607]
[171.38356018 90.00252533]
[160.91419983 79.26043701]
[159.61103821 64.31714630]
[168.06295776 51.92500687]
[182.45080566 47.68357468]
[196.27323914 53.50940323]
[203.28439331 66.77001190]
[200.31617737 81.47340393]
[188.71002197 90.97556305]
[203.57426453 92.98905945]
[218.43852234 95.00255585]
[233.30276489 97.01605988]
[248.16700745 99.02955627]
[263.03125000 101.04305267]
[277.89550781 103.05655670]
[283.16409302 91.96803284]
[294.53042603 84.05155945]
[309.89678955 82.57340240]
[325.50305176 89.39196777]
[340.40875244 87.71250153]
[355.31442261 86.03303528]
[370.22009277 84.35356903]
[385.12579346 82.67410278]
[397.99200439 72.50590515]
[413.12899780 78.81489563]
[414.96511841 95.11093140]
[401.61154175 104.63004303]
[386.80526733 97.57978058]
[371.89956665 99.25925446]
[356.99389648 100.93872070]
[342.08819580 102.61818695]
[327.18252563 104.29765320]
[325.59576416 111.62787628]
[322.42224121 126.28832245]
[320.83547974 133.61854553]
[333.71218872 141.31204224]
[346.58892822 149.00552368]
[359.46566772 156.69902039]
[376.16390991 159.63241577]
[377.96768188 176.49014282]
[362.26809692 182.89010620]
[351.77218628 169.57574463]
[338.89544678 161.88226318]
[326.01870728 154.18876648]
[313.14196777 146.49528503]
[284.75585938 139.68859863]
[275.88201904 117.92079926]
[261.01776123 115.90730286]
[246.15351868 113.89379883]
[231.28926086 111.88030243]
[216.42501831 109.86680603]
[201.56077576 107.85330200]
[186.69653320 105.83980560]
[171.72012329 104.99874878]
[156.72390747 105.33531952]
[141.72767639 105.67189026]
[126.73145294 106.00846100]
[111.73522949 106.34503174]
[126.17076874 110.42120361]
[134.16191101 123.11535645]
[131.59590149 137.89424133]
[119.79337311 147.15168762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 24]
[12 23]
[13 22]
[14 21]
[38 73]
[39 72]
[40 71]
[41 70]
[43 69]
[44 68]
[45 66]
[46 65]
[47 64]
[48 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[74 135]
[75 134]
[76 133]
[77 132]
[78 131]
[86 130]
[87 129]
[88 128]
[89 127]
[90 126]
[91 125]
[92 124]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
