%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGCGAGCGGGCGGCUGCGGGCGGCGCGGAGCGGGCGGCGCGGAGCGAGCGAGCGAGAGAGCGGCGCGGGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[95.92243195 110.51967621]
[90.27108765 107.31272125]
[75.27391052 107.02185059]
[60.27672958 106.73097992]
[46.32911682 114.19921875]
[33.75427246 106.21657562]
[18.75709343 105.92570496]
[10.06689644 116.41912079]
[-2.91354012 119.85886383]
[-15.29268360 115.18448639]
[-22.54163361 104.34972382]
[-37.51625443 103.47754669]
[-51.74296570 110.39935303]
[-63.99881744 101.93511200]
[-78.97344208 101.06294250]
[-93.20014954 107.98474121]
[-105.45600891 99.52050781]
[-120.43062592 98.64833832]
[-135.40524292 97.77616119]
[-151.56915283 102.89131165]
[-160.95899963 88.77511597]
[-149.99385071 75.84446716]
[-134.53308105 82.80154419]
[-119.55845642 83.67371368]
[-104.58383179 84.54589081]
[-91.42820740 77.56169891]
[-78.10127258 86.08831787]
[-63.12664795 86.96049500]
[-49.97102356 79.97631073]
[-36.64408112 88.50292969]
[-21.66946030 89.37509918]
[-9.73465061 77.69566345]
[7.29244566 78.14456940]
[19.04796410 90.92852783]
[34.04514313 91.21939850]
[46.92005920 83.73034668]
[60.56760025 91.73379517]
[75.56478119 92.02466583]
[90.56195831 92.31553650]
[105.55913544 92.02466583]
[120.53376007 91.15249634]
[135.50837708 90.28032684]
[148.83532715 81.75370789]
[161.99095154 88.73789215]
[176.96557617 87.86571503]
[191.94018555 86.99354553]
[202.42102051 75.47009277]
[217.61984253 74.79890442]
[228.54110718 84.86178589]
[243.51573181 83.98961639]
[256.84265137 75.46299744]
[269.99829102 82.44718170]
[284.97290039 81.57500458]
[294.26065063 72.38169861]
[306.92144775 72.10256958]
[316.00537109 80.33533478]
[331.00253296 80.04446411]
[341.77703857 68.48221588]
[357.57424927 68.00870514]
[369.02191162 78.90486145]
[369.32839966 94.70617676]
[358.31182861 106.03801727]
[342.50814819 106.17740631]
[331.29339600 95.04164124]
[316.29623413 95.33251190]
[301.94406128 105.23390961]
[285.84509277 96.54962921]
[270.87045288 97.42179871]
[258.61459351 105.88603973]
[244.38789368 98.96423340]
[229.41326904 99.83641052]
[219.73408508 111.09912872]
[204.56011963 112.19695282]
[192.81236267 101.96817017]
[177.83773804 102.84033966]
[162.86311340 103.71250916]
[150.60726929 112.17675018]
[136.38055420 105.25494385]
[121.40592957 106.12712097]
[106.43131256 106.99929047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[6 35]
[7 34]
[11 31]
[12 30]
[14 28]
[15 27]
[17 25]
[18 24]
[19 23]
[40 80]
[41 79]
[42 78]
[44 76]
[45 75]
[46 74]
[49 71]
[50 70]
[52 68]
[53 67]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
