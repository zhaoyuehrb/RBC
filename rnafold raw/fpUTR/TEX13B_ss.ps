%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUUCAGGCGUGUUAAGCAGCGGGGUUGGCCUGUACUUCCUCUGGCCCUGGCUGAAGAGGGCUAGUGAAACCGUUAAGCCCCUAGGCGAUC\
) } def
/len { sequence length } bind def

/coor [
[95.27326202 360.86953735]
[94.27136993 345.90301514]
[85.70125580 333.72097778]
[92.49953461 319.43481445]
[91.49764252 304.46832275]
[90.49575043 289.50180054]
[86.83403015 282.90570068]
[89.71897125 274.01998901]
[89.21774292 259.02838135]
[88.71652222 244.03674316]
[85.27725220 237.32196045]
[88.45749664 228.53761292]
[85.24452209 221.71166992]
[88.71652222 213.03848267]
[89.21774292 198.04685974]
[89.71897125 183.05523682]
[82.41127014 170.07652283]
[90.60538483 156.54260254]
[91.10660553 141.55097961]
[91.60783386 126.55935669]
[76.77606201 115.37779236]
[72.27191925 97.35775757]
[58.27420807 91.96664429]
[44.27650070 86.57552338]
[30.27878952 81.18441010]
[16.28108025 75.79328918]
[1.09340334 80.96185303]
[-12.33865356 72.18920135]
[-13.71116543 56.20496750]
[-1.97125816 45.27088547]
[13.87521553 47.77464676]
[21.67219734 61.79558182]
[35.66990662 67.18669891]
[49.66761398 72.57781982]
[63.66532516 77.96893311]
[77.66303253 83.36004639]
[85.84732819 76.00979614]
[96.23907471 72.40139008]
[107.21743011 73.09764099]
[114.86167908 60.19161987]
[122.50592804 47.28559875]
[120.07075500 34.48499680]
[126.86648560 23.84313011]
[138.72125244 20.86524773]
[146.79248047 8.22186375]
[154.86372375 -4.42152071]
[162.93495178 -17.06490517]
[171.00619507 -29.70828819]
[179.07742310 -42.35167313]
[187.14866638 -54.99505615]
[195.21989441 -67.63844299]
[189.42114258 -82.03128815]
[193.22241211 -97.07556152]
[205.16203308 -106.98641205]
[220.64898682 -107.95293427]
[233.72821045 -99.60346985]
[239.37048340 -85.14855957]
[235.40623474 -70.14641571]
[223.35980225 -60.36566544]
[207.86328125 -59.56720734]
[199.79203796 -46.92382050]
[191.72080994 -34.28043747]
[183.64958191 -21.63705254]
[175.57833862 -8.99366951]
[167.50711060 3.64971471]
[159.43586731 16.29309845]
[151.36463928 28.93648338]
[151.62277222 46.39644241]
[135.41195679 54.92984772]
[127.76770020 67.83586884]
[120.12345123 80.74189758]
[127.05750275 93.38792419]
[126.73731232 107.80667877]
[119.24871826 120.13243103]
[106.59945679 127.06058502]
[106.09822845 142.05220032]
[105.59700775 157.04382324]
[112.86885071 171.09483337]
[104.71059418 183.55645752]
[104.20936584 198.54808044]
[103.70814514 213.53970337]
[103.45749664 228.53761292]
[103.70814514 243.53552246]
[104.20936584 258.52713013]
[104.71059418 273.51876831]
[105.46225739 288.49990845]
[106.46414185 303.46643066]
[107.46603394 318.43292236]
[116.10780334 331.68548584]
[109.23786926 344.90112305]
[110.23976135 359.86764526]
[117.33053589 375.26754761]
[104.49538422 386.34432983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[4 88]
[5 87]
[6 86]
[8 85]
[9 84]
[10 83]
[12 82]
[14 81]
[15 80]
[16 79]
[18 77]
[19 76]
[20 75]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[39 71]
[40 70]
[41 69]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
