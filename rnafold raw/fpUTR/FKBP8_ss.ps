%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGGCAGGGGCGGGGCCAAGCGGCCGAACCUGGUUCCCGAGGCGCGGCGGCCGCGGCUGGGGGCGGGGAGGGGGGCGCAGGACCCCAAGUGGGGGUCCCGGAGCCAGAGGGCCAAUUCCUGUCCCCCCAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[101.36536407 337.64425659]
[100.33426666 322.67974854]
[88.96942139 313.12066650]
[87.71057129 297.95919800]
[97.81406403 286.10351562]
[96.78296661 271.13900757]
[93.76688385 267.33306885]
[93.16884613 261.56985474]
[96.06373596 255.46762085]
[95.71979523 240.47155762]
[95.37585449 225.47550964]
[95.03191376 210.47944641]
[94.68797302 195.48339844]
[94.34403229 180.48733521]
[94.00009155 165.49128723]
[93.65615082 150.49522400]
[93.31221008 135.49917603]
[80.35655212 130.31588745]
[70.33202362 120.60894775]
[64.73445892 107.82682037]
[64.39910126 93.87679291]
[69.37599945 80.84045410]
[58.58855820 70.41783142]
[47.80111313 59.99520493]
[32.50034714 55.97064972]
[28.72356415 41.56283569]
[17.93612289 31.14020920]
[1.36406577 34.30928040]
[-13.69629097 27.07741928]
[-21.42971420 12.45547390]
[-18.98036575 -3.73574972]
[-30.00395584 -13.90828514]
[-41.02754593 -24.08082008]
[-56.41657257 -27.75348282]
[-60.52272034 -42.07091141]
[-71.54631042 -52.24344635]
[-82.56990051 -62.41598129]
[-93.59349060 -72.58851624]
[-104.61708069 -82.76105499]
[-115.64067078 -92.93358612]
[-124.14913177 -96.49686432]
[-126.79698944 -103.46799469]
[-137.58442688 -113.89061737]
[-152.88519287 -117.91517639]
[-156.66198730 -132.32299805]
[-167.44941711 -142.74562073]
[-178.23686218 -153.16824341]
[-189.02430725 -163.59086609]
[-199.81175232 -174.01348877]
[-215.40391541 -180.67086792]
[-213.32304382 -197.49664307]
[-196.57879639 -200.15492249]
[-189.38912964 -184.80093384]
[-178.60168457 -174.37831116]
[-167.81423950 -163.95568848]
[-157.02679443 -153.53305054]
[-146.23936462 -143.11042786]
[-131.71017456 -139.83137512]
[-127.16180420 -124.67806244]
[-116.37436676 -114.25543213]
[-105.46813202 -103.95717621]
[-94.44454193 -93.78464508]
[-83.42095184 -83.61210632]
[-72.39736176 -73.43957520]
[-61.37377548 -63.26703644]
[-50.35018539 -53.09450150]
[-35.74964142 -50.14944839]
[-30.85500908 -35.10440826]
[-19.83142090 -24.93187523]
[-8.80783081 -14.75933933]
[4.03424215 -18.58293915]
[17.18906021 -15.51538754]
[27.17446899 -6.25824785]
[31.29271507 6.83413744]
[28.35874748 20.35276794]
[39.14618683 30.77539253]
[53.67536545 34.05445099]
[58.22373962 49.20776367]
[69.01118469 59.63039017]
[79.79862213 70.05301666]
[103.93774414 59.06795502]
[132.60641479 67.38515472]
[145.48062134 59.68745041]
[158.35482788 51.98974228]
[171.22904968 44.29203415]
[184.10325623 36.59432983]
[196.97746277 28.89662170]
[209.85168457 21.19891548]
[215.14518738 6.05433702]
[230.33317566 0.88668579]
[243.76470947 9.66014004]
[245.13627625 25.64445686]
[233.39570618 36.57783508]
[217.54937744 34.07312393]
[204.67517090 41.77083206]
[191.80096436 49.46854019]
[178.92675781 57.16624832]
[166.05253601 64.86395264]
[153.17832947 72.56166077]
[140.30412292 80.25936890]
[141.16215515 87.71012115]
[156.06370544 85.99427032]
[157.77932739 100.89583588]
[142.87825012 102.61163330]
[143.73628235 110.06239319]
[158.02323914 114.63217163]
[172.31019592 119.20195007]
[188.21153259 115.19200134]
[199.43922424 127.14486694]
[194.44319153 142.76445007]
[178.36293030 145.98268127]
[167.74041748 133.48890686]
[153.45346069 128.91912842]
[139.16650391 124.34934998]
[133.38027954 128.84930420]
[127.18558502 132.17265320]
[120.80236053 134.30743408]
[114.44349670 135.28054810]
[108.30827332 135.15522766]
[108.65220642 150.15129089]
[108.99614716 165.14733887]
[109.34008789 180.14340210]
[109.68402863 195.13945007]
[110.02796936 210.13551331]
[110.37191010 225.13157654]
[110.71585083 240.12762451]
[111.05979156 255.12368774]
[111.74748993 270.10791016]
[112.77858734 285.07241821]
[124.41265869 295.43032837]
[125.24515533 310.62115479]
[115.29878235 321.64865112]
[116.32987976 336.61315918]
[125.93020630 349.90847778]
[118.97033691 364.75747681]
[102.60997772 365.88473511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[5 129]
[6 128]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[14 122]
[15 121]
[16 120]
[17 119]
[22 80]
[23 79]
[24 78]
[26 76]
[27 75]
[31 70]
[32 69]
[33 68]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[42 60]
[43 59]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
