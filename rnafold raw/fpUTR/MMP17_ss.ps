%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCGGCGGGGGCGCCGCGGAGAGCGGAGGGCGCCGGGCUGCGGAACGCGAAGCGGAGGGCGCGGGACCCUGCACGCCGCCCGCGGGCCCAUGUGAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[107.84408569 434.33975220]
[95.15037537 443.75491333]
[79.52951813 441.35403442]
[70.24908447 428.56149292]
[72.81499481 412.96688843]
[85.70494080 403.82223511]
[87.98365784 388.99630737]
[90.26236725 374.17041016]
[92.54107666 359.34451294]
[81.09506226 339.20504761]
[94.83695984 319.71072388]
[94.37951660 304.71771240]
[93.92207336 289.72467041]
[93.46463013 274.73165894]
[90.05664825 268.02825928]
[93.22890472 259.27593994]
[93.22890472 244.27595520]
[93.22890472 229.27595520]
[93.22890472 214.27595520]
[93.22890472 199.27595520]
[93.22890472 184.27595520]
[83.62126923 169.67817688]
[92.73572540 153.76945496]
[89.32774353 147.06607056]
[92.50000000 138.31375122]
[92.50000000 123.31375885]
[92.50000000 108.31375885]
[92.27125549 93.31549835]
[91.58522034 78.33119965]
[90.67076111 63.35909653]
[89.75630188 48.38699722]
[88.84184265 33.41489792]
[77.28883362 22.96665764]
[76.57472229 7.76979256]
[86.60672760 -3.17984653]
[85.69226074 -18.15194511]
[84.77780151 -33.12404633]
[76.21358490 -46.42685318]
[83.16058350 -59.60214615]
[82.24612427 -74.57424927]
[81.33166504 -89.54634857]
[70.47969818 -94.05836487]
[62.19149780 -102.31740570]
[57.68146133 -113.05767059]
[57.58918762 -124.65415955]
[61.88908005 -135.36846924]
[69.90007782 -143.60945129]
[80.39321136 -148.16938782]
[80.85065460 -163.16241455]
[81.30809784 -178.15544128]
[75.74760437 -194.17160034]
[89.59854126 -203.94850159]
[102.82768250 -193.34536743]
[96.30112457 -177.69799805]
[95.84368134 -162.70497131]
[95.38623810 -147.71194458]
[110.73236847 -137.35641479]
[116.97506714 -119.77162933]
[111.50844574 -101.77688599]
[96.30376434 -90.46080780]
[97.21822357 -75.48870850]
[98.13268280 -60.51660919]
[106.63150024 -48.28470612]
[99.74990082 -34.03850555]
[100.66436768 -19.06640625]
[101.57882690 -4.09430599]
[112.86883545 5.55303574]
[114.00951385 20.72384644]
[103.81394196 32.50043869]
[104.72840118 47.47253799]
[105.64286041 62.44463730]
[106.55731964 77.41674042]
[110.16814423 84.01307678]
[107.26427460 92.85805511]
[110.68715668 100.32020569]
[107.50000000 108.31375885]
[107.50000000 123.31375885]
[107.50000000 138.31375122]
[107.72874451 153.31201172]
[116.63039398 162.79914856]
[116.60932159 175.40542603]
[108.22890472 184.27595520]
[108.22890472 199.27595520]
[108.22890472 214.27595520]
[108.22890472 229.27595520]
[108.22890472 244.27595520]
[108.22890472 259.27593994]
[108.45764923 274.27420044]
[108.91509247 289.26724243]
[109.37253571 304.26025391]
[109.82997894 319.25326538]
[116.30848694 322.73913574]
[121.28060913 328.09008789]
[124.23951721 334.71109009]
[124.89966583 341.88052368]
[123.22410583 348.82873535]
[119.42478180 354.82080078]
[113.93642426 359.23416138]
[107.36698151 361.62322998]
[105.08827209 376.44912720]
[102.80956268 391.27502441]
[100.53085327 406.10095215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 102]
[7 101]
[8 100]
[9 99]
[11 91]
[12 90]
[13 89]
[14 88]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[23 79]
[25 78]
[26 77]
[27 76]
[28 74]
[29 72]
[30 71]
[31 70]
[32 69]
[35 66]
[36 65]
[37 64]
[39 62]
[40 61]
[41 60]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
