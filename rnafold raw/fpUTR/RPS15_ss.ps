%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGGUGAGUGUUGCGAUUUGGCGCGUCUCUGCCGGGCCUAUCCGGCUCCAUCCAACCUCUGACCGUCUCGCGGGGGCCGCAGUUCGUCCCCGCGGCUACGGCGGCUUGCUCCCGACCCUGCAGGCGGCUGG\
) } def
/len { sequence length } bind def

/coor [
[91.08339691 103.30490112]
[76.10954285 102.41963196]
[61.13569260 101.53435516]
[46.16183853 100.64908600]
[31.18798447 99.76380920]
[16.21413231 98.87854004]
[1.98137271 105.78789520]
[-10.26707268 97.31293488]
[-25.24092674 96.42766571]
[-41.44952011 105.07260132]
[-55.74467468 94.96388245]
[-70.73526001 94.43252563]
[-85.72584534 93.90116119]
[-100.71643066 93.36980438]
[-109.49965668 96.21384430]
[-116.05360413 92.64469910]
[-131.02746582 91.75942993]
[-146.00131226 90.87415314]
[-154.04757690 103.33893585]
[-169.74488831 108.59748077]
[-186.92897034 102.37020111]
[-201.37893677 106.39489746]
[-215.82891846 110.41959381]
[-230.27890015 114.44429016]
[-237.82669067 128.32975769]
[-253.00578308 132.73098755]
[-266.81066895 125.03680420]
[-271.05117798 109.81202698]
[-263.21145630 96.08925629]
[-247.94270325 92.00996399]
[-234.30358887 99.99431610]
[-219.85360718 95.96961975]
[-205.40364075 91.94492340]
[-190.95365906 87.92022705]
[-189.89160156 72.95787811]
[-203.62820435 66.93244171]
[-217.36480713 60.90701294]
[-231.10140991 54.88158035]
[-244.83799744 48.85614777]
[-260.24609375 53.32494736]
[-273.26303101 43.94738007]
[-273.90335083 27.91710854]
[-261.67581177 17.53118896]
[-245.96038818 20.75680923]
[-238.81257629 35.11954880]
[-225.07597351 41.14498138]
[-211.33937073 47.17041016]
[-197.60276794 53.19584274]
[-183.86618042 59.22127533]
[-158.03477478 57.94906616]
[-145.11604309 75.90030670]
[-130.14218140 76.78557587]
[-115.16833496 77.67084503]
[-100.18506622 78.37921143]
[-85.19448090 78.91057587]
[-70.20389557 79.44194031]
[-55.21331024 79.97329712]
[-46.09549332 71.93339539]
[-33.54285812 72.31221008]
[-24.35565376 81.45381165]
[-9.38180065 82.33908844]
[3.77992821 75.36640930]
[17.09940338 83.90468597]
[32.07325745 84.78995514]
[47.04711151 85.67523193]
[62.02096558 86.56050110]
[76.99481964 87.44577789]
[91.96867371 88.33104706]
[105.91009521 82.79600525]
[116.19894409 71.88089752]
[126.48780060 60.96579361]
[136.77664185 50.05068588]
[147.06550598 39.13558197]
[157.35435486 28.22047424]
[167.64320374 17.30536842]
[177.93205261 6.39026260]
[188.22090149 -4.52484369]
[198.50975037 -15.43994999]
[195.49873352 -30.66208458]
[202.04064941 -44.73272324]
[215.62002563 -52.24141693]
[231.01528931 -50.30092239]
[242.30665588 -39.65739822]
[245.15235901 -24.40349579]
[238.45819092 -10.40465260]
[224.79817200 -3.04370928]
[209.42486572 -5.15109921]
[199.13601685 5.76400709]
[188.84715271 16.67911339]
[178.55830383 27.59421921]
[168.26945496 38.50932693]
[157.98060608 49.42443085]
[147.69175720 60.33953857]
[137.40290833 71.25464630]
[127.11405182 82.16975403]
[116.82520294 93.08485413]
[117.09088135 100.58014679]
[130.33894348 107.61499786]
[117.62224579 115.57073212]
[117.88792419 123.06602478]
[128.92378235 133.22525024]
[139.95964050 143.38447571]
[150.99549866 153.54370117]
[166.38894653 157.19778442]
[170.51237488 171.51025391]
[181.54823303 181.66947937]
[192.58409119 191.82868958]
[203.61994934 201.98791504]
[214.65580750 212.14714050]
[225.69166565 222.30636597]
[240.32612610 217.64498901]
[255.32717896 220.94102478]
[266.65963745 231.30784607]
[271.27511597 245.95684814]
[267.93206787 260.94747925]
[257.52978516 272.24740601]
[242.86639404 276.81692505]
[227.88629150 273.42694092]
[216.61904907 262.98925781]
[212.09548950 248.31163025]
[215.53244019 233.34222412]
[204.49658203 223.18299866]
[193.46072388 213.02377319]
[182.42486572 202.86454773]
[171.38900757 192.70533752]
[160.35314941 182.54611206]
[145.74906921 179.61868286]
[140.83627319 164.57955933]
[129.80041504 154.42033386]
[118.76455688 144.26110840]
[107.72869873 134.10188293]
[93.27669525 125.61322021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[8 61]
[9 60]
[11 57]
[12 56]
[13 55]
[14 54]
[16 53]
[17 52]
[18 51]
[21 34]
[22 33]
[23 32]
[24 31]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[69 96]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[100 131]
[101 130]
[102 129]
[103 128]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
