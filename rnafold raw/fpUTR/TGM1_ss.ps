%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAAGUCACUUACCAGGUCUGUCCCUGCGGCAUCCAGUCUGUGGGUCCUGUCCCAUCCAUCCUGACCUGUUCCAUCUCAGCCCCAGGACUCAGUACUGCGGUUGCCAACACUGCUGCCAGGC\
) } def
/len { sequence length } bind def

/coor [
[88.23620605 180.79988098]
[93.44158173 194.86770630]
[91.85395050 209.78346252]
[83.80398560 222.44039917]
[70.96837616 230.20228577]
[56.02056122 231.45246887]
[42.07394409 225.93052673]
[32.03337860 214.78659058]
[27.99015236 200.34179688]
[30.78640747 185.60473633]
[39.83972931 173.64491272]
[53.26411438 166.95344543]
[62.11307907 154.84164429]
[70.96204376 142.72982788]
[79.81101227 130.61802673]
[72.83768463 127.85709381]
[59.26528168 134.24378967]
[45.69287491 140.63047791]
[32.12046814 147.01716614]
[27.00344658 161.97013855]
[12.77524185 168.85009766]
[-2.12280297 163.57527161]
[-8.85194206 149.27511597]
[-3.41989660 134.43367004]
[10.95059681 127.85610199]
[25.73377991 133.44476318]
[39.30618668 127.05806732]
[52.87858963 120.67137909]
[66.45099640 114.28469086]
[74.58006287 82.17352295]
[101.40667725 74.40684509]
[106.57632446 60.32584000]
[111.74597168 46.24483109]
[116.91561127 32.16382599]
[121.90790558 18.01896667]
[126.72206116 3.81249237]
[131.35731506 -10.45335484]
[135.81294250 -24.77632332]
[140.26855469 -39.09929276]
[144.72418213 -53.42226028]
[148.99948120 -67.80008698]
[153.09375000 -82.23049927]
[157.18803406 -96.66091919]
[154.74847412 -111.46120453]
[146.23944092 -123.81419373]
[137.73040771 -136.16719055]
[129.22137451 -148.52017212]
[113.63526154 -151.13716125]
[104.53286743 -164.05699158]
[107.31449127 -179.61456299]
[120.32984161 -188.57984924]
[135.85713196 -185.63389587]
[144.68431091 -172.52449036]
[141.57435608 -157.02920532]
[150.08338928 -144.67622375]
[158.59242249 -132.32322693]
[167.10147095 -119.97023773]
[174.59613037 -119.68756104]
[175.16174316 -134.67689514]
[190.15106201 -134.11105347]
[189.58547974 -119.12220764]
[197.08015442 -118.83953094]
[206.49551392 -130.51646423]
[215.91088867 -142.19340515]
[225.32626343 -153.87033081]
[234.74162292 -165.54727173]
[232.53407288 -182.84669495]
[243.26620483 -196.16392517]
[259.96960449 -197.62452698]
[269.08856201 -209.53437805]
[278.20751953 -221.44422913]
[273.65594482 -236.27874756]
[278.72497559 -250.94450378]
[291.46548462 -259.80221558]
[306.97845459 -259.44595337]
[319.29888916 -250.01263428]
[323.68927002 -235.12962341]
[318.46142578 -220.51971436]
[305.62557983 -211.80072021]
[290.11737061 -212.32527161]
[280.99844360 -200.41542053]
[271.87948608 -188.50556946]
[275.34768677 -176.02853394]
[270.89712524 -163.65950012]
[259.95410156 -156.02911377]
[246.41856384 -156.13189697]
[237.00318909 -144.45497131]
[227.58782959 -132.77803040]
[218.17245483 -121.10109711]
[208.75708008 -109.42416382]
[197.71365356 -95.41439819]
[183.68402100 -90.04638672]
[171.61845398 -92.56663513]
[167.52416992 -78.13622284]
[163.42988586 -63.70580673]
[164.64451599 -56.32983398]
[159.04714966 -48.96663666]
[154.59152222 -34.64366913]
[150.13591003 -20.32069969]
[145.68028259 -5.99773169]
[146.70916748 1.40643740]
[140.92852783 8.62664700]
[136.11437988 22.83312035]
[136.95686340 30.26080704]
[130.99661255 37.33346939]
[125.82697296 51.41447830]
[120.65733337 65.49548340]
[115.48768616 79.57649231]
[124.31089020 86.51977539]
[129.84161377 97.28937531]
[130.44760132 110.26318359]
[125.30847168 123.14685059]
[114.67762756 133.37896729]
[120.19949341 147.32560730]
[125.72136688 161.27226257]
[138.90235901 171.02896118]
[136.77473450 187.28950500]
[121.52719116 193.32643127]
[108.84510040 182.92947388]
[111.77471924 166.79412842]
[106.25284576 152.84747314]
[100.73097992 138.90083313]
[93.75765991 136.13989258]
[91.91717529 151.02655029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 29]
[17 28]
[18 27]
[19 26]
[31 108]
[32 107]
[33 106]
[34 105]
[35 103]
[36 102]
[37 100]
[38 99]
[39 98]
[40 97]
[41 95]
[42 94]
[43 93]
[44 57]
[45 56]
[46 55]
[47 54]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[69 82]
[70 81]
[71 80]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
