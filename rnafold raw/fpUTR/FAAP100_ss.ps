%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGUAAAGCGCUCCGAGGCGGAGCCGCCGCCGCGCGGCCGGGGCUUCUCACUCUGACGGGCCCGCGCGCACG\
) } def
/len { sequence length } bind def

/coor [
[123.19814301 190.32534790]
[121.29287720 175.44685364]
[119.07223511 160.61213684]
[116.53722382 145.82789612]
[114.00221252 131.04365540]
[104.70015717 132.87599182]
[95.49269867 132.04975891]
[87.10594940 128.76203918]
[80.16460419 123.39884186]
[75.14559937 116.49465179]
[72.34605408 108.68148804]
[57.35956955 109.31810760]
[42.37308502 109.95472717]
[27.38660240 110.59134674]
[12.40011787 111.22795868]
[-2.58636665 111.86457825]
[-18.15461349 118.57770538]
[-28.91510582 105.47624969]
[-19.30445862 91.50943756]
[-3.22298479 96.87809753]
[11.76350021 96.24147797]
[26.74998474 95.60485840]
[41.73646927 94.96823883]
[56.72295380 94.33161926]
[71.70943451 93.69500732]
[75.98595428 83.76934052]
[83.60134125 76.10035706]
[78.60424805 61.95719528]
[73.60714722 47.81403351]
[68.61005402 33.67087173]
[63.61295700 19.52770996]
[52.63535309 6.60762501]
[62.01161194 -7.51760387]
[78.18042755 -2.41802454]
[77.75611877 14.53061199]
[82.75321198 28.67377472]
[87.75031281 42.81693649]
[92.74740601 56.96009827]
[97.74450684 71.10325623]
[114.31577301 72.87054443]
[128.05804443 83.86776733]
[134.02587891 101.41767120]
[148.68920898 98.25748444]
[163.35253906 95.09729004]
[178.01586914 91.93710327]
[192.67919922 88.77691650]
[207.34252930 85.61672211]
[219.20286560 75.14567566]
[233.27456665 80.02793884]
[247.93789673 76.86775208]
[262.60122681 73.70756531]
[276.81100464 64.45995331]
[289.63088989 75.55442810]
[282.51889038 90.94454956]
[265.76141357 88.37089539]
[251.09808350 91.53108215]
[236.43475342 94.69126892]
[225.62322998 104.93627930]
[210.50271606 100.28005219]
[195.83938599 103.44023895]
[181.17605591 106.60043335]
[166.51272583 109.76062012]
[151.84939575 112.92080688]
[137.18606567 116.08100128]
[128.78645325 128.50863647]
[131.32145691 143.29287720]
[133.85647583 158.07711792]
[138.51664734 166.29139709]
[136.17138672 173.54158020]
[138.07664490 188.42008972]
[148.43875122 201.13067627]
[142.35998535 216.36157227]
[126.09366608 218.44456482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 67]
[4 66]
[5 65]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[49 57]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
