%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUCUCCGCCCUCCCCUUCAGAACCGCGCCCCACAGCUCGGCGCAGGUCCCGCCCCUUUCCAUCUACGGGGCGGCAGGAGGCCCGAAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[85.10454559 330.06930542]
[72.78982544 321.11010742]
[65.18942261 307.91336060]
[63.62017059 292.76553345]
[68.35394287 278.29101562]
[78.57057953 266.99765015]
[92.50000000 260.84207153]
[92.50000000 245.84207153]
[84.76270294 233.11479187]
[92.50000000 219.31462097]
[84.76270294 206.58735657]
[92.50000000 192.78718567]
[92.50000000 177.78718567]
[92.50000000 162.78718567]
[92.50000000 147.78718567]
[92.50000000 132.78718567]
[85.35569000 130.27859497]
[78.95358276 126.23542786]
[73.61815643 120.86258698]
[69.61981201 114.43238068]
[67.16120911 107.27071381]
[66.36695099 99.74055481]
[67.27728271 92.22354126]
[69.84607697 85.10065460]
[73.94313812 78.73290253]
[64.72994995 66.89579010]
[55.51676178 55.05868530]
[46.10911560 43.37552643]
[36.50958633 31.84951019]
[26.91005898 20.32349396]
[17.31053162 8.79747677]
[7.71100283 -2.72853971]
[-7.58633518 -0.72978896]
[-21.52610588 -7.33935261]
[-29.66017914 -20.44814301]
[-29.39300346 -35.87319183]
[-20.80983162 -48.69242477]
[-6.64952278 -54.81526947]
[8.56941891 -52.28794861]
[19.99068451 -41.91691971]
[23.96979141 -27.01154137]
[19.23701859 -12.32806778]
[28.83654785 -0.80205113]
[38.43607712 10.72396564]
[48.03560257 22.24998283]
[57.63513184 33.77599716]
[64.46968079 36.96369553]
[67.35386658 45.84549713]
[76.56706238 57.68260193]
[85.78025055 69.51971436]
[107.17413330 67.13997650]
[125.62947845 78.21974945]
[138.93782043 71.29963684]
[152.24615479 64.37951660]
[165.55450439 57.45940018]
[178.86285400 50.53928375]
[192.17118835 43.61916351]
[205.47953796 36.69904709]
[205.47415161 21.39353943]
[212.59248352 7.84407520]
[225.19877625 -0.83577883]
[240.39620972 -2.65145540]
[254.69252014 2.81427455]
[264.80252075 14.30542660]
[268.40298462 29.18141747]
[264.66659546 44.02385330]
[254.45191956 55.42205429]
[240.10621643 60.75679016]
[224.92602539 58.80218506]
[212.39964294 50.00738907]
[199.09130859 56.92750549]
[185.78295898 63.84762573]
[172.47462463 70.76773834]
[159.16627502 77.68785858]
[145.85794067 84.60797882]
[132.54959106 91.52809143]
[132.33450317 109.25899506]
[123.13203430 124.41635895]
[107.50000000 132.78718567]
[107.50000000 147.78718567]
[107.50000000 162.78718567]
[107.50000000 177.78718567]
[107.50000000 192.78718567]
[115.23729706 206.58735657]
[107.50000000 219.31462097]
[115.23729706 233.11479187]
[107.50000000 245.84207153]
[107.50000000 260.84207153]
[121.42942047 266.99765015]
[131.64605713 278.29101562]
[136.37983704 292.76553345]
[134.81057739 307.91336060]
[127.21017456 321.11010742]
[114.89545441 330.06930542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 88]
[8 87]
[10 85]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[25 50]
[26 49]
[27 48]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
