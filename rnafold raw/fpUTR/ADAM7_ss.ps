%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUGCCCACCUAUCUGUGAGGUGCUUCAUCCCUGCAGUGGAAGUGAGGAGGAAGAAAGGUGAACUCCUUUUCUCAAGCACUUCUGCUCUCCUCUACCAGAAUCACUCAGA\
) } def
/len { sequence length } bind def

/coor [
[-100.74056244 322.30331421]
[-109.42015839 335.38113403]
[-121.68750000 345.14181519]
[-136.34487915 350.64758301]
[-151.96594238 351.37536621]
[-167.03442383 347.26641846]
[-180.09138489 338.73095703]
[-191.67013550 348.26681519]
[-203.24888611 357.80264282]
[-214.69514465 367.49713135]
[-226.00674438 377.34841919]
[-237.31834412 387.19970703]
[-238.15614319 402.98178101]
[-249.96385193 413.48669434]
[-265.73617554 412.48208618]
[-276.11569214 400.56396484]
[-274.94436646 384.80316162]
[-262.91717529 374.55023193]
[-247.16963196 375.88809204]
[-235.85803223 366.03683472]
[-224.54643250 356.18554688]
[-221.52745056 349.32495117]
[-212.78474426 346.22390747]
[-201.20599365 336.68804932]
[-189.62724304 327.15219116]
[-195.19004822 313.95397949]
[-196.79096985 299.70504761]
[-194.29003906 285.56997681]
[-187.88296509 272.70675659]
[-178.08576965 262.17166138]
[-165.69331360 254.83274841]
[-151.71475220 251.29811096]
[-137.29139709 251.86572266]
[-123.60356140 256.49816895]
[-111.77387238 264.82507324]
[-99.93676758 255.61189270]
[-88.09966278 246.39869690]
[-84.70733643 239.71484375]
[-75.80706787 237.10011292]
[-63.72059250 228.21658325]
[-51.63411713 219.33305359]
[-39.54764175 210.44952393]
[-27.46116447 201.56599426]
[-26.10320473 182.25291443]
[-10.88501453 169.80586243]
[8.90755939 172.38262939]
[20.21915817 162.53135681]
[31.39394951 152.52514648]
[42.42980576 142.36592102]
[53.46566772 132.20671082]
[64.50152588 122.04747772]
[75.53738403 111.88825989]
[86.57324219 101.72903442]
[79.93220520 60.06408691]
[86.70520782 46.68027115]
[86.03280640 30.87335968]
[98.68323517 23.01104736]
[105.45623779 9.62723351]
[112.22923279 -3.75657964]
[119.00223541 -17.14039421]
[125.77523804 -30.52420616]
[132.54823303 -43.90802002]
[127.38550568 -58.84528351]
[134.37217712 -73.02138519]
[149.36318970 -78.02590179]
[163.46463013 -70.88973999]
[168.31037903 -55.84665298]
[161.02552795 -41.82144547]
[145.93205261 -37.13502121]
[139.15904236 -23.75120735]
[132.38604736 -10.36739254]
[125.61305237 3.01642060]
[118.84004974 16.40023422]
[112.06704712 29.78404808]
[113.22389984 44.63365936]
[100.08901978 53.45327377]
[93.31602478 66.83708954]
[97.41812897 73.11583710]
[109.72446442 91.95207977]
[124.70169067 91.12576294]
[139.67890930 90.29944611]
[154.65612793 89.47312927]
[168.08152771 80.05554962]
[182.83392334 87.21788025]
[183.73731995 103.59212494]
[169.86238098 112.33386993]
[155.48245239 104.45035553]
[140.50523376 105.27667236]
[125.52800751 106.10298920]
[110.55078125 106.92930603]
[96.73246765 112.76489258]
[85.69660950 122.92411804]
[74.66075134 133.08334351]
[63.62488937 143.24256897]
[52.58903122 153.40179443]
[41.55317307 163.56100464]
[37.28067017 171.79492188]
[30.07043839 173.84295654]
[18.75884056 183.69422913]
[20.73410988 194.42388916]
[18.02354813 204.90757751]
[11.19869232 213.20922852]
[1.58420777 217.82571411]
[-8.99880219 217.95883179]
[-18.57763481 213.65246582]
[-30.66411209 222.53599548]
[-42.75058746 231.41952515]
[-54.83706665 240.30305481]
[-66.92353821 249.18658447]
[-78.88646698 258.23580933]
[-90.72357941 267.44900513]
[-102.56068420 276.66220093]
[-97.12367249 291.44830322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 25]
[8 24]
[9 23]
[10 21]
[11 20]
[12 19]
[35 112]
[36 111]
[37 110]
[39 109]
[40 108]
[41 107]
[42 106]
[43 105]
[46 99]
[47 98]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[53 91]
[54 77]
[55 76]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
