%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCCGCCCGGCUUGGAAGGUGGGGCUUCGCCCGGGGGCGGGCCUUCGCCGGGGGUAGGACUCCGGCCUUGGUGGCGGGUGGCUGGCGGUUCCGUUAGGUCUGAGGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[206.30158997 271.09042358]
[204.64224243 261.69927979]
[207.61389160 252.49133301]
[199.06677246 240.16465759]
[190.18324280 228.07818604]
[180.97004700 216.24107361]
[171.75686646 204.40397644]
[162.54367065 192.56686401]
[153.33047485 180.72975159]
[144.11729431 168.89265442]
[134.90409851 157.05554199]
[125.69091034 145.21842957]
[111.76783752 139.92716980]
[109.39741516 124.28455353]
[96.16690826 125.75574493]
[83.93818665 120.49559021]
[75.90727997 109.87884521]
[74.17307281 96.68023682]
[79.18881989 84.34925842]
[70.30529022 72.26277924]
[61.42176437 60.17630386]
[52.53823471 48.08982849]
[43.65470886 36.00335312]
[29.24731255 29.46595764]
[27.94421959 14.62846279]
[19.06068993 2.54198670]
[10.17716217 -9.54448986]
[-4.23023319 -16.08188438]
[-5.53332567 -30.91937828]
[-14.41685486 -43.00585556]
[-23.30038261 -55.09233093]
[-32.34960175 -67.05525970]
[-41.56279373 -78.89236450]
[-50.77598190 -90.72947693]
[-59.98917389 -102.56658173]
[-73.54022980 -102.69981384]
[-84.35631561 -110.53577423]
[-88.57978821 -123.00051880]
[-84.86659241 -135.42282104]
[-93.75012207 -147.50929260]
[-102.63365173 -159.59577942]
[-111.51718140 -171.68225098]
[-120.40071106 -183.76872253]
[-135.62779236 -189.85708618]
[-137.70051575 -206.12472534]
[-124.48665619 -215.83688354]
[-109.57949066 -209.00251770]
[-108.31423187 -192.65225220]
[-99.43070221 -180.56578064]
[-90.54717255 -168.47930908]
[-81.66365051 -156.39282227]
[-72.78012085 -144.30635071]
[-56.11973953 -142.52742004]
[-45.64189529 -129.02494812]
[-48.15206528 -111.77976990]
[-38.93887711 -99.94266510]
[-29.72568512 -88.10556030]
[-20.51249504 -76.26844788]
[-13.82863331 -72.87612152]
[-11.21390724 -63.97586060]
[-2.33037806 -51.88938522]
[6.55315065 -39.80290604]
[20.32513618 -34.13001633]
[22.26363754 -18.42801857]
[31.14716721 -6.34154224]
[40.03069687 5.74493456]
[53.80268097 11.41782379]
[55.74118423 27.11982346]
[64.62471008 39.20629883]
[73.50823975 51.29277802]
[82.39176941 63.37925339]
[91.27529907 75.46572876]
[107.46500397 75.05356598]
[120.76717377 84.29091644]
[126.03640747 99.60468292]
[121.23451996 115.07135773]
[135.81657410 121.20928955]
[137.52801514 136.00524902]
[146.74121094 147.84234619]
[155.95439148 159.67945862]
[165.16758728 171.51657104]
[174.38078308 183.35366821]
[183.59396362 195.19078064]
[192.80715942 207.02789307]
[202.02035522 218.86499023]
[208.19586182 221.79850769]
[211.38240051 226.71481323]
[211.39343262 231.61753845]
[219.94055176 243.94421387]
[239.83815002 251.64567566]
[241.20439148 272.16174316]
[250.74024963 283.74047852]
[260.27609253 295.31924438]
[269.81195068 306.89797974]
[279.34780884 318.47674561]
[294.09344482 324.21054077]
[296.21194458 338.95370483]
[305.74780273 350.53247070]
[315.28366089 362.11120605]
[330.82299805 367.35150146]
[333.78872681 383.48025513]
[321.12994385 393.90557861]
[305.86892700 387.90280151]
[303.70489502 371.64706421]
[294.16903687 360.06832886]
[284.63317871 348.48956299]
[270.56961060 343.58395386]
[267.76907349 328.01260376]
[258.23321533 316.43383789]
[248.69734192 304.85510254]
[239.16149902 293.27633667]
[229.62564087 281.69760132]
[220.52540588 282.29321289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 85]
[6 84]
[7 83]
[8 82]
[9 81]
[10 80]
[11 79]
[12 78]
[14 76]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[25 66]
[26 65]
[27 64]
[29 62]
[30 61]
[31 60]
[32 58]
[33 57]
[34 56]
[35 55]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[91 112]
[92 111]
[93 110]
[94 109]
[95 108]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
