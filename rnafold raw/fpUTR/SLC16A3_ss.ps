%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGGGGAAACGGAAGUUCAGGGAGGGCGAGGCCGUGCCCCACAUCCAGGCAGCGCAGGCCGCGGGCCGCUCCCCUAGCCAGGAAGAGCCGCCGUCCGCACCGGGACCGGAGAGGAAGCGGAGGUCUGAAGGGGGACAGGUGAGGCGGAACCAACCCUCCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[112.76822662 134.94538879]
[99.31652069 139.05525208]
[84.62152100 137.91761780]
[79.90583038 152.15707397]
[75.19013977 166.39653015]
[82.50861359 180.40423584]
[77.69896698 195.45889282]
[63.61468124 202.62886047]
[48.61171341 197.66030884]
[41.59105301 183.50100708]
[46.71793747 168.55140686]
[60.95067978 161.68084717]
[65.66636658 147.44137573]
[70.38205719 133.20191956]
[66.79614258 126.61472321]
[60.96769333 140.43605042]
[46.52780533 144.49679565]
[34.34977722 135.73919678]
[33.60371399 120.75776672]
[44.85140991 110.83358765]
[59.62429810 113.44033051]
[56.03837585 106.85313416]
[41.51950073 103.08453369]
[27.00062943 99.31593323]
[12.48175716 95.54733276]
[-2.03711510 91.77873230]
[-16.59079170 88.14686584]
[-31.17798615 84.65204620]
[-45.76517868 81.15722656]
[-61.48065948 91.67725372]
[-79.59525299 87.48517609]
[-88.77165222 71.68096924]
[-103.47998047 68.73731995]
[-118.18830872 65.79367065]
[-132.89663696 62.85001755]
[-147.63200378 60.04484177]
[-162.39309692 57.37838745]
[-177.15420532 54.71193314]
[-191.91529846 52.04547882]
[-209.07087708 58.68157959]
[-222.03373718 46.87943268]
[-236.84239197 44.49111938]
[-248.55401611 54.85315704]
[-264.18750000 55.21116638]
[-276.36117554 45.39610672]
[-279.32702637 30.04235268]
[-271.68466187 16.39947510]
[-257.04254150 10.90922356]
[-242.31428528 16.16392708]
[-234.45407104 29.68247604]
[-219.64543152 32.07078934]
[-209.63237000 25.23591423]
[-197.25224304 27.13393402]
[-189.24884033 37.28438187]
[-174.48774719 39.95083618]
[-159.72663879 42.61729050]
[-144.96554565 45.28374100]
[-137.79347229 43.37006760]
[-129.95298767 48.14168930]
[-115.24465942 51.08533859]
[-100.53633118 54.02898788]
[-85.82800293 56.97263718]
[-77.89187622 48.70664597]
[-66.83094788 45.28138733]
[-55.37696075 47.66455460]
[-46.41800690 55.37403107]
[-42.27035904 66.57003021]
[-27.68316650 70.06484985]
[-13.09597206 73.55966949]
[-5.82736969 72.05358887]
[1.73148417 77.25986481]
[16.25035667 81.02846527]
[30.76922989 84.79705811]
[45.28810120 88.56565857]
[59.80697250 92.33425903]
[74.13270569 71.35347748]
[96.86293793 63.85909271]
[118.07436371 71.25357056]
[129.58993530 88.80725098]
[144.47793579 86.97765350]
[159.36593628 85.14806366]
[174.25393677 83.31846619]
[189.14193726 81.48886871]
[204.02993774 79.65927124]
[218.91793823 77.82967377]
[222.98898315 69.44622040]
[230.31440735 63.60000229]
[239.49462891 61.46603012]
[248.75048828 63.50444412]
[263.19589233 59.46339798]
[277.64129639 55.42235184]
[292.00814819 51.11029434]
[306.29135132 46.52874374]
[320.57452393 41.94719696]
[334.81399536 37.23150635]
[349.00845337 32.38208771]
[363.20294189 27.53267288]
[377.39743042 22.68325615]
[387.95507812 10.89994240]
[402.50030518 14.10708141]
[405.55554199 -0.88000321]
[415.63565063 -12.25050259]
[429.95855713 -17.01715660]
[444.64599609 -13.99483109]
[455.77368164 -4.09329796]
[469.96817017 -8.94271469]
[484.16262817 -13.79213047]
[498.35711670 -18.64154816]
[512.55157471 -23.49096298]
[517.21636963 -38.17245483]
[529.48815918 -47.18668747]
[544.53674316 -47.24567413]
[556.59020996 -38.53636932]
[563.32659912 -52.83310318]
[578.22735596 -58.10037613]
[592.45202637 -51.21320724]
[597.56146240 -36.25763702]
[590.52429199 -22.10653305]
[575.51556396 -17.15549850]
[561.43963623 -24.34189415]
[557.23474121 -10.07806587]
[545.29577637 -0.91699296]
[530.07379150 -0.53820801]
[517.40100098 -9.29648685]
[503.20654297 -4.44707060]
[489.01205444 0.40234560]
[474.81756592 5.25176191]
[460.62310791 10.10117817]
[457.87994385 24.74155807]
[448.11199951 36.11885834]
[433.86657715 41.11231232]
[418.93637085 38.28636169]
[407.34970093 28.30155754]
[397.80734253 39.73801041]
[382.24682617 36.87773132]
[368.05236816 41.72714996]
[353.85787964 46.57656479]
[339.66339111 51.42598343]
[334.32748413 56.58629990]
[325.15606689 56.23038483]
[310.87289429 60.81193161]
[296.58969116 65.39347839]
[293.63211060 69.19296265]
[288.23904419 71.14968109]
[281.68234253 69.86776733]
[267.23693848 73.90881348]
[252.79153442 77.94985199]
[247.14918518 91.84819794]
[254.68988037 104.81500244]
[270.12814331 107.30368042]
[280.31570435 119.16740417]
[280.44226074 134.80447388]
[270.44808960 146.83154297]
[255.05213928 149.56980896]
[241.52386475 141.72633362]
[236.25094604 127.00457764]
[241.72306824 112.35569000]
[234.18237305 99.38889313]
[220.74754333 92.71767426]
[205.85954285 94.54727173]
[190.97154236 96.37686920]
[176.08354187 98.20646667]
[161.19554138 100.03606415]
[146.30754089 101.86566162]
[131.41954041 103.69525146]
[129.63177490 115.61080933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[27 69]
[28 68]
[29 67]
[32 62]
[33 61]
[34 60]
[35 59]
[36 57]
[37 56]
[38 55]
[39 54]
[41 51]
[42 50]
[79 165]
[80 164]
[81 163]
[82 162]
[83 161]
[84 160]
[85 159]
[89 147]
[90 146]
[91 145]
[92 142]
[93 141]
[94 140]
[95 138]
[96 137]
[97 136]
[98 135]
[100 133]
[105 128]
[106 127]
[107 126]
[108 125]
[109 124]
[113 120]
[148 158]
[149 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
