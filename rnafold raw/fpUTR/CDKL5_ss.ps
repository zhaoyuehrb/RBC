%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUCAUUUAAUACUUCAUGAUUAGAACAAAUAUGUGAAAGUUCCCACCAACCAGUGAGAAUUUCUUCCUUCAGACGGUUUUGGAUCUUACUGCACAGCUUUCUGAGAAGUUCUUUUGGUGCCAUGUUUUGUGGCUUGCAUCAAAAGAGGAGUUUGUCUUC\
) } def
/len { sequence length } bind def

/coor [
[31.99048615 273.01318359]
[26.61946487 287.01861572]
[21.24844551 301.02404785]
[15.87742424 315.02947998]
[10.50640392 329.03491211]
[19.07438660 341.97204590]
[18.36814308 357.47305298]
[8.65923882 369.57745361]
[-6.31905460 373.63088989]
[-20.80727768 368.07473755]
[-29.23441315 355.04541016]
[-28.36005592 339.55297852]
[-18.52041245 327.55462646]
[-3.49902844 323.66390991]
[1.87199211 309.65847778]
[7.24301291 295.65304565]
[12.61403370 281.64761353]
[17.98505402 267.64218140]
[10.19789219 259.54217529]
[5.99779177 249.06512451]
[6.03372717 237.72612000]
[10.33906174 227.18058777]
[18.32103920 218.98255920]
[28.84210396 214.35572815]
[40.38192368 214.01086426]
[46.55332184 200.33921814]
[52.72472000 186.66757202]
[52.60992050 179.24165344]
[59.14905548 172.79370117]
[65.58279419 159.24353027]
[72.01653290 145.69335938]
[78.45026398 132.14320374]
[84.88400269 118.59303284]
[76.42257690 130.97868347]
[61.84006882 134.49299622]
[48.66546249 127.32154846]
[43.70083618 113.16695404]
[49.50943756 99.33727264]
[63.09227371 92.97279358]
[77.43811035 97.36077881]
[63.95056915 90.79676056]
[50.46303177 84.23274231]
[36.97549438 77.66873169]
[23.48795509 71.10471344]
[10.00041676 64.54069519]
[-5.79412460 65.45886993]
[-13.85224533 52.93225861]
[-27.33978271 46.36824036]
[-40.82732010 39.80422592]
[-55.68247604 45.19865799]
[-69.96553040 38.43331528]
[-75.20260620 23.52195549]
[-68.28662872 9.31122494]
[-53.32073593 4.23209763]
[-39.18392181 11.29792976]
[-34.26330566 26.31668854]
[-20.77576637 32.88070297]
[-7.28822899 39.44472122]
[7.54159355 38.05704498]
[16.56443214 51.05315781]
[30.05197144 57.61717606]
[43.53950882 64.18119049]
[57.02704620 70.74520874]
[70.51458740 77.30921936]
[84.00212097 83.87323761]
[97.67376709 77.70184326]
[101.67228699 63.24459839]
[105.67079926 48.78735352]
[109.66931152 34.33011246]
[108.36648560 27.76920509]
[110.31262207 22.36551094]
[114.11054230 19.39843750]
[118.66323090 5.10602617]
[123.21592712 -9.18638420]
[127.76861572 -23.47879410]
[132.32130432 -37.77120590]
[129.13752747 -53.26875687]
[140.37272644 -63.04727936]
[144.92541504 -77.33969116]
[149.47810364 -91.63210297]
[154.03080750 -105.92451477]
[150.84701538 -121.42206573]
[162.08221436 -131.20059204]
[166.63491821 -145.49299622]
[163.45112610 -160.99055481]
[174.68632507 -170.76907349]
[167.20829773 -184.69223022]
[171.84561157 -199.80087280]
[185.84706116 -207.13128662]
[200.90582275 -202.33448792]
[208.08779907 -188.25631714]
[203.13204956 -173.24911499]
[188.97874451 -166.21638489]
[192.48815918 -151.74111938]
[180.92732239 -140.94030762]
[176.37463379 -126.64789581]
[179.88404846 -112.17263031]
[168.32321167 -101.37181854]
[163.77052307 -87.07940674]
[159.21783447 -72.78700256]
[154.66513062 -58.49458694]
[158.17456055 -44.01932526]
[146.61372375 -33.21851349]
[142.06103516 -18.92610359]
[137.50833130 -4.63369226]
[132.95564270 9.65871811]
[128.40295410 23.95112801]
[124.12655640 38.32862473]
[120.12804413 52.78586960]
[116.12952423 67.24311066]
[112.13101196 81.70035553]
[119.08216095 94.99251556]
[133.23699951 99.95644379]
[147.39183044 104.92037964]
[161.54667664 109.88430786]
[175.70150757 114.84823608]
[189.85633850 119.81217194]
[204.01118469 124.77610016]
[218.16601562 129.74003601]
[232.32084656 134.70396423]
[246.47569275 139.66789246]
[260.63052368 144.63182068]
[274.78536987 149.59574890]
[286.19927979 142.39089966]
[299.48419189 143.08079529]
[309.78405762 151.18818665]
[313.46389771 163.56579590]
[327.52044678 168.80160522]
[341.57696533 174.03739929]
[357.64910889 170.77877808]
[368.30297852 183.24581909]
[362.57879639 198.61351013]
[346.36511230 201.07287598]
[336.34118652 188.09394836]
[322.28463745 182.85813904]
[308.22808838 177.62232971]
[293.27163696 185.26544189]
[277.08892822 179.63772583]
[269.82144165 163.75059509]
[255.66659546 158.78665161]
[241.51176453 153.82272339]
[227.35691833 148.85879517]
[213.20208740 143.89486694]
[199.04724121 138.93093872]
[184.89241028 133.96701050]
[170.73757935 129.00306702]
[156.58273315 124.03914642]
[142.42790222 119.07521057]
[128.27307129 114.11128235]
[114.11823273 109.14735413]
[111.73786926 115.66360474]
[106.39035797 121.39050293]
[98.43417358 125.02677155]
[92.00043488 138.57693481]
[85.56669617 152.12710571]
[79.13295746 165.67727661]
[72.69922638 179.22743225]
[66.39636230 192.83897400]
[60.22496796 206.51062012]
[54.05356979 220.18226624]
[64.24064636 236.32554626]
[62.70962524 255.20317078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 14]
[25 160]
[26 159]
[27 158]
[29 157]
[30 156]
[31 155]
[32 154]
[33 153]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[47 58]
[48 57]
[49 56]
[66 111]
[67 110]
[68 109]
[69 108]
[72 107]
[73 106]
[74 105]
[75 104]
[76 103]
[78 101]
[79 100]
[80 99]
[81 98]
[83 96]
[84 95]
[86 93]
[112 150]
[113 149]
[114 148]
[115 147]
[116 146]
[117 145]
[118 144]
[119 143]
[120 142]
[121 141]
[122 140]
[123 139]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
