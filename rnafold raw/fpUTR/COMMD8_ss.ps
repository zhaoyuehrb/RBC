%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGUCACGUGGGCGAGUCGUAGCUUUAGACAAGCGGCCAGCCUUGACACGUGACCCAAGCCCCAGCUUCGCGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[105.99502563 145.63868713]
[99.22500610 130.45835876]
[102.77632904 114.05230713]
[89.48160553 109.72310638]
[86.20883942 96.12969971]
[76.02682495 85.11486053]
[65.84481812 74.10002899]
[55.66280365 63.08518982]
[45.48079300 52.07035065]
[35.29878235 41.05551147]
[25.11676979 30.04067612]
[14.93475819 19.02583694]
[3.91992068 8.84382629]
[-7.85983324 -0.44258261]
[-19.63958740 -9.72899151]
[-35.12736893 -8.06576538]
[-46.94142914 -17.65131187]
[-48.43161392 -32.42679596]
[-60.21136856 -41.71320343]
[-71.99111938 -50.99961472]
[-83.77087402 -60.28602219]
[-95.55062866 -69.57243347]
[-109.24216461 -62.82672119]
[-124.50473785 -62.69816208]
[-138.30796814 -69.21228790]
[-147.91119385 -81.07570648]
[-151.40769958 -95.93293762]
[-148.10325623 -110.83405304]
[-138.65394592 -122.82044220]
[-124.93595123 -129.51217651]
[-109.67298889 -129.58064270]
[-95.89552307 -123.01220703]
[-86.33908844 -111.11106110]
[-82.90111542 -96.24018097]
[-86.26422119 -81.35218811]
[-74.48446655 -72.06578064]
[-62.70471191 -62.77936935]
[-50.92495728 -53.49295807]
[-39.14520645 -44.20655060]
[-24.43009186 -46.20680618]
[-12.35145760 -36.95687485]
[-10.35317802 -21.50874519]
[1.42657602 -12.22233677]
[13.20633030 -2.93592739]
[16.24426270 -3.32268906]
[19.63166809 -2.36163330]
[22.78582954 0.09235059]
[25.08200836 3.94254780]
[25.94959641 8.84382629]
[36.13160706 19.85866356]
[46.31361771 30.87350273]
[56.49562836 41.88834000]
[66.67764282 52.90317535]
[76.85964966 63.91801453]
[87.04166412 74.93285370]
[97.22367096 85.94769287]
[110.51839447 90.27689362]
[113.79116058 103.87030029]
[127.47318268 101.23419189]
[140.54499817 105.73365784]
[149.56230164 116.06807709]
[152.20664978 129.41491699]
[147.88079834 142.20005798]
[157.62252808 153.60615540]
[167.36424255 165.01223755]
[182.21023560 170.48100281]
[184.59243774 185.18386841]
[194.33416748 196.58996582]
[210.15057373 199.27705383]
[217.78468323 213.38734436]
[211.38023376 228.09660339]
[195.85017395 232.12117004]
[183.10784912 222.37371826]
[182.92807007 206.33168030]
[173.18635559 194.92558289]
[159.03715515 190.27267456]
[155.95816040 174.75396729]
[146.21643066 163.34786987]
[136.47471619 151.94178772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 44]
[14 43]
[15 42]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[63 79]
[64 78]
[65 77]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
