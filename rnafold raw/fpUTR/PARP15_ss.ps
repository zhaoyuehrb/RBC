%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAAAAGAAGUUCGAGGCACAAGCCUGUUGGGUGGGGCGCAACUGCAGUCCCAGCGAGCUGAGG\
) } def
/len { sequence length } bind def

/coor [
[103.63742065 210.90380859]
[95.30443573 223.37623596]
[84.13173676 233.38476562]
[70.82119751 240.30065918]
[56.20900345 243.68943787]
[41.21311569 243.33824158]
[26.77559090 239.26910400]
[13.80341244 231.73765564]
[3.11150646 221.21705627]
[-4.62844801 208.36819458]
[-8.93021679 193.99827576]
[-9.52355862 179.01000977]
[-6.37119865 164.34500122]
[0.32882777 150.92449951]
[10.15561771 139.59162903]
[22.49183846 131.05830383]
[36.56587219 125.85982513]
[23.69429779 118.15771484]
[10.82272243 110.45559692]
[-2.04885316 102.75348663]
[-18.44552612 103.03833771]
[-26.65746117 88.84340668]
[-18.23692131 74.77120972]
[-1.84623814 75.29802704]
[5.65325975 89.88191223]
[18.52483559 97.58402252]
[31.39640999 105.28613281]
[44.26798630 112.98825073]
[59.26386261 113.33988953]
[72.48230743 106.24955750]
[85.70075226 99.15923309]
[93.22923279 87.37731934]
[107.20892334 87.62232208]
[115.71270752 74.28079987]
[130.58569336 75.08310699]
[143.80413818 67.99277496]
[157.02258301 60.90245056]
[170.24102783 53.81212234]
[183.45945740 46.72179413]
[196.67790222 39.63146973]
[209.72650146 32.23321533]
[222.59808350 24.53110123]
[230.09757996 9.94722176]
[246.48826599 9.42040539]
[254.90879822 23.49259567]
[246.69686890 37.68753052]
[230.30018616 37.40267944]
[217.42861938 45.10478973]
[213.16055298 51.46250153]
[203.76823425 52.84991074]
[190.54978943 59.94023895]
[177.33134460 67.03057098]
[164.11289978 74.12089539]
[150.89445496 81.21121979]
[137.67601013 88.30155182]
[130.11770630 101.13592529]
[114.29924774 100.84076691]
[106.77076721 112.62268066]
[92.79107666 112.37767792]
[79.57263184 119.46800232]
[66.35419464 126.55833435]
[80.16611481 132.40904236]
[92.08932495 141.51052856]
[101.37479401 153.29101562]
[107.43919373 167.01046753]
[109.90156555 181.80697632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 28]
[18 27]
[19 26]
[20 25]
[29 61]
[30 60]
[31 59]
[33 57]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
