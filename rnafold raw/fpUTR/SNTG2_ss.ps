%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGAGCCGGAGCCGGCAGAGGGGCGCGGGCGCGGACGCGGCGCCUGGCGGGGCCCUGGGAGGCUCGGACGGGGUCCUGGCGUUGAGCUCGGCCGGCCCGGAGCGCGGACCCAGCCGCAGGGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[207.83007812 373.59310913]
[216.73133850 357.89385986]
[210.08346558 344.44744873]
[203.27360535 331.08233643]
[196.30276489 317.80050659]
[182.05046082 313.62829590]
[174.79182434 300.25793457]
[179.26464844 285.33709717]
[172.29379272 272.05523682]
[165.32295227 258.77340698]
[158.35211182 245.49156189]
[152.39775085 240.98532104]
[151.37768555 231.80349731]
[144.72981262 218.35708618]
[138.08193970 204.91067505]
[131.43406677 191.46427917]
[124.78619385 178.01786804]
[118.13832092 164.57147217]
[105.56177521 156.59150696]
[106.38157654 140.79154968]
[99.73370361 127.34515381]
[93.08583069 113.89875031]
[80.84493256 105.22924042]
[65.95429993 103.42118835]
[51.06366730 101.61313629]
[36.17303467 99.80509186]
[21.28240013 97.99703979]
[6.39176702 96.18898773]
[-4.28642130 103.54090118]
[-16.70756149 101.66394806]
[-24.23773384 92.11608887]
[-39.08032990 89.94875336]
[-53.92292404 87.78141785]
[-68.95243073 94.34236908]
[-81.98670197 84.39050293]
[-79.61720276 68.16343689]
[-64.28147125 62.35419464]
[-51.75558853 72.93881989]
[-36.91299438 75.10615540]
[-22.07039833 77.27349091]
[-6.19678450 69.89269257]
[8.19981670 81.29835510]
[23.09045029 83.10640717]
[37.98108292 84.91445160]
[52.87171555 86.72250366]
[67.76235199 88.53055573]
[82.65298462 90.33860779]
[93.88064575 80.39176941]
[86.14334106 66.59159088]
[93.88064575 53.86432266]
[93.88064575 38.86432266]
[93.88064575 23.86432076]
[93.88064575 8.86432171]
[93.88064575 -6.13567829]
[93.88064575 -21.13567924]
[93.88064575 -36.13567734]
[93.88064575 -51.13567734]
[93.88064575 -66.13568115]
[93.88064575 -81.13568115]
[80.29876709 -88.19196320]
[71.56134796 -100.75843048]
[69.67618561 -115.94740295]
[75.07647705 -130.26855469]
[86.52127075 -140.43099976]
[101.38064575 -144.09947205]
[116.24001312 -140.43099976]
[127.68480682 -130.26855469]
[133.08509827 -115.94740295]
[131.19993591 -100.75843048]
[122.46252441 -88.19196320]
[108.88064575 -81.13568115]
[108.88064575 -66.13568115]
[108.88064575 -51.13567734]
[108.88064575 -36.13567734]
[108.88064575 -21.13567924]
[108.88064575 -6.13567829]
[108.88064575 8.86432171]
[108.88064575 23.86432076]
[108.88064575 38.86432266]
[108.88064575 53.86432266]
[116.61794281 66.59159088]
[108.88064575 80.39176941]
[112.91365051 84.93189240]
[115.20373535 90.06172943]
[115.76767731 95.19728851]
[114.80088043 99.81681824]
[112.64256287 103.51136017]
[109.72788239 106.02059937]
[106.53223419 107.25086975]
[113.18010712 120.69728088]
[119.82798004 134.14367676]
[132.88002014 143.08541870]
[131.58471680 157.92359924]
[138.23258972 171.36999512]
[144.88046265 184.81640625]
[151.52833557 198.26280212]
[158.17620850 211.70921326]
[164.82408142 225.15562439]
[171.63394165 238.52072144]
[178.60479736 251.80255127]
[185.57563782 265.08438110]
[192.54649353 278.36624146]
[207.36695862 283.16116333]
[214.24717712 296.73016357]
[209.58460999 310.82965088]
[216.55545044 324.11151123]
[223.38412476 330.33370972]
[223.52987671 337.79956055]
[230.17774963 351.24597168]
[242.78488159 351.72439575]
[253.90902710 357.52066040]
[261.43676758 367.46356201]
[263.96807861 379.60092163]
[261.07635498 391.58285522]
[253.37878418 401.11666870]
[259.36926270 414.86853027]
[265.35974121 428.62042236]
[271.35018921 442.37231445]
[277.34066772 456.12417603]
[290.84414673 465.42944336]
[289.26776123 481.75265503]
[274.23315430 488.30187988]
[261.20663452 478.33987427]
[263.58877563 462.11465454]
[257.59832764 448.36276245]
[251.60784912 434.61090088]
[245.61737061 420.85900879]
[239.62690735 407.10711670]
[222.29560852 404.16439819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 109]
[3 108]
[4 106]
[5 105]
[8 102]
[9 101]
[10 100]
[11 99]
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[20 91]
[21 90]
[22 89]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[31 40]
[32 39]
[33 38]
[48 82]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
