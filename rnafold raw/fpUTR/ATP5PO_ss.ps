%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAACCUAGCGGUUACGCCAACGCGCGCGUGCGCCCUUGCGCGUUUCUCUCUUCCCACUCGGGUUUGACCUACAGCCGCCCGGGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[177.26512146 123.13062286]
[162.69160461 119.57915497]
[148.11810303 116.02768707]
[133.54460144 112.47621918]
[118.97109222 108.92475891]
[104.39758301 105.37329102]
[106.01631165 111.72837830]
[105.03121948 118.75643158]
[101.28672791 125.62525940]
[94.86403656 131.47937012]
[86.08140564 135.50277710]
[73.00650024 142.85443115]
[59.93159103 150.20608521]
[52.04093170 164.58207703]
[35.64199829 164.66601562]
[27.60460854 150.37152100]
[36.19693756 136.40356445]
[52.57993698 137.13116455]
[65.65484619 129.77951050]
[78.72975159 122.42786407]
[80.00408173 115.03691864]
[65.22222137 112.48803711]
[67.77133942 97.70622253]
[82.55273438 100.25502777]
[83.82706451 92.86407471]
[73.96900940 81.55838013]
[64.11095428 70.25268555]
[54.25289536 58.94699097]
[44.39484024 47.64129639]
[34.53678513 36.33560181]
[24.67873192 25.02990532]
[9.23529625 26.53985023]
[-4.12915277 18.65498161]
[-10.27571106 4.40719509]
[-6.84090281 -10.72494698]
[4.85451937 -20.92282486]
[20.31342506 -22.26515007]
[33.59155273 -14.23576641]
[39.58318710 0.07786074]
[35.98442459 15.17185116]
[45.84248352 26.47754669]
[55.70053864 37.78324127]
[65.55859375 49.08893585]
[75.41664886 60.39463425]
[85.27470398 71.70032501]
[95.13275909 83.00601959]
[107.94905090 90.79978180]
[122.52255249 94.35124969]
[137.09605408 97.90271759]
[151.66957092 101.45417786]
[166.24307251 105.00564575]
[180.81657410 108.55711365]
[195.44859314 111.85924530]
[210.13485718 114.91108704]
[224.82112122 117.96292877]
[239.50738525 121.01477051]
[248.46844482 114.39405823]
[259.37789917 113.92989349]
[268.49014282 119.53296661]
[272.81533813 129.07316589]
[287.25909424 133.12013245]
[301.70285034 137.16708374]
[316.14660645 141.21403503]
[330.59036255 145.26098633]
[345.03411865 149.30793762]
[359.47787476 153.35488892]
[374.05139160 156.90635681]
[388.73764038 159.95819092]
[403.42391968 163.01002502]
[417.57345581 155.44891357]
[432.24945068 161.92926025]
[436.19372559 177.47988892]
[426.38058472 190.17170715]
[410.33782959 190.26861572]
[400.37207031 177.69628906]
[385.68582153 174.64445496]
[370.99954224 171.59260559]
[366.42794800 173.54158020]
[360.57119751 172.48466492]
[355.43093872 167.79864502]
[340.98718262 163.75169373]
[326.54342651 159.70474243]
[312.09967041 155.65779114]
[297.65588379 151.61083984]
[283.21212769 147.56388855]
[268.76837158 143.51693726]
[250.62770081 149.83644104]
[236.45553589 135.70103455]
[221.76927185 132.64918518]
[207.08302307 129.59735107]
[192.39675903 126.54550934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[5 48]
[6 47]
[11 20]
[12 19]
[13 18]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[53 91]
[54 90]
[55 89]
[56 88]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
