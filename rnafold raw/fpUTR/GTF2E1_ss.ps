%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCGCAAGGGGCGUGGUUCAUUUAAGCCGGUAGUUGAAGCGCUGGGGGCAGCUGUAGUGGGAGUGUUCCAGGAUUCGCCUUGUAUAUUUAAAGUUGGAGUUCGUUGCUAAAG\
) } def
/len { sequence length } bind def

/coor [
[106.72119904 125.57575226]
[100.74518585 139.33392334]
[94.76916504 153.09208679]
[96.36790466 168.83230591]
[84.20060730 177.42335510]
[86.59979248 193.64605713]
[73.58374786 203.62176514]
[58.54226685 197.08831787]
[56.94873047 180.76678467]
[70.44243622 171.44734192]
[68.41625214 156.69119263]
[81.01100159 147.11607361]
[86.98701477 133.35791016]
[92.96302795 119.59973145]
[84.99494171 106.89109039]
[70.00753784 106.27660370]
[55.02013016 105.66211700]
[40.91457748 112.82758331]
[28.51495361 104.57539368]
[13.52754498 103.96090698]
[-1.45986354 103.34642029]
[-16.44727135 102.73193359]
[-30.55282402 109.89740753]
[-42.95244598 101.64521790]
[-57.93985748 101.03073120]
[-72.92726135 100.41624451]
[-84.37973022 111.30736542]
[-100.17671967 110.82691193]
[-110.94614410 99.25994110]
[-110.29871368 83.46891785]
[-98.61852264 72.82238007]
[-82.83522797 73.63673401]
[-72.31277466 85.42883301]
[-57.32536697 86.04331970]
[-42.33795929 86.65780640]
[-29.30440712 79.44838715]
[-15.83278465 87.74452972]
[-0.84537613 88.35901642]
[14.14203167 88.97350311]
[29.12944031 89.58798981]
[42.16299438 82.37856293]
[55.63461685 90.67470551]
[70.62202454 91.28919220]
[85.60943604 91.90367889]
[100.29569244 88.85184479]
[113.79750061 82.31723022]
[127.29930878 75.78261566]
[136.35044861 62.80619049]
[151.17720032 64.22617340]
[164.67901611 57.69155502]
[178.18081665 51.15694046]
[191.59211731 44.43851852]
[204.91040039 37.53754425]
[218.22866821 30.63656807]
[231.54695129 23.73559380]
[240.24026489 10.51678181]
[255.10028076 11.53124332]
[268.41854858 4.63026810]
[281.73684692 -2.27070737]
[284.00457764 -18.96669388]
[295.62564087 -30.93773079]
[311.92083740 -33.64547729]
[326.49420166 -26.22606850]
[339.61901855 -33.48825455]
[352.74380493 -40.75044250]
[365.86862183 -48.01263046]
[378.99343872 -55.27481461]
[392.11825562 -62.53700256]
[396.47335815 -74.77177429]
[407.66586304 -80.52402496]
[419.37484741 -77.16424561]
[432.69311523 -84.06522369]
[446.01141357 -90.96619415]
[459.32968140 -97.86717224]
[463.87121582 -113.00487518]
[477.82595825 -120.42382812]
[492.91479492 -115.72249603]
[500.18579102 -101.69010162]
[495.32519531 -86.65181732]
[481.21670532 -79.52957916]
[466.23065186 -84.54889679]
[452.91238403 -77.64791870]
[439.59408569 -70.74694061]
[426.27581787 -63.84596634]
[417.71322632 -48.59440613]
[399.38043213 -49.41219330]
[386.25561523 -42.15000534]
[373.13082886 -34.88781738]
[360.00601196 -27.62563133]
[346.88119507 -20.36344528]
[333.75637817 -13.10125828]
[333.33798218 0.31779581]
[326.25741577 11.85217571]
[314.29022217 18.40327454]
[300.54092407 18.14863968]
[288.63781738 11.04757118]
[275.31951904 17.94854736]
[262.00125122 24.84952164]
[254.26055908 37.57472992]
[238.44792175 37.05387115]
[225.12965393 43.95484543]
[211.81137085 50.85582352]
[198.49308777 57.75679779]
[193.94033813 63.70864487]
[184.71543884 64.65875244]
[171.21362305 71.19336700]
[157.71182251 77.72798157]
[149.62643433 90.23699951]
[133.83392334 89.28442383]
[120.33211517 95.81903839]
[106.83030701 102.35365295]
[109.55973053 105.57862091]
[111.16551208 109.88479614]
[111.34762573 114.93416595]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[5 10]
[15 44]
[16 43]
[17 42]
[19 40]
[20 39]
[21 38]
[22 37]
[24 35]
[25 34]
[26 33]
[45 111]
[46 110]
[47 109]
[49 107]
[50 106]
[51 105]
[52 103]
[53 102]
[54 101]
[55 100]
[57 98]
[58 97]
[59 96]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
