%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGGCCCCGCCCCCUGGCCGCGUGGCUGCGCGUCCUGGCUGUUGCCGAUAAAGUUGUUUGACGCCGGCCCGGCGGCGGGUCACGUGAGCGGAAA\
) } def
/len { sequence length } bind def

/coor [
[143.49305725 341.53985596]
[141.09906006 326.73214722]
[138.70506287 311.92440796]
[136.07403564 297.15695190]
[133.20664978 282.43356323]
[130.33927917 267.71017456]
[127.23628235 253.03463745]
[116.86088562 242.34817505]
[121.33337402 227.17230225]
[117.99555969 212.54838562]
[114.65774536 197.92445374]
[111.31993103 183.30053711]
[107.98211670 168.67662048]
[104.64430237 154.05270386]
[94.26890564 143.36624146]
[98.74138641 128.19035339]
[95.40357208 113.56643677]
[86.03518677 103.18737793]
[89.97250366 89.77137756]
[86.63468933 75.14745331]
[83.29687500 60.52353668]
[79.95906830 45.89962006]
[76.62125397 31.27569962]
[73.04947662 16.70715714]
[69.24465942 2.19773507]
[65.43983459 -12.31168842]
[61.17192459 -26.69170570]
[56.44530106 -40.92754364]
[51.71867752 -55.16337967]
[40.02700043 -65.82242584]
[43.35966110 -80.33940125]
[38.63303757 -94.57524109]
[22.91367912 -102.04309845]
[17.47613907 -118.22161102]
[25.18560791 -133.07232666]
[20.00513077 -147.14935303]
[14.82465553 -161.22637939]
[9.77320671 -165.95285034]
[8.24720287 -171.67469788]
[9.79504108 -176.37478638]
[5.52712679 -190.75479126]
[1.25921309 -205.13481140]
[-11.00810623 -216.01805115]
[-7.45197821 -232.02699280]
[8.26935673 -236.69299316]
[19.98313713 -225.21609497]
[15.63923073 -209.40272522]
[19.90714455 -195.02270508]
[24.17505836 -180.64270020]
[28.90168190 -166.40686035]
[34.08215714 -152.32983398]
[39.26263428 -138.25280762]
[51.69733047 -134.48237610]
[59.76376343 -124.04707336]
[60.29545212 -110.67239380]
[52.86887360 -99.30186462]
[57.59549713 -85.06602478]
[68.94909668 -75.42522430]
[65.95451355 -59.89000320]
[70.68113708 -45.65416336]
[75.40776062 -31.41832924]
[79.36624908 -28.44899940]
[81.38822937 -22.88304138]
[79.94926453 -16.11650658]
[83.75408173 -1.60708380]
[87.55889893 12.90233898]
[92.39067078 18.68153000]
[91.24517059 27.93788528]
[94.58298492 42.56180573]
[97.92079926 57.18572235]
[101.25861359 71.80963898]
[104.59642792 86.43356323]
[113.96481323 96.81262207]
[110.02749634 110.22862244]
[113.36531067 124.85254669]
[123.97944641 136.58500671]
[119.26821899 150.71488953]
[122.60603333 165.33880615]
[125.94384766 179.96272278]
[129.28166199 194.58663940]
[132.61947632 209.21057129]
[135.95729065 223.83448792]
[146.57142639 235.56694031]
[141.86019897 249.69682312]
[146.90844727 257.53948975]
[145.06266785 264.84280396]
[147.93003845 279.56619263]
[150.79742432 294.28958130]
[155.59170532 302.29003906]
[153.51278687 309.53042603]
[155.90678406 324.33813477]
[158.30078125 339.14587402]
[171.26148987 348.18994141]
[173.94866943 363.76412964]
[164.76805115 376.62847900]
[149.16635132 379.15084839]
[136.39976501 369.83474731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 88]
[5 87]
[6 86]
[7 84]
[9 82]
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[16 75]
[17 74]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[24 66]
[25 65]
[26 64]
[27 61]
[28 60]
[29 59]
[31 57]
[32 56]
[35 52]
[36 51]
[37 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
