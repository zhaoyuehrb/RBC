%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGGCUGGCGGCCGGCGGGAGAGGCGGCCGGCCUGGACUGGCCCGAGAGGGAUCCCGGUUCCCAGAACAGACCUAGGAGGCGGCCUCGAGGGCGGACGGCAGGGAGGGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[97.28893280 236.89376831]
[84.75798798 246.52450562]
[69.09837341 244.39091492]
[59.60067368 231.75885010]
[61.89969635 216.12268066]
[74.63147736 206.75906372]
[76.65647888 191.89637756]
[78.68147278 177.03369141]
[80.70647430 162.17100525]
[82.73147583 147.30831909]
[84.75647736 132.44563293]
[72.81507874 123.36802673]
[59.03588867 129.29539490]
[45.25669479 135.22277832]
[31.47749901 141.15016174]
[17.69830513 147.07752991]
[8.07874870 159.63838196]
[-6.67014885 157.56008911]
[-12.28635120 172.33282471]
[-26.73753548 178.73117065]
[-41.45007324 172.95909119]
[-47.69527054 158.44107056]
[-41.76796722 143.79037476]
[-27.18472862 137.69902039]
[-12.59752655 143.78088379]
[-3.96355033 131.64401245]
[11.77092648 133.29833984]
[25.55012131 127.37096405]
[39.32931519 121.44358826]
[53.10850906 115.51620483]
[66.88770294 109.58882904]
[71.02593231 85.93851471]
[88.74877167 72.25543976]
[109.44821167 73.99061584]
[118.19912720 61.80778503]
[126.95005035 49.62495041]
[135.70097351 37.44211960]
[130.16429138 21.52716637]
[135.10827637 5.59127998]
[148.41435242 -4.19920397]
[164.76884460 -4.17822218]
[166.10923767 -19.94254684]
[179.65570068 -26.13469696]
[188.07350159 -38.55002975]
[196.49131775 -50.96536636]
[204.90911865 -63.38069916]
[202.13958740 -78.70935059]
[210.85328674 -91.18035126]
[225.48388672 -93.72621155]
[233.90168762 -106.14154816]
[242.31948853 -118.55688477]
[250.73730469 -130.97221375]
[250.88110352 -135.62145996]
[252.41757202 -139.53822327]
[254.91914368 -142.35926819]
[257.88195801 -143.90875244]
[260.79782104 -144.20660400]
[270.50860596 -155.63903809]
[280.21942139 -167.07145691]
[283.25637817 -182.59844971]
[297.39291382 -187.28967285]
[307.10369873 -198.72210693]
[316.81451416 -210.15454102]
[326.52529907 -221.58695984]
[329.56225586 -237.11395264]
[343.69879150 -241.80517578]
[353.40960693 -253.23760986]
[350.60870361 -268.62231445]
[358.39703369 -282.18237305]
[373.09722900 -287.51516724]
[387.76824951 -282.10272217]
[395.48294067 -268.50057983]
[392.59860229 -253.13130188]
[380.47717285 -243.25178528]
[364.84201050 -243.52680969]
[355.13122559 -232.09439087]
[352.78884888 -217.38511658]
[337.95773315 -211.87617493]
[328.24691772 -200.44374084]
[318.53613281 -189.01130676]
[308.82534790 -177.57888794]
[306.48297119 -162.86961365]
[291.65182495 -157.36067200]
[281.94104004 -145.92823792]
[272.23025513 -134.49580383]
[263.15264893 -122.55441284]
[254.73483276 -110.13907623]
[246.31703186 -97.72373962]
[237.89921570 -85.30840302]
[240.94950867 -70.77460480]
[232.58952332 -58.06377792]
[217.32444763 -54.96289444]
[208.90664673 -42.54756165]
[200.48884583 -30.13222504]
[192.07102966 -17.71689034]
[191.33273315 -2.84059429]
[177.18417358 4.23958349]
[182.88313293 16.39400673]
[181.78962708 29.88260078]
[174.08450317 41.13970947]
[161.71058655 47.13593674]
[147.88380432 46.19303513]
[139.13288879 58.37586975]
[130.38195801 70.55870056]
[121.63104248 82.74153900]
[128.31750488 93.59693909]
[129.60127258 106.88967896]
[124.69525146 119.95921326]
[114.10420990 129.95861816]
[99.61916351 134.47064209]
[97.59416199 149.33332825]
[95.56916046 164.19599915]
[93.54415894 179.05868530]
[91.51915741 193.92137146]
[89.49416351 208.78405762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 115]
[7 114]
[8 113]
[9 112]
[10 111]
[11 110]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[18 25]
[34 105]
[35 104]
[36 103]
[37 102]
[41 97]
[43 95]
[44 94]
[45 93]
[46 92]
[49 89]
[50 88]
[51 87]
[52 86]
[57 85]
[58 84]
[59 83]
[61 81]
[62 80]
[63 79]
[64 78]
[66 76]
[67 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
