%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCGCUACGCGGCGCGGGCCGGUUUCUACAGCGCGUGGCGCCCCCCGGCGGCAGCCGGGCUUCAAUGCCACGGCCUGACCGGAGUGUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[45.69782257 135.80650330]
[42.51612473 136.06872559]
[39.74975967 135.37139893]
[37.65325928 133.96160889]
[23.11225510 137.64389038]
[8.57125092 141.32617188]
[-5.96975279 145.00845337]
[-20.51075745 148.69073486]
[-34.61554718 153.79513550]
[-48.14541626 160.27143860]
[-54.69267273 166.93014526]
[-62.23139954 166.72990417]
[-75.96799469 172.75534058]
[-89.70459747 178.78076172]
[-103.44120026 184.80619812]
[-112.71207428 198.33331299]
[-129.03924561 196.79846191]
[-135.62669373 181.78054810]
[-125.69784546 168.72874451]
[-109.46662903 171.06959534]
[-95.73002625 165.04417419]
[-81.99343109 159.01873779]
[-68.25682831 152.99330139]
[-54.62173080 146.74157715]
[-41.09186172 140.26525879]
[-54.26272964 133.08694458]
[-58.79105759 118.78679657]
[-52.15277100 105.33565521]
[-38.04802704 100.23113251]
[-24.33874512 106.31847382]
[-18.66642761 120.20460510]
[-24.19303894 134.14973450]
[-9.65203476 130.46745300]
[4.88896894 126.78516388]
[19.42997360 123.10288239]
[33.97097778 119.42060089]
[48.15823746 114.55010986]
[61.89483643 108.52467346]
[75.63143921 102.49924469]
[89.36803436 96.47381592]
[103.00313568 90.22208405]
[116.53300476 83.74576569]
[130.06286621 77.26945496]
[133.17031860 66.58541870]
[141.54866028 59.60576630]
[152.17642212 58.52472687]
[161.39688110 63.46493149]
[175.32519531 57.89697266]
[189.25349426 52.32901382]
[203.18180847 46.76105499]
[217.01615906 40.96356964]
[230.75276184 34.93813705]
[244.48934937 28.91270638]
[248.91206360 23.56951332]
[254.54667664 21.70170403]
[259.33871460 22.97655678]
[273.44348145 17.87215805]
[287.54827881 12.76776123]
[301.65307617 7.66336346]
[315.67153931 2.32645607]
[329.59985352 -3.24150276]
[343.52816772 -8.80946159]
[349.52566528 -23.43154907]
[364.13796997 -29.45288277]
[378.69583130 -23.30111504]
[384.56231689 -8.62597942]
[378.25698853 5.86602736]
[363.52066040 11.57705402]
[349.09613037 5.11884928]
[335.16781616 10.68680763]
[321.23950195 16.25476646]
[316.09582520 21.76975822]
[306.75747681 21.76815414]
[292.65267944 26.87255287]
[278.54788208 31.97694969]
[264.44308472 37.08134842]
[250.51478577 42.64930725]
[236.77818298 48.67473602]
[223.04158020 54.70016861]
[218.08306885 60.38220978]
[208.74977112 60.68936539]
[194.82145691 66.25732422]
[180.89314270 71.82528687]
[166.96484375 77.39324188]
[156.38917542 93.43873596]
[136.53918457 90.79932404]
[123.00931549 97.27563477]
[109.47944641 103.75195312]
[104.01829529 109.91488647]
[95.39346313 110.21041107]
[81.65686798 116.23584747]
[67.92026520 122.26127625]
[54.18366623 128.28671265]
[51.91992569 131.89320374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[9 25]
[10 24]
[12 23]
[13 22]
[14 21]
[15 20]
[37 93]
[38 92]
[39 91]
[40 90]
[41 88]
[42 87]
[43 86]
[47 84]
[48 83]
[49 82]
[50 81]
[51 79]
[52 78]
[53 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
