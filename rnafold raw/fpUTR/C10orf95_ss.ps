%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGCUGGUAGCUCCUGGCCAGCUCAAGGUGUUUCCUUUUGCCUGGUAACCAGGAGGAGUGGCUGAGGCAGGGC\
) } def
/len { sequence length } bind def

/coor [
[67.96683502 227.47177124]
[64.51611328 242.33969116]
[54.94946671 254.23263550]
[41.16637802 260.78924561]
[25.90347672 260.70770264]
[12.19122982 254.00419617]
[2.75221133 242.00970459]
[-0.53945339 227.10575867]
[2.96979713 212.25154114]
[12.58319950 200.39636230]
[26.39200401 193.89407349]
[41.65446472 194.03572083]
[48.24241257 180.55986023]
[48.35293579 172.94999695]
[55.39121628 166.67176819]
[62.53042984 153.47966003]
[69.66963959 140.28755188]
[76.80885315 127.09544373]
[76.06160736 112.21959686]
[89.43451691 103.76525879]
[96.29956818 90.42842102]
[102.88751221 76.95256042]
[109.47546387 63.47669220]
[116.06340790 50.00082779]
[117.08316040 40.62459564]
[123.21221924 36.11273193]
[130.35142517 22.92062569]
[115.41156769 24.26252174]
[103.65937042 14.94127083]
[101.56447601 0.08827678]
[110.28014374 -12.11979866]
[125.00834656 -14.96233845]
[137.64111328 -6.87450647]
[141.22383118 7.69288158]
[151.38305664 -3.34297705]
[161.54226685 -14.37883568]
[171.70149231 -25.41469383]
[181.86071777 -36.45055389]
[182.72276306 -41.41068649]
[185.04464722 -45.30160522]
[188.23918152 -47.76781845]
[191.66337585 -48.71198654]
[194.71925354 -48.28766251]
[206.55635071 -57.50085068]
[218.39346313 -66.71404266]
[230.23057556 -75.92723083]
[242.06767273 -85.14042664]
[250.85324097 -99.64043427]
[267.21865845 -95.21221161]
[267.49389648 -78.26049805]
[251.28086853 -73.30331421]
[239.44375610 -64.09012604]
[227.60665894 -54.87693405]
[215.76954651 -45.66374207]
[203.93243408 -36.45055389]
[192.89657593 -26.29133034]
[182.73735046 -15.25547123]
[172.57812500 -4.21961212]
[162.41891479 6.81624651]
[152.25968933 17.85210419]
[143.54353333 30.05983543]
[136.40432739 43.25194168]
[129.53927612 56.58877563]
[122.95132446 70.06464386]
[116.36338043 83.54050446]
[109.77542877 97.01637268]
[109.30653381 105.31736755]
[102.62662506 110.90446472]
[102.86322021 126.72389984]
[90.00095367 134.23466492]
[82.86174774 147.42675781]
[75.72253418 160.61886597]
[68.58332062 173.81097412]
[61.71827698 187.14781189]
[55.13032913 200.62367249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 75]
[13 74]
[15 73]
[16 72]
[17 71]
[18 70]
[20 68]
[21 66]
[22 65]
[23 64]
[24 63]
[26 62]
[27 61]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
