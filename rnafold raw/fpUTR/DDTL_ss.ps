%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCUCCCUGGUCCGCGAGCCUUGGGUACCCCCAGCUUUUCUUCCGCCAGAGCUGUUUCCGUUCCUCUGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[70.63127136 177.11869812]
[55.76158142 177.29313660]
[47.24061203 189.63789368]
[52.51768875 204.23008728]
[48.17752457 219.12782288]
[35.88899994 228.60261536]
[20.37730598 229.01123047]
[7.60700321 220.19651794]
[2.48853421 205.54794312]
[6.99005508 190.69816589]
[19.38063812 181.35722351]
[34.89585114 181.11691284]
[43.41682434 168.77215576]
[38.30706787 154.80690002]
[42.44942474 140.33953857]
[54.45679092 130.97595215]
[69.85330200 130.47232056]
[78.37427521 118.12755585]
[86.89524078 105.78279877]
[88.21162415 91.86307526]
[100.76000214 85.69622803]
[109.28096771 73.35147095]
[104.29220581 58.77688980]
[108.78943634 44.22943878]
[120.84776306 35.22606659]
[135.71745300 35.05162430]
[144.23841858 22.70686722]
[152.75938416 10.36210918]
[143.98947144 -2.95730925]
[140.95350647 -18.57414818]
[144.07958984 -34.13427734]
[152.86909485 -47.30335236]
[165.97605896 -56.11701584]
[181.41313171 -59.27389145]
[196.85295105 -56.32765961]
[204.86993408 -69.00550842]
[212.88691711 -81.68336487]
[220.90391541 -94.36121368]
[228.92089844 -107.03906250]
[236.93788147 -119.71691895]
[244.95487976 -132.39477539]
[238.35044861 -146.33697510]
[240.35482788 -161.63357544]
[250.32844543 -173.40347290]
[265.08871460 -177.89096069]
[279.92575073 -173.66406250]
[290.10504150 -162.07159424]
[292.37844849 -146.81266785]
[286.02053833 -132.75633240]
[273.06008911 -124.38792419]
[257.63272095 -124.37778473]
[249.61573792 -111.69992828]
[241.59875488 -99.02207947]
[233.58175659 -86.34423065]
[225.56477356 -73.66637421]
[217.54779053 -60.98852539]
[209.53080750 -48.31067276]
[218.11766052 -37.03381348]
[222.30491638 -23.46092796]
[221.56054688 -9.24619198]
[215.95489502 3.87049842]
[206.15457153 14.27650452]
[193.34333801 20.68470001]
[179.07901001 22.29265976]
[165.10414124 18.88307953]
[156.58317566 31.22783852]
[148.06221008 43.57259750]
[153.17196655 57.53785324]
[149.02960205 72.00522614]
[137.02223206 81.36879730]
[121.62572479 81.87244415]
[113.10475922 94.21720123]
[111.78837585 108.13692474]
[99.23999786 114.30377197]
[90.71903229 126.64852905]
[82.19805908 138.99328613]
[87.18682098 153.56787109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[17 76]
[18 75]
[19 74]
[21 72]
[22 71]
[26 67]
[27 66]
[28 65]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
