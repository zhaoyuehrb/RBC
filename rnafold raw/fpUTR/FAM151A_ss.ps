%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGCAGACCAGGCCCGGUGGAGAAUUAGGUGCUGCUGGGAGCUCCUGCCUCCCACAGGAUUCCAGCUGCAGGGAGCCUCAGGGACUCUGGGCCGCACGGAGUUGGGGGCAUUCCCCAGAGAGCGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[168.14143372 268.25573730]
[157.46180725 278.78881836]
[143.74435425 284.85772705]
[128.76669312 285.67599487]
[114.46973419 281.13760376]
[102.70619202 271.83065796]
[95.00048828 258.96121216]
[92.35116577 244.19703674]
[95.10156250 229.45135498]
[102.89525604 216.63502502]
[114.72227478 207.40887451]
[129.04998779 202.96853638]
[144.02168274 203.88938904]
[157.70036316 210.05426025]
[149.94612122 197.21401978]
[142.19189453 184.37377930]
[134.43765259 171.53353882]
[126.68341827 158.69329834]
[118.92918396 145.85304260]
[111.17494965 133.01280212]
[97.97234344 126.11784363]
[97.46161652 110.30488586]
[88.96308899 97.94466400]
[79.74989319 86.10755920]
[70.53670502 74.27044678]
[55.10126495 72.17642212]
[45.92640305 60.04066849]
[48.01786423 45.33823776]
[38.80467224 33.50113297]
[25.27921677 33.37317657]
[14.47270775 25.56729507]
[10.22694874 13.13667488]
[13.88990402 0.72538596]
[4.95886183 -11.32602406]
[-3.97218060 -23.37743378]
[-18.40520096 -29.85805893]
[-19.76669502 -44.69030762]
[-28.69773865 -56.74171829]
[-37.62878036 -68.79312897]
[-46.55982208 -80.84453583]
[-55.49086380 -92.89595032]
[-64.42190552 -104.94735718]
[-73.35295105 -116.99877167]
[-79.39439392 -120.04585266]
[-82.45969391 -124.97409058]
[-82.40517426 -129.83683777]
[-90.75713348 -142.29656982]
[-99.10909271 -154.75630188]
[-107.46105194 -167.21601868]
[-115.81300354 -179.67575073]
[-131.37854004 -181.17521667]
[-142.30165100 -192.36537170]
[-143.42478943 -207.96257019]
[-134.21763611 -220.60229492]
[-119.02754211 -224.31643677]
[-105.02678680 -217.35131836]
[-98.82611084 -202.99563599]
[-103.35327911 -188.02770996]
[-95.00131989 -175.56797791]
[-86.64936066 -163.10826111]
[-78.29740906 -150.64852905]
[-69.94544983 -138.18879700]
[-61.30154037 -125.92980957]
[-52.37049866 -113.87840271]
[-43.43945312 -101.82698822]
[-34.50841141 -89.77558136]
[-25.57736969 -77.72416687]
[-16.64632797 -65.67276001]
[-7.71528578 -53.62134933]
[6.07892656 -48.00272369]
[8.07922935 -32.30847549]
[17.01027107 -20.25706673]
[25.94131470 -8.20565605]
[42.62673569 -6.47761393]
[53.14304733 7.02050066]
[50.64178085 24.28794098]
[59.85496902 36.12504959]
[74.62093353 37.70682144]
[84.13304138 49.58008575]
[82.37381744 65.05725861]
[91.58700562 76.89436340]
[100.80019379 88.73147583]
[105.74022675 74.56828308]
[119.81159973 69.37245941]
[132.77066040 76.92644501]
[135.18351746 91.73110962]
[125.29364777 103.00899506]
[110.30185699 102.55065155]
[124.05909729 110.36402893]
[124.01519012 125.25857544]
[131.76942444 138.09881592]
[139.52366638 150.93905640]
[147.27789307 163.77929688]
[155.03213501 176.61953735]
[162.78637695 189.45979309]
[170.54060364 202.30003357]
[180.43634033 213.57275391]
[192.16381836 222.92510986]
[204.00091553 232.13829041]
[215.94601440 241.21104431]
[227.89109802 250.28379822]
[243.96774292 245.17541504]
[259.77612305 250.56892395]
[269.18939209 264.16601562]
[268.68316650 280.53015137]
[280.83923340 289.31823730]
[292.99526978 298.10632324]
[305.15133667 306.89440918]
[317.30737305 315.68252563]
[329.46340942 324.47061157]
[345.46752930 323.35336304]
[356.21282959 335.26629639]
[353.45648193 351.07080078]
[339.31289673 358.64300537]
[324.63180542 352.17419434]
[320.67532349 336.62664795]
[308.51928711 327.83856201]
[296.36322021 319.05047607]
[284.20718384 310.26239014]
[272.05114746 301.47430420]
[259.89508057 292.68618774]
[247.59529114 298.01205444]
[234.16502380 296.52886963]
[223.14813232 288.51977539]
[217.50520325 276.00402832]
[218.81835938 262.22888184]
[206.87326050 253.15614319]
[194.92817688 244.08338928]
[187.62928772 242.52799988]
[182.81146240 234.65257263]
[171.08399963 225.30023193]
[175.42442322 239.65852356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 96]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[20 90]
[22 88]
[23 82]
[24 81]
[25 80]
[28 77]
[29 76]
[33 73]
[34 72]
[35 71]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[97 131]
[98 130]
[99 128]
[100 127]
[101 126]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
