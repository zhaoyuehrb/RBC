%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUAUAUGAUCUCUUUGGCUUUAGGGAAUUACUCCAUACCAGCUCUGAGAUUUCCAGCUCAGCG\
) } def
/len { sequence length } bind def

/coor [
[125.42768860 304.59875488]
[122.63079071 289.86181641]
[119.83388519 275.12487793]
[117.03698730 260.38793945]
[114.24008179 245.65100098]
[101.52246857 240.99659729]
[92.76387787 230.52456665]
[90.39347839 216.96888733]
[95.15370941 203.94050598]
[105.87263489 194.96553040]
[103.76956177 180.11369324]
[101.66648865 165.26185608]
[99.56341553 150.41001892]
[97.46034241 135.55818176]
[95.35726929 120.70634460]
[84.23988342 114.21008301]
[78.92517853 102.48184204]
[81.36995697 89.83982086]
[90.67408752 80.93865204]
[89.26946259 66.00456238]
[87.86484528 51.07046890]
[86.46022034 36.13637924]
[71.49017334 29.52036858]
[61.87148285 16.39292717]
[60.09450912 0.30928940]
[66.54119873 -14.43148899]
[79.40775299 -23.93563271]
[77.30467987 -38.78747177]
[75.20160675 -53.63930893]
[63.29473877 -64.39133453]
[64.42098236 -80.39480591]
[77.71636963 -89.37322998]
[92.98182678 -84.43912506]
[98.50699615 -69.37751770]
[90.05344391 -55.74238205]
[92.15651703 -40.89054489]
[94.25959015 -26.03870583]
[107.40148926 -21.69125175]
[117.38351440 -12.00493431]
[122.16988373 1.12597191]
[120.74916077 15.09683609]
[113.34735870 27.10929489]
[101.39431000 34.73175812]
[102.79893494 49.66584778]
[104.20355225 64.59993744]
[105.60817719 79.53402710]
[118.49309540 89.59263611]
[120.40486145 105.82660675]
[110.20910645 118.60327148]
[112.31217957 133.45510864]
[114.41525269 148.30694580]
[116.51832581 163.15878296]
[118.62139893 178.01062012]
[120.72447205 192.86245728]
[135.65541077 200.44357300]
[143.16697693 215.22593689]
[140.54017639 231.43183899]
[128.97702026 242.85409546]
[131.77392578 257.59103394]
[134.57083130 272.32797241]
[137.36772156 287.06491089]
[140.16462708 301.80184937]
[152.56237793 311.98397827]
[152.18748474 328.02264404]
[139.32754517 337.61437988]
[123.84760284 333.40121460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 58]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[19 46]
[20 45]
[21 44]
[22 43]
[27 37]
[28 36]
[29 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
