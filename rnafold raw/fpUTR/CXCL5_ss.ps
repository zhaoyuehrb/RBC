%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGGGAGAGAUGAGUGUAGAUAAAAGGAGUGCAGAAGGCACGAGGAAGCCACAGUGCUCCGGAUCCUCCAAUCUUCGCUCCUCCAAUCUCCGCUCCUCCACCCAGUUCAGGAACCCGCGACCGCUCGCAGCGCUCUCUUGACCACU\
) } def
/len { sequence length } bind def

/coor [
[159.10552979 198.13906860]
[168.04183960 186.09155273]
[182.84899902 183.69888306]
[171.64556885 173.72474670]
[160.44213867 163.75062561]
[149.23870850 153.77650452]
[134.43032837 154.89334106]
[122.92637634 144.93775940]
[121.85533905 129.39778137]
[110.65190887 119.42366028]
[99.44847870 109.44953918]
[94.20574188 108.55416870]
[89.86067200 104.75304413]
[87.99439240 98.81098938]
[77.22139740 88.37343597]
[66.44840240 77.93588257]
[55.67541122 67.49832153]
[44.90241623 57.06076813]
[29.60723495 53.01502228]
[25.85041428 38.60198593]
[15.07741928 28.16443062]
[4.30442429 17.72687531]
[-6.46857071 7.28931808]
[-21.66571236 9.80984592]
[-35.27395630 2.97836351]
[-42.16865540 -10.39799976]
[-39.89199448 -25.09340096]
[-50.66498947 -35.53095627]
[-61.43798447 -45.96851349]
[-72.21097565 -56.40607071]
[-82.98397064 -66.84362793]
[-93.75696564 -77.28118134]
[-104.52996063 -87.71873474]
[-119.82514191 -91.76448059]
[-123.58196259 -106.17752075]
[-134.35496521 -116.61507416]
[-145.12796021 -127.05262756]
[-160.70458984 -126.97500610]
[-171.48126221 -137.71363831]
[-171.45925903 -152.56405640]
[-176.65614319 -153.85952759]
[-180.42297363 -156.75978088]
[-182.38401794 -160.43251038]
[-182.55693054 -164.01837158]
[-192.64860535 -175.11602783]
[-202.74028015 -186.21369934]
[-212.83195496 -197.31135559]
[-222.92362976 -208.40901184]
[-233.58599854 -218.95954895]
[-244.78942871 -228.93368530]
[-255.99285889 -238.90780640]
[-271.75408936 -237.74185181]
[-283.66867065 -248.12539673]
[-284.66793823 -263.89807129]
[-274.15899658 -275.70220947]
[-258.37664795 -276.53463745]
[-246.68426514 -265.90151978]
[-246.01873779 -250.11123657]
[-234.81530762 -240.13711548]
[-223.61187744 -230.16297913]
[-221.47477722 -245.00996399]
[-208.64511108 -252.78167725]
[-194.49653625 -247.79991150]
[-189.36637878 -233.70446777]
[-197.00285339 -220.79383850]
[-211.82597351 -218.50068665]
[-201.73429871 -207.40303040]
[-191.64262390 -196.30537415]
[-181.55094910 -185.20771790]
[-171.45925903 -174.11004639]
[-161.02171326 -163.33705139]
[-146.17941284 -163.82862854]
[-135.10537720 -153.39692688]
[-134.69039917 -137.82562256]
[-123.91740417 -127.38806915]
[-113.14440918 -116.95051575]
[-98.61978912 -113.65132904]
[-94.09240723 -98.49172974]
[-83.31941223 -88.05417633]
[-72.54641724 -77.61662292]
[-61.77342224 -67.17906189]
[-51.00042725 -56.74150848]
[-40.22743225 -46.30395126]
[-29.45443726 -35.86639404]
[-14.83837700 -38.60660934]
[-1.25068283 -32.13833618]
[6.00769615 -18.75292206]
[3.96898556 -3.48367667]
[14.74198055 6.95387936]
[25.51497459 17.39143562]
[36.28797150 27.82899284]
[50.81259155 31.12817383]
[55.33997345 46.28777313]
[66.11296844 56.72532654]
[76.88596344 67.16288757]
[87.65895844 77.60044098]
[98.43195343 88.03799438]
[109.42260742 98.24610901]
[120.62603760 108.22023010]
[131.82946777 118.19435883]
[147.38899231 117.46014404]
[158.60876465 127.73492432]
[159.21284485 142.57307434]
[170.41627502 152.54719543]
[181.61970520 162.52133179]
[192.82312012 172.49545288]
[204.63462830 181.74143982]
[220.39192200 183.16206360]
[226.51506042 196.73985291]
[238.88739014 205.22073364]
[251.25971985 213.70161438]
[263.63204956 222.18251038]
[276.00439453 230.66339111]
[288.37670898 239.14427185]
[302.93502808 234.10826111]
[317.49700928 238.55827332]
[326.53945923 250.58732605]
[326.76211548 265.45635986]
[339.13446045 273.93725586]
[351.50677490 282.41815186]
[366.84933472 279.72665405]
[379.27581787 288.50372314]
[381.74719238 303.14706421]
[397.71829224 301.62936401]
[408.75860596 313.26943970]
[406.39892578 329.13800049]
[392.44943237 337.06207275]
[377.61096191 330.96298218]
[373.26629639 315.51940918]
[358.71716309 318.49569702]
[346.04907227 310.07110596]
[343.02590942 294.79046631]
[330.65356445 286.30960083]
[318.28125000 277.82870483]
[304.33264160 282.98373413]
[289.85189819 278.88833618]
[280.44943237 266.91140747]
[279.89584351 251.51660156]
[267.52349854 243.03572083]
[255.15116882 234.55484009]
[242.77883911 226.07395935]
[230.40650940 217.59306335]
[218.03416443 209.11218262]
[203.16181946 208.29818726]
[196.15374756 194.11378479]
[197.38604736 209.06307983]
[187.83612061 220.63021851]
[172.92387390 222.25042725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 106]
[4 105]
[5 104]
[6 103]
[9 100]
[10 99]
[11 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[20 91]
[21 90]
[22 89]
[23 88]
[27 84]
[28 83]
[29 82]
[30 81]
[31 80]
[32 79]
[33 78]
[35 76]
[36 75]
[37 74]
[40 71]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 60]
[50 59]
[51 58]
[107 145]
[109 143]
[110 142]
[111 141]
[112 140]
[113 139]
[114 138]
[118 134]
[119 133]
[120 132]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
