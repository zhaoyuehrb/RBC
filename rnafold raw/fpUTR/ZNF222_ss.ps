%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCUAUUUCAUUUACCACAGUAGUUUGAGUCAUUUCCACAUCUUGCGAGUCCUUCCGAACGAGUCUCCUUUCCUUGGGGCUCGCAACCACCCA\
) } def
/len { sequence length } bind def

/coor [
[117.21914673 176.55966187]
[103.28835297 178.40322876]
[89.25210571 177.73263550]
[75.56052399 174.56938171]
[62.65264130 169.01489258]
[50.94238281 161.24728394]
[40.80526352 151.51565552]
[32.56635284 140.13206482]
[26.48984528 127.46155548]
[12.00095844 131.34384155]
[-2.48792911 135.22613525]
[-16.97681618 139.10841370]
[-29.56899643 152.41925049]
[-46.31378555 147.45491028]
[-60.66788864 151.80917358]
[-75.02199554 156.16345215]
[-89.37609863 160.51771545]
[-100.18540955 172.85023499]
[-116.21543121 169.39039612]
[-120.97585297 153.69738770]
[-109.56955719 141.91482544]
[-93.73036957 146.16362000]
[-79.37626648 141.80934143]
[-65.02216339 137.45507812]
[-50.66805649 133.10079956]
[-44.60093307 122.49526215]
[-32.52453232 118.82518768]
[-20.85910225 124.61952972]
[-6.37021494 120.73724365]
[8.11867237 116.85495758]
[22.60755920 112.97267151]
[21.58340454 97.04743195]
[23.80220604 81.24430084]
[29.17220306 66.21681976]
[37.47131729 52.58646393]
[48.35633087 40.91691208]
[61.37709808 31.69076729]
[75.99513245 25.28958511]
[91.60589600 21.97808647]
[107.56380463 21.89322090]
[123.20890808 25.03849983]
[137.89419556 31.28384399]
[151.01234436 40.37097931]
[162.02085876 51.92409897]
[170.46447754 65.46542358]
[184.50306702 60.18167114]
[198.54165649 54.89791870]
[212.58024597 49.61417007]
[226.61883545 44.33041763]
[240.65742493 39.04666901]
[254.69601440 33.76291656]
[268.73458862 28.47916603]
[282.77319336 23.19541550]
[296.81176758 17.91166496]
[310.85037231 12.62791443]
[315.06130981 -2.19011760]
[327.05001831 -11.57757187]
[342.08969116 -12.09943390]
[354.40536499 -3.76502323]
[368.44393921 -9.04877377]
[382.48254395 -14.33252430]
[392.67272949 -26.43502045]
[407.30972290 -23.67681885]
[413.60314941 -38.17399979]
[428.33480835 -43.89713287]
[442.76464844 -37.45078278]
[448.33169556 -22.65945625]
[441.73315430 -8.29858303]
[426.88378906 -2.88821602]
[412.59347534 -9.63822937]
[403.40740967 2.08633804]
[387.76629639 -0.29393572]
[373.72769165 4.98981524]
[359.68911743 10.27356529]
[355.92495728 24.65998840]
[344.27343750 34.18397522]
[329.07028198 35.03081894]
[316.13412476 26.66650391]
[302.09552002 31.95025444]
[288.05694580 37.23400497]
[274.01834106 42.51775742]
[259.97976685 47.80150604]
[245.94117737 53.08525848]
[231.90258789 58.36900711]
[217.86399841 63.65275955]
[203.82540894 68.93650818]
[189.78681946 74.22026062]
[175.74822998 79.50401306]
[178.18925476 93.34262085]
[178.12297058 107.39471436]
[175.55149841 121.20968628]
[170.55731201 134.34451294]
[163.30055237 146.37802124]
[154.01391602 156.92431641]
[142.99520874 165.64520264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 31]
[10 30]
[11 29]
[12 28]
[14 25]
[15 24]
[16 23]
[17 22]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[59 74]
[60 73]
[61 72]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
