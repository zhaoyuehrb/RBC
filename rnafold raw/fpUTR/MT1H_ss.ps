%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACGCCCUCCACGUGUUCCACUGCCUCUUCUCUUCUCGCUUGGGAACUCCAGUCUCACCUCGGCUUGCA\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 228.21600342]
[82.21823120 212.52850342]
[92.50000000 200.21328735]
[92.50000000 185.21328735]
[84.76270294 172.48600769]
[92.50000000 158.68583679]
[92.50000000 143.68583679]
[92.50000000 128.68583679]
[82.05234528 123.60103607]
[74.36093140 114.89179993]
[70.60694885 103.89560699]
[71.36688995 92.30116272]
[76.52404785 81.88903809]
[85.28644562 74.25823212]
[96.30841827 70.58062744]
[98.26631165 55.70895386]
[100.22420502 40.83728027]
[91.03588104 32.71925354]
[87.09120178 21.23914337]
[89.30435944 9.42766666]
[96.98039246 0.34070137]
[108.02703094 -3.73130584]
[111.27362061 -18.37574577]
[114.52021790 -33.02018738]
[117.76680756 -47.66462708]
[107.78652191 -57.42599487]
[104.04209900 -70.76129913]
[107.42861176 -84.07922363]
[116.93579865 -93.84944916]
[129.94609070 -97.53843689]
[133.82838440 -112.02732086]
[137.71066284 -126.51621246]
[141.59295654 -141.00509644]
[145.47523499 -155.49398804]
[135.02200317 -166.84005737]
[132.38484192 -182.04035950]
[138.40527344 -196.24450684]
[151.16220093 -204.92002869]
[166.58491516 -205.29858398]
[179.75210571 -197.25938416]
[186.46215820 -183.36770630]
[184.57391357 -168.05633545]
[174.68992615 -156.21107483]
[159.96412659 -151.61169434]
[156.08183289 -137.12281799]
[152.19955444 -122.63392639]
[148.31727600 -108.14503479]
[144.43498230 -93.65615082]
[155.12437439 -81.39009857]
[156.52285767 -65.01533508]
[147.89765930 -50.83370972]
[132.41125488 -44.41803360]
[129.16465759 -29.77359200]
[125.91806030 -15.12915134]
[122.67147064 -0.48471162]
[133.44909668 14.01940155]
[130.46415710 32.15618134]
[115.09587860 42.79517365]
[113.13798523 57.66684723]
[111.18009186 72.53852081]
[125.13127136 84.26638794]
[129.58659363 101.93920898]
[122.86262512 118.87929535]
[107.50000000 128.68583679]
[107.50000000 143.68583679]
[107.50000000 158.68583679]
[115.23729706 172.48600769]
[107.50000000 185.21328735]
[107.50000000 200.21328735]
[117.78176880 212.52850342]
[114.42288971 228.21600342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 69]
[4 68]
[6 66]
[7 65]
[8 64]
[15 60]
[16 59]
[17 58]
[22 55]
[23 54]
[24 53]
[25 52]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
