%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGGGCGCUCUUCCAGCCUGGAGAAGGCUGCGGGUCUCCAUCCGUGGCGCCUCGCCAGCUGCAGGACGACGCGGGCUCUUGAGGGGCAGAGCAGCGCAUC\
) } def
/len { sequence length } bind def

/coor [
[85.74954987 369.07229614]
[71.24041748 363.82934570]
[61.88727951 351.56057739]
[60.67468262 336.18093872]
[67.98957062 322.59802246]
[81.49777985 315.14605713]
[74.54305267 301.97485352]
[83.09946442 288.66702271]
[84.00514221 273.69436646]
[84.68458557 258.70977783]
[85.13762665 243.71661377]
[85.59067535 228.72346497]
[86.04372406 213.73030090]
[86.49676514 198.73715210]
[79.14739990 185.78199768]
[87.29797363 172.22180176]
[87.75102234 157.22865295]
[85.06865692 153.09274292]
[85.07434845 147.19691467]
[88.71140289 141.35157776]
[90.06889343 126.41313171]
[91.42637634 111.47467804]
[85.73483276 98.70369720]
[93.63517761 87.16783905]
[94.99266052 72.22938538]
[96.35014343 57.29093933]
[97.70762634 42.35248947]
[95.34097290 33.35228348]
[99.33839417 26.98568153]
[93.32093048 12.35349941]
[102.53591919 0.65165186]
[104.34397125 -14.23898125]
[106.15202332 -29.12961388]
[107.96006775 -44.02024841]
[109.76811981 -58.91088104]
[102.12651062 -75.57887268]
[113.01549530 -89.24928284]
[114.37297821 -104.18773651]
[115.73046112 -119.12618256]
[117.08794403 -134.06463623]
[104.21660614 -140.36047363]
[94.30817413 -150.66932678]
[88.55114746 -163.72492981]
[87.62587738 -177.93339539]
[91.62416077 -191.56777954]
[100.04065704 -202.97799683]
[111.83661652 -210.79052734]
[125.56805420 -214.07373047]
[127.37610626 -228.96437073]
[129.18415833 -243.85499573]
[130.99220276 -258.74563599]
[132.80026245 -273.63626099]
[128.70719910 -290.08871460]
[143.38360596 -298.57632446]
[155.60234070 -286.82305908]
[147.69088745 -271.82821655]
[145.88284302 -256.93759155]
[144.07478333 -242.04695129]
[142.26673889 -227.15631104]
[140.45869446 -212.26568604]
[154.32093811 -204.74761963]
[164.28742981 -192.47723389]
[168.82579041 -177.29470825]
[167.22059631 -161.49139404]
[159.68588257 -147.46398926]
[147.33715820 -137.35108948]
[132.02639771 -132.70715332]
[130.66891479 -117.76869965]
[129.31143188 -102.83025360]
[127.95394135 -87.89179993]
[135.49641418 -78.30117798]
[134.37864685 -65.74658966]
[124.65875244 -57.10282898]
[122.85070801 -42.21219635]
[121.04265594 -27.32156372]
[119.23460388 -12.43093109]
[117.42655182 2.45970201]
[123.57333374 16.02680588]
[114.22902679 28.79373169]
[112.64608002 43.70997238]
[111.28859711 58.64842224]
[109.93110657 73.58686829]
[108.57362366 88.52532196]
[114.26516724 101.29630280]
[106.36482239 112.83216095]
[105.00733948 127.77061462]
[103.64985657 142.70906067]
[102.74417877 157.68170166]
[102.29113007 172.67485046]
[109.60809326 186.70242310]
[101.48992157 199.19020081]
[101.03688049 214.18334961]
[100.58383179 229.17651367]
[100.13078308 244.16966248]
[99.67774200 259.16281128]
[102.58349609 268.00372314]
[98.97777557 274.60006714]
[98.07209778 289.57269287]
[104.96205139 303.81484985]
[96.47041321 316.05172729]
[108.98190308 325.07760620]
[114.60620880 339.44320679]
[111.54864502 354.56454468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 100]
[8 98]
[9 97]
[10 95]
[11 94]
[12 93]
[13 92]
[14 91]
[16 89]
[17 88]
[20 87]
[21 86]
[22 85]
[24 83]
[25 82]
[26 81]
[27 80]
[29 79]
[31 77]
[32 76]
[33 75]
[34 74]
[35 73]
[37 70]
[38 69]
[39 68]
[40 67]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
