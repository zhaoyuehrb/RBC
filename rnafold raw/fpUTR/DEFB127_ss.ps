%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGAGGAAGGUAGCAUAGUGUGCAGUUCACUGGACCAAAAGCUUUGGCUGCACCUCUUCUGGAAAGCCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[137.44383240 242.82878113]
[147.88502502 231.69577026]
[142.43241882 217.72190857]
[136.97979736 203.74803162]
[131.23954773 189.88984680]
[125.21411133 176.15324402]
[119.18867493 162.41664124]
[113.16324615 148.68003845]
[107.13781738 134.94343567]
[94.93971252 126.39618683]
[96.48186493 110.65031433]
[90.17382812 97.04117584]
[83.58587646 83.56531525]
[76.99792480 70.08944702]
[70.40998077 56.61358261]
[63.82202911 43.13771820]
[47.28377151 37.88093185]
[39.68336105 22.65249062]
[45.20402527 6.90635490]
[38.06481552 -6.28575134]
[30.92560387 -19.47785759]
[22.46360970 -31.86311722]
[12.76912022 -43.30937958]
[-2.05413079 -48.83945847]
[-4.37554646 -63.55204773]
[-14.07003498 -74.99830627]
[-23.76452446 -86.44457245]
[-39.37459946 -91.47026062]
[-42.56228256 -107.55661011]
[-30.04835320 -118.15536499]
[-14.70607281 -112.36343384]
[-12.31826210 -96.13906097]
[-2.62377405 -84.69279480]
[7.07071447 -73.24653625]
[21.20055199 -68.53517151]
[24.21538162 -53.00386810]
[33.90987015 -41.55760574]
[36.52698898 -41.56421661]
[39.30997467 -40.51552582]
[41.85646057 -38.34527588]
[43.74831390 -35.13284683]
[44.60202408 -31.10437393]
[44.11771011 -26.61706924]
[51.25691986 -13.42496204]
[58.39613342 -0.23285587]
[71.29757690 1.74452305]
[80.78243256 10.99434853]
[83.15218353 24.22868156]
[77.29789734 36.54977036]
[83.88584137 50.02563477]
[90.47379303 63.50149918]
[97.06174469 76.97736359]
[103.64968872 90.45323181]
[109.91233826 95.92183685]
[110.21846008 104.62488556]
[122.84754181 114.15467834]
[120.87441254 128.91801453]
[126.89984894 142.65461731]
[132.92527771 156.39120483]
[138.95071411 170.12780762]
[144.97613525 183.86441040]
[151.47192383 190.70242310]
[150.95365906 198.29541016]
[156.40628052 212.26928711]
[161.85890198 226.24314880]
[177.08093262 227.36235046]
[190.30561829 234.98274231]
[198.90718079 247.59129333]
[201.17779541 262.68457031]
[196.66662598 277.26580811]
[186.26934814 288.43984985]
[172.05035400 293.98809814]
[156.83285522 292.80899048]
[143.63827515 285.13656616]
[135.08642578 272.49423218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 65]
[3 64]
[4 63]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[11 55]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[19 45]
[20 44]
[21 43]
[22 37]
[23 36]
[25 34]
[26 33]
[27 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
