%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCUGUCUGUACCAGGGCGGCGCGUGGUCUACGCCGAGUGACAGAGACGCUCAGGCUGUGUUCUCAGG\
) } def
/len { sequence length } bind def

/coor [
[101.46846771 169.33430481]
[86.48236847 168.68865967]
[73.65447235 160.91403198]
[66.14786530 147.92745972]
[65.81352997 132.93118286]
[72.73390198 119.62298584]
[85.20141602 111.28478241]
[70.61964417 114.80214691]
[56.03787231 118.31951904]
[41.45610046 121.83689117]
[26.87432861 125.35426331]
[12.29255486 128.87162781]
[4.26421642 142.48490906]
[-11.05937958 146.35310364]
[-24.58701706 138.18128967]
[-28.29298592 122.81764984]
[-19.97860336 109.37716675]
[-4.57664299 105.83383942]
[8.77518368 114.28986359]
[23.35695648 110.77249146]
[37.93872833 107.25511932]
[52.52050400 103.73774719]
[67.10227966 100.22037506]
[81.68405151 96.70300293]
[89.91669464 84.16412354]
[87.34729767 69.38582611]
[84.77790070 54.60752106]
[74.79107666 42.33666229]
[80.23393250 28.47215080]
[77.66453552 13.69384861]
[75.09513855 -1.08445334]
[72.52574158 -15.86275482]
[61.60503387 -28.09673309]
[66.99588776 -43.58449173]
[83.15265656 -46.39355469]
[93.45464325 -33.63419724]
[87.30403900 -18.43215179]
[89.87343597 -3.65385056]
[92.44283295 11.12445068]
[95.01222992 25.90275192]
[104.81526947 37.11656952]
[99.55619812 52.03812408]
[102.12559509 66.81642914]
[104.69499207 81.59472656]
[108.95357513 85.08688354]
[111.67254639 89.35993195]
[112.79199982 93.84881592]
[112.43845367 98.02735901]
[126.66387939 102.78522491]
[140.88929749 107.54309845]
[155.11473083 112.30096436]
[169.43922424 116.75165558]
[183.85617065 120.89311218]
[198.27311707 125.03456879]
[211.13948059 116.14688110]
[226.70364380 117.66030884]
[237.61671448 128.86026001]
[238.72586060 144.45845032]
[229.50738525 157.08990479]
[214.31396484 160.79043579]
[200.31945801 153.81274414]
[194.13166809 139.45150757]
[179.71472168 135.31005859]
[165.29777527 131.16860962]
[157.77081299 132.38717651]
[150.35685730 126.52639008]
[136.13143921 121.76851654]
[121.90601349 117.01065063]
[107.68058777 112.25277710]
[119.38588715 121.63285828]
[125.13605499 135.48693848]
[123.51319885 150.39889526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[25 44]
[26 43]
[27 42]
[29 40]
[30 39]
[31 38]
[32 37]
[48 69]
[49 68]
[50 67]
[51 66]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
