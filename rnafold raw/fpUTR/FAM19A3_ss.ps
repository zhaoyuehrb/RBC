%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGUCCAGGUGGAGUGAGUCUGAGGACAGCAGAUGAACAGACAGAAACUGAAAGAUCCCCAAAAAGG\
) } def
/len { sequence length } bind def

/coor [
[82.71684265 265.69311523]
[68.06525421 261.87084961]
[55.44999313 253.49626160]
[46.23947144 241.47773743]
[41.43277359 227.11895752]
[41.55129623 211.97747803]
[46.58218765 197.69570923]
[55.97972488 185.82283020]
[68.72454071 177.64674377]
[83.43416595 174.05432129]
[84.77875519 159.11470032]
[82.15504456 151.93881226]
[86.53359222 143.54011536]
[88.54709625 128.67587280]
[90.56059265 113.81162262]
[86.89548492 99.26628113]
[78.07870483 87.13102722]
[62.72094345 84.52779388]
[53.95234680 72.09532166]
[56.52877045 57.47008514]
[47.71199417 45.33482742]
[38.89521408 33.19957352]
[30.07843590 21.06431961]
[21.26165771 8.92906380]
[5.65058899 8.01880455]
[-5.68753958 -2.75063610]
[-7.39921045 -18.29425812]
[1.32377434 -31.27283859]
[16.36268806 -35.55828857]
[30.61661720 -29.12714958]
[37.35528946 -15.01600838]
[33.39691162 0.11228526]
[42.21369171 12.24754047]
[51.03046799 24.38279533]
[59.84724808 36.51805115]
[68.66402435 48.65330505]
[83.36961365 50.72242355]
[92.48395538 62.90370178]
[90.21395874 78.31424713]
[99.03073883 90.44950104]
[101.19919586 87.70470428]
[104.40098572 85.54750061]
[108.46856689 84.27335358]
[113.15973663 84.13065338]
[126.95265198 78.23527527]
[140.74557495 72.33990479]
[152.93373108 60.55495071]
[167.63214111 69.00438690]
[163.58183289 85.46742249]
[146.64094543 86.13282013]
[132.84803772 92.02819061]
[119.05511475 97.92356873]
[133.89726257 100.09394836]
[142.30549622 112.51576233]
[138.80560303 127.10174561]
[125.67619324 134.35560608]
[111.46523285 129.55470276]
[105.42483521 115.82511902]
[103.41133881 130.68936157]
[101.39784241 145.55361938]
[99.71837616 160.45930481]
[98.37378693 175.39891052]
[112.20557404 181.56011963]
[123.28567505 191.88047791]
[130.41221619 205.24053955]
[132.81213379 220.19110107]
[130.22514343 235.11041260]
[122.93183136 248.38017273]
[111.72333527 258.56094360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 62]
[11 61]
[13 60]
[14 59]
[15 58]
[16 40]
[17 39]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
