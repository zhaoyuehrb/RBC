%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGUUAGCCGAGUCUGAGCAUCUCGGAGGAUGCGGCGCGGCGAUCGGCUGCAGGGACGCGCGCAAGGUGAACACGGGGGCUGCGGCGCGCAGGCUCAUCCAGUGAGGACUGGAAGGUGGGGGCUUUAGGCCCAGGCAUCGGAGUAGACC\
) } def
/len { sequence length } bind def

/coor [
[90.28806305 251.86920166]
[88.43267822 236.98439026]
[86.57728577 222.09957886]
[84.72190094 207.21478271]
[82.86650848 192.32997131]
[71.66353607 185.89041138]
[66.15065002 173.98834229]
[68.55433655 160.89533997]
[78.21414948 151.45491028]
[76.66677856 136.53494263]
[75.11940765 121.61496735]
[68.11690521 108.34978485]
[56.67064667 98.65529633]
[45.22438431 88.96080780]
[33.77812576 79.26631927]
[22.33186340 69.57183075]
[10.88560200 59.87734604]
[5.95262384 72.55868530]
[-5.68970060 77.93559265]
[-17.06131363 73.97599792]
[-30.67045212 80.28403473]
[-44.27959061 86.59207153]
[-57.88872910 92.90010834]
[-71.49787140 99.20814514]
[-85.10700989 105.51618195]
[-94.09634399 119.23200989]
[-110.45173645 118.03491211]
[-117.34816742 103.15635681]
[-107.69117737 89.90213013]
[-91.41504669 91.90704346]
[-77.80590820 85.59900665]
[-64.19676971 79.29096985]
[-50.58762741 72.98293304]
[-36.97848892 66.67489624]
[-23.36935043 60.36685944]
[-17.46196556 47.21241379]
[-2.09176660 43.55486298]
[-8.95681286 30.21803093]
[-15.82185936 16.88119698]
[-22.68690491 3.54436207]
[-29.55195045 -9.79247189]
[-42.74728012 -18.52138329]
[-41.69276047 -33.37861252]
[-48.55780411 -46.71544647]
[-53.98447800 -50.66842651]
[-56.21669769 -55.98130417]
[-55.41806030 -60.74832153]
[-61.72609711 -74.35746002]
[-68.03413391 -87.96659851]
[-74.34217072 -101.57573700]
[-80.65020752 -115.18487549]
[-93.47354126 -124.45162964]
[-91.80594635 -139.25259399]
[-104.62928009 -148.51934814]
[-102.96169281 -163.32029724]
[-109.41002655 -176.86352539]
[-124.08722687 -182.08056641]
[-130.57637024 -195.84086609]
[-125.51226807 -209.80117798]
[-132.10021973 -223.27703857]
[-138.68815613 -236.75291443]
[-153.90730286 -240.34619141]
[-163.21463013 -252.91232300]
[-162.21551514 -268.51794434]
[-151.38169861 -279.79458618]
[-135.82858276 -281.41775513]
[-122.89987946 -272.62100220]
[-118.70011139 -257.55795288]
[-125.21229553 -243.34085083]
[-118.62435150 -229.86499023]
[-112.03639984 -216.38912964]
[-97.90930939 -211.81082153]
[-91.03622437 -198.23822021]
[-95.93416595 -183.45147705]
[-90.13430786 -178.79417419]
[-89.35255432 -169.62834167]
[-76.98040771 -161.33500671]
[-78.19680786 -145.56062317]
[-65.82466888 -137.26728821]
[-67.04106903 -121.49291229]
[-60.73303223 -107.88377380]
[-54.42499542 -94.27463531]
[-48.11695862 -80.66549683]
[-41.80892181 -67.05635834]
[-35.22097015 -53.58049393]
[-28.35592651 -40.24365997]
[-15.65163231 -32.46868515]
[-16.21511650 -16.65751839]
[-9.35007095 -3.32068396]
[-2.48502493 10.01615047]
[4.38002110 23.35298347]
[11.24506760 36.68981934]
[20.58009148 48.43108368]
[32.02635193 58.12557220]
[43.47261429 67.82006073]
[54.91887283 77.51454926]
[66.36513519 87.20903778]
[77.81139374 96.90352631]
[90.17787170 73.59078979]
[122.38589478 74.47658539]
[136.84768677 70.49456787]
[151.30949402 66.51255798]
[165.77128601 62.53054428]
[180.23307800 58.54853058]
[194.69488525 54.56651688]
[205.81916809 42.51735306]
[221.75445557 46.39013290]
[226.10789490 62.20087433]
[214.40104675 73.68484497]
[198.67689514 69.02831268]
[184.21510315 73.01033020]
[169.75329590 76.99234009]
[155.29150391 80.97434998]
[140.82971191 84.95636749]
[126.36791229 88.93837738]
[125.20996094 96.34844971]
[140.03010559 98.66434479]
[154.85021973 100.98046112]
[152.53385925 115.80053711]
[137.71421814 113.48448944]
[122.89407349 111.16859436]
[121.73612976 118.57866669]
[134.29362488 126.78289032]
[146.85112000 134.98710632]
[159.40861511 143.19132996]
[171.96611023 151.39555359]
[188.53314209 154.99694824]
[189.65870667 171.91349792]
[173.71484375 177.67802429]
[163.76188660 163.95304871]
[151.20439148 155.74882507]
[138.64689636 147.54460144]
[126.08940125 139.34039307]
[113.53190613 131.13616943]
[99.28511047 128.16752625]
[90.03938293 120.06759644]
[91.58675385 134.98756409]
[93.13412476 149.90754700]
[106.90061951 160.65213013]
[108.63454437 177.69036865]
[97.75131989 190.47457886]
[99.60670471 205.35939026]
[101.46209717 220.24420166]
[103.31748199 235.12899780]
[105.17287445 250.01380920]
[118.40066528 258.35406494]
[123.12348175 273.26141357]
[117.11135864 287.69705200]
[103.20303345 294.84497070]
[87.96559143 291.33007812]
[78.59368896 278.81204224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[4 142]
[5 141]
[9 138]
[10 137]
[11 136]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[17 93]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[43 86]
[44 85]
[47 84]
[48 83]
[49 82]
[50 81]
[51 80]
[53 78]
[55 76]
[56 74]
[59 71]
[60 70]
[61 69]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
[122 134]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
