%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUCUUCUGCCCGGCCCCUUCGCCCACGUGAAGAACGCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[75.31911469 96.92945862]
[61.95401764 103.73931122]
[48.58892059 110.54917145]
[35.22381973 117.35903168]
[21.85872269 124.16888428]
[8.58390903 131.15310669]
[-4.59834814 138.31048584]
[-17.78060532 145.46786499]
[-30.96286201 152.62524414]
[-30.30446815 167.83471680]
[-36.29059982 181.76501465]
[-47.68473053 191.67430115]
[-62.19175339 195.63754272]
[-76.92016602 192.92031860]
[-88.95838165 184.11424255]
[-102.14064026 191.27162170]
[-115.32289886 198.42901611]
[-119.57067871 213.65174866]
[-133.37925720 221.33932495]
[-148.55622864 216.93083191]
[-156.09739685 203.04176331]
[-151.52868652 187.91223145]
[-137.56065369 180.51834106]
[-122.48027802 185.24674988]
[-109.29801941 178.08937073]
[-96.11576843 170.93199158]
[-96.94467163 156.03976440]
[-91.20185852 142.20756531]
[-79.97691345 132.19949341]
[-65.46060181 128.04055786]
[-50.51738739 130.60714722]
[-38.12024307 139.44299316]
[-24.93798637 132.28561401]
[-11.75572968 125.12822723]
[1.42652714 117.97084808]
[5.85788536 111.93980408]
[15.04886532 110.80378723]
[28.41396332 103.99392700]
[41.77906036 97.18407440]
[55.14415741 90.37421417]
[68.50925446 83.56436157]
[78.10084534 72.03173065]
[82.36106873 57.64943314]
[86.62129974 43.26713943]
[90.88153076 28.88484192]
[95.14176178 14.50254631]
[99.40199280 0.12025027]
[103.47360229 -14.31657791]
[107.35588837 -28.80546570]
[111.23817444 -43.29435349]
[110.43845367 -52.52067947]
[115.41636658 -58.10912704]
[119.67659760 -72.49142456]
[123.74820709 -86.92825317]
[127.63049316 -101.41713715]
[131.51277161 -115.90602875]
[135.39506531 -130.39491272]
[139.27734375 -144.88380432]
[134.06553650 -162.48522949]
[146.81523132 -174.46693420]
[150.31690979 -189.05249023]
[153.81858826 -203.63803101]
[148.64471436 -219.19961548]
[159.73533630 -231.27978516]
[175.68136597 -227.45147705]
[180.07891846 -211.65293884]
[168.40414429 -200.13635254]
[164.90246582 -185.55081177]
[161.40078735 -170.96525574]
[167.47143555 -160.41316223]
[164.58361816 -148.17301941]
[153.76623535 -141.00151062]
[149.88395691 -126.51262665]
[146.00166321 -112.02374268]
[142.11938477 -97.53485107]
[138.23709106 -83.04596710]
[139.56150818 -75.68007660]
[134.05889893 -68.23119354]
[129.79866028 -53.84889603]
[125.72705841 -39.41206741]
[121.84477234 -24.92317963]
[117.96248627 -10.43429279]
[119.28690338 -3.06840587]
[113.78428650 4.38048029]
[109.52405548 18.76277733]
[105.26383209 33.14507294]
[101.00360107 47.52736664]
[96.74337006 61.90966415]
[92.48313904 76.29196167]
[102.99836731 72.53917694]
[115.21335602 73.70722961]
[126.76076508 80.46942902]
[135.05902100 92.35604858]
[148.91720581 98.09629822]
[162.77540588 103.83654785]
[178.95477295 101.16074371]
[189.15124512 114.00457001]
[182.87556458 129.15541077]
[166.58360291 131.02737427]
[157.03514099 117.69474792]
[143.17695618 111.95449066]
[129.31875610 106.21424103]
[124.30028534 111.78782654]
[109.24484253 128.50859070]
[116.40222931 141.69084167]
[123.55960846 154.87309265]
[130.71699524 168.05535889]
[137.87437439 181.23760986]
[152.13204956 189.34013367]
[151.97331238 205.73851013]
[137.56146240 213.56350708]
[123.72216797 204.76542664]
[124.69211578 188.39498901]
[117.53472900 175.21273804]
[110.37734985 162.03048706]
[103.21997070 148.84822083]
[96.06258392 135.66596985]
[83.93949890 128.97657776]
[76.16232300 118.82873535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 35]
[7 34]
[8 33]
[9 32]
[15 26]
[16 25]
[17 24]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[47 84]
[48 82]
[49 81]
[50 80]
[52 79]
[53 78]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[60 69]
[61 68]
[62 67]
[93 102]
[94 101]
[95 100]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
