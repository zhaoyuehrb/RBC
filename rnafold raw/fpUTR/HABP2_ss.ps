%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAGUAUUUGAUGCCUAGUUAAUAAUUUGCAUCCUCUUCAUUUGUUCCUGAAUCCUUGGAGACUGACAUUUUUCCCCCCUAAAGGCAUAGACAACAAAAGAAAUUUUAUUGAGAGGAAAACACAAGUCCUUAAACUGCAAAG\
) } def
/len { sequence length } bind def

/coor [
[81.10729218 238.53337097]
[78.30847168 223.36201477]
[84.17736053 209.09457397]
[96.84120178 200.28375244]
[96.19142151 185.29782104]
[95.54164124 170.31190491]
[94.89186096 155.32598877]
[86.24122620 153.83079529]
[77.93408966 150.99169922]
[70.17783356 146.87959290]
[63.16608810 141.59712219]
[57.07390976 135.27618408]
[44.30558014 143.14826965]
[31.53725243 151.02035522]
[18.76892281 158.89244080]
[6.00059223 166.76452637]
[2.24608350 179.15470886]
[-8.61206245 185.43725586]
[-20.44187355 182.69758606]
[-33.37775040 190.29121399]
[-46.31362915 197.88482666]
[-59.24950409 205.47845459]
[-69.84813690 218.71119690]
[-85.49772644 212.18994141]
[-83.56356812 195.34667969]
[-66.84312439 192.54257202]
[-53.90724945 184.94895935]
[-40.97137070 177.35533142]
[-28.03549385 169.76171875]
[-20.25120544 154.06892395]
[-1.87149501 153.99620056]
[10.89683437 146.12411499]
[23.66516495 138.25202942]
[36.43349457 130.37994385]
[49.20182419 122.50785065]
[44.47311783 98.04462433]
[50.91092300 73.97461700]
[67.22058868 55.13834381]
[90.12222290 45.32379150]
[89.47244263 30.33787346]
[88.82266235 15.35195255]
[80.49481964 1.89990509]
[87.67352295 -11.15058994]
[87.02374268 -26.13650894]
[86.37396240 -41.12242889]
[85.72418213 -56.10834885]
[85.07440186 -71.09426880]
[84.42461395 -86.08018494]
[74.17035675 -101.33368683]
[82.79065704 -116.58324432]
[81.81636810 -131.55157471]
[80.84207916 -146.51989746]
[69.73247528 -154.21315002]
[65.17132568 -166.72601318]
[68.62164307 -179.38754272]
[78.59944153 -187.60830688]
[77.94966125 -202.59423828]
[77.29988098 -217.58015442]
[76.65010071 -232.56607056]
[75.02831268 -247.47814941]
[72.44137573 -262.25338745]
[69.85443115 -277.02862549]
[67.26749420 -291.80386353]
[64.68054962 -306.57910156]
[50.68344116 -313.27691650]
[43.32603073 -326.93881226]
[45.43739700 -342.31158447]
[56.20567703 -353.48403931]
[71.49024963 -356.16015625]
[85.41387177 -349.31091309]
[92.62264252 -335.56997681]
[90.34464264 -320.22103882]
[79.45579529 -309.16604614]
[82.04273224 -294.39080811]
[84.62967682 -279.61557007]
[87.21661377 -264.84033203]
[89.80355072 -250.06507874]
[99.66170502 -261.37069702]
[114.61174011 -262.59399414]
[126.17662048 -253.04130554]
[127.79877472 -238.12928772]
[118.55839539 -226.31338501]
[103.69500732 -224.29353333]
[91.63601685 -233.21585083]
[92.28579712 -218.22993469]
[92.93557739 -203.24401855]
[93.58536530 -188.25810242]
[106.44422913 -177.47087097]
[107.58080292 -160.38748169]
[95.81040192 -147.49418640]
[96.78469849 -132.52586365]
[97.75898743 -117.55753326]
[106.66530609 -109.30358887]
[107.55876923 -96.79074097]
[99.41053772 -86.72996521]
[100.06031799 -71.74404907]
[100.71009827 -56.75812912]
[101.35987854 -41.77220917]
[102.00965881 -26.78629112]
[102.65944672 -11.80037117]
[110.94081116 0.57978338]
[103.80857849 14.70217133]
[104.45835876 29.68809128]
[105.10813904 44.67401123]
[115.04804993 46.51528931]
[124.48981476 50.12709045]
[133.12088013 55.38985443]
[140.65554810 62.12936401]
[146.84436035 70.12252045]
[151.48248291 79.10472107]
[154.41635132 88.77863312]
[155.54885864 98.82400513]
[154.84249878 108.90830231]
[152.32067871 118.69770813]
[148.06686401 127.86815643]
[159.90922546 137.07460022]
[171.75158691 146.28103638]
[183.59394836 155.48748779]
[195.43630981 164.69392395]
[209.95228577 159.46997070]
[224.98306274 162.94551086]
[235.73236084 174.01150513]
[238.77011108 189.13684082]
[233.12699890 203.49507141]
[220.60369873 212.50453186]
[205.19635010 213.29034424]
[191.82141113 205.60177612]
[184.74673462 191.89218140]
[186.22985840 176.53628540]
[174.38751221 167.32983398]
[162.54515076 158.12339783]
[150.70278931 148.91696167]
[138.86042786 139.71052551]
[130.26107788 146.59748840]
[120.47188568 151.65229797]
[109.87777710 154.67620850]
[110.52755737 169.66212463]
[111.17733765 184.64804077]
[111.82711792 199.63397217]
[125.20606995 207.31559753]
[132.28785706 221.02149963]
[130.81272888 236.37817383]
[121.25137329 248.48536682]
[106.65479279 253.47970581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 139]
[5 138]
[6 137]
[7 136]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[19 29]
[20 28]
[21 27]
[22 26]
[39 104]
[40 103]
[41 102]
[43 100]
[44 99]
[45 98]
[46 97]
[47 96]
[48 95]
[50 92]
[51 91]
[52 90]
[56 87]
[57 86]
[58 85]
[59 84]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[115 133]
[116 132]
[117 131]
[118 130]
[119 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
