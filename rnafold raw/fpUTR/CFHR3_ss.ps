%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUUGGUAACUAAUAAUGAAAGAUUUCAAACCCCAAACAGUGCAACUGAAACUUUUGUAUUAGCAUACUACUGAGAAUAUCUAAC\
) } def
/len { sequence length } bind def

/coor [
[136.35401917 338.08761597]
[138.54208374 323.04498291]
[146.32444763 309.98730469]
[158.51435852 300.90573120]
[154.80476379 286.37167358]
[151.09516907 271.83761597]
[147.38555908 257.30355835]
[143.67596436 242.76950073]
[139.96636963 228.23544312]
[136.25677490 213.70138550]
[119.40975952 200.26695251]
[124.45238495 178.56724548]
[118.71213531 164.70906067]
[112.97188568 150.85086060]
[107.23163605 136.99267578]
[101.49137878 123.13447571]
[95.75112915 109.27628326]
[89.87419891 103.47235870]
[90.06309509 94.81954956]
[84.82112885 80.76530457]
[79.57917023 66.71105957]
[74.33720398 52.65681458]
[69.09524536 38.60256958]
[63.85328293 24.54832458]
[57.78914642 17.40793610]
[58.68486404 9.89778423]
[53.94787216 -4.33460474]
[49.21087646 -18.56699371]
[44.47388458 -32.79938126]
[39.73688889 -47.03177261]
[24.60945702 -46.90551376]
[10.18400669 -51.46200180]
[-2.12620044 -60.25483704]
[-11.11513615 -72.42259216]
[-15.90215683 -86.77318573]
[-16.01827812 -101.90070343]
[-11.45212460 -116.32309723]
[-2.65104127 -128.62741089]
[9.52273273 -137.60818481]
[23.87653351 -142.38558960]
[39.00412369 -142.49157715]
[53.42345428 -137.91575623]
[65.72186279 -129.10643005]
[74.69448853 -116.92664337]
[79.46227264 -102.56964874]
[79.55812073 -87.44199371]
[74.97264099 -73.02572632]
[66.15507507 -60.73322296]
[53.96928024 -51.76876450]
[58.70627213 -37.53637695]
[63.44326782 -23.30398750]
[68.18025970 -9.07159805]
[72.91725159 5.16079044]
[77.90752411 19.30636215]
[83.14949036 33.36060715]
[88.39144897 47.41485214]
[93.63341522 61.46909714]
[98.87538147 75.52334595]
[104.11734009 89.57759094]
[109.60932159 103.53603363]
[115.34957123 117.39422607]
[121.08982849 131.25242615]
[126.83007812 145.11061096]
[132.57032776 158.96881104]
[138.31057739 172.82699585]
[146.98184204 174.63032532]
[154.07164001 179.77728271]
[158.37690735 187.29743958]
[159.20721436 195.82676697]
[156.49438477 203.85470581]
[150.79083252 209.99179077]
[154.50042725 224.52584839]
[158.21002197 239.05990601]
[161.91963196 253.59396362]
[165.62922668 268.12802124]
[169.33882141 282.66207886]
[173.04841614 297.19613647]
[188.09956360 299.32482910]
[201.18786621 307.05560303]
[210.31744385 319.20956421]
[214.09611511 333.93338013]
[211.94763184 348.98171997]
[204.19966125 362.05984497]
[192.03367615 371.17340088]
[177.30493164 374.93270874]
[162.25942993 372.76443481]
[149.19151306 364.99926758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[17 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
