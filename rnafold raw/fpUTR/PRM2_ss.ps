%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCAGACCAACAGUAACACCAAGGGCAGGUGGGCAGGCCUCCGCCCUCCUCCCCUACUCCAGGGCCCACUGCAGCCUCAGCCCAGGAGCCACCAGAUCUCCCAACACC\
) } def
/len { sequence length } bind def

/coor [
[131.60630798 365.49539185]
[116.70236206 363.80062866]
[102.16254425 360.11364746]
[88.25192261 354.50164795]
[75.22407532 347.06692505]
[63.31648636 337.94500732]
[52.74622345 327.30218506]
[43.70598221 315.33248901]
[36.36054993 302.25408936]
[30.84383583 288.30538940]
[27.25640297 273.74069214]
[25.66364861 258.82550049]
[26.09460831 243.83169556]
[28.54142380 229.03259277]
[32.95949554 214.69799805]
[39.26828003 201.08920288]
[47.35277176 188.45429993]
[57.06560135 177.02360535]
[68.22971344 167.00547791]
[80.64157867 158.58256531]
[94.07495880 151.90840149]
[108.28495026 147.10466003]
[123.01253510 144.25889587]
[137.98602295 143.42294312]
[126.72593689 133.51283264]
[115.46585083 123.60270691]
[104.20576477 113.69258881]
[90.53652954 110.75258636]
[85.88410950 97.56749725]
[74.62402344 87.65737915]
[63.36394119 77.74725342]
[47.89269638 74.43801117]
[43.45052338 60.22124481]
[32.19043732 50.31112289]
[20.93035507 40.40100479]
[9.67026997 30.49088287]
[1.02639043 27.10117722]
[-1.76312923 20.13745880]
[-12.73825932 9.91266060]
[-28.44886971 3.53982091]
[-26.67421150 -13.32098961]
[-9.98105431 -16.28322411]
[-2.51345968 -1.06246972]
[8.46166992 9.16232967]
[19.58039093 19.23079872]
[30.84047508 29.14091873]
[42.10055923 39.05104065]
[53.36064529 48.96115875]
[68.02649689 51.56156921]
[73.27406311 66.48717499]
[84.53414917 76.39729309]
[95.79423523 86.30741119]
[109.46347046 89.24741364]
[114.11589050 102.43250275]
[125.37597656 112.34262085]
[136.63606262 122.25274658]
[147.89614868 132.16285706]
[150.62564087 132.18193054]
[153.21260071 132.76733398]
[166.41001892 125.63794708]
[179.60745239 118.50856018]
[192.80487061 111.37918091]
[201.26916504 98.01257324]
[216.14445496 98.77088928]
[229.34187317 91.64151001]
[242.53929138 84.51212311]
[255.73670959 77.38273621]
[254.14506531 62.26536179]
[258.46453857 47.69105148]
[268.03646851 35.88228226]
[281.40115356 28.63980865]
[296.52059937 27.06805420]
[311.08923340 31.40670204]
[322.88540649 40.99413681]
[330.11029053 54.36834335]
[331.66213989 69.48986053]
[327.30432129 84.05275726]
[317.70138550 95.83629608]
[304.31768799 103.04358673]
[289.19415283 104.57555389]
[274.63699341 100.19859314]
[262.86608887 90.58016205]
[249.66867065 97.70954132]
[236.47125244 104.83892822]
[223.27383423 111.96830750]
[215.75350952 124.82497406]
[199.93424988 124.57659912]
[186.73683167 131.70597839]
[173.53941345 138.83535767]
[160.34199524 145.96475220]
[174.74864197 150.14187622]
[188.46128845 156.22160339]
[201.22996521 164.09313965]
[212.82189941 173.61296082]
[223.02578735 184.60754395]
[231.65560913 196.87644958]
[238.55404663 210.19604492]
[243.59535217 224.32350159]
[246.68763733 239.00131226]
[247.77452087 253.96188354]
[246.83618164 268.93249512]
[243.88973999 283.64025879]
[238.98889160 297.81707764]
[232.22299194 311.20446777]
[223.71536255 323.55844116]
[213.62110901 334.65374756]
[202.12423706 344.28814697]
[189.43431091 352.28604126]
[175.78268433 358.50158691]
[161.41819763 362.82147217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 57]
[25 56]
[26 55]
[27 54]
[29 52]
[30 51]
[31 50]
[33 48]
[34 47]
[35 46]
[36 45]
[38 44]
[39 43]
[59 90]
[60 89]
[61 88]
[62 87]
[64 85]
[65 84]
[66 83]
[67 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
