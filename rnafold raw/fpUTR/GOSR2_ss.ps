%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCGGAAGGGGGGCUGUGAGGACGUGUUCCGAGGAAGCCAGAGCCGGAGCCGUGGCCUGCGGGGCCGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[171.10578918 122.48318481]
[156.48187256 119.14537048]
[144.60899353 130.29109192]
[128.28117371 132.28488159]
[113.78833771 124.16296387]
[106.82933807 108.89635468]
[92.02864838 106.45921326]
[77.18132782 104.32448578]
[62.33400726 102.18976593]
[47.48668289 100.05504608]
[32.63936234 97.92031860]
[17.87852287 103.61489868]
[6.38192940 94.14507294]
[-8.37890911 99.83964539]
[-19.87550354 90.36981964]
[-32.44576645 99.56907654]
[-47.47265244 97.19265747]
[-56.16526794 85.15214539]
[-71.01258850 83.01741791]
[-87.55098724 86.74806976]
[-95.71412659 71.88874817]
[-83.69529724 59.93115616]
[-68.87786865 68.17009735]
[-54.03054428 70.30481720]
[-42.29783630 61.20102310]
[-27.21013069 63.15443039]
[-17.74078178 75.52249908]
[-4.04192162 69.67523193]
[8.51665211 79.29775238]
[22.21551132 73.45048523]
[34.77408600 83.07299805]
[49.62140656 85.20771790]
[64.46872711 87.34244537]
[79.31604767 89.47716522]
[94.16336823 91.61189270]
[102.20258331 89.51161957]
[109.56788635 94.14846039]
[118.96448517 83.84741974]
[132.14260864 79.63887024]
[145.55696106 82.54071808]
[155.65545654 91.67314911]
[159.81968689 104.52144623]
[174.44360352 107.85926056]
[186.88876343 96.60693359]
[203.41455078 94.90206909]
[217.61103821 103.21064758]
[224.08702087 118.15232849]
[238.83491516 120.89087677]
[253.58280945 123.62942505]
[268.33068848 126.36796570]
[283.07858276 129.10652161]
[296.01361084 120.42764282]
[310.93106079 123.41500854]
[319.12533569 135.80006409]
[333.87322998 138.53860474]
[348.62112427 141.27716064]
[363.36901855 144.01570129]
[377.35440063 136.15513611]
[392.16500854 142.32162476]
[396.43939209 157.78477478]
[386.89862061 170.68258667]
[370.86157227 171.12094116]
[360.63046265 158.76359558]
[345.88256836 156.02505493]
[331.13467407 153.28649902]
[316.38677979 150.54795837]
[304.29251099 159.16561890]
[289.29702759 156.59843445]
[280.34005737 143.85441589]
[265.59216309 141.11585999]
[250.84425354 138.37731934]
[236.09635925 135.63876343]
[221.34846497 132.90022278]
[212.42819214 143.04162598]
[199.53512573 147.41763306]
[186.07048035 144.75881958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[6 37]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[13 29]
[15 27]
[18 24]
[19 23]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[54 66]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
