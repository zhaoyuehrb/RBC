%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACAGGAGCCCUCAAGCUGAUCUGGUCGGGACCGGAUACAUUAUUAACCCCAGUGCAGUAGGGUCCCCAGGGGCAACCUGCCCCACAGCGCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[107.86599731 211.62094116]
[115.13735962 198.50122070]
[126.02717590 188.18560791]
[139.52117920 181.63488770]
[154.36256409 179.45921326]
[169.16972351 181.86143494]
[158.73448181 171.08619690]
[144.32225037 167.32627869]
[140.27980042 152.03022766]
[129.84455872 141.25498962]
[119.40932465 130.47975159]
[108.97408295 119.70450592]
[98.53884888 108.92926788]
[94.51281738 108.33856201]
[90.80372620 105.88116455]
[88.28154755 101.76095581]
[87.68137360 96.58200073]
[78.32902527 84.85452271]
[68.97667694 73.12705231]
[59.62433243 61.39958191]
[44.16523743 59.48799515]
[34.84769058 47.46144485]
[36.76536179 32.73534012]
[27.41301727 21.00786781]
[18.06066895 9.28039551]
[8.70832253 -2.44707656]
[2.42486739 -5.34100389]
[-0.82639843 -10.29050636]
[-0.83844697 -15.23887825]
[-9.42019653 -27.54146194]
[-23.88967705 -23.12679100]
[-39.01514435 -23.40153122]
[-53.31475449 -28.33876801]
[-65.38758087 -37.45479965]
[-74.05084991 -49.85652924]
[-78.45582581 -64.32896423]
[-78.17095184 -79.45424652]
[-73.22413635 -93.75054169]
[-64.10001373 -105.81726074]
[-51.69247818 -114.47222137]
[-37.21709442 -118.86749268]
[-22.09201241 -118.57248688]
[-7.79903078 -113.61608887]
[4.26156855 -104.48388672]
[12.90821075 -92.07055664]
[17.29378700 -77.59223175]
[16.98863983 -62.46734619]
[12.02266884 -48.17768860]
[2.88238692 -36.12321091]
[11.46413708 -23.82062721]
[20.43579483 -11.79942322]
[29.78814125 -0.07195139]
[39.14048767 11.65552044]
[48.49283600 23.38299370]
[63.27644730 24.79026604]
[72.92811584 36.55036163]
[71.35180664 52.04723358]
[80.70415497 63.77470398]
[90.05649567 75.50217438]
[99.40884399 87.22965240]
[109.31408691 98.49402618]
[119.74932861 109.26926422]
[130.18457031 120.04450989]
[140.61979675 130.81974792]
[151.05503845 141.59498596]
[166.21366882 146.12562561]
[169.50971985 160.65095520]
[179.94496155 171.42619324]
[185.57373047 172.31874084]
[190.00393677 175.14462280]
[192.67834473 179.14524841]
[207.05836487 183.41316223]
[221.43838501 187.68107605]
[235.81840515 191.94898987]
[250.19841003 196.21690369]
[264.57843018 200.48481750]
[281.48324585 199.19506836]
[287.40231323 215.08218384]
[273.77462769 225.16793823]
[260.31051636 214.86483765]
[245.93049622 210.59692383]
[231.55049133 206.32901001]
[217.17047119 202.06109619]
[202.79045105 197.79318237]
[188.41043091 193.52526855]
[197.38876343 205.54148865]
[202.32473755 219.70610046]
[202.75860596 234.69982910]
[198.64996338 249.12615967]
[190.38150024 261.64144897]
[178.72332764 271.08001709]
[164.76126099 276.56280518]
[149.79573059 277.57910156]
[135.22061157 274.03427124]
[122.39340210 266.25848389]
[112.50883484 254.97596741]
[106.48754120 241.23756409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[17 60]
[18 59]
[19 58]
[20 57]
[23 54]
[24 53]
[25 52]
[26 51]
[29 50]
[30 49]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
