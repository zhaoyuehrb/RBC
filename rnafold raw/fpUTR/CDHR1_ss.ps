%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCGCGGCUGCAGUCGCCGCUACCCCCAUUGUGGUCUCUGCCCUCCCCGCGGGCCCAGGGCAUGCUCCGUGCCCCUGCGCCCGGUCUCGGCGGCGGCAGGCGACACUCCGCGCCGGCGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[181.82121277 249.63876343]
[173.74000549 237.00175476]
[160.36479187 230.44790649]
[159.44841003 214.65325928]
[151.36718750 202.01625061]
[143.28598022 189.37924194]
[135.20475769 176.74223328]
[127.12355042 164.10522461]
[113.74833679 157.55136108]
[112.83194733 141.75672913]
[104.75073242 129.11972046]
[96.66951752 116.48270416]
[82.97641754 110.35906982]
[68.16989899 112.76053619]
[53.36338806 115.16201019]
[38.55686951 117.56348419]
[29.31154823 130.09989929]
[14.26142597 132.32441711]
[2.36684251 123.43315887]
[-12.43967342 125.83463287]
[-27.24618912 128.23609924]
[-42.05270767 130.63757324]
[-56.85922241 133.03904724]
[-62.23502731 147.42642212]
[-74.09449768 157.18595886]
[-89.24748993 159.69239807]
[-103.61793518 154.27153015]
[-113.34025574 142.38151550]
[-115.79918671 127.22074127]
[-110.33329010 112.86735535]
[-98.41287231 103.18235779]
[-83.24446106 100.77096558]
[-68.90827942 106.28182220]
[-59.26069641 118.23253632]
[-44.45418167 115.83106232]
[-29.64766312 113.42958832]
[-14.84114742 111.02811432]
[-0.03463099 108.62664032]
[8.43997478 96.43170166]
[23.42167854 93.78533936]
[36.15539551 102.75697327]
[50.96191406 100.35549927]
[65.76843262 97.95402527]
[80.57494354 95.55255127]
[65.58551788 94.98940277]
[53.50248718 86.10119629]
[48.50140381 71.95944214]
[52.31051636 57.45114136]
[63.61349106 47.58996964]
[78.50434113 45.78367233]
[91.83718872 52.65645218]
[99.00457001 65.83327484]
[97.52951050 80.76091003]
[101.91706085 66.41693878]
[106.30460358 52.07297134]
[110.69215393 37.72900391]
[115.07969666 23.38503456]
[111.71738434 7.92523336]
[122.83905792 -1.98222125]
[127.22660828 -16.32618904]
[131.61415100 -30.67015839]
[136.00169373 -45.01412582]
[140.38925171 -59.35809708]
[144.59904480 -73.75523376]
[148.63046265 -88.20333862]
[152.66188049 -102.65143585]
[156.69329834 -117.09954071]
[155.12635803 -133.98092651]
[170.91424561 -140.15985107]
[181.22221375 -126.69947052]
[171.14140320 -113.06813049]
[167.10998535 -98.62002563]
[163.07856750 -84.17192078]
[159.04714966 -69.72381592]
[160.29324341 -62.35642242]
[154.73321533 -54.97054672]
[150.34567261 -40.62657928]
[145.95811462 -26.28261185]
[141.57057190 -11.93864250]
[137.18302917 2.40532565]
[140.85916138 16.83914948]
[129.42366028 27.77258110]
[125.03611755 42.11655045]
[120.64857483 56.46051788]
[116.26102448 70.80448914]
[111.87348175 85.14845276]
[114.54891205 89.51226807]
[115.81736755 94.17588806]
[115.72435760 98.72321320]
[114.43006897 102.78662872]
[112.18630981 106.07643127]
[109.30652618 108.40148926]
[117.38774109 121.03849792]
[125.46895599 133.67550659]
[139.42219543 141.13325500]
[139.76055908 156.02400208]
[147.84176636 168.66101074]
[155.92298889 181.29801941]
[164.00419617 193.93502808]
[172.08541870 206.57203674]
[186.03865051 214.02978516]
[186.37701416 228.92054749]
[194.45822144 241.55755615]
[207.04899597 240.65193176]
[218.74667358 245.20002747]
[227.31919861 254.26728821]
[231.15956116 266.06341553]
[229.58666992 278.29565430]
[222.96534729 288.61431885]
[230.41172791 301.63549805]
[237.85810852 314.65670776]
[245.30448914 327.67788696]
[252.75086975 340.69906616]
[260.19726562 353.72027588]
[274.63015747 361.50634766]
[274.83312988 377.90423584]
[260.59738159 386.04519653]
[246.56739807 377.55450439]
[247.17605591 361.16665649]
[239.72967529 348.14544678]
[232.28329468 335.12426758]
[224.83691406 322.10308838]
[217.39054871 309.08187866]
[209.94416809 296.06069946]
[192.40078735 295.01800537]
[178.82360840 283.61541748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[10 94]
[11 93]
[12 92]
[13 44]
[14 43]
[15 42]
[16 41]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[53 86]
[54 85]
[55 84]
[56 83]
[57 82]
[59 80]
[60 79]
[61 78]
[62 77]
[63 76]
[64 74]
[65 73]
[66 72]
[67 71]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
