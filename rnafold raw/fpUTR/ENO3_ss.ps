%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAUGCGCAGCCUGAGAGGGGGUGAGCUGACACUGUCCCAGCUGCCACCUAGACUCGGAGCUCCAUCCAAACCUCCAGCGAAGACAUCCCAGGUCGGGUGAAUCUUCCAGCCCUGGGGGUGGAGGUAGUAAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[151.44703674 140.12777710]
[145.55618286 133.93955994]
[140.94177246 126.74016571]
[137.77368164 118.78933716]
[136.16952515 110.37461853]
[121.21643829 109.18928528]
[106.26334381 108.00394440]
[98.54576874 110.57334137]
[90.98697662 106.61910248]
[82.04605103 108.87357330]
[75.74579620 104.88937378]
[60.86154175 103.02955627]
[45.97728729 101.16974640]
[31.07296371 99.47824860]
[16.15047836 97.95528412]
[1.22799253 96.43231964]
[-13.69449329 94.90934753]
[-28.61697960 93.38638306]
[-46.52866364 102.51287842]
[-61.78915405 90.71889496]
[-76.76521301 89.87179565]
[-91.74127960 89.02469635]
[-106.72595215 88.34688568]
[-121.71733856 87.83844757]
[-136.70870972 87.33001709]
[-145.47634888 90.18507385]
[-152.03205872 86.63688660]
[-167.00811768 85.78978729]
[-181.98419189 84.94268799]
[-196.96025085 84.09558105]
[-211.93630981 83.24848175]
[-220.91316223 95.79518127]
[-235.25665283 101.47563934]
[-250.38984680 98.47725677]
[-261.48376465 87.75679016]
[-264.99841309 72.73510742]
[-259.81222534 58.20557785]
[-247.58016968 48.80451584]
[-232.20539856 47.53176498]
[-218.59394836 54.79346085]
[-211.08920288 68.27242279]
[-196.11314392 69.11952209]
[-181.13708496 69.96662140]
[-166.16102600 70.81372070]
[-151.18496704 71.66082764]
[-136.20028687 72.33863831]
[-121.20890045 72.84706879]
[-106.21752167 73.35550690]
[-99.36824036 70.41367340]
[-90.89417267 74.04862976]
[-75.91811371 74.89573669]
[-60.94205475 75.74283600]
[-53.88243103 68.21374512]
[-43.61900711 65.80735016]
[-33.53493118 69.56774139]
[-27.09401321 78.46389771]
[-12.17152882 79.98686218]
[2.75095725 81.50982666]
[17.67344284 83.03279877]
[32.59592819 84.55576324]
[39.62878799 82.08473969]
[47.83710098 86.28548431]
[62.72135925 88.14530182]
[77.60561371 90.00511932]
[92.50994110 91.69661713]
[107.44867706 93.05085754]
[122.40177155 94.23619080]
[137.35485840 95.42152405]
[148.39291382 75.57338715]
[167.67495728 63.69473267]
[190.23959351 62.76887894]
[210.31645203 72.97025299]
[222.80186462 91.63572693]
[237.58686829 89.10522461]
[252.37188721 86.57472992]
[267.15689087 84.04423523]
[281.94192505 81.51373291]
[296.72692871 78.98323822]
[311.51193237 76.45274353]
[323.80902100 66.49825287]
[337.65917969 71.97756958]
[325.24267578 63.56147003]
[319.98089600 49.51462936]
[323.81240845 35.01222610]
[335.32556152 25.39727974]
[350.27865601 24.21215248]
[363.16265869 31.89347267]
[369.23077393 45.61126709]
[366.24740601 60.31158829]
[355.31225586 70.57820129]
[370.31130981 70.74771118]
[385.31036377 70.91721344]
[400.30938721 71.08672333]
[415.30844116 71.25623322]
[430.30749512 71.42573547]
[444.19421387 63.84487915]
[456.83322144 71.72550964]
[470.71997070 64.14465332]
[483.35897827 72.02528381]
[498.35803223 72.19478607]
[507.51162720 59.66516876]
[522.29205322 54.94089890]
[537.01593018 59.83855438]
[546.02160645 72.47489166]
[545.84625244 87.99097443]
[536.55731201 100.42055511]
[521.72650146 104.98420715]
[507.05661011 99.92711639]
[498.18850708 87.19383240]
[483.18948364 87.02432251]
[470.37557983 94.61730957]
[456.66372681 86.72454834]
[443.84982300 94.31753540]
[430.13796997 86.42478180]
[415.13894653 86.25527191]
[400.13989258 86.08576202]
[385.14083862 85.91625977]
[370.14181519 85.74674988]
[355.14276123 85.57724762]
[340.18966675 86.76258087]
[328.95010376 96.53607178]
[314.04241943 91.23775482]
[299.25741577 93.76824951]
[284.47241211 96.29875183]
[269.68740845 98.82924652]
[254.90238953 101.35974121]
[240.11737061 103.89023590]
[225.33235168 106.42073822]
[224.56274414 114.83943939]
[222.20840454 122.96660614]
[218.35209656 130.50646973]
[213.13122559 137.18405151]
[206.73306274 142.75524902]
[199.38795471 147.01571655]
[191.36108398 149.80833435]
[182.94284058 151.02906799]
[174.43838501 150.63081360]
[166.15649414 148.62515259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 68]
[6 67]
[7 66]
[9 65]
[11 64]
[12 63]
[13 62]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[20 52]
[21 51]
[22 50]
[23 48]
[24 47]
[25 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[73 128]
[74 127]
[75 126]
[76 125]
[77 124]
[78 123]
[79 122]
[81 120]
[90 119]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[97 112]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
