%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACUUCCGGUGUUACCUGUGUCGUUACCGGGAGCUGUAAACAAGGUGUGCAAGCAUCUGAAGAGCUGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[84.97764587 117.33341217]
[76.89499664 130.93420410]
[62.00420761 130.59713745]
[49.01382828 138.09713745]
[36.02344513 145.59713745]
[34.73882294 155.46907043]
[28.98413849 163.41957092]
[20.26107979 167.60241699]
[10.73946381 167.12567139]
[2.71794558 162.23857117]
[-11.11000156 168.05130005]
[-24.93794823 173.86404419]
[-37.19641113 185.57585144]
[-51.84399796 177.03860474]
[-47.69524765 160.60011292]
[-30.75068283 160.03608704]
[-16.92273521 154.22335815]
[-3.09478831 148.41062927]
[7.37859869 130.83181763]
[28.52344513 132.60675049]
[41.51382828 125.10675049]
[54.50420761 117.60675049]
[61.65769958 104.54241943]
[77.47764587 104.34303284]
[78.23680878 92.75557709]
[84.57392120 83.02489471]
[94.86477661 77.64495850]
[106.47180176 77.99468231]
[116.42008972 83.98441315]
[129.99249268 77.59772491]
[143.56489563 71.21103668]
[157.13729858 64.82434845]
[166.32969666 51.94760132]
[181.14006042 53.52951050]
[194.71246338 47.14282227]
[208.28486633 40.75613403]
[221.85726929 34.36944199]
[231.04965210 21.49269676]
[245.86001587 23.07460594]
[246.93113708 11.94407082]
[252.62748718 2.41770363]
[261.78884888 -3.70173240]
[272.60739136 -5.29163313]
[282.98440552 -2.11494160]
[290.93728638 5.14756060]
[305.20312500 0.51230574]
[319.46896362 -4.12294912]
[333.73483276 -8.75820446]
[348.00067139 -13.39345932]
[362.26651001 -18.02871323]
[372.83160400 -30.57107735]
[388.92645264 -27.42663193]
[393.99407959 -11.83011723]
[382.82131958 0.17411290]
[366.90176392 -3.76286626]
[352.63592529 0.87238872]
[338.37008667 5.50764370]
[324.10421753 10.14289856]
[309.83837891 14.77815342]
[295.57254028 19.41340828]
[288.42831421 37.24956512]
[270.36880493 44.62259674]
[252.24670410 36.64701080]
[244.02511597 49.06694031]
[228.24395752 47.94184875]
[214.67155457 54.32853699]
[201.09915161 60.71522903]
[187.52674866 67.10191345]
[179.30514526 79.52184296]
[163.52400208 78.39675140]
[149.95158386 84.78343964]
[136.37918091 91.17013550]
[122.80677795 97.55682373]
[117.68320465 114.60898590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[3 22]
[4 21]
[5 20]
[10 18]
[11 17]
[12 16]
[29 73]
[30 72]
[31 71]
[32 70]
[34 68]
[35 67]
[36 66]
[37 65]
[39 63]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
