%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGCUUCCGUGUCUGCGCCCUGAGACAUUUUUGGCGCCGGCCCCAGCCUGAGCGGGGACGGCGGCCGGGAGGGCGCGGCCCGGGUUCCCGUUCCCCGCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[17.02299881 144.51951599]
[3.12265515 150.15693665]
[-10.77768898 155.79434204]
[-24.67803383 161.43176270]
[-38.57837677 167.06918335]
[-52.47872162 172.70658875]
[-56.27574158 189.10992432]
[-68.93731689 199.95597839]
[-85.39971161 201.16503906]
[-99.23043823 192.46112061]
[-112.95761871 198.50798035]
[-126.68480682 204.55482483]
[-140.41198730 210.60168457]
[-154.13917542 216.64852905]
[-167.86634827 222.69538879]
[-171.02075195 237.88845825]
[-182.52560425 248.30085754]
[-197.95704651 249.92881775]
[-211.38137817 242.14634705]
[-217.63667297 227.94595337]
[-214.31764221 212.78800964]
[-202.70051575 202.50102234]
[-187.25231934 201.04055786]
[-173.91320801 208.96820068]
[-160.18601990 202.92134094]
[-146.45883179 196.87449646]
[-132.73165894 190.82763672]
[-119.00447083 184.78079224]
[-105.27728271 178.73394775]
[-103.64377594 165.39408875]
[-95.53424835 154.54092407]
[-83.00487518 149.10678101]
[-69.32320404 150.62661743]
[-58.11613464 158.80624390]
[-44.21578979 153.16883850]
[-30.31544685 147.53141785]
[-16.41510201 141.89401245]
[-2.51475859 136.25659180]
[11.38558578 130.61917114]
[25.20086670 124.77640533]
[38.92805099 118.72955322]
[52.65523529 112.68270111]
[61.18345642 100.47128296]
[76.93170929 101.98886871]
[90.65889740 95.94201660]
[96.28643036 89.97590637]
[104.88361359 89.92607880]
[118.78395844 84.28866577]
[125.23113251 68.11004639]
[141.04331970 61.65160751]
[156.35945129 68.41926575]
[170.08663940 62.37240982]
[183.81381226 56.32556152]
[197.54100037 50.27870941]
[211.26818848 44.23185730]
[224.99537659 38.18500519]
[238.72254944 32.13815308]
[252.44973755 26.09130287]
[266.17691040 20.04445076]
[279.90411377 13.99759960]
[283.29479980 -1.02935290]
[294.74981689 -11.06112194]
[309.73812866 -12.40825748]
[322.49295044 -4.76287270]
[336.22015381 -10.80972481]
[349.94732666 -16.85657501]
[363.67449951 -22.90342712]
[377.40170288 -28.95027924]
[386.91177368 -41.59420776]
[401.67816162 -39.64411163]
[410.92794800 -53.18567276]
[427.25747681 -51.67628479]
[433.86834717 -36.66867828]
[423.95986938 -23.60139084]
[407.72503662 -25.91692924]
[399.19680786 -13.70551109]
[383.44854736 -15.22309399]
[369.72137451 -9.17624283]
[355.99417114 -3.12939143]
[342.26699829 2.91745996]
[328.53982544 8.96431160]
[325.57153320 23.53576660]
[314.46072388 33.68534088]
[299.32702637 35.36594772]
[285.95095825 27.72478485]
[272.22378540 33.77163696]
[258.49658203 39.81848526]
[244.76940918 45.86533737]
[231.04222107 51.91218948]
[217.31503296 57.95904160]
[203.58786011 64.00588989]
[189.86067200 70.05274200]
[176.13348389 76.09959412]
[162.40629578 82.14644623]
[159.42445374 94.77777100]
[149.53117371 103.47718811]
[136.23316956 104.85963440]
[124.42137146 98.18901062]
[110.52102661 103.82642365]
[96.70574188 109.66919708]
[82.97856140 115.71604919]
[73.46848297 128.35998535]
[58.70208740 126.40988159]
[44.97490311 132.45674133]
[31.24771881 138.50358582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[40 105]
[41 104]
[42 103]
[44 101]
[45 100]
[47 99]
[48 98]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[64 81]
[65 80]
[66 79]
[67 78]
[68 77]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
