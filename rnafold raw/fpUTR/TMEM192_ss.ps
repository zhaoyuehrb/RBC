%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCAGGUCCCAGAAGGUGGCGAGUUUCGCGGCCAGAGGCUUACAGGUCCAGGUGGAGAGGCCGGGCUGGCCAGGGCUUCGGCCUCCGGCGUCGGGAA\
) } def
/len { sequence length } bind def

/coor [
[84.46548462 108.49217987]
[69.49508667 109.43403625]
[54.52468491 110.37589264]
[45.32468033 119.58319092]
[32.71778107 119.96430969]
[23.58255768 111.86385345]
[8.58996010 112.33501434]
[-6.40263844 112.80617523]
[-21.39523697 113.27733612]
[-36.38783646 113.74850464]
[-49.93816376 121.91545868]
[-62.90219116 114.58174896]
[-68.57642365 122.51151276]
[-77.18906403 126.77782440]
[-86.65683746 126.49497986]
[-94.75738525 121.86047363]
[-99.65089417 114.07788849]
[-114.62129211 113.13603210]
[-129.59169006 112.19417572]
[-143.85046387 119.04969025]
[-156.06678772 110.52850342]
[-171.03720093 109.58664703]
[-186.00759888 108.64479065]
[-200.97799683 107.70293427]
[-217.16552734 112.74279022]
[-226.48957825 98.58304596]
[-215.46435547 85.70357513]
[-200.03613281 92.73252869]
[-185.06573486 93.67438507]
[-170.09533691 94.61624908]
[-155.12493896 95.55810547]
[-141.93695068 88.63522339]
[-128.64984131 97.22377777]
[-113.67943573 98.16563416]
[-98.70903778 99.10749054]
[-81.34420776 88.14429474]
[-63.37335205 99.58914948]
[-50.89539337 91.45589447]
[-36.85899734 98.75590515]
[-21.86639786 98.28474426]
[-6.87379980 97.81358337]
[8.11879826 97.34241486]
[23.11139679 96.87125397]
[37.39393616 86.80850220]
[53.58282471 95.40549469]
[68.55322266 94.46363831]
[83.52362823 93.52177429]
[98.33388519 82.37438202]
[114.97063446 90.54915619]
[129.85235596 88.66915894]
[144.73406982 86.78916168]
[159.58442688 84.67564392]
[172.00431824 74.87477875]
[185.78527832 80.52584076]
[200.60060120 78.17932129]
[213.02049255 68.37845612]
[226.80145264 74.02951050]
[234.95927429 69.52310944]
[242.11831665 71.84960175]
[257.00003052 69.96960449]
[271.88177490 68.08959961]
[286.76348877 66.20960236]
[301.64520264 64.32960510]
[316.52691650 62.44960785]
[331.40863037 60.56961060]
[346.29037476 58.68960953]
[361.14071655 56.57609177]
[375.95605469 54.22957611]
[390.77136230 51.88305664]
[399.85696411 38.95140839]
[415.43966675 36.31417847]
[428.27453613 45.53598404]
[430.74685669 61.14569473]
[421.38989258 73.88234711]
[405.75491333 76.18950653]
[393.11788940 66.69837952]
[378.30255127 69.04489899]
[363.48724365 71.39141846]
[357.26150513 75.62284851]
[348.17034912 73.57132721]
[333.28863525 75.45133209]
[318.40692139 77.33132935]
[303.52520752 79.21132660]
[288.64349365 81.09132385]
[273.76174927 82.97132111]
[258.88003540 84.85131836]
[243.99832153 86.73132324]
[229.14796448 88.84484100]
[217.78776550 98.47786713]
[202.94711304 92.99464417]
[188.13179016 95.34116364]
[176.77159119 104.97418976]
[161.93093872 99.49096680]
[155.70523071 103.72239685]
[146.61407471 101.67088318]
[131.73234558 103.55088043]
[116.85063171 105.43087769]
[111.08581543 113.80372620]
[101.66611481 117.62561798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[12 37]
[17 35]
[18 34]
[19 33]
[21 31]
[22 30]
[23 29]
[24 28]
[49 97]
[50 96]
[51 95]
[52 93]
[54 91]
[55 90]
[57 88]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 78]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
