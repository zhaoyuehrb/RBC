%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCUGGGGUUGGAGUGGCCGCAACGGGCGGGGCGGGGCGGGGCCGGGCAAGUUUGUUCCCCGAGUUCGGAGCCUAGGAGCCCCCCGCGGCUGCGGCGCAGGUGCCCUCGGCCUGAGUCGGG\
) } def
/len { sequence length } bind def

/coor [
[94.58273315 415.58590698]
[94.20578003 400.59063721]
[93.82882690 385.59539795]
[90.47805786 378.91311646]
[93.63559723 370.21960449]
[93.63559723 355.21960449]
[93.63559723 340.21960449]
[85.89830017 327.49234009]
[93.63559723 313.69216919]
[93.63559723 298.69216919]
[93.63559723 283.69216919]
[93.63559723 268.69216919]
[93.63559723 253.69216919]
[93.63559723 238.69216919]
[90.45381165 231.92781067]
[93.82882690 223.31640625]
[94.20578003 208.32113647]
[91.19498444 201.47895813]
[94.78533936 192.95509338]
[95.53900146 177.97402954]
[96.29267120 162.99298096]
[96.10417938 147.99415588]
[94.97427368 133.03677368]
[93.84437561 118.07939148]
[82.92477417 108.55529022]
[81.83332825 94.10693359]
[91.19824219 83.05050659]
[90.06833649 68.09312439]
[88.93843842 53.13573837]
[80.18359375 39.95759964]
[86.94020844 26.68366241]
[85.81031036 11.72627926]
[77.05546570 -1.45185935]
[83.81208038 -14.72579765]
[82.68218231 -29.68318176]
[78.87875366 -38.11413956]
[81.71665192 -45.02981949]
[80.96298218 -60.01087570]
[80.20932007 -74.99192810]
[79.45565796 -89.97298431]
[78.70198822 -104.95404053]
[77.19656372 -119.87830353]
[74.94318390 -134.70808411]
[72.68979645 -149.53785706]
[60.85764694 -163.57958984]
[67.74674988 -179.66773987]
[65.12140656 -194.43620300]
[62.49605942 -209.20468140]
[59.87071609 -223.97314453]
[57.24536896 -238.74160767]
[54.62002182 -253.51007080]
[39.72039795 -256.40240479]
[26.87383080 -264.48510742]
[17.81771088 -276.66506958]
[13.77680588 -291.29501343]
[15.29761410 -306.39639282]
[22.17445946 -319.92684937]
[33.47730255 -330.05651855]
[47.67753220 -335.41543579]
[62.85467911 -335.27883911]
[76.95616150 -329.66525269]
[88.07486725 -319.33380127]
[94.70708466 -305.68176270]
[95.95585632 -290.55545044]
[91.65230560 -276.00057983]
[82.37844086 -263.98559570]
[69.38848877 -256.13540649]
[72.01383209 -241.36695862]
[74.63918304 -226.59848022]
[77.26452637 -211.83001709]
[79.88986969 -197.06155396]
[82.51522064 -182.29309082]
[92.29559326 -175.05639648]
[94.55077362 -162.69146729]
[87.51957703 -151.79124451]
[89.77295685 -136.96145630]
[92.02634430 -122.13168335]
[94.32608032 -120.34801483]
[96.01570892 -117.49501038]
[96.66439819 -113.81650543]
[95.94393921 -109.71475220]
[93.68304443 -105.70770264]
[94.43670654 -90.72664642]
[95.19037628 -75.74559021]
[95.94403839 -60.76453781]
[96.69770050 -45.78348541]
[97.63956451 -30.81308365]
[98.76946259 -15.85570049]
[107.44348907 -3.74741364]
[100.76769257 10.59637737]
[101.89759064 25.55376053]
[110.57161713 37.66204834]
[103.89582062 52.00583649]
[105.02572632 66.96321869]
[106.15562439 81.92060852]
[117.07522583 91.44470978]
[118.16667175 105.89306641]
[108.80175781 116.94949341]
[109.93166351 131.90687561]
[111.06156158 146.86425781]
[123.06722260 137.87181091]
[137.64588928 141.40205383]
[144.20773315 154.89065552]
[137.98628235 168.53959656]
[123.50075531 172.43440247]
[111.27371979 163.74664307]
[110.52005768 178.72769165]
[109.76639557 193.70875549]
[109.20104218 208.69808960]
[108.82408905 223.69335938]
[108.63559723 238.69216919]
[108.63559723 253.69216919]
[108.63559723 268.69216919]
[108.63559723 283.69216919]
[108.63559723 298.69216919]
[108.63559723 313.69216919]
[116.37290192 327.49234009]
[108.63559723 340.21960449]
[108.63559723 355.21960449]
[108.63559723 370.21960449]
[108.82408905 385.21844482]
[109.20104218 400.21368408]
[109.57799530 415.20895386]
[112.25209045 434.40530396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[5 120]
[6 119]
[7 118]
[9 116]
[10 115]
[11 114]
[12 113]
[13 112]
[14 111]
[16 110]
[17 109]
[19 108]
[20 107]
[21 106]
[22 100]
[23 99]
[24 98]
[27 95]
[28 94]
[29 93]
[31 91]
[32 90]
[34 88]
[35 87]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[42 77]
[43 76]
[44 75]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
