%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGCCCGACUGGCCGCGCACCCAGCUGGCCCGCCCCUGCCCGACACGACCGCUGCCCGCCCCUUGCCUUCCUGACCCAGGGGCUCCGCUGGCUGCGGUCGCCUGGGAGCUGCCGCCAGGGCCAGGAGGGGAGCGGCACCUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[68.08049011 607.89056396]
[53.48096848 602.90478516]
[43.91247940 590.80322266]
[42.42829132 575.44744873]
[49.50200272 561.73736572]
[62.87641907 554.04785156]
[63.51736450 539.06158447]
[64.15830994 524.07525635]
[52.94900894 516.75140381]
[46.78893280 504.74069214]
[47.39087677 491.14721680]
[54.70413971 479.54443359]
[66.89968872 473.03567505]
[67.86074066 458.06646729]
[68.82179260 443.09729004]
[69.78284454 428.12811279]
[70.74389648 413.15893555]
[60.94020844 404.73416138]
[57.75278091 392.00585938]
[62.56992340 379.59130859]
[73.83339691 372.12863159]
[75.11412048 357.18341064]
[76.39484406 342.23818970]
[66.63391113 331.04623413]
[67.71984863 315.87139893]
[79.52517700 305.70913696]
[80.80590057 290.76391602]
[82.08662415 275.81869507]
[83.36734009 260.87347412]
[84.64806366 245.92823792]
[85.92878723 230.98301697]
[87.20950317 216.03778076]
[88.17056274 201.06860352]
[88.81150818 186.08230591]
[78.58126068 175.31765747]
[79.01778412 160.11029053]
[90.37810516 149.45285034]
[83.19170380 136.40658569]
[91.51161194 122.94963837]
[92.15256500 107.96333313]
[92.63333130 92.97103882]
[92.95388031 77.97446442]
[85.51325226 64.01210022]
[93.52076721 51.45307922]
[82.86661530 40.08968353]
[83.40532684 24.88559151]
[94.30424500 14.79851341]
[94.62479401 -0.19806099]
[94.94533539 -15.19463539]
[95.26588440 -30.19120979]
[95.58642578 -45.18778610]
[95.90697479 -60.18436050]
[96.22752380 -75.18093109]
[88.78689575 -89.14330292]
[96.79440308 -101.70232391]
[97.11495209 -116.69889832]
[97.43550110 -131.69546509]
[89.99487305 -145.65783691]
[98.00238037 -158.21685791]
[98.32292938 -173.21342468]
[87.39299774 -179.44482422]
[80.21466064 -189.68920898]
[78.11346436 -201.94700623]
[81.43124390 -213.85768127]
[89.47228241 -223.15429688]
[100.64812469 -228.09498596]
[101.60917664 -243.06416321]
[102.57022858 -258.03335571]
[99.93999481 -264.22406006]
[100.76045227 -269.93795776]
[103.90568542 -273.61734009]
[105.50549316 -288.53176880]
[107.10530090 -303.44619751]
[108.70510101 -318.36065674]
[104.38255310 -334.75430298]
[118.93893433 -343.44613647]
[131.32069397 -331.86477661]
[123.61954498 -316.76086426]
[122.01974487 -301.84640503]
[120.41993713 -286.93197632]
[118.82012939 -272.01751709]
[117.53941345 -257.07229614]
[116.57835388 -242.10311890]
[115.61730194 -227.13392639]
[129.69541931 -216.56507874]
[134.70658875 -199.52658081]
[128.48336792 -182.72564697]
[113.31950378 -172.89288330]
[112.99896240 -157.89631653]
[120.46251678 -145.00660706]
[112.43207550 -131.37492371]
[112.11152649 -116.37834930]
[111.79098511 -101.38177490]
[119.25453949 -88.49206543]
[111.22409821 -74.86038971]
[110.90354919 -59.86381149]
[110.58300018 -44.86723709]
[110.26245880 -29.87066460]
[109.94190979 -14.87408924]
[109.62136841 0.12248529]
[109.30081940 15.11905956]
[119.75876617 25.66263390]
[119.64731598 40.87585831]
[108.51734161 51.77362823]
[115.98089600 64.66333771]
[107.95045471 78.29501343]
[107.62991333 93.29158783]
[110.63706970 100.83670807]
[107.13886261 108.60427856]
[106.49791718 123.59058380]
[113.63847351 137.70875549]
[105.36440277 150.09379578]
[115.77329254 161.68228149]
[114.90979767 176.87138367]
[103.79780579 186.72325134]
[103.15686035 201.70954895]
[105.91879272 207.84262085]
[105.22062683 213.57275391]
[102.15473175 217.31851196]
[100.87400818 232.26373291]
[99.59329224 247.20895386]
[98.31256866 262.15417480]
[97.03184509 277.09939575]
[95.75112152 292.04464722]
[94.47040558 306.98986816]
[104.37461090 319.01251221]
[102.86287689 334.15084839]
[91.34006500 343.51892090]
[90.05934906 358.46414185]
[88.77862549 373.40936279]
[100.28276825 386.54284668]
[98.79386902 403.60064697]
[85.71308136 414.11999512]
[84.75202942 429.08917236]
[83.79097748 444.05834961]
[82.82991791 459.02752686]
[81.86886597 473.99670410]
[95.01623535 484.58438110]
[99.24582672 500.75515747]
[93.08935547 516.11645508]
[79.14460754 524.71618652]
[78.50366211 539.70251465]
[77.86271667 554.68878174]
[90.53175354 563.49218750]
[96.40904999 577.75616455]
[93.61917877 592.92913818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 143]
[7 142]
[8 141]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[21 130]
[22 129]
[23 128]
[26 125]
[27 124]
[28 123]
[29 122]
[30 121]
[31 120]
[32 119]
[33 116]
[34 115]
[37 112]
[39 110]
[40 109]
[41 107]
[42 106]
[44 104]
[47 101]
[48 100]
[49 99]
[50 98]
[51 97]
[52 96]
[53 95]
[55 93]
[56 92]
[57 91]
[59 89]
[60 88]
[66 84]
[67 83]
[68 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
