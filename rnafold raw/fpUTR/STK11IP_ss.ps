%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGACUUCCUUUCCAUCAUUGAUAGGCGCCGGGCAGCUGAGCUGGUAGGAGGACCAGACGGGGAGGUUCGGCUCCGCCCCCCAGCGUCCCGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[-83.48945618 276.58026123]
[-92.68305969 288.43258667]
[-95.02761841 304.07910156]
[-108.94191742 309.39337158]
[-118.13552856 321.24569702]
[-127.32913208 333.09802246]
[-136.52273560 344.95034790]
[-134.29353333 360.59664917]
[-143.84751892 373.18618774]
[-159.51649475 375.24984741]
[-172.00433350 365.56329346]
[-173.90222168 349.87338257]
[-164.08416748 337.48864746]
[-148.37506104 335.75674438]
[-139.18145752 323.90441895]
[-129.98785400 312.05209351]
[-120.79424286 300.19976807]
[-119.10727692 285.40100098]
[-104.53538513 279.23898315]
[-95.34178162 267.38665771]
[-98.13937378 260.94775391]
[-98.70867157 253.89788818]
[-96.95473480 246.99194336]
[-93.03321838 240.98034668]
[-87.33713531 236.52757263]
[-80.45771027 234.13877869]
[-73.12304688 234.10264587]
[-66.12110138 236.45692444]
[-54.86943054 226.53724670]
[-43.61776733 216.61756897]
[-42.94174576 201.78253174]
[-31.67226601 191.56228638]
[-16.11648941 192.37193298]
[-4.86482334 182.45225525]
[6.38684273 172.53257751]
[17.63850784 162.61289978]
[18.31452751 147.77786255]
[29.58400726 137.55760193]
[45.13978577 138.36726379]
[56.39145279 128.44758606]
[67.64311981 118.52790833]
[78.89478302 108.60823059]
[77.68873596 95.33747101]
[84.10832214 83.66028595]
[95.95942688 77.56775665]
[98.30594635 62.75242996]
[100.65246582 47.93710327]
[102.99897766 33.12178040]
[105.34549713 18.30645561]
[95.85437012 5.66944265]
[98.16153717 -9.96553612]
[110.89818573 -19.32252502]
[126.50789642 -16.85018921]
[135.72970581 -4.01532221]
[133.09246826 11.56737804]
[120.16082001 20.65297127]
[117.81430817 35.46829605]
[115.46778870 50.28362274]
[113.12126923 65.09894562]
[110.77475739 79.91426849]
[114.65231323 82.54028320]
[117.91133881 85.90334320]
[120.41426086 89.86147308]
[135.29597473 87.98146820]
[150.17770386 86.10147095]
[165.05941772 84.22147369]
[177.78103638 74.81556702]
[191.37768555 80.89670563]
[206.25941467 79.01670837]
[214.57775879 65.77513885]
[229.47727966 61.02768326]
[243.92286682 67.01593018]
[251.09375000 80.91242218]
[247.60406494 96.15565491]
[235.10153198 105.54824066]
[219.48947144 104.65528870]
[208.13940430 93.89842224]
[193.25769043 95.77842712]
[181.60050964 105.04986572]
[166.93942261 99.10319519]
[152.05769348 100.98319244]
[137.17597961 102.86318970]
[122.29425812 104.74318695]
[109.37974548 120.77383423]
[88.81446075 119.85990143]
[77.56279755 129.77957153]
[66.31112671 139.69924927]
[55.05946350 149.61892700]
[53.91308212 165.15351868]
[42.36098099 175.05320740]
[27.55818748 173.86456299]
[16.30652046 183.78424072]
[5.05485487 193.70391846]
[-6.19681120 203.62359619]
[-7.34319448 219.15818787]
[-18.89529419 229.05787659]
[-33.69808960 227.86923218]
[-44.94975281 237.78890991]
[-56.20141983 247.70860291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[4 17]
[5 16]
[6 15]
[7 14]
[28 99]
[29 98]
[30 97]
[33 94]
[34 93]
[35 92]
[36 91]
[39 88]
[40 87]
[41 86]
[42 85]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[63 83]
[64 82]
[65 81]
[66 80]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
