%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGACGUCACGGCGCCACUUUCCGGCCGGUGACAGAGUCCAGCGGAGUUGUGGGGGCCGGGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[-8.25183582 276.19033813]
[-13.00509739 278.00292969]
[-21.37410736 290.45120239]
[-29.74311829 302.89947510]
[-30.32180405 319.28842163]
[-44.92934418 326.74172974]
[-58.53875351 317.59207153]
[-57.14984131 301.25186157]
[-42.19139862 294.53045654]
[-33.82238770 282.08218384]
[-25.45337677 269.63391113]
[-17.65961838 256.81762695]
[-10.45726395 243.65988159]
[-3.25490952 230.50213623]
[3.94744444 217.34440613]
[11.14979839 204.18666077]
[18.35215187 191.02891541]
[17.39946747 188.04556274]
[17.78182030 184.45045471]
[19.76191902 180.84124756]
[23.34290695 177.90635681]
[28.24323273 176.31668091]
[37.70955276 164.68099976]
[47.17587280 153.04533386]
[56.64218903 141.40966797]
[66.10851288 129.77400208]
[75.57482910 118.13832855]
[85.04114532 106.50266266]
[84.58917236 94.65600586]
[92.27828979 85.63243103]
[104.04656219 84.19882202]
[107.46044159 68.75032806]
[121.70694733 64.40447998]
[131.69303894 53.21172333]
[141.67915344 42.01896667]
[151.66525269 30.82621193]
[151.75912476 17.71054840]
[160.58776855 8.56641769]
[172.88212585 8.04756451]
[183.36730957 -2.67907834]
[193.85250854 -13.40572071]
[200.60046387 -28.95890236]
[217.41383362 -26.78020668]
[219.97468567 -10.02078152]
[204.57914734 -2.92053413]
[194.09396362 7.80610847]
[183.60876465 18.53275108]
[180.36418152 35.63139343]
[162.85800171 40.81231308]
[152.87190247 52.00506973]
[142.88580322 63.19782257]
[132.89970398 74.39057922]
[130.20008850 89.03849030]
[115.23931885 94.18492126]
[112.41510773 110.57908630]
[96.67681885 115.96897888]
[87.21049500 127.60465240]
[77.74417877 139.24031067]
[68.27786255 150.87599182]
[58.81154251 162.51165771]
[49.34522247 174.14732361]
[39.87890244 185.78298950]
[31.50989151 198.23127747]
[24.30753708 211.38900757]
[17.10518265 224.54675293]
[9.90282917 237.70449829]
[2.70047545 250.86222839]
[-4.50187874 264.01995850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[22 62]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[31 54]
[33 52]
[34 51]
[35 50]
[36 49]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
