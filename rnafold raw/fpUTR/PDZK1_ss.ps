%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAGUGAGUUGCAAGCCUAAUGCUCACCUGCAGAGACAGAAUUCCUGAGUGAACGAACAGAGCAGCUCCUCUUCCAUCUCCAGGGUCUCAUUCUGUUGCCCAGGCUGGAGUGCAGUGGUGCGAUCUCGGCUCACAGCAACCUCUCUGCCUCCAGAA\
) } def
/len { sequence length } bind def

/coor [
[116.77723694 157.00193787]
[101.86893463 155.34587097]
[91.09378815 144.91053772]
[88.96102905 130.06292725]
[96.36412811 117.01570892]
[87.21299744 128.90086365]
[78.06187439 140.78601074]
[68.91074371 152.67117310]
[59.75961685 164.55632019]
[50.60848999 176.44148254]
[57.51029587 190.05499268]
[57.81333542 205.31510925]
[51.45744705 219.19189453]
[39.70459366 228.93013000]
[24.88831139 232.59626770]
[9.95038700 229.46240234]
[-2.14324594 220.15074158]
[-8.99138737 206.51016235]
[-9.23433304 191.24897766]
[-2.82384682 177.39730835]
[8.96726513 167.70544434]
[23.79786873 164.09767151]
[38.72333527 167.29034424]
[47.87446213 155.40519714]
[57.02559280 143.52003479]
[66.17671967 131.63488770]
[75.32784271 119.74973297]
[84.47897339 107.86457825]
[85.67072296 92.91200256]
[78.51771545 79.72737122]
[71.36470032 66.54274750]
[57.57269669 65.75363922]
[46.07056808 58.29983902]
[39.81604767 46.22595215]
[40.35392380 32.74739838]
[47.43591690 21.39430428]
[40.54645920 8.07006550]
[33.65699768 -5.25417328]
[26.76753998 -18.57841301]
[19.87808037 -31.90265083]
[12.98862076 -45.22689056]
[6.09916115 -58.55112839]
[-0.79029828 -71.87536621]
[-8.20403576 -84.91517639]
[-16.13032913 -97.64992523]
[-24.05662346 -110.38467407]
[-31.98291779 -123.11942291]
[-39.90921021 -135.85417175]
[-47.14117813 -141.52520752]
[-47.86358261 -148.92185974]
[-61.57031250 -156.82351685]
[-61.43066025 -171.71746826]
[-69.10219574 -184.60728455]
[-84.15798950 -188.60237122]
[-91.75439453 -201.78376770]
[-87.85292053 -216.11254883]
[-95.52445221 -229.00238037]
[-101.17197418 -232.60699463]
[-103.72669220 -237.76040649]
[-103.23299408 -242.56069946]
[-110.38600922 -255.74533081]
[-117.53901672 -268.92996216]
[-124.69203186 -282.11459351]
[-139.91336060 -286.36740112]
[-147.59635925 -300.17852783]
[-143.18284607 -315.35406494]
[-129.29125977 -322.89059448]
[-114.16326141 -318.31689453]
[-106.77399445 -304.34640503]
[-111.50740051 -289.26760864]
[-104.35439301 -276.08297729]
[-97.20137787 -262.89834595]
[-90.04836273 -249.71371460]
[-82.63462830 -236.67390442]
[-74.96309662 -223.78408813]
[-60.50796127 -220.38044739]
[-52.54431534 -207.41761780]
[-56.21236801 -192.27882385]
[-48.54083633 -179.38899231]
[-35.38282776 -172.40930176]
[-34.97375870 -156.59338379]
[-27.17445946 -143.78047180]
[-19.24816704 -131.04571533]
[-11.32187271 -118.31096649]
[-3.39557934 -105.57621765]
[4.53071451 -92.84146881]
[7.28570795 -92.09168243]
[9.90067196 -90.17536163]
[11.91840744 -87.14356232]
[12.91002369 -83.21580505]
[12.53394127 -78.76483154]
[19.42340088 -65.44058990]
[26.31286049 -52.11635208]
[33.20232010 -38.79211044]
[40.09177780 -25.46787262]
[46.98123932 -12.14363289]
[53.87069702 1.18060660]
[60.76015472 14.50484562]
[77.03623199 16.44038010]
[89.08566284 27.79523277]
[92.04167938 44.25435257]
[84.54933167 59.38973236]
[91.70233917 72.57435608]
[98.85535431 85.75898743]
[113.05895233 85.16187286]
[125.21755219 98.80944824]
[138.54179382 105.69890594]
[151.86602783 112.58836365]
[165.19027710 119.47782135]
[178.51451111 126.36728668]
[191.83874512 133.25674438]
[200.95370483 134.43130493]
[205.35739136 140.41793823]
[218.54202271 147.57095337]
[231.72663879 154.72396851]
[244.91127014 161.87696838]
[264.97821045 160.38162231]
[274.46365356 177.19487000]
[287.92224121 183.81805420]
[301.38079834 190.44123840]
[314.90457153 196.93028259]
[328.49218750 203.28457642]
[339.68719482 193.00155640]
[353.96685791 187.79013062]
[369.15368652 188.44499207]
[382.93176270 194.86627197]
[393.20004272 206.07479858]
[398.39270020 220.36132812]
[397.71786499 235.54727173]
[391.27844238 249.31689453]
[380.05642700 259.57043457]
[365.76309204 264.74426270]
[350.57803345 264.04943848]
[336.81689453 257.59194946]
[326.57815552 246.35644531]
[321.42309570 232.05630493]
[322.13790894 216.87217712]
[308.55029297 210.51789856]
[301.11846924 210.53320312]
[294.75762939 203.89981079]
[281.29904175 197.27664185]
[267.84045410 190.65345764]
[258.43792725 194.82131958]
[248.08149719 193.05990601]
[240.26423645 185.71655273]
[237.75825500 175.06159973]
[224.57363892 167.90858459]
[211.38900757 160.75558472]
[198.20437622 153.60256958]
[184.94929504 146.58097839]
[171.62504578 139.69152832]
[158.30081177 132.80206299]
[144.97657776 125.91260529]
[131.65232849 119.02314758]
[118.32809448 112.13368225]
[130.56042480 120.81526947]
[134.91900635 135.16807556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 28]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[29 104]
[30 103]
[31 102]
[36 98]
[37 97]
[38 96]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[50 81]
[52 79]
[53 78]
[56 75]
[57 74]
[60 73]
[61 72]
[62 71]
[63 70]
[106 155]
[107 154]
[108 153]
[109 152]
[110 151]
[111 150]
[113 149]
[114 148]
[115 147]
[116 146]
[118 142]
[119 141]
[120 140]
[121 138]
[122 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
