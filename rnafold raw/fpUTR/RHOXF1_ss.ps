%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAGCUCCACCCUCUAACCCCCACUCCAGCUGCAGACGCCACGGAGUUUGUGCAGGGGCGCAGCGCUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[98.05579376 312.89538574]
[91.56842041 299.17391968]
[90.47977448 284.03524780]
[94.93711090 269.52673340]
[104.33759308 257.61056519]
[117.40989685 249.89828491]
[114.94097137 235.10285950]
[112.47205353 220.30743408]
[102.74544525 209.02726746]
[108.10578156 194.14179993]
[98.37916565 182.86161804]
[103.73950958 167.97615051]
[101.27059174 153.18072510]
[98.80167389 138.38531494]
[96.33274841 123.58988953]
[83.21321106 116.97455597]
[76.45236206 103.92940521]
[78.61113739 89.39583588]
[88.87182617 78.87902832]
[86.40290833 64.08361053]
[75.27050018 59.01679993]
[68.15116882 49.22112656]
[66.79618835 37.31017303]
[71.43820190 26.38978577]
[80.76167297 19.24822235]
[79.52297974 4.29945469]
[78.28428650 -10.64931297]
[77.04560089 -25.59807968]
[75.80690765 -40.54684830]
[71.88337708 -49.12353134]
[74.83901215 -56.13683701]
[63.49368668 -66.81023407]
[63.07854462 -82.01820374]
[73.32391357 -92.76845551]
[72.70404053 -107.75564575]
[63.47233582 -121.30952454]
[70.83724976 -135.96183777]
[87.22238922 -136.63952637]
[95.77212524 -122.64545441]
[87.69122314 -108.37551880]
[88.31110382 -93.38833618]
[99.40922546 -83.52085114]
[100.25136566 -68.33054352]
[89.82619476 -56.75671387]
[90.75567627 -41.78553772]
[91.99436951 -26.83677101]
[93.23305511 -11.88800335]
[94.47174835 3.06076455]
[95.71043396 18.00953102]
[110.30789185 28.69359779]
[112.79167938 46.92624283]
[101.19832611 61.61468887]
[103.66725159 76.41011047]
[116.78678894 83.02544403]
[123.54763794 96.07059479]
[121.38886261 110.60416412]
[111.12817383 121.12097168]
[113.59709167 135.91639709]
[116.06600952 150.71180725]
[118.53492737 165.50723267]
[128.43814087 177.84567261]
[122.90119934 191.67288208]
[132.80441284 204.01130676]
[127.26747894 217.83851624]
[129.73638916 232.63394165]
[132.20530701 247.42935181]
[147.07350159 250.47920227]
[159.83381653 258.69741821]
[168.76054382 270.97250366]
[172.64640808 285.64440918]
[170.96588135 300.72882080]
[163.94624329 314.18576050]
[152.53683472 324.19525146]
[138.28068542 329.40359497]
[123.10584259 329.10641479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 66]
[7 65]
[8 64]
[10 62]
[12 60]
[13 59]
[14 58]
[15 57]
[19 53]
[20 52]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[31 44]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
