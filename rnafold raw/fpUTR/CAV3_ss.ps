%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCUGCCCCAAGUAUUUUCAGCCCCAGCCGGCCACACAGCUCGGAUCUCCUCCUGUGGAUCCCCCCAGCUCUGCG\
) } def
/len { sequence length } bind def

/coor [
[111.36791992 157.92503357]
[113.00244141 172.83572388]
[111.21776581 187.72917175]
[106.10662842 201.83152771]
[97.93460083 214.41000366]
[87.12631989 224.81100464]
[74.24339294 232.49411011]
[59.95521545 237.06008911]
[45.00423050 238.27168274]
[30.16729164 236.06593323]
[16.21534920 230.55746460]
[3.87335277 222.03248596]
[-6.21739340 210.93397522]
[-13.53256607 197.83862305]
[-17.69206238 183.42687988]
[-18.47974968 168.44757080]
[-15.85470009 153.67904663]
[-9.95331383 139.88870239]
[-1.08223164 127.79309082]
[10.29759693 118.02070618]
[23.59486389 111.07933807]
[38.11863327 107.32965088]
[53.11312866 106.96640015]
[41.88546753 97.01956177]
[30.65780449 87.07272339]
[14.89946651 88.27701569]
[2.95964479 77.92249298]
[1.92202401 62.15229797]
[12.40220642 50.32262039]
[28.18248558 49.45178986]
[39.90069962 60.05645370]
[40.60464478 75.84506226]
[51.83230591 85.79190063]
[63.05996704 95.73873901]
[66.02153015 95.76987457]
[69.01453400 96.55018616]
[71.84606934 98.09297180]
[86.54293060 95.09258270]
[97.13484192 85.96553040]
[110.45668030 90.21055603]
[125.15354156 87.21017456]
[139.85040283 84.20978546]
[154.54725647 81.20940399]
[169.22775269 65.86920929]
[188.71429443 72.15118408]
[202.94235229 67.40116119]
[217.17039490 62.65114212]
[231.39843750 57.90112305]
[245.62648010 53.15110016]
[259.85452271 48.40108109]
[270.49435425 36.69189835]
[285.01678467 40.00069046]
[295.48049927 27.37362862]
[311.60015869 30.38832092]
[316.79324341 45.94351196]
[305.71755981 58.03734970]
[289.76681519 54.22873688]
[280.14468384 65.59816742]
[264.60455322 62.62912750]
[250.37651062 67.37915039]
[236.14845276 72.12916565]
[221.92041016 76.87918854]
[207.69236755 81.62921143]
[193.46432495 86.37922668]
[190.66882324 95.31436920]
[183.85700989 101.93998718]
[174.57772827 104.56331635]
[165.03125000 102.42359161]
[157.54765320 95.90625763]
[142.85078430 98.90664673]
[128.15393066 101.90702820]
[113.45706940 104.90741730]
[102.86515808 114.03446960]
[89.54331970 109.78944397]
[74.84645844 112.78982544]
[87.65132141 120.60234833]
[98.35425568 131.11172485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 34]
[24 33]
[25 32]
[37 75]
[38 74]
[40 72]
[41 71]
[42 70]
[43 69]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
