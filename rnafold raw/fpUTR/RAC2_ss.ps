%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGCUUGAGUAAGUUCCCCUUCCGUUUCCUCCUGCCCCACCACCGCUGCUCCUCAGCAGGCGCCUCACCAGCCUCCACACCCCUUGCGCCCGCAGAAACGCGCCUGGCCCUGAGCUGUCACCACCGACACUCUCCAGGCUCCGGACACG\
) } def
/len { sequence length } bind def

/coor [
[59.43683624 245.08740234]
[51.16822052 261.32357788]
[35.90543747 271.11953735]
[17.86940193 271.86749268]
[11.56136417 285.47662354]
[5.25332689 299.08578491]
[-1.05471027 312.69491577]
[-7.36274767 326.30404663]
[-5.35783672 342.58016968]
[-18.61206245 352.23718262]
[-33.49061584 345.34072876]
[-34.68771362 328.98535156]
[-20.97188759 319.99600220]
[-14.66384888 306.38687134]
[-8.35581207 292.77774048]
[-2.04777455 279.16857910]
[4.26026297 265.55944824]
[-3.85900879 256.88708496]
[-8.56727695 245.94212341]
[-9.28410339 234.01420593]
[-5.90086985 222.51747131]
[1.20353806 212.82299805]
[11.20501423 206.09523010]
[22.92977333 203.15219116]
[34.99209595 204.36604309]
[42.13130569 191.17393494]
[49.27051926 177.98182678]
[48.52327728 163.10597229]
[61.89618683 154.65164185]
[69.03539276 141.45953369]
[76.17460632 128.26742554]
[64.36542511 109.84245300]
[65.04380035 87.96835327]
[77.97199249 70.31054688]
[71.66395569 56.70140839]
[65.35591888 43.09226990]
[59.04788208 29.48312950]
[59.10914612 44.48300552]
[51.38295364 57.34014130]
[38.10941315 64.32678223]
[23.13701439 63.41724396]
[10.80680275 54.87523651]
[4.69376183 41.17740250]
[6.57028484 26.29524231]
[15.89229965 14.54364491]
[29.95701218 9.32982922]
[44.68435287 12.16438007]
[32.47662354 3.44822764]
[20.26889229 -5.26792431]
[8.06116199 -13.98407650]
[-7.93606567 -12.77236366]
[-18.75154305 -24.62162590]
[-16.08856201 -40.44211960]
[-1.98993361 -48.09772110]
[12.72908211 -41.71570587]
[16.77731514 -26.19180679]
[28.98504448 -17.47565460]
[41.19277573 -8.75950336]
[53.40050507 -0.04335080]
[59.54428864 -10.29668427]
[68.97310638 -14.78766060]
[69.28311157 -29.78445625]
[69.59311676 -44.78125381]
[69.90312195 -59.77804947]
[70.21312714 -74.77484894]
[55.71961212 -78.97014618]
[42.80628204 -86.77452850]
[32.35358429 -97.65586090]
[25.07420349 -110.87225342]
[21.46445656 -125.52258301]
[21.77046394 -140.60797119]
[25.97136307 -155.09985352]
[33.78072739 -168.01017761]
[44.66609955 -178.45866394]
[57.88529968 -185.73294067]
[72.53702545 -189.33703613]
[87.62228394 -189.02520752]
[102.11255646 -184.81871033]
[115.01985168 -177.00436401]
[125.46414185 -166.11495972]
[132.73332214 -152.89294434]
[136.33175659 -138.23983765]
[136.01409912 -123.15469360]
[131.80200195 -108.66605377]
[123.98267365 -95.76177216]
[113.08923340 -85.32168579]
[99.86441803 -78.05761719]
[85.20992279 -74.46484375]
[84.89991760 -59.46804428]
[84.58991241 -44.47124863]
[84.27990723 -29.47445297]
[83.96990967 -14.47765636]
[95.08399963 6.85066700]
[72.65702057 23.17509079]
[78.96505737 36.78422928]
[85.27309418 50.39336777]
[91.58113098 64.00251007]
[101.79176331 63.07458496]
[111.86458588 64.98674011]
[121.02485657 69.59190369]
[128.56802368 76.53587341]
[133.91389465 85.28456879]
[136.65133667 95.16507721]
[136.56976318 105.41746521]
[150.65333557 110.58012390]
[164.73690796 115.74278259]
[178.82048035 120.90544128]
[192.90405273 126.06809235]
[206.98762512 131.23075867]
[215.03422546 126.10326385]
[224.40339661 125.30367279]
[232.94752502 128.88671875]
[238.76751709 135.91709900]
[240.63459778 144.70964050]
[254.37120056 150.73507690]
[268.10778809 156.76049805]
[277.28781128 157.35266113]
[282.06399536 163.05502319]
[295.67312622 169.36306763]
[309.28228760 175.67109680]
[322.89141846 181.97914124]
[337.64199829 176.30502319]
[352.05032349 182.79933167]
[357.56817627 197.60908508]
[350.92190552 211.94793701]
[336.05462646 217.30889893]
[321.78686523 210.51139832]
[316.58337402 195.58827209]
[302.97424316 189.28024292]
[289.36511230 182.97219849]
[275.75595093 176.66416931]
[262.08236694 170.49710083]
[248.34576416 164.47166443]
[234.60916138 158.44624329]
[214.42649841 162.59561157]
[201.82496643 145.31433105]
[187.74139404 140.15167236]
[173.65782166 134.98901367]
[159.57424927 129.82635498]
[145.49067688 124.66368866]
[131.40710449 119.50102997]
[123.48696136 128.54924011]
[113.08185577 134.57688904]
[101.29267120 136.94625854]
[89.36671448 135.40663147]
[82.22750092 148.59873962]
[75.08829498 161.79084778]
[75.32489014 177.61029053]
[62.46262360 185.12103271]
[55.32341385 198.31314087]
[48.18420029 211.50524902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[25 151]
[26 150]
[27 149]
[29 147]
[30 146]
[31 145]
[34 97]
[35 96]
[36 95]
[37 94]
[47 59]
[48 58]
[49 57]
[50 56]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[104 141]
[105 140]
[106 139]
[107 138]
[108 137]
[109 136]
[114 134]
[115 133]
[116 132]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
