%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUUGAAGCCUAACUGUCCACCAGAAAGGACUGCUCUUUGGGUGAGUUGAACUUCUUCCAUUAUAGAAAGAAUUGAAGGCUGAGAAACUCAGCCUCUAUC\
) } def
/len { sequence length } bind def

/coor [
[187.63500977 225.18913269]
[174.30493164 213.39360046]
[163.68231201 199.10476685]
[156.22299194 182.93212891]
[152.24774170 165.56610107]
[151.92858887 147.74858093]
[155.28129578 130.24113464]
[141.35835266 124.65975952]
[127.43540955 119.07838440]
[113.51247406 113.49701691]
[100.14927673 119.09800720]
[86.70015717 113.70658112]
[80.90615845 100.42592621]
[66.98321533 94.84455872]
[53.06027603 89.26318359]
[39.13733292 83.68181610]
[25.21439171 78.10044098]
[19.70650864 78.91120911]
[14.97074890 77.55212402]
[11.73317909 74.72418976]
[10.31242657 71.31989288]
[-3.04227066 64.48966217]
[-16.39696693 57.65943146]
[-29.75166512 50.82919693]
[-42.35567856 54.05161667]
[-53.38877106 47.95329666]
[-57.11768723 36.33380127]
[-70.25787354 29.09947777]
[-83.39806366 21.86515617]
[-96.53825378 14.63083363]
[-109.67844391 7.39651155]
[-125.42551422 10.46398354]
[-137.54800415 -0.04433177]
[-136.74658203 -16.06735611]
[-123.63603210 -25.31359482]
[-108.27364349 -20.69012451]
[-102.44412231 -5.74367809]
[-89.30393219 1.49064422]
[-76.16374207 8.72496605]
[-63.02355576 15.95928860]
[-49.88336563 23.19361115]
[-32.46188354 21.81753159]
[-22.92143250 37.47450256]
[-9.56673622 44.30473328]
[3.78796124 51.13496399]
[17.14265823 57.96519852]
[30.79576492 64.17749786]
[44.71870422 69.75887299]
[58.64164734 75.34024048]
[72.56459045 80.92161560]
[86.48752594 86.50298309]
[99.85072327 80.90199280]
[113.29984283 86.29341888]
[119.09384155 99.57407379]
[133.01678467 105.15544128]
[146.93972778 110.73681641]
[160.86267090 116.31818390]
[167.42326355 105.45214844]
[175.50665283 95.66872406]
[184.93716431 87.17951202]
[195.50997925 80.16801453]
[206.99565125 74.78565216]
[219.14495850 71.14847565]
[231.69444275 69.33470154]
[244.37203979 69.38299561]
[256.90301514 71.29167175]
[269.01589966 75.01873016]
[280.44836426 80.48278809]
[290.95297241 87.56484985]
[300.30239868 96.11090851]
[308.29446411 105.93528748]
[314.75643921 116.82466125]
[319.54888916 128.54272461]
[322.56854248 140.83528137]
[323.75054932 153.43579102]
[323.06994629 166.07110596]
[320.54211426 178.46745300]
[316.22250366 190.35630798]
[310.20529175 201.48023987]
[322.09399414 210.62677002]
[333.98266602 219.77331543]
[345.87136841 228.91984558]
[357.76004028 238.06639099]
[369.64871216 247.21292114]
[381.53741455 256.35946655]
[393.42608643 265.50601196]
[409.66674805 270.37200928]
[409.48675537 287.32501221]
[393.14645386 291.84509277]
[384.27957153 277.39468384]
[372.39086914 268.24813843]
[360.50219727 259.10162354]
[348.61349487 249.95507812]
[336.72482300 240.80853271]
[324.83612061 231.66200256]
[312.94744873 222.51545715]
[301.05874634 213.36892700]
[287.76837158 225.15438843]
[272.33389282 233.95744324]
[255.41406250 239.39993286]
[237.73147583 241.24717712]
[220.04177856 239.41809082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 57]
[8 56]
[9 55]
[10 54]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[21 46]
[22 45]
[23 44]
[24 43]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[79 97]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
