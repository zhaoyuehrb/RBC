%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGGCUGCGCCUAGUGGGCCGUUGCCUUACAGUUGCUGAGAGGAGGCGAGAGGCGGGGGCGCUAGGGCCGAGAUCAUGUCUGACUGGGAGAGGUUUCCUUGGCAGCAGAGGACGCUAGGUUUGGG\
) } def
/len { sequence length } bind def

/coor [
[107.51301575 222.18309021]
[105.67685699 207.29589844]
[103.84069824 192.40870667]
[102.00453949 177.52151489]
[100.16837311 162.63432312]
[98.33221436 147.74713135]
[96.49605560 132.85993958]
[73.94812775 120.33107758]
[67.27344513 95.41461945]
[53.27855682 90.01619720]
[44.03778839 89.83422852]
[39.00914001 84.30973816]
[25.15094566 78.56948853]
[11.29275322 72.82923889]
[-2.56543970 67.08898926]
[-16.42363358 61.34873581]
[-30.28182602 55.60848236]
[-37.04651260 56.10459518]
[-42.21863556 53.44340515]
[-44.66804504 49.23151016]
[-58.22788620 42.81818390]
[-71.78772736 36.40485764]
[-87.57105255 37.49895859]
[-95.76824951 25.06291389]
[-109.32809448 18.64958763]
[-122.88793182 12.23626041]
[-136.44776917 5.82293415]
[-150.00761414 -0.59039223]
[-163.56744385 -7.00371885]
[-177.12728882 -13.41704464]
[-181.67893982 -12.85943413]
[-185.73326111 -13.75328159]
[-188.88015747 -15.74585247]
[-190.87443542 -18.38443184]
[-191.65432739 -21.18190575]
[-204.52024841 -28.89344788]
[-217.38618469 -36.60498810]
[-230.25210571 -44.31652832]
[-243.11804199 -52.02807236]
[-257.83801270 -46.75017929]
[-272.48873901 -52.21736526]
[-280.15258789 -65.84819031]
[-277.21093750 -81.20659637]
[-265.05273438 -91.04080963]
[-249.41870117 -90.70742035]
[-237.69076538 -80.36384583]
[-235.40649414 -64.89399719]
[-222.54057312 -57.18246078]
[-209.67463684 -49.47091675]
[-196.80871582 -41.75937653]
[-183.94277954 -34.04783630]
[-170.71395874 -26.97688484]
[-157.15412903 -20.56355858]
[-143.59428406 -14.15023136]
[-130.03443909 -7.73690510]
[-116.47460175 -1.32357883]
[-102.91476440 5.08974743]
[-89.35492706 11.50307369]
[-74.54148865 9.95024681]
[-65.37439728 22.84501839]
[-51.81455994 29.25834465]
[-38.25471878 35.67166901]
[-24.54157448 41.75028992]
[-10.68338108 47.49054337]
[3.17481184 53.23079300]
[17.03300476 58.97104645]
[30.89119720 64.71129608]
[44.74938965 70.45154572]
[58.67698288 76.02130890]
[72.67187500 81.41973114]
[78.29917908 75.07757568]
[85.35504150 70.37605286]
[93.37497711 67.62467194]
[101.83103943 67.00453949]
[110.16655731 68.55649567]
[117.83281708 72.17836761]
[124.32514954 77.63172150]
[129.21617126 84.55757904]
[132.18389893 92.50000000]
[145.98406982 84.76270294]
[158.71133423 92.50000000]
[173.71133423 92.50000000]
[188.71133423 92.50000000]
[203.71133423 92.50000000]
[212.39839172 89.34407043]
[219.07832336 92.68859100]
[234.07380676 93.05670929]
[249.06929016 93.42482758]
[257.74002075 83.03561401]
[270.63208008 79.62014008]
[282.94338989 84.21723175]
[290.22207642 94.92372894]
[305.20401001 95.65974426]
[320.18594360 96.39575958]
[335.16787720 97.13177490]
[351.28460693 91.86990356]
[360.80239868 105.90016174]
[349.95523071 118.92994690]
[334.43185425 112.11370087]
[319.44992065 111.37768555]
[304.46798706 110.64167786]
[289.48608398 109.90566254]
[277.57485962 121.71070862]
[260.47357178 121.29127502]
[248.70117188 108.42031097]
[233.70568848 108.05219269]
[218.71020508 107.68407440]
[203.71133423 107.50000000]
[188.71133423 107.50000000]
[173.71133423 107.50000000]
[158.71133423 107.50000000]
[145.98406982 115.23729706]
[132.18389893 107.50000000]
[128.01596069 117.52594757]
[120.82360077 125.65990448]
[111.38324738 131.02377319]
[113.21940613 145.91096497]
[115.05556488 160.79815674]
[116.89173126 175.68534851]
[118.72789001 190.57254028]
[120.56404877 205.45973206]
[122.40020752 220.34693909]
[135.01210022 229.87141418]
[137.11244202 245.53552246]
[127.45513916 258.04602051]
[111.76970673 259.98062134]
[99.36202240 250.19158936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[5 118]
[6 117]
[7 116]
[9 70]
[10 69]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[20 62]
[21 61]
[22 60]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[79 113]
[81 111]
[82 110]
[83 109]
[84 108]
[86 107]
[87 106]
[88 105]
[92 102]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
