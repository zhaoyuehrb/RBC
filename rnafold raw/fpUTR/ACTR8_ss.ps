%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGUGGGCAGCCGGCCGUGCGCCUGCGCGGUGGCCCUUCCAUCCCGGCAGUCGUGGCUGCAGCGCUGAGGCGAGAGGUUGGUGGGUGUCUCCGGCCAUA\
) } def
/len { sequence length } bind def

/coor [
[89.62615967 106.27272034]
[74.73985291 104.42939758]
[59.85354614 102.58607483]
[44.96723938 100.74274445]
[30.08093071 98.89942169]
[15.19462299 97.05609894]
[0.54822540 103.03887177]
[-11.13175678 93.79618835]
[-26.01806450 91.95286560]
[-42.37659073 108.05810547]
[-65.07473755 107.51245880]
[-80.29958344 91.00922394]
[-95.23560333 92.39324951]
[-110.17161560 93.77726746]
[-125.10762787 95.16129303]
[-133.53309631 99.12870026]
[-140.52378845 96.35069275]
[-155.49534607 97.27410126]
[-170.46688843 98.19751740]
[-185.43844604 99.12093353]
[-200.40998840 100.04434204]
[-215.38154602 100.96775818]
[-228.74559021 110.47219086]
[-243.54411316 103.40567017]
[-244.55366516 87.03762817]
[-230.73568726 78.20610046]
[-216.30496216 85.99620819]
[-201.33340454 85.07279205]
[-186.36186218 84.14938354]
[-171.39030457 83.22596741]
[-156.41876221 82.30255127]
[-141.44720459 81.37914276]
[-126.49165344 80.22528076]
[-111.55564117 78.84125519]
[-96.61962128 77.45722961]
[-81.68360901 76.07320404]
[-79.26808167 68.34035492]
[-74.77012634 61.56956863]
[-68.53638458 56.31025696]
[-61.05503464 52.99429321]
[-52.91760254 51.90056992]
[-44.77218628 53.13162613]
[-37.27183914 56.60421371]
[-31.02221489 62.05476379]
[-26.53266335 69.05933380]
[-24.17473984 77.06655121]
[-9.28843212 78.90988159]
[4.29319715 72.79525757]
[17.03794670 82.16979218]
[31.92425537 84.01311493]
[46.81056213 85.85643768]
[61.69686890 87.69976807]
[76.58317566 89.54309082]
[91.46948242 91.38641357]
[106.40549469 92.77043915]
[121.37704468 93.69385529]
[136.34860229 94.61726379]
[151.32014465 95.54067993]
[166.29170227 96.46409607]
[181.26324463 97.38750458]
[196.23480225 98.31092072]
[210.48510742 91.43784332]
[222.71192932 99.94396973]
[237.68347168 100.86738586]
[252.66746521 101.56014252]
[267.66036987 102.02206421]
[282.65325928 102.48399353]
[297.64611816 102.94591522]
[310.76574707 89.47071075]
[329.25708008 89.67856598]
[341.64169312 102.98486328]
[356.63455200 102.52293396]
[371.62744141 102.06101227]
[383.62020874 91.40486908]
[399.40368652 94.27906036]
[406.87017822 108.47875214]
[400.29199219 123.11115265]
[384.71539307 126.95153809]
[372.08938599 117.05389404]
[357.09649658 117.51582336]
[342.10360718 117.97774506]
[336.14834595 127.94542694]
[325.97625732 133.79116821]
[314.12380981 133.92095947]
[303.61373901 128.18348694]
[297.18420410 117.93880463]
[282.19131470 117.47687531]
[267.19842529 117.01495361]
[252.20555115 116.55302429]
[245.30371094 119.54499817]
[236.76007080 115.83893585]
[221.78851318 114.91551971]
[208.60906982 121.85464478]
[195.31138611 113.28247070]
[180.33982849 112.35905457]
[165.36828613 111.43564606]
[150.39672852 110.51222992]
[135.42518616 109.58881378]
[120.45363617 108.66540527]
[105.48208618 107.74198914]
[100.70886993 110.34094238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[8 47]
[9 46]
[12 36]
[13 35]
[14 34]
[15 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[55 100]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[63 92]
[64 91]
[65 89]
[66 88]
[67 87]
[68 86]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
