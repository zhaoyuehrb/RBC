%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCGCGGCGCUGCCGGCCCCUCCUCGCCGCCGCGGAGCUGGACCGCAGUUGUGCCCCGCCGACC\
) } def
/len { sequence length } bind def

/coor [
[114.26416016 313.08270264]
[114.26416016 298.08270264]
[114.26416016 283.08270264]
[114.26416016 268.08270264]
[106.52686310 255.35542297]
[114.26416016 241.55525208]
[114.26416016 226.55525208]
[113.56107330 211.57173157]
[112.15645599 196.63764954]
[110.75183105 181.70355225]
[108.30117035 166.90510559]
[104.81658936 152.31546021]
[101.33200836 137.72581482]
[97.84742737 123.13616943]
[94.36284637 108.54652405]
[89.41893768 101.79503632]
[91.07395172 93.19152069]
[88.27705383 78.45458221]
[85.13544464 63.78726196]
[81.65086365 49.19762039]
[68.69533539 36.34450531]
[73.92870331 19.75312805]
[69.76409912 5.34284973]
[65.59950256 -9.06742764]
[61.43489838 -23.47770500]
[50.17031097 -34.58714294]
[54.06982040 -48.96222687]
[49.90522003 -63.37250519]
[37.71632385 -74.34350586]
[41.38725662 -90.32650757]
[57.14167404 -94.87957001]
[68.77278137 -83.31888580]
[64.31549835 -67.53710938]
[68.48009491 -53.12682724]
[79.44680786 -43.04811096]
[75.84517670 -27.64230537]
[80.00978088 -13.23202801]
[84.17437744 1.17824972]
[88.33897400 15.58852768]
[98.93230438 21.86774254]
[102.37977600 34.11170197]
[96.24050903 45.71303940]
[99.72509003 60.30268478]
[104.50901031 66.28189087]
[103.01398468 75.65768433]
[105.81089020 90.39462280]
[108.95249176 105.06194305]
[112.43707275 119.65158844]
[115.92165375 134.24122620]
[119.40623474 148.83087158]
[122.89081573 163.42051697]
[127.01347351 167.70840454]
[128.63992310 172.68797302]
[127.97022247 177.18020630]
[125.68592072 180.29893494]
[127.09054565 195.23301697]
[128.49516296 210.16711426]
[132.31350708 216.25756836]
[132.20906067 222.38980103]
[129.26416016 226.55525208]
[129.26416016 241.55525208]
[137.00146484 255.35542297]
[129.26416016 268.08270264]
[129.26416016 283.08270264]
[129.26416016 298.08270264]
[129.26416016 313.08270264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[6 61]
[7 60]
[8 57]
[9 56]
[10 55]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[17 46]
[18 45]
[19 43]
[20 42]
[22 39]
[23 38]
[24 37]
[25 36]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
