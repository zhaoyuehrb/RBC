%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCGGAAGCGUGGGUCUGGCGGCUGCACCGGUUCGCGGUCGGCGCGAGAACAAGCAGGGUGGCGCGGGUCCGGGC\
) } def
/len { sequence length } bind def

/coor [
[91.59523010 315.12695312]
[80.94051361 303.45422363]
[81.74380493 287.67034912]
[93.52853394 277.13964844]
[94.13252258 262.15182495]
[94.73651123 247.16398621]
[95.34049988 232.17614746]
[95.94448853 217.18830872]
[85.57209015 201.06965637]
[95.87758636 183.96502686]
[95.27359772 168.97720337]
[94.66960907 153.98936462]
[94.06562042 139.00152588]
[85.82212067 126.59613037]
[92.99746704 112.49559784]
[85.68767548 100.57676697]
[92.01469421 88.10839081]
[91.41070557 73.12055969]
[90.80671692 58.13272095]
[90.20272827 43.14488602]
[86.90699768 28.51142693]
[81.02750397 14.71173477]
[75.14800262 0.91204327]
[68.73229218 -5.98482370]
[69.32202911 -13.56367207]
[64.00295258 -27.58891487]
[58.68388367 -41.61415863]
[52.55108261 -48.76376724]
[53.44551086 -56.31272125]
[48.69549179 -70.54077148]
[43.94547272 -84.76881409]
[39.19545364 -98.99686432]
[25.54298210 -107.42239380]
[23.76127625 -123.36620331]
[35.21710968 -134.59756470]
[51.12254333 -132.50073242]
[59.27629471 -118.68422699]
[53.42350006 -103.74687958]
[58.17351913 -89.51883698]
[62.92353821 -75.29078674]
[67.67356110 -61.06274414]
[72.70912933 -46.93323135]
[78.02819824 -32.90798950]
[83.34727478 -18.88274574]
[88.94769287 -4.96745586]
[94.82719421 8.83223534]
[100.70669556 22.63192749]
[107.02342987 9.02682590]
[119.53900146 0.75877643]
[134.53155518 0.28649828]
[147.54269409 7.75043535]
[154.70320129 20.93099213]
[153.88372803 35.90859222]
[145.32795715 48.22925568]
[131.58016968 54.22911453]
[116.72862244 52.12395859]
[105.19056702 42.54089737]
[105.79455566 57.52873230]
[106.39854431 72.51657104]
[107.00253296 87.50440216]
[114.31232452 99.42323303]
[107.98530579 111.89160919]
[116.27200317 125.36904144]
[109.05345154 138.39753723]
[109.65744781 153.38537598]
[110.26143646 168.37321472]
[110.86542511 183.36103821]
[119.52316284 190.50643921]
[122.60101318 201.06965637]
[119.27384949 211.32273865]
[110.93232727 217.79229736]
[110.32833862 232.78013611]
[109.72434998 247.76797485]
[109.12036133 262.75579834]
[108.51636505 277.74365234]
[119.41551208 289.18847656]
[118.94612885 304.98577881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[10 67]
[11 66]
[12 65]
[13 64]
[15 62]
[17 60]
[18 59]
[19 58]
[20 57]
[21 47]
[22 46]
[23 45]
[25 44]
[26 43]
[27 42]
[29 41]
[30 40]
[31 39]
[32 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
