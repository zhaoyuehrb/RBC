%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCGCGGGGCGGGAACGCGGAAGGGGCUGGGGUUGCGGCGCGGCGGCGAGGACCAGACCGGGGGCGGGGCCGGUAGUGGGAGUGCGGGGCGCGCGGUGACAGCGCGGGGUUGGCGGCGUGGGACCCAGGGGGCGACAGAGGCAGCAGCAGCCCGAGGCCUGAGGAGAGGAGACCGGCGGCGGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[112.21858978 607.36938477]
[111.47483063 592.38781738]
[110.73107147 577.40625000]
[107.25305939 570.86981201]
[110.10095215 562.17126465]
[109.60500336 547.17950439]
[109.10904694 532.18768311]
[100.48880005 523.68530273]
[99.96316528 511.18750000]
[108.35999298 501.38140869]
[100.41331482 488.78378296]
[107.92138672 474.85757446]
[107.67337799 459.85961914]
[107.42536926 444.86169434]
[93.69668579 435.87664795]
[87.96524811 420.32559204]
[92.67276001 404.26141357]
[106.15606689 394.06304932]
[98.00218964 381.59857178]
[105.27898407 367.55010986]
[90.84961700 360.29486084]
[81.99270630 346.67718506]
[81.20204926 330.35797119]
[88.78765869 315.78140259]
[102.76550293 306.96490479]
[102.02174377 291.98336792]
[101.27798462 277.00183105]
[92.91913605 264.67385864]
[99.96265411 250.50700378]
[99.21890259 235.52545166]
[90.86005402 223.19747925]
[97.90357208 209.03063965]
[97.15981293 194.04908752]
[96.41605377 179.06753540]
[95.67230225 164.08599854]
[94.92854309 149.10444641]
[94.18479156 134.12289429]
[93.44103241 119.14134216]
[76.13273621 104.72326660]
[81.23758698 78.64514160]
[69.55442810 69.23749542]
[57.87126541 59.82984924]
[46.18810654 50.42220306]
[34.50494766 41.01455688]
[18.90365601 38.38582230]
[13.84332466 24.37717056]
[-4.40556002 21.97843361]
[-10.11318111 5.39164257]
[-21.95028877 -3.82154799]
[-33.78739548 -13.03473854]
[-46.71910095 -8.23450089]
[-60.22612381 -10.43801975]
[-70.79312897 -18.96332359]
[-75.72367859 -31.49739265]
[-73.82788086 -44.72287369]
[-85.51103973 -54.13051987]
[-97.19419861 -63.53816605]
[-115.44308472 -65.93690491]
[-121.15070343 -82.52369690]
[-132.98780823 -91.73688507]
[-144.82492065 -100.95007324]
[-156.66203308 -110.16326904]
[-168.49913025 -119.37645721]
[-183.36930847 -114.94275665]
[-197.99436951 -120.12802887]
[-206.75070190 -132.93843079]
[-206.27130127 -148.44808960]
[-196.74052429 -160.69325256]
[-181.82312012 -164.96537781]
[-167.25517273 -159.62174988]
[-158.63832092 -146.71711731]
[-159.28594971 -131.21356201]
[-147.44883728 -122.00037384]
[-135.61172485 -112.78718567]
[-123.77462006 -103.57398987]
[-111.93751526 -94.36080170]
[-99.88758087 -95.54335785]
[-89.94786835 -87.94904327]
[-87.78655243 -75.22132111]
[-76.10339355 -65.81367493]
[-64.42023468 -56.40603256]
[-48.73020172 -61.20502853]
[-33.11280441 -55.65687561]
[-23.78173637 -41.75906372]
[-24.57420540 -24.87184715]
[-12.73709869 -15.65865517]
[-0.89999086 -6.44546509]
[11.14993858 -7.62801981]
[21.08965683 -0.03370797]
[23.25097084 12.69401169]
[38.01660538 14.64984894]
[43.91259384 29.33139801]
[55.59575272 38.73904419]
[67.27891541 48.14669037]
[78.96207428 57.55433273]
[90.64523315 66.96198273]
[81.24855804 55.26999283]
[80.97505951 40.27248764]
[89.93919373 28.24567413]
[104.38961792 24.22257805]
[118.27906036 29.88680077]
[125.79501343 42.86795807]
[123.79217529 57.73364258]
[113.10756683 68.26335907]
[125.79898834 60.26788330]
[138.42388916 52.16775894]
[150.98138428 43.96353531]
[151.58615112 27.06855774]
[162.03302002 13.98876572]
[178.05525208 9.74923706]
[193.29539490 15.82751369]
[205.71551514 7.41678715]
[218.13565063 -0.99393851]
[230.55578613 -9.40466404]
[237.64402771 -23.54918098]
[252.52075195 -24.27900124]
[255.72572327 -36.78477097]
[266.25863647 -43.53232956]
[278.16973877 -41.35873795]
[285.49087524 -55.38412476]
[300.37762451 -55.86787415]
[312.93511963 -64.07209778]
[325.49261475 -72.27632141]
[335.44558716 -86.00129700]
[351.38943481 -80.23675537]
[350.26388550 -63.32021332]
[333.69683838 -59.71882248]
[321.13934326 -51.51459885]
[308.58184814 -43.31037521]
[302.15890503 -29.87181091]
[286.37396240 -28.80124092]
[279.31610107 -12.74243259]
[260.93145752 -11.85886955]
[254.73159790 1.68405664]
[238.96650696 3.01546812]
[226.54638672 11.42619419]
[214.12625122 19.83691978]
[201.70611572 28.24764633]
[202.50329590 41.58451080]
[196.55451965 53.66860580]
[185.31959534 61.29217529]
[171.67674255 62.37276840]
[159.18560791 56.52103424]
[146.62811279 64.72525787]
[142.74102783 71.02706909]
[133.79446411 72.95931244]
[121.10304260 80.95478821]
[123.82740021 104.92041779]
[108.42258453 118.39759064]
[109.16633606 133.37913513]
[109.91009521 148.36068726]
[110.65384674 163.34223938]
[111.39760590 178.32379150]
[112.14136505 193.30532837]
[112.88511658 208.28688049]
[121.29716492 221.68643188]
[114.20044708 234.78169250]
[114.94420624 249.76324463]
[123.35625458 263.16281128]
[116.25953674 276.25805664]
[117.00329590 291.23962402]
[117.74704742 306.22116089]
[130.51568604 311.95684814]
[139.52139282 322.58627319]
[143.04808044 335.99560547]
[140.46182251 349.55017090]
[132.32403564 360.61227417]
[120.27078247 367.05416870]
[128.46012878 380.59097290]
[121.14786530 393.56710815]
[133.11225891 400.43185425]
[140.06314087 412.22082520]
[140.27484131 425.79647827]
[133.79904175 437.60650635]
[122.42331696 444.61367798]
[122.67132568 459.61163330]
[122.91933441 474.60955811]
[130.88374329 488.27993774]
[123.35794067 501.13339233]
[133.19346619 516.69097900]
[124.10084534 531.69171143]
[124.59680176 546.68353271]
[125.09275055 561.67535400]
[125.71262360 576.66253662]
[126.45638275 591.64404297]
[127.20013428 606.62561035]
[136.54357910 620.10272217]
[129.30004883 634.81542969]
[112.92107391 635.62854004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 186]
[2 185]
[3 184]
[5 183]
[6 182]
[7 181]
[10 179]
[12 177]
[13 176]
[14 175]
[18 170]
[20 168]
[25 162]
[26 161]
[27 160]
[29 158]
[30 157]
[32 155]
[33 154]
[34 153]
[35 152]
[36 151]
[37 150]
[38 149]
[40 96]
[41 95]
[42 94]
[43 93]
[44 92]
[46 90]
[48 87]
[49 86]
[50 85]
[55 81]
[56 80]
[57 79]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[104 147]
[105 146]
[106 144]
[107 143]
[111 138]
[112 137]
[113 136]
[114 135]
[116 133]
[119 131]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
