%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACCCCAUUUCUGUGCUCAUCUGCCUCCUUGGCAAUAUAAAGAGCAAGCACUGAGGCCCCGCCUCAGAGCACCCCAAACUUGACGCC\
) } def
/len { sequence length } bind def

/coor [
[92.73117828 156.89517212]
[86.63012695 143.19198608]
[80.52908325 129.48880005]
[82.30713654 144.38305664]
[77.67337036 158.64938354]
[67.48257446 169.65609741]
[53.61464310 175.37277222]
[38.62779236 174.74487305]
[25.28664207 167.88821411]
[16.05223846 156.06764221]
[12.62804699 141.46371460]
[15.64573097 126.77039337]
[24.54861641 114.69817352]
[37.69438934 107.47399902]
[52.65805054 106.43052673]
[66.67669678 111.75856018]
[54.85653687 102.52364349]
[43.03637314 93.28871918]
[31.21621323 84.05379486]
[19.39605141 74.81887817]
[0.83903521 81.47811890]
[-17.94464302 75.96073151]
[-29.78381157 60.54319763]
[-30.25896835 41.24872208]
[-43.24934769 33.74872208]
[-56.23973083 26.24872017]
[-69.23011017 18.74872017]
[-85.03629303 21.49538040]
[-96.94261932 10.74275684]
[-95.81557465 -5.26065922]
[-82.51973724 -14.23841572]
[-67.25452423 -9.30354691]
[-61.73011017 5.75833941]
[-48.73973083 13.25833988]
[-35.74934769 20.75833893]
[-22.75896835 28.25833893]
[-14.06590462 21.80997276]
[-3.65138602 18.72257614]
[7.22919273 19.39612770]
[17.25469208 23.77556992]
[25.19864273 31.35424423]
[30.07926941 41.23238754]
[31.28078651 52.22388840]
[28.63097382 62.99871445]
[40.45113373 72.23363495]
[52.27129745 81.46855927]
[64.09146118 90.70347595]
[75.91162109 99.93840027]
[91.04733276 80.43479156]
[112.34773254 85.63309479]
[125.82964325 79.05752563]
[134.84133911 66.05368805]
[149.67234802 67.42866516]
[163.15426636 60.85309601]
[176.63616943 54.27752686]
[190.11808777 47.70196152]
[203.59999084 41.12639236]
[217.08190918 34.55082703]
[230.56381226 27.97525978]
[242.14938354 15.59742641]
[257.25070190 23.30370903]
[254.02603149 39.94816589]
[237.13937378 41.45716858]
[223.65747070 48.03273773]
[210.17555237 54.60830307]
[196.69364929 61.18387222]
[183.21173096 67.75943756]
[169.72982788 74.33500671]
[156.24790955 80.91057587]
[148.20053101 93.44408417]
[132.40521240 92.53943634]
[118.92329407 99.11500549]
[117.35870361 111.20096588]
[108.25693512 120.79428864]
[94.23226166 123.38775635]
[100.33331299 137.09094238]
[106.43436432 150.79411316]
[121.66321564 150.75192261]
[135.59001160 156.91343689]
[145.80183411 168.21116638]
[150.52943420 182.68768311]
[148.95372009 197.83485413]
[141.34770203 211.02835083]
[129.02915955 219.98231506]
[114.13235474 223.14541626]
[99.23825836 219.96961975]
[86.92735291 211.00515747]
[79.33258057 197.80517578]
[77.76978302 182.65666199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[24 36]
[25 35]
[26 34]
[27 33]
[50 72]
[51 71]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
