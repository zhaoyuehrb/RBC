%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGCGCCCGGGGCGCCUCGGAGAACUGACCUGAAGUUUCAGUGUAGUCAGAGAGCUCUUCAAGUAAUAAAUC\
) } def
/len { sequence length } bind def

/coor [
[39.15041733 256.84750366]
[29.45593071 268.29379272]
[19.76144218 279.74005127]
[10.06695271 291.18630981]
[0.37246412 302.63256836]
[-9.32202435 314.07882690]
[-11.70983410 330.30319214]
[-27.05211449 336.09512329]
[-39.56604385 325.49636841]
[-36.37836075 309.41003418]
[-20.76828575 304.38433838]
[-11.07379723 292.93807983]
[-1.37930834 281.49182129]
[8.31517982 270.04556274]
[18.00966835 258.59930420]
[27.70415688 247.15303040]
[17.33701324 229.16693115]
[14.91536999 208.51184082]
[20.86198807 188.54542542]
[34.23692322 172.52491760]
[52.88596344 163.07572937]
[73.78755951 161.76124573]
[78.06760406 147.38484192]
[82.34764862 133.00842285]
[86.62769318 118.63201141]
[77.32604980 103.44419098]
[81.69810486 86.17932129]
[97.10726166 77.24911499]
[100.18549347 62.56836319]
[103.26372528 47.88761139]
[106.34195709 33.20685959]
[109.42018127 18.52610588]
[111.27557373 3.64129782]
[111.89544678 -11.34588814]
[112.51531982 -26.33307457]
[113.13520050 -41.32026291]
[105.05429840 -55.59019852]
[113.60403442 -69.58426666]
[129.98916626 -68.90657806]
[137.35408020 -54.25426865]
[128.12239075 -40.70038605]
[127.50251007 -25.71319962]
[126.88263702 -10.72601414]
[126.26275635 4.26117229]
[128.38378906 6.50162220]
[129.60510254 9.83703423]
[129.45425415 13.86995792]
[127.63681793 18.02054214]
[124.10093689 21.60433578]
[121.02270508 36.28508759]
[117.94447327 50.96584320]
[114.86624908 65.64659119]
[111.78801727 80.32734680]
[119.90981293 88.61711884]
[122.93335724 99.82167816]
[120.08441162 111.07189941]
[112.09250641 119.48696899]
[101.00410461 122.91205597]
[96.72406006 137.28846741]
[92.44401550 151.66488647]
[88.16397095 166.04129028]
[97.24005127 171.47418213]
[105.02228546 178.62832642]
[111.18988800 187.20500183]
[115.48937988 196.84693909]
[117.74505615 207.15315247]
[117.86610413 217.69570923]
[115.85031891 228.03741455]
[111.78403473 237.74996948]
[105.83847046 246.43171692]
[98.26245880 253.72424316]
[89.37210083 259.32717896]
[79.53754425 263.01055908]
[69.16757202 264.62429810]
[58.69261932 264.10421753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[22 61]
[23 60]
[24 59]
[25 58]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 44]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
