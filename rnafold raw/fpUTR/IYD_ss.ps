%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAGUUCUGCACUUUGUUCCUUCCCUGGCACACCUGUGUCUGCAUUCCUUCUAUCUCCCGGCAUUCUCCACUCCUGUCUCUGUGUGUUUAAAAACCGGUGUGGGAAGUGUGCACGCCUGUGACGUCAGACUCCAGACC\
) } def
/len { sequence length } bind def

/coor [
[49.96157455 252.76423645]
[41.74999237 265.31692505]
[33.53841019 277.86959839]
[25.32682419 290.42230225]
[23.22056580 299.39559937]
[16.78985023 303.16033936]
[19.47101212 318.50469971]
[10.68558311 330.92529297]
[-3.95943379 333.38677979]
[1.35513985 347.96536255]
[-2.94671011 362.87420654]
[-15.21083450 372.38058472]
[-30.72142792 372.82907104]
[-43.51434708 364.04721069]
[-48.67045975 349.41183472]
[-44.20713043 334.55053711]
[-31.84060287 325.17779541]
[-16.32605743 324.89758301]
[-19.29255104 310.34646606]
[-10.85945511 297.68402100]
[4.42322683 294.67114258]
[12.77414036 282.21072388]
[20.98572350 269.65802002]
[29.19730759 257.10534668]
[37.40889359 244.55265808]
[37.68544388 234.71919250]
[46.05240631 227.44772339]
[51.28725052 213.39082336]
[56.52209473 199.33392334]
[61.75694275 185.27702332]
[66.99178314 171.22012329]
[63.11515808 154.14002991]
[77.31269073 142.47238159]
[82.23307037 128.30233765]
[87.15344238 114.13230896]
[80.93014526 101.04732513]
[85.68306732 87.35951996]
[98.67652130 80.94731903]
[103.59689331 66.77728271]
[108.51727295 52.60724640]
[113.43764496 38.43721008]
[112.55241394 31.75309944]
[114.87888336 26.45637894]
[118.90573883 23.75396538]
[124.45246124 9.81718254]
[129.99917603 -4.11960030]
[135.54589844 -18.05638313]
[133.46006775 -33.73949051]
[145.35525513 -42.70352936]
[143.26942444 -58.38663864]
[155.16459656 -67.35067749]
[160.71131897 -81.28746033]
[166.25804138 -95.22424316]
[171.80476379 -109.16102600]
[177.35147095 -123.09780884]
[182.89819336 -137.03459167]
[177.98797607 -146.85397339]
[179.31143188 -157.53028870]
[186.18313599 -165.51884460]
[196.11698914 -168.30378723]
[202.27905273 -181.97964478]
[208.44110107 -195.65550232]
[214.60314941 -209.33135986]
[203.15510559 -220.35791016]
[196.17358398 -234.60749817]
[194.48190308 -250.35810852]
[198.26538086 -265.71331787]
[207.05116272 -278.83050537]
[219.76731873 -288.14212036]
[234.87350464 -292.54290771]
[250.54763794 -291.52105713]
[256.40347290 -305.33081055]
[262.25930786 -319.14053345]
[252.14558411 -330.57186890]
[248.00157166 -345.26165771]
[250.65005493 -360.29324341]
[259.56518555 -372.68206787]
[272.97683716 -379.96835327]
[288.22216797 -380.70538330]
[302.27413940 -374.74682617]
[312.34277344 -363.27575684]
[316.42892456 -348.56976318]
[313.72125244 -333.54873657]
[304.75741577 -321.19509888]
[291.31716919 -313.96170044]
[276.06906128 -313.28469849]
[270.21322632 -299.47494507]
[264.35739136 -285.66522217]
[275.02917480 -276.30184937]
[282.28839111 -264.07586670]
[285.41012573 -250.18205261]
[284.07455444 -235.98304749]
[278.39971924 -222.87557983]
[268.93112183 -212.15318298]
[256.58935547 -204.87849426]
[242.58068848 -201.77796936]
[228.27900696 -203.16931152]
[222.11695862 -189.49345398]
[215.95491028 -175.81759644]
[209.79286194 -162.14173889]
[213.20684814 -143.15737915]
[196.83497620 -131.48786926]
[191.28825378 -117.55109406]
[185.74154663 -103.61431122]
[180.19482422 -89.67752838]
[174.64810181 -75.74074554]
[169.10137939 -61.80395889]
[171.58395386 -47.11770248]
[159.29203796 -37.15681076]
[161.77459717 -22.47055626]
[149.48268127 -12.50966454]
[143.93595886 1.42711854]
[138.38923645 15.36390114]
[132.84252930 29.30068398]
[127.60768127 43.35758209]
[122.68730927 57.52761841]
[117.76692963 71.69765472]
[112.84655762 85.86769104]
[119.06985474 98.95267487]
[114.31693268 112.64048004]
[101.32347870 119.05268097]
[96.40310669 133.22271729]
[91.48272705 147.39276123]
[96.40411377 159.37216187]
[91.95459747 171.10583496]
[81.04868317 176.45497131]
[75.81384277 190.51187134]
[70.57899475 204.56877136]
[65.34414673 218.62567139]
[60.10930252 232.68257141]
[73.14333344 225.25868225]
[88.12232208 224.46495056]
[101.86794281 230.46975708]
[111.46359253 241.99900818]
[114.87321472 256.60635376]
[111.37333679 271.19232178]
[101.70658875 282.66201782]
[87.92409515 288.58175659]
[72.95030975 287.69540405]
[59.96242523 280.19107056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[6 21]
[9 18]
[27 130]
[28 129]
[29 128]
[30 127]
[31 126]
[33 123]
[34 122]
[35 121]
[38 118]
[39 117]
[40 116]
[41 115]
[44 114]
[45 113]
[46 112]
[47 111]
[49 109]
[51 107]
[52 106]
[53 105]
[54 104]
[55 103]
[56 102]
[60 100]
[61 99]
[62 98]
[63 97]
[71 88]
[72 87]
[73 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
