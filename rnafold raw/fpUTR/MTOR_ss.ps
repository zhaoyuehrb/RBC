%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCGGCUUAGAGGACAGCGGGGAAGGCGGGCGGUGGGGCAGGGGGCCUGAAGCGGCGGUACCGGUGCUGGCGGCGGCAGCUGAGGCCUUGGCCGAAGCCGCGCGAACCUCAGGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[35.20079803 302.14160156]
[29.98945236 288.07595825]
[31.24963379 273.12762451]
[21.06053352 284.13589478]
[10.87143421 295.14416504]
[0.68233413 306.15246582]
[-3.01346350 321.53594971]
[-17.33705139 325.62054443]
[-27.52615166 336.62884521]
[-37.71525192 347.63711548]
[-34.56583786 362.83123779]
[-40.97945023 376.96081543]
[-54.48992538 384.59277344]
[-69.90220642 382.79244995]
[-81.28996277 372.25210571]
[-84.27436066 357.02471924]
[-77.70784760 342.96554565]
[-64.11537933 335.48062134]
[-48.72353363 337.44802856]
[-38.53443146 326.43972778]
[-28.34533119 315.43145752]
[-25.37832642 300.83535767]
[-10.32594681 295.96334839]
[-0.13684632 284.95507812]
[10.05225372 273.94680786]
[20.24135399 262.93850708]
[28.61500931 250.49336243]
[34.97372437 236.90782166]
[41.33244324 223.32229614]
[47.33924866 209.57754517]
[52.99016953 195.68267822]
[50.61764145 180.97824097]
[62.98379517 171.10966492]
[68.63471222 157.21481323]
[74.28563690 143.31994629]
[79.93655396 129.42509460]
[85.58747101 115.53023529]
[78.81931305 100.53624725]
[84.82006073 85.21897888]
[99.97212982 78.81254578]
[105.26341248 64.77678680]
[110.55468750 50.74103928]
[105.94604492 38.61142731]
[110.73103333 26.98433113]
[121.81011963 21.94627571]
[127.46103668 8.05141544]
[133.11195374 -5.84344387]
[138.76287842 -19.73830414]
[144.41378784 -33.63316345]
[150.06471252 -47.52802277]
[155.71562195 -61.42288208]
[151.42082214 -73.66713715]
[156.50360107 -85.16717529]
[167.70872498 -89.91829681]
[173.71554565 -103.66304779]
[179.72235107 -117.40779877]
[178.15885925 -133.15156555]
[190.34536743 -141.71534729]
[196.35217285 -155.46009827]
[194.78869629 -171.20385742]
[206.97518921 -179.76763916]
[212.98200989 -193.51240540]
[210.46458435 -211.69801331]
[224.86843872 -221.63360596]
[230.51934814 -235.52845764]
[236.17027283 -249.42332458]
[233.39036560 -265.58514404]
[246.16827393 -275.86407471]
[261.35919189 -269.68606567]
[263.33599854 -253.40649414]
[250.06512451 -243.77239990]
[244.41421509 -229.87754822]
[238.76329041 -215.98268127]
[243.18132019 -204.64208984]
[238.49304199 -192.97566223]
[226.72676086 -187.50558472]
[220.71994019 -173.76083374]
[222.71307373 -159.00019836]
[210.09692383 -149.45329285]
[204.09011841 -135.70854187]
[206.08325195 -120.94789124]
[193.46710205 -111.40099335]
[187.46029663 -97.65624237]
[181.45349121 -83.91148376]
[184.39117432 -66.66165161]
[169.61048889 -55.77196503]
[163.95956421 -41.87710571]
[158.30865479 -27.98224449]
[152.65773010 -14.08738518]
[147.00682068 -0.19252566]
[141.35589600 13.70233345]
[135.70497131 27.59719276]
[139.08584595 44.76566696]
[124.59044647 56.03231812]
[119.29916382 70.06806946]
[114.00788116 84.10382080]
[120.59254456 95.01438904]
[119.72760773 107.72856140]
[111.72597504 117.64683533]
[99.48233032 121.18115234]
[93.83141327 135.07600403]
[88.18049622 148.97087097]
[82.52957153 162.86572266]
[76.87865448 176.76058960]
[78.84699249 192.45887756]
[66.88502502 201.33360291]
[61.23410797 215.22845459]
[61.77556610 222.01132202]
[59.13219452 227.21147156]
[54.91797638 229.68099976]
[48.55926132 243.26654053]
[42.20054245 256.85208130]
[55.57144928 250.05361938]
[70.56401825 249.58149719]
[84.33618164 255.52517700]
[94.27723694 266.75796509]
[98.50269318 281.15051270]
[96.21156311 295.97451782]
[87.83816528 308.41983032]
[74.96979523 316.12728882]
[60.04584122 317.63583374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[8 21]
[9 20]
[10 19]
[27 112]
[28 111]
[29 110]
[30 107]
[31 106]
[33 104]
[34 103]
[35 102]
[36 101]
[37 100]
[40 96]
[41 95]
[42 94]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[50 87]
[51 86]
[54 84]
[55 83]
[56 82]
[58 80]
[59 79]
[61 77]
[62 76]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
