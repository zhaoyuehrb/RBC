%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUGGCCCCAGUCCGGGCCCCGGCGCGCUAGGCUCACAAAGGCAGGCACAGACUGCAACCCUGCUCAGUGCUCCGGGCGCUUCAGGCUGGCUUGGGUCCUGCUGCUCCAACCCCAAGGGCCCUGGAGCGCUCCCUGAUACCUCCAUCACUCACC\
) } def
/len { sequence length } bind def

/coor [
[89.75805664 101.55480957]
[76.81799316 93.96833038]
[63.87792206 86.38185120]
[50.93785477 78.79537201]
[41.89666367 77.13861847]
[37.81694031 70.92542267]
[25.03126144 63.08154678]
[12.24558163 55.23767090]
[-0.54009897 47.39379501]
[-13.32577896 39.54991913]
[-26.41505241 32.22387695]
[-39.78695679 25.42739296]
[-53.15885925 18.63091087]
[-66.53076172 11.83442879]
[-79.90267181 5.03794670]
[-98.23521423 6.46841526]
[-107.26887512 -8.54901505]
[-120.77409363 -15.07658100]
[-134.27931213 -21.60414696]
[-147.78453064 -28.13171196]
[-161.35437012 -34.52383423]
[-174.98748779 -40.77986908]
[-188.62062073 -47.03590393]
[-202.25373840 -53.29193878]
[-215.88685608 -59.54797363]
[-231.65647888 -58.27136230]
[-239.99699402 -70.61174774]
[-253.63011169 -76.86779022]
[-267.26324463 -83.12382507]
[-280.89636230 -89.37985992]
[-294.52947998 -95.63589478]
[-310.29910278 -94.35928345]
[-318.63958740 -106.69966888]
[-332.27273560 -112.95570374]
[-345.90585327 -119.21173859]
[-355.27862549 -109.49614716]
[-367.17630005 -103.16600037]
[-380.42584229 -100.82940674]
[-393.72589111 -102.70150757]
[-405.77453613 -108.58479309]
[-415.39675903 -117.88978577]
[-421.65911865 -129.69412231]
[-423.96014404 -142.83393860]
[-422.08816528 -156.01861572]
[-435.46005249 -162.81509399]
[-448.83197021 -169.61158752]
[-462.20388794 -176.40806580]
[-476.52041626 -170.11750793]
[-491.51641846 -174.55075073]
[-500.11126709 -187.61454773]
[-498.24670410 -203.14056396]
[-486.80313110 -213.79791260]
[-471.18386841 -214.55448914]
[-458.76382446 -205.05308533]
[-455.40737915 -189.77996826]
[-442.03549194 -182.98348999]
[-428.66357422 -176.18701172]
[-415.29168701 -169.39051819]
[-402.94494629 -180.49090576]
[-387.25506592 -186.03216553]
[-370.60247803 -185.14385986]
[-355.52508545 -177.93327332]
[-344.33148193 -165.47343445]
[-338.74737549 -149.64335632]
[-339.64981079 -132.84486389]
[-326.01669312 -126.58882904]
[-312.38357544 -120.33279419]
[-297.58908081 -122.05687714]
[-288.27343750 -109.26901245]
[-274.64031982 -103.01297760]
[-261.00720215 -96.75694275]
[-247.37406921 -90.50090790]
[-233.74095154 -84.24487305]
[-218.94647217 -85.96895599]
[-209.63082886 -73.18109894]
[-195.99769592 -66.92506409]
[-182.36457825 -60.66902542]
[-168.73146057 -54.41299057]
[-155.09834290 -48.15695572]
[-147.66577148 -48.22595215]
[-141.25695801 -41.63692856]
[-127.75173950 -35.10936356]
[-114.24652100 -28.58179855]
[-100.74131012 -22.05423164]
[-89.18220520 -25.73696899]
[-77.85931396 -20.36371040]
[-73.10618591 -8.33395767]
[-59.73428345 -1.53747582]
[-46.36237717 5.25900650]
[-32.99047470 12.05548859]
[-19.61857033 18.85197067]
[-16.87202072 18.06698608]
[-13.64100170 18.35383797]
[-10.34389973 19.90576744]
[-7.46220303 22.75679207]
[-5.48190355 26.76424026]
[7.30377674 34.60811615]
[20.08945656 42.45199203]
[32.87513733 50.29586792]
[45.66081619 58.13974380]
[58.52433395 65.85530853]
[71.46440125 73.44178772]
[84.40447235 81.02826691]
[97.34453583 88.61474609]
[111.80055237 92.61769104]
[126.79979706 92.76776886]
[141.79905701 92.91783905]
[156.79829407 93.06791687]
[171.79754639 93.21798706]
[186.79679871 93.36806488]
[201.79605103 93.51813507]
[218.82781982 82.80368805]
[235.08071899 93.21861267]
[250.07395935 92.76845551]
[265.06719971 92.31829071]
[280.71774292 85.79933167]
[291.31445312 99.03362274]
[281.53082275 112.87980652]
[265.51736450 107.31153870]
[250.52412415 107.76169586]
[235.53088379 108.21186066]
[229.17341614 116.29866028]
[219.19589233 119.59151459]
[208.84880066 116.76148224]
[201.64596558 108.51738739]
[186.64672852 108.36730957]
[171.64747620 108.21723938]
[156.64822388 108.06716156]
[141.64897156 107.91709137]
[126.64972687 107.76701355]
[111.65047455 107.61694336]
[107.92215729 114.12460327]
[122.60469055 117.19435120]
[124.22231293 132.10687256]
[110.53952026 138.25352478]
[100.46552277 127.13992310]
[96.73720551 133.64758301]
[104.45277405 146.51110840]
[112.16833496 159.37461853]
[119.88389587 172.23814392]
[135.27464294 175.82984924]
[143.54675293 189.29640198]
[139.79252625 204.64831543]
[126.23927307 212.77757263]
[110.92790222 208.86125183]
[102.94238281 195.22280884]
[107.02037811 179.95370483]
[99.30481720 167.09017944]
[91.58925629 154.22666931]
[83.87368774 141.36314392]
[84.47763824 156.35098267]
[69.49293518 155.67366028]
[56.99401855 147.38046265]
[50.54616547 133.83702087]
[51.98860931 118.90653229]
[60.90989685 106.84790039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[17 84]
[18 83]
[19 82]
[20 81]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[33 67]
[34 66]
[35 65]
[44 58]
[45 57]
[46 56]
[47 55]
[105 131]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
[111 125]
[113 121]
[114 120]
[115 119]
[137 150]
[138 149]
[139 148]
[140 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
