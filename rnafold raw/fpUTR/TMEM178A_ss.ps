%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAGAGCUGGGGCCAAGUGCAUUGUGUCUGGCGGCGGCGCGCGAGCCCACCGGCGGCUGCGGCGGGGCGGGAAGCC\
) } def
/len { sequence length } bind def

/coor [
[34.95926285 191.07640076]
[18.93584824 188.11363220]
[8.43258762 198.82258606]
[-2.07067251 209.53152466]
[2.68489933 224.07949829]
[0.12354130 239.16915894]
[-9.16616535 251.33303833]
[-23.04951286 257.77597046]
[-38.33621216 257.01739502]
[-51.51348877 249.23162842]
[-59.55330276 236.20780945]
[-60.60816574 220.93869019]
[-54.43567276 206.93301392]
[-42.45421982 197.40917969]
[-27.41705894 194.55569458]
[-12.77961826 199.02827454]
[-2.27635813 188.31932068]
[8.22690201 177.61038208]
[4.79092026 164.56089783]
[8.34444618 151.42987061]
[18.04683685 141.73991394]
[31.39311409 138.14646912]
[44.86011124 141.71073914]
[55.77071381 131.41711426]
[59.71854019 117.05521393]
[75.06607819 113.21287537]
[85.97668457 102.91925049]
[90.17031097 89.58113861]
[103.72969055 86.17015076]
[114.64029694 75.87652588]
[125.55090332 65.58290100]
[136.46150208 55.28927612]
[147.37211609 44.99565125]
[152.10032654 29.89748955]
[166.66748047 26.79141235]
[177.57807922 16.49778938]
[182.30630493 1.39962757]
[196.87344360 -1.70644808]
[207.78404236 -12.00007248]
[218.69465637 -22.29369736]
[229.60525513 -32.58732224]
[240.51585388 -42.88094711]
[244.75576782 -51.27348328]
[252.05482483 -53.35199738]
[263.35635376 -63.21481705]
[274.65789795 -73.07763672]
[271.61935425 -88.13296509]
[276.53079224 -102.68540955]
[288.07101440 -112.82042694]
[303.13577271 -115.81175995]
[317.67276001 -110.85475159]
[327.77154541 -99.28281403]
[330.71566772 -84.20873260]
[325.71310425 -69.68737030]
[314.10955811 -59.62489319]
[299.02633667 -56.72805786]
[284.52072144 -61.77610016]
[273.21917725 -51.91328049]
[261.91763306 -42.05046082]
[250.80947876 -31.97034264]
[239.89888000 -21.67671776]
[228.98828125 -11.38309288]
[218.07766724 -1.08946812]
[207.16706848 9.20415688]
[203.21923828 23.56604958]
[187.87170410 27.40839386]
[176.96110535 37.70201874]
[173.01327515 52.06391144]
[157.66574097 55.90625381]
[146.75512695 66.19988251]
[135.84452820 76.49350739]
[124.93392181 86.78712463]
[114.02331543 97.08074951]
[109.82968903 110.41886139]
[96.27030945 113.82984924]
[85.35970306 124.12347412]
[80.63147736 139.22163391]
[66.06433868 142.32771301]
[55.15373611 152.62133789]
[57.57544708 169.23435974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[23 79]
[24 78]
[26 76]
[27 75]
[29 73]
[30 72]
[31 71]
[32 70]
[33 69]
[35 67]
[36 66]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[44 59]
[45 58]
[46 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
