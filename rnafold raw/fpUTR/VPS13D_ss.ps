%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCCUGCGCCAUUGAGGAGCGGCGGGGAGGAAACGCCGCGCAGCGCCGGGCUGGGGCGGGCGGCCCGGGACACCGACAGAUUUUUCUGUGACCAUGAAAGAGAGAAAUAAAGAAUGAUCCAUGAUUUCUAAACACCUUUUCCUGAGGAUAUAGUC\
) } def
/len { sequence length } bind def

/coor [
[61.53428268 116.59172058]
[46.91984558 119.97080231]
[39.41299057 130.50207520]
[27.13185310 132.99394226]
[16.79869843 126.64102173]
[2.12035084 129.73069763]
[-12.55799675 132.82037354]
[-27.23634338 135.91004944]
[-41.91469193 138.99974060]
[-56.59304047 142.08941650]
[-68.50357056 152.50334167]
[-82.55164337 147.55349731]
[-97.22998810 150.64317322]
[-111.90833282 153.73286438]
[-116.76107025 168.23797607]
[-128.14744568 178.30012512]
[-142.94322205 181.29206848]
[-157.15492249 176.50839233]
[-166.99774170 165.32875061]
[-181.67610168 168.41844177]
[-193.58662415 178.83236694]
[-207.63470459 173.88252258]
[-222.31304932 176.97219849]
[-234.22357178 187.38612366]
[-248.27165222 182.43629456]
[-262.94998169 185.52597046]
[-277.62835693 188.61564636]
[-289.53887939 199.02957153]
[-303.58694458 194.07972717]
[-318.26528931 197.16941833]
[-330.17581177 207.58334351]
[-344.22390747 202.63349915]
[-356.06457520 213.97943115]
[-371.73306274 209.13887024]
[-375.11093140 193.09138489]
[-362.72332764 182.34523010]
[-347.31356812 187.95515442]
[-336.45294189 177.76222229]
[-321.35498047 182.49105835]
[-306.67663574 179.40138245]
[-295.81597900 169.20845032]
[-280.71801758 173.93730164]
[-266.03967285 170.84762573]
[-251.36132812 167.75793457]
[-240.50068665 157.56500244]
[-225.40272522 162.29385376]
[-210.72438049 159.20417786]
[-199.86373901 149.01124573]
[-184.76577759 153.74008179]
[-170.08743286 150.65040588]
[-165.58657837 136.45153809]
[-154.50921631 126.34471130]
[-139.76281738 123.11824799]
[-125.28632355 127.73647308]
[-114.99801636 139.05451965]
[-100.31967163 135.96482849]
[-85.64131927 132.87515259]
[-74.78068542 122.68222046]
[-59.68271637 127.41106415]
[-45.00437164 124.32138824]
[-30.32602310 121.23171234]
[-15.64767551 118.14202881]
[-0.96932834 115.05235291]
[13.70901871 111.96266937]
[26.08953094 99.55725098]
[43.54076767 105.35636139]
[58.15520477 101.97727966]
[69.90120697 59.75207520]
[119.20649719 44.61168289]
[115.68321228 30.03133965]
[112.15991974 15.45099640]
[100.46809387 3.95172358]
[104.84221649 -11.85331059]
[120.78256226 -15.70524120]
[131.89106750 -3.64153290]
[126.74026489 11.92770576]
[130.26354980 26.50804901]
[133.78684998 41.08839417]
[148.78684998 41.08839417]
[152.31013489 26.50804901]
[155.83341980 11.92770576]
[159.35671997 -2.65263796]
[162.88000488 -17.23298264]
[157.72920227 -32.80221939]
[168.83770752 -44.86592865]
[184.77804565 -41.01399612]
[189.15217590 -25.20896339]
[177.46034241 -13.70969105]
[173.93705750 0.87065262]
[170.41377258 15.45099640]
[166.89047241 30.03133965]
[163.36718750 44.61168289]
[168.03507996 50.48201370]
[178.11724854 39.37571335]
[188.19941711 28.26941299]
[198.28158569 17.16311455]
[206.05308533 4.33331060]
[220.56384277 0.53362566]
[233.62588501 7.90810966]
[237.86868286 22.29555893]
[230.89814758 35.57756042]
[216.64701843 40.25944138]
[203.55497742 47.58051682]
[190.46292114 54.90159607]
[177.37086487 62.22267151]
[182.03875732 68.09300232]
[197.03802490 67.94481659]
[212.03729248 67.79663086]
[227.03656006 67.64844513]
[242.03582764 67.50025940]
[257.03509521 67.35207367]
[266.62963867 53.45307541]
[282.45462036 48.04646301]
[298.23184204 53.06863785]
[307.82534790 66.35931396]
[322.81875610 65.91481781]
[336.47970581 56.84230804]
[351.04486084 64.37813568]
[351.53082275 80.77008057]
[337.43768311 89.15551758]
[323.26327515 80.90822601]
[308.26986694 81.35272980]
[301.78228760 93.05480194]
[290.26022339 100.06783295]
[276.66897583 100.46134949]
[264.56900024 94.02489471]
[257.18328857 82.35134125]
[242.18402100 82.49952698]
[227.18475342 82.64771271]
[212.18548584 82.79589844]
[197.18621826 82.94408417]
[182.18695068 83.09226990]
[178.69647217 89.73053741]
[193.48043823 92.26715851]
[195.63644409 107.11140442]
[182.18496704 113.74898529]
[171.71553040 103.00708008]
[168.22506714 109.64534760]
[176.60476685 122.08643341]
[184.98446655 134.52752686]
[193.36416626 146.96861267]
[208.77178955 151.43904114]
[214.74967957 166.32676697]
[206.71212769 180.21119690]
[190.82482910 182.44137573]
[179.27519226 171.30650330]
[180.92308044 155.34831238]
[172.54338074 142.90722656]
[164.16368103 130.46614075]
[155.78398132 118.02504730]
[148.41087341 129.99600220]
[138.63488770 139.53395081]
[127.17789459 146.20352173]
[114.82637787 149.76943970]
[102.37866211 150.20133972]
[90.59376526 147.66517639]
[80.14525604 142.50233459]
[71.58273315 135.19845581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[12 57]
[13 56]
[14 55]
[19 50]
[20 49]
[22 47]
[23 46]
[25 44]
[26 43]
[27 42]
[29 40]
[30 39]
[32 37]
[69 78]
[70 77]
[71 76]
[79 92]
[80 91]
[81 90]
[82 89]
[83 88]
[106 132]
[107 131]
[108 130]
[109 129]
[110 128]
[111 127]
[115 122]
[116 121]
[138 150]
[139 149]
[140 148]
[141 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
