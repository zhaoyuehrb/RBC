%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUUGCUAUAAAACACGUGACCCUAGGGAAACUUUUGAAGUUAGCGGUAUAGAGAGUACCACCACCAGACGCCACC\
) } def
/len { sequence length } bind def

/coor [
[119.99919128 219.13502502]
[121.87848663 204.25320435]
[127.27828979 190.25885010]
[135.88224792 177.97178650]
[147.18630981 168.11186218]
[160.52822876 161.25671387]
[175.13017273 157.80751038]
[162.55554199 149.62959290]
[149.98089600 141.45167542]
[137.40625000 133.27374268]
[125.41973877 143.13012695]
[110.99075317 148.84233093]
[95.50572968 149.86152649]
[80.45253754 146.08976746]
[67.27756500 137.88948059]
[57.24672318 126.04856873]
[51.32384109 111.70478058]
[50.07801056 96.23633575]
[53.62893677 81.12952423]
[40.73911285 73.45799255]
[25.60031509 77.12604523]
[12.63748264 69.16239929]
[9.23385239 54.70726776]
[-3.65597296 47.03573227]
[-20.05192375 47.35951614]
[-28.29753494 33.18411636]
[-19.91042900 19.09197235]
[-3.51854181 19.57987404]
[4.01555920 34.14590836]
[16.90538406 41.81744003]
[31.23416901 37.91596222]
[44.41556931 45.51236725]
[48.41064453 60.56816864]
[61.30046844 68.23970032]
[71.91791534 58.55404663]
[84.84952545 52.28382492]
[99.02963257 49.94574356]
[113.28971100 51.73247528]
[126.45462036 57.49678421]
[137.43948364 66.76364899]
[145.33908081 78.76941681]
[149.50242615 92.52473450]
[149.58644104 106.89606476]
[145.58418274 120.69910431]
[158.15881348 128.87702942]
[170.73345947 137.05494690]
[183.30810547 145.23286438]
[198.20147705 147.01814270]
[212.35267639 142.04385376]
[226.50387573 137.06956482]
[240.65507507 132.09527588]
[254.80627441 127.12098694]
[263.01498413 113.33706665]
[278.92864990 111.30360413]
[290.33966064 122.58049774]
[288.49447632 138.51708984]
[274.80856323 146.88818359]
[259.78057861 141.27218628]
[245.62936401 146.24647522]
[231.47816467 151.22076416]
[217.32696533 156.19505310]
[203.17576599 161.16934204]
[216.54566956 167.96977234]
[227.89002991 177.78330994]
[236.54426575 190.03501892]
[242.00134277 204.00714111]
[243.94158936 218.88111877]
[242.25132751 233.78558350]
[237.02958679 247.84735107]
[228.58226013 260.24261475]
[217.40425110 270.24523926]
[204.15040588 277.26916504]
[189.59719849 280.90292358]
[174.59722900 280.93365479]
[160.02926636 277.35952759]
[146.74674988 270.38995361]
[135.52786255 260.43325806]
[127.02982330 248.07269287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 47]
[8 46]
[9 45]
[10 44]
[19 34]
[20 33]
[23 30]
[24 29]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
