%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCUGGACCCGGCGCGGAGCUGGCUGAGUCGGAGCGCAGCGUCCUUUGUGCCCGGCGGCCGCCCCGGGAUGCGUCCGAGCUAGGAGCCAGAUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[181.87449646 162.13740540]
[169.20957947 154.09999084]
[156.54466248 146.06259155]
[143.87974548 138.02519226]
[131.21481323 129.98779297]
[123.74654388 129.04469299]
[118.28385925 121.49373627]
[105.87765503 113.06248474]
[91.94874573 111.84705353]
[85.69110107 99.34371948]
[73.15398407 91.10837555]
[60.48906708 83.07097626]
[47.82415009 75.03357697]
[35.15922928 66.99617004]
[22.36962700 59.15869522]
[9.45849705 51.52307129]
[-3.45263290 43.88745117]
[-16.36376381 36.25183105]
[-29.27489281 28.61620903]
[-42.18602371 20.98058701]
[-55.09715271 13.34496593]
[-69.28662872 19.34205818]
[-84.11328125 15.87454796]
[-93.93893433 4.47627497]
[-95.15418243 -10.34469509]
[-108.06531525 -17.98031616]
[-120.97644806 -25.61593819]
[-133.88757324 -33.25156021]
[-149.70457458 -33.61660004]
[-156.72085571 -46.75512695]
[-169.63198853 -54.39074707]
[-186.02697754 -54.02132797]
[-194.31201172 -68.17372131]
[-185.96417236 -82.28915405]
[-169.57098389 -81.84688568]
[-161.99636841 -67.30187988]
[-149.08523560 -59.66625595]
[-134.19174194 -59.84736633]
[-126.25195312 -46.16268921]
[-113.34082031 -38.52706909]
[-100.42969513 -30.89144707]
[-87.51856232 -23.25582504]
[-73.94539642 -29.33094788]
[-59.22346878 -26.21182632]
[-49.04207230 -14.88961315]
[-47.46153259 0.43383583]
[-34.55040359 8.06945705]
[-21.63927269 15.70507812]
[-8.72814178 23.34070015]
[4.18298817 30.97632027]
[17.09411812 38.61194229]
[30.00524902 46.24756241]
[37.49946213 46.95561218]
[43.19663239 54.33125305]
[55.86154938 62.36865616]
[68.52646637 70.40605927]
[81.19139099 78.44345856]
[88.65966034 79.38655853]
[94.12234497 86.93751526]
[108.05125427 88.15294647]
[114.30889893 100.65628052]
[126.71511078 109.08753204]
[139.25222778 117.32287598]
[151.91714478 125.36027527]
[164.58206177 133.39767456]
[177.24697876 141.43507385]
[189.91189575 149.47247314]
[211.20606995 148.76933289]
[220.57199097 167.04522705]
[233.93708801 173.85508728]
[247.30218506 180.66493225]
[260.66729736 187.47479248]
[274.33831787 193.64750671]
[288.28497314 199.16937256]
[297.60070801 199.44319153]
[302.57852173 205.08996582]
[316.34484863 211.04718018]
[330.11117554 217.00439453]
[344.71151733 210.95414734]
[359.28152466 217.07708740]
[365.17706299 231.74058533]
[358.90042114 246.24504089]
[344.17541504 251.98522949]
[329.73812866 245.55558777]
[324.15393066 230.77072144]
[310.38763428 224.81349182]
[296.62130737 218.85627747]
[282.76312256 213.11602783]
[268.81646729 207.59416199]
[265.31381226 208.78196716]
[261.03927612 208.21443176]
[256.88201904 205.53865051]
[253.85742188 200.83988953]
[240.49232483 194.03002930]
[227.12722778 187.22018433]
[213.76213074 180.41032410]
[205.58842468 184.61811829]
[196.25679016 184.48371887]
[187.96350098 179.90768433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[7 62]
[8 61]
[10 59]
[11 57]
[12 56]
[13 55]
[14 54]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[25 42]
[26 41]
[27 40]
[28 39]
[30 37]
[31 36]
[69 96]
[70 95]
[71 94]
[72 93]
[73 89]
[74 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
