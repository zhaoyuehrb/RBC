%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGGCGGGGCACGCGCACCUGCCGUAGAGUGCUGAAGGUCCUGCCAACGGCUCUCUUGGCGUCUCAACGUUCGGAUCAGCAGCUUUUUUCCAUUCUCUCUCUCCACUUCUUCAGUGAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[-47.51363373 165.28053284]
[-52.12957001 163.70858765]
[-59.89590073 177.21125793]
[-74.59734344 181.12561035]
[-87.42220306 173.63839722]
[-101.86156464 177.70100403]
[-116.30093384 181.76361084]
[-130.74029541 185.82621765]
[-145.17965698 189.88882446]
[-159.61901855 193.95143127]
[-174.05838013 198.01403809]
[-188.49775696 202.07664490]
[-193.96171570 216.47981262]
[-206.71000671 224.80653381]
[-221.73915100 224.03904724]
[-233.29615784 214.68096924]
[-247.68374634 218.92326355]
[-262.01733398 223.34458923]
[-276.35092163 227.76591492]
[-290.68450928 232.18724060]
[-304.96188354 236.78691101]
[-319.18078613 241.56420898]
[-333.39971924 246.34150696]
[-346.48837280 257.11755371]
[-360.46658325 247.52349854]
[-355.11703491 231.43566895]
[-338.17700195 232.12260437]
[-323.95809937 227.34530640]
[-309.73919678 222.56800842]
[-304.34158325 217.39872742]
[-295.10586548 217.85365295]
[-280.77224731 213.43232727]
[-266.43865967 209.01100159]
[-252.10507202 204.58966064]
[-246.58027649 199.55656433]
[-237.35876465 200.24159241]
[-232.37690735 186.23020935]
[-219.95288086 177.73858643]
[-204.73303223 178.19628906]
[-192.56036377 187.63728333]
[-178.12098694 183.57467651]
[-163.68162537 179.51206970]
[-149.24226379 175.44946289]
[-134.80290222 171.38685608]
[-120.36354065 167.32424927]
[-105.92417145 163.26164246]
[-91.48480988 159.19903564]
[-84.44557190 146.12292480]
[-69.85987854 141.79716492]
[-56.19217682 149.26922607]
[-41.85858536 144.84790039]
[-27.63967323 140.07060242]
[-13.42076397 135.29330444]
[0.79814661 130.51599121]
[14.95639610 125.56181335]
[29.05178642 120.43151093]
[43.14717484 115.30120850]
[57.17751312 109.99559021]
[71.14061737 104.51547241]
[85.10372925 99.03535461]
[94.60154724 87.42538452]
[97.20626831 72.65326691]
[99.81098938 57.88115311]
[102.41571045 43.10903549]
[96.30147552 27.89233017]
[106.63393402 15.15763950]
[122.78393555 18.00532150]
[128.13775635 33.50592422]
[117.18782806 45.71376038]
[114.58310699 60.48587418]
[111.97838593 75.25798798]
[109.37365723 90.03010559]
[115.51730347 94.33193207]
[127.80458069 102.93557739]
[133.94822693 107.23740387]
[146.93859863 99.73740387]
[159.92898560 92.23740387]
[158.29516602 77.09638214]
[162.96719360 62.60182571]
[173.13558960 51.26500702]
[187.03863525 45.05009842]
[202.26754761 45.03386688]
[216.18380737 51.21912766]
[226.37635803 62.53424454]
[231.07926941 77.01880646]
[229.47772217 92.16327667]
[221.84921265 105.34378052]
[209.51542664 114.27671814]
[194.61325073 117.41440582]
[179.72457886 114.21321869]
[167.42898560 105.22778320]
[154.43859863 112.72778320]
[141.44822693 120.22778320]
[152.70655823 130.13989258]
[161.08699036 142.58047485]
[166.04289246 156.73812866]
[167.25103760 171.68939209]
[164.63261414 186.45909119]
[158.35839844 200.08386230]
[148.83763123 211.67501831]
[136.69131470 220.47654724]
[122.71168518 225.91436768]
[107.81055450 227.63378906]
[92.95986176 225.52267456]
[79.12823486 219.71870422]
[67.21783447 210.60046387]
[58.00552750 198.76266479]
[52.09217834 184.97744751]
[49.86349106 170.14393616]
[51.46482468 155.22966003]
[56.79173660 141.20738220]
[65.49678040 128.99172974]
[77.01216125 119.37944794]
[90.58383942 112.99846649]
[76.62073517 118.47857666]
[62.65762711 123.95869446]
[55.72048569 130.07275391]
[48.27747726 129.39659119]
[34.18208694 134.52690125]
[20.08669853 139.65719604]
[12.99928474 145.59642029]
[5.57544613 144.73490906]
[-8.64346409 149.51220703]
[-22.86237335 154.28950500]
[-37.08128357 159.06680298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[16 36]
[17 34]
[18 33]
[19 32]
[20 31]
[21 29]
[22 28]
[23 27]
[51 125]
[52 124]
[53 123]
[54 122]
[55 120]
[56 119]
[57 118]
[58 116]
[59 115]
[60 114]
[61 72]
[62 71]
[63 70]
[64 69]
[75 93]
[76 92]
[77 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
