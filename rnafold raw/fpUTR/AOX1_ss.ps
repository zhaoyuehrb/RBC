%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCACUCGGCGGGUCGGUGCCGCCGGGUCCCAGGUGCCCGCUACUUCCCAGAACCUCCGCCUCCCGCUCCGGGCCCUCGAACCAGCGCGGACACCACA\
) } def
/len { sequence length } bind def

/coor [
[24.26115990 278.51651001]
[17.57508469 291.94396973]
[10.88900852 305.37142944]
[4.20293283 318.79885864]
[9.46240902 333.70233154]
[2.56780005 347.92343140]
[-12.39044476 353.02505493]
[-26.53786469 345.98046875]
[-31.48104477 330.96914673]
[-24.28728485 316.89697266]
[-9.22451591 312.11279297]
[-2.53844094 298.68533325]
[4.14763451 285.25790405]
[10.83370972 271.83044434]
[8.73874378 254.48214722]
[23.98524857 244.30136108]
[30.25465393 230.67437744]
[30.18956947 223.15220642]
[36.93269348 216.72888184]
[43.61876678 203.30143738]
[50.30484390 189.87399292]
[56.99091721 176.44653320]
[63.46942520 162.91772461]
[69.73883057 149.29074097]
[76.00823975 135.66375732]
[82.27764130 122.03678131]
[88.33645630 108.31487274]
[86.80899811 94.41672516]
[97.84996033 85.83833313]
[103.69674683 72.02474976]
[109.54353333 58.21117020]
[107.79732513 42.48662567]
[119.88356018 33.78190231]
[118.13735199 18.05735588]
[130.22358704 9.35263062]
[136.07037354 -4.46095181]
[141.91716003 -18.27453423]
[142.40786743 -27.57442474]
[148.16258240 -32.41905975]
[154.43197632 -46.04603958]
[160.70138550 -59.67301941]
[166.97079468 -73.29999542]
[173.24020386 -86.92697906]
[161.22076416 -96.82750702]
[152.15647888 -109.47586823]
[146.65182495 -124.01879883]
[145.07138062 -139.47698975]
[147.51568604 -154.81111145]
[153.81488037 -168.99159241]
[163.54043579 -181.06784058]
[176.03439331 -190.23191833]
[190.45379639 -195.87258911]
[205.82759094 -197.61610413]
[221.12203979 -195.35095215]
[214.95506287 -209.90237427]
[220.96113586 -224.52095032]
[235.57695007 -230.53372192]
[250.13121033 -224.37344360]
[255.98912048 -209.69487000]
[249.67530823 -195.20655823]
[234.93562317 -189.50416565]
[246.50393677 -180.79074097]
[255.63696289 -169.53849792]
[261.79260254 -156.40803528]
[264.60372925 -142.17167664]
[263.90008545 -127.66796112]
[259.71856689 -113.75236511]
[252.30140686 -101.24673462]
[242.08197021 -90.89081573]
[229.65960693 -83.29847717]
[215.76443481 -78.92131805]
[201.21440125 -78.02181244]
[186.86717224 -80.65756989]
[180.59777832 -67.03059387]
[174.32836914 -53.40361404]
[168.05895996 -39.77663422]
[161.78955078 -26.14965439]
[155.73074341 -12.42774677]
[149.88395691 1.38583624]
[144.03717041 15.19941902]
[146.20158386 29.93592453]
[133.69714355 39.62868881]
[135.86155701 54.36519241]
[123.35711670 64.05796051]
[117.51033020 77.87154388]
[111.66354370 91.68512726]
[113.19100189 105.58327484]
[102.15003967 114.16166687]
[101.65933990 123.46155548]
[95.90461731 128.30618286]
[89.63521576 141.93316650]
[83.36581421 155.56015015]
[77.09640503 169.18713379]
[76.31954193 178.46749878]
[70.41836548 183.13261414]
[63.73229218 196.56005859]
[57.04621506 209.98751831]
[50.36014175 223.41496277]
[43.88163376 236.94378662]
[37.61222839 250.57075500]
[41.35577774 263.03216553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[16 100]
[17 99]
[19 98]
[20 97]
[21 96]
[22 95]
[23 93]
[24 92]
[25 91]
[26 90]
[27 88]
[29 86]
[30 85]
[31 84]
[33 82]
[35 80]
[36 79]
[37 78]
[39 77]
[40 76]
[41 75]
[42 74]
[43 73]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
