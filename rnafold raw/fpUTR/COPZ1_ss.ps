%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUGGGAACGUAUGGCCAAUCAGCGGCGGCGUUUCUUUUGCGGCUCCACGUCGGCACCAGCUGCGGGGCAAGAUGGAGGCGCUGAUUUUGCCCCAGUGGGACUAGGGGAAGGUAUCUGGUUUACCAGUGGUG\
) } def
/len { sequence length } bind def

/coor [
[93.84202576 145.27343750]
[82.81269073 135.10714722]
[86.10195923 120.47280884]
[78.94255066 122.70729065]
[73.16201019 136.54872131]
[67.38146973 150.39016724]
[70.01020813 166.57725525]
[57.13676834 176.73631287]
[42.00425339 170.41659546]
[40.17969131 154.11926270]
[53.54003525 144.60961914]
[59.32057571 130.76818848]
[65.10111237 116.92675018]
[72.48747253 107.02714539]
[82.01686859 100.87368774]
[92.47599030 98.83992004]
[84.23336029 86.30760956]
[75.99072266 73.77529144]
[59.36955261 65.94869995]
[58.93048859 48.44434738]
[50.39847183 36.10721970]
[41.86645508 23.77009392]
[33.33443832 11.43296814]
[24.80242157 -0.90415841]
[16.27040482 -13.24128532]
[7.73838711 -25.57841110]
[-0.79362971 -37.91553879]
[-15.00691986 -44.86484909]
[-15.88247013 -59.73369980]
[-31.17550278 -62.69358444]
[-39.65243530 -75.32672882]
[-36.73638916 -89.88805389]
[-45.26840591 -102.22518158]
[-53.80042648 -114.56230927]
[-62.33244324 -126.89943695]
[-70.86445618 -139.23655701]
[-87.66324615 -146.67427063]
[-88.50949860 -164.16366577]
[-97.32627869 -176.29891968]
[-106.14305878 -188.43417358]
[-114.95983887 -200.56942749]
[-123.77661133 -212.70469666]
[-132.59339905 -224.83995056]
[-141.41017151 -236.97520447]
[-150.22694397 -249.11045837]
[-159.04373169 -261.24569702]
[-167.86050415 -273.38095093]
[-177.23233032 -285.09286499]
[-187.13891602 -296.35607910]
[-202.99273682 -298.81286621]
[-210.83125305 -312.81060791]
[-204.64140320 -327.61148071]
[-189.17153931 -331.86148071]
[-176.28878784 -322.30038452]
[-175.87571716 -306.26266479]
[-165.96913147 -294.99945068]
[-163.09098816 -294.72994995]
[-160.15275574 -293.25097656]
[-157.63609314 -290.53607178]
[-156.02204895 -286.74105835]
[-155.72525024 -282.19775391]
[-146.90847778 -270.06250000]
[-138.09169006 -257.92724609]
[-129.27491760 -245.79197693]
[-120.45813751 -233.65672302]
[-111.64135742 -221.52146912]
[-102.82457733 -209.38621521]
[-94.00780487 -197.25096130]
[-85.19102478 -185.11570740]
[-76.37424469 -172.98045349]
[-64.42628479 -170.75274658]
[-56.99089432 -160.63513184]
[-58.52733231 -147.76856995]
[-49.99531555 -135.43145752]
[-41.46329880 -123.09432220]
[-32.93128204 -110.75719452]
[-24.39926529 -98.42007446]
[-9.74580383 -96.00933075]
[-0.91737866 -83.61927032]
[-3.54534340 -68.26571655]
[10.05768013 -62.19883728]
[11.54349709 -46.44755554]
[20.07551384 -34.11042786]
[28.60753059 -21.77330208]
[37.13954544 -9.43617535]
[45.67156219 2.90095115]
[54.20358276 15.23807716]
[62.73559952 27.57520485]
[71.26761627 39.91233063]
[83.16050720 42.41744995]
[90.35845184 52.70532608]
[88.52304077 65.53265381]
[96.76567841 78.06497192]
[105.00830841 90.59729004]
[115.67643738 101.14200592]
[128.30381775 109.23826599]
[140.93118286 117.33452606]
[156.72473145 118.26972198]
[163.26264954 131.65272522]
[175.89002991 139.74899292]
[188.51739502 147.84524536]
[201.32974243 155.64549255]
[214.32012939 163.14549255]
[227.31050110 170.64549255]
[240.30088806 178.14549255]
[253.29127502 185.64549255]
[266.28164673 193.14549255]
[279.27203369 200.64549255]
[293.39227295 194.21134949]
[308.59094238 197.33866882]
[319.02383423 208.82493591]
[320.67929077 224.25344849]
[312.92074585 237.69163513]
[298.73153687 243.97222900]
[283.56768799 240.68020630]
[273.26000977 229.08143616]
[271.77203369 213.63587952]
[258.78164673 206.13587952]
[245.79127502 198.63587952]
[232.80088806 191.13587952]
[219.81050110 183.63587952]
[206.82012939 176.13587952]
[193.82974243 168.63587952]
[188.98495483 169.01420593]
[183.86634827 166.28897095]
[180.42114258 160.47262573]
[167.79376221 152.37635803]
[155.16639709 144.28010559]
[140.27604675 143.92399597]
[132.83493042 129.96189880]
[120.20755005 121.86563873]
[107.58017731 113.76937866]
[100.42076874 116.00385284]
[111.45033264 126.16991425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[16 94]
[17 93]
[18 92]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[27 82]
[29 80]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[38 70]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
[48 56]
[49 55]
[95 132]
[96 131]
[97 130]
[99 128]
[100 127]
[101 126]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
