%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCGAUGUUGACAGACAGACAGAGGGGCGGAUGCAGCCUACCUCCUGGGCAGUGAGCUGCGGUCUGAGGCCCCUGCCCAGCUGGAAACCACAGGGAGGGGAAGGGAGGGGAGGAGAGGAGAGGAGAGGAACCGUC\
) } def
/len { sequence length } bind def

/coor [
[-53.89786911 398.77676392]
[-57.66100311 406.23098755]
[-64.02454376 411.49035645]
[-71.87207794 413.73056030]
[-79.86558533 412.64846802]
[-78.79399872 428.18841553]
[-88.82295990 439.62844849]
[-103.64450836 440.55429077]
[-113.37324524 451.97146606]
[-123.10197449 463.38864136]
[-132.83070374 474.80578613]
[-129.06037903 489.85784912]
[-134.88870239 504.23873901]
[-148.07456970 512.41876221]
[-163.54776001 511.25247192]
[-175.35848999 501.18835449]
[-178.96531677 486.09631348]
[-172.98133850 471.77947998]
[-159.70750427 463.74301147]
[-144.24787903 465.07705688]
[-134.51914978 453.65988159]
[-124.79041290 442.24273682]
[-115.06168365 430.82556152]
[-116.49950409 416.04489136]
[-106.79582977 404.32766724]
[-91.28275299 402.91973877]
[-89.68608856 381.36642456]
[-68.67874146 373.69537354]
[-60.02853775 361.44082642]
[-51.37833405 349.18627930]
[-42.72812653 336.93173218]
[-34.07792282 324.67718506]
[-33.05949783 309.81744385]
[-18.78006744 303.00506592]
[-17.76164246 288.14532471]
[-3.48221254 281.33294678]
[-9.57426929 260.31723022]
[1.76607072 241.29090881]
[23.67459297 236.53747559]
[30.57556915 223.21919250]
[37.47654343 209.90090942]
[35.69770050 192.47926331]
[51.19980621 182.61528015]
[57.79582596 169.14335632]
[64.39184570 155.67144775]
[70.98786926 142.19952393]
[77.58389282 128.72761536]
[84.17990875 115.25569916]
[78.96349335 106.36215210]
[78.37700653 96.06835175]
[82.54953766 86.63986969]
[74.46605682 74.00431061]
[66.38258362 61.36875153]
[58.29910278 48.73319244]
[43.49753571 41.67304993]
[42.48093796 25.30544090]
[56.29509735 16.46796417]
[70.72918701 24.25185394]
[70.93466187 40.64971542]
[79.01814270 53.28527451]
[87.10161591 65.92082977]
[95.18509674 78.55638885]
[100.04965210 78.02252960]
[104.91173553 78.57836151]
[109.53028870 80.19633484]
[120.25692749 69.71114349]
[130.98356628 59.22595978]
[127.97107697 45.72566223]
[132.01219177 32.61032486]
[141.94207764 23.29514694]
[155.07749939 20.14984703]
[167.94119263 23.89647865]
[178.90373230 13.65818119]
[189.86627197 3.41988397]
[200.82881165 -6.81841326]
[211.79135132 -17.05671120]
[215.97518921 -25.27571487]
[223.12191772 -27.39978027]
[234.31466675 -37.38588333]
[245.50743103 -47.37198257]
[250.65385437 -62.33275986]
[265.30175781 -65.03237152]
[269.67163086 -73.15400696]
[276.86483765 -75.11483765]
[288.28201294 -84.84356689]
[299.69918823 -94.57230377]
[307.83349609 -109.44741821]
[324.37908936 -105.74883270]
[325.40533447 -88.82596588]
[309.42791748 -83.15512848]
[298.01074219 -73.42639923]
[286.59356689 -63.69766998]
[275.28787231 -53.83961487]
[270.94201660 -39.59310913]
[255.49353027 -36.17922974]
[244.30076599 -26.19312668]
[233.10801697 -16.20702553]
[222.02964783 -6.09417105]
[211.06710815 4.14412642]
[200.10456848 14.38242340]
[189.14202881 24.62071991]
[178.17948914 34.85901642]
[180.72540283 51.03618622]
[173.07824707 65.70439911]
[158.05989075 73.02503204]
[141.46876526 69.95260620]
[130.74211121 80.43778992]
[120.01547241 90.92297363]
[117.80955505 112.87755585]
[97.65182495 121.85172272]
[91.05580902 135.32363892]
[84.45978546 148.79554749]
[77.86376190 162.26747131]
[71.26774597 175.73937988]
[64.67172241 189.21130371]
[68.11022949 201.70098877]
[62.27177811 212.81289673]
[50.79482269 216.80189514]
[43.89384842 230.12016296]
[36.99287033 243.43844604]
[42.22813034 250.18716431]
[45.19481659 258.16040039]
[45.64068985 266.62191772]
[43.54526138 274.79693604]
[39.11982346 281.94290161]
[32.78634644 287.41702271]
[25.13728523 290.73410034]
[16.88020515 291.60940552]
[8.77233601 289.98315430]
[7.13518953 305.71942139]
[-6.52551937 311.65527344]
[-8.16266537 327.39154053]
[-21.82337379 333.32739258]
[-30.47357941 345.58193970]
[-39.12378311 357.83648682]
[-47.77399063 370.09103394]
[-56.42419434 382.34558105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 26]
[8 23]
[9 22]
[10 21]
[11 20]
[28 137]
[29 136]
[30 135]
[31 134]
[32 133]
[34 131]
[36 129]
[39 120]
[40 119]
[41 118]
[43 115]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[51 62]
[52 61]
[53 60]
[54 59]
[65 108]
[66 107]
[67 106]
[72 102]
[73 101]
[74 100]
[75 99]
[76 98]
[78 97]
[79 96]
[80 95]
[82 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
