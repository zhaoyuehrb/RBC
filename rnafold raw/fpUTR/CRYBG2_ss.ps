%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAGAGCCCAAUCGCAUCAGGGGAGCACGGCCCAGCAGCAGGAGCUCCAGGCUGGCUGGACACCUGGGUCCCCACGCAGACUGUGAGUAGAGGGAGCUGGACCACAGUGGGACAAGGACACCUCCAGACAGGUUGCCAGGGCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[92.09713745 133.86322021]
[73.71686554 124.90811157]
[63.50338364 135.89376831]
[53.28990173 146.87944031]
[43.07642365 157.86509705]
[39.34653091 173.24035645]
[25.01392174 177.29321289]
[25.41231918 192.86494446]
[14.89790344 203.86047363]
[0.05017565 204.14433289]
[-10.16330433 215.12998962]
[-20.37678337 226.11566162]
[-15.23433685 240.53140259]
[-17.39174080 255.68409729]
[-26.35323906 268.09176636]
[-40.05954361 274.90319824]
[-55.36104965 274.55322266]
[-68.74158478 267.12219238]
[-77.12638855 254.31776428]
[-78.58870697 239.08227539]
[-72.79250336 224.91671753]
[-61.06970978 215.07626343]
[-46.11412811 211.82215881]
[-31.36244965 215.90217590]
[-21.14896965 204.91651917]
[-10.93548870 193.93084717]
[-11.73262596 179.10182190]
[-1.53119969 167.81529236]
[14.02825737 167.07972717]
[17.02761459 152.49024963]
[32.09075928 147.65162659]
[42.30423737 136.66595459]
[52.51771927 125.68029022]
[62.73119736 114.69462585]
[59.93887329 99.95682526]
[46.41468430 93.46865845]
[32.89049530 86.98049164]
[19.36630440 80.49232483]
[5.84211397 74.00416565]
[-7.74883699 67.65703583]
[-21.40507889 61.45162582]
[-35.06132126 55.24621964]
[-53.30934143 57.47995758]
[-62.99703217 42.88034821]
[-76.77941132 36.96038437]
[-92.99221039 39.42558670]
[-103.02081299 26.45026207]
[-96.54866028 11.38230801]
[-80.23374176 9.72234631]
[-70.85945129 23.17800331]
[-57.07706833 29.09796715]
[-45.68771362 24.90392876]
[-34.13378143 29.77482033]
[-28.85591316 41.58997726]
[-15.19967175 47.79538345]
[-1.54343009 54.00079346]
[5.89540482 53.90393829]
[12.33027840 60.47997284]
[25.85446930 66.96813965]
[39.37865829 73.45630646]
[52.90284729 79.94446564]
[66.42704010 86.43263245]
[74.67319489 75.47895050]
[86.12985992 68.63606262]
[98.96044159 66.68060303]
[111.22353363 69.63031769]
[121.16636658 76.78083038]
[127.47519684 86.84877777]
[142.18316650 83.90328979]
[156.89112854 80.95780945]
[171.59907532 78.01232910]
[183.61123657 67.71578979]
[197.61006165 72.80325317]
[212.31802368 69.85777283]
[227.02598572 66.91228485]
[233.17872620 54.88725662]
[244.97157288 48.71014786]
[257.97369385 50.44783401]
[267.44461060 59.23976898]
[282.21069336 56.60090256]
[296.97674561 53.96203995]
[306.01962280 41.27881241]
[321.03207397 38.81297684]
[333.06787109 47.51213837]
[347.83392334 44.87327194]
[362.59997559 42.23440933]
[377.36602783 39.59554291]
[386.40890503 26.91231918]
[401.42138672 24.44648361]
[413.45715332 33.14564133]
[418.83331299 29.12014961]
[424.56970215 28.55005074]
[428.89144897 30.71754837]
[443.75451660 28.69521332]
[458.61755371 26.67287827]
[473.48059082 24.65054512]
[488.32180786 22.47370720]
[497.62658691 9.98135281]
[512.68707275 7.82836628]
[524.53930664 16.77603340]
[539.35705566 14.44492912]
[554.14978027 11.95981026]
[563.19262695 -0.72341508]
[578.20513916 -3.18925071]
[590.24090576 5.50990868]
[605.00695801 2.87104464]
[619.77301025 0.23218033]
[634.30139160 -8.50634670]
[646.72027588 3.03521514]
[639.06768799 18.16378593]
[622.41186523 14.99823570]
[607.64581299 17.63710022]
[592.87976074 20.27596474]
[584.60205078 32.60538483]
[569.66473389 35.49191666]
[556.78863525 26.72586632]
[550.71820068 31.02646065]
[541.68817139 29.26268768]
[526.87042236 31.59379005]
[518.33795166 43.74833679]
[503.34387207 46.32349014]
[490.65289307 37.29146576]
[484.49429321 41.46483994]
[475.50292969 39.51359177]
[460.63989258 41.53592682]
[445.77682495 43.55826187]
[430.91378784 45.58059311]
[416.09603882 47.91169739]
[407.81829834 60.24111938]
[392.88101196 63.12765121]
[380.00491333 54.36159897]
[365.23883057 57.00046539]
[350.47277832 59.63932800]
[335.70672607 62.27819443]
[327.42898560 74.60761261]
[312.49169922 77.49414825]
[299.61560059 68.72809601]
[284.84954834 71.36695862]
[270.08349609 74.00582123]
[261.09933472 88.18830872]
[244.31349182 91.58235168]
[229.97146606 81.62024689]
[215.26350403 84.56573486]
[200.55554199 87.51121521]
[189.59539795 97.59706879]
[174.54457092 92.72029114]
[159.83660889 95.66577148]
[145.12864685 98.61125183]
[130.42068481 101.55673981]
[125.69706726 118.89831543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[5 31]
[7 29]
[10 26]
[11 25]
[12 24]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 56]
[41 55]
[42 54]
[44 51]
[45 50]
[68 149]
[69 148]
[70 147]
[71 146]
[73 144]
[74 143]
[75 142]
[79 139]
[80 138]
[81 137]
[84 134]
[85 133]
[86 132]
[87 131]
[90 128]
[93 127]
[94 126]
[95 125]
[96 124]
[97 122]
[100 119]
[101 118]
[102 116]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
