%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAAAGGGAAGUGCUGCGAGGUUUACAACCAGCUGCAGUGGUUCGAUGGGAAGGAUCUUUCUCCAAGUGGUUCCUCUUGAGGGGAGCAUUUCUGCUGGCUCCAGGACUUUGGCCAUCUAUAAAGCUUGGCA\
) } def
/len { sequence length } bind def

/coor [
[164.05207825 207.99993896]
[153.76322937 197.08482361]
[143.47438049 186.16972351]
[133.18553162 175.25460815]
[118.33620453 175.07296753]
[107.74635315 164.15007019]
[108.03755951 148.57595825]
[97.74871063 137.66084290]
[83.25221252 133.80709839]
[68.90132141 138.17195129]
[54.55043793 142.53681946]
[43.59894180 153.95501709]
[29.17094612 150.25607300]
[14.82005882 154.62092590]
[0.46917215 158.98579407]
[-13.88171482 163.35066223]
[-28.23260117 167.71553040]
[-42.58348846 172.08038330]
[-56.93437576 176.44525146]
[-69.91133881 191.78863525]
[-88.54562378 186.84014893]
[-102.67437744 191.87785339]
[-116.80312347 196.91555786]
[-130.93186951 201.95326233]
[-143.82035828 212.96794128]
[-157.97247314 203.63229370]
[-152.91935730 187.44889832]
[-135.96957397 187.82450867]
[-121.84082794 182.78680420]
[-107.71208191 177.74909973]
[-93.58333588 172.71139526]
[-89.99684143 163.01896667]
[-81.45867157 156.81268311]
[-70.69134521 156.37393188]
[-61.29924011 162.09437561]
[-46.94835281 157.72950745]
[-32.59746552 153.36463928]
[-18.24658012 148.99977112]
[-3.89569235 144.63490295]
[10.45519447 140.27005005]
[24.80608177 135.90518188]
[34.73110580 124.79918671]
[50.18557358 128.18592834]
[64.53646088 123.82106781]
[78.88734436 119.45620728]
[69.36831665 107.19371796]
[67.14398193 90.43606567]
[74.16514587 73.54889679]
[67.65689087 60.03436661]
[61.14863586 46.51983261]
[54.48122406 33.08310699]
[47.65558624 19.72606087]
[40.82994843 6.36901569]
[34.00431061 -6.98802996]
[19.95362473 -15.44440174]
[20.52220917 -31.83368874]
[35.12515259 -39.29599762]
[48.74020004 -30.15474510]
[47.36135864 -13.81366730]
[54.18699646 -0.45662168]
[61.01263428 12.90042400]
[67.83827209 26.25746918]
[73.73948669 30.82569313]
[74.66316986 40.01157761]
[81.17142487 53.52611160]
[87.67967987 67.04064178]
[95.15406799 67.65998840]
[96.39299011 52.71123886]
[111.34171295 53.95039368]
[110.10283661 68.89868164]
[117.57721710 69.51802063]
[126.22113037 57.25903702]
[134.86503601 45.00004578]
[143.50895691 32.74105835]
[152.15286255 20.48206902]
[160.79676819 8.22308064]
[169.44068909 -4.03590775]
[170.38388062 -20.40790939]
[185.15364075 -27.53435707]
[198.55609131 -18.08417130]
[196.80395508 -1.77889466]
[181.69967651 4.60800314]
[173.05575562 16.86699104]
[164.41184998 29.12598038]
[155.76794434 41.38496780]
[147.12402344 53.64395905]
[138.48011780 65.90294647]
[129.83621216 78.16193390]
[134.20046997 91.17171478]
[133.39930725 104.25104523]
[128.00691223 115.51244354]
[119.22788239 123.49919891]
[108.66381836 127.37200165]
[118.95266724 138.28710938]
[134.51681519 138.91555786]
[144.79568481 150.13159180]
[144.10063171 164.96575928]
[154.38948059 175.88087463]
[164.67834473 186.79597473]
[174.96719360 197.71109009]
[194.47969055 202.51556396]
[198.32975769 221.40739441]
[209.12258911 231.82444763]
[219.91542053 242.24148560]
[230.70825195 252.65852356]
[241.50108337 263.07556152]
[249.93429565 266.83251953]
[252.42213440 273.86840820]
[262.96591187 284.53744507]
[273.50970459 295.20651245]
[284.05349731 305.87554932]
[294.59725952 316.54461670]
[309.91650391 314.07470703]
[323.74658203 321.11096191]
[330.76953125 334.94778442]
[328.28488159 350.26464844]
[317.24804688 361.17190552]
[301.90292358 363.47546387]
[288.14999390 356.28958130]
[281.27755737 342.37738037]
[283.92822266 327.08837891]
[273.38442993 316.41934204]
[262.84066772 305.75027466]
[252.29687500 295.08123779]
[241.75308228 284.41220093]
[231.08403015 273.86840820]
[220.29119873 263.45135498]
[209.49838257 253.03431702]
[198.70555115 242.61727905]
[187.91271973 232.20022583]
[177.63623047 233.29574585]
[168.28160095 228.40606689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[7 94]
[8 93]
[9 45]
[10 44]
[11 43]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[21 31]
[22 30]
[23 29]
[24 28]
[48 66]
[49 65]
[50 64]
[51 62]
[52 61]
[53 60]
[54 59]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
[102 130]
[103 129]
[104 128]
[105 127]
[106 126]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
