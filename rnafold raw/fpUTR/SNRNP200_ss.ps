%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCCGUUUCUUUUCCUUCCCCAGUGCGUCUUUCCUGCGUCGUUCCGGCGCGGCGGGAGCAGAGAUCUGCGGCCGUUUGCAGCUUGCGGUAGGGAGGCGUGGUGGUCUGAAGCCUCCGAGCAGCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[117.12257385 558.69537354]
[102.70701599 552.63519287]
[95.60549164 538.70312500]
[99.17111206 523.47747803]
[111.72030640 514.14733887]
[112.42867279 499.16406250]
[113.13703918 484.18078613]
[113.84540558 469.19754028]
[103.66369629 458.38696289]
[104.16863251 443.18170166]
[115.57678986 432.57550049]
[116.28515625 417.59222412]
[109.15752411 404.51376343]
[117.53789520 391.09439087]
[118.24626160 376.11111450]
[118.95462799 361.12783813]
[118.77747345 346.12890625]
[117.71542358 331.16653442]
[116.65336609 316.20419312]
[115.59130859 301.24182129]
[103.57431030 286.16482544]
[112.41257477 268.11752319]
[110.64511871 253.22201538]
[108.87765503 238.32650757]
[99.69459534 226.59957886]
[105.75191498 211.98385620]
[103.98445129 197.08834839]
[102.21699524 182.19284058]
[100.44953918 167.29733276]
[98.68207550 152.40184021]
[96.91461945 137.50633240]
[95.14715576 122.61082458]
[93.37969971 107.71531677]
[89.34398651 100.64181519]
[91.75069427 92.44766998]
[90.33554077 77.51457214]
[88.92038727 62.58147812]
[87.50523376 47.64838409]
[86.09008789 32.71528625]
[82.49369812 26.98381042]
[82.41739655 21.18056107]
[84.97785950 17.04614830]
[84.26949310 2.06288290]
[83.56112671 -12.92038155]
[75.01863861 -19.84576416]
[71.81573486 -30.13504410]
[74.79400635 -40.26165009]
[82.71895599 -46.89500046]
[82.71895599 -61.89500046]
[82.71895599 -76.89499664]
[82.54180908 -91.89395142]
[82.18752289 -106.88977051]
[81.83324432 -121.88558197]
[81.47895813 -136.88139343]
[80.94760132 -151.87197876]
[80.23923492 -166.85525513]
[79.53086853 -181.83851624]
[68.12271118 -192.44473267]
[67.61776733 -207.64997864]
[77.79947662 -218.46055603]
[77.09111023 -233.44381714]
[76.38274384 -248.42707825]
[75.67437744 -263.41033936]
[66.36280060 -276.90948486]
[73.64105988 -291.60501099]
[90.02191162 -292.37945557]
[98.65413666 -278.43612671]
[90.65764618 -264.11871338]
[91.36601257 -249.13545227]
[92.07437897 -234.15217590]
[92.78274536 -219.16891479]
[103.93894958 -209.36714172]
[104.87077332 -194.18206787]
[94.51412964 -182.54687500]
[95.22249603 -167.56361389]
[95.93086243 -152.58035278]
[99.42235565 -145.98471069]
[96.47477722 -137.23568726]
[96.82905579 -122.23986816]
[97.18334198 -107.24404907]
[97.53762054 -92.24823761]
[100.87236023 -85.57196808]
[97.71895599 -76.89499664]
[97.71895599 -61.89500046]
[97.71895599 -46.89500046]
[108.63829803 -31.00499153]
[98.54439545 -13.62874794]
[99.25275421 1.35451651]
[99.96112061 16.33778191]
[101.02317810 31.30013466]
[102.43833160 46.23323059]
[103.85348511 61.16632462]
[105.26863861 76.09941864]
[106.68378448 91.03251648]
[108.27520752 105.94786072]
[110.04266357 120.84336090]
[111.81011963 135.73887634]
[113.57758331 150.63436890]
[115.34503937 165.52987671]
[117.11250305 180.42538452]
[118.87995911 195.32089233]
[120.64741516 210.21640015]
[129.95689392 223.00874329]
[123.77316284 236.55905151]
[125.54061890 251.45454407]
[127.30808258 266.35006714]
[136.31947327 272.65322876]
[140.24285889 282.68991089]
[137.98905945 293.00195312]
[130.55366516 300.17977905]
[131.61572266 315.14212036]
[132.67778015 330.10449219]
[133.73983765 345.06683350]
[145.72929382 336.05279541]
[160.31066895 339.57180786]
[166.86906433 353.06207275]
[160.63009644 366.70300293]
[146.13560486 370.56433105]
[133.93789673 361.83621216]
[133.22952271 376.81948853]
[132.52116394 391.80273438]
[139.59812927 405.95291138]
[131.26841736 418.30059814]
[130.56005859 433.28384399]
[140.91670227 444.91903687]
[139.98486328 460.10412598]
[128.82865906 469.90588379]
[128.12030029 484.88916016]
[127.41193390 499.87240601]
[126.70356750 514.85571289]
[138.31654358 525.32818604]
[140.42982483 540.82226562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 130]
[6 129]
[7 128]
[8 127]
[11 124]
[12 123]
[14 121]
[15 120]
[16 119]
[17 113]
[18 112]
[19 111]
[20 110]
[22 106]
[23 105]
[24 104]
[26 102]
[27 101]
[28 100]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[42 89]
[43 88]
[44 87]
[48 85]
[49 84]
[50 83]
[51 81]
[52 80]
[53 79]
[54 78]
[55 76]
[56 75]
[57 74]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
