%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUACUAGGGCAAUCUGCCGGAAGAGUCAGGUUCUGUGUAUGUCUCCGCGUCUUCCGCGGAGCGGGUGUGCAGGGCCUGCAGCAUUGAACUAG\
) } def
/len { sequence length } bind def

/coor [
[83.61234283 324.01333618]
[70.79877472 333.26470947]
[55.21003342 330.66339111]
[46.09465027 317.75274658]
[48.86061859 302.19238281]
[61.86693954 293.21398926]
[64.33585358 278.41857910]
[66.80477905 263.62316895]
[69.27369690 248.82774353]
[60.43672943 236.89276123]
[62.72979736 221.85293579]
[75.30821991 212.66482544]
[77.77713776 197.86941528]
[80.24605560 183.07398987]
[82.71497345 168.27857971]
[84.93892670 153.44435120]
[86.91731262 138.57539368]
[88.89569092 123.70643616]
[90.87407684 108.83747101]
[79.18493652 118.23768616]
[64.39648438 120.74803925]
[50.26012802 115.73172760]
[40.36182785 104.46125031]
[37.21249390 89.79558563]
[41.61101532 75.45497894]
[52.44161987 65.07721710]
[66.95690918 61.29482651]
[81.47477722 65.06729126]
[92.31247711 75.43764496]
[96.72084808 89.77618408]
[103.41997528 76.35524750]
[110.11911011 62.93430710]
[116.81824493 49.51336670]
[123.51737213 36.09242630]
[130.21650696 22.67148590]
[136.91563416 9.25054646]
[143.61477661 -4.17039394]
[150.31390381 -17.59133339]
[157.01303101 -31.01227379]
[163.71217346 -44.43321228]
[170.41130066 -57.85415268]
[177.11042786 -71.27509308]
[176.35092163 -87.07805634]
[188.95782471 -95.00997925]
[195.43414307 -108.53984833]
[201.68586731 -122.17494202]
[207.93759155 -135.81004333]
[214.18931580 -149.44514465]
[220.44105530 -163.08023071]
[226.69277954 -176.71533203]
[232.94450378 -190.35043335]
[228.73107910 -205.83030701]
[238.32258606 -218.69041443]
[254.36125183 -219.06559753]
[264.54357910 -206.66802979]
[261.05856323 -191.00807190]
[246.57960510 -184.09870911]
[240.32788086 -170.46360779]
[234.07614136 -156.82850647]
[227.82441711 -143.19340515]
[221.57269287 -129.55831909]
[215.32096863 -115.92321777]
[209.06922913 -102.28811646]
[209.14480591 -94.74710846]
[202.37876892 -88.31084442]
[203.61744690 -73.46783447]
[190.53137207 -64.57595825]
[183.83224487 -51.15502167]
[177.13310242 -37.73408127]
[170.43397522 -24.31314087]
[163.73484802 -10.89220142]
[157.03570557 2.52873826]
[150.33657837 15.94967842]
[143.63745117 29.37061882]
[136.93830872 42.79155731]
[130.23918152 56.21249771]
[123.54005432 69.63343811]
[116.84091949 83.05437469]
[110.14178467 96.47531891]
[105.74303436 110.81585693]
[103.76465607 125.68481445]
[101.78627014 140.55377197]
[99.80789185 155.42274475]
[101.80132294 164.54585266]
[97.51039124 170.74749756]
[95.04147339 185.54290771]
[92.57255554 200.33833313]
[90.10363770 215.13374329]
[99.01715088 227.90821838]
[96.30255127 242.87770081]
[84.06911469 251.29666138]
[81.60019684 266.09207153]
[79.13127899 280.88748169]
[76.66236115 295.68292236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 94]
[7 93]
[8 92]
[9 91]
[12 88]
[13 87]
[14 86]
[15 85]
[16 83]
[17 82]
[18 81]
[19 80]
[30 79]
[31 78]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[44 65]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
