%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCCCUGCUCUCACCGGGCGGGGGAGAGAAGCCCUCUGGACAGCUUCUAGAGUGUGCAGGUUCUCGUAUCCCUCGGCCAAGGGUAUCCUCUGCAAACCUCUGCAAACCCAGCGCAACUACGGUCCCCCGGUCAGACCCAGG\
) } def
/len { sequence length } bind def

/coor [
[71.29229736 362.50811768]
[59.01924515 372.46539307]
[43.30889130 370.74484253]
[33.48191452 358.36718750]
[35.36848068 342.67590332]
[47.84932709 332.98034668]
[49.48233032 318.06951904]
[51.11533356 303.15866089]
[52.74833679 288.24780273]
[44.80809021 272.63415527]
[55.72249985 257.84677124]
[57.02983856 242.90385437]
[58.33717346 227.96093750]
[51.73857117 214.60774231]
[60.64919281 201.53443909]
[61.95652771 186.59150696]
[63.26386642 171.64859009]
[64.57120514 156.70567322]
[65.87854004 141.76275635]
[67.18587494 126.81983185]
[60.55154419 113.36673737]
[47.90067291 105.30724335]
[35.24980164 97.24774933]
[22.59892845 89.18825531]
[9.94805622 81.12876129]
[-2.70281506 73.06926727]
[-15.35368729 65.00977325]
[-28.26148415 57.36852264]
[-41.41238403 50.15369034]
[-54.56328583 42.93885803]
[-67.71418762 35.72402573]
[-80.86508942 28.50919533]
[-94.24501038 21.72851181]
[-107.83963013 15.38923836]
[-121.50258636 9.19863224]
[-135.29733276 3.30755615]
[-149.15553284 -2.43269515]
[-163.01373291 -8.17294693]
[-176.87191772 -13.91319847]
[-190.73011780 -19.65345001]
[-204.58830261 -25.39370155]
[-218.44650269 -31.13395309]
[-233.75894165 -26.34766960]
[-246.96690369 -35.45421600]
[-247.93836975 -51.46783066]
[-235.92811584 -62.10423660]
[-220.14936829 -59.20409393]
[-212.70625305 -44.99214554]
[-198.84805298 -39.25189590]
[-184.98985291 -33.51164246]
[-171.13166809 -27.77139091]
[-157.27346802 -22.03113937]
[-143.41528320 -16.29088783]
[-129.55708313 -10.55063629]
[-122.11743164 -10.89952374]
[-115.46138763 -4.53103971]
[-108.01589203 -4.71754789]
[-101.50035858 1.79462135]
[-87.90573883 8.13389492]
[-84.42391205 7.22837687]
[-80.32434082 8.01255131]
[-76.42868042 10.76043701]
[-73.65026093 15.35829353]
[-60.49935532 22.57312584]
[-47.34845734 29.78795624]
[-34.19755554 37.00278854]
[-21.04665375 44.21762085]
[-17.51305580 43.54176331]
[-13.47354889 44.59238434]
[-9.76595116 47.58917236]
[-7.29419279 52.35890198]
[5.35667896 60.41839600]
[18.00755119 68.47789001]
[30.65842247 76.53738403]
[43.30929565 84.59687805]
[55.96016693 92.65637207]
[68.61103821 100.71586609]
[112.22087097 59.42019653]
[125.52603149 52.49396515]
[127.93292999 37.27841568]
[138.71173096 26.52336693]
[153.58078003 24.20495415]
[166.80555725 31.00520706]
[180.11071777 24.07897758]
[193.41587830 17.15274811]
[206.72103882 10.22651958]
[207.32438660 2.54033184]
[210.56733704 -4.37866497]
[215.99050903 -9.66407585]
[222.86506653 -12.67296410]
[230.29043579 -13.06384563]
[237.31222534 -10.83480644]
[243.04490662 -6.31759024]
[257.02502441 -11.75416088]
[271.00515747 -17.19073105]
[284.98526001 -22.62730217]
[291.12017822 -37.19227219]
[305.78851318 -43.07575989]
[320.28781128 -36.78719330]
[326.01589966 -22.05747223]
[319.57437134 -7.62547588]
[304.78491211 -2.05345201]
[290.42184448 -8.64718342]
[276.44171143 -3.21061325]
[262.46160889 2.22595739]
[248.48147583 7.66252804]
[236.60449219 26.70979881]
[213.64727783 23.53168106]
[200.34210205 30.45791054]
[187.03694153 37.38414001]
[173.73178101 44.31037140]
[171.71681213 59.04393387]
[161.28913879 69.89416504]
[146.29664612 72.55479431]
[132.45225525 65.79912567]
[119.14710236 72.72535706]
[118.32935333 87.70372009]
[117.51166534 102.68074799]
[129.98370361 111.01429749]
[146.37422180 111.54634857]
[153.86906433 126.13261414]
[144.75819397 139.76800537]
[128.41407776 138.42559814]
[121.65015411 123.48634338]
[109.17810822 115.15279388]
[102.41577911 118.39638519]
[88.89112091 124.88357544]
[82.12879181 128.12716675]
[80.82145691 143.07008362]
[79.51412201 158.01301575]
[78.20678711 172.95593262]
[76.89945221 187.89884949]
[75.59210968 202.84176636]
[82.09720612 217.26377869]
[73.28009796 229.26826477]
[71.97275543 244.21119690]
[70.66542053 259.15411377]
[78.36437988 269.56402588]
[76.92120361 282.02651978]
[67.65917969 289.88082886]
[66.02617645 304.79165649]
[64.39317322 319.70251465]
[62.76016998 334.61334229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 143]
[7 142]
[8 141]
[9 140]
[11 137]
[12 136]
[13 135]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 59]
[34 58]
[35 56]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[78 116]
[79 115]
[83 111]
[84 110]
[85 109]
[86 108]
[93 106]
[94 105]
[95 104]
[96 103]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
