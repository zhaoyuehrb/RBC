%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUUCUUAGUGCCUAAAGUGUCUGCACAUGGAAAUCCAGAGGUAGACAGAGAGAAACUGAGUUCCGGACA\
) } def
/len { sequence length } bind def

/coor [
[95.50946808 325.06832886]
[86.31062317 313.02020264]
[81.79019165 298.55157471]
[82.49404907 283.40957642]
[88.33719635 269.42266846]
[98.61403656 258.27984619]
[112.08360291 251.32667542]
[110.15238190 236.45150757]
[108.22115326 221.57635498]
[106.28993225 206.70118713]
[104.35871124 191.82603455]
[102.42749023 176.95088196]
[90.50712585 168.09420776]
[88.33669281 153.03619385]
[97.70719910 140.59306335]
[95.77597809 125.71791077]
[83.55222321 120.21691895]
[75.67935944 109.36800385]
[74.23995972 96.04100037]
[79.61479950 83.76125336]
[90.38208008 75.77709961]
[89.09260559 60.83262634]
[87.80313873 45.88815689]
[86.51366425 30.94368362]
[85.22418976 15.99921036]
[83.93472290 1.05473769]
[82.64524841 -13.88973522]
[69.51861572 -21.95185661]
[63.72394562 -36.03287888]
[67.28963470 -50.65306473]
[78.64463806 -60.25524902]
[77.35516357 -75.19972229]
[76.06568909 -90.14419556]
[66.23710632 -103.27168274]
[72.93940735 -118.23867798]
[89.27784729 -119.64842987]
[98.44483948 -106.05069733]
[91.01016235 -91.43366241]
[92.29963684 -76.48918915]
[93.58911133 -61.54471970]
[106.42107391 -54.02949142]
[112.43840027 -40.23616409]
[109.14134979 -25.37067413]
[97.58972168 -15.17920685]
[98.87918854 -0.23473427]
[100.16866302 14.70973873]
[101.45813751 29.65421104]
[102.74760437 44.59868240]
[104.03707886 59.54315567]
[105.32655334 74.48762512]
[119.31157684 82.49810791]
[125.91178894 97.20137787]
[122.60324097 112.97484589]
[110.65113831 123.78668976]
[112.58235931 138.66184998]
[124.81961060 148.29966736]
[126.56624603 163.41270447]
[117.30265045 175.01965332]
[119.23387146 189.89480591]
[121.16509247 204.76997375]
[123.09631348 219.64512634]
[125.02754211 234.52029419]
[126.95876312 249.39544678]
[141.75729370 252.67861938]
[154.53878784 260.82778931]
[163.75982666 272.85894775]
[168.30691528 287.31921387]
[167.63096619 302.46249390]
[161.81359863 316.46014404]
[151.55731201 327.62188721]
[138.10058594 334.59985352]
[123.06838226 336.55148315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[15 55]
[16 54]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
