%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGCCCAGCCACGACAGUGACAGAGUUUAACAAACUAAGCUUAGAGAAACCUCCAGGAGACUGCUAUC\
) } def
/len { sequence length } bind def

/coor [
[125.99390411 224.18377686]
[122.05821991 209.70928955]
[118.12253571 195.23481750]
[114.18685150 180.76034546]
[103.38126373 170.50907898]
[107.22660828 155.16229248]
[103.29092407 140.68782043]
[92.27004242 140.08212280]
[81.81430817 136.54598999]
[72.68814087 130.33795166]
[65.55876160 121.91187286]
[60.94741821 111.88380432]
[46.03909683 113.53971863]
[31.13077927 115.19562531]
[18.24850082 125.34347534]
[3.12149429 119.01057434]
[1.31112683 102.71166229]
[14.67974949 93.21366119]
[29.47487068 100.28730774]
[44.38319016 98.63139343]
[59.29150772 96.97548676]
[62.09127426 84.85874176]
[68.40940094 74.14728546]
[77.65948486 65.83524323]
[88.98302460 60.69408035]
[87.65732574 45.75277710]
[86.33162689 30.81147575]
[85.00592041 15.87017250]
[83.68022156 0.92887038]
[82.35452271 -14.01243210]
[81.02881622 -28.95373344]
[68.75020599 -38.90417862]
[67.18706512 -54.63097382]
[77.26676941 -66.80369568]
[93.00920868 -68.20047760]
[105.07468414 -57.99264145]
[106.30495453 -42.23630905]
[95.97012329 -30.27943611]
[97.29582214 -15.33813381]
[98.62152100 -0.39683121]
[99.94722748 14.54447079]
[101.27292633 29.48577309]
[102.59862518 44.42707443]
[103.92433167 59.36837769]
[123.70061493 66.76432800]
[137.13615417 83.05197906]
[151.69415283 79.43746948]
[166.25215149 75.82295227]
[177.67797852 64.05935669]
[193.51010132 68.33442688]
[197.46176147 84.25034332]
[185.46784973 95.43417358]
[169.86665344 90.38095093]
[155.30867004 93.99546051]
[140.75067139 97.60997772]
[138.55879211 113.39955902]
[130.48670959 127.14570618]
[117.76539612 136.75213623]
[121.70108032 151.22660828]
[132.78817749 162.51318359]
[128.66133118 176.82466125]
[132.59701538 191.29913330]
[136.53269958 205.77360535]
[140.46838379 220.24809265]
[154.74002075 226.63981628]
[161.51766968 240.73228455]
[157.60110474 255.87144470]
[144.83963013 264.90908813]
[129.25881958 263.57788086]
[118.21543884 252.50637817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[6 59]
[7 58]
[12 21]
[13 20]
[14 19]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
