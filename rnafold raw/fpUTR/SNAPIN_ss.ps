%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCGCCCCCUCACGGGGCGGGGCAGUGCGGCGCGGCUCCGGUUCCCGGCGGCCCUCGCGGCAGGUUUCGGGCUUCAGGACAAUUCGUG\
) } def
/len { sequence length } bind def

/coor [
[126.39688110 166.52191162]
[126.51682281 159.56048584]
[120.00856781 146.04594421]
[113.50031281 132.53141785]
[106.99205780 119.01688385]
[92.36814117 115.67906952]
[80.64066315 125.03141785]
[68.91319275 134.38375854]
[57.18572235 143.73611450]
[45.45824814 153.08845520]
[42.24039459 168.80548096]
[27.88119125 175.96040344]
[13.39578629 169.06455994]
[9.89614487 153.40786743]
[20.06689262 141.00079346]
[36.10589981 141.36097717]
[47.83337402 132.00863647]
[59.56084442 122.65628815]
[71.28831482 113.30393982]
[83.01579285 103.95159149]
[89.52404785 90.43706512]
[89.52404785 75.43706512]
[89.52404785 60.43706131]
[89.52404785 45.43706131]
[89.52404785 30.43706131]
[80.90148926 20.65744400]
[81.33218384 8.03052044]
[90.02776337 -0.57026362]
[90.54550171 -15.56132603]
[91.06324768 -30.55238724]
[83.80688477 -44.61140060]
[91.97886658 -57.06402588]
[92.49661255 -72.05508423]
[93.01435089 -87.04615021]
[83.95796204 -102.96416473]
[93.57225800 -117.53464508]
[93.57225800 -132.53463745]
[93.57225800 -147.53463745]
[93.57225800 -162.53463745]
[93.31334686 -177.53240967]
[92.79560089 -192.52346802]
[92.27786255 -207.51452637]
[91.76011658 -222.50559998]
[85.17067719 -238.12658691]
[98.35706329 -248.78283691]
[112.24721527 -239.06172180]
[106.75118256 -223.02333069]
[107.26892090 -208.03227234]
[107.78666687 -193.04121399]
[108.30440521 -178.05015564]
[111.75551605 -171.33110046]
[108.57225800 -162.53463745]
[108.57225800 -147.53463745]
[108.57225800 -132.53463745]
[108.57225800 -117.53464508]
[116.96578217 -108.63884735]
[116.96038818 -96.00457764]
[108.00541687 -86.52840424]
[107.48767090 -71.53734589]
[106.96993256 -56.54628372]
[114.26332855 -43.55953217]
[106.05430603 -30.03464508]
[105.53656769 -15.04358387]
[105.01882172 -0.05252154]
[114.12447357 14.84112644]
[104.52404785 30.43706131]
[104.52404785 45.43706131]
[104.52404785 60.43706131]
[104.52404785 75.43706512]
[104.52404785 90.43706512]
[112.67837524 91.87294006]
[119.53882599 99.78205109]
[120.50659180 112.50862885]
[127.01484680 126.02315521]
[133.52310181 139.53768921]
[140.03135681 153.05223083]
[147.00221252 166.33406067]
[154.42733765 179.36738586]
[167.98138428 187.52815247]
[167.55865479 202.41676331]
[174.98377991 215.45007324]
[189.40397644 223.25968933]
[189.58021545 239.65789795]
[175.33119202 247.77561951]
[161.31507874 239.26203918]
[161.95046997 222.87521362]
[154.52532959 209.84188843]
[141.50238037 202.61335754]
[141.39401245 186.79251099]
[133.96888733 173.75920105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[21 70]
[22 69]
[23 68]
[24 67]
[25 66]
[28 64]
[29 63]
[30 62]
[32 60]
[33 59]
[34 58]
[36 55]
[37 54]
[38 53]
[39 52]
[40 50]
[41 49]
[42 48]
[43 47]
[77 90]
[78 89]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
