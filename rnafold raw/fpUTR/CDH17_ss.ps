%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCACGGUGGAAGUAUGAUAUUUUGGCUGUGGAUCUGAGUUGAUCAAUCUGCUUAGUGGACUUGAGUCCCCCCACCCCCGCUUGUCUGAUUGGGGCUCCUGGGAGGAAUUUGAAUAAAGAAAACU\
) } def
/len { sequence length } bind def

/coor [
[79.81171417 160.67936707]
[70.93649292 156.96371460]
[62.71919250 151.95858765]
[55.34581757 145.77725220]
[43.68473434 155.21224976]
[32.02365494 164.64724731]
[20.36257553 174.08224487]
[8.70149517 183.51724243]
[-2.95958543 192.95223999]
[-8.82115173 207.64756775]
[-23.58216286 209.63800049]
[-35.24324417 219.07299805]
[-46.90432358 228.50799561]
[-58.56540298 237.94300842]
[-70.22648621 247.37800598]
[-81.88756561 256.81298828]
[-90.39784241 271.47625732]
[-106.84394836 267.35778809]
[-107.43914032 250.41427612]
[-91.32256317 245.15191650]
[-79.66148376 235.71691895]
[-68.00040436 226.28192139]
[-56.33932114 216.84692383]
[-44.67824173 207.41192627]
[-33.01716232 197.97692871]
[-27.98967361 183.95645142]
[-12.39458466 181.29116821]
[-0.73350418 171.85617065]
[10.92757607 162.42117310]
[22.58865547 152.98616028]
[34.24973679 143.55116272]
[45.91081619 134.11616516]
[38.35002136 116.99507904]
[36.06995392 98.41824341]
[39.26592255 79.97689819]
[47.66416931 63.25066376]
[36.48395538 53.25052643]
[25.30373955 43.25038528]
[14.12352276 33.25024796]
[2.94330645 23.25011063]
[-8.23690987 13.24997234]
[-23.68110847 9.81670952]
[-28.00908089 -4.43523550]
[-39.18929672 -14.43537331]
[-55.34325409 -17.26056671]
[-60.71864319 -32.75370026]
[-49.78572845 -44.97676849]
[-33.79135132 -41.35572433]
[-29.18915939 -25.61558914]
[-18.00894165 -15.61545181]
[-3.36442733 -12.89746571]
[1.76322842 2.06975579]
[12.94344425 12.06989384]
[24.12366104 22.07003212]
[35.30387878 32.07017136]
[46.48409271 42.07030869]
[57.66431046 52.07044601]
[74.13588715 41.51409912]
[93.02814484 36.43156433]
[112.57290649 37.29852676]
[130.94094849 44.03384399]
[146.41316223 56.00714493]
[157.54147339 72.09782410]
[171.71279907 67.18118286]
[185.88414001 62.26453781]
[200.05546570 57.34789658]
[214.22679138 52.43125153]
[228.39813232 47.51460648]
[242.50756836 42.42306519]
[256.55294800 37.15740585]
[266.75872803 25.06805038]
[281.39215088 27.84510803]
[295.43756104 22.57944870]
[309.48294067 17.31378937]
[323.52832031 12.04813099]
[335.92526245 -5.34332705]
[356.14617920 -1.51796341]
[369.76248169 -7.81049299]
[383.37881470 -14.10302258]
[396.99511719 -20.39555359]
[410.61145020 -26.68808174]
[419.89279175 -39.50085068]
[434.69186401 -37.81639862]
[448.30816650 -44.10892868]
[457.31311035 -57.81450653]
[473.66714478 -56.59877396]
[480.54660034 -41.71237564]
[470.87454224 -28.46916008]
[454.60070801 -30.49261093]
[440.98437500 -24.20008087]
[432.67694092 -11.83739758]
[416.90396118 -13.07176590]
[403.28765869 -6.77923632]
[389.67135620 -0.48670664]
[376.05502319 5.80582333]
[362.43872070 12.09835243]
[360.72393799 21.00070190]
[354.96908569 28.18451881]
[346.40124512 31.91135597]
[336.94577026 31.20281029]
[328.79397583 26.09351540]
[314.74859619 31.35917473]
[300.70321655 36.62483215]
[286.65780640 41.89049149]
[277.45666504 53.60321426]
[261.81860352 51.20279312]
[247.77322388 56.46845245]
[242.55853271 61.81991577]
[233.31477356 61.68593979]
[219.14344788 66.60258484]
[204.97210693 71.51922607]
[190.80078125 76.43586731]
[176.62945557 81.35251617]
[162.45811462 86.26915741]
[163.81121826 95.79515839]
[163.71981812 105.41633606]
[162.18598938 114.91490936]
[159.24446106 124.07585144]
[154.96180725 132.69178772]
[149.43496704 140.56768799]
[142.78907776 147.52523804]
[135.17456055 153.40696716]
[126.76379395 158.07971191]
[117.74716949 161.43769836]
[108.32881165 163.40492249]
[98.72190857 163.93684387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[43 50]
[44 49]
[63 114]
[64 113]
[65 112]
[66 111]
[67 110]
[68 109]
[69 107]
[70 106]
[72 104]
[73 103]
[74 102]
[75 101]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
