%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUUUGUUGUCUGGUGGUGACUGUGCCCAUGGGUGAGUUGUAUCGGAAAAUCGUCAUGUGAGGAUCAGAGGGGAAAAGAAAACAGAGGUUAGUUCUAGAAGGCCUCUGGUCUCUGCCUGCCCUGGGUGCUC\
) } def
/len { sequence length } bind def

/coor [
[49.49726868 141.53613281]
[38.63170624 151.98446655]
[25.08704758 158.55389404]
[10.19526100 160.61236572]
[-4.58353376 157.97073364]
[-17.80421638 150.90011597]
[-28.17797852 140.10404968]
[-34.69795990 126.64852905]
[-49.54979706 128.75160217]
[-64.40163422 130.85467529]
[-76.98069000 140.45040894]
[-90.66705322 134.57395935]
[-105.51889038 136.67703247]
[-120.37073517 138.78010559]
[-135.22256470 140.88317871]
[-150.07440186 142.98625183]
[-164.92623901 145.08932495]
[-179.77807617 147.19239807]
[-188.18841553 157.05177307]
[-200.66705322 158.45358276]
[-210.41007996 151.18594360]
[-225.30714417 152.94027710]
[-240.20419312 154.69461060]
[-255.10125732 156.44894409]
[-263.74041748 166.10844421]
[-276.24847412 167.21734619]
[-285.81845093 159.72329712]
[-300.75253296 161.12792969]
[-315.68664551 162.53254700]
[-328.73797607 172.46203613]
[-343.75619507 165.87528992]
[-345.29183960 149.54820251]
[-331.76516724 140.27667236]
[-317.09124756 147.59846497]
[-302.15716553 146.19383240]
[-287.22308350 144.78921509]
[-273.54052734 133.86428833]
[-256.85559082 141.55187988]
[-241.95852661 139.79754639]
[-227.06147766 138.04322815]
[-212.16441345 136.28889465]
[-198.74172974 125.04620361]
[-181.88114929 132.34056091]
[-167.02931213 130.23748779]
[-152.17747498 128.13441467]
[-137.32563782 126.03133392]
[-122.47380829 123.92826080]
[-107.62196350 121.82518768]
[-92.77012634 119.72211456]
[-81.25337982 110.27681732]
[-66.50470734 116.00283813]
[-51.65287018 113.89976501]
[-36.80103302 111.79669189]
[-34.27317429 97.05997467]
[-27.30467415 83.80817413]
[-16.56684685 73.34494781]
[-3.10249805 66.70399475]
[11.77533245 64.54697418]
[26.61141777 67.09757996]
[39.95068359 74.11843109]
[50.48091125 84.93309021]
[57.16182709 98.49121857]
[72.01366425 96.38814545]
[86.86550140 94.28507233]
[97.99171448 85.81754303]
[111.03142548 90.86309052]
[125.88326263 88.76001740]
[140.73509216 86.65694427]
[149.14543152 76.79756927]
[161.62406921 75.39574432]
[171.36709595 82.66339111]
[186.26416016 80.90905762]
[201.16120911 79.15473175]
[216.05827332 77.40039825]
[228.85881042 68.10219574]
[242.40365601 74.29787445]
[252.94053650 60.39005280]
[269.93627930 58.39825439]
[282.88366699 69.06523895]
[297.73550415 66.96216583]
[312.58734131 64.85909271]
[319.92111206 51.31206894]
[333.66494751 44.75762558]
[348.45791626 47.52017593]
[358.66543579 58.33426666]
[373.51727295 56.23119354]
[388.36911011 54.12812042]
[403.22094727 52.02504730]
[418.07278442 49.92197418]
[432.92462158 47.81890106]
[447.77645874 45.71582794]
[462.62829590 43.61275482]
[468.29251099 29.33646393]
[480.34594727 19.81752205]
[495.54629517 17.61647415]
[509.80474854 23.32539177]
[519.28588867 35.40860367]
[521.43927002 50.61578751]
[515.68566895 64.85629272]
[503.57281494 74.29948425]
[488.35894775 76.40519714]
[474.13656616 70.60700226]
[464.73138428 58.46459198]
[449.87954712 60.56766510]
[435.02770996 62.67073822]
[420.17587280 64.77381134]
[405.32403564 66.87688446]
[390.47219849 68.97995758]
[375.62036133 71.08303070]
[360.76852417 73.18610382]
[353.96472168 86.40905762]
[340.52032471 93.17012024]
[325.49707031 90.68919373]
[314.69039917 79.71092987]
[299.83856201 81.81400299]
[284.98672485 83.91707611]
[278.72250366 95.23908997]
[266.89190674 100.94471741]
[253.74691772 98.73303986]
[244.15798950 89.19493103]
[232.42298889 98.36765289]
[217.81260681 92.29745483]
[202.91554260 94.05178833]
[188.01849365 95.80611420]
[173.12142944 97.56044769]
[159.69874573 108.80313110]
[142.83816528 101.50878143]
[127.98633575 103.61185455]
[113.13449860 105.71492767]
[102.00828552 114.18245697]
[88.96857452 109.13690948]
[74.11673737 111.23998260]
[59.26490021 113.34305573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 53]
[9 52]
[10 51]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[21 41]
[22 40]
[23 39]
[24 38]
[27 36]
[28 35]
[29 34]
[62 133]
[63 132]
[64 131]
[66 129]
[67 128]
[68 127]
[71 125]
[72 124]
[73 123]
[74 122]
[76 120]
[79 116]
[80 115]
[81 114]
[85 110]
[86 109]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
