%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUGCGGGGUCGGCCGGGUGCUGGGCCGAGGCCGAGGCCGGGGCGGGAUCCAGAGCGGGAGCCGGCGCGGGAUCUGGGACUCGGAGCGGGAUCCGGAGCGGGACCCAGGAGCCGGCGCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[206.21084595 523.01226807]
[203.68054199 514.01806641]
[205.66502380 504.74609375]
[211.83276367 497.36264038]
[208.52079773 482.73284912]
[193.27529907 476.78036499]
[184.46073914 462.79446411]
[185.69236755 446.14257812]
[196.68438721 433.35461426]
[193.01156616 418.81121826]
[189.33876038 404.26782227]
[185.66593933 389.72442627]
[181.99311829 375.18103027]
[164.60655212 366.60113525]
[158.88534546 347.76162720]
[168.86486816 330.44110107]
[164.12388611 316.21005249]
[159.38288879 301.97897339]
[154.64189148 287.74792480]
[149.90089417 273.51687622]
[145.15989685 259.28579712]
[133.79656982 249.65647888]
[136.77546692 234.11824036]
[132.03448486 219.88717651]
[127.29347992 205.65612793]
[113.89907074 199.24322510]
[108.88830566 184.87844849]
[115.70556641 170.87263489]
[110.96456909 156.64158630]
[106.22357178 142.41052246]
[101.48258209 128.17947388]
[96.74158478 113.94841003]
[86.41033936 104.52731323]
[89.02735901 90.79258728]
[84.28636169 76.56153107]
[72.58393097 65.91429138]
[75.90193176 51.39395905]
[71.16093445 37.16289902]
[66.41994476 22.93184471]
[61.50329971 8.76051331]
[56.41175842 -5.34892368]
[44.44955063 -15.70344925]
[47.40738678 -30.30141068]
[35.44517899 -40.65593719]
[38.40301514 -55.25389862]
[33.31147385 -69.36333466]
[21.34926796 -79.71785736]
[24.30710411 -94.31581879]
[19.21556282 -108.42525482]
[7.25335646 -118.77978516]
[10.21119118 -133.37774658]
[5.11965036 -147.48718262]
[0.02810953 -161.59661865]
[-14.38177586 -168.08743286]
[-19.90319252 -182.89587402]
[-13.26038456 -197.23632812]
[1.60558987 -202.60086060]
[15.87501144 -195.80680847]
[21.08208466 -180.88494873]
[14.13754654 -166.68815613]
[19.22908783 -152.57872009]
[24.32062912 -138.46928406]
[35.91865158 -129.12396240]
[33.32500076 -113.51679993]
[38.41654205 -99.40736389]
[50.01456451 -90.06203461]
[47.42090988 -74.45487213]
[52.51245117 -60.34543991]
[64.11048126 -51.00011444]
[61.51682281 -35.39295197]
[73.11484528 -26.04762840]
[70.52119446 -10.44046497]
[75.61273956 3.66897225]
[80.89929199 8.94945812]
[80.65100098 18.19084930]
[85.39199066 32.42190552]
[90.13298798 46.65296173]
[101.49631500 56.28229904]
[98.51741791 71.82053375]
[103.25841522 86.05158997]
[113.58966064 95.47268677]
[110.97264099 109.20741272]
[115.71363831 123.43846893]
[120.45463562 137.66952515]
[125.19562531 151.90058899]
[129.93661499 166.13163757]
[143.79148865 173.25065613]
[148.39680481 187.75050354]
[141.52453613 200.91513062]
[146.26553345 215.14619446]
[151.00653076 229.37724304]
[162.70896912 240.02447510]
[159.39096069 254.54481506]
[164.13195801 268.77587891]
[168.87295532 283.00692749]
[173.61393738 297.23797607]
[178.35493469 311.46905518]
[183.09593201 325.70010376]
[193.70776367 327.99105835]
[202.31072998 334.47863770]
[207.35440063 343.90808105]
[207.96592712 354.50268555]
[204.10040283 364.29846191]
[196.53652954 371.50820923]
[200.20933533 386.05160522]
[203.88215637 400.59500122]
[207.55496216 415.13839722]
[211.22778320 429.68179321]
[224.42387390 433.86898804]
[233.73332214 443.96890259]
[236.78492737 457.25009155]
[232.88040161 470.19262695]
[223.15058899 479.42086792]
[226.46255493 494.05065918]
[242.01185608 508.69192505]
[235.47920227 528.20715332]
[239.86674500 542.55108643]
[244.25428772 556.89508057]
[257.68862915 565.66424561]
[259.06527710 581.64813232]
[247.32821655 592.58526611]
[231.48109436 590.08557129]
[223.68048096 576.06665039]
[229.91032410 561.28259277]
[225.52278137 546.93865967]
[221.13523865 532.59466553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 114]
[5 113]
[9 108]
[10 107]
[11 106]
[12 105]
[13 104]
[16 98]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[23 91]
[24 90]
[25 89]
[28 86]
[29 85]
[30 84]
[31 83]
[32 82]
[34 80]
[35 79]
[37 77]
[38 76]
[39 75]
[40 73]
[41 72]
[43 70]
[45 68]
[46 67]
[48 65]
[49 64]
[51 62]
[52 61]
[53 60]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
