%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGGCGUCUUCCGGGGCCUGGCGGGCCGGGGACCGAGGGGGCGGGGAGGUGACCCGGCGGGGGCGGAGCCAGCGGGCGGGCGCGGCGCGGGAGGCGACC\
) } def
/len { sequence length } bind def

/coor [
[127.23039246 188.65943909]
[121.43734741 174.82324219]
[115.64430237 160.98703003]
[109.85124969 147.15081787]
[104.05820465 133.31462097]
[98.26515961 119.47840881]
[90.23203278 113.61826324]
[87.22338104 105.63199615]
[72.26696777 104.48931885]
[57.31055450 103.34664154]
[42.35414124 102.20397186]
[27.39772797 101.06129456]
[12.44131470 99.91861725]
[-2.51509857 98.77593994]
[-17.48719788 97.86148071]
[-32.47150040 97.17545319]
[-47.45580673 96.48941803]
[-59.07554626 106.86339569]
[-74.26199341 105.95420837]
[-84.08038330 94.81262970]
[-99.06468201 94.12659454]
[-114.04898834 93.44056702]
[-129.03329468 92.75453186]
[-144.01759338 92.06850433]
[-158.32307434 100.08632660]
[-172.27925110 91.47489929]
[-171.52923584 75.09291077]
[-156.84455872 67.79275513]
[-143.33155823 77.08419800]
[-128.34725952 77.77023315]
[-113.36296082 78.45626068]
[-98.37865448 79.14229584]
[-83.39434814 79.82832336]
[-72.59896851 69.63050842]
[-57.39298248 70.11278534]
[-46.76977539 81.50511932]
[-31.78547096 82.19114685]
[-16.80116653 82.87718201]
[-9.85764313 79.98975372]
[-1.37242305 83.81952667]
[13.58399010 84.96220398]
[28.54040337 86.10488129]
[43.49681473 87.24755859]
[58.45322800 88.39022827]
[73.40964508 89.53290558]
[88.36605835 90.67558289]
[75.13141632 83.61552429]
[67.47656250 70.71578979]
[67.62090302 55.71648788]
[75.52260590 42.96646118]
[88.89066315 36.16241455]
[103.84918976 37.27708817]
[116.06115723 45.98730469]
[121.98587036 59.76764297]
[119.90553284 74.62268066]
[110.42531586 86.24398804]
[123.78001404 79.41375732]
[137.13470459 72.58352661]
[150.48941040 65.75329590]
[159.25271606 52.58078384]
[174.10713196 53.67405701]
[182.87043762 40.50154495]
[197.72486877 41.59481430]
[207.26531982 25.93784714]
[224.68679810 27.31392479]
[237.82699585 20.07960320]
[250.96717834 12.84528065]
[261.92639160 -0.09041491]
[277.39035034 6.85954046]
[274.99285889 23.64311409]
[258.20150757 25.98546982]
[245.06130981 33.21979141]
[231.92112732 40.45411301]
[228.19221497 52.07361221]
[217.15911865 58.17192841]
[204.55509949 54.94951248]
[196.74700928 67.63348389]
[180.93737793 67.02875519]
[173.12928772 79.71272278]
[157.31964111 79.10799408]
[143.96493530 85.93822479]
[130.61024475 92.76845551]
[117.25554657 99.59868622]
[112.10137177 113.68536377]
[117.89441681 127.52156830]
[123.68746185 141.35777283]
[129.48049927 155.19398499]
[135.27354431 169.03019714]
[141.06658936 182.86639404]
[147.89683533 196.22109985]
[155.72454834 209.01667786]
[170.92198181 214.15650940]
[176.24320984 229.29136658]
[167.60626221 242.81108093]
[151.63665771 244.34448242]
[140.58491516 232.71527100]
[142.92897034 216.84439087]
[135.10125732 204.04881287]
[132.64790344 203.57463074]
[130.21887207 202.14964294]
[128.15361023 199.77624512]
[126.78569031 196.57073975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 38]
[16 37]
[17 36]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[56 83]
[57 82]
[58 81]
[59 80]
[61 78]
[63 76]
[65 73]
[66 72]
[67 71]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
