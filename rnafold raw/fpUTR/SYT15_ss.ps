%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCGCGGCUCCCCGCGCCGCAGCUGGGCACCAGCAGCACCACGGACCGCCCCUGUGCUCGCCCGACGGCGCCCCGCGGCGCUUUAAGAGACGGCCUGGCAGCCCAGCCCCAGCCGCCCAGACCGGCGAGACCAGCCUGCGGGAGCAGCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.91112518 194.69677734]
[100.56844330 183.02641296]
[99.65101624 168.05450439]
[98.73358917 153.08258057]
[97.81616211 138.11065674]
[83.30121613 134.32699585]
[75.19160461 146.94578552]
[67.08198547 159.56459045]
[58.97237778 172.18339539]
[50.86276245 184.80220032]
[55.67834091 199.67984009]
[49.75624847 214.15267944]
[35.89271164 221.38706970]
[20.63367462 217.96716309]
[11.18398380 205.50772095]
[12.00549603 189.89173889]
[22.71031952 178.49258423]
[38.24396133 176.69259644]
[46.35357285 164.07379150]
[54.46318436 151.45498657]
[62.57279968 138.83618164]
[70.68241119 126.21737671]
[63.65953827 122.49777222]
[57.12435150 117.07713318]
[43.01736832 122.17546844]
[28.91038704 127.27381134]
[14.80340576 132.37214661]
[0.69642419 137.47048950]
[-12.14464664 148.54042053]
[-26.33671761 139.26564026]
[-21.35315895 123.06068420]
[-4.40191555 123.36351013]
[9.70506668 118.26516724]
[23.81204796 113.16683197]
[37.91902924 108.06848907]
[52.02601242 102.97014618]
[52.48493958 87.97717285]
[38.71619034 82.02557373]
[24.94744110 76.07396698]
[11.17869282 70.12236786]
[-2.59005618 64.17076874]
[-12.52436638 68.78301239]
[-23.13421822 67.16552734]
[-30.91644859 60.09861755]
[-33.43800735 50.12052155]
[-46.95254135 43.61226654]
[-61.78528976 49.06800461]
[-76.09616852 42.36170959]
[-81.39477539 27.47210693]
[-74.53755188 13.23293400]
[-59.59276199 8.09204006]
[-45.42688751 15.09942627]
[-40.44428635 30.09773445]
[-26.92975235 36.60599136]
[-7.84929705 33.69621658]
[3.36154509 50.40201950]
[17.13029289 56.35361862]
[30.89904213 62.30522156]
[44.66779327 68.25682068]
[58.43653870 74.20841980]
[68.93440247 63.49418640]
[62.70317841 49.84970856]
[56.47195435 36.20522690]
[50.24073029 22.56074715]
[36.57579041 13.49424267]
[37.86506271 -2.85414600]
[52.78225327 -9.66659832]
[65.98183441 0.06495336]
[63.88520813 16.32952309]
[70.11643219 29.97400284]
[76.34765625 43.61848068]
[82.57888794 57.26296234]
[113.29954529 62.85079956]
[128.81407166 84.40249634]
[143.28967285 80.47097778]
[157.76527405 76.53945160]
[172.24087524 72.60792542]
[186.71649170 68.67639923]
[201.19209290 64.74487305]
[215.66769409 60.81334686]
[223.18315125 55.51370239]
[230.47874451 56.95249176]
[245.03153992 53.31706238]
[259.58432007 49.68163681]
[260.67724609 34.60639572]
[266.36856079 20.62600136]
[276.08926392 9.10485554]
[288.87768555 1.16314387]
[303.47485352 -2.43206668]
[318.44818115 -1.34090507]
[332.33218384 4.31721783]
[343.77194214 13.97653008]
[351.65521240 26.68145180]
[366.20797729 23.04602432]
[380.76077271 19.41059875]
[392.27429199 8.55934525]
[406.49734497 12.98136139]
[421.05010986 9.34593582]
[435.60290527 5.71050978]
[450.15570068 2.07508349]
[464.67065430 -1.70858896]
[475.96041870 -12.79244328]
[490.27069092 -8.66147709]
[504.74630737 -12.59300232]
[509.29559326 -27.33435822]
[521.10717773 -37.25856781]
[536.41204834 -39.19884491]
[550.32647705 -32.53606415]
[558.41040039 -19.39628601]
[558.08422852 -3.97236896]
[549.45214844 8.81397057]
[535.26855469 14.88265800]
[520.05938721 12.29719830]
[508.67782593 1.88260198]
[494.20223999 5.81412697]
[483.94784546 16.61677361]
[468.60217285 12.76701546]
[462.93737793 17.58424377]
[453.79113770 16.62787247]
[439.23834229 20.26329803]
[424.68554688 23.89872551]
[410.13275146 27.53415108]
[399.66015625 38.12537384]
[384.39620972 33.96339035]
[369.84341431 37.59881592]
[355.29061890 41.23424149]
[354.30822754 56.15388870]
[348.75491333 70.05823517]
[339.16284180 81.58090973]
[326.46170044 89.58541107]
[311.88867188 93.27719879]
[296.86782837 92.28250885]
[282.87103271 86.68621063]
[271.27374268 77.02468109]
[263.21975708 64.23442841]
[248.66696167 67.86985016]
[234.11416626 71.50527954]
[219.59921265 75.28894806]
[205.12361145 79.22047424]
[190.64801025 83.15200043]
[176.17240906 87.08352661]
[161.69680786 91.01505280]
[147.22119141 94.94657898]
[132.74559021 98.87810516]
[129.69644165 120.43397522]
[112.78808594 137.19323730]
[113.70550537 152.16516113]
[114.62293243 167.13706970]
[115.54035950 182.10899353]
[127.54282379 192.39083862]
[128.67616272 208.15443420]
[118.26799011 220.04753113]
[102.49329376 221.01414490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 149]
[3 148]
[4 147]
[5 146]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[45 54]
[46 53]
[61 72]
[62 71]
[63 70]
[64 69]
[74 144]
[75 143]
[76 142]
[77 141]
[78 140]
[79 139]
[80 138]
[82 137]
[83 136]
[84 135]
[93 126]
[94 125]
[95 124]
[97 122]
[98 121]
[99 120]
[100 119]
[101 117]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
