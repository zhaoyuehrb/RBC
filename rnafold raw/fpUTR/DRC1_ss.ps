%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGUUUGUUCCUAGCAACCAGCCUGAGGUCUGGAGGUGGUGCGGAGGGAGCCGCCUAGGGACCAGGGACUCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[96.15550232 285.44076538]
[79.87291718 283.48895264]
[73.67157745 268.30755615]
[83.93088531 255.51385498]
[85.71615601 240.62046814]
[87.50143433 225.72708130]
[75.34348297 212.31436157]
[76.59787750 193.94230652]
[90.94379425 181.90548706]
[91.54013824 166.91734314]
[92.13648987 151.92921448]
[92.73283386 136.94107056]
[93.32918549 121.95292664]
[93.92552948 106.96478271]
[87.91701508 109.62290192]
[80.91146851 110.21874237]
[65.91443634 109.92050934]
[53.39721680 119.95539093]
[37.77960587 116.28527069]
[31.04209518 101.72554779]
[38.35312271 87.44519806]
[54.10429764 84.39888000]
[66.21266937 94.92346954]
[81.20970154 95.22170258]
[70.31838989 84.90766907]
[72.41877747 70.05545044]
[85.74299622 63.16596222]
[99.07623291 70.03798676]
[101.19606018 84.88751221]
[109.62237549 72.47795868]
[118.04869080 60.06839371]
[126.47500610 47.65883255]
[134.90132141 35.24927521]
[132.14230347 19.91873169]
[140.86456299 7.45370817]
[155.49688721 4.91787577]
[163.92321777 -7.49168444]
[172.34953308 -19.90124512]
[180.77584839 -32.31080627]
[189.20216370 -44.72036743]
[197.62847900 -57.12992477]
[206.05479431 -69.53948975]
[207.40600586 -85.30288696]
[220.95669556 -91.48574829]
[219.36868286 -107.45001221]
[230.96002197 -118.54147339]
[246.83882141 -116.25170898]
[254.82424927 -102.33723450]
[248.79054260 -87.47203827]
[233.36625671 -83.05943298]
[232.61776733 -68.18364716]
[218.46435547 -61.11317062]
[210.03804016 -48.70360947]
[201.61172485 -36.29404831]
[193.18540955 -23.88448906]
[184.75909424 -11.47492886]
[176.33276367 0.93463194]
[167.90644836 13.34419250]
[170.94677734 27.88007927]
[162.57807922 40.58517456]
[147.31088257 43.67559052]
[138.88456726 56.08515167]
[130.45825195 68.49471283]
[122.03193665 80.90427399]
[113.60562134 93.31383514]
[108.91367340 107.56113434]
[108.31732178 122.54927826]
[107.72097778 137.53741455]
[107.12462616 152.52555847]
[106.52828217 167.51370239]
[105.93193054 182.50184631]
[115.78396606 189.71612549]
[120.76009369 200.73390198]
[119.68083191 212.65289307]
[112.94482422 222.39750671]
[102.39481354 227.51235962]
[100.60954285 242.40574646]
[98.82426453 257.29913330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 78]
[5 77]
[6 76]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[16 24]
[17 23]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
