%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGAGGAGCCGGGCCCCGGCCGCUGUCCAGCCGCUCCGUGCCCCGCGCGUCCUGCGCCGCCGCCACCGCCUCCUGGGGAGACGCAGCCACUUGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[267.48815918 335.86682129]
[258.37216187 323.95471191]
[249.25617981 312.04257202]
[235.37687683 306.63754272]
[233.13458252 290.97604370]
[224.01858521 279.06390381]
[214.90260315 267.15179443]
[205.78660583 255.23965454]
[196.67060852 243.32752991]
[182.79132080 237.92248535]
[180.54902649 222.26098633]
[171.43302917 210.34886169]
[162.31703186 198.43673706]
[148.95957947 199.99713135]
[136.49319458 194.66938782]
[128.25805664 183.76338196]
[126.51886749 170.09883118]
[131.84298706 157.27664185]
[123.10186768 145.08677673]
[114.36074829 132.89691162]
[105.61963654 120.70703888]
[85.26654816 120.82229614]
[70.52198792 102.19130707]
[55.66868973 100.09857941]
[40.81539154 98.00584412]
[25.81904411 104.64223480]
[12.73493004 94.75598145]
[15.02286243 78.51721954]
[30.32921410 72.63099670]
[42.90812302 83.15254974]
[57.76142120 85.24527740]
[72.61471558 87.33800507]
[82.09676361 75.71514893]
[77.06401825 61.58463669]
[72.03126526 47.45412445]
[54.70368958 40.14936447]
[48.15534210 22.85790443]
[56.02528763 6.47472906]
[50.12378311 -7.31556654]
[44.22227859 -21.10586166]
[38.32077408 -34.89615631]
[32.41926956 -48.68645477]
[20.62890244 -60.86937332]
[29.07181358 -75.57154083]
[45.53664017 -71.52854156]
[46.20956802 -54.58795547]
[52.11106873 -40.79766083]
[58.01257324 -27.00736618]
[63.91407776 -13.21707058]
[69.81558228 0.57322526]
[81.27282715 2.48138165]
[90.42926788 9.82267475]
[94.87353516 20.81533241]
[93.36148834 32.69758987]
[86.16178131 42.42137527]
[91.19452667 56.55188751]
[96.22727966 70.68240356]
[115.94208527 78.38483429]
[123.80129242 95.86887360]
[117.80950165 111.96591949]
[126.55062103 124.15579224]
[135.29173279 136.34565735]
[144.03285217 148.53552246]
[160.86140442 148.37516785]
[174.37432861 158.12699890]
[179.42362976 173.83457947]
[174.22915649 189.32075500]
[183.34515381 201.23287964]
[192.46115112 213.14500427]
[206.99247742 219.40208435]
[208.58273315 234.21154785]
[217.69873047 246.12367249]
[226.81472778 258.03579712]
[235.93070984 269.94790649]
[245.04670715 281.86004639]
[259.57803345 288.11712646]
[261.16830444 302.92660522]
[270.28430176 314.83871460]
[279.40026855 326.75085449]
[296.60748291 324.03192139]
[312.77896118 330.26989746]
[323.59274292 343.70324707]
[326.20608521 360.66036987]
[320.00238037 376.56262207]
[329.84130859 387.88494873]
[339.68023682 399.20730591]
[349.51916504 410.52966309]
[365.19174194 415.35687256]
[368.58325195 431.40148926]
[356.20480347 442.15817261]
[340.79028320 436.56134033]
[338.19680786 420.36859131]
[328.35787964 409.04623413]
[318.51895142 397.72387695]
[308.68002319 386.40155029]
[296.41830444 390.16418457]
[283.60305786 388.94387817]
[272.18853760 382.89038086]
[263.92922974 372.89337158]
[260.11019897 360.45166016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[11 69]
[12 68]
[13 67]
[18 63]
[19 62]
[20 61]
[21 60]
[23 32]
[24 31]
[25 30]
[33 57]
[34 56]
[35 55]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
