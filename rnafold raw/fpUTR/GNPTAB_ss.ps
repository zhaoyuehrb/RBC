%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCGGAAGCGGCGGCCGCGGCGCGGAGCCGAGCGGGCGUCCGUCGCCGGAGCUGCAAUGAGCGGCGCCCGGAGGCUGUGACCUGCGCGCGGCGGCCCGACCGGGGCCCCUGAAUGGCGGCUCGCUGAGGCGGCGGCGGCGGCGGCGGCGGCUCAGGCUCCUCGGGGCGUGGCGUGGCGGUGAAGGGGUG\
) } def
/len { sequence length } bind def

/coor [
[124.99165344 1065.36511230]
[124.74749756 1050.36706543]
[121.49019623 1043.72021484]
[124.62342834 1035.12341309]
[124.62342834 1020.12341309]
[124.62342834 1005.12341309]
[112.48500824 996.53289795]
[107.67569733 982.27337646]
[112.23844910 967.74633789]
[124.62342834 958.58563232]
[116.88612366 945.85833740]
[124.62342834 932.05816650]
[124.62342834 917.05816650]
[116.88612366 904.33093262]
[124.62342834 890.53076172]
[124.62342834 875.53076172]
[124.50134277 860.53125000]
[124.25719452 845.53320312]
[124.01303864 830.53521729]
[123.76888275 815.53717041]
[123.52472687 800.53918457]
[123.28057098 785.54119873]
[115.33713531 772.94152832]
[122.84878540 759.01727295]
[114.90534973 746.41760254]
[122.41699982 732.49328613]
[121.92875671 717.50128174]
[121.19655609 702.51916504]
[120.46434784 687.53704834]
[119.73213959 672.55493164]
[118.99993896 657.57281494]
[118.26773071 642.59069824]
[117.41362000 627.61499023]
[116.43764496 612.64678955]
[115.46167755 597.67858887]
[114.48570251 582.71038818]
[105.93670654 570.51348877]
[112.75970459 556.23913574]
[104.21070099 544.04223633]
[111.03369904 529.76788330]
[110.05773163 514.79968262]
[106.47985840 508.31973267]
[109.18971252 499.58026123]
[108.45751190 484.59811401]
[107.72530365 469.61599731]
[106.99309540 454.63388062]
[106.26089478 439.65176392]
[105.52868652 424.66964722]
[104.79648590 409.68753052]
[104.06427765 394.70541382]
[103.33207703 379.72329712]
[92.16029358 369.93930054]
[91.20430756 354.75570679]
[101.54242706 343.10406494]
[100.81021881 328.12194824]
[100.07801819 313.13983154]
[99.34580994 298.15771484]
[98.61360931 283.17559814]
[89.86133575 274.81170654]
[89.13719177 262.32562256]
[97.37496185 252.38793945]
[89.22749329 239.91925049]
[96.51150513 225.87454224]
[96.02326202 210.88249207]
[95.53501892 195.89044189]
[95.04677582 180.89839172]
[94.43653107 165.91081238]
[93.70432281 150.92869568]
[92.85020447 135.95303345]
[91.87423706 120.98481750]
[90.89826202 106.01660156]
[86.56590271 91.65586853]
[79.10117340 78.64518738]
[65.52236938 70.52566528]
[65.89982605 55.63584518]
[58.43509674 42.62516403]
[50.97036743 29.61448479]
[35.65214157 25.72506905]
[27.64266586 12.10068512]
[31.69381714 -3.17556143]
[45.40212250 -11.04054451]
[60.63468170 -6.82810974]
[68.35429382 6.96258068]
[63.98104858 22.14975548]
[71.44577789 35.16043472]
[78.91050720 48.17111588]
[91.95539093 55.36002350]
[92.11185455 71.18045807]
[99.57658386 84.19113922]
[106.98709106 83.03596497]
[121.80809784 80.72563171]
[129.21861267 79.57046509]
[132.36912537 64.90505219]
[135.51962280 50.23964310]
[130.85342407 35.12219620]
[141.09129333 24.30391693]
[144.24180603 9.63850594]
[147.39231873 -5.02690458]
[150.54283142 -19.69231606]
[153.69334412 -34.35772705]
[146.22753906 -48.55776978]
[152.80641174 -63.18986130]
[168.38320923 -67.02951050]
[181.00874329 -57.13126373]
[180.99780273 -41.08821487]
[168.35876465 -31.20721436]
[165.20825195 -16.54180336]
[162.05773926 -1.87639272]
[158.90722656 12.78901768]
[155.75671387 27.45442963]
[160.64825439 41.52290344]
[150.18504333 53.39015198]
[147.03453064 68.05556488]
[143.88401794 82.72097778]
[137.10501099 96.13201141]
[127.06537628 104.57249451]
[115.92667389 107.47062683]
[105.86647797 105.04062653]
[106.84245300 120.00884247]
[107.81842041 134.97706604]
[111.50435638 143.35176086]
[108.68643951 150.19648743]
[109.41864777 165.17860413]
[112.96778107 173.61219788]
[110.03882599 180.41015625]
[110.52706909 195.40220642]
[111.01531219 210.39425659]
[111.50355530 225.38630676]
[119.68595123 238.92732239]
[112.36701202 251.89968872]
[122.45021057 267.29946899]
[113.59572601 282.44338989]
[114.32792664 297.42550659]
[115.06013489 312.40762329]
[115.79233551 327.38973999]
[116.52454376 342.37185669]
[127.94955444 352.95989990]
[128.47868347 368.16433716]
[118.31419373 378.99108887]
[119.04640198 393.97320557]
[119.77860260 408.95532227]
[120.51081085 423.93743896]
[121.24301147 438.91955566]
[121.97521973 453.90167236]
[122.70742035 468.88381958]
[123.43962860 483.86593628]
[124.17182922 498.84805298]
[125.02594757 513.82373047]
[126.00191498 528.79193115]
[134.62072754 542.05944824]
[127.72792053 555.26318359]
[136.34672546 568.53063965]
[129.45391846 581.73437500]
[130.42988586 596.70257568]
[131.40586853 611.67083740]
[132.38183594 626.63903809]
[136.06776428 635.01373291]
[133.24984741 641.85845947]
[133.98205566 656.84057617]
[134.71426392 671.82269287]
[135.44647217 686.80480957]
[136.17866516 701.78692627]
[136.91087341 716.76904297]
[140.17736816 722.54541016]
[140.04478455 728.24603271]
[137.41500854 732.24914551]
[145.37591553 745.92156982]
[137.84680176 758.77307129]
[145.80769348 772.44549561]
[138.27857971 785.29699707]
[138.52273560 800.29504395]
[138.76689148 815.29302979]
[139.01104736 830.29107666]
[139.25520325 845.28906250]
[139.49935913 860.28710938]
[142.77209473 868.83172607]
[139.62342834 875.53076172]
[139.62342834 890.53076172]
[147.36073303 904.33093262]
[139.62342834 917.05816650]
[139.62342834 932.05816650]
[147.36073303 945.85833740]
[139.62342834 958.58563232]
[152.00840759 967.74633789]
[156.57115173 982.27337646]
[151.76184082 996.53289795]
[139.62342834 1005.12341309]
[139.62342834 1020.12341309]
[139.62342834 1035.12341309]
[139.74551392 1050.12292480]
[139.98966980 1065.12097168]
[142.49366760 1084.34020996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 191]
[2 190]
[4 189]
[5 188]
[6 187]
[10 183]
[12 181]
[13 180]
[15 178]
[16 177]
[17 175]
[18 174]
[19 173]
[20 172]
[21 171]
[22 170]
[24 168]
[26 166]
[27 163]
[28 162]
[29 161]
[30 160]
[31 159]
[32 158]
[33 156]
[34 155]
[35 154]
[36 153]
[38 151]
[40 149]
[41 148]
[43 147]
[44 146]
[45 145]
[46 144]
[47 143]
[48 142]
[49 141]
[50 140]
[51 139]
[54 136]
[55 135]
[56 134]
[57 133]
[58 132]
[61 130]
[63 128]
[64 127]
[65 126]
[66 125]
[67 123]
[68 122]
[69 120]
[70 119]
[71 118]
[72 89]
[73 88]
[75 86]
[76 85]
[77 84]
[92 114]
[93 113]
[94 112]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
