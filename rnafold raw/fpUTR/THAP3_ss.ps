%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCUCCCCUCUCCGCAGGCCCCGCCGCCGCCGCCAUCUUUGUUGGGGGCAGCCAGGCCUGGCUCGAG\
) } def
/len { sequence length } bind def

/coor [
[29.57589722 337.47344971]
[23.58376694 351.61523438]
[11.31387997 360.85351562]
[-3.93322468 362.70318604]
[-18.05615234 356.66677856]
[-27.25590706 344.36798096]
[-29.05780029 329.11514282]
[-22.97713280 315.01123047]
[-10.64957237 305.85006714]
[4.60882854 304.09597778]
[10.50420380 290.30307007]
[16.39958000 276.51016235]
[7.35624456 264.67446899]
[5.43863344 249.80238342]
[11.26106358 235.87522888]
[23.35223007 226.67193604]
[38.52555466 224.74386597]
[44.42092896 210.95094299]
[50.31630707 197.15802002]
[56.21168137 183.36511230]
[62.10705566 169.57218933]
[68.00243378 155.77928162]
[62.23617935 142.09402466]
[68.01844788 128.02206421]
[82.41188812 122.06668854]
[88.30725861 108.27376556]
[86.82873535 94.37033081]
[97.89982605 85.83085632]
[103.79519653 72.03794098]
[109.69057465 58.24502182]
[107.99972534 42.51442719]
[120.11652374 33.85230255]
[126.01190186 20.05938339]
[131.90727234 6.26646757]
[130.21643066 -9.46412659]
[142.33322144 -18.12625504]
[148.22859192 -31.91917038]
[145.73448181 -48.12754822]
[158.69190979 -58.17927551]
[173.77137756 -51.73399734]
[175.46043396 -35.42206573]
[162.02151489 -26.02379608]
[156.12614441 -12.23087883]
[158.23866272 2.51315403]
[145.70019531 12.16184330]
[139.80480957 25.95475960]
[133.90943909 39.74767685]
[136.02197266 54.49171066]
[123.48348999 64.14039612]
[117.58811188 77.93331146]
[111.69274139 91.72623444]
[113.17126465 105.62966919]
[102.10017395 114.16914368]
[96.20480347 127.96205902]
[101.84704590 142.48110962]
[95.67181396 156.38510132]
[81.79534912 161.67465210]
[75.89997101 175.46757507]
[70.00460052 189.26048279]
[64.10922241 203.05340576]
[58.21384811 216.84631348]
[52.31847000 230.63923645]
[61.41058350 242.93885803]
[63.11425018 258.03833008]
[57.07143784 271.87130737]
[44.99678802 280.76278687]
[30.19249535 282.40551758]
[24.29712105 296.19845581]
[18.40174484 309.99136353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 69]
[11 68]
[12 67]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[25 54]
[26 53]
[28 51]
[29 50]
[30 49]
[32 47]
[33 46]
[34 45]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
