%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCAUCCUUCCCUUUCUAAUCAGAGAUUUUCUUCCUCAGAGAUUUUGGCCUAGAUUUGCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.26107788 187.57421875]
[84.65253448 171.78166199]
[95.45041656 160.24124146]
[94.71440125 145.25930786]
[93.97838593 130.27737427]
[85.93673706 127.48097229]
[78.96480560 122.59424591]
[73.59291077 115.98889160]
[70.22965240 108.16735077]
[69.13086700 99.72457123]
[70.38012695 91.30273438]
[73.88241577 83.54245758]
[79.37132263 77.03401184]
[86.42933655 72.27246094]
[94.51960754 69.62000275]
[103.02673340 69.27838135]
[108.08007812 55.15521622]
[113.13343048 41.03205490]
[118.18677521 26.90889549]
[108.36988068 15.17962170]
[105.75925446 0.21027178]
[110.95735931 -13.96174622]
[122.47416687 -23.56482887]
[137.15252686 -26.09684181]
[142.20588684 -40.22000122]
[147.25923157 -54.34316254]
[152.31257629 -68.46632385]
[157.36592102 -82.58948517]
[162.41926575 -96.71264648]
[167.47262573 -110.83580780]
[172.52597046 -124.95896912]
[163.66799927 -137.69929504]
[164.02397156 -153.21228027]
[173.45703125 -165.53288269]
[188.33996582 -169.92355347]
[202.94998169 -164.69601440]
[211.66921997 -151.86033630]
[211.14497375 -136.35212708]
[201.57881165 -124.13459015]
[186.64912415 -119.90561676]
[181.59577942 -105.78245544]
[176.54243469 -91.65930176]
[171.48908997 -77.53614044]
[166.43572998 -63.41297531]
[161.38238525 -49.28981400]
[156.32904053 -35.16665268]
[151.27569580 -21.04349327]
[161.01593018 -9.77436352]
[163.82641602 4.95510292]
[158.85397339 19.20786285]
[147.33947754 29.12316322]
[132.30993652 31.96224403]
[127.25659180 46.08540344]
[122.20323944 60.20856476]
[117.14989471 74.33172607]
[130.06385803 92.98977661]
[126.73436737 115.43544006]
[108.96031952 129.54135132]
[109.69633484 144.52328491]
[110.43235016 159.50521851]
[122.30939484 169.93168640]
[123.25172424 185.70785522]
[112.70026398 197.47401428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 60]
[4 59]
[5 58]
[16 55]
[17 54]
[18 53]
[19 52]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
