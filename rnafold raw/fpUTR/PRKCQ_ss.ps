%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGCCUCUCGCCCCUUUUCCUGACUCUGAGAAUGUGGCCGGAGCCGGGGCGCUCCUGCUCCGCCUCGCCGCCCUCCCGGGGCUGUCCUGGGCCCUCCGGCCGCCGCCUCCCGCUCCAGUUCGCAGCUGGGCGACAAGUGGCUGGGCGCAACC\
) } def
/len { sequence length } bind def

/coor [
[88.97925568 228.66267395]
[98.75680542 215.94343567]
[98.15281677 200.95559692]
[97.54882812 185.96777344]
[96.94483185 170.97993469]
[88.70133209 158.57453918]
[95.87668610 144.47399902]
[95.27269745 129.48616028]
[81.53290558 123.46801758]
[70.10721588 133.18675232]
[58.68153381 142.90547180]
[47.25584793 152.62420654]
[35.83016586 162.34294128]
[41.13339615 176.54335022]
[41.25687790 191.70120239]
[36.18569565 205.98611450]
[26.53221893 217.67312622]
[13.46215439 225.35096741]
[-1.44622707 228.09249878]
[-16.39266396 225.56666565]
[-29.57230186 218.07847595]
[-39.39363480 206.53216553]
[-44.67068863 192.32200623]
[-44.76623535 177.16395569]
[-39.66873550 162.88841248]
[-29.99374008 151.21920776]
[-16.90954781 143.56547546]
[-1.99613905 140.85142517]
[12.94561768 143.40478516]
[26.11143303 150.91725159]
[37.53711700 141.19853210]
[48.96280289 131.47979736]
[60.38848877 121.76106262]
[71.81417084 112.04233551]
[70.14605713 98.93625641]
[74.12594604 86.69349670]
[82.71869659 77.56706238]
[94.07035065 73.10615540]
[105.90237427 73.89691925]
[102.02008820 59.40802765]
[98.13780212 44.91914368]
[94.25551605 30.43025398]
[90.37322998 15.94136715]
[86.49094391 1.45247984]
[82.60865784 -13.03640747]
[78.72637177 -27.52529526]
[64.86975861 -30.83318329]
[54.73444748 -42.87651443]
[53.60675049 -60.07809448]
[42.18106842 -69.79682159]
[30.75538254 -79.51555634]
[19.32969856 -89.23428345]
[7.90401316 -98.95301819]
[-7.82687902 -97.43164062]
[-19.97278976 -107.54363251]
[-21.32776451 -123.28973389]
[-11.08792305 -135.32804871]
[4.67162037 -136.51647949]
[16.60100746 -126.14993286]
[17.62274361 -110.37870026]
[29.04842949 -100.65997314]
[40.47411346 -90.94123840]
[51.89979935 -81.22251129]
[63.32548141 -71.50377655]
[77.18367767 -77.24403381]
[78.39067078 -92.19538879]
[79.59767151 -107.14675140]
[80.80467224 -122.09810638]
[71.31665039 -139.84129333]
[82.84806824 -155.32102966]
[83.45205688 -170.30885315]
[76.27670288 -184.40939331]
[84.52021027 -196.81478882]
[85.12419891 -211.80262756]
[85.72818756 -226.79046631]
[86.33217621 -241.77828979]
[86.93616486 -256.76614380]
[81.53250885 -272.83587646]
[95.47836304 -282.47689819]
[108.60321045 -271.74496460]
[101.92399597 -256.16213989]
[101.32000732 -241.17430115]
[100.71601868 -226.18647766]
[100.11203003 -211.19863892]
[99.50804138 -196.21080017]
[106.72659302 -183.18229675]
[98.43988800 -169.70486450]
[97.83589935 -154.71704102]
[105.45732880 -147.80598450]
[108.04073334 -137.61990356]
[104.48866272 -127.49607849]
[95.75602722 -120.89111328]
[94.54903412 -105.93975067]
[93.34203339 -90.98838806]
[92.13503265 -76.03703308]
[106.01428986 -51.86891937]
[93.21525574 -31.40758133]
[97.09754181 -16.91869354]
[100.97982788 -2.42980576]
[104.86211395 12.05908108]
[108.74440002 26.54796982]
[112.62668610 41.03685760]
[116.50897217 55.52574539]
[120.39125824 70.01463318]
[130.78211975 80.83266449]
[145.10293579 85.29521179]
[159.42375183 89.75775909]
[173.74456787 94.22030640]
[188.06536865 98.68285370]
[199.37690735 88.38738251]
[214.22494507 85.15742493]
[228.60057068 89.76257324]
[238.67359924 100.87068939]
[241.81292725 115.43126678]
[256.13372803 119.89380646]
[270.45455933 124.35635376]
[279.63760376 123.92497253]
[285.01718140 129.05563354]
[299.24520874 133.80566406]
[313.47326660 138.55567932]
[327.70132446 143.30569458]
[341.92935181 148.05572510]
[356.15740967 152.80574036]
[373.09609985 152.08630371]
[378.47650146 168.16386414]
[364.51669312 177.78469849]
[351.40737915 167.03378296]
[337.17935181 162.28376770]
[322.95129395 157.53373718]
[308.72323608 152.78372192]
[294.49520874 148.03370667]
[280.26715088 143.28369141]
[265.99200439 138.67716980]
[251.67118835 134.21461487]
[237.35037231 129.75207520]
[226.49542236 139.95185852]
[211.89535522 143.37152100]
[197.44841003 138.99519348]
[187.06353760 127.90234375]
[183.60282898 113.00366211]
[169.28201294 108.54111481]
[154.96119690 104.07857513]
[140.64039612 99.61602783]
[126.31958008 95.15348053]
[124.85934448 114.35501862]
[110.26052856 128.88217163]
[110.86451721 143.87001038]
[119.15122223 157.34744263]
[111.93267059 170.37594604]
[112.53665924 185.36378479]
[113.14064789 200.35160828]
[113.74463654 215.33944702]
[124.51395416 227.23068237]
[121.78946686 243.04069519]
[107.66117096 250.64141846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[7 147]
[8 146]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[65 95]
[66 94]
[67 93]
[68 92]
[70 88]
[71 87]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
[105 144]
[106 143]
[107 142]
[108 141]
[109 140]
[114 135]
[115 134]
[116 133]
[118 132]
[119 131]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
