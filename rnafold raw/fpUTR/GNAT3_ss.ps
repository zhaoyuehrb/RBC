%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCCUCCUAUGUCCAAACCACAGCUGUGCUCAACAUUUGAAAAAUCUGAACAUAUAAACUGACAAGUAUCUACCACCACAAG\
) } def
/len { sequence length } bind def

/coor [
[138.01951599 216.14263916]
[134.91601562 209.08486938]
[132.86921692 201.64831543]
[131.92332458 193.99032593]
[132.09927368 186.27304077]
[133.39425659 178.66001892]
[135.78170776 171.31269836]
[139.21189880 164.38705444]
[143.61296082 158.03021240]
[133.41036987 147.03442383]
[123.20777893 136.03865051]
[113.00518799 125.04286957]
[102.80259705 114.04709625]
[89.49980164 109.74275970]
[86.20162201 96.15549469]
[75.99903107 85.15972137]
[59.91578293 90.52844238]
[43.14197159 88.45602417]
[28.94057846 79.39272308]
[20.05387878 65.14411163]
[18.17394829 48.51157379]
[23.62066841 32.74154663]
[12.62489128 22.53895378]
[1.62911284 12.33636379]
[-13.74983025 8.62170506]
[-17.81687927 -5.70688057]
[-28.81265831 -15.90947151]
[-39.80843735 -26.11206245]
[-55.82951355 -26.95147324]
[-65.04463959 -40.08391571]
[-60.38475800 -55.43529892]
[-45.42453003 -61.22936249]
[-31.64016533 -53.02139282]
[-29.60584450 -37.10784149]
[-18.61006737 -26.90525055]
[-7.61428881 -16.70265961]
[6.97816229 -13.71775818]
[11.83170414 1.34058547]
[22.82748222 11.54317665]
[33.82326126 21.74576759]
[45.73459625 15.94328499]
[58.94904709 14.60704136]
[71.84354401 17.92361832]
[82.82656860 25.50673103]
[90.53456879 36.44208145]
[94.00123596 49.39755249]
[92.77860260 62.78545761]
[86.99481201 74.95713043]
[97.19740295 85.95290375]
[110.50019836 90.25724030]
[113.79837799 103.84450531]
[124.00096893 114.84027863]
[134.20355225 125.83605957]
[144.40614319 136.83183289]
[154.60873413 147.82762146]
[180.20109558 138.69717407]
[206.89039612 143.42127991]
[227.68898010 160.69458008]
[237.18537903 185.93519592]
[252.17488098 186.49606323]
[267.16439819 187.05693054]
[281.40240479 178.91990662]
[295.43002319 187.41448975]
[294.81683350 203.80216980]
[280.19366455 211.22471619]
[266.60351562 202.04643250]
[251.61401367 201.48556519]
[236.62451172 200.92469788]
[234.72589111 208.34291077]
[231.76924133 215.40975952]
[227.81639099 221.97515869]
[222.95028687 227.89953613]
[217.27337646 233.05677795]
[210.90533447 237.33695984]
[203.98056030 240.64865112]
[196.64541626 242.92085266]
[189.05505371 244.10456848]
[181.37016296 244.17382812]
[173.75357056 243.12626648]
[166.36676025 240.98318481]
[159.36651611 237.78913879]
[152.90153503 233.61097717]
[147.10929871 228.53646851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[15 49]
[16 48]
[22 40]
[23 39]
[24 38]
[26 36]
[27 35]
[28 34]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
