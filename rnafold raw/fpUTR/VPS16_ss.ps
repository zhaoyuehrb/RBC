%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCGGAAGUGCCGGCCUGGAGCCCGCUCUAGGUGGGUGUCCCCUCGGUGCUUCCCAGCUGCCGUCUGCACCAGCC\
) } def
/len { sequence length } bind def

/coor [
[133.57368469 174.22628784]
[126.15995026 161.18649292]
[113.14331055 153.94656372]
[113.04878235 138.12564087]
[105.63504028 125.08583832]
[98.22130585 112.04603577]
[90.29501343 99.31128693]
[81.86869049 86.90172577]
[73.44237518 74.49216461]
[65.01605988 62.08260345]
[56.58974457 49.67304230]
[48.16342926 37.26348495]
[39.73711014 24.85392189]
[31.31079483 12.44436169]
[22.88447952 0.03480164]
[14.45816231 -12.37475872]
[6.03184605 -24.78431892]
[-7.55995798 -25.81753731]
[-17.86816406 -34.43343353]
[-21.19777489 -47.24638367]
[-16.52873993 -59.42424393]
[-24.45503426 -72.15899658]
[-32.38132858 -84.89374542]
[-40.55924988 -97.46838379]
[-48.98556519 -109.87794495]
[-57.41188049 -122.28750610]
[-65.83819580 -134.69706726]
[-74.26451111 -147.10662842]
[-82.69083405 -159.51618958]
[-91.11714935 -171.92575073]
[-105.01701355 -181.63296509]
[-99.53701782 -197.67684937]
[-82.60312653 -196.85240173]
[-78.70758820 -180.35206604]
[-70.28127289 -167.94250488]
[-61.85495377 -155.53294373]
[-53.42863846 -143.12338257]
[-45.00231934 -130.71382141]
[-36.57600403 -118.30426025]
[-28.14968872 -105.89470673]
[-21.61055946 -102.02670288]
[-19.64657593 -92.82003784]
[-11.72028351 -80.08528900]
[-3.79398942 -67.35054016]
[12.62679577 -64.34367371]
[22.08711815 -50.18556595]
[18.44140625 -33.21063614]
[26.86772346 -20.80107498]
[35.29404068 -8.39151478]
[43.72035599 4.01804590]
[52.14667130 16.42760658]
[60.57299042 28.83716583]
[68.99930573 41.24672699]
[77.42562103 53.65628815]
[85.85193634 66.06584930]
[94.27825165 78.47541046]
[102.70457458 90.88497162]
[107.78371429 93.10651398]
[111.12947845 98.12068176]
[111.26110840 104.63230133]
[118.67484283 117.67210388]
[126.08858490 130.71189880]
[139.63549805 138.88452148]
[139.19975281 153.77275085]
[146.61349487 166.81256104]
[158.78987122 167.73136902]
[168.83653259 174.45578003]
[174.21849060 185.14511108]
[173.64897156 196.97755432]
[167.39497375 206.89482117]
[173.74926758 220.48242188]
[187.49559021 229.42506409]
[186.35411072 245.78443909]
[171.49909973 252.73143005]
[158.21211243 243.11956787]
[160.16165161 226.83671570]
[153.80737305 213.24911499]
[136.39791870 208.28643799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[4 62]
[5 61]
[6 60]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[21 44]
[22 43]
[23 42]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
