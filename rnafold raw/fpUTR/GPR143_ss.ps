%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCGAGCCUGGCUCUACUGCAGGCGCUGGGGGUUGGGGUGGGGGAGAGGCCCAGGGCACAUGAUGCCGCCCCCAGCCCGCCCAGCACAUGACCCAGGCAGGCCGGCGGGGUCCUGGCACACCCGAGCCGCGUCCGCGAACACAGCCC\
) } def
/len { sequence length } bind def

/coor [
[239.29779053 271.62219238]
[253.67379761 267.34078979]
[268.56250000 269.16290283]
[257.35906982 259.18875122]
[246.15563965 249.21464539]
[239.02011108 247.10177612]
[234.82400513 238.91018677]
[223.83334351 228.70207214]
[212.84268188 218.49397278]
[201.85203552 208.28585815]
[190.86137390 198.07774353]
[176.27043152 195.08552551]
[171.42445374 180.02474976]
[160.43379211 169.81663513]
[148.75819397 174.83303833]
[136.00534058 175.03837585]
[124.08699036 170.36624146]
[114.80338287 161.48406982]
[109.57124329 149.69805908]
[109.20771790 136.76110840]
[113.80293274 124.61217499]
[103.25238800 113.94981384]
[89.81819153 110.07502747]
[86.08524323 96.60073090]
[70.87876129 92.23341370]
[67.42664337 77.74438477]
[56.87609863 67.08201599]
[46.32555389 56.41965485]
[35.77500916 45.75729370]
[25.22446251 35.09492874]
[14.67391586 24.43256760]
[3.90092134 13.99501038]
[-7.08973360 3.78690076]
[-18.08038902 -6.42120886]
[-29.07104301 -16.62931824]
[-40.06169891 -26.83742905]
[-51.05235291 -37.04553986]
[-62.04300690 -47.25364685]
[-73.03366089 -57.46175766]
[-84.13132477 -67.55343628]
[-95.33474731 -77.52756500]
[-106.53817749 -87.50168610]
[-121.99031830 -90.89904022]
[-126.35140228 -105.14089203]
[-141.91091919 -104.40667725]
[-153.13070679 -114.68145752]
[-153.73477173 -129.51960754]
[-169.18692017 -132.91696167]
[-173.54800415 -147.15881348]
[-184.85595703 -157.01428223]
[-196.26718140 -166.74998474]
[-207.67840576 -176.48568726]
[-223.65235901 -182.16629028]
[-222.61578369 -199.08851624]
[-206.06793213 -202.77699280]
[-197.94268799 -187.89691162]
[-186.53146362 -178.16120911]
[-175.12025452 -168.42549133]
[-167.94175720 -166.46354675]
[-163.57388306 -158.36224365]
[-148.92308044 -155.67829895]
[-143.76065063 -140.72303772]
[-128.95227051 -141.83987427]
[-117.44831085 -131.88429260]
[-116.37727356 -116.34432220]
[-101.72648621 -113.66037750]
[-96.56405640 -98.70511627]
[-85.36062622 -88.73098755]
[-74.15719604 -78.75686646]
[-67.02166748 -76.64399719]
[-62.82555389 -68.45241547]
[-51.83489990 -58.24430466]
[-40.84424210 -48.03619385]
[-29.85358810 -37.82808304]
[-18.86293411 -27.61997414]
[-7.87227869 -17.41186333]
[3.11837626 -7.20375395]
[14.10903072 3.00435567]
[18.89359856 3.71882224]
[23.25870514 7.49000072]
[25.33627892 13.88202095]
[35.88682556 24.54438400]
[46.43737030 35.20674515]
[56.98791504 45.86911011]
[67.53845978 56.53147125]
[78.08900452 67.19383240]
[92.54084778 70.79850769]
[96.74761200 86.05018616]
[110.18180847 89.92497253]
[113.91475677 103.39926910]
[124.46530151 114.06163025]
[141.29232788 109.19797516]
[158.18919373 113.46467590]
[170.56344604 125.60991669]
[175.09843445 142.25321960]
[170.64190674 158.82597351]
[181.63255310 169.03408813]
[197.00962830 172.75646973]
[201.06948853 187.08709717]
[212.06015015 197.29519653]
[223.05079651 207.50331116]
[234.04145813 217.71142578]
[245.03210449 227.91952515]
[256.12976074 238.01121521]
[267.33319092 247.98533630]
[278.53662109 257.95947266]
[290.99768066 266.30944824]
[304.48266602 272.87869263]
[320.27755737 271.96664429]
[328.33081055 284.49639893]
[341.81582642 291.06564331]
[357.61071777 290.15359497]
[365.66397095 302.68331909]
[381.45886230 301.77130127]
[389.51211548 314.30102539]
[402.99710083 320.87026978]
[416.48211670 327.43951416]
[429.96710205 334.00875854]
[443.60064697 326.59893799]
[458.98141479 328.65121460]
[470.19515991 339.37649536]
[472.92996216 354.65066528]
[466.13427734 368.60052490]
[452.42114258 375.86203003]
[437.06353760 373.64300537]
[425.96679688 362.79669189]
[423.39785767 347.49377441]
[409.91284180 340.92449951]
[396.42785645 334.35525513]
[382.94287109 327.78601074]
[368.11251831 329.16793823]
[359.09472656 316.16830444]
[344.26434326 317.55023193]
[335.24655151 304.55062866]
[321.76156616 297.98138428]
[306.93121338 299.36328125]
[297.91342163 286.36367798]
[284.42843628 279.79443359]
[291.77511597 292.87213135]
[293.28164673 307.79629517]
[288.69683838 322.07843018]
[278.78512573 333.33712769]
[265.19924927 339.69509888]
[250.20451355 340.09219360]
[236.30114746 334.46224976]
[225.80743408 323.74395752]
[220.47308350 309.72448730]
[221.18757629 294.74151611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 106]
[4 105]
[5 104]
[7 103]
[8 102]
[9 101]
[10 100]
[11 99]
[13 97]
[14 96]
[21 91]
[22 90]
[24 88]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[31 81]
[32 78]
[33 77]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[39 71]
[40 69]
[41 68]
[42 67]
[44 65]
[47 62]
[49 60]
[50 58]
[51 57]
[52 56]
[107 138]
[108 137]
[110 135]
[111 134]
[113 132]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
