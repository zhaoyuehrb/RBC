%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGUAACGCACGGGCCCGGCGGGGAACACCGGUCCGCUGUAACACCGGCCCGGCGCAGAAGCGGGACGUCGGCUUCUAGGGGCCCAGGCCGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[108.32672119 126.47060394]
[102.11441803 140.12370300]
[95.90211487 153.77680969]
[89.68981171 167.42991638]
[83.47750854 181.08302307]
[82.42109680 198.00402832]
[65.86893463 201.67309570]
[57.76115036 186.78349304]
[69.82440186 174.87072754]
[76.03670502 161.21762085]
[82.24900818 147.56451416]
[88.46131134 133.91140747]
[94.67361450 120.25830078]
[86.45931244 107.70738983]
[71.46105957 107.93613434]
[56.46280289 108.16488647]
[41.46455002 108.39363098]
[26.46629333 108.62238312]
[17.76337624 111.92774200]
[11.00879669 108.62238312]
[-3.98945880 108.39363098]
[-17.90601921 115.91958618]
[-30.51381874 107.98908997]
[-42.98440552 118.08186340]
[-58.61885452 114.48413849]
[-65.42375183 99.95578766]
[-58.17895889 85.64171600]
[-42.44207001 82.52246094]
[-30.28507042 92.99083710]
[-17.44128609 85.44852448]
[-3.76071095 93.39537811]
[11.23754501 93.62412262]
[26.23754501 93.62412262]
[41.23580170 93.39537811]
[56.23405457 93.16663361]
[71.23231506 92.93788147]
[86.23056793 92.70913696]
[100.78623199 89.08523560]
[114.14093018 82.25500488]
[127.49562836 75.42477417]
[140.85032654 68.59454346]
[154.20501709 61.76430893]
[158.27554321 56.20554733]
[163.74861145 54.00215149]
[168.58866882 54.95296478]
[178.13871765 42.33919907]
[192.89886475 44.33602524]
[206.64511108 38.33265305]
[220.39137268 32.32928085]
[234.13763428 26.32590675]
[247.88388062 20.32253456]
[261.63012695 14.31916332]
[272.10736084 -0.72705972]
[289.41253662 1.70854187]
[302.96932983 -4.71124601]
[316.52609253 -11.13103390]
[325.68704224 -24.03017235]
[340.50122070 -22.48440552]
[353.85592651 -29.31463814]
[366.99609375 -36.54895782]
[380.13629150 -43.78328323]
[393.27648926 -51.01760483]
[406.41668701 -58.25192642]
[419.55685425 -65.48625183]
[427.91436768 -78.91988373]
[442.79522705 -78.28012085]
[448.62475586 -93.22657013]
[463.98715210 -97.85003662]
[477.09771729 -88.60379791]
[477.89913940 -72.58077240]
[465.77664185 -62.07245636]
[450.02957153 -65.13993073]
[442.61190796 -52.22374725]
[426.79119873 -52.34605789]
[413.65100098 -45.11173630]
[400.51080322 -37.87741470]
[387.37060547 -30.64309120]
[374.23043823 -23.40876961]
[361.09024048 -16.17444801]
[358.89251709 -11.75854683]
[353.80883789 -8.76426888]
[346.92102051 -8.92762375]
[338.72973633 3.51232791]
[322.94589233 2.42574739]
[309.38909912 8.84553528]
[295.83233643 15.26532364]
[291.40197754 26.63587761]
[280.01763916 32.05023193]
[267.63351440 28.06541824]
[253.88725281 34.06879044]
[240.14100647 40.07216263]
[226.39474487 46.07553482]
[212.64848328 52.07890701]
[198.90223694 58.08227921]
[190.33540344 70.26663971]
[174.59204102 68.69921875]
[161.03524780 75.11901093]
[147.68055725 81.94924164]
[134.32585144 88.77947235]
[120.97116089 95.60970306]
[107.61646271 102.43993378]
[111.79357910 108.57524872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[20 32]
[21 31]
[23 29]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[45 96]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[54 86]
[55 85]
[56 84]
[58 82]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
