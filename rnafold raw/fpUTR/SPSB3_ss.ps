%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGGAUUGUUUACGUCUCGCUCCGGGGCGGAAAGUGGGUCAGGGCCGGGCCGGCGGAGCGCGCAGCGGGGGCUGCAGAUUCUUUCCACC\
) } def
/len { sequence length } bind def

/coor [
[80.31368256 317.70687866]
[67.49463654 306.61145020]
[74.60778046 291.22186279]
[75.63141632 276.25683594]
[76.39940643 261.27648926]
[76.91152191 246.28524780]
[77.42363739 231.29399109]
[67.10124969 220.61766052]
[67.40705109 205.40710449]
[78.67534637 194.65242004]
[71.82052612 189.90084839]
[67.46163940 182.67797852]
[66.42932892 174.20886230]
[68.98206329 165.96777344]
[74.74732208 159.42161560]
[82.77381134 155.76887512]
[85.32247162 140.98696899]
[87.87112427 126.20508575]
[90.41977692 111.42318726]
[89.14079285 96.47781372]
[84.11759949 82.34390259]
[79.09440613 68.20999146]
[74.07121277 54.07607269]
[69.04801941 39.94216156]
[64.02482605 25.80824661]
[59.00162888 11.67433262]
[44.73234558 0.19130839]
[48.32956314 -16.89248657]
[42.82675171 -30.84666443]
[37.32393646 -44.80083847]
[29.16627502 -32.21304703]
[14.56580257 -28.77412033]
[1.64762235 -36.39780807]
[-2.39935350 -50.84156036]
[4.67700005 -64.06748962]
[18.93872261 -68.71542358]
[32.44926834 -62.19875717]
[22.47968102 -74.48361969]
[27.94198227 -88.34047699]
[25.39332581 -103.12237549]
[22.84467125 -117.90426636]
[11.94114304 -130.15354919]
[17.35373116 -145.63372803]
[33.51442719 -148.42012024]
[43.79849243 -135.64631653]
[37.62656403 -120.45291901]
[40.17522049 -105.67102814]
[42.72387314 -90.88913727]
[52.51116562 -79.66157532]
[47.23116302 -64.74741364]
[51.27811432 -50.30365372]
[56.78092957 -36.34947586]
[62.28374100 -22.39529991]
[73.35352325 -17.20067978]
[77.98477936 -5.44864798]
[73.13554382 6.65113878]
[78.15873718 20.78505325]
[83.18193054 34.91896820]
[88.20512390 49.05287933]
[93.22831726 63.18679428]
[98.25151825 77.32070923]
[103.27471161 91.45462036]
[110.03473663 88.61476135]
[118.68771362 89.98693848]
[133.60906982 91.52090454]
[148.53042603 93.05486298]
[163.45178223 94.58882904]
[178.37315369 96.12278748]
[193.10993958 88.92841339]
[206.55577087 98.31678772]
[204.87872314 114.62995911]
[189.80400085 121.08633423]
[176.83918762 111.04415131]
[161.91783142 109.51018524]
[146.99647522 107.97622681]
[132.07510376 106.44226074]
[117.15374756 104.90830231]
[105.20167542 113.97184753]
[102.65301514 128.75373840]
[100.10436249 143.53562927]
[97.55570221 158.31752014]
[107.22047424 178.40231323]
[93.66660309 195.16453552]
[104.17471313 206.66313171]
[103.44179535 221.85910034]
[92.41489410 231.80610657]
[91.90277863 246.79736328]
[91.39065552 261.78860474]
[94.27085876 270.68447876]
[90.59644318 277.28045654]
[89.57280731 292.24548340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[5 88]
[6 87]
[7 86]
[10 83]
[16 81]
[17 80]
[18 79]
[19 78]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[25 57]
[26 56]
[28 53]
[29 52]
[30 51]
[37 50]
[39 48]
[40 47]
[41 46]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
