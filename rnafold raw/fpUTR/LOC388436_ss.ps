%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGCUCGCAUCUUGGCUUGCUGAGGCUGCGGGUCUUGGCCGGGCCUUCGAGAAUCCCCCGCCGCCUCCCCUUCUGG\
) } def
/len { sequence length } bind def

/coor [
[95.79331207 145.88838196]
[81.33831787 149.89500427]
[73.06111145 137.38549805]
[82.39994812 125.64807892]
[75.37519073 123.02075195]
[62.19056702 130.17376709]
[57.60008240 145.05883789]
[44.12709808 152.12518311]
[29.96475220 147.65713501]
[16.78012276 154.81013489]
[12.52729511 170.03147888]
[-1.28382564 177.71447754]
[-16.45934486 173.30094910]
[-23.99589729 159.40937805]
[-19.42217827 144.28137207]
[-5.45169592 136.89210510]
[9.62711143 141.62551880]
[22.81173897 134.47250366]
[26.78736496 120.16410828]
[40.05655289 112.72212219]
[55.03755188 116.98913574]
[68.22218323 109.83612061]
[79.93471527 82.22646332]
[103.62614441 79.98080444]
[111.55243683 67.24604797]
[119.47872925 54.51129913]
[127.40502930 41.77655029]
[135.33131409 29.04179955]
[136.05476379 13.23714161]
[149.34893799 6.52044010]
[157.27523804 -6.21431017]
[165.20152283 -18.94906044]
[173.12782288 -31.68381119]
[181.05412292 -44.41856003]
[187.94357300 -57.74280167]
[193.75263977 -71.57228851]
[199.56170654 -85.40177917]
[205.37077332 -99.23126221]
[211.17984009 -113.06075287]
[216.98890686 -126.89024353]
[208.83226013 -140.09057617]
[210.02592468 -155.56166077]
[220.11091614 -167.35456848]
[235.20933533 -170.93467712]
[249.51554871 -164.92536926]
[257.52850342 -151.63732910]
[256.16708374 -136.18009949]
[245.95477295 -124.49728394]
[230.81840515 -121.08116913]
[225.00933838 -107.25168610]
[219.20027161 -93.42219543]
[213.39120483 -79.59271240]
[207.58212280 -65.76322174]
[201.77305603 -51.93373489]
[202.96148682 -49.10535812]
[202.93945312 -45.57691956]
[201.40959167 -41.87477493]
[198.29847717 -38.63116455]
[193.78886414 -36.49226761]
[185.86257935 -23.75751686]
[177.93627930 -11.02276707]
[170.00997925 1.71198344]
[162.08369446 14.44673347]
[161.92718506 29.34051704]
[148.06607056 36.96809387]
[140.13977051 49.70284271]
[132.21348572 62.43759537]
[124.28718567 75.17234039]
[116.36089325 87.90709686]
[126.32408142 105.05540466]
[117.52370453 128.27540588]
[122.77836609 142.32492065]
[135.77073669 152.33142090]
[133.33312988 168.54840088]
[117.97313690 174.29319763]
[105.49180603 163.65606689]
[108.72885895 147.57957458]
[103.47419739 133.53007507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[9 18]
[10 17]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
