%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAGGCUGAGCCCGGGCGAGCCCGCCGUGCGCACAGCUCUGCCCGCCGCCCCUGGAGCGGAUCCCCAGCCGUCCCUGGGCGUUCUCCCGGGUUCUAGCAAAGCCCCCCGGGGUGCCCAUCAGUUUCCUUGGGUGACUACAGCGUGUGUUUUUUCUUUCCUCUUUCCCCUGCCUGUGUGCCCUUCUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[212.44444275 254.65460205]
[212.05158997 247.73748779]
[202.57704163 236.10852051]
[188.53956604 231.12867737]
[185.82133484 215.54273987]
[171.78385925 210.56289673]
[169.06561279 194.97695923]
[159.59106445 183.34799194]
[150.11651611 171.71902466]
[140.64196777 160.09005737]
[131.07307434 148.53857422]
[121.41049957 137.06536865]
[103.05852509 142.69538879]
[84.09143066 139.73875427]
[68.32378387 128.79008484]
[55.62756729 136.77793884]
[42.93134308 144.76580811]
[30.23512268 152.75367737]
[17.53890228 160.74153137]
[4.90811205 168.83247375]
[-7.65640926 177.02592468]
[-20.22093010 185.21939087]
[-32.78545380 193.41285706]
[-41.27032089 213.08012390]
[-61.89902115 213.38116455]
[-74.04861450 222.17817688]
[-86.19820404 230.97518921]
[-95.48148346 245.16169739]
[-111.68344879 240.16842651]
[-111.37046051 223.21736145]
[-94.99521637 218.82559204]
[-82.84562683 210.02857971]
[-70.69603729 201.23156738]
[-70.73791504 192.32650757]
[-66.60675812 184.28242493]
[-59.12010574 178.96891785]
[-49.89051437 177.68603516]
[-40.97891235 180.84832764]
[-28.41439247 172.65486145]
[-15.84987068 164.46141052]
[-3.28534913 156.26794434]
[0.60607696 149.97129822]
[9.55103779 148.04531860]
[22.24725914 140.05744934]
[34.94348145 132.06958008]
[47.63970184 124.08172607]
[60.33592224 116.09386444]
[57.19661331 99.65161896]
[60.60313797 83.26265717]
[48.03861618 75.06919861]
[35.47409439 66.87574005]
[22.90957451 58.68227768]
[10.34505272 50.48881531]
[-2.42412734 52.37741470]
[-12.72376442 45.28205872]
[-15.33502865 33.46097565]
[-27.76452065 25.06408882]
[-43.53107834 23.75023651]
[-49.74603271 10.21422386]
[-62.17552185 1.81733632]
[-74.60501862 -6.57955170]
[-87.03450775 -14.97643948]
[-101.57310486 -9.55345917]
[-116.51357269 -13.74417686]
[-126.11099243 -25.93717575]
[-126.67495728 -41.44400024]
[-117.98860931 -54.30195618]
[-103.39203644 -59.56690216]
[-88.49790955 -55.21435547]
[-79.03333282 -42.91796112]
[-78.63761902 -27.40593147]
[-66.20812988 -19.00904274]
[-53.77863693 -10.61215591]
[-41.34914398 -2.21526790]
[-26.47162628 -1.50201702]
[-19.36763191 12.63459682]
[-6.93814087 21.03148460]
[10.60208702 21.31596375]
[18.53851318 37.92429352]
[31.10303497 46.11775589]
[43.66755676 54.31121826]
[56.23207855 62.50467682]
[68.79660034 70.69813538]
[74.98672485 65.26403046]
[82.10308075 61.11617661]
[89.88214874 58.40816879]
[98.03588104 57.24028015]
[99.98368835 42.36728287]
[101.93148804 27.49428749]
[103.87929535 12.62128925]
[105.82710266 -2.25170803]
[107.77490997 -17.12470627]
[109.72271729 -31.99770355]
[98.81295776 -45.66310120]
[101.10910797 -62.65724564]
[114.70824432 -72.54019165]
[116.41370392 -87.44292450]
[107.59881592 -100.84729767]
[112.71954346 -116.05117035]
[127.84770203 -121.39142609]
[141.37826538 -112.77148438]
[142.93173218 -96.80381775]
[131.31643677 -85.73746490]
[129.61097717 -70.83473206]
[138.96476746 -61.95987320]
[141.53276062 -49.12553024]
[136.15643311 -36.97874832]
[124.59571075 -30.04989624]
[122.64790344 -15.17689991]
[120.70010376 -0.30390221]
[118.75229645 14.56909561]
[116.80448914 29.44209290]
[114.85668182 44.31509018]
[112.90887451 59.18808746]
[121.90326691 63.22367096]
[129.73587036 69.20991516]
[141.88546753 60.41290283]
[154.03504944 51.61589050]
[166.18464661 42.81887817]
[178.33422852 34.02186203]
[176.67387390 18.75298119]
[182.88507080 4.70604086]
[195.29705811 -4.34040165]
[210.57107544 -5.95289850]
[224.59848022 0.30230391]
[233.60597229 12.74258709]
[235.17057800 28.02157784]
[228.87144470 42.02930450]
[216.40298462 50.99775696]
[201.11915588 52.51446915]
[187.13125610 46.17145538]
[174.98165894 54.96846771]
[162.83206177 63.76548004]
[150.68247986 72.56249237]
[138.53288269 81.35951233]
[142.70353699 97.05731964]
[140.72554016 113.17882538]
[132.88371277 127.40279388]
[142.54629517 138.87600708]
[150.48063660 143.43316650]
[152.27093506 150.61549377]
[161.74548340 162.24446106]
[171.22003174 173.87342834]
[180.69458008 185.50239563]
[195.40972900 191.31402588]
[197.45030212 206.06819153]
[212.16545105 211.87980652]
[214.20600891 226.63397217]
[223.68055725 238.26293945]
[220.63865662 223.57461548]
[221.27067566 208.58793640]
[225.53842163 194.20787048]
[233.18420410 181.30274963]
[243.74633789 170.65187073]
[256.58703613 162.89836121]
[270.93087769 158.51042175]
[285.91174316 157.75303650]
[300.62500000 160.67190552]
[314.18222046 167.09080505]
[325.76470947 176.62211609]
[334.67306519 188.69029236]
[340.36938477 202.56660461]
[342.50970459 217.41311646]
[340.96472168 232.33334351]
[335.82778931 246.42631531]
[327.40908813 258.84103394]
[316.21697998 268.82785034]
[302.92724609 275.78369141]
[288.34246826 279.28854370]
[273.34329224 279.13073730]
[258.83547974 275.31985474]
[245.69503784 268.08596802]
[234.71844482 257.86944580]
[239.74664307 272.00158691]
[244.77484131 286.13369751]
[249.80302429 300.26583862]
[255.63673401 307.31494141]
[254.79602051 314.66912842]
[269.78494263 318.32095337]
[280.40350342 329.51245117]
[283.26342773 344.67239380]
[277.45205688 358.96337891]
[264.82379150 367.82513428]
[249.40829468 368.42993164]
[236.12457275 360.58480835]
[229.21141052 346.79309082]
[230.87478638 331.45565796]
[240.58390808 319.46664429]
[235.67089844 305.29403687]
[230.64270020 291.16189575]
[225.61450195 277.02978516]
[220.58630371 262.89764404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 149]
[3 148]
[5 146]
[7 144]
[8 143]
[9 142]
[10 141]
[11 139]
[12 138]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 41]
[21 40]
[22 39]
[23 38]
[25 33]
[26 32]
[27 31]
[49 83]
[50 82]
[51 81]
[52 80]
[53 79]
[56 77]
[57 76]
[59 74]
[60 73]
[61 72]
[62 71]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
[96 104]
[97 103]
[116 135]
[117 134]
[118 133]
[119 132]
[120 131]
[173 192]
[174 191]
[175 190]
[176 189]
[178 188]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
