%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUGGAGCCCAGAAGGGACACACCAGCACAGUCUGGUAGGCUACAGCAGCAAGUCUCUAAAGAAAGGCUGAGAACACCCAGAACAGGAGAGUUCAGGUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[91.26704407 247.15608215]
[77.28569031 239.28834534]
[74.86204529 223.42941284]
[85.85531616 211.74491882]
[86.74392700 196.77125549]
[87.63253784 181.79760742]
[88.52114868 166.82394409]
[89.40975952 151.85029602]
[76.53515625 147.43423462]
[65.21272278 139.88046265]
[53.85005951 149.67279053]
[42.48738861 159.46513367]
[37.59580994 175.11775208]
[21.53739548 178.44331360]
[10.83166981 166.02078247]
[16.49176407 150.62937927]
[32.69505692 148.10246277]
[44.05772781 138.31013489]
[55.42039490 128.51779175]
[51.77510452 121.79370117]
[49.13717651 114.61435699]
[47.56172180 107.12973022]
[47.08164597 99.49617767]
[47.70697784 91.87314606]
[33.36096191 87.49229431]
[19.01494789 83.11144257]
[4.66893291 78.73059082]
[-9.67708206 74.34973907]
[-23.50950432 81.99432373]
[-38.67269897 77.53863525]
[-46.17060852 63.62616348]
[-41.55485916 48.51092911]
[-27.56389046 41.16052628]
[-12.49829865 45.93582535]
[-5.29623032 60.00372314]
[9.04978466 64.38457489]
[23.39579964 68.76542664]
[37.74181366 73.14627838]
[52.08782959 77.52713013]
[55.79288483 70.90812683]
[60.40617752 64.88682556]
[65.83292389 59.58691788]
[71.96163940 55.11730194]
[78.66640472 51.56980515]
[85.80947113 49.01730728]
[93.24407959 47.51225281]
[100.81748962 47.08556366]
[108.37409973 47.74600220]
[115.75866699 49.47999954]
[122.20964813 35.93803406]
[128.66062927 22.39606667]
[135.11160278 8.85409832]
[127.87017822 -4.74251413]
[129.99850464 -19.81976891]
[140.47286987 -30.62493515]
[155.12588501 -33.16011429]
[161.57685852 -46.70208359]
[168.02784729 -60.24404907]
[166.19441223 -76.54039001]
[179.54959106 -86.05728912]
[194.35470581 -79.00458527]
[195.37953186 -62.63749313]
[181.56980896 -53.79307175]
[175.11883545 -40.25110626]
[168.66786194 -26.70913696]
[175.93191528 -13.73333454]
[174.14122009 1.20846546]
[163.77439880 12.36115932]
[148.65357971 15.30507660]
[142.20259094 28.84704399]
[135.75161743 42.38901138]
[129.30064392 55.93098068]
[148.74099731 79.38639832]
[152.02923584 109.67290497]
[166.23912048 114.47695160]
[180.44902039 119.28099823]
[194.65892029 124.08504486]
[210.21020508 121.17507935]
[219.78906250 132.58097839]
[234.06858826 137.17393494]
[248.41459656 141.55479431]
[262.24703979 133.91020203]
[277.41021729 138.36589050]
[284.90814209 152.27836609]
[280.29238892 167.39360046]
[266.30142212 174.74400330]
[251.23582458 169.96870422]
[244.03375244 155.90080261]
[229.68772888 151.51995850]
[222.25212097 152.59387207]
[214.98501587 146.79087830]
[200.45011902 150.04446411]
[189.85487366 138.29493713]
[175.64497375 133.49089050]
[161.43507385 128.68684387]
[147.22518921 123.88279724]
[139.67675781 135.01943970]
[129.56401062 143.89277649]
[117.54053497 149.92930603]
[104.38341522 152.73890686]
[103.49480438 167.71255493]
[102.60619354 182.68621826]
[101.71758270 197.65986633]
[100.82897186 212.63352966]
[110.36312866 225.53622437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 104]
[5 103]
[6 102]
[7 101]
[8 100]
[10 19]
[11 18]
[12 17]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[49 72]
[50 71]
[51 70]
[52 69]
[56 65]
[57 64]
[58 63]
[74 96]
[75 95]
[76 94]
[77 93]
[79 91]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
