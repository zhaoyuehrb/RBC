%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGGUGCCGCGGGGCGGGAGUAGAGGCGGAGGGAGGGGACACGGGCUCAUUGCGGUGUGCGCCCUGCACUCUGUCCCUCACUCGCCGCCGACGACCUGUCUCGCCGAGCGCACGCCUUGCCGCCGCCCCGCAGAA\
) } def
/len { sequence length } bind def

/coor [
[78.44816589 447.43167114]
[64.57836914 453.59555054]
[49.41833115 454.32891846]
[35.01833344 449.53259277]
[23.32585526 439.85528564]
[15.92220306 426.60574341]
[13.80866337 411.57586670]
[17.27107430 396.79830933]
[25.84117508 384.27163696]
[38.35992813 375.68994141]
[53.13427353 372.21386719]
[55.17677307 357.35357666]
[57.21927261 342.49328613]
[59.26177216 327.63299561]
[61.30427170 312.77270508]
[63.34677124 297.91241455]
[65.38927460 283.05212402]
[67.43177032 268.19183350]
[69.47427368 253.33155823]
[60.29780579 241.65559387]
[62.15750122 226.55604553]
[74.46653748 217.01008606]
[76.50904083 202.14981079]
[78.55153656 187.28952026]
[76.32687378 180.17346191]
[80.81340027 172.11569214]
[83.19363403 157.30575562]
[85.57387543 142.49580383]
[87.95410919 127.68586731]
[90.33435059 112.87591553]
[87.11553955 98.22534943]
[78.74652863 85.77706909]
[70.37751770 73.32878876]
[62.00851059 60.88050842]
[53.63949966 48.43222809]
[45.27048874 35.98394775]
[31.14983177 28.84829330]
[30.46992493 13.96921349]
[22.10091400 1.52093399]
[13.73190308 -10.92734528]
[-4.73662663 -18.86374664]
[-5.42821455 -38.13707352]
[-14.35513115 -50.19153976]
[-22.04574585 -55.28182220]
[-23.34434319 -62.62354660]
[-31.99454689 -74.87809753]
[-40.64475250 -87.13264465]
[-49.29495621 -99.38719177]
[-63.57438660 -106.19956970]
[-64.59281158 -121.05931854]
[-73.24301910 -133.31385803]
[-81.89321899 -145.56840515]
[-97.50833130 -148.00639343]
[-106.75835419 -160.82095337]
[-104.15541840 -176.40940857]
[-91.24378967 -185.52343750]
[-75.68371582 -182.75582886]
[-66.70671082 -169.74856567]
[-69.63867188 -154.21861267]
[-60.98846817 -141.96406555]
[-52.33826447 -129.70951843]
[-38.67755508 -123.77367401]
[-37.04040909 -108.03739929]
[-28.39020348 -95.78284454]
[-19.73999786 -83.52829742]
[-11.08979416 -71.27375031]
[-2.30066419 -59.11845779]
[6.62625217 -47.06399155]
[16.93139076 -46.45186234]
[25.34634972 -40.09862900]
[28.90351295 -29.93872452]
[26.18018341 -19.29635620]
[34.54919434 -6.84807682]
[42.91820526 5.60020256]
[56.44025421 11.84547520]
[57.71876907 27.61493874]
[66.08777618 40.06321716]
[74.45678711 52.51149750]
[82.82579803 64.95977783]
[91.19480896 77.40805817]
[99.56381989 89.85633850]
[105.57898712 84.90093994]
[115.03723145 83.88580322]
[129.28182983 79.18564606]
[143.52642822 74.48548889]
[157.77101135 69.78532410]
[168.45176697 58.11347961]
[182.96253967 61.47311401]
[197.20712280 56.77295303]
[203.73506165 45.58359528]
[215.76245117 41.99135971]
[226.63754272 47.41028976]
[240.98544312 43.03559875]
[255.33334351 38.66091156]
[264.11453247 25.23444176]
[280.09963989 23.87210655]
[291.02624512 35.61897278]
[288.51239014 51.46384811]
[274.48651123 59.25190353]
[259.70803833 53.00880432]
[245.36013794 57.38349533]
[231.01223755 61.75818253]
[219.79728699 75.20820618]
[201.90728760 71.01754761]
[187.66268921 75.71770477]
[178.00080872 87.05336761]
[162.47117615 84.02992249]
[148.22657776 88.73007965]
[133.98197937 93.43024445]
[119.73738861 98.13040161]
[133.72062683 103.55895996]
[137.39366150 118.10229492]
[127.66495514 129.51950073]
[112.72303009 128.20085144]
[105.14429474 115.25615692]
[102.76405334 130.06610107]
[100.38381958 144.87605286]
[98.00357819 159.68598938]
[95.62334442 174.49594116]
[93.41182709 189.33201599]
[91.36933136 204.19230652]
[89.32682800 219.05259705]
[98.60395050 231.56549072]
[96.32087708 246.60684204]
[84.33455658 255.37405396]
[82.29206085 270.23434448]
[80.24955750 285.09463501]
[78.20706177 299.95492554]
[76.16455841 314.81521606]
[74.12206268 329.67550659]
[72.07955933 344.53579712]
[70.03706360 359.39608765]
[67.99456024 374.25637817]
[81.28320312 381.58959961]
[91.02241516 393.23059082]
[95.89505005 407.60491943]
[95.24213409 422.76864624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 133]
[12 132]
[13 131]
[14 130]
[15 129]
[16 128]
[17 127]
[18 126]
[19 125]
[22 122]
[23 121]
[24 120]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[31 81]
[32 80]
[33 79]
[34 78]
[35 77]
[36 76]
[38 74]
[39 73]
[40 72]
[42 68]
[43 67]
[45 66]
[46 65]
[47 64]
[48 63]
[50 61]
[51 60]
[52 59]
[83 110]
[84 109]
[85 108]
[86 107]
[88 105]
[89 104]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
