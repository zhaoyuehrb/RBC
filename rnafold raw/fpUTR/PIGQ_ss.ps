%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGGGGCUCGGGUCCCGCGGCGGGGCUGGAGGCAGCGAGCGCCGUCGUCUGCCCGGGCCCGCCCAUCGGGGUCCCCAACCCCAUCCGGACCCCGCCGCCCGAGCGCGCGGCCCCGGAAGCACCCGCCUCCCGGC\
) } def
/len { sequence length } bind def

/coor [
[122.00317383 291.98056030]
[120.64893341 277.04183960]
[119.29470062 262.10308838]
[110.43994904 250.12632751]
[116.89973450 235.68397522]
[115.54550171 220.74522400]
[114.19126129 205.80648804]
[112.83702850 190.86773682]
[111.48278809 175.92900085]
[109.95982361 161.00651550]
[108.26832581 146.10218811]
[106.57682800 131.19787598]
[79.32233429 120.10050201]
[74.92409515 93.96775818]
[61.99058533 86.37010956]
[49.05707550 78.77245331]
[36.03853607 71.32144165]
[22.93662453 64.01802063]
[9.83471680 56.71459579]
[-3.26719284 49.41117477]
[-16.36910248 42.10774994]
[-36.43017578 43.40178299]
[-45.77830887 26.53189850]
[-59.19685745 19.82797813]
[-72.61540985 13.12405682]
[-86.03395844 6.42013597]
[-99.45250702 -0.28378510]
[-112.87105560 -6.98770618]
[-128.67428589 -6.23383474]
[-136.60169983 -18.84356499]
[-150.02024841 -25.54748726]
[-163.43879700 -32.25140762]
[-176.85734558 -38.95532990]
[-183.60551453 -38.93806839]
[-188.56120300 -41.93146515]
[-190.72047424 -46.27742767]
[-203.82237244 -53.58085251]
[-216.92428589 -60.88427353]
[-230.02619934 -68.18769836]
[-243.20979309 -75.34259796]
[-256.47341919 -82.34805298]
[-269.73703003 -89.35351562]
[-284.76208496 -84.45216370]
[-298.81414795 -91.68508911]
[-303.55636597 -106.76113129]
[-296.17529297 -120.73593140]
[-281.04995728 -125.31849670]
[-267.15396118 -117.79006958]
[-262.73156738 -102.61713409]
[-249.46795654 -95.61167145]
[-236.20434570 -88.60620880]
[-228.75801086 -88.26087189]
[-222.72277832 -81.28960419]
[-209.62086487 -73.98618317]
[-196.51895142 -66.68276215]
[-183.41705322 -59.37933731]
[-170.15342712 -52.37387848]
[-156.73487854 -45.66995621]
[-143.31632996 -38.96603394]
[-129.89778137 -32.26211548]
[-115.05433655 -33.49549484]
[-106.16712952 -20.40625381]
[-92.74858093 -13.70233345]
[-79.33003235 -6.99841261]
[-65.91148376 -0.29449126]
[-52.49293900 6.40943003]
[-39.07439041 13.11335087]
[-29.61173248 8.99222946]
[-19.23379326 10.84343338]
[-11.46072865 18.28712654]
[-9.06567955 29.00584221]
[4.03622961 36.30926514]
[17.13813782 43.61268616]
[30.24004745 50.91610718]
[43.34195709 58.21953201]
[50.77857590 58.73306274]
[56.65472794 65.83894348]
[69.58823395 73.43659973]
[82.52174377 81.03424835]
[87.88205719 76.46874237]
[94.43423462 73.43161774]
[101.73912048 72.23238373]
[109.27803802 73.05360413]
[116.48963928 75.93086243]
[122.81165314 80.74337006]
[127.72443390 87.21643829]
[130.79304504 94.93613434]
[131.70440674 103.37528992]
[146.70344543 103.54479980]
[161.70248413 103.71430206]
[176.70152283 103.88381195]
[191.70057678 104.05332184]
[200.22303772 93.55846405]
[213.05419922 89.96704102]
[225.41896057 94.38162231]
[232.84991455 104.96800232]
[247.84129333 105.47643280]
[262.83267212 105.98486328]
[277.82406616 106.49330139]
[292.82022095 106.83229065]
[307.81927490 107.00180054]
[322.81829834 107.17130280]
[336.83914185 98.66550446]
[351.08364868 106.79112244]
[350.89834595 123.18921661]
[336.47381592 130.99084473]
[322.64880371 122.17034912]
[307.64974976 122.00083923]
[292.65072632 121.83133698]
[285.86965942 124.92720032]
[277.31561279 121.48468018]
[262.32424927 120.97624969]
[247.33285522 120.46781158]
[232.34147644 119.95938110]
[220.59967041 131.94641113]
[203.48420715 131.76968384]
[191.53106689 119.05236053]
[176.53202820 118.88285065]
[161.53297424 118.71334839]
[146.53393555 118.54383850]
[131.53489685 118.37433624]
[121.48114777 129.50636292]
[123.17264557 144.41069031]
[124.86415100 159.31501770]
[128.97186279 167.57028198]
[126.42153168 174.57476807]
[127.77577209 189.51350403]
[129.13000488 204.45225525]
[130.48423767 219.39099121]
[131.83848572 234.32972717]
[140.79010010 247.37500000]
[134.23344421 260.74884033]
[135.58767700 275.68759155]
[136.94190979 290.62634277]
[148.29354858 301.96301270]
[146.36468506 317.88967896]
[132.63499451 326.18878174]
[117.63671112 320.49395752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[5 130]
[6 129]
[7 128]
[8 127]
[9 126]
[10 124]
[11 123]
[12 122]
[14 79]
[15 78]
[16 77]
[17 75]
[18 74]
[19 73]
[20 72]
[21 71]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[30 60]
[31 59]
[32 58]
[33 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 51]
[41 50]
[42 49]
[88 121]
[89 120]
[90 119]
[91 118]
[92 117]
[96 114]
[97 113]
[98 112]
[99 111]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
