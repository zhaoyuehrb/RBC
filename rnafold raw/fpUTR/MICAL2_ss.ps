%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGACGUUUCUCCAGAUACUUCAUGCUGUUCACCUGUGUCCUCGCCGCACCACUGCCGCACACGACUCCUGAACC\
) } def
/len { sequence length } bind def

/coor [
[6.14519596 152.18429565]
[-7.65449572 158.06379700]
[-21.45418739 163.94329834]
[-35.25387955 169.82279968]
[-49.05356979 175.70230103]
[-62.85326385 181.58180237]
[-72.51637268 194.10916138]
[-87.25796509 191.97967529]
[-101.05765533 197.85917664]
[-110.72077179 210.38653564]
[-125.46236420 208.25704956]
[-139.26205444 214.13653564]
[-148.67578125 227.56463623]
[-164.98576355 225.85681152]
[-171.41368103 210.76992798]
[-161.34704590 197.82408142]
[-145.14155579 200.33685303]
[-131.34185791 194.45735168]
[-122.66579437 182.35052490]
[-106.93715668 184.05947876]
[-93.13746643 178.17997742]
[-84.46140289 166.07315063]
[-68.73276520 167.78210449]
[-54.93307114 161.90260315]
[-41.13337708 156.02310181]
[-27.33368683 150.14361572]
[-13.53399467 144.26411438]
[0.26569670 138.38461304]
[9.86206436 123.83528900]
[28.03529358 125.84616852]
[41.58705139 119.41577911]
[55.13880539 112.98539734]
[68.69056702 106.55500793]
[82.24231720 100.12461853]
[85.15091705 90.26062012]
[93.03941345 83.66289520]
[103.26226044 82.54409790]
[112.39105225 87.27944183]
[122.55075073 75.15133667]
[137.19464111 77.87268066]
[151.21987915 72.55361176]
[165.24513245 67.23453522]
[169.37834167 50.97085953]
[182.19888306 40.40047073]
[198.62393188 39.46221542]
[212.28884888 48.32500076]
[226.08854675 42.44549942]
[235.75166321 29.91813660]
[250.49325562 32.04763031]
[264.29293823 26.16812897]
[278.09262085 20.28862953]
[287.50637817 6.86053610]
[303.81634521 8.56835938]
[310.24426270 23.65523720]
[300.17761230 36.60108566]
[283.97213745 34.08832169]
[270.17245483 39.96781921]
[256.37274170 45.84732056]
[247.69668579 57.95414352]
[231.96804810 56.24519348]
[218.16835022 62.12469101]
[216.35087585 75.50497437]
[208.03654480 86.28305817]
[195.35417175 91.52105713]
[181.64091492 89.72293091]
[170.56420898 81.25978088]
[156.53895569 86.57884979]
[142.51371765 91.89792633]
[133.35719299 103.64557648]
[117.71012115 101.30468750]
[106.96058655 116.33710480]
[88.67270660 113.67637634]
[75.12094879 120.10675812]
[61.56919479 126.53714752]
[48.01744080 132.96754456]
[34.46568298 139.39793396]
[29.30262184 151.41450500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[8 21]
[9 20]
[11 18]
[12 17]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[38 70]
[40 68]
[41 67]
[42 66]
[46 61]
[47 60]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
