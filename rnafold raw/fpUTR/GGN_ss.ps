%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGCCUGGGGGCGAGGAACAAGACCUCGGAGUAUUUCAAGGGGAGACCUAGUUCCCUGCCCUGCCCCGGGCCCAGGGCGCCGCGGUCUGAACUCUGCUCGGCUGGAGGACUCGUCUCCGAGCUCCGUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[85.37407684 120.91515350]
[77.57125092 113.49729919]
[73.37059784 103.28989410]
[73.70759583 91.98507690]
[78.74468231 81.55603790]
[64.31729126 77.45109558]
[49.88991165 73.34614563]
[35.46252441 69.24120331]
[21.03514099 65.13626099]
[6.60775661 61.03131485]
[-7.81962824 56.92636871]
[-22.24701309 52.82142639]
[-36.67439651 48.71648026]
[-53.01084518 63.44153214]
[-79.35851288 57.87269974]
[-92.46285248 65.17176819]
[-105.56718445 72.47083282]
[-118.67152405 79.76989746]
[-131.77586365 87.06896973]
[-134.55024719 102.45847321]
[-146.60075378 112.42438507]
[-162.23747253 112.26111603]
[-174.07725525 102.04574585]
[-176.52969360 86.60166931]
[-168.43682861 73.22109985]
[-153.61987305 68.22193909]
[-139.07492065 73.96463013]
[-125.97058868 66.66556549]
[-112.86624908 59.36649704]
[-99.76191711 52.06743240]
[-86.65757751 44.76836395]
[-85.19440460 37.41247559]
[-100.19390106 37.53545380]
[-113.59710693 44.26998901]
[-128.01855469 40.14420700]
[-135.83195496 27.33988190]
[-132.90548706 12.62812614]
[-120.78668976 3.78872752]
[-105.88417816 5.49608755]
[-96.07871246 16.84701729]
[-82.26805115 22.70069504]
[-80.80487061 15.34480476]
[-90.11846924 3.58653426]
[-99.43206024 -8.17173672]
[-108.74565887 -19.93000793]
[-123.37942505 -25.94361305]
[-125.21672058 -40.72446823]
[-134.53031921 -52.48273849]
[-149.71322632 -50.16439438]
[-164.01535034 -55.76305389]
[-173.58947754 -67.77270508]
[-175.86021423 -82.96280670]
[-170.21675110 -97.24730682]
[-158.17715454 -106.78374481]
[-142.97999573 -109.00685883]
[-128.71325684 -103.31864929]
[-119.21461487 -91.24921417]
[-117.03913879 -76.04517365]
[-122.77204132 -61.79633331]
[-113.45844269 -50.03806305]
[-99.49085236 -44.86548615]
[-96.98738861 -29.24360275]
[-87.67378998 -17.48533249]
[-78.36019897 -5.72706127]
[-69.04660034 6.03120947]
[-40.59583282 11.99114609]
[-32.56945419 34.28909683]
[-18.14206886 38.39403915]
[-3.71468329 42.49898529]
[10.71270180 46.60393143]
[25.14008522 50.70887375]
[39.56747055 54.81381989]
[53.99485397 58.91876602]
[68.42224121 63.02370834]
[82.84962463 67.12865448]
[97.27700806 63.02370834]
[107.38244629 51.93857574]
[117.48787689 40.85344315]
[127.59331512 29.76830864]
[131.17250061 14.35727215]
[145.46473694 10.16428947]
[155.57017517 -0.92084390]
[161.77262878 -16.69949722]
[178.65165710 -15.10740089]
[181.79435730 1.55272329]
[166.65530396 9.18459034]
[156.54986572 20.26972389]
[153.69349670 34.88787842]
[138.67845154 39.87374115]
[128.57301331 50.95887756]
[118.46757507 62.04401016]
[108.36214447 73.12914276]
[117.14447021 79.14741516]
[122.73107910 87.69210052]
[124.55411530 97.29203796]
[122.66141510 106.43249512]
[135.03637695 114.90953827]
[147.41134644 123.38658905]
[159.78630066 131.86363220]
[172.25834656 140.19718933]
[187.53367615 137.14729309]
[200.16221619 145.63108826]
[202.97569275 160.21258545]
[215.54315186 168.40153503]
[228.11061096 176.59048462]
[240.67807007 184.77943420]
[253.33927917 192.82267761]
[266.09252930 200.71916199]
[278.84579468 208.61564636]
[291.59906006 216.51213074]
[304.35229492 224.40861511]
[320.23556519 222.15000916]
[331.80511475 233.26419067]
[330.18579102 249.22531128]
[316.61978149 257.78936768]
[301.51379395 252.38673401]
[296.45581055 237.16186523]
[283.70257568 229.26538086]
[270.94931030 221.36889648]
[258.19604492 213.47242737]
[245.44279480 205.57594299]
[238.03343201 204.72161865]
[232.48912048 197.34689331]
[219.92166138 189.15794373]
[207.35420227 180.96899414]
[194.78674316 172.78004456]
[180.31126404 176.09608459]
[167.44940186 167.97035217]
[164.06939697 152.76464844]
[156.68173218 151.73941040]
[151.30924988 144.23858643]
[138.93429565 135.76155090]
[126.55933380 127.28450012]
[114.18437195 118.80745697]
[105.45761108 123.58858490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[42 65]
[43 64]
[44 63]
[45 62]
[47 60]
[48 59]
[76 92]
[77 91]
[78 90]
[79 89]
[81 87]
[82 86]
[96 134]
[97 133]
[98 132]
[99 131]
[100 129]
[103 126]
[104 125]
[105 124]
[106 123]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
