%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGCGCAUGCGCGGCCGAUUUGCACAUGCGCAAUACUCGCGCUGCCUCCGUGGUCCCUGCCUGGCUGAGGUGGCAGCAGGGGGCGGGACGCGCAGCGCU\
) } def
/len { sequence length } bind def

/coor [
[-29.94867706 188.66824341]
[-46.99946976 186.75950623]
[-60.72798538 176.61575317]
[-74.22802734 183.15402222]
[-87.72806549 189.69229126]
[-101.22810364 196.23056030]
[-114.72814178 202.76882935]
[-128.22817993 209.30709839]
[-141.72822571 215.84535217]
[-155.22825623 222.38362122]
[-164.27587891 235.36250305]
[-179.10302734 233.94651794]
[-192.60307312 240.48478699]
[-206.10311890 247.02305603]
[-219.60314941 253.56132507]
[-226.20523071 268.18295288]
[-241.78810120 271.99789429]
[-254.39791870 262.07962036]
[-254.36152649 246.03662109]
[-241.70681763 236.17567444]
[-226.14141846 240.06127930]
[-212.64137268 233.52301025]
[-199.14134216 226.98475647]
[-185.64129639 220.44648743]
[-177.55929565 207.93527222]
[-161.76652527 208.88359070]
[-148.26649475 202.34532166]
[-134.76644897 195.80705261]
[-121.26641083 189.26878357]
[-107.76637268 182.73051453]
[-94.26632690 176.19226074]
[-80.76628876 169.65399170]
[-67.26625061 163.11572266]
[-67.69390106 150.29679871]
[-63.16706848 138.24577332]
[-54.34107971 128.80979919]
[-42.53310776 123.44990540]
[-29.52570343 123.01487732]
[-17.29770279 127.60699463]
[-7.72319412 136.56101990]
[6.15721273 130.87469482]
[20.03762054 125.18836975]
[33.91802597 119.50203705]
[47.79843521 113.81571198]
[61.67884064 108.12938690]
[75.55924988 102.44306183]
[89.34954071 96.54155731]
[102.94963074 90.21403503]
[116.44966888 83.67576599]
[129.94970703 77.13749695]
[136.44932556 70.46308899]
[143.97280884 70.61316681]
[157.66966248 64.49790955]
[167.11654663 51.80669785]
[181.89248657 53.68310928]
[195.58934021 47.56785202]
[209.28617859 41.45259857]
[222.98303223 35.33734512]
[236.67988586 29.22209167]
[250.37672424 23.10683632]
[264.07357788 16.99158287]
[270.77761841 10.52253819]
[278.29281616 10.90651989]
[292.17321777 5.22019434]
[302.01022339 -7.17108297]
[316.72067261 -4.83605242]
[322.59347534 -19.50866508]
[337.15399170 -25.65417290]
[351.76367188 -19.62655640]
[357.75491333 -5.00189257]
[351.57315063 9.54326439]
[336.88598633 15.37953186]
[322.40698242 9.04435444]
[313.56280518 21.02890778]
[297.85952759 19.10060120]
[283.97912598 24.78692627]
[270.18884277 30.68843079]
[256.49197388 36.80368423]
[242.79513550 42.91893768]
[229.09828186 49.03419495]
[215.40144348 55.14944839]
[201.70458984 61.26470184]
[188.00773621 67.37995911]
[179.54054260 79.63376617]
[163.78491211 78.19476318]
[150.08807373 84.31001282]
[136.48797607 90.63754272]
[122.98793793 97.17580414]
[109.48789978 103.71407318]
[104.06895447 109.88903046]
[95.46479797 110.23841095]
[88.76076508 116.70745087]
[81.24557495 116.32347107]
[67.36516571 122.00979614]
[53.48476028 127.69612122]
[39.60435104 133.38244629]
[25.72394562 139.06877136]
[11.84353924 144.75509644]
[-2.03686810 150.44142151]
[-3.90904999 167.76123047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[12 24]
[13 23]
[14 22]
[15 21]
[40 99]
[41 98]
[42 97]
[43 96]
[44 95]
[45 94]
[46 93]
[47 91]
[48 89]
[49 88]
[50 87]
[52 86]
[53 85]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[61 77]
[63 76]
[64 75]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
