%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGAAGCAUAUUAAGGUAGAUAUGUUCUAUCGUUAAUUGUAGUUUUGACAGGUGGCAUCUCAGUAAUCAAAAGGAAGAAAAUGAACCAAAAGAACCAAAGAGGGAACCAUUCAUACUUCAAGAUCUCUAAUAAGAAGUAGCAAUAUUUAAU\
) } def
/len { sequence length } bind def

/coor [
[105.36974335 154.32609558]
[102.33093262 139.63713074]
[85.78152466 133.76501465]
[74.65178680 122.00575256]
[61.41396332 129.05982971]
[48.17613983 136.11390686]
[34.93831635 143.16798401]
[21.70049477 150.22206116]
[8.46267033 157.27613831]
[-4.70251465 164.46487427]
[-17.79369164 171.78752136]
[-30.88486671 179.11016846]
[-43.90067291 186.56596375]
[-56.83975601 194.15411377]
[-69.77883911 201.74227905]
[-82.71791840 209.33044434]
[-95.57892609 217.05018616]
[-108.36052704 224.90069580]
[-121.14212799 232.75122070]
[-133.92373657 240.60174561]
[-146.70533752 248.45225525]
[-159.48693848 256.30276489]
[-164.59967041 271.50933838]
[-179.72502136 276.85754395]
[-193.26011658 268.24472046]
[-194.82197571 252.27786255]
[-183.21249390 241.20539856]
[-167.33744812 243.52117920]
[-154.55584717 235.67065430]
[-141.77424622 227.82012939]
[-128.99264526 219.96961975]
[-116.21105194 212.11909485]
[-103.42944336 204.26856995]
[-99.35127258 198.05052185]
[-90.30607605 196.39135742]
[-77.36699677 188.80319214]
[-64.42791748 181.21504211]
[-51.48883438 173.62687683]
[-47.28466415 167.49330139]
[-38.20751190 166.01899719]
[-25.11633301 158.69635010]
[-12.02515793 151.37370300]
[-7.69674778 145.32716370]
[1.40859175 144.03831482]
[14.64641571 136.98423767]
[27.88423920 129.93016052]
[41.12206268 122.87608337]
[54.35988617 115.82200623]
[67.59770966 108.76792908]
[67.09727478 93.35201263]
[73.54367065 79.33970642]
[85.57585907 69.68945312]
[100.65345001 66.43874359]
[104.28887177 51.88595200]
[107.92430115 37.33316422]
[111.55972290 22.78037453]
[115.19515228 8.22758579]
[105.92000580 -6.57050037]
[110.10523987 -23.17889214]
[124.69986725 -31.48083115]
[128.03767395 -46.10475159]
[131.37548828 -60.72866821]
[134.71330261 -75.35258484]
[121.92874146 -85.37091827]
[114.80529785 -99.90314484]
[114.71810913 -116.02906799]
[121.63402557 -130.53265381]
[134.12826538 -140.54341125]
[149.67768860 -144.10446167]
[152.71650696 -158.79341125]
[141.36288452 -169.04246521]
[136.69454956 -183.50286865]
[139.86990356 -198.26034546]
[149.93829346 -209.37266541]
[164.12149048 -213.92266846]
[167.16030884 -228.61163330]
[155.28956604 -238.27311707]
[149.27914429 -252.34910583]
[150.51016235 -267.60501099]
[158.69976807 -280.53518677]
[171.96603394 -288.16833496]
[187.26046753 -288.75042725]
[201.06852722 -282.14767456]
[210.21722412 -269.87738037]
[212.60424805 -254.75917053]
[207.68107605 -240.26707458]
[196.57902527 -229.73126221]
[181.84925842 -225.57281494]
[178.81045532 -210.88385010]
[190.02412415 -201.07981873]
[194.85699463 -186.88476562]
[191.91633606 -172.07873535]
[181.89367676 -160.65756226]
[167.40545654 -155.75460815]
[164.36665344 -141.06564331]
[175.81137085 -133.16911316]
[183.39659119 -121.46398163]
[185.94461060 -107.70659637]
[183.03660583 -93.97643280]
[175.08099365 -82.36169434]
[163.25640869 -74.64180756]
[149.33721924 -72.01477051]
[145.99940491 -57.39085388]
[142.66159058 -42.76693726]
[139.32377625 -28.14301872]
[147.65437317 -18.26719856]
[148.77380371 -5.19994164]
[142.04739380 6.28542757]
[129.74794006 11.86301136]
[126.11251068 26.41580009]
[122.47708893 40.96858978]
[118.84165955 55.52138138]
[115.20623779 70.07416534]
[129.28422546 79.73268890]
[137.43147278 95.86093903]
[136.79704285 114.91689301]
[149.73611450 122.50505829]
[162.67520142 130.09321594]
[175.61428833 137.68138123]
[188.55335999 145.26953125]
[201.49244690 152.85769653]
[213.59365845 143.65829468]
[228.29545593 139.79492188]
[243.35591125 141.85670471]
[256.47842407 149.52926636]
[265.66189575 161.64256287]
[269.50595093 176.34942627]
[267.42434692 191.40716553]
[259.73452759 204.51957703]
[247.60914612 213.68711853]
[232.89724731 217.51179504]
[217.84225464 215.41038513]
[204.73997498 207.70333862]
[195.58839417 195.56590271]
[191.78306580 180.84898376]
[193.90428162 165.79678345]
[180.96519470 158.20861816]
[168.02612305 150.62045288]
[155.08703613 143.03230286]
[142.14796448 135.44413757]
[129.20887756 127.85597229]
[117.01988983 136.59832764]
[120.05870056 151.28727722]
[134.78846741 155.44573975]
[145.89051819 165.98153687]
[150.81367493 180.47363281]
[148.42665100 195.59185791]
[139.27796936 207.86215210]
[125.46990204 214.46488953]
[110.17546844 213.88279724]
[96.90920258 206.24964905]
[88.71960449 193.31948853]
[87.48858643 178.06356812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[4 49]
[5 48]
[6 47]
[7 46]
[8 45]
[9 44]
[10 42]
[11 41]
[12 40]
[13 38]
[14 37]
[15 36]
[16 35]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[53 113]
[54 112]
[55 111]
[56 110]
[57 109]
[60 105]
[61 104]
[62 103]
[63 102]
[69 95]
[70 94]
[75 89]
[76 88]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
