%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUCUAACGGCCAGGCCCAGCCGCUUGAGGCUCCCCAACGGCCAGGCCGCGCCCCCGCGUGCGUGCGCGGCCCGGCAGAGCCGUGCGGGCGCCCGCGUACUCACUAGCUGAGGUGGCAGUGGUUCCACCAAC\
) } def
/len { sequence length } bind def

/coor [
[80.61383057 106.27374268]
[65.78510284 108.53402710]
[50.95637512 110.79431152]
[47.26400375 125.51308441]
[38.24203491 137.66409302]
[25.29027557 145.41429138]
[10.39836121 147.60939026]
[-4.15987492 143.94570923]
[-16.17358398 135.01171875]
[-23.83064651 122.19381714]
[-38.65937424 124.45410156]
[-53.48809814 126.71438599]
[-68.31682587 128.97467041]
[-83.14555359 131.23495483]
[-95.62224579 140.96339417]
[-109.37009430 135.23226929]
[-124.19882202 137.49255371]
[-139.02754211 139.75283813]
[-153.85627747 142.01312256]
[-170.76933289 158.83734131]
[-192.39663696 150.57601929]
[-206.76647949 154.87806702]
[-221.13632202 159.18011475]
[-235.50616455 163.48216248]
[-242.78532410 177.51031494]
[-257.87689209 182.20285034]
[-271.82733154 174.77577209]
[-276.36004639 159.63543701]
[-268.78588867 145.76432800]
[-253.59846497 141.39193726]
[-239.80821228 149.11231995]
[-225.43836975 144.81027222]
[-211.06852722 140.50822449]
[-196.69868469 136.20617676]
[-195.28179932 129.60150146]
[-191.82220459 123.73931122]
[-186.64678955 119.23822784]
[-180.26542664 116.58521271]
[-173.32070923 116.08302307]
[-166.52328491 117.81599426]
[-160.57922363 121.63803864]
[-156.11656189 127.18439484]
[-141.28784180 124.92411041]
[-126.45910645 122.66382599]
[-111.63038635 120.40353394]
[-100.21433258 110.83676910]
[-85.40583801 116.40622711]
[-70.57711029 114.14594269]
[-55.74838638 111.88565826]
[-40.91965866 109.62537384]
[-26.09093285 107.36508942]
[-22.60043716 92.84800720]
[-13.79400539 80.74047852]
[-0.98841643 72.90583038]
[13.88120842 70.56449127]
[28.55381584 74.10401917]
[40.78623199 83.01530457]
[48.69609070 95.96559143]
[63.52481461 93.70530701]
[78.35353851 91.44501495]
[104.50185394 74.59129333]
[114.66783142 63.56165695]
[124.83380890 52.53202438]
[128.49732971 37.14081573]
[142.81231689 33.02615356]
[152.97828674 21.99651909]
[163.14427185 10.96688461]
[173.31025696 -0.06275085]
[183.47622681 -11.09238625]
[193.64221191 -22.12202072]
[203.80819702 -33.15165710]
[213.97416687 -44.18128967]
[224.01112366 -55.32846451]
[233.78598022 -66.70616913]
[243.42779541 -78.19683075]
[246.37126160 -93.74182129]
[260.47930908 -98.51803589]
[270.12112427 -110.00870514]
[279.76293945 -121.49936676]
[278.13601685 -137.21969604]
[288.16622925 -149.43321228]
[303.90289307 -150.89385986]
[316.00967407 -140.73504639]
[317.30386353 -124.98384094]
[307.01760864 -112.98513794]
[291.25360107 -111.85755157]
[281.61178589 -100.36688995]
[271.96997070 -88.87622070]
[269.71615601 -74.15312195]
[254.91847229 -68.55502319]
[245.27665710 -57.06435394]
[243.36950684 -49.85237885]
[235.27432251 -45.42188263]
[233.19989014 -38.25624084]
[225.00379944 -34.01531219]
[214.83782959 -22.98567581]
[204.67184448 -11.95604134]
[194.50585938 -0.92640597]
[184.33988953 10.10322952]
[174.17390442 21.13286400]
[164.00791931 32.16249847]
[153.84194946 43.19213486]
[150.90557861 57.79442978]
[135.86344910 62.69800186]
[125.69746399 73.72763824]
[115.53148651 84.75727081]
[127.44174957 75.63884735]
[142.44152832 75.71899414]
[154.25367737 84.96417236]
[157.93498230 99.50542450]
[151.94488525 113.25746918]
[138.79016113 120.46530914]
[123.97581482 118.11256409]
[113.70092010 107.18268585]
[121.94355011 119.71500397]
[130.18618774 132.24731445]
[138.42881775 144.77963257]
[146.67146301 157.31195068]
[162.17741394 157.89933777]
[174.35589600 167.51516724]
[178.52403259 182.46194458]
[173.07910156 196.99234009]
[160.11477661 205.51910400]
[144.61610413 204.76354980]
[132.54264832 195.01617432]
[128.53689575 180.02505493]
[134.13914490 165.55458069]
[125.89650726 153.02226257]
[117.65386963 140.48995972]
[109.41123199 127.95763397]
[101.16860199 115.42531586]
[99.91802979 130.37309265]
[87.00808716 138.01072693]
[73.30488586 131.90969849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[16 45]
[17 44]
[18 43]
[19 42]
[21 34]
[22 33]
[23 32]
[24 31]
[61 106]
[62 105]
[63 104]
[65 102]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[71 96]
[72 95]
[73 93]
[74 91]
[75 90]
[77 88]
[78 87]
[79 86]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
