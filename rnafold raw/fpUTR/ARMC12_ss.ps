%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUUCUGGUUCCGGAAGGCCCCCCACAGGUGCCUUGGGCCUAGCUCUCACCUGGGCCCAGGGCAACACUGAAGAC\
) } def
/len { sequence length } bind def

/coor [
[84.65040588 137.46104431]
[72.70130920 129.89517212]
[70.34582520 145.29287720]
[58.05623245 154.26063538]
[43.39138412 151.92015076]
[31.39974403 160.93128967]
[19.40810204 169.94241333]
[7.41646051 178.95355225]
[-4.57518101 187.96469116]
[-10.50181198 203.25543213]
[-26.74656105 205.50047302]
[-36.59822083 192.39028931]
[-29.92225075 177.41152954]
[-13.58631516 175.97303772]
[-1.59467340 166.96191406]
[10.39696789 157.95077515]
[22.38860893 148.93963623]
[34.38024902 139.92851257]
[36.21219635 125.19149780]
[48.24505615 115.88209534]
[63.69017410 117.90353394]
[59.61053085 102.76238251]
[61.59070969 87.20677948]
[69.33361816 73.57060242]
[81.67754364 63.89975739]
[96.77046967 59.64519501]
[112.34794617 61.44525528]
[126.07279968 69.02986908]
[137.69186401 59.54318619]
[149.31094360 50.05650330]
[160.73663330 40.33777237]
[171.96429443 30.39093399]
[182.98937988 20.22001839]
[193.80741882 9.82915306]
[204.62544250 -0.56171215]
[215.44348145 -10.95257759]
[226.26152039 -21.34344292]
[237.07955933 -31.73430824]
[247.89759827 -42.12517166]
[258.71563721 -52.51603699]
[269.53366089 -62.90690231]
[280.35171509 -73.29776764]
[291.16973877 -83.68863678]
[301.98779297 -94.07949829]
[312.80581665 -104.47036743]
[311.57641602 -120.05954742]
[320.69723511 -132.76170349]
[335.86169434 -136.57926941]
[349.90957642 -129.70970154]
[356.20791626 -115.39659882]
[351.78283691 -100.39817810]
[338.72372437 -91.79622650]
[323.19668579 -93.65232849]
[312.37863159 -83.26146698]
[301.56060791 -72.87059784]
[290.74258423 -62.47973251]
[279.92453003 -52.08886719]
[269.10650635 -41.69800186]
[258.28845215 -31.30713654]
[247.47042847 -20.91627121]
[236.65238953 -10.52540588]
[225.83435059 -0.13454075]
[215.01631165 10.25632477]
[204.19827271 20.64719009]
[193.38024902 31.03805542]
[190.66404724 38.13798523]
[181.91113281 41.61859512]
[170.68347168 51.56543350]
[167.68359375 58.55023575]
[158.79762268 61.67557907]
[147.17855835 71.16226196]
[135.55947876 80.64894104]
[140.04589844 94.06144714]
[139.64492798 108.19872284]
[134.40553284 121.33539581]
[124.96714020 131.86819458]
[112.48164368 138.51167297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[28 72]
[29 71]
[30 70]
[31 68]
[32 67]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
