%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAUAAGUAGAUGCAACACCUCAUUUAUACCUCCUUAUCUCAUACAGAAGAGCUAAGAUUGGCAGAAAUGAUUUCACAGAAGCCACUUGCUUGGAGCAGACUACC\
) } def
/len { sequence length } bind def

/coor [
[101.38053131 319.87536621]
[89.41238403 329.61019897]
[74.07855988 331.30648804]
[60.27202606 324.42294312]
[52.39839554 311.15609741]
[52.97011566 295.73931885]
[61.80475235 283.09207153]
[76.08320618 277.25006104]
[78.71202087 262.48220825]
[81.34083557 247.71435547]
[83.96965027 232.94650269]
[77.07226562 216.88362122]
[88.84946442 202.82397461]
[91.04360962 187.98532104]
[93.23776245 173.14666748]
[84.18100739 161.37760925]
[86.19480896 146.29783630]
[98.60069275 136.87808228]
[78.26365662 128.11245728]
[67.28325653 109.84732056]
[68.94979095 89.43762207]
[81.67118835 74.46949005]
[76.08386230 60.54893494]
[70.49653625 46.62838364]
[64.90921021 32.70782852]
[59.32188797 18.78727531]
[53.73456192 4.86672211]
[38.82859039 0.97850841]
[29.18304062 -10.80354309]
[28.33474541 -25.82833481]
[36.39978027 -38.32206345]
[30.81245804 -52.24261475]
[14.65611553 -58.74933243]
[8.25627232 -74.58686066]
[15.08301353 -89.87826538]
[9.08943844 -103.62879944]
[3.09586406 -117.37932587]
[-2.89771032 -131.12985229]
[-15.50466633 -140.68888855]
[-13.49732494 -155.44761658]
[-19.49089813 -169.19815063]
[-25.48447418 -182.94866943]
[-40.66519928 -186.16197205]
[-51.03290939 -197.70710754]
[-52.60101700 -213.14474487]
[-44.76654434 -226.53878784]
[-30.54201126 -232.73898315]
[-15.39703846 -229.36119080]
[-5.15517807 -217.70426941]
[-3.75463390 -202.25053406]
[-11.73394394 -188.94224548]
[-5.74036932 -175.19172668]
[0.25320509 -161.44119263]
[12.43146038 -152.86567688]
[10.85281944 -137.12342834]
[16.84639359 -123.37290192]
[22.83996773 -109.62236786]
[28.83354187 -95.87184143]
[41.45161057 -92.84185028]
[50.11248016 -82.91716003]
[51.44554138 -69.61590576]
[44.73300934 -57.82994080]
[50.32033539 -43.90938568]
[64.78509521 -40.45849609]
[74.55982971 -29.01652718]
[75.73657990 -13.83533382]
[67.65511322 -0.72060221]
[73.24243927 13.19995117]
[78.82976532 27.12050438]
[84.41709137 41.04105759]
[90.00441742 54.96161270]
[95.59173584 68.88216400]
[103.37620544 68.14141083]
[111.25194550 69.35495758]
[118.72702789 72.52055359]
[125.31690979 77.51194000]
[130.57566833 84.08257294]
[134.12586975 91.87718964]
[135.68487549 100.45075989]
[135.08613586 109.29381561]
[132.29357910 117.86270142]
[146.13061523 123.65377045]
[159.96765137 129.44483948]
[173.80467224 135.23591614]
[189.13458252 130.50585938]
[202.30905151 139.66082764]
[203.22172546 155.67790222]
[191.17251587 166.27015686]
[175.40452576 163.31211853]
[168.01361084 149.07295227]
[154.17657471 143.28187561]
[140.33953857 137.49079895]
[126.50251007 131.69973755]
[113.43934631 139.07223511]
[122.58820343 151.67922974]
[120.15164185 166.69648743]
[108.07641602 175.34082031]
[105.88226318 190.17947388]
[103.68811798 205.01812744]
[110.77391052 215.91885376]
[108.53787994 228.31719971]
[98.73750305 235.57531738]
[96.10868835 250.34317017]
[93.47987366 265.11102295]
[90.85105896 279.87887573]
[102.23641968 290.28930664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 105]
[9 104]
[10 103]
[11 102]
[13 99]
[14 98]
[15 97]
[18 94]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[31 63]
[32 62]
[35 58]
[36 57]
[37 56]
[38 55]
[40 53]
[41 52]
[42 51]
[81 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
