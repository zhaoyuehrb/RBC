%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGUGUGGAGGGGCAACCCAUCCCUUCAGACAAUUGGGAGGUGAGGGCCGAUUGCCUUACACGGUGAGACAAGCGGCCUGACUCGUGACUAUUUUUUUGGACAAAUCAGGCAGCCACUGACUCCCUUCAUU\
) } def
/len { sequence length } bind def

/coor [
[19.96946335 225.20840454]
[10.28082180 226.64245605]
[0.54710257 225.69175720]
[-8.65426445 222.41957092]
[-16.77909660 217.02670288]
[-28.44366074 226.45739746]
[-34.31065369 241.15055847]
[-49.07239532 243.13554382]
[-60.73696136 252.56623840]
[-72.40151978 261.99691772]
[-84.06608582 271.42761230]
[-95.73065186 280.85830688]
[-107.39521027 290.28900146]
[-119.05977631 299.71969604]
[-130.72433472 309.15039062]
[-130.82855225 324.78762817]
[-140.99913025 336.66589355]
[-156.43383789 339.17666626]
[-169.84486389 331.13439941]
[-174.89996338 316.33642578]
[-169.21223450 301.76986694]
[-155.46728516 294.31265259]
[-140.15502930 297.48583984]
[-128.49046326 288.05514526]
[-116.82590485 278.62445068]
[-105.16133881 269.19375610]
[-93.49678040 259.76306152]
[-81.83221436 250.33236694]
[-70.16765594 240.90167236]
[-58.50308990 231.47097778]
[-53.47042465 217.45236206]
[-37.87435150 214.79283142]
[-26.20979118 205.36213684]
[-31.05983162 185.31857300]
[-25.27560425 165.44960022]
[-10.32168388 151.04161072]
[9.88783646 145.96501160]
[30.01366615 151.63464355]
[39.98073959 140.42494202]
[49.94781113 129.21522522]
[59.91488266 118.00553131]
[69.88195801 106.79582214]
[70.23359680 91.79994202]
[60.80289841 80.13538361]
[51.37220764 68.47081757]
[41.94151306 56.80625534]
[32.51082230 45.14169312]
[23.08012772 33.47713089]
[7.59121513 34.41157913]
[-5.47068977 26.03504753]
[-11.08301735 11.56848526]
[-7.08771276 -3.42541933]
[4.97894716 -13.18120384]
[20.47708511 -13.94757080]
[33.44735336 -5.42983675]
[38.90241623 9.09675694]
[34.74468994 24.04643822]
[44.17538452 35.71099854]
[53.60607529 47.37556458]
[63.03676987 59.04012680]
[72.46746063 70.70468903]
[81.89815521 82.36925507]
[99.78024292 78.11153412]
[112.99810791 86.82138062]
[126.95508575 81.32568359]
[140.91206360 75.82997894]
[154.86904907 70.33428192]
[168.82601929 64.83857727]
[155.83802795 57.33445740]
[151.75148010 42.90185165]
[158.87736511 29.70254707]
[173.18592834 25.20088577]
[186.58554077 31.94260406]
[191.49855042 46.11519241]
[185.14582825 59.70464706]
[199.73547363 56.22006607]
[211.36070251 45.48858261]
[225.53720093 50.05759811]
[240.12684631 46.57301712]
[254.71649170 43.08843613]
[269.30615234 39.60385895]
[283.89578247 36.11927795]
[298.48541260 32.63469696]
[302.66763306 21.38730431]
[311.69689941 13.66784763]
[323.22158813 11.33287621]
[334.31384277 14.85616589]
[342.21347046 23.23817444]
[356.95040894 20.44127274]
[369.06585693 10.26648426]
[383.01263428 15.49496460]
[397.74957275 12.69806385]
[412.48651123 9.90116310]
[421.17379761 -3.30134916]
[436.66891479 -6.41221523]
[449.77883911 2.41418648]
[452.72570801 17.94130898]
[443.76119995 30.95718384]
[428.20376587 33.73972702]
[415.28341675 24.63810158]
[400.54647827 27.43500137]
[385.80953979 30.23190308]
[374.74816895 40.20663834]
[359.74731445 35.17821121]
[345.01037598 37.97511292]
[335.72528076 53.67255402]
[317.62646484 57.76055908]
[301.97000122 47.22433853]
[287.38037109 50.70891953]
[272.79071045 54.19350052]
[258.20108032 57.67808151]
[243.61143494 61.16266251]
[229.02178955 64.64723969]
[218.44010925 75.12948608]
[203.22006226 70.80970764]
[188.63041687 74.29428864]
[174.32173157 78.79556274]
[160.36474609 84.29125977]
[146.40776062 89.78695679]
[132.45079041 95.28266144]
[118.49380493 100.77835846]
[107.33354187 120.62455750]
[81.09165955 116.76289368]
[71.12458801 127.97260284]
[61.15751648 139.18229675]
[51.19044113 150.39201355]
[41.22336960 161.60171509]
[46.23730469 170.14680481]
[49.03140640 179.63735962]
[49.44630051 189.50781250]
[47.46419525 199.17163086]
[43.20951843 208.05625916]
[36.94113159 215.63699341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[6 32]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[38 127]
[39 126]
[40 125]
[41 124]
[42 123]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[64 121]
[65 120]
[66 119]
[67 118]
[68 117]
[75 116]
[76 115]
[78 113]
[79 112]
[80 111]
[81 110]
[82 109]
[83 108]
[88 105]
[89 104]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
