%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGAGGCAACCUGAAGGAGGAGCUCUCAUUACCUUCUGCCCAUCACUUAAUAAAUAGCCAGCCAAUUCAUCAACAUUCUGGUACACUGUUGGAGAG\
) } def
/len { sequence length } bind def

/coor [
[164.16865540 145.70805359]
[151.17828369 138.20805359]
[138.18789673 130.70805359]
[125.19751740 123.20804596]
[112.20713806 115.70804596]
[88.21948242 121.10508728]
[71.71884918 96.93227386]
[56.72073746 97.17026520]
[41.72262573 97.40825653]
[26.72451401 97.64624786]
[22.73932266 100.27450562]
[18.54464912 101.26856995]
[14.72011852 100.78183746]
[11.72414017 99.15240479]
[9.84094143 96.84197998]
[-5.06663513 95.17941284]
[-19.97421265 93.51683807]
[-34.88179016 91.85426331]
[-49.78936768 90.19168854]
[-63.93663025 102.57109070]
[-82.34532928 100.89894867]
[-93.63960266 86.66535187]
[-108.62261200 85.95162964]
[-122.94287872 93.94299316]
[-136.88313293 85.30577850]
[-136.10282898 68.92520905]
[-121.40467834 61.65220642]
[-107.90888214 70.96862030]
[-92.92587280 71.68234253]
[-86.20004272 62.20302200]
[-75.58787537 57.17263031]
[-63.75051117 57.98359299]
[-53.72091675 64.54677582]
[-48.12679291 75.28411102]
[-33.21921539 76.94668579]
[-18.31163979 78.60926056]
[-3.40406227 80.27183533]
[11.50351429 81.93440247]
[26.48652458 82.64813232]
[41.48463821 82.41014099]
[56.48274994 82.17215729]
[71.48085785 81.93416595]
[57.65818405 76.10890961]
[52.63595581 61.97465134]
[59.68391800 48.73357010]
[74.21346283 45.00632858]
[86.76506042 53.21957016]
[89.16705322 68.02558899]
[92.93427277 53.50635910]
[82.97009277 41.61120224]
[81.93429565 26.12873650]
[90.22515106 13.01228523]
[104.65467072 7.30539322]
[119.67440033 11.20247555]
[129.50895691 23.20502472]
[130.37673950 38.69781494]
[121.94408417 51.72355270]
[107.45350647 57.27357864]
[103.68628693 71.79280853]
[119.21372986 85.33582306]
[119.70713806 102.71766663]
[132.69750977 110.21766663]
[145.68789673 117.71766663]
[158.67828369 125.21766663]
[171.66865540 132.71766663]
[184.30101013 127.73672485]
[197.29211426 130.95230103]
[205.88726807 140.95390320]
[207.07647705 153.89108276]
[219.82235718 161.79946899]
[235.62802124 162.50068665]
[242.36340332 175.78540039]
[255.10928345 183.69378662]
[267.85516357 191.60217285]
[280.60104370 199.51055908]
[293.34692383 207.41893005]
[306.09280396 215.32731628]
[319.24942017 207.50669861]
[334.53405762 206.70765686]
[348.43441772 213.11380005]
[357.75628662 225.25305176]
[360.35760498 240.33587646]
[355.64056396 254.89637756]
[344.68911743 265.58865356]
[330.01983643 269.95568848]
[315.00363159 266.99395752]
[303.09109497 257.38409424]
[297.01962280 243.33432007]
[298.18441772 228.07319641]
[285.43853760 220.16481018]
[272.69265747 212.25643921]
[259.94677734 204.34805298]
[247.20089722 196.43966675]
[234.45501709 188.53129578]
[219.56103516 188.39572144]
[211.91397095 174.54534912]
[199.16809082 166.63696289]
[183.06752014 171.19828796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[7 42]
[8 41]
[9 40]
[10 39]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[22 29]
[23 28]
[48 59]
[49 58]
[69 97]
[70 96]
[72 94]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
