%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCGCCGCCGGGUCCCGCUCGUCUGCCGCCUCAGCCUCAGCCCCAACCUCAGCCGCCGCCGUUGCGCUUGCUCCCGGGCGGUCCUGGCCUGUGCCGCCGCCGCCCCCAGCGUCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[106.49818420 107.82674408]
[98.82512665 110.61563873]
[91.14380646 106.83690643]
[76.18854523 105.67927551]
[61.83240128 112.32846832]
[49.74021530 103.63201141]
[34.78495407 102.47438049]
[20.42881012 109.12356567]
[8.33662605 100.42710876]
[-6.61863661 99.26947784]
[-22.96767807 107.62190247]
[-37.08400726 97.28188324]
[-52.06411743 96.50969696]
[-67.04422760 95.73751831]
[-82.02433777 94.96533203]
[-92.42347717 108.23313904]
[-108.51049805 112.68666840]
[-123.94330597 106.77404785]
[-132.75823975 92.99048615]
[-147.75326538 92.60427094]
[-162.74829102 92.21804810]
[-179.87809753 102.69467926]
[-196.01881409 92.17503357]
[-204.63484192 95.55723572]
[-211.40377808 92.37313080]
[-226.40377808 92.37313080]
[-241.40377808 92.37313080]
[-252.40046692 103.72426605]
[-268.20388794 103.89135742]
[-279.43811035 92.77527618]
[-279.43811035 76.97098541]
[-268.20388794 65.85489655]
[-252.40046692 66.02198792]
[-241.40377808 77.37313080]
[-226.40377808 77.37313080]
[-211.40377808 77.37313080]
[-196.40502930 77.18000031]
[-189.95713806 69.06716156]
[-179.87809753 65.83649445]
[-169.49023438 68.81059265]
[-162.36207581 77.22302246]
[-147.36705017 77.60923767]
[-132.37202454 77.99546051]
[-125.22100067 66.64397430]
[-113.28493500 60.28390884]
[-99.65742493 60.68577957]
[-87.93147278 67.85143280]
[-81.25215912 79.98522186]
[-66.27204895 80.75740814]
[-51.29193497 81.52958679]
[-36.31182480 82.30176544]
[-27.05226135 74.40311432]
[-14.49315071 74.99823761]
[-5.46100473 84.31421661]
[9.49425793 85.47184753]
[22.78070068 78.73986053]
[35.94258499 87.51911926]
[50.89784622 88.67675018]
[64.18428802 81.94475555]
[77.34617615 90.72401428]
[92.30143738 91.88164520]
[107.27036285 92.84663391]
[122.26539612 93.23284912]
[137.26539612 93.23284912]
[152.26539612 93.23284912]
[166.06556702 85.49555206]
[178.79283142 93.23284912]
[193.79283142 93.23284912]
[203.51701355 84.64172363]
[216.08459473 85.01763153]
[224.70695496 93.60733032]
[239.70198059 93.99355316]
[254.69700623 94.37976837]
[269.69204712 94.76599121]
[278.38153076 84.38220215]
[291.28671265 80.98587799]
[303.59622192 85.60974121]
[310.85482788 96.33906555]
[325.83493042 97.11124420]
[340.81503296 97.88343048]
[355.79516602 98.65560913]
[370.77526855 99.42778778]
[385.75537109 100.19997406]
[400.73550415 100.97215271]
[412.41470337 90.66516113]
[427.59567261 91.66165924]
[437.34982300 102.85951233]
[452.32992554 103.63169861]
[467.31005859 104.40387726]
[482.29016113 105.17605591]
[496.64147949 97.24062347]
[510.54794312 105.93215942]
[509.70373535 122.30956268]
[494.97732544 129.52516174]
[481.51797485 120.15617371]
[466.53787231 119.38398743]
[451.55773926 118.61180878]
[436.57763672 117.83962250]
[425.72378540 127.97519684]
[410.52084351 127.40548706]
[399.96331787 115.95226288]
[384.98321533 115.18008423]
[370.00308228 114.40789795]
[355.02297974 113.63571930]
[340.04287720 112.86354065]
[325.06274414 112.09135437]
[310.08264160 111.31917572]
[298.14999390 123.09400940]
[281.05566406 122.64396667]
[269.30581665 109.76101685]
[254.31079102 109.37479401]
[239.31576538 108.98857880]
[224.32073975 108.60236359]
[209.44851685 117.82211304]
[193.79283142 108.23284912]
[178.79283142 108.23284912]
[166.06556702 115.97015381]
[152.26539612 108.23284912]
[137.26539612 108.23284912]
[122.26539612 108.23284912]
[118.24225616 111.00280762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[3 61]
[4 60]
[6 58]
[7 57]
[9 55]
[10 54]
[12 51]
[13 50]
[14 49]
[15 48]
[19 43]
[20 42]
[21 41]
[23 37]
[25 36]
[26 35]
[27 34]
[63 120]
[64 119]
[65 118]
[67 116]
[68 115]
[71 113]
[72 112]
[73 111]
[74 110]
[78 107]
[79 106]
[80 105]
[81 104]
[82 103]
[83 102]
[84 101]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
