%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCGCUCCCCAAGUCUCUCUCGUGCGCAGAGCCCAGGCUGCGCUUCCCUGGUCAGGCACGGCACGUCUGGCCGGCCGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[180.20329285 140.05677795]
[166.77778625 132.87283325]
[160.07928467 119.00068665]
[145.34078979 116.21201324]
[130.60229492 113.42333984]
[115.86380005 110.63466644]
[103.83318329 118.70996857]
[89.59626770 116.01619720]
[81.34752655 104.10383606]
[66.60903168 101.31515503]
[55.30551529 111.78114319]
[40.18347168 113.56359863]
[27.06662941 106.18711853]
[20.88255882 92.66324615]
[11.61512566 94.15749359]
[5.64964294 89.48488617]
[-8.97427559 86.14707184]
[-23.59819412 82.80925751]
[-38.22211456 79.47144318]
[-52.90588760 76.40766144]
[-65.82117462 85.51650238]
[-81.38013458 82.74264526]
[-90.35191345 69.73177338]
[-87.41371155 54.20300674]
[-74.30871582 45.36928940]
[-58.81188583 48.47150421]
[-50.11721420 61.66916656]
[-42.78093719 59.77197647]
[-34.88430023 64.84752655]
[-20.26037979 68.18534088]
[-5.63646173 71.52315521]
[8.98745728 74.86096954]
[23.67123222 77.92474365]
[34.36864853 67.59501648]
[49.27370453 65.52056885]
[62.69921112 72.70451355]
[69.39770508 86.57666016]
[84.13619995 89.36533356]
[96.16681671 81.29003143]
[110.40373230 83.98380280]
[118.65247345 95.89616394]
[133.39097595 98.68484497]
[148.12947083 101.47351837]
[162.86796570 104.26219177]
[174.17147827 93.79621124]
[189.29351807 92.01374817]
[202.41036987 99.39022827]
[208.59443665 112.91410828]
[223.33293152 115.70278168]
[238.07142639 118.49145508]
[252.80992126 121.28012848]
[267.54843140 124.06880188]
[282.28692627 126.85747528]
[289.03024292 124.92521667]
[294.78442383 126.61582184]
[298.00445557 130.44490051]
[312.49334717 134.32717896]
[326.98223877 138.20947266]
[336.33541870 137.41195679]
[341.93502808 142.51730347]
[356.26861572 146.93862915]
[370.60220337 151.35995483]
[384.93579102 155.78128052]
[397.97274780 147.14575195]
[413.50448608 148.96188354]
[424.19747925 160.37216187]
[425.00274658 175.98899841]
[415.54013062 188.43859863]
[400.27752686 191.84263611]
[386.42153931 184.59385681]
[380.51446533 170.11486816]
[366.18087769 165.69354248]
[351.84729004 161.27221680]
[337.51370239 156.85089111]
[323.09994507 152.69836426]
[308.61105347 148.81607056]
[294.12216187 144.93379211]
[279.49826050 141.59597778]
[264.75976562 138.80729675]
[250.02125549 136.01863098]
[235.28276062 133.22994995]
[220.54426575 130.44126892]
[205.80575562 127.65260315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 44]
[4 43]
[5 42]
[6 41]
[9 38]
[10 37]
[14 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 27]
[48 83]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[56 77]
[57 76]
[58 75]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
