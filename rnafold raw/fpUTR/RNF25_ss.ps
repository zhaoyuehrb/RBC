%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACGACGCUAGCUGCCCACCCCUCUUAGUUUUCCGCCUCCGACUUCCCUAAGGGCAUUUCCGGUUCCGGCUGCGGGCCGGUGAAGAU\
) } def
/len { sequence length } bind def

/coor [
[92.99554443 188.96694946]
[78.64676666 193.33874512]
[63.64733887 193.20765686]
[49.37716675 188.58572388]
[37.14906311 179.89817810]
[28.08797836 167.94424438]
[23.02750778 153.82362366]
[22.43319893 138.83540344]
[26.35972786 124.35844421]
[34.44586182 111.72458649]
[45.94770432 102.09610748]
[59.80711746 96.35880280]
[74.74907684 95.04048157]
[89.40070343 98.26310730]
[80.49847412 86.19039917]
[71.59624481 74.11769104]
[62.69401169 62.04497910]
[53.79178238 49.97227097]
[40.68860245 54.45267868]
[26.86857414 55.00324249]
[13.48347950 51.58780289]
[1.64608300 44.50033188]
[-7.66238642 34.33965302]
[-13.67356968 21.95885849]
[-15.89539337 8.39368820]
[-14.15233994 -5.22411776]
[-8.59927082 -17.76123810]
[0.29227948 -28.17709160]
[-7.73617935 -40.84768295]
[-15.76463795 -53.51827240]
[-23.79309654 -66.18886566]
[-39.13545609 -65.47637177]
[-52.77119446 -72.54476929]
[-61.03236771 -85.49268341]
[-61.69676590 -100.83719635]
[-54.58566284 -114.45071411]
[-41.61191559 -122.67126465]
[-26.26539230 -123.28755951]
[-12.67423344 -116.13381958]
[-4.49439144 -103.13436890]
[-3.92620254 -87.78598785]
[-11.12250710 -74.21732330]
[-3.09404826 -61.54673004]
[4.93441057 -48.87614059]
[12.96286964 -36.20555115]
[28.76673889 -40.04289627]
[44.96326447 -38.31605148]
[59.64827347 -31.21089363]
[71.08950043 -19.54660606]
[77.93094635 -4.68128347]
[79.35354614 11.64619160]
[75.17322540 27.51955032]
[65.86448669 41.07004166]
[74.76671600 53.14274979]
[83.66895294 65.21545410]
[92.57118225 77.28816986]
[101.47341156 89.36087799]
[113.70134735 98.04865265]
[128.03121948 102.48202515]
[143.50169373 99.16914368]
[153.37355042 110.32242584]
[167.70341492 114.75579834]
[182.03329468 119.18917847]
[196.36315918 123.62255096]
[210.69302368 128.05592346]
[220.04611206 127.61522675]
[225.44538879 132.90689087]
[239.60987854 137.84321594]
[253.77435303 142.77955627]
[269.77371216 139.18060303]
[280.68975830 151.41874695]
[275.29296875 166.90444946]
[259.13513184 169.70733643]
[248.83802795 156.94404602]
[234.67353821 152.00770569]
[220.50904846 147.07138062]
[206.25965881 142.38578796]
[191.92977905 137.95242310]
[177.59991455 133.51904297]
[163.27005005 129.08567810]
[148.94017029 124.65229797]
[134.49467468 128.28228760]
[123.59784698 116.81189728]
[109.26797485 112.37852478]
[117.13205719 125.15178680]
[120.80495453 139.69515991]
[119.94876099 154.67071533]
[114.64225769 168.70071411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[28 45]
[29 44]
[30 43]
[31 42]
[58 84]
[59 83]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
