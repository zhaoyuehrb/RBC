%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCCCAGCCCCGGACAGCGCAGGCUGCGGCUUUUCGUCCUCCACUGAGUCCUGCCGGUGGCCCGAGCCCGGUGGCCUCCCGGCGACCCUCGGCGCGAGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[11.53437424 190.33555603]
[1.97895217 197.88009644]
[-9.54961109 201.68373108]
[-21.64864540 201.30892944]
[-32.85469437 196.82499695]
[-41.82053375 188.79682922]
[-55.29384995 195.38998413]
[-68.66893005 202.18020630]
[-81.94289398 209.16604614]
[-95.21685028 216.15188599]
[-108.49081421 223.13772583]
[-121.76477051 230.12358093]
[-131.12913513 245.89331055]
[-148.56994629 244.70649719]
[-161.63310242 252.07901001]
[-167.30465698 267.08612061]
[-182.61743164 271.87133789]
[-195.82478333 262.76388550]
[-196.79515076 246.75021362]
[-184.78416443 236.11462402]
[-169.00561523 239.01585388]
[-155.94245911 231.64334106]
[-152.34069824 219.99192810]
[-141.38314819 213.77497864]
[-128.75061035 216.84960938]
[-115.47665405 209.86376953]
[-102.20269012 202.87792969]
[-88.92873383 195.89208984]
[-75.65477753 188.90625000]
[-71.13025665 182.91160583]
[-61.88700485 181.91665649]
[-48.41368866 175.32350159]
[-48.10545349 157.38212585]
[-38.81534576 141.93278503]
[-22.96683121 133.16769409]
[-4.77589607 133.51393127]
[10.87039757 142.96195984]
[23.71149635 135.20915222]
[36.55259323 127.45632935]
[40.71749878 121.20648193]
[49.88642883 119.67079163]
[62.94958878 112.29827881]
[76.01274872 104.92577362]
[89.07590485 97.55326843]
[102.02943420 89.98979187]
[109.84432983 76.23341370]
[124.73886871 76.27896118]
[137.57997131 68.52613831]
[150.42106628 60.77332306]
[163.26216125 53.02050781]
[176.10325623 45.26768875]
[177.54426575 29.93048859]
[187.62219238 18.51607704]
[202.31512451 15.26308918]
[215.94302368 21.21442223]
[228.78411865 13.46160316]
[241.62521362 5.70878553]
[254.46630859 -2.04403234]
[267.30740356 -9.79685020]
[280.14849854 -17.54966927]
[288.57125854 -33.84178925]
[306.05163574 -33.68059158]
[318.65960693 -41.80703735]
[331.26757812 -49.93348312]
[343.87554932 -58.05992889]
[356.36288452 -66.37058258]
[357.68527222 -81.95214844]
[368.75051880 -93.00177765]
[384.33395386 -94.30216217]
[397.07751465 -85.23931122]
[400.96414185 -70.09241486]
[394.15863037 -56.01338577]
[379.87435913 -49.64990234]
[364.85592651 -54.00661087]
[361.06500244 -47.52310944]
[352.00201416 -45.45196152]
[339.39404297 -37.32551575]
[326.78607178 -29.19906807]
[314.17810059 -21.07262230]
[311.26635742 -9.22991657]
[300.69253540 -2.38060808]
[287.90133667 -4.70857000]
[275.06024170 3.04424810]
[262.21911621 10.79706573]
[249.37803650 18.54988480]
[236.53694153 26.30270195]
[223.69583130 34.05551910]
[222.61552429 48.88693619]
[212.89402771 60.37416840]
[198.09954834 63.97648239]
[183.85607910 58.10878754]
[171.01498413 65.86160278]
[158.17388916 73.61442566]
[145.33277893 81.36724091]
[132.49168396 89.12005615]
[125.59526825 102.32189941]
[109.78224945 102.83088684]
[104.96573639 109.46573639]
[96.44841766 110.61642456]
[83.38525391 117.98893738]
[70.32209778 125.36144257]
[57.25893784 132.73394775]
[44.30541229 140.29742432]
[31.46431351 148.05024719]
[18.62321472 155.80307007]
[20.41585350 167.95130920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[14 22]
[15 21]
[37 105]
[38 104]
[39 103]
[41 102]
[42 101]
[43 100]
[44 99]
[45 97]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[62 79]
[63 78]
[64 77]
[65 76]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
