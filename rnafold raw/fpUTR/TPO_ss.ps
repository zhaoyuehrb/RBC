%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGCAAUUAAGGCGCCCAUUUCAGAAGAGUUACAGCCGUGAAAAUUACUCAGCAGUGCAGUUGGCUGAGAAGAGGAAAAAAGGUCAGA\
) } def
/len { sequence length } bind def

/coor [
[65.15451050 423.63711548]
[52.94037628 414.06661987]
[48.71672440 399.13543701]
[54.10763168 384.58489990]
[67.04018402 376.01000977]
[67.55229950 361.01876831]
[68.06442261 346.02749634]
[55.53295517 341.92645264]
[44.51888275 334.65267944]
[35.80894089 324.71704102]
[30.02758217 312.82089233]
[27.59219742 299.80651855]
[28.68298721 286.59747314]
[33.22964859 274.13311768]
[40.91586304 263.30178833]
[51.20128632 254.87738037]
[63.35954285 249.46426392]
[76.52951050 247.45373535]
[78.57200623 232.59344482]
[80.36049652 217.70043945]
[73.96530914 204.24864197]
[83.07330322 191.31207275]
[84.60726929 176.39071655]
[86.14122772 161.46936035]
[87.67519379 146.54800415]
[89.20915222 131.62663269]
[90.74311829 116.70527649]
[81.68061066 105.39965057]
[83.16236877 90.98609924]
[94.33552551 81.76075745]
[95.86948395 66.83940125]
[89.58401489 52.32032776]
[98.58229065 40.45103073]
[99.86127472 25.50565720]
[100.88491058 10.54062462]
[101.90854645 -4.42440653]
[95.13104248 -18.72041893]
[103.71884918 -30.89000893]
[104.74248505 -45.85504150]
[94.95484924 -63.31534958]
[105.93431854 -79.07833862]
[105.93431854 -94.07833862]
[105.93431854 -109.07833862]
[105.93431854 -124.07833862]
[99.88797760 -139.91746521]
[113.43431854 -150.11222839]
[126.98065186 -139.91746521]
[120.93431854 -124.07833862]
[120.93431854 -109.07833862]
[120.93431854 -94.07833862]
[120.93431854 -79.07833862]
[128.95382690 -72.33963013]
[131.89067078 -62.05358505]
[128.50036621 -51.67391586]
[119.70751190 -44.83140564]
[118.68387604 -29.86637306]
[125.53459930 -16.64075851]
[116.87358093 -3.40077043]
[115.84994507 11.56426144]
[114.82630920 26.52929306]
[117.56834412 33.56418610]
[113.50365448 41.98499298]
[119.89884186 55.43678665]
[110.79084778 68.37335968]
[109.25688171 83.29472351]
[118.31938934 94.60034943]
[116.83763123 109.01390076]
[105.66447449 118.23924255]
[104.13051605 133.16059875]
[102.59654999 148.08195496]
[101.06259155 163.00332642]
[99.52862549 177.92468262]
[97.99466705 192.84603882]
[104.28013611 207.36511230]
[95.28186035 219.23440552]
[97.54827118 228.30607605]
[93.43229675 234.63594055]
[91.38980103 249.49623108]
[106.61159515 257.08096313]
[118.39093781 269.31457520]
[125.37473297 284.76846313]
[126.76859283 301.64562988]
[122.42712402 317.98937988]
[112.86889648 331.91033936]
[99.21461487 341.80484009]
[83.05567169 346.53961182]
[82.54355621 361.53088379]
[82.03144073 376.52212524]
[94.34867859 385.95956421]
[98.73405457 400.84405518]
[93.50131226 415.45220947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 88]
[6 87]
[7 86]
[18 78]
[19 77]
[20 75]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[30 65]
[31 64]
[33 62]
[34 60]
[35 59]
[36 58]
[38 56]
[39 55]
[41 51]
[42 50]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
