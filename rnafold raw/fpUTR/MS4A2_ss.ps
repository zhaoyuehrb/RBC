%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCAUUUCAACUGCCUAUUCAGAGCAUGCAGUAAGAGGAAAUCCACCAAGUCUCAAUAUAAUAAUAUUCUUUAUUCCUGGACAGCUCGGUUAAUGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[70.75939178 358.88311768]
[55.53988266 361.40701294]
[41.38095856 355.28097534]
[32.80068588 342.45977783]
[32.53699493 327.03466797]
[40.67403412 313.92773438]
[54.61529922 307.32131958]
[56.44081497 292.43280029]
[58.26633453 277.54431152]
[60.09185028 262.65582275]
[61.91736984 247.76730347]
[50.91465378 237.76339722]
[47.87649536 223.02455139]
[54.17328644 209.16079712]
[67.58106995 201.57543945]
[69.40658569 186.68695068]
[71.23210907 171.79844666]
[58.18297958 179.19575500]
[43.65287781 175.47068787]
[35.77224350 162.70764160]
[38.95075607 148.04826355]
[51.40985107 139.69537354]
[66.17793274 142.32287598]
[74.99126434 154.46002197]
[79.49578857 140.15235901]
[84.00031281 125.84469604]
[88.50484467 111.53703308]
[84.39267731 95.34667969]
[96.69960022 84.05167389]
[92.99285126 68.67082214]
[103.89048004 58.51745224]
[107.95658875 44.07907104]
[112.02268982 29.64069176]
[101.39095306 16.59080696]
[100.57716370 -0.05671876]
[109.70284271 -13.80618382]
[125.04933167 -19.40879250]
[128.67323303 -33.96445847]
[132.29711914 -48.52012253]
[135.92102051 -63.07578659]
[139.54492188 -77.63145447]
[143.16880798 -92.18711853]
[129.72361755 -98.98229218]
[118.12792206 -108.59934235]
[108.96335602 -120.55587006]
[102.68962860 -134.25215149]
[99.62140656 -149.00117493]
[99.91260529 -164.06314087]
[103.54860687 -178.68255615]
[110.34703827 -192.12609863]
[119.96689606 -203.71946716]
[131.92564392 -212.88113403]
[145.62344360 -219.15155029]
[160.37321472 -222.21618652]
[175.43510437 -221.92134094]
[190.05363464 -218.28179932]
[203.49554443 -211.48010254]
[215.08657837 -201.85743713]
[224.24534607 -189.89646912]
[230.51243591 -176.19715881]
[233.57351685 -161.44665527]
[233.27500916 -146.38482666]
[229.63192749 -131.76716614]
[222.82698059 -118.32691956]
[213.20150757 -106.73821259]
[201.23831177 -97.58235168]
[187.53749084 -91.31857300]
[172.78622437 -88.26107788]
[157.72447205 -88.56322479]
[154.10058594 -74.00756073]
[150.47668457 -59.45189285]
[146.85278320 -44.89622879]
[143.22889709 -30.34056282]
[139.60499573 -15.78489780]
[149.15484619 -6.32129717]
[152.76858521 6.74153900]
[149.38655090 19.97860909]
[139.79820251 29.86328125]
[126.46106720 33.70679474]
[122.39496613 48.14517593]
[118.32886505 62.58355331]
[122.32644653 76.93167877]
[111.13797760 88.11777496]
[116.23493195 98.70822906]
[112.87681580 109.97143555]
[102.81250763 116.04155731]
[98.30797577 130.34922791]
[93.80345154 144.65689087]
[89.29892731 158.96455383]
[86.12060547 173.62396240]
[84.29508972 188.51246643]
[82.46957397 203.40097046]
[93.64762115 214.00083923]
[96.40850067 228.97518921]
[89.89953613 242.54342651]
[76.80587006 249.59281921]
[74.98035431 264.48132324]
[73.15483856 279.36984253]
[71.32931519 294.25833130]
[69.50379944 309.14682007]
[81.43602753 318.92565918]
[86.16548157 333.61019897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[15 92]
[16 91]
[17 90]
[24 89]
[25 88]
[26 87]
[27 86]
[29 83]
[31 81]
[32 80]
[33 79]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
