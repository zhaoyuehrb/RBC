%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCUCUGGGCCCCAGGGAGGAGGCUCAGCACAGAGAGUGGAAAACAGCAGAGGUGACAGAGCAGCCGUGCUCGAAGCGUUCCUGGAGCCCAAGCUCUCCUCCACAGGUGAAGACAGGGCCAGCAGGAGACACC\
) } def
/len { sequence length } bind def

/coor [
[242.85459900 281.75033569]
[254.83674622 272.72656250]
[269.83151245 272.29138184]
[258.74636841 262.18594360]
[247.66123962 252.08050537]
[236.57611084 241.97506714]
[229.44987488 239.77381897]
[225.35507202 231.50590515]
[214.50631714 221.14712524]
[203.65754700 210.78834534]
[192.80879211 200.42956543]
[181.96003723 190.07078552]
[167.41175842 186.87751770]
[162.77403259 171.75131226]
[151.92527771 161.39253235]
[141.07650757 151.03375244]
[130.22775269 140.67497253]
[119.37898254 130.31619263]
[108.53022766 119.95740509]
[97.68146515 109.59862518]
[85.50559998 100.83800507]
[72.23616791 93.84356689]
[57.30740356 98.28987122]
[43.94994736 91.00749207]
[39.80307770 76.74779510]
[26.53364372 69.75335693]
[13.26421070 62.75891876]
[-0.00522185 55.76448059]
[-15.82112312 56.17415619]
[-23.47216415 43.39484406]
[-36.82149506 36.55413055]
[-50.24894714 29.86805534]
[-63.67639542 23.18198013]
[-75.16712189 33.09353256]
[-89.53842926 37.83785629]
[-104.59059143 36.72156525]
[-118.03219604 29.94581604]
[-127.82897949 18.57093620]
[-132.51165771 4.35060024]
[-131.39624023 -10.53849411]
[-144.82368469 -17.22456932]
[-160.43080139 -13.51007462]
[-172.97648621 -23.50934029]
[-172.83676147 -39.55178452]
[-160.11882019 -49.33102036]
[-144.57876587 -45.34524918]
[-138.13760376 -30.65201759]
[-124.71015930 -23.96594238]
[-113.50059509 -33.82875061]
[-99.33058167 -38.66156006]
[-84.34934998 -37.69845581]
[-70.84181213 -31.05512238]
[-60.88003540 -19.71595573]
[-56.00543976 -5.38831234]
[-56.99031830 9.75453091]
[-43.56287003 16.44060707]
[-30.13541985 23.12668228]
[-22.67883301 23.29371262]
[-16.47772789 30.12541199]
[-1.61094439 29.21544647]
[6.98921537 42.49504852]
[20.25864792 49.48948669]
[33.52807999 56.48392105]
[46.79751205 63.47835922]
[60.90527725 58.84084320]
[74.46200562 65.74517059]
[79.23060608 80.57413483]
[92.50003815 87.56857300]
[99.46182251 84.77866364]
[113.38539124 79.19886017]
[120.34717560 76.40895081]
[125.11404419 62.18654251]
[129.88092041 47.96413040]
[129.18154907 31.02461433]
[145.26547241 25.66326141]
[154.86976624 39.63443756]
[144.10333252 52.73100281]
[139.33645630 66.95341492]
[134.56958008 81.17581940]
[122.49543762 92.38407898]
[108.04024506 98.74986267]
[118.88900757 109.10864258]
[129.73776245 119.46743011]
[140.58653259 129.82620239]
[151.43528748 140.18499756]
[162.28405762 150.54377747]
[173.13281250 160.90255737]
[188.45706177 164.83674622]
[192.31881714 179.22201538]
[203.16757202 189.58081055]
[214.01634216 199.93959045]
[224.86509705 210.29837036]
[235.71386719 220.65715027]
[246.68153381 230.88993835]
[257.76666260 240.99537659]
[268.85180664 251.10081482]
[279.93695068 261.20623779]
[291.90719604 270.24575806]
[304.66046143 278.14224243]
[317.41372681 286.03872681]
[330.16696167 293.93521118]
[342.92022705 301.83169556]
[358.72653198 302.51815796]
[365.47430420 315.79660034]
[376.01162720 312.67529297]
[386.30139160 315.85275269]
[392.96502686 324.02990723]
[393.95721436 334.30990601]
[406.33218384 342.78695679]
[418.70712280 351.26400757]
[432.88241577 345.17593384]
[448.09512329 347.74057007]
[459.49090576 358.13958740]
[463.43344116 373.05465698]
[458.66467285 387.72650146]
[446.70626831 397.47332764]
[431.37417603 399.18496704]
[417.56072998 392.31527710]
[409.67382812 379.05630493]
[410.23007202 363.63897705]
[397.85513306 355.16192627]
[385.48016357 346.68487549]
[366.19662476 346.70724487]
[357.57781982 328.54983521]
[342.68371582 328.42819214]
[335.02374268 314.58496094]
[322.27047729 306.68847656]
[309.51724243 298.79199219]
[296.76397705 290.89550781]
[284.01071167 282.99902344]
[287.69570923 297.53933716]
[282.29614258 311.53378296]
[269.79968262 319.83068848]
[254.80657959 319.37579346]
[242.83612061 310.33654785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[8 93]
[9 92]
[10 91]
[11 90]
[12 89]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[21 68]
[22 67]
[25 64]
[26 63]
[27 62]
[28 61]
[30 59]
[31 57]
[32 56]
[33 55]
[40 48]
[41 47]
[71 79]
[72 78]
[73 77]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[104 124]
[108 122]
[109 121]
[110 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
