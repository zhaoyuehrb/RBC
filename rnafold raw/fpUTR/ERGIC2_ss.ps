%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCUUUUGUUCUCGCGAUAUUUCCGGGUACGCGGGAGCCCCGGCGACCCGGGCUUCUGUGAAACAUGGCGGUAGGCUGGGACCAUAACACAAGCAUGACUAUAUGAAGGAAGAGGAAGGUUUUCCUGAAG\
) } def
/len { sequence length } bind def

/coor [
[77.06420135 121.36135101]
[88.85036469 112.07999420]
[74.76838684 117.24699402]
[60.68641281 122.41400146]
[46.60443497 127.58100128]
[32.52245712 132.74800110]
[18.44048119 137.91500854]
[14.10663891 152.69757080]
[2.04039884 161.98515320]
[-13.00308514 162.38211060]
[-25.24912262 153.94572449]
[-39.33110046 159.11273193]
[-53.41307831 164.27973938]
[-67.49505615 169.44674683]
[-81.57703400 174.61373901]
[-95.65901184 179.78074646]
[-109.74098969 184.94775391]
[-123.82295990 190.11474609]
[-137.90493774 195.28175354]
[-144.96298218 201.22996521]
[-152.37805176 200.40058899]
[-166.57728577 205.23605347]
[-180.77651978 210.07151794]
[-194.97576904 214.90698242]
[-205.36338806 227.59672546]
[-221.50088501 224.67898560]
[-226.78738403 209.15528870]
[-215.78459167 196.99508667]
[-199.81123352 200.70774841]
[-185.61198425 195.87228394]
[-171.41275024 191.03681946]
[-157.21351624 186.20135498]
[-143.07194519 181.19978333]
[-128.98995972 176.03277588]
[-114.90798950 170.86576843]
[-100.82601166 165.69876099]
[-86.74403381 160.53176880]
[-72.66205597 155.36476135]
[-58.58008194 150.19775391]
[-44.49810410 145.03076172]
[-30.41612625 139.86375427]
[-26.53265381 125.50907898]
[-14.80246544 116.08216858]
[0.40720823 115.36158752]
[13.27347851 123.83303070]
[27.35545540 118.66602325]
[41.43743134 113.49902344]
[55.51940918 108.33202362]
[69.60138702 103.16501617]
[83.68336487 97.99801636]
[92.27100372 85.69953918]
[92.27100372 70.69953918]
[84.53369904 56.89936829]
[92.27100372 44.17209625]
[92.27100372 29.17209435]
[92.27100372 14.17209435]
[92.27100372 -0.82790518]
[92.27100372 -15.82790565]
[92.09516907 -30.82687378]
[91.74353027 -45.82275391]
[91.39189148 -60.81863022]
[91.04025269 -75.81450653]
[78.20021820 -84.52731323]
[72.96534729 -99.13470459]
[77.34856415 -114.01983643]
[89.66442871 -123.45906830]
[105.17723846 -123.82282257]
[117.92200470 -114.97123718]
[122.99810028 -100.30792236]
[118.45366669 -85.47122192]
[106.03613281 -76.16614532]
[106.38777161 -61.17026901]
[106.73941040 -46.17439270]
[107.09104919 -31.17851257]
[110.42391205 -24.50294495]
[107.27100372 -15.82790565]
[107.27100372 -0.82790518]
[107.27100372 14.17209435]
[107.27100372 29.17209435]
[107.27100372 44.17209625]
[115.00830078 56.89936829]
[107.27100372 70.69953918]
[107.27100372 85.69953918]
[114.46237946 72.53579712]
[121.65376282 59.37206268]
[124.74798584 44.69467163]
[131.06701660 31.09063148]
[140.28643799 19.25837708]
[151.93292236 9.80537319]
[165.40855408 3.21693826]
[180.02148438 -0.16867757]
[195.02146912 -0.17765711]
[209.63844299 3.19046068]
[223.12194824 9.76275635]
[234.77975464 19.20180893]
[244.01333618 31.02301788]
[250.34864807 44.61948013]
[253.46043396 59.29315948]
[253.18893433 74.29070282]
[249.54809570 88.84213257]
[242.72482300 102.20039368]
[233.06944275 113.67966461]
[221.07765198 122.69058990]
[207.36509705 128.77056885]
[192.63580322 131.60743713]
[177.64596558 131.05555725]
[163.16514587 127.14327240]
[149.93908691 120.07299805]
[136.07058716 114.35769653]
[122.20208740 108.64239502]
[131.63278198 120.30695343]
[141.06347656 131.97151184]
[150.49417114 143.63607788]
[159.92486572 155.30064392]
[169.35556030 166.96520996]
[178.78623962 178.62977600]
[194.52708435 180.04460144]
[204.59281921 192.22886658]
[203.01164246 207.95385742]
[190.72163391 217.89022827]
[175.01423645 216.14288330]
[165.20837402 203.74850464]
[167.12168884 188.06047058]
[157.69099426 176.39590454]
[148.26029968 164.73133850]
[138.82960510 153.06677246]
[129.39891052 141.40220642]
[119.96821594 129.73765564]
[110.53752899 118.07308197]
[115.88555908 132.08731079]
[110.45552063 146.06996155]
[97.05094147 152.80177307]
[82.59263611 148.80708313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[21 32]
[22 31]
[23 30]
[24 29]
[51 83]
[52 82]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[59 74]
[60 73]
[61 72]
[62 71]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
