%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGGAACCUGCUGCCUUAGAGCCAGGCCUCUUCCCGGGGGAGGGGCGUUUGCCCGUUGCCAGGUGCCCGGGUUCCGGCCCUGGCACUAGCGACGGCC\
) } def
/len { sequence length } bind def

/coor [
[77.38315582 131.52714539]
[66.44862366 141.79534912]
[55.51409912 152.06355286]
[44.57956696 162.33175659]
[50.81861115 176.12860107]
[52.23729706 191.20394897]
[48.68172836 205.92253113]
[40.53759384 218.68778992]
[28.68830299 228.11505127]
[14.41918373 233.18168640]
[-0.72196037 233.33815002]
[-15.09273052 228.56742859]
[-27.13429260 219.38705444]
[-35.54046631 206.79280090]
[-39.39941788 192.15083313]
[-38.29255295 177.04939270]
[-32.33993530 163.12657166]
[-22.18726349 151.89260864]
[-8.93582249 144.56607056]
[5.97697210 141.94171143]
[20.93349075 144.30418396]
[34.31136322 151.39723206]
[45.24589157 141.12902832]
[56.18041992 130.86080933]
[67.11495209 120.59260559]
[61.72990036 106.39386749]
[62.20689392 91.21574402]
[68.47286224 77.38315582]
[58.20465469 66.44862366]
[47.93644714 55.51409912]
[37.66824341 44.57956696]
[27.40003586 33.64503860]
[17.13182831 22.71051025]
[6.86362219 11.77598000]
[-3.40458417 0.84145087]
[-13.67279053 -10.09307861]
[-28.92301559 -17.50030518]
[-26.02694893 -34.20507050]
[-9.17330170 -36.04652023]
[-2.73826146 -20.36128426]
[7.52994537 -9.42675591]
[17.79815102 1.50777364]
[28.06635857 12.44230270]
[38.33456421 23.37683296]
[48.60277176 34.31136322]
[58.87097931 45.24589157]
[69.13918304 56.18041992]
[79.40739441 67.11495209]
[89.50298309 62.64635468]
[100.44845581 61.20204926]
[111.35761261 62.89896774]
[121.34722137 67.59971619]
[129.60847473 74.92371368]
[135.47253418 84.27798462]
[138.46458435 94.90515900]
[153.43499756 95.84701538]
[168.40539551 96.78887177]
[183.37579346 97.73072815]
[198.34619141 98.67259216]
[213.31658936 99.61444855]
[228.28698730 100.55630493]
[238.56843567 92.57467651]
[251.12368774 93.77662659]
[259.17163086 102.95815277]
[274.10504150 104.36977386]
[289.03848267 105.78140259]
[303.97192383 107.19302368]
[318.90533447 108.60465240]
[333.83877563 110.01627350]
[348.30584717 103.61202240]
[360.24847412 112.51272583]
[375.18191528 113.92435455]
[390.11535645 115.33597565]
[405.04876709 116.74760437]
[419.72610474 109.43269348]
[433.24844360 118.71056366]
[431.70513916 135.03692627]
[416.68383789 141.61663818]
[403.63714600 131.68103027]
[388.70370483 130.26940918]
[373.77029419 128.85778809]
[358.83685303 127.44615936]
[345.43792725 133.95138550]
[332.42715454 124.94970703]
[317.49371338 123.53807831]
[302.56027222 122.12645721]
[287.62686157 120.71482849]
[272.69342041 119.30320740]
[257.76000977 117.89157867]
[242.32888794 126.08490753]
[227.34513855 115.52670288]
[212.37474060 114.58484650]
[197.40434265 113.64299011]
[182.43392944 112.70113373]
[167.46353149 111.75927734]
[152.49313354 110.81741333]
[137.52273560 109.87555695]
[128.61929321 126.19958496]
[113.14321136 136.50668335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[60 92]
[61 91]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
