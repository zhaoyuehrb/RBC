%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUGCGUCAUAGCGCGCGUCUGUUUGGAUGUGGAAGCCGAGACCUAAAGUUGGGGGGUGAUCUCUGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[132.01921082 179.74523926]
[117.38882446 176.43592834]
[104.88022614 168.15734863]
[96.11653137 155.98370361]
[92.23490143 141.49464417]
[93.73878479 126.57105255]
[81.31114197 134.97067261]
[68.88349915 143.37030029]
[56.45585251 151.76991272]
[49.77130127 166.74485779]
[33.43454742 168.17398071]
[24.25143623 154.58712769]
[31.66877174 139.96128845]
[48.05623245 139.34226990]
[60.48387527 130.94264221]
[72.91152191 122.54302979]
[85.33916473 114.14340210]
[85.33916473 99.14340210]
[72.91152191 90.74378204]
[60.48387527 82.34416199]
[48.05623245 73.94454193]
[35.62858582 65.54491425]
[23.20094109 57.14529419]
[6.81348133 56.52627945]
[-0.60385299 41.90044022]
[8.57925606 28.31358719]
[24.91601372 29.74271011]
[31.60056305 44.71765137]
[44.02820969 53.11727142]
[56.45585251 61.51689529]
[68.88349915 69.91651917]
[81.31114197 78.31613922]
[93.73878479 86.71575928]
[108.72527313 87.35237885]
[121.82048035 80.03695679]
[134.91569519 72.72152710]
[143.79698181 56.75223923]
[161.20570374 57.33890533]
[173.97863770 49.47429657]
[186.75158691 41.60968781]
[187.24977112 29.37419510]
[193.65254211 19.07896996]
[204.19258118 13.33826637]
[216.07109070 13.53974152]
[226.20050049 19.51091576]
[239.59439087 12.75785828]
[243.00036621 -2.50429296]
[255.45117188 -11.96534538]
[271.06790161 -11.15807819]
[282.47683716 -0.46365890]
[284.29098511 15.06833458]
[275.65380859 28.10416985]
[260.64346313 32.48872375]
[246.34744263 26.15174675]
[232.95355225 32.90480423]
[228.53204346 50.43595123]
[212.57955933 59.58768082]
[194.61619568 54.38262558]
[181.84324646 62.24723434]
[169.07031250 70.11183929]
[165.86711121 81.97130585]
[155.03153992 88.57502747]
[142.23112488 85.81674194]
[129.13591003 93.13216400]
[116.04069519 100.44758606]
[130.54449463 96.62140656]
[145.46302795 98.18259430]
[158.86048889 104.92857361]
[168.99842834 115.98399353]
[174.56134033 129.91430664]
[174.82742310 144.91195679]
[169.76213074 159.03083801]
[160.02272034 170.43890381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[9 14]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[34 65]
[35 64]
[36 63]
[38 60]
[39 59]
[40 58]
[45 55]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
