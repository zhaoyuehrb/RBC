%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCGCCCCCGGGGCGGGCCCAGUGCGUGGCAGCGGGACCUGCGGCCCCGUCGCGAAGUUUCCAGCCCUGCGAGCGCCGCCGGGUCGGCCGAUCGUCCCCCAUACCUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[55.24841309 272.37142944]
[42.81807709 280.76708984]
[28.42215729 276.55313110]
[22.48111534 262.77926636]
[13.93399525 275.10592651]
[5.38687420 287.43258667]
[-3.16024661 299.75924683]
[-11.70736790 312.08593750]
[-20.25448799 324.41259766]
[-24.31100655 340.87408447]
[-41.25214005 341.53311157]
[-46.57516861 325.43646240]
[-32.58115387 315.86547852]
[-24.03403473 303.53878784]
[-15.48691368 291.21212769]
[-6.93979311 278.88546753]
[1.60732794 266.55880737]
[10.15444851 254.23213196]
[17.83272362 241.34632874]
[24.60572433 227.96250916]
[31.37872505 214.57870483]
[30.22187424 199.72908020]
[43.35675049 190.90946960]
[50.12975311 177.52566528]
[50.34511185 170.03329468]
[57.27822495 163.87022400]
[56.53098297 148.99438477]
[69.90389252 140.54003906]
[77.04310608 127.34793091]
[84.18231201 114.15582275]
[91.32152557 100.96371460]
[90.61551666 97.83908081]
[91.09796906 94.37868500]
[92.89846802 91.04821014]
[95.96273041 88.35520172]
[100.04206085 86.77701569]
[108.58917999 74.45034790]
[117.13629913 62.12368011]
[125.68341827 49.79701614]
[134.23054504 37.47034836]
[129.27268982 22.88522339]
[133.80073547 8.34733772]
[145.87812805 -0.63045400]
[160.74815369 -0.77337402]
[169.29527283 -13.10004139]
[177.84239197 -25.42670822]
[186.38951111 -37.75337601]
[194.93663025 -50.08004379]
[202.96705627 -62.74938965]
[210.46705627 -75.73976898]
[217.96705627 -88.73014832]
[218.36103821 -95.55563354]
[221.71684265 -100.35800171]
[226.25503540 -102.21316528]
[234.45925903 -114.77066040]
[242.66346741 -127.32816315]
[239.63215637 -142.60719299]
[248.13130188 -155.22540283]
[262.71618652 -158.02114868]
[270.92041016 -170.57864380]
[279.12463379 -183.13613892]
[287.32885742 -195.69363403]
[288.39944458 -211.47857666]
[301.83801270 -217.90151978]
[310.04223633 -230.45901489]
[310.40487671 -246.85415649]
[324.91290283 -254.49934387]
[338.64172363 -245.52984619]
[337.46829224 -229.17274475]
[322.59973145 -222.25479126]
[314.39550781 -209.69729614]
[313.91174316 -194.81054688]
[299.88635254 -187.48941040]
[291.68212891 -174.93191528]
[283.47793579 -162.37442017]
[275.27371216 -149.81692505]
[278.57214355 -135.33741760]
[270.43075562 -122.48545837]
[255.22097778 -119.12393951]
[247.01675415 -106.56643677]
[238.81253052 -94.00894165]
[230.95742798 -81.23014832]
[223.45742798 -68.23976898]
[215.95742798 -55.24938965]
[216.59426880 -51.64747620]
[215.42747498 -47.55440903]
[212.24514771 -43.86481094]
[207.26330566 -41.53292084]
[198.71617126 -29.20625496]
[190.16905212 -16.87958717]
[181.62193298 -4.55292034]
[173.07481384 7.77374697]
[178.15495300 21.74980354]
[173.98193359 36.20836258]
[161.95475769 45.54646301]
[146.55720520 46.01746750]
[138.01008606 58.34413528]
[129.46296692 70.67079926]
[120.91584778 82.99746704]
[112.36872864 95.32413483]
[104.51363373 108.10292816]
[97.37442017 121.29503632]
[90.23520660 134.48713684]
[83.09600067 147.67924500]
[83.33259583 163.49868774]
[70.47032928 171.00944519]
[63.51356506 184.29866028]
[56.74056625 197.68247986]
[57.41296387 213.48937988]
[44.76253891 221.35169983]
[37.98954010 234.73550415]
[31.21653748 248.11932373]
[46.15738297 246.78848267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[19 112]
[20 111]
[21 110]
[23 108]
[24 107]
[26 106]
[28 104]
[29 103]
[30 102]
[31 101]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[44 92]
[45 91]
[46 90]
[47 89]
[48 88]
[49 84]
[50 83]
[51 82]
[54 81]
[55 80]
[56 79]
[59 76]
[60 75]
[61 74]
[62 73]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
