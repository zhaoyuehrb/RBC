%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGAAGUACGGAGAGCCGGGAGGGUCAAUCAUCACCUGAGAGUUGGCUCUUCGCUGGCUGGCUGGUUAAUCAGUGCUCAAAGCUGCCUCCGCCUCCUGACUGGAGAGCGAACUAGCCCGGGCGGAGCCACAGUCCUAGAGGCUGAGCGCAGUCGGAGCUGUCCCAUUUACCCGACCCGACGCCGGCGUG\
) } def
/len { sequence length } bind def

/coor [
[92.67836761 200.83688354]
[91.98094177 215.82066345]
[85.99108124 229.57281494]
[75.49482727 240.28862000]
[61.86962128 246.56187439]
[46.90349197 247.56932068]
[32.56044769 243.17875671]
[20.72273254 233.96633911]
[12.94380856 221.14105225]
[10.24450684 206.38592529]
[12.97905827 191.63728333]
[20.78986740 178.82919312]
[7.56104755 185.90014648]
[-5.66777134 192.97109985]
[-18.89659119 200.04205322]
[-32.12540817 207.11300659]
[-45.35422897 214.18395996]
[-58.58304596 221.25489807]
[-71.81186676 228.32585144]
[-85.04068756 235.39680481]
[-98.26950073 242.46775818]
[-103.05383301 261.96621704]
[-120.35618591 271.53540039]
[-138.83663940 265.41500854]
[-151.70257568 273.12652588]
[-164.56849670 280.83807373]
[-177.43443298 288.54962158]
[-178.66950989 304.01745605]
[-188.78602600 315.78332520]
[-203.89398193 319.32299805]
[-218.18405151 313.27542114]
[-226.16142273 299.96597290]
[-224.75862122 284.51245117]
[-214.51506042 272.85702515]
[-199.36959839 269.48144531]
[-185.14596558 275.68368530]
[-172.28004456 267.97213745]
[-159.41410828 260.26062012]
[-146.54818726 252.54907227]
[-146.82702637 242.26019287]
[-142.77047729 232.71272278]
[-135.05139160 225.66224670]
[-125.02256012 222.43536377]
[-114.47978973 223.68051147]
[-105.34045410 229.23893738]
[-92.11163330 222.16798401]
[-78.88282013 215.09703064]
[-65.65399933 208.02609253]
[-52.42517853 200.95513916]
[-39.19636154 193.88418579]
[-25.96754074 186.81323242]
[-12.73872280 179.74227905]
[0.49009657 172.67132568]
[13.71891594 165.60037231]
[25.98268700 156.96325684]
[37.09695435 146.88987732]
[48.21121979 136.81648254]
[59.32548904 126.74310303]
[70.43975830 116.66971588]
[81.55402374 106.59633636]
[82.41217041 86.09372711]
[102.78963470 74.90184021]
[100.10438538 60.14414597]
[97.41913605 45.38645554]
[94.73387909 30.62876701]
[92.04862976 15.87107754]
[89.36337280 1.11338711]
[86.67812347 -13.64430332]
[83.99286652 -28.40199280]
[75.59608459 -23.72866249]
[64.58744049 -22.91705132]
[52.56986237 -26.93693924]
[41.44415665 -36.14364243]
[33.94415665 -49.13402176]
[26.44415665 -62.12440491]
[18.94415665 -75.11478424]
[3.51375651 -77.65185547]
[-6.63654709 -89.54746246]
[-6.71409035 -105.18485260]
[3.31773996 -117.18053436]
[18.72222137 -119.87051392]
[32.22582626 -111.98466492]
[37.45256805 -97.24644470]
[31.93453789 -82.61478424]
[39.43453979 -69.62440491]
[46.93453979 -56.63402176]
[54.43453979 -43.64364243]
[61.82411957 -44.92585754]
[59.25992203 -59.70505905]
[74.03916168 -62.26903152]
[76.60328674 -47.49028397]
[83.99286652 -48.77249908]
[86.67812347 -63.53018951]
[89.36337280 -78.28787994]
[91.92780304 -93.06704712]
[94.37123108 -107.86669159]
[96.81466675 -122.66634369]
[99.25809479 -137.46598816]
[91.11975098 -151.29158020]
[96.98919678 -166.22239685]
[112.36388397 -170.80479431]
[125.44968414 -161.52354431]
[126.20828247 -145.49844360]
[114.05774689 -135.02256775]
[111.61431885 -120.22290802]
[109.17088318 -105.42326355]
[106.72745514 -90.62361145]
[108.74304199 -83.50050354]
[104.12106323 -75.60262299]
[101.43581390 -60.84493637]
[98.75055695 -46.08724594]
[98.75055695 -31.08724594]
[101.43581390 -16.32955551]
[104.12106323 -1.57186580]
[106.80632019 13.18582439]
[109.49156952 27.94351387]
[112.17681885 42.70120621]
[114.86207581 57.45889282]
[117.54732513 72.21658325]
[128.06680298 82.90960693]
[142.77857971 85.83596039]
[157.49035645 88.76231384]
[172.20213318 91.68866730]
[186.93736267 94.49456787]
[201.69505310 97.17981720]
[216.45274353 99.86507416]
[222.31988525 85.82035065]
[240.29393005 77.73234558]
[255.05162048 75.04708862]
[263.02844238 64.89797211]
[275.38699341 62.97234344]
[285.40890503 69.76438904]
[300.20855713 67.32095337]
[315.00820923 64.87752533]
[329.80786133 62.43408966]
[344.60751343 59.99065781]
[355.08337402 47.84012222]
[371.10848999 48.59872055]
[380.38973999 61.68451691]
[375.80734253 77.05921173]
[360.87652588 82.92864990]
[347.05093384 74.79030609]
[332.25128174 77.23374176]
[317.45162964 79.67716980]
[302.65197754 82.12060547]
[287.85232544 84.56403351]
[274.91656494 96.41278076]
[257.73687744 89.80477905]
[242.97918701 92.49003601]
[241.26487732 107.39175415]
[255.02729797 113.35797882]
[268.78970337 119.32420349]
[282.55212402 125.29043579]
[296.31454468 131.25665283]
[312.53552246 128.84593201]
[322.52050781 141.85487366]
[315.99777222 156.90100098]
[299.67736816 158.50614929]
[290.34832764 145.01907349]
[276.58590698 139.05285645]
[262.82348633 133.08662415]
[249.06106567 127.12039948]
[235.29864502 121.15416718]
[243.61869812 133.63522339]
[244.26020813 148.62150574]
[237.03721619 161.76792908]
[224.04391479 169.26284790]
[209.04753113 168.93324280]
[196.39608765 160.87464905]
[189.75769043 147.42356873]
[191.05705261 132.47994995]
[199.91744995 120.37650299]
[213.76748657 114.62276459]
[199.00979614 111.93750763]
[184.25212097 109.25225830]
[177.09698486 111.15103149]
[169.27578735 106.40045166]
[154.56401062 103.47409058]
[139.85221863 100.54773712]
[125.14044952 97.62138367]
[119.17907715 113.34511566]
[105.53470612 120.75214386]
[91.62740326 117.71060181]
[80.51313782 127.78398895]
[69.39887238 137.85737610]
[58.28460693 147.93075562]
[47.17033768 158.00413513]
[36.05607224 168.07752991]
[50.74494171 165.03825378]
[65.55278015 167.43154907]
[78.53636169 174.94331360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[24 39]
[25 38]
[26 37]
[27 36]
[55 188]
[56 187]
[57 186]
[58 185]
[59 184]
[60 183]
[62 119]
[63 118]
[64 117]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[73 87]
[74 86]
[75 85]
[76 84]
[92 111]
[93 110]
[94 109]
[95 107]
[96 106]
[97 105]
[98 104]
[120 180]
[121 179]
[122 178]
[123 177]
[124 175]
[125 174]
[126 173]
[128 149]
[129 148]
[132 146]
[133 145]
[134 144]
[135 143]
[136 142]
[150 163]
[151 162]
[152 161]
[153 160]
[154 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
