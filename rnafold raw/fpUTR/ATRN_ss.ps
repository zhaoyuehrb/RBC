%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCCCGCCCCGCACGGCCAGGCGAAGCGGAGCCGGCCGUGCGGUGUGUGUGUAUGUGUUCGCGGGGCGCCGUCUCAGCCCCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[157.06663513 138.54997253]
[143.90708923 131.35092163]
[130.74755859 124.15185547]
[117.46571350 117.18100739]
[104.06552887 110.44045258]
[90.55099487 103.93218994]
[74.77970886 105.18799591]
[66.45549011 92.83661652]
[52.83063126 86.56259918]
[39.20577621 80.28858185]
[23.43448830 81.54438782]
[15.11026859 69.19300842]
[1.48541212 62.91899109]
[-12.13944435 56.64497375]
[-25.76430130 50.37095642]
[-39.38915634 44.09693909]
[-53.01401520 37.82292175]
[-66.63887024 31.54890633]
[-80.26372528 25.27488899]
[-93.88858032 19.00087166]
[-107.51343536 12.72685432]
[-116.83492279 11.93901443]
[-121.49451447 5.99392509]
[-134.89469910 -0.74663091]
[-148.29487610 -7.48718691]
[-162.02174377 -0.25167909]
[-177.37510681 -2.49980092]
[-188.45126343 -13.36710358]
[-190.99122620 -28.67488670]
[-184.01831055 -42.53699875]
[-170.21376038 -49.62316895]
[-154.88568115 -47.20862579]
[-143.92807007 -36.22180557]
[-141.55432129 -20.88736916]
[-128.15414429 -14.14681435]
[-114.75395203 -7.40625811]
[-101.23941803 -0.89800179]
[-87.61456299 5.37601519]
[-73.98970795 11.65003204]
[-60.36485291 17.92404938]
[-46.73999786 24.19806671]
[-33.11513901 30.47208405]
[-19.49028397 36.74610138]
[-5.86542749 43.02011871]
[7.75942898 49.29413605]
[21.38428497 55.56814957]
[36.18103409 53.86358643]
[45.47979355 66.66372681]
[59.10464859 72.93774414]
[72.72950745 79.21176147]
[87.52625275 77.50719452]
[96.82501221 90.30733490]
[105.06909943 90.57493591]
[110.80608368 97.04026794]
[124.20626831 103.78082275]
[133.49501038 104.88993835]
[137.94660950 110.99230957]
[151.10615540 118.19137573]
[164.26570129 125.39043427]
[182.55566406 124.45303345]
[191.25175476 139.58946228]
[204.65193176 146.33001709]
[218.05212402 153.07057190]
[233.85736084 152.35987854]
[241.75028992 164.99122620]
[255.15046692 171.73178101]
[268.55065918 178.47233582]
[281.95083618 185.21289062]
[295.35101318 191.95344543]
[308.75122070 198.69400024]
[321.98178101 190.75955200]
[337.40100098 191.26051331]
[350.08868408 200.03700256]
[355.99618530 214.28849792]
[353.23846436 229.46737671]
[342.69549561 240.73013306]
[327.73153687 244.48284912]
[313.12149048 239.52806091]
[303.52737427 227.44680786]
[302.01065063 212.09419250]
[288.61047363 205.35362244]
[275.21029663 198.61306763]
[261.81008911 191.87251282]
[248.40991211 185.13195801]
[235.00973511 178.39140320]
[220.16296387 179.58422852]
[211.31156921 166.47076416]
[197.91137695 159.73019409]
[184.51119995 152.98963928]
[172.79237366 156.49046326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 55]
[5 54]
[6 52]
[8 50]
[9 49]
[10 48]
[12 46]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 36]
[24 35]
[25 34]
[61 89]
[62 88]
[63 87]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
