%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUCGAUGCGCCGCGGCUGCUGCUGCGCAGGCCCAGUGCUGCGCUUCGCGGCAGAGGCGUCUGCGGUGACAGCUCAGUCAGUUGAGCUCUGUGUGCCAGGCGCUCGCGAGGGGGUAGCUCUUCUAGUAGUGCUCGGCGUCAGAC\
) } def
/len { sequence length } bind def

/coor [
[113.39962006 159.53161621]
[101.22888947 168.29936218]
[86.40435028 170.58694458]
[72.15677643 165.89581299]
[61.59119797 155.24833679]
[57.01022720 140.96496582]
[59.41220474 126.15853882]
[68.27366638 114.05587006]
[81.66292572 107.29466248]
[66.90973663 104.58477020]
[52.12843704 102.03268433]
[37.32071304 99.63868713]
[22.51298523 97.24468994]
[7.70525789 94.85069275]
[-6.84399271 98.50025177]
[-18.76864433 107.59984589]
[-30.69329643 116.69944763]
[-42.61794662 125.79904175]
[-54.54259872 134.89863586]
[-60.35594940 150.23281860]
[-76.58364868 152.59796143]
[-86.53202057 139.56101990]
[-79.96704102 124.53328705]
[-63.64219666 122.97399139]
[-51.71754456 113.87439728]
[-39.79289246 104.77479553]
[-27.86824226 95.67519379]
[-15.94359112 86.57559967]
[-17.38393593 71.64491272]
[-30.82815361 64.99261475]
[-44.27237320 58.34032440]
[-57.71659088 51.68803024]
[-71.16080475 45.03573608]
[-84.60502625 38.38344193]
[-98.11956024 31.87518692]
[-111.70286560 25.51171112]
[-126.40631866 30.65429115]
[-140.09107971 24.00732231]
[-144.90312195 9.95813179]
[-158.48643494 3.59465623]
[-172.06973267 -2.76881886]
[-185.65304565 -9.13229370]
[-199.23634338 -15.49576950]
[-212.81965637 -21.85924530]
[-226.40295410 -28.22271919]
[-243.31118774 -29.46689606]
[-246.79629517 -46.05877304]
[-231.81761169 -54.00077057]
[-220.03947449 -41.80602646]
[-206.45617676 -35.44255066]
[-192.87286377 -29.07907486]
[-179.28956604 -22.71559906]
[-165.70625305 -16.35212517]
[-152.12295532 -9.98864937]
[-138.53964233 -3.62517405]
[-124.66526794 -8.92018986]
[-110.79921722 -2.66022062]
[-105.33938599 11.92840672]
[-91.75608063 18.29188156]
[-84.31194305 18.28121758]
[-77.95272827 24.93922615]
[-64.50851440 31.59151840]
[-51.06429672 38.24381256]
[-37.62007904 44.89610672]
[-24.17585945 51.54840088]
[-10.73164272 58.20069504]
[10.09925652 80.04296112]
[24.90698242 82.43695831]
[39.71471024 84.83096313]
[54.52243805 87.22496033]
[61.67819595 85.17301941]
[69.61962891 89.83158875]
[84.37281036 92.54147339]
[97.36319733 85.04147339]
[102.39295197 70.90989685]
[107.42271423 56.77832031]
[112.45247650 42.64673996]
[117.48223877 28.51516342]
[110.47564697 14.34888935]
[115.61738586 -0.59561050]
[129.85694885 -7.45203066]
[144.74624634 -2.15257859]
[151.45173645 12.15867519]
[145.99516296 26.99111748]
[131.61381531 33.54492188]
[126.58405304 47.67650223]
[121.55429077 61.80807877]
[116.52453613 75.93965912]
[111.49477386 90.07123566]
[118.14706421 103.51545715]
[132.43260193 108.08969116]
[146.71812439 112.66392517]
[161.00366211 117.23816681]
[172.85333252 112.02822113]
[184.68759155 116.18375397]
[190.30578613 126.94651794]
[204.49031067 131.82499695]
[218.67481995 136.70346069]
[232.85934448 141.58192444]
[248.42567444 138.75352478]
[257.94461060 150.20948792]
[272.12911987 155.08795166]
[286.31362915 159.96643066]
[300.49816895 164.84489441]
[314.68267822 169.72337341]
[328.86718750 174.60183716]
[343.10302734 179.32846069]
[357.02813721 172.34786987]
[371.45056152 177.19029236]
[378.01965332 190.50878906]
[392.30517578 195.08302307]
[406.59072876 199.65727234]
[420.87625122 204.23150635]
[435.16177368 208.80574036]
[449.44729614 213.37997437]
[465.34988403 209.37498474]
[476.57385254 221.33134460]
[471.57293701 236.94938660]
[455.49166870 240.16259766]
[444.87307739 227.66551208]
[430.58755493 223.09126282]
[416.30200195 218.51702881]
[402.01647949 213.94279480]
[387.73095703 209.36856079]
[373.44543457 204.79432678]
[360.36206055 211.82008362]
[345.80935669 207.38465881]
[338.52877808 193.61399841]
[331.14712524 194.57650757]
[323.98870850 188.78636169]
[309.80419922 183.90788269]
[295.61968994 179.02941895]
[281.43518066 174.15093994]
[267.25064087 169.27247620]
[253.06613159 164.39399719]
[238.51437378 167.57135010]
[227.98086548 155.76644897]
[213.79635620 150.88796997]
[199.61183167 146.00950623]
[185.42732239 141.13104248]
[168.44520569 145.43394470]
[156.42941284 131.52369690]
[142.14389038 126.94945526]
[127.85836029 122.37522125]
[113.57283020 117.80098724]
[120.32637787 131.19462585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 73]
[10 72]
[11 70]
[12 69]
[13 68]
[14 67]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 59]
[36 58]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[90 145]
[91 144]
[92 143]
[93 142]
[96 140]
[97 139]
[98 138]
[99 137]
[101 135]
[102 134]
[103 133]
[104 132]
[105 131]
[106 130]
[107 128]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
