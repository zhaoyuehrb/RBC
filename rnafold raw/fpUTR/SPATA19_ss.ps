%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUUCAAUGACCUUCCUGUCCCAUAGGAGUUCUCAGGCAGCUUCAAUGGAAGGAGGGAGCCAAGAAGGGGGCCUGGUAUACAUUCAAAG\
) } def
/len { sequence length } bind def

/coor [
[261.90576172 341.22659302]
[253.33674622 328.91513062]
[244.76773071 316.60369873]
[236.19869995 304.29223633]
[227.62968445 291.98077393]
[219.06065369 279.66934204]
[210.49163818 267.35787964]
[201.92260742 255.04643250]
[189.95626831 252.54249573]
[182.74208069 242.17669678]
[184.66931152 229.28724670]
[176.52098083 216.69342041]
[158.73922729 209.41839600]
[157.48252869 189.43858337]
[148.50257874 177.42356873]
[139.52262878 165.40855408]
[130.54269409 153.39353943]
[121.56275177 141.37852478]
[112.58280182 129.36351013]
[103.60285950 117.34848785]
[93.44440460 116.46131134]
[85.45717621 110.12210083]
[82.28657532 100.43042755]
[84.98271179 90.59618378]
[76.83438110 78.00234985]
[68.68605804 65.40850830]
[60.53773499 52.81467056]
[46.54502487 45.43126297]
[46.12744904 30.54251099]
[37.97912216 17.94867325]
[29.83079720 5.35483360]
[21.68247223 -7.23900557]
[13.53414631 -19.83284569]
[5.38582039 -32.42668533]
[-2.97404671 -44.88110733]
[-18.03912354 -51.35995483]
[-19.69183540 -67.67561340]
[-6.23201466 -77.04392242]
[8.49402905 -69.82757568]
[9.33740520 -53.45013046]
[15.87659264 -49.68168640]
[17.97966003 -40.57500839]
[26.12798500 -27.98117065]
[34.27630997 -15.38733196]
[42.42463684 -2.79349232]
[50.57296371 9.80034733]
[58.72128677 22.39418602]
[72.13117218 28.87679672]
[73.13156891 44.66634369]
[81.27989960 57.26018143]
[89.42822266 69.85401917]
[97.57655334 82.44786072]
[114.54282379 89.87789917]
[115.61788177 108.36854553]
[124.59782410 120.38356018]
[133.57775879 132.39857483]
[142.55770874 144.41358948]
[151.53765869 156.42860413]
[160.51759338 168.44363403]
[169.49754333 180.45864868]
[180.59123230 181.43434143]
[189.06893921 188.30828857]
[192.18653870 198.53584290]
[189.11482239 208.54508972]
[197.26313782 221.13893127]
[213.79759216 229.02270508]
[214.23405457 246.47740173]
[222.80308533 258.78884888]
[231.37210083 271.10031128]
[239.94113159 283.41177368]
[248.51016235 295.72320557]
[257.07919312 308.03466797]
[265.64819336 320.34613037]
[274.21722412 332.65756226]
[288.61309814 328.04779053]
[303.72817993 327.88775635]
[318.21844482 332.19168091]
[330.79544067 340.57684326]
[340.34078979 352.29766846]
[346.00573730 366.31195068]
[347.28659058 381.37350464]
[344.06945801 396.14312744]
[336.64035034 409.30746460]
[325.65991211 419.69598389]
[312.10449219 426.38491821]
[297.17944336 428.77951050]
[282.21185303 426.66687012]
[268.53268433 420.23477173]
[257.35824585 410.05520630]
[249.68218994 397.03332520]
[246.18702698 382.32702637]
[247.18356323 367.24398804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[4 71]
[5 70]
[6 69]
[7 68]
[8 67]
[11 65]
[12 64]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[24 52]
[25 51]
[26 50]
[27 49]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
