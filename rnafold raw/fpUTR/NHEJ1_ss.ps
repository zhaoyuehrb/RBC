%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGGCCCCGCCCCUGUAUCCCAAGACCCUGCCUCCUCUUGCGGUGGGGGGAAAGCGGCCUCUUACUCUAGGCCUUUCGGUUUGCGCGAGCGGGCAGGAAAGCGUGCGUGCGGCUAAGAGAGUGGGCGCUCUCGCGGCCGCUGACG\
) } def
/len { sequence length } bind def

/coor [
[65.89731598 133.40795898]
[72.13235474 119.76522827]
[85.41512299 112.79357910]
[70.72322083 115.81812286]
[56.03131104 118.84266663]
[41.33940125 121.86721039]
[26.64749527 124.89174652]
[14.69089127 135.25274658]
[0.66491145 130.24064636]
[-8.65248489 145.00613403]
[-25.42887878 148.43218994]
[-39.23528671 138.88510132]
[-53.85920715 142.22291565]
[-68.48312378 145.56072998]
[-83.10704041 148.89854431]
[-94.83950806 159.51268005]
[-108.96939087 154.80145264]
[-123.59330750 158.13926697]
[-138.21722412 161.47708130]
[-152.84114075 164.81489563]
[-164.57360840 175.42903137]
[-178.70349121 170.71780396]
[-193.32740784 174.05561829]
[-207.95132446 177.39343262]
[-222.57524109 180.73124695]
[-237.19915771 184.06906128]
[-241.64953613 198.76905823]
[-252.86465454 209.26271057]
[-267.82766724 212.72731018]
[-282.51364136 208.23088074]
[-292.97210693 196.98292542]
[-296.38977051 182.00912476]
[-291.84732056 167.33731079]
[-280.56665039 156.91416931]
[-265.58221436 153.54344177]
[-250.92471313 158.13185120]
[-240.53697205 169.44514465]
[-225.91305542 166.10733032]
[-211.28913879 162.76951599]
[-196.66522217 159.43170166]
[-182.04130554 156.09388733]
[-171.35484314 145.71849060]
[-156.17895508 150.19097900]
[-141.55503845 146.85316467]
[-126.93112183 143.51535034]
[-112.30720520 140.17753601]
[-101.62074280 129.80213928]
[-86.44485474 134.27462769]
[-71.82093811 130.93681335]
[-57.19701767 127.59899139]
[-42.57310104 124.26117706]
[-37.28594971 112.46561432]
[-25.99064827 105.78837585]
[-12.71863079 106.87413788]
[-2.35963082 115.54873657]
[8.54611015 105.40407562]
[23.62295341 110.19984436]
[38.31486130 107.17530060]
[53.00676727 104.15075684]
[67.69867706 101.12621307]
[82.39057922 98.10167694]
[84.61769867 91.28926086]
[89.35523224 85.92945862]
[95.81770325 82.89441681]
[102.94013977 82.67221832]
[109.55361176 85.28839874]
[120.65777588 75.20388794]
[131.76194763 65.11937714]
[142.86611938 55.03485870]
[147.88029480 40.02923965]
[162.50379944 37.20043564]
[173.60797119 27.11592293]
[184.71214294 17.03140831]
[195.81631470 6.94689560]
[189.79298401 0.88375044]
[186.63815308 -8.68595886]
[187.95698547 -20.32276726]
[193.88183594 -34.10305405]
[199.80667114 -47.88333893]
[192.61082458 -61.76692200]
[196.07312012 -77.01640320]
[208.55876160 -86.43143463]
[224.17240906 -85.56652832]
[235.54177856 -74.83007812]
[237.29859924 -59.29149246]
[228.61335754 -46.28762436]
[213.58695984 -41.95849991]
[207.66212463 -28.17821503]
[201.73727417 -14.39792824]
[212.40039062 -3.84814715]
[226.11659241 -9.91989708]
[239.83277893 -15.99164772]
[249.31990051 -28.65281296]
[264.08981323 -26.72951508]
[277.80599976 -32.80126572]
[291.52218628 -38.87301636]
[301.00930786 -51.53417969]
[315.77920532 -49.61088181]
[325.00439453 -63.16920471]
[341.33663940 -61.68944931]
[347.97473145 -46.69386292]
[338.08999634 -33.60861969]
[321.85095215 -35.89469528]
[313.34490967 -23.66781998]
[297.59393311 -25.15682602]
[283.87774658 -19.08507538]
[270.16156006 -13.01332569]
[261.65551758 -0.78645301]
[245.90452576 -2.27545810]
[232.18833923 3.79629207]
[218.47215271 9.86804199]
[205.90083313 18.05106544]
[194.79666138 28.13557816]
[183.69248962 38.22009277]
[172.58831787 48.30460739]
[168.36839294 62.58891678]
[152.95063782 66.13903046]
[141.84646606 76.22354126]
[130.74229431 86.30805969]
[119.63812256 96.39257050]
[118.35739899 111.33779144]
[127.58390045 123.16453552]
[136.81039429 134.99127197]
[146.03689575 146.81800842]
[155.26339722 158.64474487]
[169.85235596 164.76626587]
[171.58042908 179.56028748]
[180.80693054 191.38702393]
[190.03343201 203.21376038]
[205.42884827 208.86293030]
[207.96725464 225.06442261]
[195.03736877 235.15153503]
[179.94033813 228.74751282]
[178.20669556 212.44026184]
[168.98019409 200.61352539]
[159.75369263 188.78678894]
[145.82467651 183.51118469]
[143.43666077 167.87124634]
[134.21015930 156.04450989]
[124.98366547 144.21777344]
[115.75716400 132.39103699]
[106.53066254 120.56429291]
[112.12548828 134.48184204]
[108.03031158 148.91200256]
[95.95890045 157.81599426]
[80.96295166 157.46763611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 61]
[4 60]
[5 59]
[6 58]
[7 57]
[9 55]
[12 51]
[13 50]
[14 49]
[15 48]
[17 46]
[18 45]
[19 44]
[20 43]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[66 120]
[67 119]
[68 118]
[69 117]
[71 115]
[72 114]
[73 113]
[74 112]
[77 89]
[78 88]
[79 87]
[90 111]
[91 110]
[92 109]
[94 107]
[95 106]
[96 105]
[98 103]
[121 142]
[122 141]
[123 140]
[124 139]
[125 138]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
