%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCGCGCUCGCUCAGCUCCCGCCCGCCUGUGCCGCCUGUGCGGCCGCCGGGAGCCAAGUUUGCGCGGACCCCGUCCCGAGCCCGCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[197.65341187 268.43524170]
[191.62112427 259.32476807]
[189.05714417 248.66339111]
[190.29609680 237.72920227]
[195.21514893 227.84230042]
[185.69924927 216.24714661]
[176.18334961 204.65199280]
[166.66744995 193.05683899]
[157.15155029 181.46168518]
[147.63565063 169.86651611]
[132.83375549 168.66671753]
[123.01809692 157.04313660]
[124.37692261 141.52568054]
[114.86102295 129.93052673]
[105.34512329 118.33537292]
[90.93604279 116.81073761]
[81.74398804 105.61018372]
[83.05971527 91.18052673]
[73.54381561 79.58537292]
[64.02791595 67.99021149]
[54.51202011 56.39505768]
[44.99612045 44.79990005]
[35.48022079 33.20474243]
[25.96432304 21.60958481]
[20.69792557 19.65343666]
[17.18176842 16.14322090]
[15.71961403 12.06635952]
[16.15194511 8.37912655]
[7.81839228 -4.09291744]
[1.78988004 -7.51063156]
[-1.03395343 -12.72655296]
[-0.62096238 -17.66450310]
[-7.76184368 -23.67618561]
[-8.14585114 -31.20490837]
[-15.21680260 -44.43372726]
[-22.28775406 -57.66254425]
[-29.35870361 -70.89136505]
[-36.42965698 -84.12018585]
[-50.63399506 -92.31584167]
[-50.36793518 -108.71282959]
[-35.90518188 -116.44333649]
[-22.12376785 -107.55487061]
[-23.20083618 -91.19113159]
[-16.12988472 -77.96231842]
[-9.05893421 -64.73349762]
[-1.98798335 -51.50467682]
[5.08296776 -38.27585983]
[12.36941910 -25.16450310]
[20.29043579 -12.42647076]
[28.62398911 0.04557329]
[37.55947876 12.09368610]
[47.07537842 23.68884277]
[56.59127808 35.28400040]
[66.10717773 46.87915802]
[75.62307739 58.47431183]
[85.13897705 70.06947327]
[94.65487671 81.66462708]
[109.06395721 83.18926239]
[118.25601196 94.38981628]
[116.94028473 108.81947327]
[126.45618439 120.41462708]
[135.97207642 132.00978088]
[151.45646667 133.70437622]
[160.94175720 145.59907532]
[159.23080444 160.35061646]
[168.74670410 171.94578552]
[178.26260376 183.54093933]
[187.77850342 195.13609314]
[197.29440308 206.73124695]
[206.81030273 218.32640076]
[226.40925598 215.90646362]
[243.52853394 225.46849060]
[251.63015747 243.17245483]
[247.73159790 262.10580444]
[258.67956543 272.35968018]
[269.62753296 282.61358643]
[280.57546997 292.86746216]
[296.14859009 292.52642822]
[307.10531616 303.08129883]
[307.33444214 317.92996216]
[318.28240967 328.18383789]
[334.36734009 331.37872314]
[339.38604736 346.99105835]
[328.17568970 358.96020508]
[312.26855469 354.97332764]
[308.02853394 339.13180542]
[297.08056641 328.87792969]
[282.24868774 329.62042236]
[270.99984741 319.37747192]
[270.32159424 303.81542969]
[259.37362671 293.56152344]
[248.42567444 283.30764771]
[237.47772217 273.05377197]
[227.59671021 277.34161377]
[216.80648804 277.99612427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 70]
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[13 62]
[14 61]
[15 60]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[28 50]
[29 49]
[32 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[74 93]
[75 92]
[76 91]
[77 90]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
