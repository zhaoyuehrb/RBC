%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGUCCCAGAGCCGCAGCUGCUGCGCCCGCGCGCUCCCGGGGACAUUCUAACCGCCGCCAGGUCCCGCCGCCUCUCGCCCCGCUAUUAAUACCGGCGGCCCGGGAGGGGGGCGCAGCACGCGCCGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[2.71764827 440.24923706]
[-9.82758904 443.41870117]
[-15.64896679 457.24301147]
[-21.47034454 471.06732178]
[-27.29172325 484.89163208]
[-21.09800339 499.43167114]
[-27.07718086 514.06127930]
[-41.68191528 520.10095215]
[-56.24747467 513.96740723]
[-62.13237381 499.29962158]
[-55.84520340 484.79974365]
[-41.11603165 479.07025146]
[-35.29465485 465.24594116]
[-29.47327805 451.42163086]
[-23.65189934 437.59732056]
[-30.66399002 422.35757446]
[-24.40341759 406.43188477]
[-8.26817799 399.79055786]
[-2.77247763 385.83355713]
[2.72322297 371.87658691]
[8.21892357 357.91961670]
[13.71462440 343.96261597]
[9.37807655 325.17532349]
[25.14062881 312.70877075]
[29.97609329 298.50955200]
[34.81155777 284.31030273]
[39.64702225 270.11108398]
[32.86239243 256.90106201]
[37.56396866 242.43212891]
[51.46584702 235.40536499]
[56.30131149 221.20613098]
[60.97000122 206.95118713]
[65.47126770 192.64248657]
[69.97254181 178.33380127]
[74.47380829 164.02511597]
[78.97507477 149.71643066]
[83.47634888 135.40774536]
[87.97761536 121.09905243]
[92.47888947 106.79035950]
[81.76651764 103.21103668]
[75.08108521 89.88073730]
[66.49344635 77.58226013]
[57.90581512 65.28378296]
[49.31818008 52.98530960]
[40.73054504 40.68683243]
[26.17941284 44.87531281]
[11.05683422 44.10961151]
[-2.99681234 38.47278976]
[-14.45709038 28.57628822]
[-22.08087540 15.49360371]
[-25.04119492 0.64384907]
[-23.01693726 -14.36218643]
[-16.22767830 -27.89675903]
[-5.40986490 -38.49174118]
[8.26306629 -44.99786758]
[23.30797768 -46.70940399]
[38.09291077 -43.44069290]
[51.01410675 -35.54629898]
[60.66997147 -23.88255119]
[66.01310730 -9.71464157]
[66.46392822 5.42059755]
[61.97353745 19.88141060]
[53.02901840 32.09919739]
[61.61665344 44.39767456]
[70.20429230 56.69614792]
[78.79192352 68.99462891]
[87.37956238 81.29310608]
[83.36254883 66.84098816]
[91.32318115 54.12767410]
[106.07864380 51.43021774]
[118.02233124 60.50481796]
[119.37825012 75.44340515]
[109.26402283 86.51997375]
[122.48246765 79.42964172]
[135.70091248 72.33931732]
[148.91935730 65.24899292]
[162.13780212 58.15866089]
[175.35624695 51.06833649]
[180.01734924 36.20523071]
[193.52374268 29.20293427]
[207.66471863 33.73818588]
[220.88314819 26.64785767]
[234.10159302 19.55752945]
[247.32003784 12.46720219]
[260.53848267 5.37687492]
[261.65127563 -10.01030254]
[270.92465210 -22.33947372]
[285.39944458 -27.67644501]
[300.45687866 -24.31820869]
[311.29211426 -13.33636379]
[314.44772339 1.76482010]
[308.91671753 16.16661263]
[296.46405029 25.27345085]
[281.06329346 26.17938042]
[267.62881470 18.59531784]
[254.41036987 25.68564606]
[241.19192505 32.77597427]
[227.97348022 39.86630249]
[214.75503540 46.95662689]
[210.71151733 61.24597931]
[197.40713501 68.62487793]
[182.44657898 64.28678131]
[169.22813416 71.37710571]
[156.00968933 78.46743774]
[142.79124451 85.55776215]
[129.57279968 92.64808655]
[116.35435486 99.73841858]
[106.78757477 111.29163361]
[102.28630829 125.60031891]
[97.78503418 139.90901184]
[93.28376770 154.21769714]
[88.78249359 168.52638245]
[84.28122711 182.83506775]
[79.77996063 197.14376831]
[75.27868652 211.45245361]
[75.68304443 220.67382812]
[70.50054932 226.04159546]
[65.66508484 240.24082947]
[72.38911438 254.29162598]
[67.28298950 268.62280273]
[53.84625626 274.94653320]
[49.01079178 289.14578247]
[44.17532730 303.34500122]
[39.33986282 317.54425049]
[44.74664307 327.11755371]
[43.95471191 337.86227417]
[37.47370148 346.19082642]
[27.67160416 349.45834351]
[22.17590332 363.41531372]
[16.68020248 377.37228394]
[11.18450165 391.32925415]
[5.68880129 405.28625488]
[12.46589851 416.99069214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[24 124]
[25 123]
[26 122]
[27 121]
[30 118]
[31 117]
[32 115]
[33 114]
[34 113]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[73 107]
[74 106]
[75 105]
[76 104]
[77 103]
[78 102]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
