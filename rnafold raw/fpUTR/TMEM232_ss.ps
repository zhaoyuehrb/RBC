%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAUAAGUCCUGAUUGGCUAAGCCCUGGUCACGAGACCGUAAAAGAGCAACGUCUGUCUCAGAGCGACUCCCACAGCGUCCUUAGCAACCAGCCUUGGUUCCCAGCGGCUCAGAGCGCAGCGAAUUUAUGAUUU\
) } def
/len { sequence length } bind def

/coor [
[111.92186737 518.77032471]
[121.62390900 505.99337769]
[120.93115997 491.00936890]
[120.23840332 476.02539062]
[119.54565430 461.04138184]
[118.85289764 446.05740356]
[118.16014862 431.07339478]
[117.46739960 416.08941650]
[116.77464294 401.10540771]
[115.90888214 386.13040161]
[114.69745636 371.17941284]
[113.31343079 356.24340820]
[111.92940521 341.30740356]
[99.13158417 336.40426636]
[89.66337585 326.40423584]
[85.42559052 313.23150635]
[87.30494690 299.45513916]
[94.98921967 287.78805542]
[107.01738739 280.55270386]
[105.97872162 265.58871460]
[97.37870026 253.42774963]
[104.14184570 239.12493896]
[103.10317993 224.16094971]
[102.06451416 209.19694519]
[101.02584839 194.23295593]
[99.81442261 179.28195190]
[98.43039703 164.34593201]
[97.04637146 149.40992737]
[95.66234589 134.47390747]
[83.47881317 130.56658936]
[73.53556061 122.51442719]
[67.18089294 111.40929413]
[65.27650452 98.75706482]
[68.08063507 86.27337646]
[55.90478134 77.51275635]
[43.72891998 68.75213623]
[31.55306244 59.99151993]
[19.37720299 51.23089981]
[6.90515947 42.89734268]
[-5.84809780 35.00086212]
[-18.60135460 27.10437965]
[-32.48034668 33.84063721]
[-47.79525375 31.98130417]
[-59.65914917 22.11968422]
[-64.28630066 7.40258551]
[-60.20021057 -7.47381830]
[-48.70473099 -17.76252174]
[-33.46802139 -20.18043709]
[-19.35206985 -13.95601559]
[-10.86121941 -1.07544863]
[-10.70487213 14.35112286]
[2.04838490 22.24760437]
[14.80164146 30.14408684]
[18.37829399 29.64697266]
[22.37396431 30.91542816]
[25.92892075 34.12674713]
[28.13782310 39.05503845]
[40.31368256 47.81565857]
[52.48954010 56.57627869]
[64.66539764 65.33689880]
[76.84125519 74.09751892]
[88.20010376 67.31929779]
[101.26908875 65.27745056]
[105.03969574 50.75910187]
[108.81030273 36.24075317]
[107.93927765 27.05559349]
[112.83930969 21.43258095]
[116.94425201 7.00519657]
[121.04920197 -7.42218828]
[117.38386536 -22.81295967]
[128.30877686 -32.93696594]
[121.78973389 -47.59580231]
[129.31347656 -61.76523590]
[145.10844421 -64.57568359]
[157.05807495 -53.87121582]
[155.99565125 -37.86338043]
[142.73616028 -28.83201981]
[146.69511414 -14.47319031]
[135.47657776 -3.31724310]
[131.37164307 11.11014175]
[127.26669312 25.53752518]
[123.32865906 40.01136017]
[119.55805206 54.52970886]
[115.78743744 69.04806519]
[119.77439880 71.43009949]
[123.40805054 74.32259369]
[126.62347412 77.67385864]
[129.36322021 81.42401886]
[143.47172546 76.32991028]
[157.58024597 71.23580933]
[171.68875122 66.14170074]
[185.79725647 61.04759216]
[195.95127869 48.17017365]
[212.13940430 50.79255676]
[217.70866394 66.21705627]
[206.92990112 78.57627869]
[190.89137268 75.15610504]
[176.78286743 80.25021362]
[162.67434692 85.34431458]
[148.56584167 90.43842316]
[134.45733643 95.53253174]
[129.32818604 118.63124847]
[110.59835815 133.08988953]
[111.98238373 148.02589417]
[113.36640930 162.96191406]
[114.75043488 177.89791870]
[118.68904114 186.24137878]
[115.98984528 193.19429016]
[117.02851105 208.15827942]
[118.06717682 223.12228394]
[119.10584259 238.08627319]
[127.78015900 251.31755066]
[120.94271851 264.55004883]
[121.98138428 279.51403809]
[136.88050842 286.58517456]
[146.14938354 300.11273193]
[147.35079956 316.37319946]
[140.25263977 330.94781494]
[126.86541748 339.92337036]
[128.24943542 354.85937500]
[129.63346863 369.79537964]
[133.57206726 378.13885498]
[130.87287903 385.09173584]
[134.61772156 393.52395630]
[131.75863647 400.41265869]
[132.45138550 415.39666748]
[133.14414978 430.38064575]
[133.83689880 445.36465454]
[134.52964783 460.34863281]
[135.22239685 475.33264160]
[135.91514587 490.31661987]
[136.60791016 505.30062866]
[147.44746399 517.12786865]
[144.81666565 532.95373535]
[130.73364258 540.63800049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 132]
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[9 125]
[10 123]
[11 121]
[12 120]
[13 119]
[19 114]
[20 113]
[22 111]
[23 110]
[24 109]
[25 108]
[26 106]
[27 105]
[28 104]
[29 103]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 53]
[40 52]
[41 51]
[63 84]
[64 83]
[65 82]
[67 81]
[68 80]
[69 79]
[71 77]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
