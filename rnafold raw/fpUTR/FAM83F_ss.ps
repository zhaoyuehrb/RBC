%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGCCCCGCCCCUCGGCGGCUCCAGGUGCGGCUGUGGGACCUCGGACCGCGGCGGGGCCGGGGCCAGGGCCGGGGCCGGGGCCGGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[113.08273315 477.49505615]
[100.23978424 466.42730713]
[107.31972504 451.02239990]
[108.31108093 436.05520630]
[109.30244446 421.08798218]
[110.29380035 406.12078857]
[111.28515625 391.15359497]
[112.27651978 376.18637085]
[113.26787567 361.21917725]
[114.25923920 346.25198364]
[115.25059509 331.28475952]
[115.99435425 316.30322266]
[116.49030304 301.31140137]
[116.98625183 286.31961060]
[117.48220062 271.32781982]
[116.98625183 256.33602905]
[115.50057220 241.40977478]
[114.01488495 226.48353577]
[112.52920532 211.55728149]
[111.04351807 196.63104248]
[108.81956482 181.79682922]
[105.86280823 167.09112549]
[102.90605164 152.38542175]
[99.94930267 137.67973328]
[96.99254608 122.97402954]
[94.03578949 108.26833344]
[89.40207672 101.46138000]
[91.23285675 93.02791595]
[88.76393890 78.23249817]
[86.29502106 63.43707657]
[76.39181519 51.09864044]
[81.92874908 37.27143478]
[72.02554321 24.93299484]
[77.56247711 11.10578918]
[75.09355927 -3.68963027]
[72.62463379 -18.48505020]
[70.15571594 -33.28046799]
[67.68679810 -48.07588959]
[65.21788025 -62.87130737]
[62.74896240 -77.66672516]
[50.17054367 -86.85482788]
[47.87747574 -101.89465332]
[56.71443939 -113.82963562]
[48.14352798 -128.45755005]
[59.82711411 -140.74290466]
[74.86669922 -132.91685486]
[71.50985718 -116.29855347]
[83.74329376 -107.87960052]
[86.45789337 -92.91011810]
[77.54438019 -80.13565063]
[80.01329803 -65.34022522]
[82.48221588 -50.54480743]
[84.95114136 -35.74938965]
[87.42005920 -20.95396805]
[89.88897705 -6.15854931]
[92.35789490 8.63687038]
[102.08451080 19.91704178]
[96.72416687 34.80251312]
[106.45078278 46.08268738]
[101.09043884 60.96815872]
[103.55936432 75.76358032]
[106.02828217 90.55899811]
[108.74148560 105.31157684]
[111.69824219 120.01727295]
[114.65499878 134.72297668]
[117.61175537 149.42868042]
[120.56851196 164.13436890]
[123.52526855 178.84007263]
[127.26195526 183.04570007]
[128.71789551 187.80271912]
[128.08961487 192.09312439]
[125.96976471 195.14535522]
[127.45544434 210.07160950]
[128.94113159 224.99784851]
[130.42681885 239.92408752]
[131.91249084 254.85034180]
[134.88789368 258.62893677]
[136.23089600 262.75692749]
[136.04879761 266.63272095]
[134.64768982 269.76330566]
[132.47399902 271.82376099]
[131.97805786 286.81558228]
[131.48210144 301.80737305]
[130.98614502 316.79916382]
[133.87338257 325.67996216]
[130.21780396 332.27612305]
[129.22644043 347.24331665]
[128.23507690 362.21054077]
[127.24372101 377.17773438]
[126.25236511 392.14492798]
[125.26100922 407.11215210]
[124.26964569 422.07934570]
[123.27828979 437.04653931]
[122.28692627 452.01376343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[12 84]
[13 83]
[14 82]
[15 81]
[16 76]
[17 75]
[18 74]
[19 73]
[20 72]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[26 63]
[28 62]
[29 61]
[30 60]
[32 58]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[43 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
