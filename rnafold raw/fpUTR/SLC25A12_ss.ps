%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGCGGGCGCGGCCGGGAAGACGGCGCGCGCGCGCCCUGACAGCUCGGCCCUGCUCGCUCACUCGCUCGUCCCCGGCUUCCGAGCACAGC\
) } def
/len { sequence length } bind def

/coor [
[74.01551819 122.84764099]
[67.74715424 112.52845001]
[52.92012787 114.79986572]
[38.09310150 117.07128143]
[23.26607704 119.34270477]
[8.43905258 121.61412048]
[-6.38797235 123.88553619]
[-18.85736275 133.62333679]
[-32.60951233 127.90252686]
[-47.43653488 130.17395020]
[-62.26356125 132.44535828]
[-77.09058380 134.71678162]
[-91.91761017 136.98818970]
[-106.70415497 139.50970459]
[-121.44600677 142.28059387]
[-136.18786621 145.05148315]
[-150.92970276 147.82237244]
[-159.64028931 161.00953674]
[-175.14085388 164.09306335]
[-188.23518372 155.24353027]
[-191.15464783 139.71124268]
[-182.16719055 126.71120453]
[-166.60488892 123.95611572]
[-153.70060730 133.08052063]
[-138.95875549 130.30963135]
[-124.21689606 127.53874969]
[-109.47505188 124.76785278]
[-103.35771179 120.34741211]
[-94.18902588 122.16117096]
[-79.36199951 119.88975525]
[-64.53498077 117.61833191]
[-49.70795059 115.34691620]
[-34.88092804 113.07550049]
[-23.47206497 103.50016022]
[-8.65938950 109.05850983]
[6.16763592 106.78709412]
[20.99466133 104.51567841]
[35.82168579 102.24426270]
[50.64871216 99.97283936]
[65.47573853 97.70142365]
[71.19380951 80.83201599]
[84.54583740 69.04233551]
[101.99338531 65.45677185]
[118.91266632 71.02554321]
[130.81988525 84.27286530]
[145.34104919 80.51307678]
[159.86219788 76.75328827]
[174.38336182 72.99349976]
[188.90451050 69.23371124]
[203.42567444 65.47392273]
[207.45205688 54.02774811]
[216.47822571 46.10130692]
[228.11154175 43.63775635]
[239.34457397 47.15263748]
[247.33251953 55.63142014]
[262.07437134 52.86053085]
[270.12377930 48.11062241]
[277.36038208 50.25384521]
[292.18740845 47.98242569]
[299.36706543 34.35308456]
[313.03564453 27.64315224]
[327.85900879 30.23771286]
[338.18853760 40.93531418]
[353.01556396 38.66389465]
[362.16656494 25.77845192]
[377.76245117 23.22021103]
[390.55041504 32.50693512]
[392.94363403 48.12897491]
[383.52221680 60.81805038]
[367.87576294 63.04595947]
[355.28698730 53.49092102]
[340.45996094 55.76233673]
[333.80661011 69.06162262]
[320.43978882 75.97476196]
[305.38934326 73.66442108]
[294.45883179 62.80945206]
[279.63180542 65.08087158]
[264.84527588 67.60237885]
[250.10340881 70.37327576]
[240.89907837 86.01995850]
[222.92210388 90.24535370]
[207.18545532 79.99507904]
[192.66430664 83.75486755]
[178.14314270 87.51465607]
[163.62199402 91.27444458]
[149.10083008 95.03423309]
[134.57968140 98.79402161]
[132.88874817 110.74888611]
[127.19312286 121.39491272]
[118.18632507 129.43579102]
[106.96507263 133.89242554]
[94.89571381 134.22213745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 27]
[15 26]
[16 25]
[17 24]
[45 87]
[46 86]
[47 85]
[48 84]
[49 83]
[50 82]
[55 79]
[56 78]
[58 77]
[59 76]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
