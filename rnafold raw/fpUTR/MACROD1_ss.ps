%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAGGUCGCCGCUGGCUGGCAGUCGCCACCCGGUCCCAGAGUAAAUAAGGGAGAGACACUCCCGAGCGCCGUAAAUAGAGUCCAAGUGGGCGGAGAGCCGUCCCGCGCCGCCCGCUC\
) } def
/len { sequence length } bind def

/coor [
[212.17355347 200.97399902]
[201.75456238 182.41439819]
[201.81028748 161.06178284]
[188.27149963 154.60412598]
[180.78761292 154.56404114]
[174.46621704 147.79611206]
[161.10112000 140.98625183]
[153.62083435 140.75027466]
[147.47879028 133.81919861]
[134.29652405 126.66181183]
[121.11427307 119.50443268]
[107.83946228 112.52021027]
[82.99529266 121.45150757]
[68.61299896 125.71173859]
[54.23070145 129.97196960]
[39.84840775 134.23220825]
[25.46611214 138.49243164]
[14.43174553 149.83056641]
[0.03107415 146.02662659]
[-14.35122204 150.28686523]
[-28.73351860 154.54708862]
[-43.11581421 158.80732727]
[-54.00560760 171.06883240]
[-70.01264191 167.50415039]
[-74.67024994 151.78031921]
[-63.18708420 140.07267761]
[-47.37604523 144.42503357]
[-32.99374771 140.16479492]
[-18.61145210 135.90457153]
[-4.22915602 131.64433289]
[5.77649164 120.61092377]
[21.20588112 124.11013794]
[35.58817673 119.84990692]
[49.97047424 115.58967590]
[64.35276794 111.32944489]
[78.73506165 107.06921387]
[64.07095337 103.91268158]
[49.40683365 100.75614166]
[34.42615128 101.51715851]
[20.56027412 95.79549408]
[10.47563934 84.69143677]
[6.11154222 70.34031677]
[8.30720806 55.50188446]
[16.64040565 43.02960205]
[29.50864410 35.32191467]
[44.43733597 33.86102676]
[58.55566025 38.92787170]
[69.14863586 49.54808044]
[74.17945099 63.68130493]
[82.70742035 76.02122498]
[91.23539734 88.36115265]
[89.66746521 73.44332123]
[88.09954071 58.52549362]
[86.53161621 43.60766220]
[84.96368408 28.68983459]
[73.45095062 17.51681137]
[75.15164185 1.56415653]
[88.76113892 -6.93061781]
[103.83939362 -1.45104778]
[108.81967163 13.79940987]
[99.88151550 27.12190819]
[101.44944000 42.03973770]
[103.01737213 56.95756531]
[104.58529663 71.87539673]
[106.15322113 86.79322052]
[114.64931488 99.15511322]
[123.84030151 100.29113770]
[128.27165222 106.32217407]
[141.45391846 113.47955322]
[154.63616943 120.63694000]
[167.91098022 127.62115479]
[181.27607727 134.43101501]
[194.72917175 141.06533813]
[208.26795959 147.52301025]
[214.80458069 140.43086243]
[222.77590942 135.02210999]
[231.75920105 131.57707214]
[241.27947998 130.27206421]
[250.83474731 131.17044067]
[259.92239380 134.21948242]
[268.06567383 139.25352478]
[274.83859253 146.00286865]
[279.88845825 154.10830688]
[282.95388794 163.14019775]
[283.87869263 172.62121582]
[282.61950684 182.05165100]
[279.24804688 190.93566895]
[291.14834595 200.06709290]
[303.04864502 209.19850159]
[314.94897461 218.32992554]
[326.84927368 227.46134949]
[338.74957275 236.59277344]
[350.64987183 245.72419739]
[362.55017090 254.85562134]
[374.45046997 263.98703003]
[385.28918457 261.92999268]
[395.23968506 266.15686035]
[401.04168701 275.01596069]
[400.94335938 285.38430786]
[412.34945679 295.12603760]
[428.08337402 293.63632202]
[440.20889282 303.77276611]
[441.53216553 319.52154541]
[431.26809692 331.53924561]
[415.50619507 332.69592285]
[403.59771729 322.30535889]
[402.60772705 306.53210449]
[391.20162964 296.79040527]
[372.04086304 294.80502319]
[365.31903076 275.88732910]
[353.41873169 266.75592041]
[341.51843262 257.62448120]
[329.61813354 248.49307251]
[317.71783447 239.36164856]
[305.81753540 230.23022461]
[293.91723633 221.09881592]
[282.01693726 211.96739197]
[270.11663818 202.83596802]
[251.45126343 212.62913513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 74]
[4 73]
[6 72]
[7 71]
[9 70]
[10 69]
[11 68]
[12 66]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[19 30]
[20 29]
[21 28]
[22 27]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
