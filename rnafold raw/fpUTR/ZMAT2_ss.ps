%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAACACAAGACUCCAAGCUUAUUGGAGGGCUAUCUUGCCUUACGGCUCCAAGCCGCUUUUUACGGCGUUUUUCAGCUCGCCAUUCACUUCGCUGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[105.84647369 169.84501648]
[101.46463013 184.19073486]
[91.76045227 195.62878418]
[78.32033539 202.28935242]
[63.34138107 203.08361816]
[49.27225494 197.88172913]
[38.41289520 187.53405762]
[32.53852463 173.73217773]
[32.60945129 158.73234558]
[38.61407852 144.98663330]
[49.57080460 134.74212646]
[63.69213104 129.67298889]
[74.38533783 119.15370178]
[59.95795059 123.25865173]
[45.53056717 127.36359406]
[31.10318375 131.46853638]
[16.67579842 135.57348633]
[2.24841380 139.67842102]
[-6.78294611 152.93791199]
[-22.79078102 154.00035095]
[-33.49525070 142.05070496]
[-30.68480301 126.25573730]
[-16.51537132 118.73199463]
[-1.85653114 125.25104523]
[12.57085323 121.14609528]
[26.99823761 117.04115295]
[41.42562103 112.93621063]
[55.85300827 108.83126068]
[70.28039551 104.72631836]
[72.80924988 89.94102478]
[60.56629562 81.27442169]
[48.32334518 72.60781097]
[32.78948975 75.51897430]
[19.79425621 66.52455902]
[17.04748726 50.96079636]
[26.17879105 38.06138611]
[41.77072906 35.47932053]
[54.57287598 44.74649429]
[56.98995209 60.36485672]
[69.23290253 69.03146362]
[81.47586060 77.69807434]
[88.13730621 74.25204468]
[88.83002472 59.26804733]
[101.46020508 67.35998535]
[108.12165070 63.91395950]
[108.12165070 48.91395950]
[108.12165070 33.91395950]
[108.12165070 18.91395950]
[108.12165070 3.91395926]
[102.07530975 -11.92517281]
[115.62165070 -22.11992836]
[129.16798401 -11.92517281]
[123.12165070 3.91395926]
[123.12165070 18.91395950]
[123.12165070 33.91395950]
[123.12165070 48.91395950]
[123.12165070 63.91395950]
[128.74136353 68.88072205]
[135.93275452 55.71698761]
[141.32331848 41.71906662]
[155.89443970 38.15780640]
[167.13395691 48.09124374]
[165.39057922 62.98958588]
[152.16102600 70.05971527]
[139.98080444 78.81425476]
[145.60052490 83.78102112]
[160.48683167 81.93769836]
[175.37313843 80.09437561]
[190.25944519 78.25105286]
[196.17214966 64.07588196]
[208.39002991 54.76893616]
[223.62651062 52.83374023]
[237.78308105 58.79084778]
[247.05168152 71.03783417]
[248.93910217 86.28031158]
[242.93765259 100.41813660]
[230.66168213 109.64830780]
[215.41336060 111.48794556]
[201.29441833 105.44220734]
[192.10276794 93.13735962]
[177.21646118 94.98068237]
[162.33015442 96.82400513]
[147.44384766 98.66733551]
[128.54515076 118.26152039]
[107.99267578 118.67211151]
[116.27815247 131.17614746]
[124.56362152 143.68019104]
[132.84910583 156.18421936]
[141.13456726 168.68826294]
[156.67109680 171.58515930]
[165.53962708 184.66661072]
[162.47863770 200.17164612]
[149.30413818 208.90138245]
[133.83235168 205.67662048]
[125.24238586 192.41056824]
[128.63053894 176.97373962]
[120.34506226 164.46969604]
[112.05958557 151.96566772]
[103.77411652 139.46162415]
[95.48863983 126.95758820]
[96.76507568 141.90318298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[30 41]
[31 40]
[32 39]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[66 83]
[67 82]
[68 81]
[69 80]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
