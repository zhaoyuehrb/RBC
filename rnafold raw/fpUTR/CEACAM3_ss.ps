%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCUAAGUCACAGUAGCCCUGACUACAGCAUUCCUGGAGCCCAGGCUCUUUUCCACAGAGGAGGAAAGAGCAGGCAGCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[60.51748276 146.53164673]
[50.55178833 146.29095459]
[41.46362305 142.34036255]
[34.57204819 135.30158997]
[20.24217606 139.73497009]
[15.15120888 154.27415466]
[2.62173319 162.92665100]
[-12.42219067 162.54672241]
[-24.21652412 153.48959351]
[-38.54639435 157.92295837]
[-52.87626648 162.35633850]
[-67.20613861 166.78970337]
[-81.53601074 171.22308350]
[-85.56903839 186.11395264]
[-97.02776337 196.44357300]
[-112.25575256 198.91580200]
[-126.39380646 192.74174500]
[-134.93052673 179.89152527]
[-135.14187622 164.46562195]
[-126.96040344 151.38635254]
[-112.99680328 144.82728577]
[-97.70680237 146.88139343]
[-85.96938324 156.89320374]
[-71.63951111 152.45983887]
[-57.30963898 148.02645874]
[-42.97976685 143.59309387]
[-28.64989662 139.15971375]
[-24.03078079 125.02458954]
[-11.82971859 116.21561432]
[3.39687395 116.28093719]
[15.80880356 125.40509033]
[30.13867569 120.97171783]
[37.71747589 102.21013641]
[56.76548386 94.58990479]
[75.70563507 103.17958832]
[89.26901245 96.77374268]
[102.71721649 90.12952423]
[116.04607391 83.24899292]
[129.37492371 76.36846924]
[134.27035522 61.58089066]
[147.88572693 54.79293060]
[161.95326233 59.55110931]
[175.28210449 52.67058182]
[188.61096191 45.79005432]
[191.40576172 34.98841858]
[199.60389709 27.75213051]
[210.22787476 26.37738419]
[219.60035706 31.08910561]
[233.38134766 25.16592026]
[247.16233826 19.24273682]
[260.94332886 13.31955147]
[274.72433472 7.39636660]
[288.50534058 1.47318196]
[302.28634644 -4.45000267]
[316.06732178 -10.37318802]
[329.84832764 -16.29637146]
[343.52264404 -22.46184921]
[348.61856079 -37.42203903]
[362.83703613 -44.32207489]
[377.74249268 -39.06828690]
[384.49182129 -24.77765274]
[379.08074951 -9.92855453]
[364.71954346 -3.33069801]
[349.92849731 -8.89847374]
[345.11877441 -3.06575775]
[335.77151489 -2.51537538]
[321.99050903 3.40780950]
[308.20950317 9.33099461]
[294.42852783 15.25417900]
[280.64752197 21.17736435]
[266.86651611 27.10054779]
[253.08552551 33.02373505]
[239.30453491 38.94691849]
[225.52352905 44.87010193]
[215.39253235 61.18209839]
[195.49148560 59.11890793]
[182.16264343 65.99943542]
[168.83378601 72.87996674]
[164.56492615 87.10362244]
[151.14558411 94.27133179]
[136.25544739 89.69731903]
[122.92659760 96.57785034]
[109.59774780 103.45837402]
[104.30909729 109.79795074]
[95.67485809 110.33712006]
[82.11148071 116.74296570]
[81.58797455 126.93376160]
[77.29213715 136.12469482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 32]
[5 31]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[35 86]
[36 85]
[37 83]
[38 82]
[39 81]
[42 78]
[43 77]
[44 76]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
