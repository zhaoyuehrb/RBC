%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUUACUACAUCAGAACUCCUGCUGAGGUAUAAGAGGAUACGUCUAAUAACUCAAUUGCUGUAAACCU\
) } def
/len { sequence length } bind def

/coor [
[98.91653442 110.56157684]
[94.83316040 110.37092590]
[90.80064392 108.54614258]
[87.48243713 105.12526703]
[72.77880859 102.15824127]
[58.07518005 99.19120789]
[43.37154770 96.22418213]
[34.00909042 97.60945129]
[28.08966637 92.78697205]
[13.53166962 89.17245483]
[-1.02632725 85.55793762]
[-16.28429031 89.74185181]
[-26.77209091 79.16567993]
[-41.33008957 75.55116272]
[-55.88808441 71.93665314]
[-70.44608307 68.32213593]
[-82.23593140 78.41069794]
[-97.70665741 79.60906219]
[-110.90946960 71.45642090]
[-116.76760101 57.08763885]
[-113.02848816 42.02780151]
[-101.12989044 32.06772614]
[-85.64707184 31.03726578]
[-72.53347778 39.33265305]
[-66.83156586 53.76413727]
[-52.27357101 57.37865448]
[-37.71557236 60.99316788]
[-23.15757561 64.60768127]
[-8.94089699 60.16524124]
[2.58818817 70.99993896]
[17.14618492 74.61445618]
[31.70418167 78.22897339]
[46.33857727 81.52055359]
[61.04220581 84.48757935]
[75.74583435 87.45460510]
[90.44947052 90.42163849]
[105.35778809 92.07754517]
[120.35411835 92.40937805]
[135.35044861 92.74121094]
[151.08859253 83.47492218]
[165.80226135 92.78162384]
[180.79858398 92.44979095]
[195.79492188 92.11795807]
[210.79124451 91.78612518]
[220.43840027 82.91348267]
[233.13839722 83.12463379]
[241.90672302 91.74571228]
[256.90304565 92.07754517]
[271.89938354 92.40937805]
[286.89572144 92.74121094]
[298.14080811 81.63611603]
[313.94406128 81.81867218]
[324.92962646 93.18056488]
[324.58001709 108.98098755]
[313.10260010 119.84582520]
[297.30676270 119.32917023]
[286.56387329 107.73754120]
[271.56753540 107.40570831]
[256.57122803 107.07387543]
[241.57489014 106.74204254]
[226.86122131 116.04874420]
[211.12307739 106.78245544]
[196.12675476 107.11428833]
[181.13041687 107.44612122]
[166.13409424 107.77795410]
[157.36576843 116.39903259]
[144.66577148 116.61018372]
[135.01861572 107.73754120]
[120.02228546 107.40570831]
[105.02595520 107.07387543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 36]
[5 35]
[6 34]
[7 33]
[9 32]
[10 31]
[11 30]
[13 28]
[14 27]
[15 26]
[16 25]
[37 70]
[38 69]
[39 68]
[41 65]
[42 64]
[43 63]
[44 62]
[47 60]
[48 59]
[49 58]
[50 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
