%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACACAGCGUCCGGAGCCAGAGGCGCUCUUAACGGCGUUUAUGUCCUUUGCUGUCUGAGGGGCCUCAGCUCUGACCAAUCUGGUCUUCGUGUGGUCAUUAGC\
) } def
/len { sequence length } bind def

/coor [
[101.45046234 129.09841919]
[101.13127136 114.10182190]
[94.22163391 127.41561127]
[87.31199646 140.72940063]
[80.40235901 154.04318237]
[83.85540009 169.71022034]
[73.64777374 182.08697510]
[57.60990906 181.67906189]
[48.04467773 168.79939270]
[52.28970718 153.32814026]
[67.08857727 147.13354492]
[73.99821472 133.81976318]
[80.90785217 120.50597382]
[87.81748962 107.19218445]
[87.81748962 92.19218445]
[80.90785217 78.87840271]
[73.99821472 65.56461334]
[67.08857727 52.25082779]
[60.17893982 38.93703842]
[48.04877853 34.24694824]
[42.60330582 22.88193893]
[46.30489349 11.25786114]
[39.79663849 -2.25667167]
[33.28837967 -15.77120495]
[26.78012466 -29.28573799]
[20.27186966 -42.80027008]
[13.62047768 -49.30438995]
[13.77786160 -56.81785583]
[7.67681170 -70.52104187]
[1.57576215 -84.22422028]
[-4.52528763 -97.92740631]
[-10.62633705 -111.63058472]
[-16.72738647 -125.33376312]
[-23.03274536 -138.94415283]
[-29.54100037 -152.45867920]
[-36.04925919 -165.97322083]
[-42.55751419 -179.48774719]
[-49.06576920 -193.00227356]
[-55.57402420 -206.51681519]
[-70.87248230 -206.98135376]
[-84.19700623 -214.51232910]
[-92.48572540 -227.37916565]
[-93.83394623 -242.62518311]
[-87.93186188 -256.74694824]
[-76.13572693 -266.49935913]
[-61.15620422 -269.64141846]
[-46.43548203 -265.45108032]
[-35.35627365 -254.89126587]
[-30.46449852 -240.38853455]
[-32.88425064 -225.27551270]
[-42.05949402 -213.02507019]
[-35.55123520 -199.51052856]
[-29.04298019 -185.99600220]
[-22.53472519 -172.48147583]
[-16.02646828 -158.96693420]
[-9.51821232 -145.45240784]
[-3.68495250 -140.71424866]
[-3.02420497 -131.43481445]
[3.07684469 -117.73163605]
[9.17789459 -104.02845001]
[15.27894402 -90.32527161]
[21.37999344 -76.62208557]
[27.48104286 -62.91890717]
[33.78640366 -49.30852509]
[40.29465866 -35.79399490]
[46.80291367 -22.27946091]
[53.31116867 -8.76492786]
[59.81942749 4.74960518]
[74.81017303 13.73711300]
[73.49272919 32.02740097]
[80.40235901 45.34119034]
[87.31199646 58.65497589]
[94.22163391 71.96876526]
[101.13127136 85.28254700]
[129.23974609 93.73327637]
[142.65539551 100.44297791]
[156.07106018 107.15267181]
[169.48672485 113.86237335]
[182.90238953 120.57206726]
[197.73287964 115.80821991]
[211.24269104 122.80391693]
[215.69288635 136.97187805]
[229.40307617 129.70480347]
[244.76156616 131.91758728]
[255.86271667 142.75936890]
[258.43789673 158.06126404]
[251.49690247 171.93937683]
[237.70869446 179.05731201]
[222.37510681 176.67805481]
[211.39222717 165.71647644]
[208.98320007 150.38754272]
[194.97760010 155.32504272]
[181.27662659 148.71156311]
[176.19268799 133.98773193]
[162.77702332 127.27803040]
[149.36137390 120.56833649]
[135.94570923 113.85863495]
[122.53004456 107.14894104]
[131.08659363 119.46906281]
[141.64674377 130.12191772]
[143.17103577 145.04426575]
[134.98284912 157.61224365]
[120.71685791 162.24702454]
[106.70556641 156.89131165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
