%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUCGGGCCGGCUCGCGGGCGCUGCCAGUCUCGGGCGGCGGUGUCCGGCGCGCGGGCGGCCUGCUGGGCGGGCUGAAGGGUUAGCGGAGCACGGGCAAGGCGGAGAGUGACGGAGUCGGCGAGCCCCCGCGGCGACAGGUUCUCUACUUAAAAGACA\
) } def
/len { sequence length } bind def

/coor [
[73.37728882 194.05221558]
[62.98280334 183.23765564]
[56.54603195 169.68893433]
[54.72893143 154.79940796]
[57.71837997 140.10031128]
[65.20693207 127.10333252]
[76.42446899 117.14507294]
[90.21673584 111.24980927]
[75.74720001 115.20362091]
[61.27766800 119.15742493]
[50.00498199 130.25865173]
[35.68835068 126.14971924]
[21.21881676 130.10353088]
[9.94613171 141.20475769]
[-4.37050009 137.09582520]
[-18.84003448 141.04962158]
[-33.30956650 145.00343323]
[-47.73933411 149.09999084]
[-62.12792969 153.33891296]
[-76.51652527 157.57781982]
[-90.90511322 161.81672668]
[-105.29370880 166.05564880]
[-119.68230438 170.29455566]
[-134.07089233 174.53347778]
[-148.45948792 178.77238464]
[-162.84808350 183.01129150]
[-177.23667908 187.25021362]
[-184.63134766 192.70503235]
[-191.95155334 191.42770386]
[-206.42108154 195.38151550]
[-220.89060974 199.33532715]
[-234.57586670 209.34283447]
[-247.98072815 198.96275330]
[-241.71714783 183.20826721]
[-224.84442139 184.86578369]
[-210.37489319 180.91198730]
[-195.90534973 176.95817566]
[-181.47558594 172.86161804]
[-167.08699036 168.62271118]
[-152.69839478 164.38378906]
[-138.30981445 160.14488220]
[-123.92121124 155.90596008]
[-109.53262329 151.66705322]
[-95.14402771 147.42814636]
[-80.75543213 143.18922424]
[-66.36684418 138.95031738]
[-51.97824860 134.71139526]
[-46.42116928 129.77825928]
[-37.26337433 130.53390503]
[-22.79384232 126.58009338]
[-8.32430744 122.62628937]
[1.91341853 111.80786896]
[17.26500893 115.63399506]
[31.73454285 111.68018341]
[41.97226715 100.86176300]
[57.32386017 104.68788910]
[71.79339600 100.73408508]
[86.26292419 96.78027344]
[87.77785492 89.78021240]
[92.95219421 83.70436096]
[93.84080505 68.73070526]
[94.72941589 53.75705338]
[95.61801910 38.78339767]
[96.35866547 23.80169296]
[96.95126343 8.81340313]
[97.54386139 -6.17488670]
[90.35779572 -20.26996040]
[98.59187317 -32.68162155]
[99.03636932 -47.67503357]
[99.33272552 -62.67210388]
[86.98832703 -75.03111267]
[87.36739349 -92.15779114]
[99.74967957 -103.50287628]
[99.74967957 -118.50287628]
[99.74967957 -133.50286865]
[99.74967957 -148.50286865]
[99.74967957 -163.50286865]
[91.08597565 -177.42668152]
[99.05010223 -191.76211548]
[115.44924927 -191.76211548]
[123.41337585 -177.42668152]
[114.74967957 -163.50286865]
[114.74967957 -148.50286865]
[114.74967957 -133.50286865]
[114.74967957 -118.50287628]
[114.74967957 -103.50287628]
[125.06631470 -95.73160553]
[129.06721497 -83.24595642]
[125.07167053 -70.55408478]
[114.32979584 -62.37574768]
[114.03343964 -47.37867737]
[117.06163025 -40.59287643]
[113.58016205 -32.08902359]
[120.80860901 -19.06601143]
[112.53215027 -5.58228731]
[111.93955231 9.40600204]
[111.34695435 24.39429092]
[114.24047852 31.23859406]
[110.59167480 39.67200470]
[109.70307159 54.64566040]
[108.81446075 69.61931610]
[107.92584991 84.59297180]
[116.67053986 96.78027344]
[131.14007568 100.73408508]
[145.64796448 104.54475403]
[160.19279480 108.21191406]
[174.73760986 111.87907410]
[189.28244019 115.54623413]
[198.42352295 114.60980988]
[204.07698059 119.43218994]
[218.54650879 123.38600159]
[233.01603699 127.33980560]
[243.89662170 119.34693146]
[257.20028687 119.10089111]
[268.04638672 126.46708679]
[272.58544922 138.55932617]
[286.97406006 142.79824829]
[301.36264038 147.03715515]
[315.75125122 151.27606201]
[331.17541504 147.75399780]
[341.19741821 158.77256775]
[355.58599854 163.01147461]
[367.79992676 153.44068909]
[383.30795288 152.91056824]
[396.14691162 161.62493896]
[401.38000488 176.23297119]
[396.99496460 191.11756897]
[384.67794800 200.55529785]
[369.16510010 200.91716003]
[356.42141724 192.06401062]
[351.34710693 177.40007019]
[336.95849609 173.16116333]
[322.56347656 176.98643494]
[311.51232910 165.66465759]
[297.12374878 161.42575073]
[282.73513794 157.18682861]
[268.34655762 152.94792175]
[253.96473694 161.61944580]
[237.42903137 157.14315796]
[229.06224060 141.80934143]
[214.59269714 137.85552979]
[200.12316895 133.90171814]
[185.61528015 130.09104919]
[171.07044983 126.42389679]
[156.52563477 122.75673676]
[141.98080444 119.08957672]
[134.68725586 120.51128387]
[127.18627167 115.20362091]
[112.71673584 111.24980927]
[126.50955200 117.14542389]
[137.72694397 127.10383606]
[145.21531677 140.10092163]
[148.20455933 154.80004883]
[146.38725281 169.68955994]
[139.95030212 183.23820496]
[129.55566406 194.05261230]
[116.27234650 201.02064514]
[101.46640778 203.42570496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 58]
[9 57]
[10 56]
[12 54]
[13 53]
[15 51]
[16 50]
[17 49]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[29 37]
[30 36]
[31 35]
[60 102]
[61 101]
[62 100]
[63 99]
[64 97]
[65 96]
[66 95]
[68 93]
[69 91]
[70 90]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
[103 149]
[104 148]
[105 146]
[106 145]
[107 144]
[108 143]
[110 142]
[111 141]
[112 140]
[116 137]
[117 136]
[118 135]
[119 134]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
