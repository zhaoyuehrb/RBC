%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUUUCUGUAGAUGAGCAUGCGCAGCACCCACCGUUCGCUCAGCCAGAGAGAGGCUUCCCAGCCAAUCCGAGAGCCUCAGAGUCAUCCUCCCGCCCACCCAGCAUACAGGCGGGGCGUUCCUCCUUAGCCA\
) } def
/len { sequence length } bind def

/coor [
[95.57704926 167.73153687]
[95.22541046 152.73565674]
[94.87377167 137.73977661]
[72.69677734 121.70499420]
[68.46285248 97.07540894]
[53.87321091 100.55998993]
[39.28356934 104.04457092]
[24.69392395 107.52915192]
[10.10428143 111.01373291]
[-4.48536253 114.49831390]
[-8.66756725 125.74570465]
[-17.69684982 133.46516418]
[-29.22152901 135.80014038]
[-40.31378555 132.27684021]
[-48.21340561 123.89483643]
[-62.95034409 126.69173431]
[-77.68728638 129.48863220]
[-92.42422485 132.28553772]
[-107.16116333 135.08244324]
[-116.06764221 147.86181641]
[-131.05282593 150.48832703]
[-143.18112183 141.91860962]
[-157.91806030 144.71551514]
[-172.65499878 147.51242065]
[-177.64381409 162.03851318]
[-189.23782349 172.11195374]
[-204.31831360 175.02305603]
[-218.82868958 169.98873901]
[-228.86575317 158.36322021]
[-231.72956848 143.27368164]
[-226.64979553 128.77914429]
[-214.99285889 118.77857208]
[-199.89442444 115.96206665]
[-185.41587830 121.08724976]
[-175.45190430 132.77548218]
[-160.71496582 129.97857666]
[-145.97802734 127.18167114]
[-137.83283997 114.76428223]
[-122.92733765 111.71789551]
[-109.95806122 120.34549713]
[-95.22112274 117.54859924]
[-80.48418427 114.75170135]
[-65.74724579 111.95479584]
[-51.01030731 109.15789795]
[-41.72521973 93.46045685]
[-23.62639999 89.37245178]
[-7.96994257 99.90866852]
[6.61970091 96.42408752]
[21.20934486 92.93950653]
[35.79898834 89.45492554]
[50.38862991 85.97034454]
[64.97827148 82.48576355]
[74.13292694 70.60333252]
[73.78128815 55.60745239]
[73.42964935 40.61157608]
[73.07801056 25.61569595]
[72.72637177 10.61981869]
[72.37473297 -4.37605906]
[72.02309418 -19.37193680]
[63.96441269 -32.98693466]
[71.40122223 -45.89208984]
[57.88536835 -53.18710327]
[49.84146500 -66.27111053]
[49.43328857 -81.62457275]
[56.77062988 -95.11750031]
[69.87978363 -103.12035370]
[85.23445892 -103.48040009]
[98.70431519 -96.10079956]
[106.66603851 -82.96662903]
[106.97795868 -67.61090088]
[99.55616760 -54.16424179]
[86.39710236 -46.24372864]
[94.43064117 -33.70133591]
[87.01897430 -19.72357559]
[87.37061310 -4.72769737]
[87.72225189 10.26817989]
[88.07389069 25.26405716]
[88.42552948 40.25993729]
[88.77716827 55.25581360]
[89.12880707 70.25169373]
[104.41616821 71.11569214]
[116.28005981 78.75251007]
[128.37384033 69.87892914]
[140.46762085 61.00534058]
[144.31439209 45.43030167]
[158.94947815 38.85811996]
[173.14611816 46.33041763]
[176.01383972 62.11508179]
[165.35279846 74.10347748]
[149.34120178 73.09912109]
[137.24742126 81.97270203]
[125.15364838 90.84629059]
[132.21984863 96.34150696]
[137.79911804 104.66855621]
[152.20939636 108.83316040]
[166.61967468 112.99775696]
[181.02995300 117.16235352]
[195.44023132 121.32695770]
[209.16043091 113.95172119]
[223.71517944 118.38050079]
[230.66177368 131.50605774]
[245.07205200 135.67065430]
[257.23641968 126.03696442]
[272.74148560 125.42680359]
[285.62527466 134.07481384]
[290.93365479 148.65563965]
[286.62551880 163.56266785]
[274.35736084 173.06382751]
[258.84658813 173.50575256]
[246.05737305 164.71849060]
[240.90745544 150.08093262]
[226.49717712 145.91633606]
[213.61970520 153.31268311]
[198.94630432 149.29446411]
[191.27563477 135.73722839]
[176.86535645 131.57263184]
[162.45507812 127.40803528]
[148.04479980 123.24343109]
[133.63452148 119.07883453]
[127.69330597 123.65615845]
[138.34289551 134.21960449]
[148.99249268 144.78303528]
[161.45504761 153.13078308]
[161.95202637 168.12254333]
[150.06971741 177.27735901]
[135.70037842 172.97361755]
[130.80686951 158.79388428]
[123.30886841 145.80235291]
[115.81086731 132.81082153]
[109.86965179 137.38813782]
[110.22129059 152.38401794]
[110.57292938 167.37989807]
[113.21461487 186.58071899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[22 37]
[23 36]
[24 35]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[61 72]
[82 92]
[83 91]
[84 90]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
