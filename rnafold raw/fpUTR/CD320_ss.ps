%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCGUGCGCAGGGAUAAGAGAGCGGUCUGGACAGCGCGUGGCCGGCGCCGCUGUGGGGACAGC\
) } def
/len { sequence length } bind def

/coor [
[67.35768127 128.09283447]
[58.77004623 140.39131165]
[50.18241119 152.68978882]
[41.59477615 164.98826599]
[40.72662735 181.36441040]
[25.98968697 188.55847168]
[12.54405117 179.16981506]
[14.22144032 162.85668945]
[29.29629898 156.40061951]
[37.88393402 144.10214233]
[46.47156906 131.80368042]
[55.05920410 119.50519562]
[40.24825287 121.87916565]
[25.80755997 117.82129669]
[14.40099525 108.08013153]
[8.13272953 94.45262909]
[8.15906715 79.45265198]
[14.47515106 65.84724426]
[25.91585350 56.14619446]
[40.37070847 52.13905716]
[55.17323303 54.56502533]
[67.59280396 62.97658539]
[75.33837891 75.82205200]
[76.98114777 90.73181915]
[72.21961975 104.95287323]
[85.75587463 98.48992157]
[93.82833099 87.07382965]
[107.78116608 87.97382355]
[121.31742096 81.51087189]
[134.85368347 75.04791260]
[148.38993835 68.58496094]
[153.74258423 53.95666885]
[167.56233215 47.59514236]
[181.47518921 52.78822708]
[195.01144409 46.32527161]
[208.54769897 39.86231613]
[222.08395386 33.39935684]
[235.62020874 26.93640327]
[249.15646362 20.47344589]
[262.53750610 13.69494152]
[275.75595093 6.60461378]
[288.97436523 -0.48571357]
[294.96685791 -15.36757851]
[310.37884521 -19.82292938]
[323.38757324 -10.43400383]
[324.01391602 5.59681940]
[311.77731323 15.97206402]
[296.06469727 12.73272991]
[282.84625244 19.82305717]
[269.62780762 26.91338539]
[265.06643677 33.06405640]
[255.61941528 34.00970078]
[242.08316040 40.47265625]
[228.54690552 46.93561172]
[215.01065063 53.39857101]
[201.47439575 59.86152649]
[187.93814087 66.32448578]
[183.22929382 80.40859985]
[169.59367371 87.15578461]
[154.85289001 82.12121582]
[141.31663513 88.58416748]
[127.78038025 95.04712677]
[114.24412537 101.51007843]
[106.17166901 112.92617035]
[92.21883392 112.02617645]
[78.68257904 118.48912811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[25 66]
[26 65]
[28 63]
[29 62]
[30 61]
[31 60]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
