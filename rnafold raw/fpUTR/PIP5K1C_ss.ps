%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUUGGCCGGCGGCGCUUGUUGUUCGGCGGCGGCGGUCGCAGCUCGGGUCCCCCUCGGGCGCCCCCGCCGCCGUCCGCGCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[84.43014526 270.64999390]
[76.26453400 283.84478760]
[61.88999557 289.68878174]
[46.83384323 285.93487549]
[36.88547134 274.02648926]
[35.87023544 258.54266357]
[44.17851257 245.43724060]
[58.61559677 239.74951172]
[62.24442673 225.19508362]
[65.87325287 210.64064026]
[69.50208282 196.08621216]
[73.13091278 181.53176880]
[76.50518036 166.91621399]
[79.62385559 152.24400330]
[82.74253082 137.57179260]
[81.01577759 130.21498108]
[86.23457336 122.44608307]
[89.86340332 107.89164734]
[77.09222412 115.75912476]
[62.10659409 116.41550446]
[48.69644928 109.69478607]
[40.25329208 97.29667664]
[38.91243362 82.35672760]
[45.01299286 68.65332794]
[57.01210403 59.65213776]
[71.87512207 57.62961197]
[85.84311676 63.09725189]
[95.38350677 74.67226410]
[98.08332062 89.42940521]
[106.47121429 76.99384308]
[114.85910797 64.55827332]
[123.24700165 52.12271118]
[131.63490295 39.68714905]
[140.02279663 27.25158501]
[148.41069031 14.81602192]
[156.79858398 2.38045835]
[165.18647766 -10.05510521]
[173.57437134 -22.49066925]
[181.96226501 -34.92623138]
[179.15582275 -50.24816895]
[187.83949280 -62.74010849]
[202.46391296 -65.32118988]
[210.85180664 -77.75675201]
[213.13316345 -86.83348083]
[219.75576782 -90.47291565]
[228.57254028 -102.60816956]
[237.38931274 -114.74342346]
[246.20610046 -126.87867737]
[255.02287292 -139.01393127]
[263.83966064 -151.14918518]
[272.65643311 -163.28443909]
[271.57702637 -179.29113770]
[283.51528931 -190.00828552]
[299.31323242 -187.21461487]
[306.85202026 -173.05317688]
[300.34851074 -158.38742065]
[284.79168701 -154.46766663]
[275.97491455 -142.33241272]
[267.15814209 -130.19715881]
[258.34133911 -118.06190491]
[249.52458191 -105.92665100]
[240.70779419 -93.79138947]
[231.89102173 -81.65613556]
[223.28736877 -69.36885834]
[214.89947510 -56.93329239]
[217.98474121 -42.40687943]
[209.65538025 -29.67596054]
[194.39782715 -26.53833961]
[186.00993347 -14.10277557]
[177.62203979 -1.66721153]
[169.23414612 10.76835155]
[160.84625244 23.20391464]
[152.45835876 35.63948059]
[144.07046509 48.07504272]
[135.68257141 60.51060486]
[127.29467010 72.94616699]
[118.90677643 85.38173676]
[110.51888275 97.81729889]
[104.41783905 111.52047729]
[100.78900909 126.07491302]
[97.41474152 140.69046021]
[94.29606628 155.36268616]
[91.17739105 170.03489685]
[92.46235657 179.30529785]
[87.68534851 185.16059875]
[84.05651855 199.71502686]
[80.42768860 214.26947021]
[76.79885864 228.82389832]
[73.17003632 243.37834167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 89]
[9 88]
[10 87]
[11 86]
[12 85]
[13 83]
[14 82]
[15 81]
[17 80]
[18 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[42 65]
[43 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
