%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUGGAGGGGAGAUGAGGGUUGAGGGAACAUUCCAUGGGAGAGCAGGGUUUGAGCUCAUGACUGUGUUGUCCCUGUCCUUCCCCCCACCUCCUGCAGGUAC\
) } def
/len { sequence length } bind def

/coor [
[84.75797272 362.42385864]
[92.99717712 348.24472046]
[84.87900543 335.75695801]
[92.19596863 321.72940063]
[91.74292755 306.73623657]
[91.28987885 291.74307251]
[83.17170715 279.25531006]
[90.48867035 265.22775269]
[90.03562927 250.23457336]
[89.58258057 235.24142456]
[89.12953186 220.24826050]
[88.67649078 205.25511169]
[85.27164459 198.55287170]
[88.44309998 189.80377197]
[85.24223328 183.00175476]
[88.67649078 174.35244751]
[89.12953186 159.35928345]
[86.13557434 152.46369934]
[89.82949829 143.92204285]
[90.73517609 128.94941711]
[91.64085388 113.97678375]
[84.41107178 104.71286774]
[85.29766846 92.99520111]
[93.83902740 84.92458344]
[95.19651031 69.98613739]
[96.55399323 55.04768753]
[97.91147614 40.10923767]
[99.26895905 25.17078972]
[100.62644196 10.23234081]
[98.25978851 1.23213565]
[102.25720215 -5.13446808]
[104.06525421 -20.02510071]
[91.03536224 -12.59396458]
[76.49627686 -16.28382301]
[68.58692932 -29.02910614]
[71.73494720 -43.69505310]
[84.17807770 -52.07172012]
[98.95069885 -49.46987915]
[107.78329468 -37.34550095]
[112.24583435 -51.66631317]
[116.70838165 -65.98712921]
[121.17092896 -80.30793762]
[117.88956451 -95.78512573]
[129.06292725 -105.63424683]
[133.52546692 -119.95505524]
[137.98802185 -134.27586365]
[142.45056152 -148.59667969]
[139.16918945 -164.07386780]
[150.34255981 -173.92298889]
[154.80509949 -188.24380493]
[159.26765442 -202.56462097]
[163.73019409 -216.88542175]
[167.97593689 -231.27200317]
[172.00392151 -245.72106934]
[167.39741516 -261.45993042]
[178.91854858 -273.13021851]
[194.71536255 -268.72653198]
[198.53746033 -252.77900696]
[186.45298767 -241.69308472]
[182.42500305 -227.24403381]
[183.68174744 -219.83230591]
[178.05101013 -212.42288208]
[173.58847046 -198.10206604]
[169.12591553 -183.78125000]
[164.66337585 -169.46044922]
[168.26393127 -155.00758362]
[156.77137756 -144.13414001]
[152.30882263 -129.81332397]
[147.84628296 -115.49250793]
[143.38374329 -101.17169952]
[146.98429871 -86.71883392]
[135.49174500 -75.84539032]
[131.02919006 -61.52458191]
[126.56665039 -47.20376587]
[122.10410309 -32.88295364]
[118.95588684 -18.21705055]
[117.14783478 -3.32641768]
[115.56488800 11.58982468]
[114.20740509 26.52827263]
[112.84992218 41.46672058]
[111.49243927 56.40517044]
[110.13495636 71.34362030]
[108.77747345 86.28206635]
[116.23933411 101.22871399]
[106.61348724 114.88246155]
[105.70780945 129.85508728]
[104.80213165 144.82772827]
[104.12268829 159.81233215]
[103.66964722 174.80548096]
[103.44309998 189.80377197]
[103.66964722 204.80206299]
[104.12268829 219.79522705]
[104.57573700 234.78837585]
[105.02878571 249.78153992]
[105.48182678 264.77468872]
[113.63240814 278.33486938]
[106.28303528 291.29003906]
[106.73608398 306.28320312]
[107.18912506 321.27633667]
[115.33970642 334.83654785]
[107.99033356 347.79168701]
[117.07062531 361.44747925]
[109.54310608 376.01690674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 101]
[4 99]
[5 98]
[6 97]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[14 90]
[16 89]
[17 88]
[19 87]
[20 86]
[21 85]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[31 77]
[32 76]
[39 75]
[40 74]
[41 73]
[42 72]
[44 70]
[45 69]
[46 68]
[47 67]
[49 65]
[50 64]
[51 63]
[52 62]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
