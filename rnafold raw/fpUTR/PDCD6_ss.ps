%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAAUGCCAGGCCCUGCCCCCGGCAGAGGCGGAAGCGGAGUCGGCCUGAGAGGUCUCUCGUCGCUGCAGGCGCCUCAGCCCAGCCGCGUGCCUUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[92.17340851 109.26026154]
[77.47894287 112.27236938]
[62.78448105 115.28446960]
[54.06583023 128.19271851]
[39.12064743 131.03810120]
[26.86833572 122.64665222]
[12.17387390 125.65875244]
[-2.52058840 128.67086792]
[-9.23488045 144.10278320]
[-23.64850807 152.46607971]
[-40.04997635 150.67298889]
[-52.07306290 139.61634827]
[-66.66674042 143.08399963]
[-81.26042175 146.55163574]
[-95.79840088 150.24581909]
[-110.27717590 154.16564941]
[-124.75595856 158.08547974]
[-139.23472595 162.00531006]
[-153.71350098 165.92514038]
[-167.42221069 175.90049744]
[-180.80267334 165.48898315]
[-174.50212097 149.74923706]
[-157.63333130 151.44636536]
[-143.15455627 147.52653503]
[-128.67578125 143.60670471]
[-114.19700623 139.68687439]
[-99.71823120 135.76704407]
[-93.98346710 130.89488220]
[-84.72806549 131.95796204]
[-70.13438416 128.49031067]
[-55.54070663 125.02267456]
[-51.51991653 112.18952179]
[-41.57269287 102.97820282]
[-28.25683975 99.90470886]
[-15.07038307 103.88742828]
[-5.53269434 113.97640228]
[9.16176796 110.96429443]
[23.85622978 107.95218658]
[31.81895447 95.41701508]
[46.67831802 92.15297699]
[59.77237320 100.59001160]
[74.46683502 97.57790375]
[89.16130066 94.56579590]
[103.75497437 91.09815216]
[118.23374939 87.17832184]
[132.71252441 83.25849152]
[147.19129944 79.33866882]
[151.11174011 75.36656952]
[155.72383118 73.60192108]
[160.01956177 73.92031860]
[163.20332336 75.79614258]
[177.98434448 73.24249268]
[192.76538086 70.68883514]
[207.54641724 68.13518524]
[222.32743835 65.58152771]
[226.83961487 56.94439697]
[234.76826477 51.52224350]
[244.17680359 50.48077011]
[252.84040833 53.93448257]
[258.77206421 60.95027924]
[273.72674561 59.78501892]
[288.68139648 58.61976242]
[301.83880615 49.83379364]
[315.12869263 56.55900955]
[330.08337402 55.39375305]
[345.03802490 54.22849274]
[359.99270630 53.06323624]
[365.89813232 49.49321747]
[371.80609131 49.57020187]
[375.90835571 52.32011414]
[390.90655518 52.08683777]
[405.90472412 51.85356140]
[416.72357178 40.33277512]
[432.52246094 39.91993332]
[443.92822266 50.85996246]
[444.17401123 66.66233826]
[433.11398315 77.95179749]
[417.30990601 78.03049469]
[406.13800049 66.85174561]
[391.13983154 67.08502197]
[376.14163208 67.31829834]
[361.15795898 68.01790619]
[346.20327759 69.18316650]
[331.24862671 70.34841919]
[316.29394531 71.51367950]
[304.20620728 80.21630096]
[289.84667969 73.57443237]
[274.89199829 74.73969269]
[259.93731689 75.90494537]
[244.27474976 89.19022369]
[224.88108826 80.36256409]
[210.10006714 82.91621399]
[195.31903076 85.46986389]
[180.53800964 88.02352142]
[165.75697327 90.57717133]
[151.11112976 93.81744385]
[136.63235474 97.73727417]
[122.15357971 101.65709686]
[107.67480469 105.57692719]
[103.98303223 109.57054138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[6 38]
[7 37]
[8 36]
[12 31]
[13 30]
[14 29]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[44 99]
[45 98]
[46 97]
[47 96]
[51 95]
[52 94]
[53 93]
[54 92]
[55 91]
[60 89]
[61 88]
[62 87]
[64 85]
[65 84]
[66 83]
[67 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
