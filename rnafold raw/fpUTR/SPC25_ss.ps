%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGAAAUCGGAAAGUUGGCGGGGCUGCGGGAGCUGAGCCUAGAGUCCGGCUGUUGGCUAGAGUGGGCGCGGAUCUGGUGUGGGGAAGGCGGCGGGACUCAGGCCUGCCUGCGAAGCAUUGUCCUACAUA\
) } def
/len { sequence length } bind def

/coor [
[62.02203369 445.80740356]
[54.64933395 459.00341797]
[43.71343994 469.43881226]
[30.18676567 476.18569946]
[15.27209377 478.64416504]
[0.29562435 476.59555054]
[-13.41094303 470.22204590]
[-24.62882996 460.09039307]
[-32.36054993 447.10147095]
[-35.91860580 432.41027832]
[-34.98661041 417.32308960]
[-29.64744568 403.18148804]
[-20.37586021 391.24295044]
[-7.99627876 382.56900024]
[6.39051437 377.93093872]
[21.50525475 377.74118042]
[25.73124313 363.34878540]
[20.64910507 346.59527588]
[33.96456146 333.94149780]
[37.84684753 319.45260620]
[41.72913361 304.96371460]
[45.61141968 290.47482300]
[49.49370575 275.98593140]
[45.31410599 261.68978882]
[56.35951233 250.36239624]
[60.24179840 235.87350464]
[64.12408447 221.38462830]
[67.66046906 206.80744934]
[70.84894562 192.15025330]
[74.03742981 177.49304199]
[77.22590637 162.83584595]
[80.41438293 148.17863464]
[72.24302673 140.05491638]
[69.01753998 128.86770630]
[71.66386414 117.40583038]
[79.62874603 108.58609772]
[90.99051666 104.71112061]
[89.86556244 96.64366913]
[95.14143372 89.92575073]
[99.36742401 75.53336334]
[103.59341431 61.14096451]
[107.81940460 46.74856949]
[107.23840332 37.53264999]
[112.32099915 32.06617355]
[116.88829803 17.77842331]
[121.45559692 3.49067426]
[126.02289581 -10.79707527]
[130.59019470 -25.08482552]
[135.15748596 -39.37257385]
[131.98954773 -54.87337112]
[143.23474121 -64.64041138]
[147.80203247 -78.92815399]
[152.36932373 -93.21590424]
[156.93663025 -107.50365448]
[161.50392151 -121.79140472]
[166.07122803 -136.07916260]
[156.73629761 -152.47669983]
[162.16101074 -170.21763611]
[178.50250244 -178.30918884]
[182.38479614 -192.79808044]
[186.26707458 -207.28697205]
[182.36517334 -222.61947632]
[193.13288879 -232.91050720]
[189.23097229 -248.24301147]
[199.99870300 -258.53405762]
[203.88098145 -273.02294922]
[207.76327515 -287.51184082]
[211.64555359 -302.00073242]
[203.52734375 -315.56060791]
[207.45617676 -330.86877441]
[221.10112000 -338.84313965]
[236.36689758 -334.75268555]
[244.19657898 -321.02420044]
[239.94494629 -305.80252075]
[226.13444519 -298.11843872]
[222.25215149 -283.62954712]
[218.36987305 -269.14065552]
[214.48757935 -254.65177917]
[218.66717529 -240.35560608]
[207.62178040 -229.02822876]
[211.80137634 -214.73207092]
[200.75596619 -203.40467834]
[196.87368774 -188.91580200]
[192.99139404 -174.42691040]
[200.76695251 -165.92356873]
[203.45648193 -154.59556580]
[200.26777649 -143.27258301]
[191.89225769 -134.84182739]
[180.35897827 -131.51185608]
[175.79167175 -117.22410583]
[171.22438049 -102.93636322]
[166.65707397 -88.64861298]
[162.08978271 -74.36086273]
[157.52249146 -60.07310867]
[161.01710510 -45.59426880]
[149.44523621 -34.80527878]
[144.87794495 -20.51752853]
[140.31063843 -6.22977829]
[135.74334717 8.05797195]
[131.17605591 22.34572220]
[126.60874939 36.63347244]
[122.21179962 50.97455978]
[117.98580933 65.36695099]
[113.75981903 79.75934601]
[109.53382874 94.15174103]
[105.47940826 108.59340668]
[115.58398438 124.52819824]
[111.00956726 142.50717163]
[95.07158661 151.36711121]
[91.88311005 166.02432251]
[88.69462585 180.68151855]
[85.50614929 195.33872986]
[82.31767273 209.99592590]
[84.00363159 216.55220032]
[82.31128693 222.10632324]
[78.61296844 225.26690674]
[74.73068237 239.75579834]
[70.84839630 254.24468994]
[74.75031281 269.57717896]
[63.98259354 279.86822510]
[60.10030746 294.35711670]
[56.21802139 308.84600830]
[52.33573532 323.33489990]
[48.45344925 337.82379150]
[54.23144531 349.42642212]
[50.63074875 361.45883179]
[40.12363815 367.57476807]
[35.89765167 381.96716309]
[48.51038742 390.29846191]
[58.10580444 401.97833252]
[63.83068085 415.96823120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 128]
[17 127]
[19 124]
[20 123]
[21 122]
[22 121]
[23 120]
[25 118]
[26 117]
[27 116]
[28 113]
[29 112]
[30 111]
[31 110]
[32 109]
[37 106]
[39 105]
[40 104]
[41 103]
[42 102]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[59 84]
[60 83]
[61 82]
[63 80]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
