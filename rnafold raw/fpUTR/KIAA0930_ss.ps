%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCUUCCAGCCCAGACACCAGCCAGCCAGUGGCGUUCCUGGCUCCUCGGGAUUUUCCUUUUCCUCCGAAGCUGCUGAUUCAUCCCCAGGCUGGAGUCAGGCUCAGCUGUGGGGCUGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[77.78753662 383.37905884]
[61.43573761 382.13381958]
[54.58313370 367.23501587]
[64.27910614 354.00927734]
[65.41809845 339.05258179]
[66.55709839 324.09588623]
[67.69609070 309.13922119]
[68.83509064 294.18252563]
[69.97408295 279.22583008]
[71.11308289 264.26913452]
[72.25208282 249.31243896]
[73.39107513 234.35574341]
[74.53007507 219.39904785]
[75.66906738 204.44235229]
[73.55870056 201.48339844]
[72.84223175 197.32044983]
[74.08528900 192.65156555]
[77.50518036 188.40731812]
[79.77659607 173.58029175]
[82.04801178 158.75326538]
[79.92670441 151.58349609]
[84.56936646 143.58131409]
[87.21566010 128.81658936]
[89.86195374 114.05187225]
[83.43946838 109.95458221]
[78.88175201 102.90403748]
[77.51983643 93.82879639]
[62.51984024 93.82879639]
[47.51984024 93.82879639]
[31.68070793 99.87513733]
[21.48595238 86.32879639]
[31.68070793 72.78245544]
[47.51984024 78.82879639]
[62.51984024 78.82879639]
[77.51983643 78.82879639]
[90.14797211 70.73372650]
[84.89656830 56.06878281]
[91.44194031 42.33514404]
[105.45507812 37.41910934]
[111.71771240 23.78901672]
[117.98035431 10.15892410]
[124.24298859 -3.47116780]
[130.50561523 -17.10125923]
[136.76824951 -30.73135185]
[143.03088379 -44.36144257]
[149.29351807 -57.99153519]
[155.55615234 -71.62162781]
[157.63957214 -86.47623444]
[155.36816406 -101.30326080]
[153.09674072 -116.13028717]
[150.82531738 -130.95730591]
[148.55390930 -145.78433228]
[133.85299683 -149.75962830]
[122.04403687 -159.37568665]
[115.17301178 -172.96644592]
[114.43036652 -188.17724609]
[119.94476318 -202.37271118]
[130.76080322 -213.09339905]
[145.00454712 -218.48188782]
[160.20817566 -217.60456848]
[173.73756409 -210.61346436]
[183.24867249 -198.71981812]
[187.09362793 -183.98428345]
[184.60629272 -168.95986938]
[176.21759033 -156.24964905]
[163.38093567 -148.05575562]
[165.65234375 -133.22872925]
[167.92376709 -118.40170288]
[170.19519043 -103.57467651]
[172.46659851 -88.74765015]
[186.09669495 -82.48501587]
[198.82635498 -90.41947937]
[211.55601501 -98.35393524]
[224.28569031 -106.28839874]
[225.22850037 -123.12174225]
[235.88067627 -135.97589111]
[251.92483521 -139.94905090]
[267.03884888 -133.67805481]
[279.56341553 -141.93244934]
[286.42184448 -156.82856750]
[302.77410889 -158.06742859]
[311.79846191 -144.37460327]
[304.21136475 -129.83609009]
[287.81781006 -129.40786743]
[275.29324341 -121.15348053]
[275.91464233 -107.75421906]
[269.75891113 -95.71432495]
[258.35116577 -88.25344086]
[244.63653564 -87.42647552]
[232.22013855 -93.55873108]
[219.49047852 -85.62427521]
[206.76081848 -77.68981171]
[194.03115845 -69.75535583]
[169.18624878 -65.35899353]
[162.92361450 -51.72890091]
[156.66098022 -38.09880829]
[150.39834595 -24.46871567]
[144.13571167 -10.83862495]
[137.87307739 2.79146719]
[131.61044312 16.42155838]
[125.34780884 30.05165100]
[119.08517456 43.68174362]
[124.48286438 57.51649857]
[118.32582855 71.42856598]
[103.77806854 76.99636078]
[120.29020691 98.90822601]
[104.62668610 116.69816589]
[101.98038483 131.46289062]
[99.33409119 146.22761536]
[96.87503815 161.02467346]
[94.60362244 175.85169983]
[92.33219910 190.67872620]
[90.62576294 205.58134460]
[89.48677063 220.53804016]
[88.34777069 235.49473572]
[87.20877075 250.45143127]
[86.06977844 265.40811157]
[84.93077850 280.36480713]
[83.79178619 295.32150269]
[82.65278625 310.27819824]
[81.51378632 325.23489380]
[80.37479401 340.19158936]
[79.23579407 355.14828491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[13 114]
[14 113]
[18 112]
[19 111]
[20 110]
[22 109]
[23 108]
[24 107]
[27 35]
[28 34]
[29 33]
[36 105]
[39 102]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[71 93]
[72 92]
[73 91]
[74 90]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
