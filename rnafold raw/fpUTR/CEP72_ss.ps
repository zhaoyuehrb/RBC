%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGGUCCCGCCCCUCUCGUAGCCUCGCCCCGCCCGCCGCGCAGGCGCCGUCCGAGGGCUCCGUUUGAAAC\
) } def
/len { sequence length } bind def

/coor [
[46.63528442 202.27525330]
[44.59309387 187.41491699]
[47.61558533 172.72257996]
[55.35945129 159.87318420]
[40.94250488 164.01463318]
[26.52555656 168.15608215]
[12.10861015 172.29754639]
[4.41618586 185.84245300]
[-10.26364517 189.83709717]
[-23.12923241 182.42007446]
[-37.54618073 186.56152344]
[-43.73397446 200.92276001]
[-57.72847366 207.90045166]
[-72.92189789 204.19992065]
[-82.14038086 191.56846619]
[-81.03123474 175.97027588]
[-70.11816406 164.77032471]
[-54.55398560 163.25689697]
[-41.68763351 172.14457703]
[-27.27068710 168.00312805]
[-20.30301285 154.88873291]
[-5.74117517 150.48333740]
[7.96715593 157.88059998]
[22.38410187 153.73913574]
[36.80104828 149.59768677]
[51.21799469 145.45623779]
[55.28934479 140.48678589]
[61.91602707 138.09802246]
[70.94039154 126.11634064]
[79.96475220 114.13465118]
[88.98911285 102.15295410]
[97.75358582 89.97987366]
[106.25411224 77.62102509]
[103.58699799 62.27422714]
[112.38379669 49.86169434]
[127.03105927 47.41358948]
[135.53158569 35.05474091]
[136.97723389 19.29972076]
[150.56474304 13.19817066]
[159.06526184 0.83932585]
[167.56579590 -11.51951885]
[168.31820679 -27.90139580]
[183.00395203 -35.19940567]
[196.51559448 -25.90597916]
[194.95350647 -9.58139896]
[179.92463684 -3.01899290]
[171.42410278 9.33985233]
[162.92358398 21.69869804]
[162.08595276 36.56973267]
[147.89042664 43.55526733]
[139.38990784 55.91411209]
[142.34307861 70.46795654]
[133.89839172 83.12268066]
[118.61295319 86.12155151]
[110.11242676 98.48040009]
[108.42127991 106.63761902]
[100.97080231 111.17732239]
[91.94644165 123.15901184]
[82.92208099 135.14070129]
[73.89772034 147.12239075]
[88.66441345 144.48710632]
[103.46593475 146.91917419]
[116.61299133 154.14100647]
[126.60510254 165.32839966]
[132.30187988 179.20452881]
[133.05314636 194.18569946]
[128.77314758 208.56211853]
[119.95038605 220.69302368]
[107.59178925 229.19390869]
[93.10783386 233.09455872]
[78.15158081 231.94979858]
[64.42997742 225.89027405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[6 24]
[7 23]
[10 20]
[11 19]
[28 60]
[29 59]
[30 58]
[31 57]
[32 55]
[33 54]
[36 51]
[37 50]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
