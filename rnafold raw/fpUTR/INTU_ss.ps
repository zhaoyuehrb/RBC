%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGGCCUCUGCCCCUUCCCAAGCAGAGGCAACAUGGCGGCCUUAGCAAGCUAUAGCUGCGAGAUUUGAAUUACUCCACUCGUAGCUAUUGCAUUCCUGACG\
) } def
/len { sequence length } bind def

/coor [
[65.14695740 115.97070312]
[61.99640274 107.39247131]
[48.13821030 113.13272095]
[34.28001785 118.87297821]
[20.42182541 124.61322784]
[6.74332666 130.76942444]
[-6.74299479 137.33593750]
[-20.22931671 143.90245056]
[-33.71563721 150.46896362]
[-47.20196152 157.03547668]
[-60.68828201 163.60198975]
[-74.17460632 170.16851807]
[-87.66092682 176.73503113]
[-88.66253662 192.06121826]
[-97.20639801 204.82437134]
[-110.99425507 211.59124756]
[-126.31723785 210.54161072]
[-139.05354309 201.95777893]
[-145.77717590 188.14877319]
[-144.67950439 172.82916260]
[-136.05578613 160.11982727]
[-122.22578430 153.43951416]
[-106.90968323 154.58520508]
[-94.22743988 163.24870300]
[-80.74111938 156.68218994]
[-67.25479889 150.11567688]
[-53.76847458 143.54916382]
[-40.28215408 136.98263550]
[-26.79583168 130.41612244]
[-13.30951023 123.84960938]
[0.17681122 117.28309631]
[2.59241271 112.98593140]
[7.81555700 110.25104523]
[14.68157291 110.75503540]
[28.53976631 105.01477814]
[42.39796066 99.27452850]
[56.25615311 93.53427887]
[60.93447876 79.28250122]
[53.17441177 66.44577789]
[37.69605255 64.21994019]
[27.30826378 52.53115082]
[26.91584396 36.89849091]
[36.70408249 24.70322990]
[52.05127335 21.70359421]
[65.71093750 29.31592369]
[71.23340607 43.94590378]
[66.01113129 58.68571091]
[73.77120209 71.52243042]
[93.79934692 63.44411087]
[114.07057190 67.47270966]
[128.15837097 81.29969025]
[142.18360901 75.98061371]
[152.34332275 63.85250473]
[166.98721313 66.57385254]
[181.01245117 61.25477982]
[195.03768921 55.93570709]
[209.06294250 50.61663437]
[223.08818054 45.29755783]
[237.11341858 39.97848511]
[251.13867188 34.65941238]
[265.16390991 29.34033966]
[279.18914795 24.02126694]
[293.21438599 18.70219231]
[307.23965454 13.38311958]
[310.74023438 9.06272888]
[315.13992310 6.85739374]
[319.43289185 6.74317884]
[322.78253174 8.28097343]
[337.23156738 4.25299597]
[342.51986694 -10.33514309]
[355.39169312 -19.00092125]
[370.89758301 -18.41216850]
[383.07522583 -8.79527283]
[387.24206543 6.15187263]
[381.79583740 20.68178558]
[368.83074951 29.20741844]
[353.33215332 28.45049095]
[341.25955200 18.70205688]
[326.81048584 22.73003578]
[312.55871582 27.40836334]
[298.53347778 32.72743607]
[284.50823975 38.04650879]
[270.48297119 43.36558151]
[256.45773315 48.68465805]
[242.43249512 54.00373077]
[228.40725708 59.32280350]
[214.38200378 64.64187622]
[200.35676575 69.96095276]
[186.33152771 75.28002167]
[172.30627441 80.59909821]
[163.14976501 92.34674835]
[147.50268555 90.00585938]
[133.47744751 95.32492828]
[134.01356506 103.37167358]
[132.62167358 111.40606689]
[129.33879089 118.96772766]
[124.31141663 125.61340332]
[117.78949738 130.94290161]
[110.11416626 134.62307739]
[101.69998932 136.40843201]
[93.01262665 136.15708923]
[84.54306030 133.84114075]
[76.77986908 129.55050659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[5 34]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[38 48]
[39 47]
[51 93]
[52 92]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
