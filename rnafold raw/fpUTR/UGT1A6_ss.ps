%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGGUAAAAUUCAGAGCAAGGGAGAGGUAGACAGGACCUGUGAAAAGCAGUGGUUAGUUUAGGGAAAAUACCUAGGAGCCCUGUGAUUUGGAGAGUGAAAACUCUUUAUUACCGUUGUUACUUUAACUCUUUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[115.07234192 413.07492065]
[113.39287567 398.16921997]
[111.71340942 383.26354980]
[110.03394318 368.35787964]
[108.35447693 353.45217896]
[106.67501068 338.54650879]
[104.99553680 323.64080811]
[95.88188934 311.85986328]
[102.02540588 297.28018188]
[100.34593964 282.37448120]
[98.66647339 267.46881104]
[89.08765411 263.40164185]
[82.03897095 255.63575745]
[78.86731720 245.55392456]
[80.22096252 234.99011230]
[85.91840363 225.89605713]
[94.96933746 219.98056030]
[94.29636383 204.99566650]
[93.62339020 190.01077271]
[92.95042419 175.02586365]
[92.27745056 160.04096985]
[83.97692871 147.67364502]
[91.08729553 133.54023743]
[90.41432953 118.55534363]
[79.34254456 108.43528748]
[65.90339661 116.78393555]
[52.84180832 109.62543488]
[37.85691071 110.29840851]
[22.87201691 110.97138214]
[7.88712025 111.64435577]
[-1.47264767 124.17147827]
[-16.70667648 127.70111847]
[-30.62192154 120.56670380]
[-36.64803314 106.13687134]
[-31.93966103 91.22495270]
[-18.71995926 82.87190247]
[-3.23086286 85.02177429]
[7.21414804 96.65945435]
[22.19904327 95.98648834]
[37.18394089 95.31351471]
[52.16883469 94.64054108]
[64.53616333 86.34002686]
[78.66957092 93.45039368]
[88.41129303 82.04430389]
[86.73181915 67.13861847]
[85.05235291 52.23293686]
[72.97978973 42.38961792]
[71.48890686 27.24920845]
[80.94741058 15.80052471]
[79.26794434 0.89484161]
[77.58847046 -14.01084137]
[75.90900421 -28.91652489]
[71.80859375 -37.17339325]
[74.36295319 -44.17499161]
[73.01836395 -59.11460495]
[71.67377472 -74.05422211]
[70.32918549 -88.99383545]
[66.77109528 -94.72438049]
[66.71372986 -100.51143646]
[69.27486420 -104.63147736]
[68.60189056 -119.61637115]
[67.92892456 -134.60127258]
[67.25595093 -149.58616638]
[66.58297729 -164.57106018]
[65.91000366 -179.55595398]
[53.38288498 -188.91572571]
[49.85323715 -204.14974976]
[56.98765564 -218.06500244]
[71.41748810 -224.09111023]
[86.32940674 -219.38273621]
[94.68245697 -206.16304016]
[92.53258514 -190.67393494]
[80.89489746 -180.22892761]
[81.56787109 -165.24403381]
[82.24084473 -150.25914001]
[82.91381836 -135.27423096]
[83.58679199 -120.28934479]
[84.25976562 -105.30444336]
[85.26879883 -90.33842468]
[86.61338806 -75.39881134]
[87.95797729 -60.45919418]
[89.30256653 -45.51958084]
[90.81468964 -30.59599113]
[92.49415588 -15.69030857]
[94.17362213 -0.78462553]
[95.85308838 14.12105751]
[107.62201691 23.17798615]
[109.53757477 38.27054214]
[99.95803833 50.55346680]
[101.63750458 65.45915222]
[103.31697083 80.36483765]
[115.45222473 89.18161011]
[130.14735413 86.17277527]
[144.84248352 83.16393280]
[159.53761292 80.15509033]
[174.23275757 77.14624786]
[188.92788696 74.13740540]
[203.62301636 71.12856293]
[215.52597046 59.84798050]
[231.16757202 64.77470398]
[234.45706177 80.84054565]
[222.01051331 91.51834869]
[206.63185120 85.82369995]
[191.93672180 88.83253479]
[177.24159241 91.84137726]
[162.54646301 94.85021973]
[147.85133362 97.85906219]
[133.15620422 100.86790466]
[118.46106720 103.87674713]
[117.18216705 107.69585419]
[115.12492371 111.14921570]
[112.38619995 114.08078766]
[109.09352875 116.35894012]
[105.39922333 117.88237000]
[106.07219696 132.86726379]
[114.42084503 146.30641174]
[107.26234436 159.36799622]
[107.93531799 174.35290527]
[108.60829163 189.33779907]
[109.28125763 204.32269287]
[109.95423126 219.30758667]
[125.47891998 231.93875122]
[126.82263184 251.60514832]
[113.57215881 265.78933716]
[115.25162506 280.69500732]
[116.93109131 295.60070801]
[126.16487122 308.44781494]
[119.90122223 321.96136475]
[121.58068848 336.86703491]
[123.26015472 351.77270508]
[124.93962097 366.67840576]
[126.61909485 381.58407593]
[128.29855347 396.48977661]
[129.97802734 411.39544678]
[142.48902893 421.05206299]
[144.42448425 436.73739624]
[134.63613892 449.14559937]
[118.93122101 450.91513062]
[106.62719727 440.99612427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[4 131]
[5 130]
[6 129]
[7 128]
[9 126]
[10 125]
[11 124]
[17 121]
[18 120]
[19 119]
[20 118]
[21 117]
[23 115]
[24 114]
[25 43]
[27 41]
[28 40]
[29 39]
[30 38]
[44 91]
[45 90]
[46 89]
[49 86]
[50 85]
[51 84]
[52 83]
[54 82]
[55 81]
[56 80]
[57 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
