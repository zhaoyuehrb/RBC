%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUCAAGCUGCGCGGGGGCAUAGACGUCCGGGUCGGGCGCCGCGGGGCGGAAGACGAGGGCGGCGAGGUCGGGUUCCGGGCGCUUGGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[88.41040039 343.69882202]
[96.60900116 329.49615479]
[96.11305237 314.50436401]
[87.95917511 302.03988647]
[95.23596191 287.99142456]
[94.74001312 272.99963379]
[94.24406433 258.00784302]
[93.74810791 243.01603699]
[93.25215912 228.02423096]
[92.75621033 213.03244019]
[89.32071686 206.31903076]
[92.50000000 197.53852844]
[92.50000000 182.53852844]
[84.76270294 169.81126404]
[92.50000000 156.01109314]
[92.50000000 141.01109314]
[92.50000000 126.01109314]
[92.50000000 111.01109314]
[91.50864410 96.04388428]
[89.53025818 81.17492676]
[87.55187988 66.30596161]
[74.06687164 58.85876846]
[67.62797546 45.06043243]
[70.51454926 30.29115105]
[81.41390991 20.17472649]
[71.92406464 7.51560163]
[77.91514587 -6.12097502]
[75.93675995 -20.98993683]
[73.95838165 -35.85889816]
[71.97999573 -50.72785950]
[70.00161743 -65.59681702]
[57.73386383 -75.19577789]
[55.93931580 -90.30319977]
[65.16606140 -101.93947601]
[63.18767548 -116.80843353]
[61.20929337 -131.67739868]
[47.72428513 -139.12458801]
[41.28539276 -152.92292786]
[44.17196655 -167.69221497]
[55.07132339 -177.80863953]
[53.09294128 -192.67759705]
[51.11455917 -207.54655457]
[49.13617706 -222.41551208]
[38.71171951 -235.07501221]
[44.71554184 -250.33561707]
[60.97142792 -252.49853516]
[70.75671387 -239.33874512]
[64.00513458 -224.39390564]
[65.98352051 -209.52493286]
[67.96189880 -194.65597534]
[69.94028473 -179.78701782]
[83.10568237 -172.87251282]
[89.75370026 -159.37185669]
[87.14681244 -144.36993408]
[76.07825470 -133.65577698]
[78.05664062 -118.78681946]
[80.03501892 -103.91785431]
[91.98340607 -95.09902954]
[94.20158386 -80.04797363]
[84.87057495 -67.57520294]
[86.84896088 -52.70624161]
[88.82733917 -37.83728027]
[90.80572510 -22.96831894]
[92.78410339 -8.09935760]
[102.13243866 3.49624014]
[96.28286743 18.19634438]
[109.44826508 25.11084366]
[116.09628296 38.61150360]
[113.48939514 53.61342239]
[102.42083740 64.32758331]
[104.39922333 79.19654083]
[106.37760162 94.06550598]
[108.85458374 96.20436096]
[110.53671265 99.36157990]
[111.01866150 103.21549988]
[110.03165436 107.28955841]
[107.50000000 111.01109314]
[107.50000000 126.01109314]
[107.50000000 141.01109314]
[107.50000000 156.01109314]
[115.23729706 169.81126404]
[107.50000000 182.53852844]
[107.50000000 197.53852844]
[107.74800873 212.53648376]
[108.24395752 227.52828979]
[108.73991394 242.52008057]
[109.23586273 257.51187134]
[109.73181152 272.50369263]
[110.22776031 287.49548340]
[118.41711426 301.03228760]
[111.10485077 314.00842285]
[111.60079956 329.00021362]
[120.72013092 342.62994385]
[113.23433685 357.22088623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 92]
[3 91]
[5 89]
[6 88]
[7 87]
[8 86]
[9 85]
[10 84]
[12 83]
[13 82]
[15 80]
[16 79]
[17 78]
[18 77]
[19 72]
[20 71]
[21 70]
[25 66]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[34 57]
[35 56]
[36 55]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
