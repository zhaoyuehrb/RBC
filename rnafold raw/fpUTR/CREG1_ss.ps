%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGCCUGGGCGCGCCGAGCUCCGGCUGGGUCCCUGCAGGUCUUGGGGCCCGGGACUCUUCCUGGAGACACCGCC\
) } def
/len { sequence length } bind def

/coor [
[88.88088989 193.48048401]
[88.88088989 178.48048401]
[88.88088989 163.48048401]
[88.88088989 148.48048401]
[88.88088989 133.48048401]
[74.73440552 117.70933533]
[73.58048248 99.27449799]
[82.70101929 86.39992523]
[74.77472687 73.66516876]
[66.84843445 60.93042374]
[58.92213821 48.19567108]
[50.99584579 35.46092224]
[43.06954956 22.72617149]
[35.14325714 9.99142075]
[27.74987030 4.16409826]
[27.16667175 -3.41096067]
[20.01080322 -9.52761078]
[19.72922325 -17.11986732]
[12.83976460 -30.44410706]
[5.95030499 -43.76834488]
[-0.93915451 -57.09258652]
[-7.82861376 -70.41682434]
[-20.01141930 -75.16444397]
[-25.41523933 -86.62503052]
[-21.57901764 -98.27591705]
[-27.93330383 -111.86351776]
[-40.78808212 -121.08660889]
[-39.17083740 -135.89315796]
[-45.52512360 -149.48075867]
[-58.37990189 -158.70384216]
[-56.76265717 -173.51039124]
[-63.11694336 -187.09799194]
[-75.30372620 -198.88436890]
[-67.35159302 -213.85768127]
[-50.76208115 -210.36135864]
[-49.52933884 -193.45228577]
[-43.17505264 -179.86466980]
[-30.77477646 -171.61346436]
[-31.93751907 -155.83503723]
[-25.58323097 -142.24743652]
[-13.18295670 -133.99623108]
[-14.34569836 -118.21781158]
[-7.99141121 -104.63020325]
[6.88252735 -95.54041290]
[5.49562550 -77.30628204]
[12.38508511 -63.98204422]
[19.27454376 -50.65780640]
[26.16400337 -37.33356476]
[33.05346298 -24.00932693]
[40.20647430 -10.82469845]
[47.87800598 2.06512666]
[55.80430222 14.79987717]
[63.73059464 27.53462791]
[71.65689087 40.26937866]
[79.58318329 53.00412750]
[87.50947571 65.73887634]
[95.43576813 78.47363281]
[119.08715820 78.64513397]
[135.11305237 103.41339111]
[148.82431030 109.49626923]
[162.53556824 115.57914734]
[176.24682617 121.66202545]
[192.48770142 119.38912964]
[202.36183167 132.48239136]
[195.71156311 147.47259521]
[179.37811279 148.93908691]
[170.16394043 135.37329102]
[156.45268250 129.29040527]
[142.74142456 123.20752716]
[129.03016663 117.12464142]
[122.74285126 121.21360779]
[123.53813171 136.19250488]
[110.16821289 129.39152527]
[103.88088989 133.48048401]
[103.88088989 148.48048401]
[103.88088989 163.48048401]
[103.88088989 178.48048401]
[103.88088989 193.48048401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[16 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[25 43]
[26 42]
[28 40]
[29 39]
[31 37]
[32 36]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
