%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUGGGCGGUAAAAUAGCCCUUCUGUUACUGUCCGGGGCUGCGGGGUGAGAGGCCAGGGCCGAGAAGGGCUUCAGGACGCGGGAGGCGCACUUGCUUCAAGUCGCGGGCGUGGGAACGGGGUUGCAAAACGGGGCCUCUUUGUCCGGGCUUGCUUCCGGCGUC\
) } def
/len { sequence length } bind def

/coor [
[113.28433228 134.15534973]
[93.22290802 137.48202515]
[73.67615509 129.49263000]
[63.32497025 140.34863281]
[52.97378540 151.20465088]
[42.62260056 162.06065369]
[32.27141571 172.91667175]
[21.92023087 183.77267456]
[11.56904602 194.62869263]
[1.21786058 205.48469543]
[-9.13332462 216.34071350]
[-19.48451042 227.19671631]
[-21.43283844 233.59136963]
[-25.69637299 237.43487549]
[-30.44245148 238.25949097]
[-41.19942856 248.71354675]
[-51.95640564 259.16760254]
[-62.71338272 269.62167358]
[-64.37927246 285.57800293]
[-77.97019958 294.10244751]
[-93.06037903 288.65579224]
[-98.07390594 273.41622925]
[-89.16484070 260.07424927]
[-73.16744232 258.86468506]
[-62.41046906 248.41062927]
[-51.65349197 237.95657349]
[-40.89651489 227.50250244]
[-30.34052086 216.84553528]
[-19.98933601 205.98953247]
[-9.63815022 195.13351440]
[0.71303517 184.27751160]
[11.06422043 173.42149353]
[21.41540527 162.56549072]
[31.76659012 151.70947266]
[42.11777496 140.85346985]
[52.46895981 129.99745178]
[62.82014465 119.14144135]
[58.45733643 104.78993225]
[43.81547546 101.53172302]
[29.17361641 98.27350616]
[14.53175640 95.01529694]
[-0.61957330 99.57027435]
[-11.36231804 89.25316620]
[-23.66513443 98.90586853]
[-39.29249573 98.34050751]
[-50.86563492 87.82402802]
[-52.92007828 72.32198334]
[-44.48577118 59.15397263]
[-29.54514313 54.53752518]
[-15.15269661 60.65238571]
[-8.10410690 74.61130524]
[5.99993896 69.82328033]
[17.78996849 80.37343597]
[32.43182755 83.63165283]
[47.07368851 86.88986206]
[61.71554565 90.14807129]
[67.42034912 83.21823120]
[74.16377258 78.26324463]
[65.11754608 66.29804993]
[56.07132721 54.33285522]
[47.02510834 42.36766052]
[37.97888565 30.40246773]
[22.29241371 28.47629166]
[12.62838650 15.97100830]
[14.72030067 0.30577770]
[27.32706070 -9.22549534]
[42.96929932 -6.96807623]
[52.36675262 5.73874903]
[49.94408035 21.35624504]
[58.99030304 33.32144165]
[68.03652191 45.28663635]
[77.08274078 57.25182724]
[86.12896729 69.21702576]
[99.60295105 66.23848724]
[113.14325714 68.89932251]
[124.48817444 76.75507355]
[131.74269104 88.49354553]
[146.62797546 86.64188385]
[161.51324463 84.79022980]
[176.39851379 82.93856812]
[191.28378296 81.08690643]
[204.02328491 71.70523834]
[217.60833740 77.81224823]
[232.49360657 75.96059418]
[247.37889099 74.10893250]
[262.26416016 72.25727081]
[277.14944458 70.40560913]
[292.03469849 68.55394745]
[304.73013306 60.56483459]
[312.83975220 47.94602966]
[320.82885742 35.25059509]
[328.69674683 22.47968292]
[336.56466675 9.70877075]
[344.43255615 -3.06214237]
[352.30044556 -15.83305550]
[355.46066284 -32.48986435]
[372.34136963 -34.06420898]
[378.52722168 -18.27904129]
[365.07135010 -7.96515989]
[357.20346069 4.80575323]
[349.33557129 17.57666588]
[341.46768188 30.34757996]
[333.59979248 43.11849213]
[332.76483154 50.49627686]
[325.45855713 56.05564117]
[317.34893799 68.67444611]
[323.05618286 82.54626465]
[337.69805908 85.80447388]
[352.33990479 89.06268311]
[366.98178101 92.32089233]
[382.13311768 87.76592255]
[392.87585449 98.08303070]
[407.51770020 101.34123993]
[422.15957642 104.59944916]
[436.80142212 107.85765839]
[449.30264282 96.49615479]
[465.94570923 94.82444000]
[480.17172241 103.30285645]
[486.49227905 118.43052673]
[501.19351196 121.40937805]
[515.89477539 124.38823700]
[530.59600830 127.36709595]
[545.29724121 130.34594727]
[559.99847412 133.32481384]
[575.06036377 128.48219299]
[585.99755859 138.59291077]
[600.10937500 130.96160889]
[614.81738281 137.36897278]
[618.83880615 152.89982605]
[609.08886719 165.64021301]
[593.04675293 165.81681824]
[583.01867676 153.29414368]
[569.00836182 158.34982300]
[557.01959229 148.02604675]
[542.31835938 145.04719543]
[527.61712646 142.06832886]
[512.91589355 139.08947754]
[498.21466064 136.11062622]
[483.51342773 133.13175964]
[474.53683472 143.04803467]
[461.72628784 147.25669861]
[448.40536499 144.55296326]
[438.08609009 135.54025269]
[433.54321289 122.49951935]
[418.90136719 119.24131012]
[404.25949097 115.98310089]
[389.61764526 112.72489166]
[375.51358032 117.51290894]
[363.72357178 106.96275330]
[349.08169556 103.70454407]
[334.43984985 100.44633484]
[319.79797363 97.18811798]
[293.88635254 83.43922424]
[279.00109863 85.29088593]
[264.11581421 87.14253998]
[249.23054504 88.99420166]
[234.34527588 90.84586334]
[219.46000671 92.69752502]
[207.78520203 101.94675446]
[193.13545227 95.97217560]
[178.25018311 97.82383728]
[163.36489868 99.67549896]
[148.47962952 101.52716064]
[133.59436035 103.37882233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[15 27]
[16 26]
[17 25]
[18 24]
[38 56]
[39 55]
[40 54]
[41 53]
[43 51]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[77 164]
[78 163]
[79 162]
[80 161]
[81 160]
[83 158]
[84 157]
[85 156]
[86 155]
[87 154]
[88 153]
[89 106]
[90 105]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[107 152]
[108 151]
[109 150]
[110 149]
[112 147]
[113 146]
[114 145]
[115 144]
[119 139]
[120 138]
[121 137]
[122 136]
[123 135]
[124 134]
[126 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
