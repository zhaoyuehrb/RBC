%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAACGGUUGGGGCUGCGCGUGAGAAGGUGGCGGUGUAGGCACCUGUGCUCGGGGAAGGCUGGCGGCGGCGGCCGGGCCAUGGCCAGAGACCCCCUCCUCUGGGCUCCCUGAAGUCCUGGGGAGCCGUGACCC\
) } def
/len { sequence length } bind def

/coor [
[91.33147430 319.41445923]
[76.20723724 323.38830566]
[62.08921051 316.66406250]
[55.64348984 302.41671753]
[59.91354752 287.37344360]
[72.88319397 278.63717651]
[74.28781891 263.70309448]
[75.69243622 248.76899719]
[77.09706116 233.83491516]
[78.50168610 218.90081787]
[71.99018097 205.50494385]
[80.98575592 192.48994446]
[82.39037323 177.55584717]
[83.79499817 162.62176514]
[85.19962311 147.68766785]
[74.84458160 136.83534241]
[59.86106491 137.53842163]
[44.87755203 138.24150085]
[29.89403915 138.94459534]
[39.76962280 150.23497009]
[38.98545456 165.21446228]
[27.98498726 175.41200256]
[12.98910046 175.06077576]
[2.47812080 164.35940552]
[2.39611530 149.35961914]
[12.79045582 138.54353333]
[-2.14363384 137.13890076]
[-17.07772446 135.73428345]
[-32.01181412 134.32966614]
[-46.94590378 132.92503357]
[-61.40996933 139.33607483]
[-73.35678864 130.44096375]
[-85.36809540 140.71247864]
[-101.11770630 139.39898682]
[-111.26165771 127.27975464]
[-109.78171539 111.54490662]
[-97.55591583 101.52965546]
[-81.83759308 103.17587280]
[-71.95216370 115.50687408]
[-58.55628204 108.99537659]
[-45.54127884 117.99094391]
[-30.60719109 119.39556885]
[-15.67310143 120.80019379]
[-0.73901153 122.20481110]
[14.19507790 123.60943604]
[29.19095612 123.96107483]
[44.17446899 123.25798798]
[59.15798187 122.55490875]
[74.14149475 121.85182190]
[69.12075043 98.26292419]
[80.77465820 79.64201355]
[100.02552795 74.92589569]
[104.52680206 60.61720657]
[109.02806854 46.30851746]
[113.52933502 31.99983025]
[103.26451111 20.66049576]
[100.07472992 5.80377531]
[104.71875000 -8.55935287]
[115.85407257 -18.60228729]
[130.42308044 -21.70221138]
[134.92436218 -36.01090240]
[139.42562866 -50.31958771]
[143.92689514 -64.62828064]
[148.42816162 -78.93696594]
[145.18867493 -94.42296600]
[156.38864136 -104.24182892]
[153.14915466 -119.72782898]
[164.34912109 -129.54669189]
[168.85038757 -143.85537720]
[173.35165405 -158.16406250]
[165.82360840 -172.06025696]
[170.40657043 -187.18545532]
[184.38156128 -194.56617737]
[199.45747375 -189.82354736]
[206.69003296 -175.77130127]
[201.78828430 -160.74638367]
[187.66035461 -153.66279602]
[183.15907288 -139.35411072]
[178.65780640 -125.04542542]
[182.21925354 -110.58287048]
[170.69732666 -99.74056244]
[174.25877380 -85.27800751]
[162.73684692 -74.43569946]
[158.23558044 -60.12701035]
[153.73431396 -45.81832123]
[149.23304749 -31.50963020]
[144.73178101 -17.20094299]
[154.90214539 -6.31842899]
[158.28231812 8.29083061]
[153.86691284 22.72587967]
[142.74601746 33.08070374]
[127.83802795 36.50109863]
[123.33675385 50.80978775]
[118.83548737 65.11847687]
[114.33422089 79.42716217]
[129.46452332 100.06117249]
[119.23854065 127.85754395]
[132.92259216 134.00140381]
[146.60662842 140.14526367]
[160.29066467 146.28910828]
[176.04927063 144.88302612]
[184.49084473 157.15449524]
[198.17489624 163.29835510]
[211.85893250 169.44221497]
[225.54298401 175.58605957]
[239.22702026 181.72991943]
[253.90829468 175.87875366]
[268.39370728 182.19924927]
[274.08929443 196.94155884]
[267.61602783 211.35932922]
[252.81433105 216.89875793]
[238.46580505 210.27340698]
[233.08317566 195.41395569]
[219.39912415 189.27011108]
[205.71508789 183.12625122]
[192.03103638 176.98239136]
[178.34700012 170.83854675]
[163.56716919 172.68408203]
[154.14682007 159.97315979]
[140.46276855 153.82929993]
[126.77873230 147.68544006]
[113.09468842 141.54159546]
[100.13371277 149.09228516]
[98.72908783 164.02638245]
[97.32446289 178.96046448]
[95.91984558 193.89456177]
[102.33087921 208.35862732]
[93.43577576 220.30545044]
[92.03115082 235.23953247]
[90.62652588 250.17362976]
[89.22190857 265.10772705]
[87.81728363 280.04180908]
[98.93051147 291.04318237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 132]
[7 131]
[8 130]
[9 129]
[10 128]
[12 126]
[13 125]
[14 124]
[15 123]
[16 49]
[17 48]
[18 47]
[19 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[32 39]
[52 95]
[53 94]
[54 93]
[55 92]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[66 81]
[68 79]
[69 78]
[70 77]
[97 122]
[98 121]
[99 120]
[100 119]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
