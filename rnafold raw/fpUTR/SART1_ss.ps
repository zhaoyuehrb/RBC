%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACGACAGCGGCUGCCGAGCGACCCGGAAGUAUUCCCAUUUUGCGUUGUCUGGGCUCGGCGGCAGCCGGGCUCGGAGUGGACGUGCCACU\
) } def
/len { sequence length } bind def

/coor [
[178.12097168 327.73919678]
[172.65298462 321.20159912]
[170.31138611 312.90737915]
[171.58103943 304.28640747]
[176.31710815 296.85824585]
[170.40176392 283.07385254]
[164.48641968 269.28948975]
[149.94401550 266.18203735]
[139.90112305 254.97470093]
[138.36528015 239.82562256]
[146.13397217 226.52323914]
[140.21864319 212.73887634]
[134.30329895 198.95449829]
[128.38796997 185.17013550]
[122.47262573 171.38577271]
[116.55728912 157.60139465]
[110.64195251 143.81703186]
[104.72661591 130.03266907]
[98.81127167 116.24829865]
[88.17143250 111.20291901]
[83.71112823 100.30485535]
[87.76052856 89.24752808]
[82.31412506 75.27124023]
[76.86771393 61.29494858]
[71.18603516 47.41264343]
[65.27069092 33.62827301]
[59.35535431 19.84390831]
[53.44001770 6.05954027]
[47.52468109 -7.72482681]
[41.60934067 -21.50919342]
[23.62998199 -32.90527725]
[26.11567688 -53.27414322]
[18.83614922 -66.38934326]
[11.55661869 -79.50453949]
[-3.84495950 -80.39612579]
[-16.30610466 -89.49137115]
[-21.85051155 -103.88800049]
[-18.70897865 -118.99211884]
[-7.88395929 -129.98405457]
[7.17032337 -133.35630798]
[21.65010262 -128.03280640]
[30.93493271 -115.71228027]
[32.06205750 -100.32614899]
[24.67181778 -86.78407288]
[31.95134735 -73.66886902]
[39.23087692 -60.55367279]
[48.40516663 -59.46813583]
[56.09578323 -54.10154724]
[60.40682220 -45.61628723]
[60.20040512 -35.96123505]
[55.39371109 -27.42453194]
[61.30904770 -13.64016438]
[67.22438812 0.14420259]
[73.13972473 13.92856979]
[79.05506134 27.71293640]
[84.97039795 41.49730301]
[90.61714935 46.50493622]
[90.84400177 55.84854126]
[96.29041290 69.82482910]
[101.73681641 83.80111694]
[115.07778168 93.82904053]
[112.59564209 110.33296204]
[118.51097870 124.11732483]
[124.42631531 137.90170288]
[130.34165955 151.68606567]
[136.25698853 165.47042847]
[142.17233276 179.25479126]
[148.08766174 193.03916931]
[154.00300598 206.82353210]
[159.91835022 220.60789490]
[174.91220093 224.14210510]
[184.83398438 235.69248962]
[186.03776550 250.69299316]
[178.27079773 263.37417603]
[184.18612671 277.15853882]
[190.10147095 290.94290161]
[209.14500427 302.53027344]
[206.88827515 323.97027588]
[214.60659790 336.83212280]
[222.32493591 349.69400024]
[230.04325867 362.55584717]
[237.76159668 375.41769409]
[252.91464233 380.68695068]
[258.10662842 395.86663818]
[249.35470581 409.31219482]
[233.37260437 410.70938110]
[222.42042542 398.98635864]
[224.89973450 383.13604736]
[217.18141174 370.27416992]
[209.46307373 357.41232300]
[201.74473572 344.55047607]
[194.02641296 331.68859863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 76]
[6 75]
[7 74]
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[19 62]
[22 60]
[23 59]
[24 58]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[32 46]
[33 45]
[34 44]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
