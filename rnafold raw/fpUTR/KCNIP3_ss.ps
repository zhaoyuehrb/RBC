%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAUUACGUCUGGGUCCAAGCAAACAUGAGGCAGCUGCCAGCCGGCCUGGGCAGUCUUGUCUGCCUCGGCUGUGAAGUGGGGAGGCUGGCAACAGUUUUCUUCAGCGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[-59.09769440 519.78009033]
[-64.66223145 533.95593262]
[-75.51609039 544.63836670]
[-89.77878571 549.97644043]
[-104.97921753 549.04541016]
[-118.48381805 542.00653076]
[-127.95282745 530.07934570]
[-131.74568176 515.33032227]
[-129.20526123 500.31478882]
[-120.77169800 487.63430786]
[-107.90615845 479.48580933]
[-92.83767700 477.28112793]
[-88.82475281 462.82788086]
[-84.81182861 448.37460327]
[-80.79889679 433.92135620]
[-76.78597260 419.46810913]
[-72.77304840 405.01486206]
[-74.16286469 402.43429565]
[-74.54307556 399.11245728]
[-73.61196899 395.45880127]
[-71.23235321 391.98904419]
[-67.46492767 389.26092529]
[-61.91285706 375.32626343]
[-76.67009735 378.01397705]
[-88.15267944 368.36251831]
[-88.04324341 353.36291504]
[-76.42105103 343.88006592]
[-61.70459366 346.78280640]
[-54.55366135 359.96881104]
[-47.17123795 346.91125488]
[-39.78881454 333.85369873]
[-32.40638733 320.79614258]
[-25.02396393 307.73858643]
[-26.18659401 290.28536987]
[-10.38382721 280.95388794]
[-3.35770106 267.70120239]
[3.66842556 254.44851685]
[10.69455242 241.19583130]
[17.72067833 227.94314575]
[12.23637390 216.19810486]
[14.59421158 203.25328064]
[24.14700508 193.92309570]
[37.52982712 191.81001282]
[44.91225052 178.75245667]
[52.29467773 165.69490051]
[59.67710114 152.63732910]
[67.05952454 139.57977295]
[74.44194794 126.52221680]
[81.82437134 113.46466064]
[89.20679474 100.40710449]
[93.60963440 86.06782532]
[94.82701874 71.11730194]
[96.04439545 56.16678619]
[97.26177979 41.21627045]
[98.47916412 26.26575279]
[99.69654083 11.31523418]
[89.27532196 -0.56642407]
[90.39136505 -16.33125877]
[102.38254547 -26.62627220]
[118.13469696 -25.34361649]
[128.30235291 -13.24426746]
[126.85323334 2.49344468]
[114.64705658 12.53261471]
[113.42967987 27.48313332]
[112.21229553 42.43365097]
[110.99491882 57.38416672]
[109.77753448 72.33468628]
[108.56015778 87.28520203]
[121.61771393 94.66762543]
[128.31216431 80.33253479]
[143.16300964 79.19165802]
[155.34584045 70.44074249]
[167.52867126 61.68982315]
[173.78308105 46.53018951]
[190.07238770 44.63535309]
[199.63955688 57.95455551]
[192.64270020 72.78614807]
[176.27958679 73.87265778]
[164.09675598 82.62357330]
[151.91392517 91.37449646]
[146.09088135 105.08366394]
[130.36863708 106.85046387]
[119.65792084 112.80097961]
[109.40457916 112.67781067]
[102.26435852 107.78952789]
[94.88193512 120.84708405]
[87.49950409 133.90464783]
[80.11708069 146.96220398]
[72.73465729 160.01976013]
[65.35223389 173.07731628]
[57.96981049 186.13487244]
[50.58738327 199.19242859]
[55.59267807 215.88768005]
[47.19816208 230.77786255]
[30.97336006 234.96928406]
[23.94723320 248.22195435]
[16.92110634 261.47463989]
[9.89497948 274.72732544]
[2.86885309 287.98001099]
[5.90462446 300.60525513]
[-0.32580706 311.53689575]
[-11.96640682 315.12100220]
[-19.34883118 328.17858887]
[-26.73125648 341.23614502]
[-34.11368179 354.29370117]
[-41.49610519 367.35125732]
[-47.97820663 380.87835693]
[-53.53027725 394.81298828]
[-58.31980133 409.02780151]
[-62.33272552 423.48104858]
[-66.34564972 437.93429565]
[-70.35857391 452.38754272]
[-74.37149811 466.84078979]
[-78.38442230 481.29403687]
[-66.60952759 490.95178223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[17 109]
[22 108]
[23 107]
[29 106]
[30 105]
[31 104]
[32 103]
[33 102]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[43 92]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[69 82]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
