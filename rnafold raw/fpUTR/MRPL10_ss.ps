%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGGCUUCCGUCCAUUCUUCCGGUGGAGAUGGCUGCGGCCGUGGCGGGGAUGCUGCGAGGGGGUCUCCUGCCCCAGGCGGGCUAGAGUGCAGUGGC\
) } def
/len { sequence length } bind def

/coor [
[140.28126526 291.73492432]
[136.51405334 277.21569824]
[132.74682617 262.69647217]
[128.97961426 248.17724609]
[124.98249817 233.71960449]
[120.75651550 219.32720947]
[116.53052521 204.93481445]
[112.68143463 201.83024597]
[110.85536194 196.20176697]
[112.52425385 189.49426270]
[109.21959686 174.86280823]
[105.91493225 160.23136902]
[102.61027527 145.59991455]
[99.30561829 130.96847534]
[87.79926300 130.62759399]
[76.53633118 125.91677856]
[67.19559479 117.01015472]
[61.34365082 104.72753143]
[60.18858719 90.46907806]
[45.19047546 90.70706940]
[30.19236374 90.94505310]
[15.19425106 91.18304443]
[1.40965855 100.06657410]
[-13.05033016 92.33088684]
[-13.31051826 75.93380737]
[0.89675307 67.74323273]
[14.95626163 76.18492889]
[29.95437431 75.94694519]
[44.95248413 75.70895386]
[59.95059586 75.47096252]
[65.74577332 61.63565063]
[55.39458847 50.77964020]
[45.04340363 39.92362976]
[34.69221878 29.06761742]
[24.34103394 18.21160698]
[8.46229267 14.11311626]
[4.33362150 -1.75780356]
[16.20224190 -13.07451057]
[31.85873604 -8.19534683]
[35.19704437 7.86042261]
[45.54822922 18.71643257]
[55.89941406 29.57244301]
[66.25060272 40.42845535]
[76.60178375 51.28446579]
[91.57158661 50.33310699]
[100.46520233 38.25405121]
[109.35882568 26.17499733]
[118.25244141 14.09594440]
[127.14605713 2.01689053]
[136.03967285 -10.06216335]
[144.74053955 -22.28080177]
[153.24642944 -34.63595200]
[161.75233459 -46.99110031]
[163.20481873 -62.74549103]
[176.79498291 -68.84113312]
[185.30087280 -81.19628143]
[183.81549072 -97.17042542]
[195.47787476 -108.18715668]
[211.34164429 -105.79538727]
[219.23745728 -91.82987976]
[213.10835266 -77.00376892]
[197.65602112 -72.69038391]
[189.15013123 -60.33523560]
[188.30603027 -45.46456909]
[174.10748291 -38.48520279]
[165.60157776 -26.13005257]
[157.09568787 -13.77490520]
[155.87330627 -6.34454918]
[148.11872864 -1.16854453]
[139.22511292 10.91050911]
[130.33149719 22.98956299]
[121.43787384 35.06861877]
[112.54425812 47.14767075]
[103.65064240 59.22672653]
[125.80158234 71.49736786]
[135.31809998 93.25546265]
[130.02149963 114.78856659]
[113.93706512 127.66381836]
[117.24172211 142.29525757]
[120.54637909 156.92671204]
[123.85104370 171.55815125]
[127.15570068 186.18960571]
[130.92291260 200.70883179]
[135.14891052 215.10122681]
[139.37489319 229.49362183]
[144.89151001 237.00968933]
[143.49884033 244.41001892]
[147.26605225 258.92926025]
[151.03327942 273.44848633]
[154.80049133 287.96771240]
[169.48934937 292.68377686]
[179.27905273 304.60705566]
[181.04576111 319.93295288]
[174.22570801 333.77093506]
[160.99516296 341.70544434]
[145.57594299 341.20452881]
[132.88824463 332.42810059]
[126.98069000 318.17663574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 85]
[6 84]
[7 83]
[10 82]
[11 81]
[12 80]
[13 79]
[14 78]
[19 30]
[20 29]
[21 28]
[22 27]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 67]
[52 66]
[53 65]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
