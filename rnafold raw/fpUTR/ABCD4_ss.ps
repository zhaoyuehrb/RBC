%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCGGUCGCUUCCGGGAGAGUCCGCGUCUCCCGCACCUUCCUCUCUAUCAAACGCCGUCUCUGUGGUAGCCGGGGCCCCGCCCCUCCUCGGACUCUACCCAGUACUGAACUAGGGGCAGCUGGGCUCCAGAGUCCCUCGGGUCUCAGGUC\
) } def
/len { sequence length } bind def

/coor [
[42.03659439 118.20455933]
[32.79534912 122.35630035]
[22.46786118 123.40321350]
[12.09445953 121.08242798]
[2.76960659 115.47830200]
[-4.47336340 107.02909088]
[-16.44362259 116.06860352]
[-28.41387939 125.10812378]
[-33.41608047 132.82653809]
[-40.72398758 134.20735168]
[-52.87732315 142.99919128]
[-54.55162048 147.15808105]
[-57.21767807 150.22659302]
[-60.39803696 152.02438354]
[-63.60638809 152.54948425]
[-66.40806580 151.96499634]
[-79.24172211 159.73013306]
[-92.07537079 167.49525452]
[-104.90902710 175.26039124]
[-117.74268341 183.02552795]
[-130.57633972 190.79066467]
[-132.79605103 206.26991272]
[-144.48074341 216.66230774]
[-160.11325073 217.06089783]
[-172.31237793 207.27748108]
[-175.31806946 191.93147278]
[-167.71113586 178.26879883]
[-153.08334351 172.74055481]
[-138.34147644 177.95701599]
[-125.50781250 170.19187927]
[-112.67416382 162.42674255]
[-99.84050751 154.66160583]
[-87.00685120 146.89646912]
[-74.17320251 139.13133240]
[-61.66916275 130.84585571]
[-49.51583099 122.05401611]
[-37.45339966 113.13787079]
[-25.48314095 104.09835052]
[-13.51288319 95.05883026]
[-28.35154915 97.25290680]
[-43.19021606 99.44698334]
[-55.35087585 108.22869110]
[-69.95481873 111.65285492]
[-84.75154877 109.19179535]
[-97.46085358 101.22476959]
[-106.12421417 88.97952271]
[-109.40658569 74.34305573]
[-106.80214691 59.57089233]
[-98.71224213 46.93944550]
[-86.38355255 38.39524460]
[-71.71594238 35.25497437]
[-56.96973038 38.00255203]
[-44.41733170 46.21457291]
[-35.99253464 58.62689209]
[-22.79916573 65.76377106]
[-9.60579872 72.90065765]
[-17.76246452 60.31221390]
[-25.91913033 47.72377777]
[-34.07579803 35.13533783]
[-49.58176041 32.07909012]
[-58.31552887 18.90726852]
[-55.09551239 3.43448496]
[-41.83208847 -5.15953493]
[-26.39421463 -1.77611160]
[-17.94090462 11.57743073]
[-21.48735619 26.97867203]
[-13.33069134 39.56711197]
[-5.17402554 52.15554810]
[2.98264027 64.74398804]
[33.44297028 59.27835083]
[53.39643478 79.04298401]
[68.21891785 76.74211121]
[83.04139709 74.44123077]
[97.18871307 69.45590973]
[110.17910004 61.95590973]
[123.16947937 54.45590973]
[136.15986633 46.95590973]
[149.15023804 39.45590973]
[162.14062500 31.95591164]
[175.13099670 24.45591164]
[184.58694458 5.27079058]
[205.18278503 5.90555573]
[217.68681335 -2.37991905]
[230.19085693 -10.66539383]
[242.69488525 -18.95086861]
[255.19892883 -27.23634338]
[267.70297241 -35.52181625]
[270.84490967 -52.70073700]
[285.14077759 -62.13261032]
[301.51312256 -58.41119003]
[313.84442139 -66.95165253]
[326.17568970 -75.49211121]
[338.50698853 -84.03256989]
[350.74993896 -92.69917297]
[362.90325928 -101.49102020]
[375.05661011 -110.28285980]
[377.31320190 -125.92521667]
[390.01953125 -135.32333374]
[405.63714600 -132.90147400]
[414.90042114 -120.09649658]
[412.31356812 -104.50534821]
[399.41137695 -95.37799072]
[383.84844971 -98.12952423]
[371.69509888 -89.33768463]
[359.54177856 -80.54584503]
[355.94351196 -74.03702545]
[347.04742432 -71.70128632]
[334.71615601 -63.16082382]
[322.38485718 -54.62036514]
[310.05358887 -46.07990646]
[309.53750610 -33.16921616]
[301.54510498 -22.76967621]
[288.82965088 -18.83291435]
[275.98843384 -23.01778221]
[263.48440552 -14.73230743]
[250.98036194 -6.44683266]
[238.47633362 1.83864212]
[225.97229004 10.12411690]
[213.46826172 18.40959167]
[213.13235474 27.38933754]
[208.60237122 35.30960083]
[200.79994202 40.30104828]
[191.43489075 41.11786652]
[182.63099670 37.44629288]
[169.64062500 44.94629288]
[156.65023804 52.44629288]
[143.65986633 59.94629288]
[130.66947937 67.44628906]
[117.67910004 74.94628906]
[104.68871307 82.44628906]
[115.21855164 93.41194916]
[113.21368408 107.09398651]
[121.11016846 119.84724426]
[129.00665283 132.60050964]
[142.84989929 140.26048279]
[142.97155762 155.15458679]
[150.86804199 167.90785217]
[165.56399536 175.18525696]
[166.33940125 191.56605530]
[152.39656067 200.19909668]
[138.07868958 192.20343018]
[138.11477661 175.80433655]
[130.21829224 163.05107117]
[116.93986511 156.30328369]
[116.25339508 140.49697876]
[108.35691071 127.74372864]
[100.46043396 114.99047089]
[85.32650757 107.72627258]
[85.34227753 89.26371765]
[70.51979065 91.56459045]
[55.69731140 93.86546326]
[53.97752762 103.08958435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 39]
[7 38]
[8 37]
[10 36]
[11 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[56 69]
[57 68]
[58 67]
[59 66]
[71 151]
[72 150]
[73 149]
[74 130]
[75 129]
[76 128]
[77 127]
[78 126]
[79 125]
[80 124]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[90 110]
[91 109]
[92 108]
[93 107]
[94 105]
[95 104]
[96 103]
[132 147]
[133 146]
[134 145]
[136 143]
[137 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
