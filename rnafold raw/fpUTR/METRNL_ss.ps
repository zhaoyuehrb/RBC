%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGGGGCGCGCGACGUGACCACCCGGACUCGAAGCCCGCCCCGCCCCCGCCCGGCUCGCCGGCUCCGGGGUCUGCUCCGGGGGUCGCGGACGCGGGGCCGGGCGGCGGAGCCGGCGCCAGAGC\
) } def
/len { sequence length } bind def

/coor [
[-11.94265938 264.94177246]
[-24.85324860 263.94741821]
[-34.77853394 275.19415283]
[-44.70382309 286.44085693]
[-54.62911224 297.68759155]
[-57.95920563 313.15435791]
[-72.18194580 317.57736206]
[-82.10723114 328.82406616]
[-91.89154053 340.19366455]
[-101.53335571 351.68432617]
[-111.17517090 363.17498779]
[-120.81698608 374.66564941]
[-126.36641693 390.68563843]
[-143.29658508 389.78787231]
[-147.12062073 373.27081299]
[-132.30764771 365.02383423]
[-122.66584015 353.53317261]
[-113.02402496 342.04251099]
[-103.38220978 330.55184937]
[-101.47193146 323.32644653]
[-93.35395050 318.89880371]
[-83.42866516 307.65206909]
[-80.80848694 292.98974609]
[-65.87583160 287.76229858]
[-55.95054245 276.51556396]
[-46.02525330 265.26885986]
[-36.09996414 254.02214050]
[-37.89107513 237.34992981]
[-26.89433670 224.24900818]
[-9.49294376 223.07800293]
[0.14887072 211.58732605]
[9.79068470 200.09666443]
[5.30231333 184.35884094]
[11.09980297 168.87794495]
[25.09919357 159.77932739]
[41.93087387 160.78730774]
[51.28322220 149.05984497]
[60.63556671 137.33236694]
[62.52162933 122.55766296]
[77.17515564 116.59237671]
[86.52750397 104.86490631]
[88.80108643 91.06916809]
[101.74501801 85.78274536]
[111.09736633 74.05527496]
[120.44971466 62.32780075]
[129.80206299 50.60033035]
[139.15440369 38.87285614]
[148.35983276 27.02970695]
[157.41690063 15.07271957]
[166.47396851 3.11573219]
[175.53103638 -8.84125519]
[184.43833923 -20.91022301]
[193.19448853 -33.08929062]
[201.95063782 -45.26836395]
[203.72419739 -60.98984528]
[217.43586731 -66.80699921]
[226.19203186 -78.98607635]
[234.79566956 -91.27335358]
[243.24546814 -103.66693115]
[240.51548767 -119.00267792]
[249.26133728 -131.45115662]
[263.89843750 -133.95927429]
[272.34823608 -146.35285950]
[280.79803467 -158.74644470]
[289.24783325 -171.14001465]
[297.69763184 -183.53359985]
[306.14746094 -195.92718506]
[314.59725952 -208.32077026]
[322.89187622 -220.81872559]
[331.03009033 -233.41911316]
[339.16827393 -246.01950073]
[347.30645752 -258.61990356]
[347.58303833 -275.01669312]
[362.05075073 -282.73794556]
[375.82647705 -273.84063721]
[374.73889160 -257.47760010]
[359.90686035 -250.48168945]
[351.76867676 -237.88130188]
[343.63046265 -225.28091431]
[335.49227905 -212.68052673]
[334.49526978 -205.27366638]
[326.99081421 -199.87097168]
[318.54101562 -187.47738647]
[310.09121704 -175.08380127]
[301.64141846 -162.69021606]
[293.19161987 -150.29664612]
[284.74182129 -137.90306091]
[276.29202271 -125.50947571]
[279.30480957 -110.96785736]
[270.91207886 -98.27863312]
[255.63905334 -95.21713257]
[247.18925476 -82.82355499]
[246.00788879 -75.44385529]
[238.37109375 -70.22991943]
[229.61494446 -58.05084610]
[228.46768188 -43.20049286]
[214.12971497 -36.51220703]
[205.37355042 -24.33313751]
[196.61740112 -12.15406704]
[195.25242615 -4.80611515]
[187.48802185 0.21581064]
[178.43095398 12.17279816]
[169.37388611 24.12978554]
[160.31681824 36.08677292]
[158.76907349 43.39841080]
[150.88188171 48.22520447]
[141.52954102 59.95267868]
[132.17718506 71.68014526]
[122.82484436 83.40762329]
[113.47249603 95.13509369]
[111.19891357 108.93083191]
[98.25498199 114.21725464]
[88.90263367 125.94472504]
[86.34763336 141.55825806]
[72.36303711 146.68472290]
[63.01069260 158.41218567]
[53.65834808 170.13966370]
[58.31426239 183.17903137]
[55.90996170 196.70405579]
[47.18442154 207.17306519]
[34.51743698 211.89894104]
[21.28135109 209.73847961]
[11.63953781 221.22914124]
[1.99772322 232.71981812]
[4.70908928 245.98005676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[7 22]
[8 21]
[9 19]
[10 18]
[11 17]
[12 16]
[30 124]
[31 123]
[32 122]
[36 117]
[37 116]
[38 115]
[40 113]
[41 112]
[43 110]
[44 109]
[45 108]
[46 107]
[47 106]
[48 104]
[49 103]
[50 102]
[51 101]
[52 99]
[53 98]
[54 97]
[56 95]
[57 94]
[58 92]
[59 91]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
