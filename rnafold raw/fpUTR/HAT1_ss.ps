%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGCGGUCACUUCCGGCCCGGGAGCGCGCGGGUUGAUUCGUCCUUCCUCAGCCGCGGGUGAUCGUAGCUCGGAA\
) } def
/len { sequence length } bind def

/coor [
[145.67253113 380.40093994]
[144.44989014 365.45083618]
[143.22724915 350.50076294]
[141.09252930 335.65344238]
[138.05372620 320.96447754]
[135.01490784 306.27551270]
[131.97608948 291.58654785]
[128.93728638 276.89758301]
[125.89846802 262.20861816]
[122.85965729 247.51965332]
[119.82084656 232.83068848]
[116.78202820 218.14172363]
[113.74321747 203.45275879]
[110.70440674 188.76380920]
[100.54915619 177.86791992]
[105.33027649 162.78642273]
[102.29146576 148.09747314]
[99.25264740 133.40850830]
[96.21383667 118.71954346]
[84.16297150 110.67449188]
[81.22757721 96.48542023]
[89.09719849 84.31927490]
[86.05838776 69.63031006]
[83.01957703 54.94134521]
[79.98075867 40.25238419]
[76.94194794 25.56342125]
[72.01186371 17.53013802]
[74.09167480 10.21385765]
[64.21498871 -2.14581752]
[69.78160095 -15.96110249]
[67.34445953 -30.76178932]
[64.90731812 -45.56247711]
[62.47017288 -60.36316299]
[49.48316574 -69.36944580]
[46.75061798 -84.93571472]
[55.89370346 -97.82678223]
[71.48799133 -100.39459991]
[84.28166962 -91.11573029]
[86.68447113 -75.49516296]
[77.27085876 -62.80030441]
[79.70800018 -47.99961853]
[82.14514923 -33.19893265]
[84.58229065 -18.39824486]
[94.28466034 -7.09721279]
[88.89236450 7.77671576]
[91.63091278 22.52460861]
[94.66972351 37.21357346]
[97.70853424 51.90253448]
[100.74735260 66.59149933]
[103.78616333 81.28045654]
[115.83702850 89.32550812]
[118.77242279 103.51457977]
[110.90280151 115.68072510]
[113.94161224 130.36968994]
[116.98042297 145.05865479]
[120.01924133 159.74761963]
[130.39184570 171.69415283]
[125.39336395 185.72499084]
[128.43217468 200.41395569]
[131.47099304 215.10292053]
[134.50981140 229.79188538]
[137.54861450 244.48083496]
[140.58743286 259.16979980]
[143.62625122 273.85876465]
[146.66505432 288.54772949]
[149.70387268 303.23669434]
[152.74269104 317.92565918]
[155.78149414 332.61462402]
[159.66905212 336.92529297]
[161.14776611 341.82824707]
[160.43276978 346.22076416]
[158.17735291 349.27810669]
[159.39997864 364.22821045]
[160.62261963 379.17828369]
[167.93988037 394.47189331]
[155.26957703 405.73687744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[16 56]
[17 55]
[18 54]
[19 53]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[28 45]
[30 43]
[31 42]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
