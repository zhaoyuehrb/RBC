%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGAGGAAGUGGAGGGCGCUGGCCGGCCGUGGGGCAAUGCAACGGCCUCCCAGCACAGGGCUAUAAGAGGAGCCGGGCGGGCACGGAGGGGCAGAGACCCCGGAGCCCCAGCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[71.12477112 195.14544678]
[79.60332489 207.51937866]
[82.83095551 222.16799927]
[80.33792877 236.95938110]
[72.48706818 249.74076843]
[60.42098618 258.65197754]
[45.89577484 262.39608765]
[31.02542877 260.42816162]
[17.97416496 253.03460693]
[8.64146137 241.29148865]
[4.38559389 226.90791321]
[5.82595873 211.97721863]
[12.75365162 198.67153931]
[-0.72446334 205.25488281]
[-5.94652557 219.93029785]
[-19.70903206 226.41473389]
[-33.66761780 221.34587097]
[-47.14573288 227.92921448]
[-60.62384415 234.51255798]
[-69.33254242 248.40826416]
[-85.70889282 247.54383850]
[-92.90631104 232.80853271]
[-83.52070618 219.36076355]
[-67.20719147 221.03443909]
[-53.72907639 214.45109558]
[-40.25096130 207.86775208]
[-35.66782761 193.74221802]
[-22.09288406 186.87377930]
[-7.30780792 191.77676392]
[6.17030668 185.19342041]
[18.23651886 176.28239441]
[28.49336433 165.33720398]
[38.75020981 154.39201355]
[49.00705338 143.44682312]
[59.26390076 132.50163269]
[69.52074432 121.55644989]
[79.77758789 110.61125946]
[75.91545868 97.59677124]
[80.15121460 83.87863159]
[91.88593292 74.31336212]
[107.73285675 72.77227783]
[107.73285675 57.77228165]
[99.14096069 48.04676437]
[99.51818848 35.47773743]
[108.11046600 26.85588074]
[108.49987793 11.86093616]
[108.88928223 -3.13400841]
[109.27869415 -18.12895393]
[106.34586334 -26.91064835]
[109.87789154 -33.50672531]
[110.65644836 -48.48650742]
[111.43500519 -63.46628952]
[112.01903534 -78.45491791]
[111.62963104 -93.44985962]
[110.46244812 -108.40438080]
[109.29526520 -123.35890198]
[98.08640289 -134.83674622]
[100.21442413 -150.73803711]
[114.04689789 -158.86466980]
[128.97273254 -152.98257446]
[133.54211426 -137.60401917]
[124.24978638 -124.52607727]
[125.41696930 -109.57155609]
[126.58415222 -94.61704254]
[128.75814819 -92.66889954]
[130.24185181 -89.69039154]
[130.61848450 -85.95913696]
[129.58694458 -81.90558624]
[127.01398468 -78.06550598]
[130.02204895 -71.21459198]
[126.41478729 -62.68773270]
[125.63623047 -47.70795059]
[124.85767365 -32.72816849]
[124.27363586 -17.73954391]
[123.88423157 -2.74459863]
[123.49481964 12.25034618]
[123.10540771 27.24529076]
[132.32238770 42.11804581]
[122.73285675 57.77228165]
[122.73285675 72.77227783]
[131.95413208 84.60308838]
[146.50015259 88.26549530]
[161.04617310 91.92790985]
[175.59220886 95.59031677]
[193.11404419 90.11315918]
[205.28625488 102.68252563]
[219.92245483 105.96607971]
[234.55863953 109.24962616]
[243.74186707 108.07146454]
[249.52984619 112.81307220]
[264.07586670 116.47548676]
[275.89886475 106.42577362]
[291.37344360 105.27833557]
[304.54934692 113.47438812]
[310.36016846 127.86237335]
[306.57150269 142.90982056]
[294.64019775 152.83067322]
[279.15405273 153.81018066]
[266.06784058 145.47167969]
[260.41345215 131.02149963]
[245.86743164 127.35910034]
[231.27510071 123.88582611]
[216.63890076 120.60227966]
[202.00270081 117.31872559]
[191.54389954 123.54583740]
[179.26316833 120.84278870]
[171.92979431 110.13633728]
[157.38377380 106.47393036]
[142.83775330 102.81152344]
[128.29173279 99.14910889]
[121.19372559 115.87857819]
[106.21405029 123.86396027]
[90.72277832 120.86811066]
[80.46593475 131.81329346]
[70.20908356 142.75848389]
[59.95224380 153.70367432]
[49.69539642 164.64884949]
[39.43855286 175.59403992]
[29.18170738 186.53923035]
[43.93539810 183.83210754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 30]
[14 29]
[17 26]
[18 25]
[19 24]
[31 119]
[32 118]
[33 117]
[34 116]
[35 115]
[36 114]
[37 113]
[41 80]
[42 79]
[45 77]
[46 76]
[47 75]
[48 74]
[50 73]
[51 72]
[52 71]
[53 69]
[54 64]
[55 63]
[56 62]
[81 110]
[82 109]
[83 108]
[84 107]
[86 104]
[87 103]
[88 102]
[90 101]
[91 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
