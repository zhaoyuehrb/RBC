%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUCAGUAAACCACAGCCUUCAGCAUGCUCUGCUCAGGCGGCAGCAGUGGCUUUUUGGAGGUGUCUCGGCCAUGACACACAUUUGACAUGCCCUCCCUCAACCUACUUAUAGACUAUUUUUCUUGCUCUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[129.03688049 258.50500488]
[132.06446838 240.48112488]
[143.81231689 226.37091064]
[138.11181641 212.49632263]
[132.41131592 198.62173462]
[126.71080780 184.74714661]
[114.71722412 175.91520691]
[116.62948608 160.20999146]
[110.92898560 146.33540344]
[105.22847748 132.46080017]
[99.52796936 118.58621979]
[81.62377167 110.40130615]
[79.43031311 88.35096741]
[64.51010132 86.80584717]
[49.58989716 85.26072693]
[31.66846848 94.36273956]
[16.42175293 82.55445862]
[1.44639587 81.69500732]
[-13.52896214 80.83554840]
[-28.50432014 79.97609711]
[-32.48006058 82.17702484]
[-36.53787231 82.87038422]
[-40.17689896 82.22469330]
[-43.00767517 80.55859375]
[-44.79261017 78.28929901]
[-59.62628937 76.06176758]
[-68.66759491 77.89089966]
[-74.77299500 73.60932922]
[-89.55170441 71.04225159]
[-104.33040619 68.47517395]
[-119.10910797 65.90809631]
[-133.91627502 63.51063538]
[-148.74995422 61.28310013]
[-163.58363342 59.05556488]
[-178.41731262 56.82802963]
[-193.47331238 63.32795334]
[-206.46710205 53.32328415]
[-204.03179932 37.10596848]
[-188.67262268 31.35899162]
[-176.18978882 41.99434662]
[-161.35610962 44.22188187]
[-146.52243042 46.44942093]
[-131.68873596 48.67695618]
[-124.54421997 46.54071045]
[-116.54203796 51.12939453]
[-101.76332855 53.69646835]
[-86.98462677 56.26354599]
[-72.20591736 58.83061981]
[-57.39875412 61.22808456]
[-42.56507492 63.45561981]
[-27.64486504 65.00074005]
[-12.66950798 65.86019135]
[2.30585003 66.71965027]
[17.28120804 67.57910156]
[24.35050011 60.05305099]
[34.62082672 57.65666962]
[44.70435333 61.43135071]
[51.13501740 70.34052277]
[66.05522156 71.88564301]
[80.97543335 73.43076324]
[94.85002136 67.73025513]
[104.37422943 56.14192200]
[113.89843750 44.55358505]
[123.42263794 32.96525192]
[115.91979218 17.60358047]
[115.84231567 0.56272048]
[123.15782928 -14.76729679]
[136.36795044 -25.35757256]
[152.81500244 -29.13875771]
[169.21656799 -25.40527344]
[178.19947815 -37.41807556]
[180.26741028 -53.10355377]
[194.08570862 -58.66267014]
[203.06861877 -70.67547607]
[212.05151367 -82.68827820]
[221.03442383 -94.70108032]
[223.10235596 -110.38655853]
[236.92065430 -115.94567108]
[245.90356445 -127.95847321]
[243.39845276 -143.56295776]
[252.72866821 -156.31922913]
[268.35876465 -158.65922546]
[281.01568604 -149.19467163]
[283.19030762 -133.54071045]
[273.59243774 -120.98455811]
[257.91635132 -118.97557068]
[248.93345642 -106.96276855]
[247.50804138 -92.13652802]
[233.04722595 -85.71817017]
[224.06431580 -73.70536804]
[215.08140564 -61.69256592]
[206.09851074 -49.67976761]
[204.67309570 -34.85352325]
[190.21226501 -28.43517113]
[181.22937012 -16.42236900]
[188.18746948 -5.34276152]
[190.94656372 7.47913265]
[189.15289307 20.50368309]
[183.00074768 32.15924454]
[173.21171570 41.03180695]
[160.95002747 46.03652573]
[147.68415833 46.55034256]
[135.01097107 42.48945618]
[125.48677063 54.07779312]
[115.96256256 65.66613007]
[106.43835449 77.25446320]
[118.02133942 87.45664978]
[120.21155548 101.59683990]
[113.40256500 112.88571167]
[119.10306549 126.76029968]
[124.80357361 140.63488770]
[130.50407410 154.50947571]
[142.90539551 164.33383179]
[140.58540344 179.04664612]
[146.28590393 192.92123413]
[151.98640442 206.79582214]
[157.68690491 220.67041016]
[169.85076904 220.74523926]
[181.23101807 224.94154358]
[190.47836304 232.73655701]
[196.50500488 243.18234253]
[198.61257935 255.02101135]
[196.57298279 266.83624268]
[190.65287781 277.22271729]
[181.57901001 284.95315552]
[186.31228638 299.18676758]
[191.04557800 313.42037964]
[195.77886963 327.65402222]
[206.51435852 340.77597046]
[196.87710571 354.72442627]
[180.80589294 349.32510376]
[181.54524231 332.38729858]
[176.81195068 318.15368652]
[172.07867432 303.92004395]
[167.34538269 289.68643188]
[149.53370667 286.92874146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[8 112]
[9 111]
[10 110]
[11 109]
[13 60]
[14 59]
[15 58]
[17 54]
[18 53]
[19 52]
[20 51]
[25 50]
[26 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 43]
[33 42]
[34 41]
[35 40]
[61 106]
[62 105]
[63 104]
[64 103]
[70 95]
[71 94]
[73 92]
[74 91]
[75 90]
[76 89]
[78 87]
[79 86]
[125 135]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
