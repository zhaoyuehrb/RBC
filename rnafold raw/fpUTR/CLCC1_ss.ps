%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCAGCCGUCAGCCGAACAAUUCGAUGACGAGGCCCAGGAAGCACGCUGAAACCCUGGGCGGCGGCAAGCUGUGCGACCUCUUCUGCGGCCGGCCUGGGCAGGUGUCUUCCUCGAGAGGCAGGCAGGGGAUCCCGGACG\
) } def
/len { sequence length } bind def

/coor [
[178.97760010 155.01771545]
[177.77307129 146.57554626]
[164.31074524 139.95996094]
[150.84843445 133.34436035]
[137.38612366 126.72877502]
[123.92380524 120.11318207]
[103.82057190 131.02082825]
[81.67145538 125.31704712]
[70.21667480 135.00146484]
[58.76189041 144.68588257]
[47.30710602 154.37030029]
[35.85232162 164.05471802]
[33.98178101 176.86984253]
[24.17373466 184.69796753]
[12.06426334 183.74253845]
[0.39656505 193.16934204]
[-11.27113342 202.59616089]
[-22.93883133 212.02297974]
[-31.45939827 226.68026733]
[-47.90260696 222.55023193]
[-48.48590851 205.60632324]
[-32.36564636 200.35527039]
[-20.69794655 190.92846680]
[-9.03024864 181.50164795]
[2.63745022 172.07482910]
[8.00629330 155.40350342]
[26.16790581 152.59992981]
[37.62268829 142.91551208]
[49.07747269 133.23109436]
[60.53225327 123.54668427]
[71.98703766 113.86226654]
[67.04669952 104.75426483]
[65.19337463 93.91937256]
[67.01027679 82.43804169]
[54.19021225 74.65048981]
[41.37014771 66.86294556]
[28.55008125 59.07539368]
[15.73001671 51.28784180]
[2.90995240 43.50028992]
[-9.91011238 35.71274185]
[-22.15228462 44.72371674]
[-36.91212463 48.35903931]
[-51.93886185 46.06435394]
[-64.94103241 38.18958282]
[-73.93589020 25.93556595]
[-77.55179596 11.17095757]
[-75.23735046 -3.85274911]
[-67.34547424 -16.84454727]
[-55.07963943 -25.82328224]
[-40.31028748 -29.41976357]
[-25.28963852 -27.08555031]
[-12.30823326 -19.17659760]
[-3.34564137 -6.89896011]
[0.23140730 7.87511063]
[-2.12256169 22.89267540]
[10.69750309 30.68022728]
[23.51756668 38.46777725]
[36.33763123 46.25532913]
[49.15769577 54.04287720]
[61.97776031 61.83042908]
[74.79782867 69.61798096]
[87.95207214 62.40925217]
[88.28626251 47.41297531]
[77.64244080 36.03989410]
[78.19498444 20.83629799]
[89.10307312 10.75913715]
[89.43725586 -4.23714018]
[89.77143860 -19.23341751]
[79.76659393 -31.77465248]
[83.47414398 -47.38341904]
[98.04997253 -54.08600998]
[112.31275940 -46.74076843]
[115.32130432 -30.98233414]
[104.76771545 -18.89923286]
[104.43353271 -3.90295577]
[104.09934998 11.09332085]
[114.54769897 21.64640045]
[114.42241669 36.85951996]
[103.28253937 47.74716187]
[102.94834900 62.74343872]
[114.74768829 66.99560547]
[124.09851074 74.71994781]
[130.07733154 84.79467010]
[132.21795654 95.89208984]
[130.53939819 106.65087128]
[144.00170898 113.26645660]
[157.46401978 119.88204956]
[170.92634583 126.49763489]
[184.38865662 133.11322021]
[206.50885010 129.79948425]
[218.20883179 147.97351074]
[232.20654297 153.36462402]
[246.20425415 158.75573730]
[260.20196533 164.14686584]
[274.37200928 169.06723022]
[288.69854736 173.51136780]
[303.02508545 177.95550537]
[316.88613892 170.84855652]
[331.35198975 175.55963135]
[338.04193115 188.81784058]
[352.36846924 193.26196289]
[366.22955322 186.15502930]
[380.69537354 190.86608887]
[387.38534546 204.12429810]
[401.71188354 208.56843567]
[417.18481445 205.26716614]
[427.04830933 216.42787170]
[441.37484741 220.87200928]
[455.70138550 225.31613159]
[470.02792358 229.76026917]
[485.89343262 225.61082458]
[497.22564697 237.46463013]
[492.36697388 253.12748718]
[476.31561279 256.48681641]
[465.58377075 244.08680725]
[451.25723267 239.64266968]
[436.93069458 235.19853210]
[422.60415649 230.75440979]
[408.15594482 234.37353516]
[397.26773071 222.89497375]
[382.94119263 218.45083618]
[369.92227173 225.59529114]
[355.32983398 221.29238892]
[347.92434692 207.58850098]
[333.59780884 203.14436340]
[320.57888794 210.28881836]
[305.98641968 205.98593140]
[298.58093262 192.28204346]
[284.25439453 187.83790588]
[269.92785645 183.39376831]
[266.59671021 184.76539612]
[262.42221069 184.54153442]
[258.18527222 182.33789062]
[254.81083679 178.14456177]
[240.81314087 172.75344849]
[226.81542969 167.36233521]
[212.81771851 161.97122192]
[206.31886292 166.72985840]
[198.36553955 168.50665283]
[190.27377319 166.93000793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[15 25]
[16 24]
[17 23]
[18 22]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[62 80]
[63 79]
[66 76]
[67 75]
[68 74]
[91 137]
[92 136]
[93 135]
[94 134]
[95 130]
[96 129]
[97 128]
[100 125]
[101 124]
[104 121]
[105 120]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
