%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCCGCCAAGGCCUACGUGCCCUGGAACCAGCGGGGGCUGCUGCUGGUGGUGCUGCGGGAGGAGGCCCGUGGG\
) } def
/len { sequence length } bind def

/coor [
[94.04450226 127.16002655]
[89.24665070 125.64176941]
[79.92943573 137.39717102]
[70.61222076 149.15257263]
[61.29500198 160.90797424]
[61.70318222 176.94583130]
[49.32659531 187.15365601]
[33.65950012 183.70088196]
[26.72035027 169.23617554]
[33.83226776 154.85562134]
[49.53960037 151.59075928]
[58.85681534 139.83535767]
[68.17403412 128.07995605]
[77.49124908 116.32455444]
[72.63206482 104.91234589]
[73.21897125 92.52260590]
[79.13517761 81.62082672]
[89.20337677 74.37641907]
[87.32337952 59.49469757]
[85.44338226 44.61297607]
[83.56338501 29.73125648]
[81.68338776 14.84953594]
[78.66300964 11.47227478]
[77.00662231 7.68566084]
[76.67800903 3.95924950]
[77.49485016 0.70386982]
[79.15994263 -1.77026141]
[81.30357361 -3.28234029]
[82.55874634 -18.22973251]
[83.81391144 -33.17712784]
[85.06907654 -48.12451935]
[86.32424927 -63.07191086]
[87.57941437 -78.01930237]
[88.83457947 -92.96669769]
[90.08975220 -107.91409302]
[79.69860077 -119.82205200]
[80.85449219 -135.58401489]
[92.87165070 -145.84867859]
[108.62050629 -144.52621460]
[118.75755310 -132.40119934]
[117.26865387 -116.66720581]
[105.03713989 -106.65892029]
[103.78197479 -91.71153259]
[102.52680969 -76.76413727]
[101.27163696 -61.81674576]
[100.01647186 -46.86935043]
[98.76130676 -31.92195892]
[97.50613403 -16.97456551]
[96.25096893 -2.02717280]
[96.56510925 12.96953773]
[98.44510651 27.85125732]
[100.32510376 42.73297882]
[102.20510101 57.61470032]
[104.08509827 72.49642181]
[123.78366089 85.59609985]
[126.26638031 109.12207031]
[138.58361816 117.68276978]
[150.90086365 126.24347687]
[163.21809387 134.80418396]
[175.53533936 143.36488342]
[191.04350281 140.31987000]
[204.11582947 149.20187378]
[206.99670410 164.74137878]
[197.97698975 177.71905518]
[182.40789795 180.43548584]
[169.52630615 171.27906799]
[166.97462463 155.68212891]
[154.65739441 147.12141418]
[142.34014893 138.56071472]
[130.02291870 130.00001526]
[117.70568085 121.43930817]
[113.55142975 124.27949524]
[108.95329285 126.32439423]
[104.06188202 127.50701904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
