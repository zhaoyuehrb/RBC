%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGGGCGGAGCAGGGCCCGGCAGCCGAGCAGCCUGGCAACGGCGGUGGCGCCCGGAGCCCGAGAGUUUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[75.47928619 401.27093506]
[67.72774506 387.68978882]
[70.57036591 372.31274414]
[82.66494751 362.40036011]
[82.66494751 347.40036011]
[82.66494751 332.40036011]
[82.66494751 317.40036011]
[82.66494751 302.40036011]
[82.66494751 287.40036011]
[70.84352875 282.13790894]
[61.93011093 272.69229126]
[57.32778168 260.49713135]
[57.78149033 247.42291260]
[63.25768661 235.48994446]
[72.94388580 226.55632019]
[85.36898804 222.02854919]
[86.59162903 207.07846069]
[87.81426239 192.12837219]
[89.03690338 177.17828369]
[89.95433044 162.20635986]
[90.56616211 147.21884155]
[91.17798615 132.23133850]
[91.78981781 117.24381256]
[82.04804993 106.51795197]
[82.63905334 92.04048920]
[93.22266388 82.14435577]
[93.83449554 67.15683746]
[94.44632721 52.16932297]
[95.05815125 37.18180466]
[85.20370483 29.94828987]
[80.23976135 18.91050148]
[81.34461212 6.98062038]
[88.11235809 -2.75792456]
[98.68909454 -7.84740734]
[100.52050781 -22.73518562]
[102.35192108 -37.62296295]
[100.25788116 -46.81286621]
[104.57373047 -53.07601166]
[98.28743744 -68.22244263]
[108.47490692 -81.07341766]
[124.65615082 -78.40895081]
[130.18528748 -62.97001266]
[119.37442017 -50.63887024]
[117.23970032 -35.79154587]
[115.40828705 -20.90377045]
[113.57686615 -6.01599264]
[125.69291687 7.42280817]
[124.40145874 25.78321266]
[110.04566956 37.79363251]
[109.43383789 52.78115082]
[108.82201385 67.76866913]
[108.21018219 82.75618744]
[117.95195007 93.48204803]
[117.36094666 107.95951080]
[106.77733612 117.85564423]
[106.16550446 132.84315491]
[105.55367279 147.83067322]
[104.94184875 162.81819153]
[107.77798462 171.80683899]
[103.98699188 178.40092468]
[102.76435852 193.35101318]
[101.54171753 208.30110168]
[100.31907654 223.25119019]
[114.85101318 232.68728638]
[122.71627808 248.02827454]
[121.90382385 265.16171265]
[112.71592712 279.54287720]
[97.66494751 287.40036011]
[97.66494751 302.40036011]
[97.66494751 317.40036011]
[97.66494751 332.40036011]
[97.66494751 347.40036011]
[97.66494751 362.40036011]
[109.75952911 372.31274414]
[112.60214996 387.68978882]
[104.85060883 401.27093506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[16 63]
[17 62]
[18 61]
[19 60]
[20 58]
[21 57]
[22 56]
[23 55]
[26 52]
[27 51]
[28 50]
[29 49]
[34 46]
[35 45]
[36 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
