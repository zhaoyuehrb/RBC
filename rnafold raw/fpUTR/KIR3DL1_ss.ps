%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACAUCCUGUGCGCUGCUGAGCUGAGCUGGGGCGCAGCCGCCUGUCUGCACCGGCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[21.19498634 332.02795410]
[9.79393101 341.97137451]
[-4.12259007 347.90310669]
[-19.19117737 349.24206543]
[-33.93556595 345.85708618]
[-46.91125107 338.07977295]
[-56.84700775 326.67205811]
[-62.76942825 312.75155640]
[-64.09829712 297.68206787]
[-60.70342255 282.93994141]
[-52.91740417 269.96948242]
[-41.50303268 260.04138184]
[-27.57857513 254.12828064]
[-12.50820637 252.80950928]
[2.23163247 256.21426392]
[9.94317341 243.34832764]
[17.65471458 230.48240662]
[25.36625671 217.61647034]
[33.07779694 204.75054932]
[40.78933716 191.88461304]
[48.50088120 179.01869202]
[47.67416382 161.65184021]
[63.46104813 152.51939392]
[70.53199768 139.29057312]
[69.70790100 124.41877747]
[83.03694916 115.89545441]
[90.10790253 102.66663361]
[90.89142609 94.31383514]
[97.86426544 88.97473907]
[98.32246399 73.16016388]
[111.50209808 66.22138977]
[119.21363831 53.35546112]
[126.60710907 40.30415344]
[133.67805481 27.07533646]
[140.74900818 13.84651756]
[142.88313293 -2.97257519]
[159.63571167 -5.57784557]
[166.77674866 9.79882526]
[153.97782898 20.91746902]
[146.90687561 34.14628601]
[139.83592224 47.37510681]
[139.44877625 55.04138947]
[132.07955933 61.06700134]
[124.36802673 73.93292999]
[124.46140289 88.82723999]
[110.73019409 96.68627930]
[103.33672333 109.73758698]
[96.26576996 122.96640015]
[96.58409882 138.78440857]
[83.76081848 146.36152649]
[76.68986511 159.59033203]
[79.68626404 172.38531494]
[73.22688293 183.36088562]
[61.36680984 186.73022461]
[53.65526581 199.59616089]
[45.94372559 212.46208191]
[38.23218536 225.32801819]
[30.52064323 238.19393921]
[22.80910301 251.05987549]
[15.09756184 263.92581177]
[25.04859543 275.32019043]
[30.98966599 289.23272705]
[32.33872986 304.30041504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[23 51]
[24 50]
[26 48]
[27 47]
[29 46]
[31 44]
[32 43]
[33 41]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
