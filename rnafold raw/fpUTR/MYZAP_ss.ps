%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGCGGUGCAGCUGAGGCUGCAAGUAGCCGGCGCCGUCCCGCGUCGCCCCCGCGCAGGGCGGGCCCCGCACGCUUAUUCUGCCCGGGAGGAACGCCGGCGUCCAGCCCGCUACCGACCGCCGCUGCGGG\
) } def
/len { sequence length } bind def

/coor [
[124.99192810 285.49331665]
[121.92414856 279.28149414]
[120.97486115 272.36627197]
[122.27446747 265.45532227]
[125.72148895 259.26644897]
[130.98973083 254.45295715]
[127.80124664 239.79576111]
[124.61277008 225.13854980]
[121.42428589 210.48135376]
[118.06161499 195.86312866]
[114.52523041 181.28594971]
[101.74722290 169.31805420]
[106.95185089 151.70182800]
[103.06956482 137.21293640]
[99.18727875 122.72405243]
[95.30499268 108.23516846]
[93.09731293 111.13625336]
[90.67286682 113.88219452]
[76.88395691 119.78694153]
[63.09505463 125.69169617]
[49.30615234 131.59645081]
[35.51724625 137.50120544]
[26.12811470 150.94651794]
[9.81503773 149.26855469]
[3.35950971 134.19346619]
[13.40242481 121.22920990]
[29.61249352 123.71230316]
[43.40139771 117.80754852]
[57.19029999 111.90279388]
[70.97920990 105.99803925]
[84.76811218 100.09328461]
[93.61374664 87.97904968]
[95.03958893 73.04697418]
[96.46543121 58.11489105]
[97.89126587 43.18281174]
[99.31710815 28.25073433]
[100.74295044 13.31865597]
[102.16879272 -1.61342287]
[100.10826111 -5.68867111]
[99.57048798 -9.78903580]
[100.36536407 -13.41428947]
[102.15473938 -16.18338966]
[104.50666046 -17.87367249]
[107.34542847 -32.60260391]
[110.18419647 -47.33153534]
[113.02296448 -62.06046295]
[106.43196869 -73.22135162]
[109.16510773 -85.47995758]
[119.20914459 -92.32990265]
[122.39762115 -106.98710632]
[125.41146088 -121.68121338]
[128.25022888 -136.41014099]
[131.08898926 -151.13906860]
[133.92776489 -165.86801147]
[128.94198608 -180.88308716]
[138.94812012 -191.91606140]
[141.78688049 -206.64498901]
[144.62565613 -221.37393188]
[147.46441650 -236.10285950]
[149.59915161 -250.95018005]
[151.02499390 -265.88226318]
[152.45082092 -280.81433105]
[153.87666321 -295.74639893]
[147.48619080 -310.21957397]
[156.39825439 -322.15374756]
[157.82409668 -337.08581543]
[153.31074524 -353.42797852]
[167.76481628 -362.28890991]
[180.28074646 -350.85266113]
[172.75617981 -335.65997314]
[171.33033752 -320.72790527]
[177.82279968 -307.32278442]
[168.80874634 -294.32058716]
[167.38290405 -279.38848877]
[165.95706177 -264.45642090]
[164.53121948 -249.52433777]
[166.31167603 -247.23991394]
[167.24841309 -244.07885742]
[166.98974609 -240.37649536]
[165.31854248 -236.59373474]
[162.19335938 -233.26408386]
[159.35458374 -218.53515625]
[156.51582336 -203.80622864]
[153.67704773 -189.07730103]
[158.86587524 -175.11572266]
[148.65669250 -163.02923584]
[145.81793213 -148.30030823]
[142.97915649 -133.57138062]
[140.14039612 -118.84244537]
[141.98147583 -111.60880280]
[137.05482483 -103.79862976]
[133.86634827 -89.14142609]
[140.13072205 -72.79315948]
[127.75189972 -59.22169495]
[124.91313171 -44.49276352]
[122.07436371 -29.76383400]
[119.23558807 -15.03490353]
[117.10086823 -0.18758225]
[115.67502594 14.74449635]
[114.24919128 29.67657471]
[112.82334900 44.60865402]
[111.39750671 59.54073334]
[109.97166443 74.47280884]
[108.54582214 89.40489197]
[109.79387665 104.35288239]
[113.67616272 118.84176636]
[117.55844879 133.33065796]
[121.44073486 147.81953430]
[132.24595642 154.97872925]
[135.14385986 167.19943237]
[129.10240173 177.74957275]
[132.63879395 192.32673645]
[137.74990845 200.01745605]
[136.08149719 207.29287720]
[139.26997375 221.95007324]
[142.45845032 236.60726929]
[145.64692688 251.26448059]
[163.51667786 267.06881714]
[156.67977905 289.18914795]
[161.92175293 303.24340820]
[167.16371155 317.29763794]
[172.40567017 331.35189819]
[185.38899231 341.37014771]
[182.93673706 357.58489990]
[167.57154846 363.31582642]
[155.09983826 352.66741943]
[158.35142517 336.59384155]
[153.10946655 322.53961182]
[147.86750793 308.48535156]
[142.62553406 294.43112183]
[135.92471313 293.45162964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 117]
[7 116]
[8 115]
[9 114]
[10 112]
[11 111]
[13 108]
[14 107]
[15 106]
[16 105]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[32 104]
[33 103]
[34 102]
[35 101]
[36 100]
[37 99]
[38 98]
[43 97]
[44 96]
[45 95]
[46 94]
[49 92]
[50 91]
[51 89]
[52 88]
[53 87]
[54 86]
[56 84]
[57 83]
[58 82]
[59 81]
[60 76]
[61 75]
[62 74]
[63 73]
[65 71]
[66 70]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
