%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAGAGCGGCCGGCGGUACGGGGGUGGUGCCGCGCUCCUGGCCCCGCGCGGGCGGACGGCGGAGGCGCCUCCCAGCCUGCUAUGGG\
) } def
/len { sequence length } bind def

/coor [
[119.85046387 129.64741516]
[106.97174072 134.99150085]
[93.02825928 134.99150085]
[80.14953613 129.64741516]
[70.30247498 119.77541351]
[64.99098206 106.88321686]
[49.99331665 106.61849213]
[34.99565506 106.35375977]
[19.99798965 106.08903503]
[5.00032616 105.82431030]
[-1.28654945 108.84872437]
[-7.21560860 108.17136383]
[-11.03591251 104.97442627]
[-25.97754478 103.65243530]
[-40.91917419 102.33045197]
[-55.86080551 101.00846100]
[-70.80243683 99.68647003]
[-85.23081970 106.17742157]
[-97.22665405 97.34854126]
[-112.16828918 96.02655792]
[-127.10992432 94.70456696]
[-141.74310303 102.10742188]
[-155.32084656 92.91086578]
[-153.87554932 76.57553101]
[-138.89399719 69.90580750]
[-125.78793335 79.76293945]
[-110.84629822 81.08492279]
[-95.90467072 82.40691376]
[-82.54501343 75.82140350]
[-69.48045349 84.74484253]
[-54.53881836 86.06682587]
[-39.59718704 87.38881683]
[-24.65555573 88.71080780]
[-9.71392536 90.03279114]
[5.26505375 90.82664490]
[20.26271820 91.09136963]
[35.26037979 91.35609436]
[50.25804520 91.62082672]
[65.25570679 91.88555145]
[72.17966461 77.66082001]
[84.57332611 67.82815552]
[100.00000000 64.32073212]
[115.42667389 67.82815552]
[127.82033539 77.66082001]
[134.74429321 91.88555145]
[149.74195862 91.62082672]
[164.73962402 91.35609436]
[179.73728943 91.09136963]
[195.15603638 81.21632385]
[210.20973206 90.04757690]
[225.18870544 89.25372314]
[240.16767883 88.45986938]
[255.14666748 87.66602325]
[270.12564087 86.87216949]
[285.10461426 86.07831573]
[300.04626465 84.75633240]
[314.93191528 82.90785217]
[329.81759644 81.05937958]
[338.16290283 76.81322479]
[345.26004028 79.41793823]
[360.20169067 78.09594727]
[375.14331055 76.77396393]
[390.08493042 75.45197296]
[403.19100952 65.59484863]
[418.17257690 72.26456451]
[419.61785889 88.59989929]
[406.04010010 97.79645538]
[391.40692139 90.39360809]
[376.46530151 91.71559143]
[361.52368164 93.03758240]
[346.58203125 94.35956573]
[331.66607666 95.94504547]
[316.78039551 97.79352570]
[301.89471436 99.64199829]
[298.18963623 102.97177887]
[292.28817749 103.85795593]
[285.89846802 101.05729675]
[270.91949463 101.85115051]
[255.94050598 102.64499664]
[240.96153259 103.43885040]
[225.98255920 104.23270416]
[211.00357056 105.02655792]
[202.55972290 113.88189697]
[189.93722534 114.54032898]
[180.00201416 106.08903503]
[165.00434875 106.35375977]
[150.00668335 106.61849213]
[135.00901794 106.88321686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[19 28]
[20 27]
[21 26]
[45 88]
[46 87]
[47 86]
[48 85]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 74]
[57 73]
[58 72]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
