%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUUGCACGGGCCGGCCCAGCUUCCCCGCCCCUGGCGUCCGCUCCCUCCCGCUCGCAGCUUACUUAACCUGGCCCGGGCGGCGGAGGCGCUCUCACUUCCCUGGAGCCGCCCGCUUGCCCGUCGGUCGCUAGCUCGCUCGGUGCGCGUCGUCCCGCUCC\
) } def
/len { sequence length } bind def

/coor [
[60.24908066 643.51214600]
[45.70951080 647.94720459]
[30.57997704 646.47558594]
[17.16762543 639.32171631]
[7.51774216 627.57659912]
[3.10186458 613.03118896]
[4.59338140 597.90362549]
[11.76484776 584.50067139]
[23.52266693 574.86627197]
[38.07385635 570.46954346]
[39.52602005 555.53997803]
[40.97817993 540.61041260]
[42.43034363 525.68090820]
[35.96152496 512.26434326]
[44.99848938 499.27807617]
[46.45065308 484.34851074]
[47.90281677 469.41897583]
[49.35498047 454.48944092]
[39.84047318 445.75787354]
[37.06583023 432.94622803]
[42.26750946 420.70172119]
[53.74629211 413.59918213]
[55.48768234 398.70062256]
[48.22191238 388.99075317]
[49.58341217 376.53610229]
[59.38330841 368.10076904]
[61.41328049 353.23873901]
[52.22697067 341.57052612]
[54.07393646 326.46942139]
[66.37492371 316.91308594]
[68.40489197 302.05108643]
[57.67162704 289.13250732]
[59.61720657 272.11059570]
[73.52532196 261.53890991]
[75.26671600 246.64033508]
[77.00811005 231.74176025]
[78.74949646 216.84318542]
[80.49089050 201.94461060]
[82.23228455 187.04603577]
[76.02484894 173.50657654]
[85.31193542 160.69796753]
[87.05332947 145.79939270]
[88.79472351 130.90081787]
[90.39157867 115.98605347]
[85.41779327 130.13743591]
[73.35193634 139.04893494]
[58.36362076 139.64100647]
[45.63240814 131.70903015]
[39.55784988 117.99408722]
[42.23914719 103.23567963]
[52.74971390 92.53390503]
[67.45738983 89.58700562]
[81.27987671 95.41357422]
[69.24803162 86.45619202]
[57.21618271 77.49881744]
[40.90062714 72.89025116]
[40.81248856 55.93653107]
[57.07925034 51.15858459]
[66.17356110 65.46696472]
[78.20541382 74.42434692]
[90.23725891 83.38172150]
[97.64718628 82.22283173]
[91.38263702 68.59362030]
[79.84022522 59.01380920]
[76.52725983 44.38424301]
[82.81637573 30.76635170]
[96.10183716 23.80240250]
[110.87910461 26.37775230]
[121.02554321 37.42536163]
[122.33721924 52.36790085]
[114.27107239 65.01393127]
[112.46703339 79.90505219]
[119.87695312 78.74616241]
[128.59933472 66.54287720]
[137.32171631 54.33959961]
[138.31475830 34.23799133]
[156.17617798 26.90654373]
[164.41880798 14.37422657]
[172.66145325 1.84190965]
[180.90408325 -10.69040775]
[189.14671326 -23.22272491]
[197.38934326 -35.75504303]
[205.63198853 -48.28735733]
[213.87461853 -60.81967545]
[221.50022888 -73.73672485]
[228.49087524 -87.00815582]
[235.48152161 -100.27957916]
[242.47218323 -113.55101013]
[249.46282959 -126.82243347]
[242.48600769 -140.68257141]
[245.02163696 -155.99107361]
[256.09472656 -166.86151123]
[271.44744873 -169.11395264]
[285.17636108 -161.88232422]
[292.00244141 -147.94731140]
[289.30087280 -132.66722107]
[278.11050415 -121.91755676]
[262.73425293 -119.83177948]
[255.74360657 -106.56035614]
[248.75296021 -93.28892517]
[241.76229858 -80.01750183]
[234.77165222 -66.74607086]
[249.68627930 -68.34420013]
[260.37527466 -57.82065582]
[259.01000977 -42.88291550]
[246.59037781 -34.47144318]
[232.21258545 -38.74682617]
[226.40693665 -52.57704163]
[218.16430664 -40.04472351]
[209.92166138 -27.51240730]
[201.67903137 -14.98009014]
[193.43640137 -2.44777298]
[185.19375610 10.08454418]
[176.95112610 22.61686134]
[168.70849609 35.14917755]
[171.67593384 44.98984146]
[168.64816284 55.04229355]
[160.40081787 61.88862610]
[149.52499390 63.06197739]
[140.80261230 75.26525879]
[132.08023071 87.46854401]
[123.70182800 111.48186493]
[105.32112122 117.43821716]
[107.61259460 126.33259583]
[103.69329834 132.64221191]
[101.95190430 147.54078674]
[100.21051025 162.43936157]
[106.29339600 177.04446411]
[97.13085938 188.78742981]
[95.38946533 203.68600464]
[93.64807892 218.58457947]
[91.90668488 233.48315430]
[90.16529083 248.38172913]
[88.42389679 263.28030396]
[97.95530701 272.83859253]
[100.19300079 285.95260620]
[94.53857422 297.77905273]
[83.26689911 304.08105469]
[81.23693085 318.94305420]
[90.52459717 331.44815063]
[88.25420380 346.49142456]
[76.27528381 355.26870728]
[74.24531555 370.13073730]
[81.61347198 386.98165894]
[70.38626099 400.44201660]
[68.64486694 415.34057617]
[79.74008179 428.83474731]
[77.70769501 445.84649658]
[64.28452301 455.94158936]
[62.83235931 470.87115479]
[61.38019562 485.80068970]
[59.92803192 500.73022461]
[66.29298401 515.21459961]
[57.35988617 527.13305664]
[55.90772247 542.06262207]
[54.45555878 556.99212646]
[53.00339890 571.92169189]
[66.43452454 579.04022217]
[76.11527252 590.75988770]
[80.56940460 605.29364014]
[79.11769104 620.42510986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 157]
[11 156]
[12 155]
[13 154]
[15 152]
[16 151]
[17 150]
[18 149]
[22 146]
[23 145]
[26 143]
[27 142]
[30 139]
[31 138]
[34 134]
[35 133]
[36 132]
[37 131]
[38 130]
[39 129]
[41 127]
[42 126]
[43 125]
[44 123]
[53 61]
[54 60]
[55 59]
[73 121]
[74 120]
[75 119]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
