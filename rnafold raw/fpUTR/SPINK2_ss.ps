%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCCCGUCGCACGAGCGCUCCCUGCGAGUGGCGCAGGUAACAGACCGCAGGGGCAAGACAGCCGGCGCGGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[97.02391052 260.64819336]
[88.79892731 248.23051453]
[95.99530029 234.14070129]
[84.92238617 224.24493408]
[84.11901093 209.05253601]
[94.57368469 197.50534058]
[93.99205017 182.51661682]
[93.41042328 167.52790833]
[92.82878876 152.53918457]
[89.33172607 145.80368042]
[92.52664185 136.96037292]
[92.52664185 121.96037292]
[92.52664185 106.96037292]
[89.30936432 99.32061768]
[92.82878876 91.38156128]
[93.41042328 76.39284515]
[90.56081390 67.43230438]
[94.31642151 60.83746719]
[95.47880554 45.88257217]
[94.89717102 30.89385223]
[92.57939148 16.07400513]
[88.05639648 7.83058310]
[90.47069550 0.63561052]
[88.72930145 -14.26296520]
[86.98790741 -29.16154099]
[85.24651337 -44.06011581]
[83.50511932 -58.95869064]
[81.76372528 -73.85726929]
[80.02233124 -88.75584412]
[75.82238007 -97.16844177]
[78.51384735 -104.26438904]
[77.35146332 -119.21928406]
[62.88827133 -123.89736176]
[51.31948471 -133.75798035]
[44.40926743 -147.29745483]
[43.21137619 -162.45111084]
[47.90847778 -176.90814209]
[57.78430176 -188.46394348]
[71.33285522 -195.35633850]
[86.48807526 -196.53430176]
[100.93891907 -191.81819153]
[112.48171997 -181.92716980]
[119.35628510 -168.36956787]
[120.51430511 -153.21279907]
[115.77919006 -138.76818848]
[105.87299347 -127.23840332]
[92.30635834 -120.38166809]
[93.46874237 -105.42678070]
[94.92090607 -90.49723816]
[96.66230011 -75.59866333]
[98.40369415 -60.70008469]
[100.14508820 -45.80150986]
[101.88648224 -30.90293312]
[103.62787628 -16.00435829]
[105.36927032 -1.10578322]
[107.39923859 13.75622272]
[109.71701813 28.57607079]
[120.66174316 18.31872940]
[135.66117859 18.44914246]
[146.42588806 28.89523697]
[147.00677490 43.88398743]
[137.08280945 55.13186264]
[122.13845062 56.42273712]
[110.43370056 47.04495621]
[109.27130890 61.99985123]
[108.39913940 76.97447205]
[107.81751251 91.96319580]
[107.52664185 106.96037292]
[107.52664185 121.96037292]
[107.52664185 136.96037292]
[107.81751251 151.95755005]
[108.39913940 166.94627380]
[108.98077393 181.93499756]
[109.56240082 196.92370605]
[120.88045502 207.62602234]
[121.25679016 222.83500671]
[110.98401642 233.55908203]
[119.25061035 247.04885864]
[112.01263428 260.06655884]
[114.94854736 279.22460938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[3 77]
[6 74]
[7 73]
[8 72]
[9 71]
[11 70]
[12 69]
[13 68]
[15 67]
[16 66]
[18 65]
[19 64]
[20 57]
[21 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[31 48]
[32 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
