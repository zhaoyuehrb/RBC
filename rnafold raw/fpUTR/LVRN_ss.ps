%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGCUGUCUGCUGAGCUCCAGUCCGUCCAGGCUCUUCCAGGAGGAAGAGGCACGAUACAAGAGAGGAGGGGCAGGGGUCGCAGCACUGAACACCCUGGCCGGGGUUUUGACAGCUGCCACAGUCUCUGAGCUCCAGCCUCGCGCCUGAACCCGGUCCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[105.54036713 335.81365967]
[117.54815674 326.12774658]
[115.83828735 311.22552490]
[114.12841034 296.32330322]
[112.41854095 281.42108154]
[99.38000488 274.27023315]
[92.97657776 260.65185547]
[95.85363007 245.69941711]
[107.11363220 235.18663025]
[105.40376282 220.28440857]
[94.20539856 206.79791260]
[101.61432648 189.96292114]
[99.62104797 175.09594727]
[97.48632812 160.24862671]
[95.21035767 145.42230225]
[92.93438721 130.59597778]
[90.65841675 115.76964569]
[79.80240631 105.41845703]
[64.88457489 103.85053253]
[49.96674728 102.28260803]
[35.04891968 100.71467590]
[22.83799362 110.38581848]
[7.73152924 108.58321381]
[-1.41317582 96.88235474]
[-16.33100510 95.31443024]
[-35.28001404 105.25845337]
[-51.53707504 92.58289337]
[-66.52008057 91.86916351]
[-81.50308990 91.15543365]
[-93.14199066 101.50791168]
[-108.32672882 100.57064819]
[-118.12450409 89.41094208]
[-132.27720642 96.48284149]
[-144.62190247 88.14871216]
[-159.60491943 87.43498230]
[-174.58792114 86.72126007]
[-189.57093811 86.00753021]
[-204.55393982 85.29380035]
[-219.53695679 84.58007050]
[-234.51995850 83.86634064]
[-248.84022522 91.85771179]
[-262.78048706 83.22049713]
[-262.00018311 66.83992004]
[-247.30203247 59.56692123]
[-233.80622864 68.88333130]
[-218.82322693 69.59706116]
[-203.84020996 70.31079102]
[-188.85720825 71.02452087]
[-173.87419128 71.73824310]
[-158.89118958 72.45197296]
[-143.90817261 73.16570282]
[-130.82716370 66.04275513]
[-117.41077423 74.42793274]
[-106.59656525 64.25009155]
[-91.39149475 64.76047516]
[-80.78936768 76.17242432]
[-65.80635071 76.88615417]
[-50.82334518 77.59988403]
[-45.26094055 70.57855988]
[-36.95476532 66.87199402]
[-27.73844719 67.43818665]
[-19.71194267 72.27600098]
[-14.76307774 80.39659882]
[0.15475109 81.96453094]
[11.53236675 72.42066193]
[26.68350220 73.79824829]
[36.61684799 85.79685211]
[51.53467560 87.36477661]
[66.45250702 88.93270111]
[81.37033081 90.50063324]
[93.24886322 81.34091187]
[95.52483368 66.51458740]
[89.97103882 51.70020294]
[99.54988098 40.29428101]
[101.82585144 25.46795654]
[104.10182190 10.64162922]
[106.37779236 -4.18469715]
[108.65376282 -19.01102448]
[110.78848267 -33.85834503]
[112.78176117 -48.72531509]
[114.63342285 -63.61058807]
[116.34329224 -78.51281738]
[106.31967163 -90.73175812]
[107.95512390 -106.45120239]
[120.27935791 -116.34507751]
[135.98063660 -114.54352570]
[145.74365234 -102.11537170]
[143.77619934 -86.43402100]
[131.24552917 -76.80294800]
[129.53564453 -61.90071869]
[131.90809631 -54.86507034]
[127.64873505 -46.73203659]
[125.65545654 -31.86506462]
[127.89351654 -24.78552437]
[123.48008728 -16.73505402]
[121.20411682 -1.90872741]
[118.92814636 12.91759968]
[116.65217590 27.74392509]
[114.37620544 42.57025146]
[120.09279633 56.32415771]
[110.35116577 68.79055786]
[108.07519531 83.61688232]
[118.73216248 94.17287445]
[133.53614807 91.75586700]
[148.34013367 89.33885193]
[163.14411926 86.92184448]
[177.94812012 84.50483704]
[192.75210571 82.08782196]
[207.55609131 79.67081451]
[219.92918396 69.81094360]
[233.73689270 75.39633942]
[248.54087830 72.97932434]
[256.71569824 62.96431732]
[269.12783813 61.27659225]
[279.02407837 68.28224182]
[293.87139893 66.14752197]
[308.71871948 64.01279449]
[323.56604004 61.87807465]
[338.38348389 53.63913345]
[350.40231323 65.59672546]
[342.23916626 80.45604706]
[325.70077515 76.72539520]
[310.85345459 78.86012268]
[296.00613403 80.99484253]
[281.15881348 83.12956238]
[267.99758911 94.70848083]
[250.95788574 87.78331757]
[236.15390015 90.20032501]
[224.83967590 99.88731384]
[209.97309875 94.47480011]
[195.16911316 96.89180756]
[180.36512756 99.30882263]
[165.56114197 101.72583008]
[150.75714111 104.14284515]
[135.95315552 106.55985260]
[121.14916992 108.97686768]
[117.25974274 111.73818207]
[113.17063904 113.37423706]
[109.16102600 113.92494965]
[105.48474121 113.49367523]
[107.76071167 128.32000732]
[110.03668213 143.14633179]
[112.31265259 157.97265625]
[116.72608185 166.02311707]
[114.48802185 173.10266113]
[116.48130035 187.96963501]
[126.25878906 196.42710876]
[127.59137726 208.88240051]
[120.30599213 218.57453918]
[122.01586151 233.47676086]
[135.36434937 241.16598511]
[141.55331421 255.07820129]
[138.40081787 269.79302979]
[127.32077026 279.71121216]
[129.03063965 294.61343384]
[130.74050903 309.51565552]
[132.45037842 324.41787720]
[146.33993530 331.13232422]
[154.37496948 344.30206299]
[153.99153137 359.72467041]
[145.31198120 372.47882080]
[131.10591125 378.49478149]
[115.90645599 375.85281372]
[104.56369019 365.39596558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 157]
[3 156]
[4 155]
[5 154]
[9 150]
[10 149]
[12 146]
[13 145]
[14 143]
[15 142]
[16 141]
[17 140]
[18 70]
[19 69]
[20 68]
[21 67]
[24 64]
[25 63]
[27 58]
[28 57]
[29 56]
[32 53]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[71 102]
[72 101]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[79 93]
[80 92]
[81 90]
[82 89]
[103 136]
[104 135]
[105 134]
[106 133]
[107 132]
[108 131]
[109 130]
[111 128]
[112 127]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
