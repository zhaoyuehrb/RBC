%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGACCCGCAGCGACUCCACAGGGACUGCGCUCCCGUGCCCCUAGCGCUCCCGCGCUGCUGCUCCAGCCGCCCGGCAGCUCUGAGG\
) } def
/len { sequence length } bind def

/coor [
[47.60283661 114.06419373]
[32.71716690 115.91266632]
[17.83149719 117.76114655]
[2.94582915 119.60961914]
[-11.93983936 121.45809174]
[-19.50449944 134.87756348]
[-33.35853195 141.19572449]
[-48.10204315 138.18029785]
[-58.12291336 127.19302368]
[-73.00858307 129.04150391]
[-87.89424896 130.88998413]
[-102.77992249 132.73844910]
[-117.66558838 134.58692932]
[-121.41336823 137.69573975]
[-125.55881500 139.14529419]
[-129.47872925 139.03231812]
[-132.65888977 137.66302490]
[-134.75776672 135.49278259]
[-149.75543213 135.22804260]
[-164.75309753 134.96331787]
[-178.82763672 143.37994385]
[-193.02027893 135.16406250]
[-192.73086548 118.76746368]
[-178.25711060 111.05757141]
[-164.48837280 119.96566010]
[-149.49070740 120.23038483]
[-134.49304199 120.49511719]
[-119.51406097 119.70126343]
[-104.62839508 117.85278320]
[-89.74272919 116.00431061]
[-74.85705566 114.15583038]
[-59.97138977 112.30735779]
[-52.94219589 99.20283508]
[-39.38400269 92.67295837]
[-24.40542030 95.41073608]
[-13.78831577 106.57242584]
[1.09735334 104.72395325]
[15.98302174 102.87547302]
[30.86869049 101.02700043]
[45.75436020 99.17852020]
[57.43114090 89.93179321]
[72.07961273 95.90950012]
[86.96527863 94.06102753]
[98.23483276 85.78523254]
[111.18624878 91.05330658]
[126.07191467 89.20483398]
[140.95758057 87.35635376]
[153.69908142 77.97740936]
[167.28283691 84.08733368]
[182.16850281 82.23885345]
[197.05416870 80.39038086]
[209.79566956 71.01143646]
[223.37942505 77.12136078]
[238.26509094 75.27288055]
[253.15075684 73.42440796]
[265.89227295 64.04546356]
[279.47601318 70.15538025]
[294.36166382 68.30690765]
[307.10317993 58.92796326]
[320.68692017 65.03788757]
[335.57260132 63.18940735]
[350.45825195 61.34093475]
[365.34393311 59.49245834]
[380.31723022 51.54032135]
[392.10363770 63.72708893]
[383.65591431 78.42649841]
[367.19241333 74.37812805]
[352.30673218 76.22660065]
[337.42108154 78.07508087]
[322.53540039 79.92355347]
[310.85861206 89.17028046]
[296.21014404 83.19257355]
[281.32449341 85.04105377]
[269.64770508 94.28778076]
[254.99923706 88.31007385]
[240.11357117 90.15855408]
[225.22789001 92.00702667]
[213.55111694 101.25375366]
[198.90264893 95.27604675]
[184.01698303 97.12452698]
[169.13130188 98.97299957]
[157.45452881 108.21973419]
[142.80606079 102.24202728]
[127.92038727 104.09049988]
[113.03472137 105.93897247]
[101.76516724 114.21476746]
[88.81375122 108.94669342]
[73.92808533 110.79516602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[18 27]
[19 26]
[20 25]
[42 88]
[43 87]
[45 85]
[46 84]
[47 83]
[49 81]
[50 80]
[51 79]
[53 77]
[54 76]
[55 75]
[57 73]
[58 72]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
