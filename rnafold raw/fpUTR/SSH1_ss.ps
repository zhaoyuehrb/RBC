%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGCCCCGGGCCCGGCCCGGGCGGCGGUGGCGGUGGCGGCUCUAGCUCGAGACGUCUGUGGCGCCCUCGCACCGCGCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[129.19097900 190.53265381]
[113.91503906 195.43421936]
[100.63880920 186.42747498]
[99.54667664 170.42163086]
[111.47643280 159.69500732]
[113.61116028 144.84768677]
[115.74588013 130.00036621]
[103.73722076 121.01081085]
[91.72964478 112.02204132]
[78.08515930 118.25326538]
[64.44068146 124.48448944]
[50.79620361 130.71571350]
[37.15172195 136.94694519]
[23.50724220 143.17816162]
[11.61120129 155.25791931]
[-3.28962612 147.17079163]
[0.35649595 130.61355591]
[17.27601814 129.53369141]
[30.92049789 123.30245972]
[44.56497955 117.07123566]
[58.20945740 110.84001160]
[71.85393524 104.60877991]
[85.49842072 98.37755585]
[97.34417725 89.17549133]
[106.75621033 77.49587250]
[116.16824341 65.81624603]
[125.58028412 54.13662338]
[134.99230957 42.45700073]
[144.40435791 30.77737617]
[142.90708923 15.27266884]
[152.61860657 3.56194854]
[167.40921021 2.23008943]
[176.61128235 -9.61566830]
[185.60043335 -21.62378693]
[194.58959961 -33.63190460]
[203.57876587 -45.64002609]
[205.65487671 -61.32442093]
[219.47607422 -66.87633514]
[228.46524048 -78.88445282]
[237.45440674 -90.89257812]
[246.44357300 -102.90069580]
[248.51968384 -118.58509064]
[262.34088135 -124.13700867]
[264.41699219 -139.82141113]
[278.23818970 -145.37332153]
[276.18847656 -160.81471252]
[285.47583008 -172.86459351]
[300.20947266 -174.72351074]
[309.19863892 -186.73162842]
[305.45666504 -201.91490173]
[312.39614868 -215.92839050]
[326.74047852 -222.15533447]
[341.71664429 -217.65556335]
[350.25341797 -204.55375671]
[348.31997681 -189.03616333]
[336.82922363 -178.42971802]
[321.20675659 -177.74246216]
[312.21759033 -165.73434448]
[314.58489990 -151.07380676]
[305.63967896 -138.76782227]
[290.24630737 -136.38415527]
[288.81317139 -121.55865479]
[274.34899902 -115.14784241]
[272.91586304 -100.32234192]
[258.45169067 -93.91152954]
[249.46252441 -81.90341187]
[240.47335815 -69.89529419]
[231.48419189 -57.88717270]
[230.05105591 -43.06167603]
[215.58688354 -36.65085983]
[206.59771729 -24.64274025]
[197.60856628 -12.63462257]
[188.61940002 -0.62650359]
[187.09757996 6.78219080]
[179.08883667 11.64212418]
[180.93138123 26.37781715]
[171.55261230 38.35669327]
[156.08396912 40.18941116]
[146.67193604 51.86903381]
[137.25990295 63.54865646]
[127.84786987 75.22827911]
[118.43583679 86.90790558]
[109.02379608 98.58752441]
[125.33075714 108.60156250]
[130.59320068 132.13508606]
[128.45848083 146.98240662]
[126.32375336 161.82972717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 87]
[6 86]
[7 85]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[32 75]
[33 73]
[34 72]
[35 71]
[36 70]
[38 68]
[39 67]
[40 66]
[41 65]
[43 63]
[45 61]
[48 58]
[49 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
