%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAACAAAGACUCGGAGCGAGCGAGGGGGCGGGGGUGGGGCGGAAUCCCGGCCGCCGGCGAGGCGGGGGAGGCGGCGGCGCAGGGUCGCCCCGGCCGGGCGGGCGGGGUCGCGCCUGGUGGCGGUCCCCGCGCCGAGGCGCCGCUAGGGCGGGCGGGGGUCGGGACGCCGGGCUAGGGGCGCGUC\
) } def
/len { sequence length } bind def

/coor [
[99.85434723 122.10162354]
[94.67145538 136.17776489]
[89.48856354 150.25390625]
[95.86533356 164.46568298]
[90.40862274 178.66705322]
[76.82057190 184.65873718]
[85.56111908 197.47991943]
[85.06262970 212.98898315]
[75.51676941 225.22238159]
[60.59413147 229.47615051]
[46.03276825 224.11459351]
[37.43181610 211.19935608]
[38.09852219 195.69660950]
[47.77652359 183.56747437]
[62.74443054 179.47586060]
[56.28643036 166.10313416]
[61.34209442 151.75408936]
[75.41242981 145.07101440]
[80.59531403 130.99487305]
[85.77820587 116.91873932]
[83.17535400 114.33298492]
[81.03610992 111.35227203]
[66.31518555 114.23226929]
[58.47073746 124.48798370]
[46.13527298 126.57466125]
[36.02444458 119.91025543]
[21.25721550 122.54254913]
[9.02898502 132.58151245]
[-4.85857296 127.19774628]
[-19.62580109 129.83003235]
[-34.39302826 132.46232605]
[-46.62126160 142.50129700]
[-60.50881958 137.11753845]
[-75.27604675 139.74983215]
[-90.04327393 142.38211060]
[-104.81050110 145.01440430]
[-119.57772827 147.64669800]
[-126.23252106 161.66430664]
[-139.87179565 169.06362915]
[-155.25096130 166.99948120]
[-166.45643616 156.26554871]
[-169.17945862 140.98927307]
[-162.37300110 127.04467773]
[-148.65426636 119.79375458]
[-133.29838562 122.02462006]
[-122.21002197 132.87947083]
[-107.44279480 130.24717712]
[-92.67556763 127.61489105]
[-77.90834045 124.98259735]
[-63.14110947 122.35030365]
[-51.96913147 112.49961090]
[-37.02532196 117.69510651]
[-22.25809288 115.06281281]
[-7.49086523 112.43051910]
[3.68111420 102.57982635]
[18.62492371 107.77532196]
[33.39215088 105.14302826]
[46.17246628 93.12975311]
[63.43518829 99.51134491]
[78.15611267 96.63134766]
[84.12343597 82.46830750]
[98.63960266 74.83448792]
[115.71524811 78.35009766]
[118.47148895 63.60550308]
[121.22773743 48.86090469]
[123.98397827 34.11631012]
[118.91419220 19.12938499]
[128.85838318 8.04054451]
[131.61462402 -6.70405149]
[134.37086487 -21.44864845]
[132.87028503 -30.48064232]
[137.29925537 -36.41688156]
[140.30279541 -51.11309433]
[143.30635071 -65.80930328]
[138.48904419 -80.87928009]
[148.61811829 -91.79950714]
[151.62167358 -106.49571991]
[146.80436707 -121.56569672]
[156.93344116 -132.48591614]
[159.93699646 -147.18212891]
[158.58834839 -156.23805237]
[163.11640930 -162.09906006]
[166.36642456 -176.74273682]
[169.61643982 -191.38641357]
[172.86643982 -206.03010559]
[175.99333191 -220.70056152]
[178.99688721 -235.39677429]
[174.17958069 -250.46675110]
[184.30865479 -261.38699341]
[187.31221008 -276.08319092]
[190.31575012 -290.77941895]
[193.31930542 -305.47561646]
[196.32286072 -320.17184448]
[199.32641602 -334.86804199]
[194.50910950 -349.93801880]
[204.63818359 -360.85824585]
[207.64172363 -375.55444336]
[201.94154358 -390.93106079]
[212.61485291 -403.38146973]
[228.68188477 -400.09774780]
[233.61424255 -384.45791626]
[222.33793640 -372.55090332]
[219.33439636 -357.85470581]
[224.36653137 -343.83587646]
[214.02262878 -331.86450195]
[211.01907349 -317.16827393]
[208.01551819 -302.47207642]
[205.01196289 -287.77584839]
[202.00842285 -273.07965088]
[199.00486755 -258.38342285]
[204.03700256 -244.36462402]
[193.69309998 -232.39323425]
[190.68954468 -217.69702148]
[192.43420410 -210.49903870]
[187.51013184 -202.78009033]
[184.26011658 -188.13641357]
[181.01010132 -173.49272156]
[177.76008606 -158.84904480]
[174.63320923 -144.17857361]
[171.62965393 -129.48236084]
[176.66178894 -115.46356201]
[166.31788635 -103.49216461]
[163.31433105 -88.79595184]
[168.34646606 -74.77715302]
[158.00256348 -62.80575562]
[154.99900818 -48.10954285]
[151.99546814 -33.41333008]
[149.11546326 -18.69240570]
[146.35922241 -3.94780898]
[143.60298157 10.79678726]
[148.86990356 24.72907829]
[138.72857666 36.87255096]
[135.97233582 51.61714935]
[133.21609497 66.36174774]
[130.45983887 81.10633850]
[135.52430725 95.22551727]
[147.02397156 104.85660553]
[162.57170105 107.78556061]
[167.36108398 121.88914490]
[178.86074829 131.52023315]
[190.36039734 141.15130615]
[201.86006165 150.78239441]
[213.35972595 160.41348267]
[228.90745544 163.34243774]
[233.69682312 177.44602966]
[245.19648743 187.07710266]
[256.69613647 196.70819092]
[268.19580078 206.33927917]
[281.10278320 205.98504639]
[290.48507690 214.26094055]
[291.66543579 226.31291199]
[307.16174316 229.50263977]
[311.71353149 243.68469238]
[323.04977417 253.50759888]
[334.38601685 263.33050537]
[345.72225952 273.15341187]
[360.20999146 268.05426025]
[375.30334473 270.89788818]
[386.94229126 280.91940308]
[391.99600220 295.42303467]
[389.10507202 310.50741577]
[379.04714966 322.11486816]
[364.52774048 327.12310791]
[349.45251465 324.18490601]
[337.87661743 314.09063721]
[332.91390991 299.55560303]
[335.89935303 284.48965454]
[324.56311035 274.66674805]
[313.22686768 264.84384155]
[301.89062500 255.02093506]
[287.20513916 252.53381348]
[281.84249878 237.64915466]
[264.46420288 235.27232361]
[258.56472778 217.83894348]
[247.06506348 208.20785522]
[235.56539917 198.57676697]
[224.06575012 188.94567871]
[209.34054565 186.70561218]
[203.72863770 171.91314697]
[192.22897339 162.28205872]
[180.72930908 152.65097046]
[169.22966003 143.01988220]
[157.72999573 133.38880920]
[143.00480652 131.14872742]
[137.39288330 116.35626221]
[125.89322662 106.72518158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[6 15]
[22 60]
[23 59]
[26 57]
[27 56]
[29 54]
[30 53]
[31 52]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[63 135]
[64 134]
[65 133]
[66 132]
[68 130]
[69 129]
[70 128]
[72 127]
[73 126]
[74 125]
[76 123]
[77 122]
[79 120]
[80 119]
[82 118]
[83 117]
[84 116]
[85 115]
[86 113]
[87 112]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[96 103]
[97 102]
[136 186]
[137 185]
[139 183]
[140 182]
[141 181]
[142 180]
[143 179]
[145 177]
[146 176]
[147 175]
[148 174]
[151 172]
[153 170]
[154 169]
[155 168]
[156 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
