%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAUUUACAGGAACUCACACCAGCGAUCAAUCUUCCUUAAUUUGUAACUGGGCAGUGUCCCGGGCCAGCCAAUAGCUAAGACUGCCCCCCCCGCACCCCACCCUCCCUGACCCUGGGGGACUCUCUACUCAGUCUGCACUGGAGCUGCCUGGUGACCAGAAGUUUGGAGUCCGCUGACGUCGCCGCCCAG\
) } def
/len { sequence length } bind def

/coor [
[-59.69168854 265.63485718]
[-65.41238403 267.69219971]
[-72.91238403 280.68258667]
[-80.41238403 293.67297363]
[-87.91238403 306.66336060]
[-95.41238403 319.65374756]
[-88.88176727 331.80252075]
[-89.20846558 345.48315430]
[-96.20001984 357.12066650]
[-107.93635559 363.72698975]
[-121.29585266 363.66781616]
[-129.00740051 376.53375244]
[-122.80513763 390.75738525]
[-126.18071747 405.90283203]
[-137.83615112 416.14639282]
[-153.28968811 417.54919434]
[-166.59912109 409.57183838]
[-172.64671326 395.28173828]
[-169.10704041 380.17379761]
[-157.34117126 370.05728149]
[-141.87332153 368.82220459]
[-134.16178894 355.95626831]
[-141.07293701 341.07434082]
[-137.72401428 324.84170532]
[-125.23963928 313.68875122]
[-108.40277100 312.15374756]
[-100.90277100 299.16336060]
[-93.40277100 286.17297363]
[-85.90277100 273.18258667]
[-78.40277100 260.19219971]
[-91.32839966 267.80325317]
[-105.94768524 271.16131592]
[-120.89898682 269.95364380]
[-134.78976440 264.29269409]
[-146.32623291 254.70573425]
[-154.43391418 242.08567810]
[-158.35763550 227.60797119]
[-157.73197937 212.62101746]
[-152.61520386 198.52072144]
[-143.48387146 186.62034607]
[-131.18847656 178.02828979]
[-116.87420654 173.54483032]
[-101.87426758 173.58750916]
[-87.58574677 178.15238953]
[-75.33945465 186.81430054]
[-66.27601624 198.76644897]
[-61.23958206 212.89564514]
[-60.69924164 227.88591003]
[-64.70563507 242.34176636]
[-54.09903336 231.73516846]
[-43.49243164 221.12855530]
[-32.88582993 210.52195740]
[-22.27922821 199.91535950]
[-11.67262745 189.30876160]
[-8.14418411 174.83811951]
[7.08510876 170.55102539]
[17.69170952 159.94441223]
[28.29831123 149.33781433]
[31.82675552 134.86717224]
[47.05604935 130.58007812]
[94.53264618 74.69258881]
[99.81639862 60.65399933]
[105.10014343 46.61540985]
[110.38389587 32.57682037]
[115.66764832 18.53823090]
[120.95140076 4.49964285]
[121.04731750 -4.65076113]
[126.43815613 -9.72423744]
[131.95089722 -23.67449570]
[137.46363831 -37.62475586]
[130.71620178 -49.29293442]
[131.90873718 -62.52326584]
[140.38197327 -72.49991608]
[152.86769104 -75.72128296]
[158.60794067 -89.57947540]
[164.34819031 -103.43766785]
[156.41160583 -116.64057922]
[157.75543213 -131.80789185]
[167.65554810 -143.14155579]
[182.15742493 -146.43298340]
[187.89767456 -160.29116821]
[193.63793945 -174.14936829]
[199.37818909 -188.00755310]
[205.11843872 -201.86575317]
[210.85868835 -215.72393799]
[199.39491272 -225.57479858]
[191.54785156 -238.46922302]
[188.07522583 -253.13786316]
[189.30488586 -268.14129639]
[195.10386658 -282.01119995]
[204.89263916 -293.39413452]
[217.70301819 -301.18350220]
[232.27391052 -304.62722778]
[247.17543030 -303.40032959]
[241.37065125 -317.85516357]
[247.38949585 -331.82757568]
[261.20574951 -337.27246094]
[266.94598389 -351.13064575]
[272.68624878 -364.98886108]
[278.42648315 -378.84704590]
[284.16674805 -392.70523071]
[276.23016357 -405.90814209]
[277.57397461 -421.07546997]
[287.47409058 -432.40911865]
[301.97598267 -435.70056152]
[307.71624756 -449.55874634]
[308.19152832 -466.50601196]
[324.60806274 -470.74078369]
[333.22189331 -456.13809204]
[321.57443237 -443.81848145]
[315.83416748 -429.96029663]
[323.76116943 -417.37854004]
[322.74749756 -402.36398315]
[312.97280884 -390.68884277]
[298.02493286 -386.96499634]
[292.28466797 -373.10678101]
[286.54443359 -359.24859619]
[280.80416870 -345.39041138]
[275.06393433 -331.53222656]
[280.98336792 -317.91253662]
[275.35934448 -303.77658081]
[261.03363037 -297.66006470]
[272.43817139 -287.99066162]
[280.30624390 -275.25241089]
[283.85662842 -260.68618774]
[282.72940063 -245.71553040]
[277.02239990 -231.80752563]
[267.28286743 -220.32899475]
[254.45504761 -212.41220093]
[239.78860474 -208.84318542]
[224.71687317 -209.98368835]
[218.97662354 -196.12550354]
[213.23637390 -182.26730347]
[207.49612427 -168.40910339]
[201.75587463 -154.55091858]
[196.01562500 -140.69271851]
[203.94261169 -128.11096191]
[202.92893982 -113.09642029]
[193.15426636 -101.42127991]
[178.20637512 -97.69741821]
[172.46612549 -83.83922577]
[166.72587585 -69.98102570]
[173.82109070 -54.74118423]
[167.58332825 -38.76780701]
[151.41389465 -32.11201477]
[145.90115356 -18.16175652]
[140.38841248 -4.21149826]
[134.98999023 9.78339386]
[129.70623779 23.82198334]
[124.42248535 37.86057281]
[119.13873291 51.89915848]
[113.85498047 65.93775177]
[108.57123566 79.97634125]
[122.37594604 74.10864258]
[133.73771667 83.90200806]
[129.96990967 98.42108917]
[115.27857208 101.45333862]
[127.61259460 109.98984528]
[139.94660950 118.52634430]
[152.28063965 127.06285095]
[168.66024780 127.86299896]
[175.91543579 142.56994629]
[166.58268738 156.05444336]
[150.26272583 154.44479370]
[143.74414062 139.39686584]
[131.41011047 130.86036682]
[119.07608795 122.32386780]
[106.74206543 113.78736115]
[101.35270691 119.00318146]
[85.18461609 134.65065002]
[93.31299591 147.25737000]
[101.44136810 159.86408997]
[116.26795197 166.87155151]
[117.34276581 183.23542786]
[103.56012726 192.12199402]
[89.09843445 184.38949585]
[88.83464050 167.99246216]
[80.70626831 155.38574219]
[72.57789612 142.77902222]
[57.66265106 141.18667603]
[53.37555313 156.41596985]
[38.90491486 159.94441223]
[28.29831123 170.55102539]
[17.69170952 181.15762329]
[13.40461254 196.38691711]
[-1.06602538 199.91535950]
[-11.67262745 210.52195740]
[-22.27922821 221.12855530]
[-32.88582993 231.73516846]
[-43.49243164 242.34176636]
[-54.09903336 252.94836426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[11 22]
[12 21]
[49 191]
[50 190]
[51 189]
[52 188]
[53 187]
[54 186]
[56 184]
[57 183]
[58 182]
[60 180]
[61 153]
[62 152]
[63 151]
[64 150]
[65 149]
[66 148]
[68 147]
[69 146]
[70 145]
[74 142]
[75 141]
[76 140]
[80 136]
[81 135]
[82 134]
[83 133]
[84 132]
[85 131]
[94 122]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[105 111]
[106 110]
[157 168]
[158 167]
[159 166]
[160 165]
[170 179]
[171 178]
[172 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
