%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCACUCAAAACAAAGGAAGACCGUCCUCGACUGCAGAGGAAGCAGGAAGCUGUCGGCCCAGCUCUGAGCCCAGCUGCUGGAGCCCCGAGCAGCGGC\
) } def
/len { sequence length } bind def

/coor [
[94.49068451 237.33811951]
[93.52963257 222.36894226]
[92.56858063 207.39974976]
[82.04348755 193.45823669]
[90.09729767 176.99604797]
[88.65695190 162.06536865]
[87.21660614 147.13467407]
[80.93094635 143.04316711]
[75.03681183 156.83660889]
[72.29335785 171.58358765]
[58.50620270 177.49243164]
[45.93524933 169.30885315]
[45.75890350 154.30989075]
[58.13256454 145.83316040]
[68.35962677 134.86013794]
[62.07396317 130.76863098]
[47.83812714 135.49525452]
[37.35366440 148.10508728]
[21.23897743 145.06390381]
[16.07147026 129.50019836]
[27.16703415 117.42458344]
[43.11150360 121.25941467]
[57.34733963 116.53279114]
[58.56952667 100.58497620]
[65.01994324 87.56535339]
[52.19280243 79.78945923]
[39.36566162 72.01357269]
[26.53852081 64.23768616]
[13.71137810 56.46179581]
[-1.03485513 61.66588974]
[-15.65801716 56.12538910]
[-23.25349808 42.45634842]
[-20.23494339 27.11287117]
[-8.02762222 17.33967590]
[7.60454035 17.75136948]
[19.28051758 28.15356064]
[21.48726654 43.63465500]
[34.31440735 51.41054153]
[47.14154816 59.18643188]
[59.96869278 66.96231842]
[72.79582977 74.73820496]
[81.26626587 67.94891357]
[91.33849335 63.90009689]
[90.85771942 48.90780258]
[90.37694550 33.91550827]
[89.89617157 18.92321587]
[80.79064178 5.28425217]
[88.29120636 -9.29907990]
[104.68192291 -9.82469845]
[113.10143280 4.24810791]
[104.88846588 18.44244194]
[105.36923981 33.43473434]
[105.85001373 48.42702866]
[106.33078766 63.41932297]
[123.14671326 70.97493744]
[134.25479126 85.68797302]
[148.97817993 82.82059479]
[163.70156860 79.95321655]
[178.37710571 76.85021973]
[193.00102234 73.51240540]
[207.62493896 70.17459106]
[222.24885559 66.83677673]
[236.87277222 63.49896622]
[249.95849609 50.66808319]
[266.50631714 56.26388931]
[281.01574707 52.45907211]
[295.52514648 48.65425110]
[306.79598999 36.74206161]
[322.68273926 40.80947113]
[326.84243774 56.67228317]
[314.99600220 68.01219177]
[299.32998657 63.16367340]
[284.82055664 66.96849060]
[270.31112671 70.77331543]
[263.84826660 81.13708496]
[251.64656067 84.34796906]
[240.21058655 78.12288666]
[225.58666992 81.46070099]
[210.96275330 84.79851532]
[196.33883667 88.13632202]
[181.71492004 91.47413635]
[175.78382874 96.11820221]
[166.56893921 94.67660522]
[151.84556580 97.54398346]
[137.12217712 100.41136169]
[134.80329895 119.71195221]
[122.45251465 136.52169800]
[102.14729309 145.69433594]
[103.58763885 160.62501526]
[105.02798462 175.55570984]
[114.53950500 184.44749451]
[115.33705902 197.03938293]
[107.53775787 206.43870544]
[108.49880981 221.40788269]
[109.45986176 236.37705994]
[116.50859833 251.79626465]
[103.64327240 262.83798218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[5 90]
[6 89]
[7 88]
[16 23]
[17 22]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[43 54]
[44 53]
[45 52]
[46 51]
[56 85]
[57 84]
[58 83]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
