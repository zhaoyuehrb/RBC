%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUUGGCCACCUGCCCAAGAAACUUGUUGGUUGUUGCCCUCAGGUCGCUCCCGGGCGGGGACACGGAACCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[112.32942963 222.62084961]
[109.92326355 207.81509399]
[107.51708984 193.00933838]
[97.83838654 181.68803406]
[103.26178741 166.82542419]
[100.85562134 152.01966858]
[91.17691803 140.69836426]
[96.60031891 125.83574677]
[82.04411316 118.88463593]
[74.36837769 104.69716644]
[76.51436615 88.70980072]
[87.65975952 77.04870605]
[84.65937805 62.35184097]
[81.65898895 47.65498352]
[78.65860748 32.95812225]
[75.65821838 18.26126289]
[72.65783691 3.56440353]
[69.65744781 -11.13245583]
[55.55800629 -25.27378273]
[61.77155685 -43.40633774]
[57.59829712 -57.81410980]
[44.03644943 -65.47662354]
[40.00941467 -80.14759827]
[47.39802551 -93.02952576]
[43.22476196 -107.43729401]
[39.05150223 -121.84506989]
[34.87823868 -136.25283813]
[30.70497704 -150.66061401]
[17.14313316 -158.32312012]
[13.11609554 -172.99411011]
[20.50470734 -185.87602234]
[16.33144569 -200.28379822]
[12.15818405 -214.69157410]
[-0.03730458 -225.65524292]
[3.62401724 -241.64044189]
[19.37569618 -246.20297241]
[31.01375389 -234.64929199]
[26.56595612 -218.86483765]
[30.73921776 -204.45706177]
[34.91247940 -190.04928589]
[48.04220963 -183.11058044]
[52.47973633 -168.55850220]
[45.11275101 -154.83387756]
[49.28601074 -140.42610168]
[53.45927429 -126.01833344]
[57.63253403 -111.61055756]
[61.80579758 -97.20278931]
[74.93553162 -90.26407623]
[79.37305450 -75.71199036]
[72.00606537 -61.98736954]
[76.17932892 -47.57959747]
[85.82673645 -43.29428482]
[91.51094055 -34.13538742]
[91.05046844 -23.14254379]
[84.35430908 -14.13284206]
[87.35469818 0.56401819]
[90.35507965 15.26087761]
[93.35546875 29.95773697]
[96.35585022 44.65459824]
[99.35623932 59.35145569]
[102.35662079 74.04831696]
[114.93138123 78.64356232]
[123.56484222 88.87606812]
[125.97811127 102.04485321]
[121.53417969 114.67387390]
[111.40607452 123.42957306]
[121.25688171 135.80989075]
[115.66137695 149.61349487]
[118.06754303 164.41925049]
[127.91835022 176.79956055]
[122.32284546 190.60316467]
[124.72901154 205.40892029]
[127.13518524 220.21467590]
[139.25930786 230.72111511]
[138.46037292 246.74426270]
[125.35125732 255.99253845]
[109.98814392 251.37144470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[5 69]
[6 68]
[8 66]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[20 51]
[21 50]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
