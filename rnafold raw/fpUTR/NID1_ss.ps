%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGGCGGGAGGAGAGGGGGCUGCCAGGGGCGUCCGGUUACAUCCCCGCCUUCCUCUGUCCUGGCCGCGGGACCGGGUUUGCGGGACCGCAGUUCGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[74.26776123 104.01700592]
[59.40883255 101.96465302]
[44.54990005 99.91230011]
[29.69096947 97.85994720]
[14.83203793 95.80759430]
[-0.02689403 93.75524139]
[-14.88582611 91.70288849]
[-29.74475670 89.65053558]
[-44.60368729 87.59818268]
[-59.46261978 85.54582977]
[-68.56665802 87.49073029]
[-74.74071503 83.19761658]
[-89.53014374 80.69308472]
[-104.42848206 86.01756287]
[-115.68519592 76.26381683]
[-128.10127258 89.28003693]
[-145.66987610 92.34135437]
[-161.47937012 84.43042755]
[-169.42100525 68.81005096]
[-184.33561707 67.21179199]
[-199.25022888 65.61354065]
[-214.16482544 64.01528168]
[-223.20532227 66.23691559]
[-229.50743103 62.13408279]
[-244.36636353 60.08172989]
[-259.22528076 58.02938080]
[-275.74273682 61.85168839]
[-283.98815918 47.03786469]
[-272.03582764 35.01380539]
[-257.17294312 43.17044830]
[-242.31401062 45.22280121]
[-227.45507812 47.27515411]
[-212.56657410 49.10066986]
[-197.65196228 50.69892883]
[-182.73735046 52.29718399]
[-167.82273865 53.89544296]
[-160.97956848 43.63803101]
[-150.32711792 37.28428268]
[-137.90495300 36.12366486]
[-126.12310791 40.44427109]
[-117.29442596 49.46465302]
[-113.18065643 61.47438049]
[-99.34016418 55.97076035]
[-87.02560425 65.90364838]
[-72.23617554 68.40818787]
[-57.41026688 70.68689728]
[-42.55133438 72.73925018]
[-27.69240379 74.79160309]
[-12.83347321 76.84395599]
[2.02545857 78.89630890]
[16.88438988 80.94866180]
[31.74332237 83.00101471]
[46.60225296 85.05336761]
[61.46118546 87.10572052]
[76.32011414 89.15807343]
[84.78595734 78.86195374]
[97.23719788 74.10306549]
[110.41217804 76.12802887]
[120.85962677 84.40639496]
[125.84277344 96.76959991]
[140.63220215 99.27413940]
[155.42163086 101.77867889]
[170.21105957 104.28321838]
[185.00050354 106.78775024]
[199.78993225 109.29228973]
[214.61582947 111.57099915]
[229.34486389 105.79465485]
[240.89379883 115.20058441]
[255.75273132 117.25292969]
[270.61166382 119.30528259]
[285.47058105 121.35763550]
[297.98965454 112.08881378]
[313.02947998 114.38186646]
[321.78872681 126.37399292]
[336.64767456 128.42634583]
[351.50659180 130.47869873]
[363.95297241 120.73891449]
[379.63061523 122.73567200]
[389.23825073 135.28431702]
[387.07586670 150.93998718]
[374.42633057 160.41441345]
[358.79440308 158.08662415]
[349.45425415 145.33763123]
[334.59530640 143.28527832]
[319.73638916 141.23292542]
[308.05435181 150.40164185]
[292.95602417 148.53193665]
[283.41824341 136.21656799]
[268.55929565 134.16421509]
[253.70037842 132.11186218]
[238.84144592 130.05950928]
[225.17523193 135.98265076]
[212.56347656 126.42993164]
[205.38516235 128.67080688]
[197.28538513 124.08172607]
[182.49595642 121.57718658]
[167.70652771 119.07264709]
[152.91709900 116.56810760]
[138.12767029 114.06356812]
[123.33823395 111.55902863]
[112.00833130 123.11026764]
[96.04356384 125.74161530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[12 45]
[13 44]
[15 42]
[19 36]
[20 35]
[21 34]
[22 33]
[24 32]
[25 31]
[26 30]
[60 100]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[66 93]
[68 91]
[69 90]
[70 89]
[71 88]
[74 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
