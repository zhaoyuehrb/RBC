%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGAGGGAGGGAGGAAGCGGCUUGCCGGAGAGCCAGGGCGCAGUGGGCGGCAGGGCUGAGCGGCCGGUGAUGGGGACCCCACAUCCCAGGCAGUGCCGGCACCCCUGGCGCCUGAC\
) } def
/len { sequence length } bind def

/coor [
[30.49504471 209.04684448]
[32.77218628 223.87300110]
[31.21491051 238.79194641]
[25.92503929 252.82821655]
[17.24844170 265.06408691]
[5.75242805 274.69952393]
[-7.81134558 281.10455322]
[-22.55602837 283.86032104]
[-37.51755905 282.78668213]
[-51.71768570 277.95385742]
[-64.22795868 269.67779541]
[-74.23040771 258.49963379]
[-81.07102203 245.15026855]
[-84.30255127 230.50250244]
[-83.71369934 215.51405334]
[-79.34296417 201.16496277]
[-71.47612000 188.39340210]
[-60.62754059 178.03442383]
[-47.50997925 170.76672363]
[-62.47732162 169.77743530]
[-77.44466400 168.78816223]
[-91.72508240 175.59846497]
[-103.91435242 167.03862000]
[-118.88169098 166.04934692]
[-133.84902954 165.06005859]
[-148.81637573 164.07078552]
[-163.09680176 170.88108826]
[-175.28607178 162.32124329]
[-188.25257874 171.76841736]
[-203.68440247 167.38223267]
[-209.74354553 152.52738953]
[-201.78196716 138.59925842]
[-185.90710449 136.28230286]
[-174.29678345 147.35391235]
[-161.08692932 140.47283936]
[-147.82710266 149.10343933]
[-132.85975647 150.09272766]
[-117.89241791 151.08200073]
[-102.92507172 152.07127380]
[-89.71521759 145.19021606]
[-76.45538330 153.82081604]
[-61.48804092 154.81008911]
[-46.52069855 155.79937744]
[-43.73531723 153.54643250]
[-40.13230896 152.16236877]
[-36.00052261 151.93022156]
[-31.72238731 153.03309631]
[-18.12312508 146.70378113]
[-4.52386332 140.37448120]
[9.07539845 134.04518127]
[22.67465973 127.71588135]
[30.94864655 115.33078766]
[46.72490311 116.52252960]
[60.32416534 110.19322968]
[73.92343140 103.86392212]
[87.52268982 97.53462219]
[100.86071777 90.67189026]
[113.91659546 83.28649902]
[126.97247314 75.90110016]
[140.02835083 68.51570129]
[146.05081177 61.47721863]
[153.52778625 61.11288071]
[166.77406311 54.07469177]
[180.02033997 47.03650665]
[193.07621765 39.65110779]
[205.93258667 31.92365265]
[218.78897095 24.19619560]
[231.54222107 16.29971313]
[244.19013977 8.23558044]
[249.83276367 0.88906550]
[257.28005981 0.13063784]
[270.13644409 -7.59681892]
[282.99282837 -15.32427597]
[295.84921265 -23.05173302]
[308.60244751 -30.94821548]
[321.25036621 -39.01234818]
[328.33316040 -53.80309296]
[344.70230103 -54.79463959]
[353.51864624 -40.96696854]
[345.71264648 -26.54480553]
[329.31451416 -26.36443138]
[316.66659546 -18.30029869]
[312.66812134 -11.97179604]
[303.57666016 -10.19535637]
[290.72027588 -2.46789956]
[277.86389160 5.25955725]
[265.00753784 12.98701382]
[252.25427246 20.88349724]
[239.60635376 28.94762802]
[235.60787964 35.27613068]
[226.51641846 37.05257034]
[213.66004944 44.78002930]
[200.80366516 52.50748444]
[198.78143311 56.96089172]
[193.87287903 60.12962723]
[187.05853271 60.28278351]
[173.81224060 67.32096863]
[160.56596375 74.35916138]
[147.41374207 81.57157898]
[134.35786438 88.95697784]
[121.30198669 96.34237671]
[108.24610901 103.72776794]
[106.67281342 107.40343475]
[103.43256378 110.32860565]
[98.91775513 111.75157166]
[93.85198975 111.13388062]
[80.25273132 117.46318817]
[66.65347290 123.79248810]
[53.05420685 130.12179565]
[43.80751038 142.95959473]
[29.00396347 141.31513977]
[15.40470123 147.64443970]
[1.80543935 153.97373962]
[-11.79382229 160.30305481]
[-25.39308357 166.63235474]
[-10.53235435 168.67164612]
[3.32537580 174.41300964]
[15.27403545 183.48106384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 43]
[20 42]
[21 41]
[23 39]
[24 38]
[25 37]
[26 36]
[28 34]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
[53 109]
[54 108]
[55 107]
[56 106]
[57 102]
[58 101]
[59 100]
[60 99]
[62 98]
[63 97]
[64 96]
[65 93]
[66 92]
[67 91]
[68 89]
[69 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
