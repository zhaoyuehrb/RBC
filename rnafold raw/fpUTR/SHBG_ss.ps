%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCCCACACGCAAGGCUGCCUGCCUCUACACAUUCUCCCAAGAGUUGUCUGAGCCGCCGAGUGGACAGUGGCUGAUU\
) } def
/len { sequence length } bind def

/coor [
[112.47887421 226.67341614]
[123.11036682 215.37071228]
[120.18401337 200.65893555]
[117.25765991 185.94715881]
[114.33130646 171.23538208]
[110.54393005 156.72138977]
[105.90867615 142.45553589]
[101.27342224 128.18969727]
[96.63816833 113.92384338]
[86.37712097 104.42634583]
[89.09598541 90.71141052]
[84.46073151 76.44556427]
[71.69775391 71.66819000]
[64.19797516 60.52545547]
[64.56584167 47.29522324]
[72.43642426 36.89941788]
[68.36481476 22.46258926]
[64.29321289 8.02576160]
[60.22160339 -6.41106701]
[44.36463547 -8.15518379]
[30.39813423 -15.78445721]
[20.41008759 -28.12521172]
[15.88107300 -43.30192184]
[17.46484947 -59.02224350]
[24.89415359 -72.92322540]
[37.02527618 -82.92651367]
[32.39002228 -97.19235992]
[27.75476646 -111.45821381]
[23.11951065 -125.72406006]
[7.96966791 -127.27394104]
[-5.23677826 -134.85745239]
[-14.21173000 -147.16070557]
[-17.40022278 -162.05209351]
[-14.24983025 -176.95158386]
[-5.30637836 -189.27775574]
[7.88062668 -196.89503479]
[23.02645683 -198.48365784]
[37.50700378 -193.76840210]
[48.81342697 -183.56620789]
[54.98682022 -169.64468384]
[54.95760345 -154.41578674]
[48.73084259 -140.51805115]
[37.38536072 -130.35931396]
[42.02061462 -116.09346771]
[46.65586853 -101.82761383]
[51.29112244 -87.56176758]
[65.44712830 -86.96819305]
[78.56142426 -81.52629089]
[89.02300262 -71.88211823]
[95.53903198 -59.19931030]
[97.29458618 -45.01869965]
[94.05449677 -31.07112885]
[86.19464111 -19.06618881]
[74.65843201 -10.48267365]
[78.73004150 3.95415473]
[82.80164337 18.39098358]
[86.87325287 32.82781219]
[101.81134796 40.28573227]
[106.95724487 56.52018356]
[98.72657776 71.81031036]
[103.36183167 86.07615662]
[113.62287903 95.57365417]
[110.90401459 109.28858948]
[115.53926849 123.55443573]
[120.17452240 137.82028198]
[124.80977631 152.08613586]
[129.11958313 155.92114258]
[131.12588501 160.60112000]
[130.91821289 165.02380371]
[129.04307556 168.30902100]
[131.96943665 183.02079773]
[134.89579773 197.73257446]
[137.82214355 212.44435120]
[151.96972656 218.81819153]
[159.63964844 232.30714417]
[157.88270569 247.72442627]
[147.37445068 259.14178467]
[132.15553284 262.16903687]
[118.07792664 255.64208984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 70]
[6 66]
[7 65]
[8 64]
[9 63]
[11 61]
[12 60]
[16 57]
[17 56]
[18 55]
[19 54]
[26 46]
[27 45]
[28 44]
[29 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
