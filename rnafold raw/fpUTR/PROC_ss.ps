%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUAACUCGAACUCCAGGCUGUCAUGGCGGCAGGACGGCGAACUUGCAGUAUCUCCACGACCCGCCCCUACAGGUGCCAGUGCCUCCAGA\
) } def
/len { sequence length } bind def

/coor [
[12.35781097 308.82931519]
[2.55686188 297.47409058]
[1.04975986 282.55035400]
[-8.92560863 293.75265503]
[-18.90097809 304.95498657]
[-13.45034409 319.25704956]
[-15.28206348 334.45254517]
[-23.97522163 347.04968262]
[-37.53219604 354.15371704]
[-52.83768845 354.13217163]
[-66.37461090 346.99002075]
[-75.03227997 334.36846924]
[-76.82122803 319.16787720]
[-71.33036041 304.88119507]
[-59.82144165 294.79144287]
[-44.93914032 291.21713257]
[-30.10330009 294.97961426]
[-20.12793159 283.77728271]
[-10.15256214 272.57498169]
[-1.74183643 260.15484619]
[4.95729542 246.73390198]
[11.65642738 233.31295776]
[18.35556030 219.89201355]
[12.43268776 211.09466553]
[10.78882122 200.53460693]
[13.80309868 190.19596863]
[20.97279358 182.05110168]
[30.99570656 177.68443298]
[42.00630569 177.98445129]
[50.00178146 165.29302979]
[57.99725723 152.60159302]
[65.99272919 139.91017151]
[73.98820496 127.21874237]
[74.22575378 112.32603455]
[88.12818146 104.77399445]
[95.48452759 91.70173645]
[102.18366241 78.28079224]
[108.88279724 64.85985565]
[108.86173248 57.92374039]
[111.99603271 52.88254166]
[116.49409485 50.79539871]
[124.06558228 37.84654999]
[131.63706970 24.89770317]
[139.20854187 11.94885540]
[134.29576111 -0.71946728]
[137.59121704 -13.69941521]
[147.65357971 -22.23648453]
[160.60681152 -23.33982468]
[168.60229492 -36.03125381]
[176.59776306 -48.72268295]
[173.31423950 -63.94950867]
[181.60359192 -76.70652008]
[196.14027405 -79.74301910]
[194.00532532 -95.64338684]
[205.20919800 -107.12610626]
[221.15722656 -105.38262939]
[229.61546326 -91.75039673]
[224.09547424 -76.68688965]
[208.83171082 -71.74754333]
[212.36909485 -57.32455826]
[204.44132996 -44.33974838]
[189.28919983 -40.72720718]
[181.29371643 -28.03577805]
[173.29824829 -15.34434795]
[177.75158691 0.77947575]
[169.07775879 15.47291946]
[152.15739441 19.52033806]
[144.58590698 32.46918488]
[137.01443481 45.41803360]
[129.44294739 58.36687851]
[122.30373383 71.55898285]
[115.60459900 84.97992706]
[108.90547180 98.40086365]
[109.69050598 102.40657806]
[108.59785461 106.73522186]
[105.53066254 110.49011993]
[100.81960297 112.76947021]
[100.01016998 128.56996155]
[86.67963409 135.21421814]
[78.68415833 147.90563965]
[70.68868256 160.59707642]
[62.69321060 173.28849792]
[54.69773483 185.97993469]
[60.33162689 205.06510925]
[50.53958130 222.04664612]
[31.77650070 226.59115601]
[25.07736778 240.01208496]
[18.37823486 253.43302917]
[11.67910385 266.85397339]
[26.09640694 262.71374512]
[40.27836990 267.59963989]
[49.08633041 279.74130249]
[49.32883835 294.73934937]
[40.91801834 307.15942383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 19]
[4 18]
[5 17]
[20 89]
[21 88]
[22 87]
[23 86]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[35 77]
[36 73]
[37 72]
[38 71]
[41 70]
[42 69]
[43 68]
[44 67]
[48 64]
[49 63]
[50 62]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
