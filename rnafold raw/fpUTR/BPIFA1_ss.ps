%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGGGGGAGAGAGAGGAGACCAGGACAGCUGCUGAGACCUCUAAGAAGUCCAGAUACUAAGAGCAAAG\
) } def
/len { sequence length } bind def

/coor [
[142.30345154 246.29748535]
[152.44941711 234.89476013]
[146.63261414 221.06854248]
[140.81579590 207.24230957]
[134.99897766 193.41607666]
[119.27526855 187.87609863]
[112.14281464 172.43968201]
[118.35368347 156.25228882]
[111.93098450 142.69688416]
[105.50828552 129.14149475]
[87.43304443 126.86334229]
[74.09993744 114.44833374]
[70.54019928 96.58124542]
[78.09710693 80.00423431]
[69.93679810 67.41815186]
[61.77649307 54.83206940]
[53.61618805 42.24599075]
[45.45587921 29.65991211]
[31.49433899 29.92560577]
[19.36126328 23.23659515]
[12.24620056 11.47592449]
[11.95709038 -2.15715718]
[18.46206665 -14.01720142]
[10.86647224 -26.95191956]
[3.27087808 -39.88663864]
[-12.18524170 -41.26068115]
[-23.85971260 -51.48253632]
[-27.26346207 -66.62169647]
[-21.08768082 -80.85684204]
[-7.70708036 -88.71427155]
[7.73322392 -87.17263794]
[19.29611969 -76.82473755]
[22.53543854 -61.64954376]
[16.20559692 -47.48223495]
[23.80119133 -34.54751587]
[31.39678574 -21.61279678]
[47.63345337 -20.61928368]
[60.27881241 -10.12744999]
[64.33203125 5.96529055]
[58.04196167 21.49960518]
[66.20226288 34.08568573]
[74.36257172 46.67176437]
[82.52288055 59.25784302]
[90.68318176 71.84392548]
[102.22689056 70.42621613]
[113.42813110 73.55661011]
[122.56427765 80.75367737]
[128.23031616 90.91059875]
[129.55485535 102.46537018]
[126.33422089 113.64099121]
[119.06369019 122.71878815]
[125.48638916 136.27418518]
[131.90908813 149.82958984]
[145.20838928 152.94810486]
[154.07542419 163.07926941]
[155.36604309 176.28326416]
[148.82521057 187.59925842]
[154.64202881 201.42549133]
[160.45883179 215.25172424]
[166.27565002 229.07795715]
[181.52177429 229.79800415]
[194.94154358 237.06935120]
[203.87046814 249.44824219]
[206.53569031 264.47686768]
[202.40803528 279.17126465]
[192.30705261 290.61383057]
[178.23828125 296.53268433]
[162.99511719 295.75259399]
[149.60408020 288.42846680]
[140.72398376 276.01449585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 60]
[3 59]
[4 58]
[5 57]
[8 53]
[9 52]
[10 51]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[23 36]
[24 35]
[25 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
