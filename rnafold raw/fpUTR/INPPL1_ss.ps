%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUGCUGAGUCCCGAUCCCCGGCUCUGUCCGGCCCACGGAUCCUCAAGCCCGGGCCCCGGGCCCGGCCCCAGCCUCAGCCCUGAGCGUCUCGGGGCGGAUGGCGCGGGGCGGCGGGGGCGGGCGGUGCUGAGCCCUGCGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[160.28059387 388.38986206]
[162.36647034 376.72421265]
[169.92553711 367.44171143]
[165.53318787 353.09921265]
[161.14085388 338.75671387]
[156.74850464 324.41421509]
[152.35617065 310.07171631]
[147.96382141 295.72921753]
[143.57148743 281.38671875]
[140.57452393 279.40753174]
[138.41624451 275.84475708]
[137.84573364 271.12252808]
[139.38751221 265.99002075]
[135.91680908 251.39707947]
[132.44609070 236.80412292]
[128.97538757 222.21118164]
[124.33571625 216.39129639]
[125.58936310 207.27168274]
[122.42917633 192.60835266]
[119.26898956 177.94503784]
[116.10880280 163.28170776]
[112.94860840 148.61837769]
[109.78842163 133.95504761]
[99.54341125 123.14352417]
[104.19963837 108.02300262]
[102.91811371 117.15354919]
[96.27445984 125.47329712]
[84.89850616 130.56103516]
[70.37951660 130.38383484]
[55.39303589 131.02044678]
[40.40655136 131.65705872]
[25.42006493 132.29368591]
[10.43358135 132.93029785]
[-1.43417704 143.72547913]
[-17.25009155 141.03541565]
[-24.88154411 126.92370605]
[-18.47434044 112.21563721]
[-2.94353652 108.19398499]
[9.79696369 117.94381714]
[24.78344727 117.30719757]
[39.76993179 116.67057800]
[54.75641632 116.03396606]
[69.74290466 115.39734650]
[73.11943054 108.70040131]
[59.66234207 102.07418060]
[46.20525360 95.44796753]
[31.41967964 92.92074585]
[29.09168434 78.10250092]
[42.39003754 71.16320038]
[53.21350098 81.54792786]
[66.54299164 88.42722321]
[79.87248230 95.30651093]
[83.24901581 88.60956573]
[74.84938812 76.18192291]
[66.44976807 63.75428009]
[58.05014801 51.32663345]
[49.65052795 38.89899063]
[41.25090408 26.47134590]
[27.37193871 16.73427010]
[32.88640594 0.70220834]
[49.81848526 1.56305218]
[53.67855072 18.07172394]
[62.07817078 30.49936867]
[70.47779083 42.92701340]
[78.87741089 55.35466003]
[87.27703857 67.78230286]
[95.67665863 80.20994568]
[110.66313934 80.84656525]
[120.08644104 69.17603302]
[129.50973511 57.50549316]
[138.93304443 45.83495712]
[148.35633850 34.16442108]
[150.75468445 15.93946362]
[167.30947876 10.20625877]
[176.48294067 -1.66166103]
[185.65640259 -13.52958107]
[194.70339966 -25.49419403]
[203.62289429 -37.55414963]
[205.60816956 -53.25030518]
[219.39698792 -58.88214111]
[228.31649780 -70.94210052]
[237.23599243 -83.00205231]
[246.15548706 -95.06201172]
[255.07498169 -107.12197113]
[263.99447632 -119.18192291]
[272.91397095 -131.24188232]
[281.83346558 -143.30183411]
[286.39071655 -159.63180542]
[303.34405518 -159.77325439]
[308.17315674 -143.52160645]
[293.89343262 -134.38233948]
[284.97393799 -122.32238770]
[276.05444336 -110.26242828]
[267.13494873 -98.20246887]
[258.21545410 -86.14250946]
[249.29594421 -74.08255768]
[240.37644958 -62.02259827]
[231.45695496 -49.96264267]
[230.10966492 -35.12909698]
[215.68284607 -28.63465309]
[206.76335144 -16.57469559]
[205.30459595 -9.27609444]
[197.52432251 -4.35611582]
[188.35086060 7.51180458]
[179.17739868 19.37972450]
[180.39457703 31.45845604]
[172.78935242 41.43107986]
[160.02688599 43.58771896]
[150.60357666 55.25825500]
[141.18028259 66.92879486]
[131.75697327 78.59932709]
[122.33367920 90.26986694]
[118.86296844 104.86281586]
[129.33401489 116.72315979]
[124.45175171 130.79486084]
[127.61193848 145.45819092]
[130.77212524 160.12152100]
[133.93231201 174.78483582]
[137.09249878 189.44816589]
[140.25270081 204.11149597]
[143.56832886 218.74046326]
[147.03904724 233.33340454]
[150.50975037 247.92636108]
[153.98046875 262.51931763]
[157.91398621 276.99438477]
[162.30633545 291.33688354]
[166.69866943 305.67938232]
[171.09101868 320.02188110]
[175.48335266 334.36437988]
[179.87570190 348.70687866]
[184.26803589 363.04937744]
[201.29737854 371.22637939]
[206.91542053 388.92962646]
[198.02627563 404.87506104]
[203.02337646 419.01824951]
[208.02046204 433.16140747]
[213.01756287 447.30456543]
[226.81471252 455.49102783]
[228.87382507 471.40139771]
[217.61532593 482.83056641]
[201.67579651 481.01107788]
[193.28265381 467.33868408]
[198.87440491 452.30166626]
[193.87730408 438.15847778]
[188.88020325 424.01531982]
[183.88311768 409.87216187]
[172.69139099 407.27233887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[9 125]
[13 124]
[14 123]
[15 122]
[16 121]
[18 120]
[19 119]
[20 118]
[21 117]
[22 116]
[23 115]
[25 113]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[68 112]
[69 111]
[70 110]
[71 109]
[72 108]
[74 105]
[75 104]
[76 103]
[77 101]
[78 100]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[134 146]
[135 145]
[136 144]
[137 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
