%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAAUCCCGGCAAGCUCGGCGGCGCUUUAGCUCCGCCUCUCUCCUCCUUUGCUCACGAACCCCGCCCCAGCCCGCCCCGCCCCGCGCCGGGGCCGGAGCCGCAGCCCGAGCGGCGGGGUGACC\
) } def
/len { sequence length } bind def

/coor [
[-60.05428696 223.62103271]
[-73.98112488 229.23968506]
[-88.73181915 232.03231812]
[-103.73909760 231.89347839]
[-118.42620087 228.83033752]
[-132.22901917 222.96247864]
[-144.61779785 214.51713562]
[-155.11744690 203.82044983]
[-163.32577515 191.28483582]
[-168.92884827 177.39312744]
[-183.66316223 180.20384216]
[-192.55764771 192.99156189]
[-207.54037476 195.63214111]
[-219.67669678 187.07379150]
[-234.41101074 189.88452148]
[-240.07695007 199.33383179]
[-249.83612061 203.95223999]
[-260.29840088 202.40663147]
[-267.97732544 195.45986938]
[-282.83422852 197.52673340]
[-297.69116211 199.59358215]
[-312.54806519 201.66043091]
[-327.40499878 203.72729492]
[-340.00741577 213.29231262]
[-353.67941284 207.38252258]
[-368.53634644 209.44937134]
[-381.13354492 219.94900513]
[-396.42962646 214.03611755]
[-398.68927002 197.79339600]
[-385.58795166 187.92994690]
[-370.60317993 194.59245300]
[-355.74627686 192.52558899]
[-344.20651245 183.10839844]
[-329.47186279 188.87037659]
[-314.61492920 186.80351257]
[-299.75802612 184.73666382]
[-284.90109253 182.66979980]
[-270.04415894 180.60295105]
[-255.82943726 167.59202576]
[-237.22172546 175.15020752]
[-222.48741150 172.33949280]
[-214.35388184 159.91445923]
[-199.45123291 156.85409546]
[-186.47387695 165.46954346]
[-171.73956299 162.65881348]
[-171.64384460 147.68000793]
[-168.62660217 133.00300598]
[-162.80198669 119.19229889]
[-154.39212036 106.77940369]
[-143.71868896 96.24244690]
[-131.19058228 87.98773193]
[-117.28828430 82.33408356]
[-102.54539490 79.50052643]
[-87.52818298 79.59780884]
[-72.81383514 82.62405396]
[-58.96825409 88.46479797]
[-46.52430344 96.89727783]
[-35.96129608 107.59896088]
[-27.68654442 120.15985107]
[-22.01964188 134.09822083]
[-7.28533316 131.28749084]
[7.44897604 128.47677612]
[22.18328476 125.66605377]
[36.91759491 122.85533905]
[51.65190125 120.04461670]
[66.38620758 117.23389435]
[81.12052155 114.42317963]
[77.56047821 97.52143097]
[86.24407196 83.61528778]
[101.29232025 79.83023834]
[113.99516296 87.10711670]
[128.14001465 82.11483002]
[134.44758606 70.78047180]
[146.41856384 66.94998932]
[157.40710449 72.17278290]
[171.67295837 67.53752899]
[185.87942505 62.72337723]
[200.02429199 57.73108292]
[210.46260071 45.84191513]
[225.03941345 48.90222931]
[239.18428040 43.90993881]
[253.32913208 38.91764450]
[267.47399902 33.92535019]
[281.61883545 28.93305779]
[295.76370239 23.94076538]
[308.68753052 12.96755123]
[322.80957031 22.34860802]
[317.70449829 38.51568985]
[300.75601196 38.08562469]
[286.61114502 43.07791519]
[272.46627808 48.07020950]
[258.32141113 53.06250381]
[244.17657471 58.05479431]
[230.03170776 63.04708862]
[220.60513306 74.57917786]
[205.01658630 71.87593842]
[190.87171936 76.86823273]
[185.55195618 82.11994171]
[176.30821228 81.80337524]
[162.04235840 86.43862915]
[151.09065247 100.08959198]
[133.13230896 96.25968170]
[118.98745728 101.25197601]
[117.21612549 112.69997406]
[108.49164581 122.18907166]
[119.55434418 132.31906128]
[135.67420959 135.33267212]
[140.86834717 150.88751221]
[129.79345703 162.98208618]
[113.84245300 159.17456055]
[109.42435455 143.38175964]
[98.36165619 133.25177002]
[83.93123627 129.15748596]
[69.19692993 131.96820068]
[54.46262360 134.77893066]
[39.72831345 137.58964539]
[24.99400520 140.40036011]
[10.25969601 143.21109009]
[-4.47461319 146.02180481]
[-19.20892143 148.83251953]
[-19.34681892 163.87821960]
[-22.41651726 178.60317993]
[-28.29820061 192.44184875]
[-36.76409149 204.86309814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 45]
[11 44]
[14 41]
[15 40]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[25 32]
[26 31]
[60 120]
[61 119]
[62 118]
[63 117]
[64 116]
[65 115]
[66 114]
[67 113]
[71 103]
[72 102]
[75 100]
[76 99]
[77 97]
[78 96]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
