%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCUUCCAGCGCGCCGAGCGGAGCCUAACGCCGGGUCCUCUAGGAACCUCGGGCCGGGCAGCACCCGCGGGAUUCUGCUGGCGUCCUCCGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[109.61642456 447.54309082]
[96.44004059 455.33035278]
[81.15342712 456.09069824]
[67.26934052 449.64938354]
[57.97823334 437.48657227]
[55.41514206 422.39718628]
[60.16904068 407.84869385]
[71.14752197 397.18417358]
[85.82780457 392.85430908]
[88.69519043 378.13092041]
[91.56256866 363.40753174]
[94.42994690 348.68414307]
[97.29732513 333.96075439]
[98.97679138 319.05508423]
[99.45756531 304.06277466]
[99.93833923 289.07049561]
[100.41911316 274.07821655]
[97.43138885 267.16311646]
[101.16323090 258.61526489]
[102.12428284 243.64607239]
[103.08533478 228.67689514]
[104.04639435 213.70771790]
[105.00744629 198.73854065]
[105.96849823 183.76936340]
[106.92955017 168.80017090]
[107.65055847 153.81752014]
[108.13133240 138.82522583]
[108.61210632 123.83292389]
[90.84661102 122.25164032]
[79.42381287 109.77561951]
[79.41946411 93.78025818]
[89.59933472 82.66073608]
[87.20533752 67.85300446]
[84.81134033 53.04528046]
[74.97071075 40.65687180]
[80.57756042 26.85787010]
[78.18356323 12.05014229]
[75.78956604 -2.75758410]
[73.39556885 -17.56531143]
[71.00157166 -32.37303925]
[61.64013290 -38.36132812]
[57.30778885 -48.35348511]
[59.25477600 -58.84331512]
[66.57353210 -66.29829407]
[65.13318634 -81.22898102]
[55.17250824 -94.25652313]
[61.72330475 -109.29045868]
[78.04667664 -110.86515045]
[87.35053253 -97.36070251]
[80.06387329 -82.66932678]
[81.50421906 -67.73863983]
[93.93735504 -53.07634354]
[85.80929565 -34.76703644]
[88.20329285 -19.95930862]
[90.59729004 -5.15158224]
[92.99128723 9.65614414]
[95.38529205 24.46387100]
[105.05467987 35.79312897]
[99.61906433 50.65127945]
[102.01306152 65.45900726]
[104.40706635 80.26673126]
[117.26784515 85.14188385]
[125.27916718 98.22784424]
[138.79370117 91.71958923]
[147.57957458 77.87255096]
[163.95085144 78.82807159]
[171.06617737 93.60319519]
[161.60591125 106.99853516]
[145.30195618 105.23412323]
[131.78741455 111.74237823]
[123.60440063 124.31369781]
[123.12362671 139.30599976]
[122.64285278 154.29829407]
[125.53665924 163.16497803]
[121.89873505 169.76123047]
[120.93768311 184.73040771]
[119.97662354 199.69958496]
[119.01557159 214.66877747]
[118.05451965 229.63795471]
[117.09346771 244.60713196]
[116.13241577 259.57632446]
[115.41140747 274.55899048]
[114.93063354 289.55126953]
[114.44985962 304.54354858]
[113.96908569 319.53585815]
[116.22926331 323.10867310]
[117.23869324 326.84564209]
[117.08724213 330.36154175]
[115.97314453 333.33374023]
[114.17559052 335.53036499]
[112.02071381 336.82815552]
[109.15333557 351.55154419]
[106.28595734 366.27493286]
[103.41857147 380.99829102]
[100.55119324 395.72167969]
[112.53374481 405.24414062]
[118.70783997 419.24911499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 95]
[10 94]
[11 93]
[12 92]
[13 91]
[14 85]
[15 84]
[16 83]
[17 82]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 73]
[27 72]
[28 71]
[32 61]
[33 60]
[34 59]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[44 51]
[45 50]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
