%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGAGUCCCAGCAUGCACCGCGCCCGGCCGGCUCUGCCUUUGGGGGCCAGCAGGGCUGUACCUGGGAGUUGGGUUGGGGCGGAGCGGAGGGGAGGCCGUGCCAGGCAGGGCCGGUUCGUGCGGAACCGCC\
) } def
/len { sequence length } bind def

/coor [
[82.63292694 103.17567444]
[68.12898254 99.35003662]
[58.93670273 100.18617249]
[53.33192062 95.26097107]
[38.92164230 91.09636688]
[24.51136398 86.93177032]
[10.10108662 82.76716614]
[-5.30471897 86.36879730]
[-15.38343620 75.40209198]
[-29.79371452 71.23748779]
[-44.20399094 67.07289124]
[-58.61426926 62.90829086]
[-73.02455139 58.74369049]
[-87.43482208 54.57909012]
[-99.14562988 60.12870789]
[-111.10366821 56.29641724]
[-117.01519012 45.67571640]
[-131.32388306 41.17444611]
[-145.63256836 36.67317963]
[-159.94125366 32.17190933]
[-164.34741211 33.33641815]
[-168.46237183 33.01156235]
[-171.83860779 31.48572731]
[-174.17494202 29.16661644]
[-175.34333801 26.52052689]
[-189.16764832 20.69915009]
[-202.99195862 14.87777138]
[-216.81626892 9.05639362]
[-232.53758240 10.83151531]
[-241.26451111 -1.23869097]
[-255.08882141 -7.06006861]
[-270.81011963 -5.28494692]
[-279.53707886 -17.35515404]
[-293.36138916 -23.17653084]
[-307.18569946 -28.99790955]
[-321.01000977 -34.81928635]
[-334.83432007 -40.64066315]
[-348.65863037 -46.46204376]
[-362.48788452 -39.16233444]
[-377.76287842 -42.51022339]
[-387.27124023 -54.92493820]
[-386.52340698 -70.54463196]
[-375.87246704 -81.99415588]
[-360.34747314 -83.86740112]
[-347.27886963 -75.27988434]
[-342.83724976 -60.28635406]
[-329.01293945 -54.46497726]
[-315.18862915 -48.64359665]
[-301.36431885 -42.82221985]
[-287.54000854 -37.00084305]
[-273.71569824 -31.17946434]
[-258.98318481 -33.37097168]
[-249.26744080 -20.88437843]
[-235.44313049 -15.06300163]
[-220.71063232 -17.25450706]
[-210.99488831 -4.76791668]
[-197.17057800 1.05346131]
[-183.34626770 6.87483931]
[-169.52195740 12.69621658]
[-155.43998718 17.86322021]
[-141.13130188 22.36448860]
[-126.82260895 26.86575890]
[-112.51392365 31.36702919]
[-95.66391754 26.60847282]
[-83.27022552 40.16881180]
[-68.85994720 44.33341217]
[-54.44966888 48.49801254]
[-40.03939056 52.66261292]
[-25.62911415 56.82721329]
[-11.21883678 60.99180984]
[3.15624905 57.09230042]
[14.26568604 68.35688782]
[28.67596436 72.52149200]
[43.08624268 76.68608856]
[57.49652100 80.85069275]
[71.95462799 84.84608459]
[86.45857239 88.67173004]
[94.84318542 83.11488342]
[104.90174103 83.03907776]
[113.36915588 88.46892548]
[117.49683380 97.64185333]
[131.80552673 102.14311981]
[146.11421204 106.64438629]
[160.42289734 111.14566040]
[174.73158264 115.64692688]
[190.04057312 107.27504730]
[206.36109924 112.41928864]
[213.80348206 127.45356750]
[228.21376038 131.61816406]
[243.61956787 128.01654053]
[253.69828796 138.98324585]
[269.10409546 135.38162231]
[279.18280029 146.34832764]
[293.59307861 150.51292419]
[308.00335693 154.67752075]
[325.72009277 149.81916809]
[337.43392944 162.83271790]
[351.93786621 166.65837097]
[366.44183350 170.48400879]
[380.94577026 174.30964661]
[396.26290894 170.34785461]
[406.59594727 181.07528687]
[421.09988403 184.90092468]
[435.60382080 188.72656250]
[452.46124268 186.91983032]
[458.86395264 202.61828613]
[445.55145264 213.11654663]
[431.77819824 203.23051453]
[417.27426147 199.40487671]
[402.77029419 195.57922363]
[388.49057007 199.81465149]
[377.12011719 188.81359863]
[362.61618042 184.98796082]
[348.11224365 181.16230774]
[333.60827637 177.33666992]
[322.94253540 183.16650391]
[310.78369141 180.02896118]
[303.83877563 169.08779907]
[289.42849731 164.92320251]
[275.01821899 160.75860596]
[260.64312744 164.65811157]
[249.53369141 153.39352417]
[235.15859985 157.29302979]
[224.04916382 146.02844238]
[209.63888550 141.86384583]
[199.28683472 149.62680054]
[186.15718079 149.98617554]
[175.07128906 142.58447266]
[170.23031616 129.95561218]
[155.92163086 125.45434570]
[141.61294556 120.95307922]
[127.30425262 116.45180511]
[112.99555969 111.95053864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[4 75]
[5 74]
[6 73]
[7 72]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[17 63]
[18 62]
[19 61]
[20 60]
[25 59]
[26 58]
[27 57]
[28 56]
[30 54]
[31 53]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[81 133]
[82 132]
[83 131]
[84 130]
[85 129]
[88 125]
[89 124]
[91 122]
[93 120]
[94 119]
[95 118]
[97 115]
[98 114]
[99 113]
[100 112]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
