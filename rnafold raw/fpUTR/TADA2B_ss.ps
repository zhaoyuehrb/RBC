%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCUGGGGCCGCGGUGGCGGCAGCCGCGGCGGCGGGCGGCGGUUGCUCGUGCGCGGCGGCGGCGGCGGGUCCCGCGGGCGGCGGGGCGCUGACGGCCGGGGGCGCGGCGGCUGCGGCGGGCCGGGCGGCGGGCGGCGAGCGGGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[74.22947693 521.75463867]
[61.33730316 529.72753906]
[46.49509048 532.80725098]
[31.49510193 530.62182617]
[18.14866257 523.43511963]
[8.06741905 512.11505127]
[2.46872997 498.02850342]
[2.02866483 482.87652588]
[6.80036354 468.48880005]
[16.20762062 456.60272217]
[29.11446381 448.65353394]
[43.96232605 445.60122681]
[46.12494278 430.75793457]
[40.30342865 417.04809570]
[49.94952393 404.50762939]
[52.11213684 389.66436768]
[46.29062271 375.95452881]
[55.93671799 363.41406250]
[50.11520004 349.70425415]
[59.76129532 337.16375732]
[61.92391205 322.32049561]
[56.10239410 308.61065674]
[65.74848938 296.07019043]
[67.91110229 281.22689819]
[60.53463364 265.33319092]
[71.98434448 250.94883728]
[73.83972931 236.06402588]
[75.69512177 221.17922974]
[77.55051422 206.29441833]
[79.40589905 191.40960693]
[72.21147919 181.63592529]
[73.67760468 169.18420410]
[83.55818176 160.82939148]
[85.72079468 145.98609924]
[87.88341522 131.14282227]
[90.04602814 116.29953003]
[81.46895599 104.62133789]
[83.55797577 90.28320312]
[95.11068726 81.53784943]
[97.27330017 66.69456482]
[91.60646820 51.92305374]
[101.09788513 40.44427490]
[103.26049805 25.60099030]
[105.42311096 10.75770664]
[107.58573151 -4.08557796]
[109.74834442 -18.92886162]
[111.91096497 -33.77214813]
[114.07357788 -48.61543274]
[116.23619080 -63.45871735]
[114.37010193 -72.46656799]
[118.59995270 -78.58515930]
[121.06887054 -93.38058472]
[123.53778839 -108.17600250]
[126.00670624 -122.97142029]
[128.47563171 -137.76684570]
[123.11528778 -152.65231323]
[132.84190369 -163.93247986]
[125.98128510 -174.90338135]
[128.38386536 -187.20877075]
[138.21708679 -194.32160950]
[140.99124146 -209.06283569]
[143.76541138 -223.80407715]
[146.53958130 -238.54530334]
[141.48802185 -253.53839111]
[151.44569397 -264.61514282]
[154.06736755 -279.38424683]
[156.53628540 -294.17965698]
[159.00520325 -308.97509766]
[161.47412109 -323.77050781]
[159.48672485 -330.18338013]
[160.87312317 -335.77688599]
[164.36296082 -339.12106323]
[167.44119263 -353.80178833]
[170.51942444 -368.48254395]
[173.59765625 -383.16329956]
[176.67588806 -397.84405518]
[179.75410461 -412.52481079]
[182.83233643 -427.20556641]
[175.29667664 -441.36865234]
[181.80337524 -456.03298950]
[197.36108398 -459.94931030]
[210.03523254 -450.11337280]
[210.10330200 -434.07046509]
[197.51309204 -424.12734985]
[194.43486023 -409.44659424]
[191.35662842 -394.76583862]
[188.27839661 -380.08508301]
[185.20018005 -365.40432739]
[182.12194824 -350.72357178]
[179.04371643 -336.04281616]
[176.26954651 -321.30157471]
[173.80062866 -306.50616455]
[171.33171082 -291.71075439]
[168.86279297 -276.91531372]
[170.87673950 -269.75482178]
[166.18692017 -261.84097290]
[171.43690491 -247.90228271]
[161.28082275 -235.77114868]
[158.50665283 -221.02990723]
[155.73248291 -206.28868103]
[152.95831299 -191.54743958]
[159.67167664 -175.36247253]
[147.63731384 -161.46356201]
[153.17425537 -147.63635254]
[143.27104187 -135.29792786]
[140.80212402 -120.50250244]
[138.33320618 -105.70708466]
[135.86428833 -90.91165924]
[133.39537048 -76.11624146]
[131.07948303 -61.29610062]
[128.91685486 -46.45281601]
[126.75424957 -31.60953140]
[124.59162903 -16.76624680]
[122.42901611 -1.92296207]
[120.26639557 12.92032242]
[118.10378265 27.76360703]
[115.94116211 42.60689163]
[121.76268005 56.31671143]
[112.11658478 68.85718536]
[109.95397186 83.70046997]
[118.53104401 95.37866211]
[116.44202423 109.71679688]
[104.88931274 118.46215057]
[102.72669983 133.30543518]
[100.56407928 148.14871216]
[98.40146637 162.99200439]
[105.62177277 179.89976501]
[94.29071045 193.26499939]
[92.43531799 208.14981079]
[90.57993317 223.03460693]
[88.72454071 237.91941833]
[86.86914825 252.80422974]
[94.17727661 263.48223877]
[92.28527069 275.87640381]
[82.75438690 283.38952637]
[80.59177399 298.23281860]
[86.25860596 313.00433350]
[76.76719666 324.48309326]
[74.60457611 339.32638550]
[80.27140808 354.09790039]
[70.77999878 365.57669067]
[76.44683075 380.34820557]
[66.95542145 391.82696533]
[64.79280853 406.67025757]
[70.45964050 421.44177246]
[60.96822739 432.92056274]
[58.80561066 447.76382446]
[72.16527557 454.92590332]
[82.26736450 466.22738647]
[87.89199829 480.30358887]
[88.35998535 495.45471191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 147]
[13 146]
[15 144]
[16 143]
[18 141]
[20 139]
[21 138]
[23 136]
[24 135]
[26 132]
[27 131]
[28 130]
[29 129]
[30 128]
[33 126]
[34 125]
[35 124]
[36 123]
[39 120]
[40 119]
[42 117]
[43 116]
[44 115]
[45 114]
[46 113]
[47 112]
[48 111]
[49 110]
[51 109]
[52 108]
[53 107]
[54 106]
[55 105]
[57 103]
[60 101]
[61 100]
[62 99]
[63 98]
[65 96]
[66 94]
[67 93]
[68 92]
[69 91]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
