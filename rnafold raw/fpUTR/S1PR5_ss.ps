%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGGAGGGGCCUGUGCCCGGGAGCAGCGGGAACCUAUCUGCUGGUGGGAGAGGACUCAGGCUAAGGUGGCCCCCACUGAAGACUCCUGCUAAGCAACCCACUGAAGACCCCUCCGAAUCAUCGACGGGGCGUCCUUGGGGUGCAGCCCAGGAAGCUCAGUUCACAGCCUUGGGGCGCGCGGCCC\
) } def
/len { sequence length } bind def

/coor [
[119.10430908 346.20947266]
[116.85070801 361.40213013]
[107.29013824 373.42257690]
[92.99434662 379.03738403]
[77.80883026 376.73617554]
[65.81841278 367.13796997]
[60.24845505 352.82464600]
[62.59725189 337.64642334]
[72.23298645 325.68615723]
[86.56369781 320.16107178]
[88.81113434 305.33041382]
[91.05857086 290.49972534]
[93.30600739 275.66903687]
[95.55343628 260.83837891]
[97.67688751 245.98942566]
[99.67618561 231.12326050]
[101.67549133 216.25711060]
[103.67479706 201.39094543]
[105.67410278 186.52478027]
[107.67340851 171.65861511]
[109.67270660 156.79244995]
[103.70082855 143.14746094]
[113.20847321 130.50170898]
[107.36151886 125.80456543]
[89.82065582 111.71314240]
[79.52133179 123.72290802]
[64.90990448 120.83232880]
[50.82406235 125.98879242]
[36.73822403 131.14526367]
[22.65238380 136.30172729]
[8.56654453 141.45819092]
[-5.51929474 146.61465454]
[-9.63900089 161.57485962]
[-21.78627586 171.23007202]
[-37.29024506 171.86769104]
[-50.18931580 163.24252319]
[-55.52353287 148.67111206]
[-51.24177933 133.75648499]
[-38.99047852 124.23360443]
[-23.48050499 123.76422119]
[-10.67575932 132.52880859]
[3.41007996 127.37235260]
[17.49592018 122.21588135]
[31.58175850 117.05941772]
[45.66759872 111.90295410]
[59.75343704 106.74649048]
[69.04524994 95.10555267]
[84.66419220 97.62730408]
[84.41358185 90.13149261]
[83.91235352 75.13986969]
[83.66174316 67.64405823]
[69.26294708 63.43993378]
[54.86414719 59.23581696]
[39.07019424 63.64978790]
[27.54147148 51.98700333]
[32.13773727 36.24513626]
[48.13074875 32.61806870]
[59.06826782 44.83701706]
[73.46706390 49.04113770]
[87.86585999 53.24525833]
[102.33290100 49.28232574]
[112.57916260 38.32722855]
[122.82541656 27.37212944]
[133.07167053 16.41703224]
[143.31793213 5.46193409]
[144.50495911 0.33800739]
[147.27120972 -3.43090653]
[150.83076477 -5.46893406]
[154.36276245 -5.76901388]
[165.14511108 -16.19689941]
[175.92747498 -26.62478638]
[186.70982361 -37.05267334]
[172.00668335 -40.02215195]
[165.00891113 -53.28982162]
[170.86138916 -67.10099030]
[185.26129150 -71.30136871]
[197.62144470 -62.80276108]
[198.85450745 -47.85379791]
[210.46952820 -57.34545517]
[222.08453369 -66.83711243]
[233.69953918 -76.32877350]
[245.31454468 -85.82042694]
[249.99159241 -93.69034576]
[257.20385742 -95.37169647]
[259.18923950 -110.82148743]
[271.26013184 -120.08150482]
[285.97692871 -118.09354401]
[297.74890137 -127.38979340]
[309.52090454 -136.68603516]
[321.29287720 -145.98228455]
[333.06488037 -155.27853394]
[330.95910645 -170.42822266]
[336.68133545 -184.50491333]
[348.60195923 -193.76585388]
[363.45812988 -195.80296326]
[377.24642944 -190.16835022]
[389.01840210 -199.46459961]
[400.79040527 -208.76084900]
[406.82559204 -223.38574219]
[421.60913086 -225.20123291]
[433.38113403 -234.49748230]
[445.15310669 -243.79373169]
[456.92510986 -253.08998108]
[458.91046143 -268.53976440]
[470.98138428 -277.79980469]
[485.69815063 -275.81182861]
[497.47015381 -285.10809326]
[503.50531006 -299.73297119]
[518.28887939 -301.54846191]
[523.09674072 -309.33914185]
[530.33612061 -310.89971924]
[542.26177979 -319.99795532]
[554.18750000 -329.09619141]
[566.11315918 -338.19445801]
[568.35644531 -353.60891724]
[580.58038330 -362.66592407]
[595.26190186 -360.43234253]
[607.18756104 -369.53057861]
[619.11328125 -378.62881470]
[624.92834473 -393.96234131]
[641.15631104 -396.32565308]
[651.10321045 -383.28756714]
[644.53656006 -368.26055908]
[628.21148682 -366.70312500]
[616.28582764 -357.60488892]
[604.36010742 -348.50665283]
[602.63555908 -333.75668335]
[590.67083740 -324.35989380]
[575.21142578 -326.26876831]
[563.28576660 -317.17053223]
[551.36004639 -308.07226562]
[539.43438721 -298.97402954]
[527.58514404 -289.77645874]
[522.39196777 -275.81652832]
[506.76638794 -273.33609009]
[494.99441528 -264.03982544]
[493.51657104 -249.26312256]
[481.71051025 -239.66769409]
[466.22134399 -241.31799316]
[454.44937134 -232.02174377]
[442.67736816 -222.72549438]
[430.90536499 -213.42924500]
[425.71221924 -199.46928406]
[410.08666992 -196.98886108]
[398.31466675 -187.69261169]
[386.54266357 -178.39636230]
[388.82739258 -163.67747498]
[383.40179443 -149.69824219]
[371.62969971 -140.24920654]
[356.60995483 -137.94615173]
[342.36114502 -143.50654602]
[330.58914185 -134.21029663]
[318.81713867 -124.91405487]
[307.04516602 -115.61780548]
[295.27316284 -106.32155609]
[293.79531860 -91.54483032]
[281.98928833 -81.94941711]
[266.50012207 -83.59970093]
[254.80621338 -74.20542145]
[243.19119263 -64.71376038]
[231.57618713 -55.22210312]
[219.96118164 -45.73044586]
[208.34617615 -36.23878860]
[197.13771057 -26.27031708]
[186.35536194 -15.84243107]
[175.57299805 -5.41454506]
[164.79064941 5.01334143]
[154.27304077 15.70819283]
[144.02677917 26.66329193]
[133.78051758 37.61838913]
[123.53425598 48.57348633]
[113.28799438 59.52858353]
[128.07463074 132.50100708]
[133.90351868 147.20933533]
[124.53887177 158.79176331]
[122.53956604 173.65792847]
[120.54026031 188.52407837]
[118.54096222 203.39024353]
[116.54165649 218.25640869]
[114.54235077 233.12257385]
[112.54304504 247.98873901]
[114.50302887 256.93127441]
[110.38411713 263.08581543]
[108.13668060 277.91647339]
[105.88924408 292.74716187]
[103.64180756 307.57785034]
[101.39437103 322.40850830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 187]
[11 186]
[12 185]
[13 184]
[14 183]
[15 181]
[16 180]
[17 179]
[18 178]
[19 177]
[20 176]
[21 175]
[23 173]
[25 48]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[51 60]
[52 59]
[53 58]
[61 172]
[62 171]
[63 170]
[64 169]
[65 168]
[69 167]
[70 166]
[71 165]
[72 164]
[78 163]
[79 162]
[80 161]
[81 160]
[82 159]
[84 158]
[87 155]
[88 154]
[89 153]
[90 152]
[91 151]
[96 146]
[97 145]
[98 144]
[100 142]
[101 141]
[102 140]
[103 139]
[106 136]
[107 135]
[109 133]
[111 132]
[112 131]
[113 130]
[114 129]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
