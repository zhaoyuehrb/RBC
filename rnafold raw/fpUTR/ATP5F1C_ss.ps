%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGAGACUGAAGAAGAGAGCAAGGUGGGAGGGGCGCGCUGGGGAGCUUCGGCGCAUGCGCGCUGAGGCCUGCCUGACCGACCUUCAGCAGGGCUGUGGCUACC\
) } def
/len { sequence length } bind def

/coor [
[83.97899628 212.16184998]
[77.43759155 225.75863647]
[67.59924316 237.19844055]
[55.13473892 245.70130920]
[40.89393234 250.68746948]
[25.84778214 251.81697083]
[11.02216148 249.01278687]
[-2.57209516 242.46614075]
[-14.00810719 232.62338257]
[-22.50614929 220.15559387]
[-27.48681068 205.91285706]
[-28.61050224 190.86627197]
[-25.80060768 176.04173279]
[-19.24871063 162.45001221]
[-9.40153027 151.01779175]
[3.06953645 142.52456665]
[17.31419182 137.54940796]
[32.36120987 136.43153381]
[47.18466187 139.24714661]
[53.69291687 125.73261261]
[60.20117188 112.21807861]
[92.52558136 87.00485992]
[93.42264557 72.03170776]
[94.31970978 57.05855560]
[95.21676636 42.08540344]
[96.11383057 27.11225319]
[89.21569061 12.87405777]
[97.70027924 0.63228899]
[98.59734344 -14.34086323]
[88.38809967 -26.10560036]
[89.51114655 -41.27772522]
[100.78993988 -50.93817902]
[101.68700409 -65.91133118]
[102.58406830 -80.88448334]
[103.48112488 -95.85763550]
[91.53650665 -86.78426361]
[76.54408264 -87.26100159]
[65.20005035 -97.07491302]
[62.57107544 -111.84272766]
[69.83136749 -124.96858978]
[83.73819733 -130.58998108]
[98.08024597 -126.19617462]
[106.45210266 -113.74848938]
[110.44265747 -128.20793152]
[109.71299744 -137.48220825]
[114.77491760 -143.03683472]
[119.19625092 -157.37042236]
[123.61757660 -171.70401001]
[128.03890991 -186.03761292]
[132.46023560 -200.37120056]
[136.88156128 -214.70478821]
[141.30288696 -229.03839111]
[145.72421265 -243.37197876]
[150.14553833 -257.70556641]
[154.56686401 -272.03915405]
[150.39218140 -287.89804077]
[162.22793579 -299.24911499]
[177.89851379 -294.41537476]
[181.28337097 -278.36938477]
[168.90046692 -267.61782837]
[164.47912598 -253.28424072]
[160.05780029 -238.95065308]
[155.63647461 -224.61705017]
[151.21514893 -210.28346252]
[146.79382324 -195.94987488]
[142.37249756 -181.61628723]
[137.95117188 -167.28268433]
[133.52984619 -152.94909668]
[129.10850525 -138.61550903]
[124.90209961 -124.21737671]
[120.91155243 -109.75793457]
[118.45427704 -94.96057129]
[117.55722046 -79.98741913]
[116.66015625 -65.01426697]
[115.76309204 -50.04111862]
[125.80780792 -39.10314178]
[125.11135864 -23.90545845]
[113.57049561 -13.44380093]
[112.67343140 1.52935123]
[119.63574219 14.69656563]
[111.08698273 28.00931549]
[110.18991852 42.98246765]
[109.29286194 57.95561981]
[108.39579773 72.92877197]
[107.49873352 87.90192413]
[113.18711853 101.78148651]
[124.33428955 111.81844330]
[135.48146057 121.85540771]
[146.62863159 131.89236450]
[162.44519043 137.99751282]
[160.95710754 154.88601685]
[144.31665039 158.13128662]
[136.59167480 143.03953552]
[125.44450378 133.00257874]
[114.29733276 122.96562195]
[103.15015411 112.92865753]
[95.79154205 114.37808228]
[81.07431793 117.27691650]
[73.71570587 118.72633362]
[67.20745087 132.24087524]
[60.69919205 145.75540161]
[72.14279938 155.58934021]
[80.65047455 168.05055237]
[85.64212799 182.28944397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 101]
[20 100]
[21 99]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[28 79]
[29 78]
[32 75]
[33 74]
[34 73]
[35 72]
[43 71]
[44 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
