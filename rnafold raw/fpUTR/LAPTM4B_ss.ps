%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUCUCGACCCUUGAAUGGAGUUACACGAACGGCCAGAUGAAAGAAGGAAGGCCCGGACCUCCACUCAGGGCCGACUAGGGGACUGGCGGAGGGUGCACGCUGAUGGAUUUACUCACCGGGUGCUUGGAGCUCCAGCAGCUGGCUGGAGCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[97.05814362 170.46034241]
[83.98396301 177.81329346]
[69.07022858 179.41972351]
[54.73007965 175.01972961]
[43.28382874 165.32522583]
[36.58354568 151.90486145]
[35.71338272 136.93011475]
[40.81412888 122.82400513]
[51.06045914 111.86898041]
[64.79445648 105.83761597]
[79.79642487 105.70632935]
[64.85719299 104.35747528]
[49.91796494 103.00861359]
[34.97873688 101.65975189]
[20.03950691 100.31089020]
[5.10027742 98.96202850]
[-9.33975506 105.42701721]
[-21.31969452 96.57657623]
[-36.25892258 95.22771454]
[-51.19815445 93.87885284]
[-66.13738251 92.52999878]
[-81.07661438 91.18113708]
[-88.03244781 101.64459991]
[-98.72677612 108.10100555]
[-111.08173370 109.36804962]
[-122.72737122 105.26480865]
[-131.45626831 96.63454437]
[-135.64190674 85.17227936]
[-150.51521301 83.22679138]
[-155.43679810 85.27856445]
[-160.17079163 85.20612335]
[-163.92762756 83.44709015]
[-166.21223450 80.69230652]
[-180.94203186 77.85800171]
[-195.67181396 75.02369690]
[-210.40161133 72.18939209]
[-218.43502808 85.06683350]
[-230.58020020 94.16955566]
[-245.19456482 98.26647949]
[-260.30166626 96.80354309]
[-273.85836792 89.97858429]
[-284.03125000 78.71463013]
[-289.44454956 64.53504181]
[-289.36608887 49.35748291]
[-283.80654907 35.23459625]
[-273.51779175 24.07639122]
[-259.89126587 17.39191818]
[-244.76985168 16.08519936]
[-230.19860840 20.33295631]
[-218.14817810 29.56071663]
[-210.24827576 42.52050018]
[-207.56730652 57.45960617]
[-192.83750916 60.29390717]
[-178.10772705 63.12821198]
[-163.37792969 65.96251678]
[-148.56971741 68.35348511]
[-133.69641113 70.29898071]
[-122.20954132 56.94371796]
[-104.86199188 53.08195496]
[-88.50897217 60.43159866]
[-79.72775269 76.24190521]
[-64.78852081 77.59076691]
[-49.84929276 78.93962860]
[-34.91006470 80.28849030]
[-19.97083473 81.63734436]
[-6.59935617 75.07588196]
[6.44913721 84.02280426]
[21.38836670 85.37165833]
[36.32759476 86.72052002]
[51.26682663 88.06938171]
[66.20605469 89.41824341]
[81.14528656 90.76710510]
[92.89944458 81.44831848]
[94.99364471 66.59523010]
[97.08784485 51.74213409]
[95.18106079 42.75035095]
[99.37541962 36.61396790]
[101.76639557 21.80574989]
[104.15737152 6.99753571]
[106.54834747 -7.81067991]
[100.21484375 -22.93743706]
[110.36219025 -35.82011414]
[126.55166626 -33.20611954]
[132.12892151 -17.78450394]
[121.35655975 -5.41970491]
[118.96559143 9.38851070]
[116.57461548 24.19672585]
[114.18363953 39.00494003]
[111.94094086 53.83633804]
[109.84673309 68.68943024]
[107.75253296 83.54251862]
[113.38927460 88.48995972]
[119.31619263 74.71057129]
[134.25268555 76.08937073]
[137.55697632 90.72090149]
[124.66274261 98.38484955]
[130.29948425 103.33229828]
[144.75549316 99.32934570]
[159.21151733 95.32639313]
[173.66752625 91.32344055]
[181.15290833 85.98892212]
[188.45291138 87.38812256]
[202.98612976 83.67521667]
[217.51934814 79.96231842]
[228.97488403 69.04988098]
[243.22128296 73.39606476]
[257.75451660 69.68315887]
[272.28771973 65.97026062]
[280.13247681 52.25037766]
[295.40274048 48.17671967]
[309.03890991 56.16610718]
[312.95089722 71.47858429]
[304.81781006 85.02952576]
[289.46481323 88.77940369]
[276.00061035 80.50347137]
[261.46740723 84.21637726]
[246.93418884 87.92927551]
[236.51815796 98.57614136]
[221.23225403 94.49552917]
[206.69903564 98.20843506]
[192.16581726 101.92133331]
[177.67047119 105.77945709]
[163.21446228 109.78240967]
[148.75845337 113.78536224]
[134.30242920 117.78830719]
[122.58023071 113.05432892]
[111.38610077 107.29769135]
[120.58682251 119.14450073]
[129.78753662 130.99130249]
[137.56831360 135.88493347]
[139.05099487 143.16844177]
[148.01283264 155.19697571]
[156.97467041 167.22550964]
[165.93650818 179.25402832]
[174.89834595 191.28256226]
[183.86018372 203.31108093]
[192.82202148 215.33961487]
[201.78385925 227.36814880]
[217.38662720 231.10084534]
[224.06571960 245.68745422]
[216.69749451 259.93838501]
[200.93423462 262.92153931]
[188.86816406 252.34848022]
[189.75532532 236.32998657]
[180.79348755 224.30145264]
[171.83164978 212.27291870]
[162.86981201 200.24440002]
[153.90797424 188.21586609]
[144.94613647 176.18734741]
[135.98429871 164.15881348]
[127.02246857 152.13027954]
[117.94073486 140.19201660]
[108.74001312 128.34521484]
[99.53929901 116.49841309]
[107.52706909 129.19468689]
[109.86588287 144.01123047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[28 57]
[29 56]
[33 55]
[34 54]
[35 53]
[36 52]
[73 91]
[74 90]
[75 89]
[77 88]
[78 87]
[79 86]
[80 85]
[97 125]
[98 124]
[99 123]
[100 122]
[102 121]
[103 120]
[104 119]
[106 117]
[107 116]
[108 115]
[127 154]
[128 153]
[129 152]
[131 151]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
[138 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
