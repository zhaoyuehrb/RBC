%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUCGGGUUUCUGGCUCGUGAUUUGCCGGAGCUCCUGCGCUCCCCUUCUCCACCCCCUCCGGCUGUGUGAGAGGUCAGCAGAGGGGCGGUCUGCGGGGACAACA\
) } def
/len { sequence length } bind def

/coor [
[84.82704163 121.82273102]
[78.42525482 115.52355194]
[64.27220917 120.49257660]
[50.11916351 125.46160889]
[45.35113144 130.40653992]
[39.64874649 131.85690308]
[34.98717117 130.28024292]
[20.56689644 134.41009521]
[6.14662313 138.53994751]
[-4.98993158 149.77772522]
[-19.35557747 145.84358215]
[-33.77585220 149.97344971]
[-48.19612503 154.10330200]
[-62.61639786 158.23315430]
[-77.03667450 162.36300659]
[-91.45694733 166.49287415]
[-105.87722015 170.62272644]
[-110.22371674 185.42514038]
[-121.89797211 195.51054382]
[-137.17475891 197.66072083]
[-151.17932129 191.18957520]
[-159.44284058 178.16198730]
[-159.32847595 162.73506165]
[-150.87271118 149.83143616]
[-136.77374268 143.56861877]
[-121.53050995 145.94506836]
[-110.00707245 156.20245361]
[-95.58679962 152.07260132]
[-81.16652679 147.94273376]
[-66.74625397 143.81288147]
[-52.32598114 139.68302917]
[-37.90570831 135.55317688]
[-23.48543358 131.42330933]
[-13.38031292 120.48092651]
[2.01676702 124.11967468]
[16.43704033 119.98982239]
[30.85731316 115.85996246]
[45.15013504 111.30856323]
[59.30318069 106.33953094]
[73.45623016 101.37049866]
[80.66084290 81.76686859]
[99.80671692 73.42157745]
[119.07194519 81.48754883]
[132.34590149 74.50170135]
[145.61985779 67.51586151]
[158.89382935 60.53002167]
[172.16778564 53.54417801]
[172.61721802 37.09103775]
[181.21395874 23.16481209]
[195.55638123 15.47766304]
[211.72642517 16.02327538]
[225.35981750 24.56065559]
[238.42298889 17.18814850]
[242.68249512 4.90438557]
[253.84443665 -0.93766767]
[265.58911133 2.34724998]
[278.86306763 -4.63859177]
[292.13702393 -11.62443352]
[305.41098022 -18.61027527]
[318.68493652 -25.59611702]
[331.95892334 -32.58195877]
[336.57720947 -44.73538208]
[347.90582275 -50.24724197]
[359.54901123 -46.61896133]
[373.02230835 -53.21211624]
[386.49563599 -59.80526733]
[399.96896362 -66.39842224]
[400.94027710 -81.72657013]
[409.45889282 -94.50657654]
[423.23336792 -101.30068970]
[438.55838013 -100.28132629]
[451.31164551 -91.72268677]
[458.06253052 -77.92700195]
[456.99514771 -62.60524750]
[448.39657593 -49.87889099]
[434.57980347 -43.17126465]
[419.26144409 -44.28668213]
[406.56210327 -52.92510605]
[393.08880615 -46.33195114]
[379.61547852 -39.73879623]
[366.14215088 -33.14564133]
[357.24533081 -18.09782219]
[338.94476318 -19.30799866]
[325.67077637 -12.32215691]
[312.39682007 -5.33631516]
[299.12286377 1.64952648]
[285.84890747 8.63536835]
[272.57495117 15.62121010]
[264.12371826 30.92372322]
[245.79548645 30.25130844]
[232.73233032 37.62381363]
[233.48837280 51.34423828]
[228.20240784 64.10008240]
[217.86407471 73.35276031]
[204.47457886 77.23397064]
[190.65942383 74.92269897]
[179.15362549 66.81813812]
[165.87966919 73.80397797]
[152.60571289 80.78981781]
[139.33174133 87.77566528]
[126.05778503 94.76150513]
[126.31481171 103.73905945]
[123.56721497 112.28968811]
[118.12870789 119.43708038]
[110.62026215 124.36514282]
[101.89920044 126.51118469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[7 37]
[8 36]
[9 35]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
[52 91]
[53 90]
[56 88]
[57 87]
[58 86]
[59 85]
[60 84]
[61 83]
[64 81]
[65 80]
[66 79]
[67 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
