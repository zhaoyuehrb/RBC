%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGCCCGCGACCCCCUUCCAGACCCGCUCCCGAAACCUUGUCGAAGGACCAAAGGCGACCGGUGCAGGUGCACGACGCCAGCUCCCUUCUGGGGGGCCGGGGCCUGGGGGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[56.53410721 415.03952026]
[46.54743958 426.70837402]
[32.05897522 431.80541992]
[16.96603394 428.95959473]
[5.32854557 418.93640137]
[0.27693495 404.43203735]
[3.17005944 389.34808350]
[13.22968388 377.74206543]
[27.74981880 372.73596191]
[30.52915001 357.99569702]
[33.30847931 343.25543213]
[36.08781052 328.51516724]
[38.86714172 313.77490234]
[41.64647293 299.03463745]
[44.42580414 284.29437256]
[47.20513535 269.55410767]
[49.98446655 254.81385803]
[43.60528183 250.78039551]
[38.45441055 245.23362732]
[34.88264084 238.53457642]
[33.13745117 231.12335205]
[33.34592819 223.49005127]
[35.50555038 216.14254761]
[39.48361588 209.57250977]
[45.02534866 204.22265625]
[51.77017975 200.45683289]
[59.27519608 198.53533936]
[67.04423523 198.59689331]
[72.87660217 184.77722168]
[72.57447052 177.29562378]
[79.05256653 170.67057800]
[85.25074768 157.01106262]
[91.44892883 143.35153198]
[97.64710999 129.69201660]
[82.25744629 125.99485779]
[70.17052460 114.48477173]
[65.23210907 97.63966370]
[69.59282684 79.74540710]
[58.57121658 69.57073212]
[47.54960251 59.39605713]
[36.52799225 49.22137833]
[20.42044830 46.14256287]
[15.28930378 30.56683159]
[26.41304016 18.51716232]
[42.34851074 22.38922119]
[46.70266724 38.19976425]
[57.72428131 48.37444305]
[68.74589539 58.54912186]
[79.76750183 68.72380066]
[87.17201996 67.53082275]
[77.70114136 55.89886475]
[83.03918457 41.88082886]
[97.84816742 39.49460602]
[107.31925964 51.12638855]
[101.98104095 65.14486694]
[109.38555908 63.95189285]
[116.65381622 50.83044815]
[123.92208099 37.70899963]
[131.19033813 24.58755493]
[125.69261932 13.87488270]
[126.10590363 1.96171510]
[132.20800781 -8.13758659]
[142.35220337 -13.92491436]
[153.90992737 -14.03599167]
[161.86624146 -26.75200844]
[169.82255554 -39.46802521]
[177.77886963 -52.18404007]
[177.81982422 -68.58313751]
[192.17510986 -76.51143646]
[206.07722473 -67.81298828]
[205.22488403 -51.43600464]
[190.49488831 -44.22772598]
[182.53857422 -31.51171112]
[174.58226013 -18.79569435]
[166.62594604 -6.07967806]
[171.85603333 11.36533546]
[162.62911987 27.43240547]
[144.31179810 31.85581779]
[137.04353333 44.97726440]
[129.77526855 58.09870911]
[122.50700378 71.22015381]
[132.40711975 92.97257996]
[126.41896057 113.75464630]
[141.28625488 115.74552917]
[156.15354919 117.73641205]
[171.02084351 119.72729492]
[185.88813782 121.71817780]
[200.75543213 123.70906067]
[215.62272644 125.69994354]
[232.12422180 121.80934906]
[240.43083191 136.58894348]
[228.52833557 148.66233826]
[213.63183594 140.56723022]
[198.76454163 138.57635498]
[183.89724731 136.58546448]
[169.02995300 134.59458923]
[154.16267395 132.60369873]
[139.29537964 130.61282349]
[124.42807770 128.62193298]
[111.30663300 135.89019775]
[105.10845184 149.54971313]
[98.91027069 163.20924377]
[92.71208954 176.86875916]
[86.69628143 190.60958862]
[80.86392212 204.42926025]
[92.25465393 225.03691101]
[85.34357452 247.28697205]
[64.72472382 257.59320068]
[61.94539642 272.33346558]
[59.16606522 287.07369995]
[56.38673401 301.81396484]
[53.60740280 316.55422974]
[50.82807159 331.29449463]
[48.04874039 346.03475952]
[45.26941299 360.77502441]
[42.49008179 375.51528931]
[54.19017410 385.46533203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 116]
[10 115]
[11 114]
[12 113]
[13 112]
[14 111]
[15 110]
[16 109]
[17 108]
[28 105]
[29 104]
[31 103]
[32 102]
[33 101]
[34 100]
[38 49]
[39 48]
[40 47]
[41 46]
[56 81]
[57 80]
[58 79]
[59 78]
[64 75]
[65 74]
[66 73]
[67 72]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
