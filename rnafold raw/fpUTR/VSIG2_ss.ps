%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGCUCUGAGAUACCAGUCUCGCUCCUGCCCAGCCCGGGCGGCUGCCCUUGGGUGCUCCCUUCCCUGCCCGACACCCAGACCGACCUUGACCGCCCACCUGGCAGGAGCAGGACAGGACGGCCGGACGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[90.38587952 389.26797485]
[78.45173645 398.35513306]
[64.17280579 402.94992065]
[49.17874527 402.52798462]
[35.18081665 397.13742065]
[23.77660370 387.39352417]
[16.26766968 374.40829468]
[13.51100636 359.66378784]
[15.82123375 344.84274292]
[22.93468475 331.63674927]
[34.03950119 321.55294800]
[47.86828995 315.74221802]
[62.84278107 314.86773682]
[77.25392914 319.02932739]
[89.45699310 327.75201416]
[98.06032562 340.04254150]
[97.71385956 325.04653931]
[89.68464661 312.50137329]
[97.10112762 298.52618408]
[96.75466156 283.53018188]
[96.40818787 268.53417969]
[96.06172180 253.53819275]
[88.03251648 240.99302673]
[95.44899750 227.01782227]
[95.10252380 212.02182007]
[94.75605774 197.02581787]
[94.40959167 182.02983093]
[94.06311798 167.03382874]
[93.71665192 152.03782654]
[93.37018585 137.04182434]
[93.02371979 122.04582977]
[92.67724609 107.04983521]
[89.33233643 99.63014221]
[92.50000000 91.70436859]
[92.50000000 76.70436859]
[81.90735626 68.29851532]
[78.17253876 55.50500870]
[82.45198059 43.08946609]
[92.95959473 35.54213715]
[93.30606079 20.54613686]
[93.65253448 5.55013895]
[93.99900055 -9.44585896]
[94.34546661 -24.44185638]
[94.69194031 -39.43785477]
[94.86518097 -54.43685532]
[77.87562561 -61.82400131]
[65.78939056 -75.79830170]
[60.95462799 -93.57838440]
[64.28187561 -111.65015411]
[75.07294464 -126.46131897]
[91.16688538 -135.11962891]
[89.78285980 -150.05564880]
[88.39883423 -164.99165344]
[87.01480865 -179.92767334]
[85.63078308 -194.86367798]
[84.24675751 -209.79969788]
[82.86273193 -224.73570251]
[78.92412567 -233.07916260]
[81.62332153 -240.03207397]
[80.58465576 -254.99606323]
[66.38849640 -260.60247803]
[56.03704453 -271.81900024]
[51.58558273 -286.41854858]
[53.91795349 -301.50241089]
[62.57106400 -314.07565308]
[75.82682800 -321.64187622]
[91.05331421 -322.69876099]
[105.22727966 -317.03646851]
[115.53448486 -305.77926636]
[119.92842102 -291.16229248]
[117.53666687 -276.08773804]
[108.83411407 -263.54867554]
[95.54865265 -256.03472900]
[96.58731842 -241.07073975]
[97.79874420 -226.11973572]
[99.18276978 -211.18371582]
[100.56679535 -196.24771118]
[101.95082092 -181.31169128]
[103.33484650 -166.37568665]
[104.71887207 -151.43966675]
[106.10289764 -136.50366211]
[117.56710815 -133.83352661]
[127.82329559 -128.01754761]
[136.02688599 -119.52201843]
[141.49876404 -109.03440094]
[143.78149414 -97.40769958]
[142.67752075 -85.59107971]
[138.26623535 -74.55238342]
[130.89834595 -65.19886780]
[121.16807556 -58.30262375]
[109.86518097 -54.43685532]
[113.03935242 -47.68753815]
[109.68793488 -39.09138870]
[109.34146881 -24.09538841]
[108.99499512 -9.09939098]
[108.64852905 5.89660740]
[108.30206299 20.89260483]
[107.95558929 35.88860321]
[120.06809998 47.49737167]
[120.08060455 64.61119080]
[107.50000000 76.70436859]
[107.50000000 91.70436859]
[107.67324829 106.70336914]
[108.01971436 121.69936371]
[108.36618042 136.69535828]
[108.71265411 151.69136047]
[109.05912018 166.68736267]
[109.40558624 181.68336487]
[109.75205231 196.67935181]
[110.09852600 211.67535400]
[110.44499207 226.67135620]
[118.49898529 240.28912354]
[111.05772400 253.19171143]
[111.40419006 268.18771362]
[111.75065613 283.18371582]
[112.09712219 298.17971802]
[120.15111542 311.79748535]
[112.70985413 324.70007324]
[113.05632019 339.69607544]
[117.32501984 345.33004761]
[118.28627014 351.66607666]
[116.30319977 357.06533813]
[121.39730835 371.17385864]
[126.49141693 385.28234863]
[131.58552551 399.39086914]
[136.67962646 413.49938965]
[149.55705261 423.65338135]
[146.93466187 439.84152222]
[131.51016235 445.41076660]
[119.15094757 434.63201904]
[122.57111359 418.59347534]
[117.47701263 404.48498535]
[112.38290405 390.37646484]
[107.28879547 376.26794434]
[102.19468689 362.15945435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 119]
[17 118]
[19 116]
[20 115]
[21 114]
[22 113]
[24 111]
[25 110]
[26 109]
[27 108]
[28 107]
[29 106]
[30 105]
[31 104]
[32 103]
[34 102]
[35 101]
[39 98]
[40 97]
[41 96]
[42 95]
[43 94]
[44 93]
[45 91]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[59 74]
[60 73]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
