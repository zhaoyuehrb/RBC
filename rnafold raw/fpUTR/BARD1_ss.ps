%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCCCCUCUGGCGGCCCGCCGUCCCAGACGCGGGAAGAGCUUGGCCGGUUUCGAGUCGCUGGCCUGCAGCUUCCCUGUGGUUUCCCGAGGCUUCCUUGCUUCCCGCUCUGCGAGGAGCCUUUCAUCCGAAGGCGGGACG\
) } def
/len { sequence length } bind def

/coor [
[97.47681427 226.88375854]
[107.20772552 214.12879944]
[106.54886627 199.14328003]
[105.88999939 184.15774536]
[105.23114014 169.17222595]
[104.57227325 154.18670654]
[103.91340637 139.20118713]
[88.07082367 135.92517090]
[75.49652863 126.79804230]
[68.11178589 113.85945129]
[56.35501480 123.17494965]
[44.59825134 132.49044800]
[32.84148407 141.80593872]
[21.08471680 151.12142944]
[16.25354958 158.96693420]
[8.96582222 160.50901794]
[-2.99274492 169.56401062]
[-14.95131111 178.61898804]
[-18.56272507 194.25027466]
[-33.09703064 201.04244995]
[-47.40474701 193.78512573]
[-50.51022720 178.04550171]
[-40.03120422 165.89767456]
[-24.00629234 166.66041565]
[-12.04772568 157.60543823]
[-0.08915947 148.55046082]
[11.76922226 139.36466980]
[23.52598953 130.04916382]
[35.28275681 120.73367310]
[47.03952026 111.41818237]
[58.79628754 102.10268402]
[60.76779175 87.23281097]
[51.84471512 75.17549896]
[42.92163849 63.11819458]
[33.86665726 51.15962601]
[24.68086433 39.30124664]
[15.49507236 27.44286346]
[6.30927992 15.58448124]
[-2.87651229 3.72609949]
[-12.06230450 -8.13228226]
[-29.24226761 -14.66001415]
[-31.01633263 -32.08590317]
[-40.46040726 -43.73963547]
[-53.23173141 -45.87549591]
[-60.85433197 -55.84137726]
[-59.65061951 -67.92655182]
[-68.83641052 -79.78493500]
[-78.02220154 -91.64331818]
[-87.20800018 -103.50170135]
[-96.39379120 -115.36007690]
[-105.57958221 -127.21846008]
[-114.76537323 -139.07684326]
[-130.27038574 -138.46507263]
[-143.15505981 -147.11174011]
[-148.46498108 -161.69201660]
[-144.15835571 -176.59948730]
[-131.89120483 -186.10192871]
[-116.38047028 -186.54545593]
[-103.59035492 -177.75953674]
[-98.43891144 -163.12251282]
[-102.90699005 -148.26263428]
[-93.72119904 -136.40425110]
[-84.53540802 -124.54587555]
[-75.34961700 -112.68749237]
[-66.16382599 -100.82910919]
[-56.97803116 -88.97072601]
[-47.79223633 -77.11234283]
[-31.23353958 -71.40108490]
[-28.80667305 -53.18371201]
[-19.36260033 -41.52997971]
[-7.32232332 -39.93870163]
[0.63677979 -30.23944855]
[-0.20392260 -17.31807518]
[8.98186970 -5.45969248]
[18.16766167 6.39868927]
[27.35345459 18.25707054]
[36.53924561 30.11545372]
[45.72504044 41.97383499]
[52.35912704 45.36173630]
[54.97894669 54.19511795]
[63.90202332 66.25242615]
[72.82510376 78.30973053]
[80.53673553 70.49285889]
[90.45072937 65.36595154]
[101.64336395 63.53233719]
[113.03216553 65.28246307]
[123.48051453 70.55458069]
[131.91110229 78.93012238]
[137.41668701 89.66510010]
[139.35690308 101.75554657]
[154.35598755 101.59078217]
[169.35508728 101.42601776]
[184.35418701 101.26125336]
[199.35328674 101.09648132]
[214.35237122 100.93171692]
[222.97616577 97.68793488]
[229.68190002 100.93171692]
[244.68099976 101.09648132]
[259.68008423 101.26125336]
[274.67919922 101.42601776]
[289.67828369 101.59078217]
[304.67736816 101.75554657]
[312.43331909 88.49880981]
[325.78646851 80.91006470]
[341.14486694 81.03063202]
[354.37722778 88.82807922]
[361.92410278 102.20494843]
[361.75540161 117.56291199]
[353.91650391 130.77076721]
[340.51605225 138.27565002]
[325.15869141 138.05880737]
[311.97546387 130.17855835]
[304.51260376 116.75463867]
[289.51351929 116.58987427]
[274.51443481 116.42510986]
[259.51531982 116.26034546]
[244.51623535 116.09558105]
[229.51713562 115.93081665]
[214.51713562 115.93081665]
[199.51805115 116.09558105]
[184.51895142 116.26034546]
[169.51985168 116.42510986]
[154.52076721 116.58987427]
[139.52166748 116.75463867]
[134.36598206 122.20156097]
[147.60792542 129.24790955]
[162.09344482 133.14273071]
[169.04272461 146.43586731]
[163.97351074 160.55334473]
[150.15542603 166.38949585]
[136.50103760 160.18002319]
[131.81726074 145.93055725]
[124.05461884 133.09539795]
[118.89893341 138.54231262]
[119.55779266 153.52784729]
[120.21665955 168.51336670]
[120.87552643 183.49888611]
[121.53438568 198.48440552]
[122.19325256 213.46994019]
[133.00602722 225.32165527]
[130.33944702 241.14154053]
[116.23908234 248.79393005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[5 136]
[6 135]
[7 134]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[16 26]
[17 25]
[18 24]
[32 82]
[33 81]
[34 80]
[35 78]
[36 77]
[37 76]
[38 75]
[39 74]
[40 73]
[42 70]
[43 69]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
