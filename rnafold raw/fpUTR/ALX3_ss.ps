%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGUCCCUCCCCCUUGGCGGGCGCUCACAGGCGGCGCGGGCAGCGCGAGCCCCGGAGCCCCGGAGGCCUGUGCGCCCUGAGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[15.19288254 173.68301392]
[-1.05260158 176.43888855]
[-15.62894249 169.11508179]
[-28.70666885 176.46171570]
[-33.07717896 191.41285706]
[-46.44450760 198.67709351]
[-60.67119598 194.41833496]
[-73.74892426 201.76498413]
[-86.82665253 209.11161804]
[-95.06876373 222.61636353]
[-109.95455933 222.10411072]
[-123.03228760 229.45074463]
[-128.73353577 244.44659424]
[-144.05575562 249.20150757]
[-157.24504089 240.06793213]
[-158.18371582 224.05236816]
[-146.15168762 213.44058228]
[-130.37892151 216.37301636]
[-117.30119324 209.02638245]
[-109.99448395 196.04711914]
[-94.17328644 196.03388977]
[-81.09555817 188.68725586]
[-68.01782990 181.34062195]
[-64.25360870 166.97515869]
[-51.09558868 159.33833313]
[-36.05330658 163.38400269]
[-22.97557831 156.03735352]
[-22.63240242 142.56832886]
[-15.57357693 130.96424866]
[-3.57974386 124.36109924]
[10.21843529 124.60624695]
[22.15723610 131.74310303]
[29.91745186 119.02980042]
[45.72926331 119.57492065]
[59.05811691 112.69439697]
[72.38697052 105.81386566]
[85.71582794 98.93334198]
[93.42958069 87.27188110]
[107.40364838 87.73780823]
[120.60899353 80.62311554]
[133.68672180 73.27648163]
[146.76445007 65.92984009]
[159.84217834 58.58320618]
[165.95864868 51.49357224]
[173.51362610 51.21739197]
[186.84248352 44.33686447]
[200.17134094 37.45633698]
[213.50019836 30.57580757]
[226.82904053 23.69528008]
[235.54263306 10.48982716]
[250.40107727 11.52709293]
[263.72991943 4.64656591]
[277.05877686 -2.23396158]
[290.26412964 -9.34865189]
[303.34185791 -16.69528770]
[316.41958618 -24.04192352]
[329.49731445 -31.38855934]
[337.39349365 -45.76153564]
[353.79244995 -45.83917236]
[361.82434082 -31.54159927]
[353.22665405 -17.57693863]
[336.84393311 -18.31083298]
[323.76620483 -10.96419716]
[310.68847656 -3.61756086]
[297.61074829 3.72907543]
[293.22445679 9.88653469]
[283.93930054 11.09489250]
[270.61044312 17.97542000]
[257.28158569 24.85594749]
[249.52137756 37.56925964]
[233.70957947 37.02413559]
[220.38072205 43.90466309]
[207.05186462 50.78519058]
[193.72300720 57.66571808]
[180.39414978 64.54624176]
[167.18881226 71.66093445]
[154.11108398 79.00756836]
[141.03335571 86.35420990]
[127.95562744 93.70084381]
[123.56932831 99.85829926]
[114.28417206 101.06665802]
[106.57041931 112.72811890]
[92.59635162 112.26219177]
[79.26750183 119.14272308]
[65.93864441 126.02324677]
[52.60979080 132.90377808]
[43.89620590 146.10923767]
[29.03776360 145.07196045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[7 23]
[8 22]
[9 21]
[11 19]
[12 18]
[32 88]
[34 86]
[35 85]
[36 84]
[37 83]
[39 81]
[40 79]
[41 78]
[42 77]
[43 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[51 69]
[52 68]
[53 67]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
