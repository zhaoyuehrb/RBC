%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGUGGUCCUCCGCCGGCUACGGCGCUGCGUCACUGGUUUGCAGGCGCUUUCCUCUUGGAAGUGGCGACUGCUGCGGGCCUGAGCGCUGGUCUCACGCGCCUCGGGAGCCAGGUUGGCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[-93.62535095 446.67352295]
[-98.17748260 452.74401855]
[-104.52841949 456.76892090]
[-111.82658386 458.26623535]
[-119.11355591 457.08908081]
[-128.69206238 468.63259888]
[-138.27056885 480.17608643]
[-147.84907532 491.71957397]
[-157.42756653 503.26306152]
[-167.00607300 514.80657959]
[-164.02819824 530.15802002]
[-171.65989685 543.80682373]
[-186.29768372 549.30859375]
[-201.03007507 544.06542969]
[-208.90086365 530.55303955]
[-206.19372559 515.15155029]
[-194.18685913 505.13308716]
[-178.54957581 505.22805786]
[-168.97106934 493.68457031]
[-159.39256287 482.14108276]
[-149.81405640 470.59756470]
[-140.23554993 459.05407715]
[-130.65705872 447.51058960]
[-129.63105774 425.09115601]
[-108.11753845 416.49859619]
[-100.03632355 403.86160278]
[-91.95510864 391.22460938]
[-83.87389374 378.58758545]
[-75.79267883 365.95059204]
[-67.71146393 353.31356812]
[-59.63025284 340.67657471]
[-66.60631561 327.51602173]
[-66.05464935 312.53097534]
[-58.02333450 299.74954224]
[-44.58450699 292.65768433]
[-29.30058861 293.24850464]
[-21.21937370 280.61151123]
[-13.13815975 267.97448730]
[-5.05694485 255.33749390]
[3.02426934 242.70048523]
[11.10548401 230.06347656]
[19.18669891 217.42646790]
[19.52506447 202.53570557]
[33.47829437 195.07797241]
[41.40259552 182.34197998]
[49.16876984 169.50894165]
[56.93494034 156.67591858]
[64.70111084 143.84289551]
[72.46728516 131.00987244]
[80.23345947 118.17684174]
[65.83368683 94.31606293]
[79.75422668 62.72518921]
[75.36668396 48.38121796]
[70.97913361 34.03725052]
[66.59159088 19.69328308]
[54.23403931 8.91260338]
[57.65669632 -7.12539768]
[73.33861542 -11.92219925]
[85.14759064 -0.54326403]
[80.93555450 15.30573559]
[85.32310486 29.64970398]
[89.71064758 43.99367142]
[94.09819794 58.33764267]
[109.09360504 58.70865631]
[114.18515015 44.59922028]
[119.27668762 30.48978424]
[124.36823273 16.38034630]
[129.45977783 2.27090979]
[126.03668213 -13.76699829]
[138.39393616 -24.54801369]
[153.81945801 -18.98155022]
[156.44477844 -2.79391098]
[143.56921387 7.36245060]
[138.47766113 21.47188759]
[133.38612366 35.58132553]
[128.29458618 49.69076157]
[123.20304871 63.80019760]
[134.25872803 73.93785095]
[147.87504578 67.64531708]
[161.49134827 61.35279083]
[175.10766602 55.06026077]
[188.72398376 48.76773071]
[191.60488892 33.52043533]
[202.92077637 22.90298843]
[218.32048035 20.99801636]
[231.88247681 28.53801918]
[238.39192200 42.62371063]
[235.34579468 57.83885956]
[223.91539001 68.33292389]
[208.49592590 70.07073212]
[195.01652527 62.38404846]
[181.40020752 68.67657471]
[167.78388977 74.96910858]
[154.16757202 81.26163483]
[140.55125427 87.55416870]
[137.47126770 108.95747375]
[124.93573761 124.03857422]
[108.23849487 129.62034607]
[93.06648254 125.94301605]
[85.30031586 138.77604675]
[77.53414154 151.60906982]
[69.76796722 164.44209290]
[62.00179291 177.27511597]
[54.23562241 190.10815430]
[52.43730927 199.17628479]
[46.11530304 203.15917969]
[45.19891739 218.95382690]
[31.82370567 225.50769043]
[23.74249268 238.14468384]
[15.66127777 250.78169250]
[7.58006287 263.41870117]
[-0.50115144 276.05572510]
[-8.58236599 288.69271851]
[-16.66357994 301.32974243]
[-9.71561432 314.95593262]
[-10.51567841 330.13012695]
[-18.74890518 342.78240967]
[-32.12022400 349.56945801]
[-46.99324417 348.75778198]
[-55.07445908 361.39477539]
[-63.15567398 374.03179932]
[-71.23688507 386.66879272]
[-79.31809998 399.30581665]
[-87.39931488 411.94281006]
[-95.48052979 424.57983398]
[-92.13214874 431.61779785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[30 120]
[31 119]
[36 114]
[37 113]
[38 112]
[39 111]
[40 110]
[41 109]
[42 108]
[44 106]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
[50 99]
[52 63]
[53 62]
[54 61]
[55 60]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
