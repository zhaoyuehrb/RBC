%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUGGACUGAGCAGCCAGUAGGGGAGAGAGCAGUUAAGGCACACAGAGCACCAGCUCCCUCCUGCCUGAAG\
) } def
/len { sequence length } bind def

/coor [
[94.12178802 168.13397217]
[79.87063599 163.45372009]
[69.22935486 152.88191223]
[64.45586395 138.66172791]
[66.56301880 123.81047058]
[75.10372162 111.47934723]
[88.26556396 104.28490448]
[73.92306519 99.89256287]
[59.58056259 95.50022125]
[45.23806381 91.10787964]
[30.89556313 86.71553802]
[17.06026459 93.87251282]
[2.57750058 89.21374512]
[-4.16032076 75.97979736]
[-20.23250389 85.54327393]
[-37.97629166 80.70652008]
[-46.67258835 64.85517120]
[-61.33591843 61.69498444]
[-75.54088593 69.15142059]
[-90.16863251 62.56289673]
[-93.99800110 46.98356628]
[-84.09142303 34.36455917]
[-68.04838562 34.38609695]
[-58.17572784 47.03165817]
[-43.51240158 50.19184494]
[-35.21443939 41.86095428]
[-23.76999474 38.67285919]
[-12.12351131 41.57246780]
[-3.33317804 49.92214203]
[0.23202078 61.63729477]
[13.22504711 54.44585037]
[27.83295441 58.69599533]
[35.28790283 72.37303925]
[49.63040543 76.76538086]
[63.97290421 81.15772247]
[78.31540680 85.55006409]
[92.65790558 89.94240570]
[100.99217224 87.63877106]
[108.77924347 91.31452942]
[123.65774536 89.40926361]
[138.53625488 87.50399780]
[153.41476440 85.59873199]
[168.29327393 83.69345856]
[174.41874695 68.49074554]
[187.24758911 58.43937302]
[203.29049683 56.15535355]
[218.24244690 62.15789032]
[228.13790894 74.75503540]
[242.92214966 72.22001648]
[257.70639038 69.68500519]
[272.49063110 67.14999390]
[284.74996948 56.25777817]
[300.22515869 61.68465042]
[302.99661255 77.84790802]
[290.21331787 88.12018585]
[275.02563477 81.93423462]
[260.24139404 84.46924591]
[245.45716858 87.00425720]
[230.67292786 89.53926849]
[226.72225952 102.77924347]
[217.35957336 113.03079987]
[204.40721130 118.21241760]
[190.42401123 117.23788452]
[178.19972229 110.24339294]
[170.19853210 98.57196808]
[155.32002258 100.47723389]
[140.44152832 102.38249969]
[125.56301880 104.28777313]
[110.68450928 106.19303894]
[122.44129181 115.50851440]
[128.77508545 129.10568237]
[128.34196472 144.09942627]
[121.23383331 157.30830383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[14 30]
[17 25]
[18 24]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
