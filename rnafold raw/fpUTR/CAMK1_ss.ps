%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGCGGAGAGAGCCGCCGAGCCGAGCCGAGCCCCAGCUCCAGCAAGAGCGCGGGCGGGUGGCCCAGGCACGCAGCGGUGAGGACCGCGGCCACAGCUCGGCGCCAACCACCGCGGGCCUCCCAGCCAGCCCCGCGGCGGGGCAGCCGCAGGAGCCCUGGCUGUGGUCGGGGGGCAGUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[117.95097351 139.42208862]
[111.57344818 152.99880981]
[105.19593048 166.57553101]
[107.18280792 184.87202454]
[92.42031097 194.34352112]
[86.27300262 208.02601624]
[80.12570190 221.70851135]
[73.97839355 235.39100647]
[67.83108521 249.07350159]
[73.67855072 263.75622559]
[67.35440826 278.24005127]
[52.61066818 283.93194580]
[38.19452667 277.45501709]
[32.65882874 262.65191650]
[39.28780365 248.30506897]
[54.14859390 242.92619324]
[60.29589844 229.24369812]
[66.44320679 215.56120300]
[72.59050751 201.87870789]
[78.73781586 188.19621277]
[74.73462677 176.76675415]
[79.76165771 165.30975342]
[91.61921692 160.19801331]
[97.99673462 146.62129211]
[104.37425232 133.04457092]
[100.19432068 126.81735992]
[91.83444977 114.36293793]
[87.65451813 108.13572693]
[72.67377472 108.89546967]
[57.69302368 109.65520477]
[48.47077179 118.69300079]
[35.96333694 119.00579071]
[26.90184021 110.97164917]
[11.91039753 111.47826385]
[-3.08104491 111.98487091]
[-18.07248688 112.49148560]
[-28.83130646 123.75583649]
[-44.04197693 124.05605316]
[-54.71451187 113.72974396]
[-69.70595551 114.23635864]
[-84.69739532 114.74296570]
[-99.68883514 115.24958038]
[-110.29587555 126.96564484]
[-126.08462524 127.66638947]
[-137.68789673 116.93607330]
[-138.22166443 101.14080048]
[-127.36927032 89.65162659]
[-111.56924438 89.28488159]
[-100.19544983 100.25814056]
[-85.20401001 99.75152588]
[-70.21256256 99.24491119]
[-55.22112274 98.73830414]
[-45.27006531 87.71504974]
[-30.07382774 86.98771667]
[-18.57909966 97.50004578]
[-3.58765697 96.99343109]
[11.40378571 96.48681641]
[26.39522743 95.98020935]
[40.75269699 85.90530396]
[56.93328476 94.67446136]
[71.91403198 93.91471863]
[86.89478302 93.15498352]
[101.28067017 88.90689850]
[114.27104950 81.40689850]
[127.26142883 73.90689850]
[140.25181580 66.40689850]
[153.24218750 58.90689850]
[166.23257446 51.40689850]
[175.05403137 35.25476456]
[192.58131409 35.91425705]
[205.44317627 28.19592476]
[211.20718384 21.08091545]
[218.58807373 20.45796394]
[226.67073059 6.85717964]
[241.56152344 7.19424200]
[242.56658936 -10.47784519]
[257.07122803 -23.76140213]
[252.33969116 -37.99560928]
[247.60816956 -52.22981262]
[242.87663269 -66.46401978]
[238.14511108 -80.69822693]
[225.53164673 -91.17833710]
[228.56729126 -107.29407501]
[244.12921143 -112.46694946]
[256.20864868 -101.37554932]
[252.37931824 -85.42975616]
[257.11083984 -71.19554901]
[261.84237671 -56.96134186]
[266.57391357 -42.72713852]
[271.30541992 -28.49293137]
[284.65899658 -21.66050911]
[298.97109985 -26.15095711]
[313.28320312 -30.64140320]
[327.59527588 -35.13185120]
[341.90737915 -39.62229538]
[356.21945190 -44.11274338]
[370.53155518 -48.60319138]
[384.84362793 -53.09363937]
[399.15573120 -57.58408356]
[402.83312988 -73.10411835]
[420.26119995 -82.44678497]
[433.61477661 -89.27920532]
[446.96835327 -96.11163330]
[460.32192993 -102.94405365]
[473.61734009 -109.88899994]
[486.85360718 -116.94598389]
[500.08990479 -124.00296783]
[503.92559814 -129.43133545]
[509.14691162 -131.74403381]
[513.89453125 -131.06617737]
[527.36163330 -137.67208862]
[536.34399414 -150.69619751]
[551.17803955 -149.35462952]
[564.64514160 -155.96054077]
[578.11218262 -162.56645203]
[591.57928467 -169.17236328]
[605.04632568 -175.77827454]
[618.51342773 -182.38418579]
[631.98046875 -188.99009705]
[640.96289062 -202.01419067]
[655.79693604 -200.67262268]
[669.26397705 -207.27853394]
[672.83697510 -222.50245667]
[685.39068604 -231.82653809]
[700.99768066 -230.84823608]
[712.28869629 -220.02946472]
[713.93261719 -204.47853088]
[705.15313721 -191.53810120]
[690.09570312 -187.31825256]
[675.86993408 -193.81147766]
[662.40283203 -187.20556641]
[654.38372803 -174.65396118]
[638.58636475 -175.52302551]
[625.11932373 -168.91711426]
[611.65228271 -162.31120300]
[598.18518066 -155.70529175]
[584.71813965 -149.09938049]
[571.25103760 -142.49346924]
[557.78399658 -135.88755798]
[549.76483154 -123.33595276]
[533.96752930 -124.20502472]
[520.50042725 -117.59911346]
[507.14688110 -110.76669312]
[493.91061401 -103.70970917]
[480.67431641 -96.65272522]
[476.24142456 -90.71849060]
[467.15435791 -89.59047699]
[453.80078125 -82.75805664]
[440.44720459 -75.92562866]
[427.09362793 -69.09320831]
[426.46044922 -54.10657883]
[439.19009399 -46.17211914]
[451.91976929 -38.23765945]
[464.64941406 -30.30319977]
[481.28952026 -27.05606079]
[482.77569580 -10.16737938]
[466.95846558 -4.06401396]
[456.71496582 -17.57353592]
[443.98529053 -25.50799561]
[431.25564575 -33.44245529]
[418.52597046 -41.37691498]
[403.64617920 -43.27199554]
[389.33407593 -38.78154755]
[375.02200317 -34.29110336]
[360.70989990 -29.80065536]
[346.39782715 -25.31020737]
[332.08572388 -20.81976128]
[317.77362061 -16.32931519]
[303.46154785 -11.83886814]
[289.14944458 -7.34842110]
[286.28103638 15.56454754]
[267.93405151 26.88648796]
[249.06152344 20.18462372]
[241.90803528 33.24895859]
[226.08807373 33.44834518]
[213.16149902 41.05778122]
[200.29963684 48.77611160]
[197.05603027 60.44389343]
[186.38500977 66.97559357]
[173.73257446 64.39727783]
[160.74218750 71.89727783]
[147.75181580 79.39727783]
[134.76142883 86.89727783]
[121.77104950 94.39727783]
[108.78067017 101.89727783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[28 62]
[29 61]
[30 60]
[33 58]
[34 57]
[35 56]
[36 55]
[39 52]
[40 51]
[41 50]
[42 49]
[63 185]
[64 184]
[65 183]
[66 182]
[67 181]
[68 180]
[70 177]
[71 176]
[73 175]
[75 173]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
[91 170]
[92 169]
[93 168]
[94 167]
[95 166]
[96 165]
[97 164]
[98 163]
[99 162]
[101 150]
[102 149]
[103 148]
[104 147]
[105 145]
[106 144]
[107 143]
[110 142]
[111 141]
[113 139]
[114 138]
[115 137]
[116 136]
[117 135]
[118 134]
[119 133]
[121 131]
[122 130]
[151 161]
[152 160]
[153 159]
[154 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
