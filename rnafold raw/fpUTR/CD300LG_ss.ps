%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGACCCGUGUGACUGAAGAGGAGCUCACAGUUCCCAGCGUCUGCUCCCACGGUGUCCAGCGCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[132.55749512 284.67276001]
[134.13882446 269.57757568]
[141.06985474 256.07479858]
[152.41322327 245.99052429]
[147.14260864 231.94700623]
[141.87197876 217.90348816]
[136.28758240 203.98175049]
[130.39219666 190.18884277]
[124.49682617 176.39591980]
[118.60144806 162.60301208]
[112.70606995 148.81008911]
[100.58927155 140.14796448]
[102.28012085 124.41736603]
[96.38475037 110.62445068]
[90.18137360 96.96729279]
[77.22263336 87.89085388]
[78.67154694 73.06688690]
[72.16329193 59.55235672]
[54.48913574 57.04019165]
[41.79364777 44.70842743]
[38.82081223 27.41628838]
[46.53335190 11.82694912]
[38.83986282 -1.04978240]
[31.14637566 -13.92651463]
[23.45288658 -26.80324554]
[15.75939655 -39.67997742]
[8.06590748 -52.55670929]
[-5.24844503 -63.05263138]
[1.15151155 -78.75221252]
[18.00923347 -76.94844818]
[20.94263840 -60.25019836]
[28.63612747 -47.37346649]
[36.32961655 -34.49673462]
[44.02310562 -21.62000275]
[51.71659470 -8.74327183]
[59.41008377 4.13346052]
[71.89591217 3.44547987]
[83.50721741 8.28168964]
[91.91058350 17.73935509]
[95.38732910 29.98026466]
[93.18470764 42.58782196]
[85.67781830 53.04409790]
[92.18608093 66.55863190]
[104.67929840 74.66841888]
[103.69590759 90.45903015]
[109.94953156 95.98992157]
[110.17766571 104.72908020]
[116.07304382 118.52199554]
[128.61151123 128.17068481]
[126.49899292 142.91471863]
[132.39436340 156.70762634]
[138.28973389 170.50054932]
[144.18511963 184.29347229]
[150.08049011 198.08638000]
[156.53561401 205.01756287]
[155.91549683 212.63285828]
[161.18612671 226.67637634]
[166.45674133 240.71990967]
[181.63394165 240.85084534]
[195.73751831 246.45921326]
[206.86006165 256.78652954]
[213.49736023 270.43609619]
[214.75175476 285.56192017]
[210.45361328 300.11837769]
[201.18423462 312.13684082]
[188.19718933 319.99185181]
[173.24890137 322.62112427]
[158.36099243 319.66906738]
[145.54693604 311.53494263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[6 56]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[13 48]
[14 47]
[15 45]
[17 43]
[18 42]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
