%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAUUGUUCUGAUCAUCUGAAGAUCAGCUAUUAGAAGAGAAAGAUCAGUUAAGUCCUUUGGACCUGAUCAGCUUGAUACAAGAACUACUGAUUUCAACUUCUUUGGCUUAAUUCUCUCGGAAACG\
) } def
/len { sequence length } bind def

/coor [
[36.84541702 551.15313721]
[27.85440445 563.28015137]
[15.92426682 572.53076172]
[1.94030404 578.21856689]
[-13.05978298 579.92150879]
[-27.96288681 577.51318359]
[-41.66310120 571.17230225]
[-53.14377213 561.36944580]
[-61.55296707 548.83197021]
[-66.26666260 534.49029541]
[-66.93507385 519.40863037]
[-63.50859451 504.70620728]
[-56.24149704 491.47396851]
[-45.67304611 480.69387817]
[-32.58749390 473.16586304]
[-17.95587540 469.44857788]
[-2.86394930 469.81784058]
[1.52359760 455.47387695]
[5.91114426 441.12991333]
[10.29869175 426.78594971]
[14.68623829 412.44198608]
[18.89604187 398.04483032]
[22.92745590 383.59674072]
[26.95886993 369.14862061]
[17.00782967 353.87713623]
[21.34748650 335.84817505]
[37.70659637 326.46243286]
[41.01856613 311.83264160]
[44.33053589 297.20285034]
[47.64250565 282.57305908]
[50.95447540 267.94326782]
[44.74991989 257.48080444]
[47.46710587 245.21195984]
[58.17261887 237.89268494]
[61.84543228 223.34928894]
[65.51824951 208.80587769]
[69.19106293 194.26248169]
[72.86388397 179.71908569]
[67.14202118 163.17779541]
[79.95158386 150.01879883]
[83.26354980 135.38900757]
[86.57552338 120.75920868]
[89.88748932 106.12941742]
[89.14568329 91.14776611]
[84.40468597 76.91670990]
[79.66369629 62.68565369]
[74.92269897 48.45459747]
[70.18170929 34.22354126]
[65.44071198 19.99248505]
[61.88688660 17.08653831]
[59.72828293 13.53521442]
[58.99354935 9.88017178]
[59.52444458 6.61283731]
[61.01055908 4.11535597]
[57.69858932 -10.51443768]
[54.38662338 -25.14423180]
[51.07465363 -39.77402496]
[41.68029022 -53.88722229]
[52.64131927 -66.82136536]
[68.10430908 -59.86922836]
[65.70444489 -43.08599472]
[69.01641846 -28.45619965]
[72.32838440 -13.82640743]
[75.64035034 0.80338657]
[79.67176819 15.25148964]
[84.41276550 29.48254585]
[89.15375519 43.71360397]
[93.89475250 57.94466019]
[98.63574982 72.17572021]
[103.37673950 86.40677643]
[110.73036194 87.88132477]
[125.43759918 90.83042145]
[132.79121399 92.30496979]
[142.65231323 81.00192261]
[152.51339722 69.69887543]
[162.37449646 58.39583206]
[168.23110962 42.48556900]
[185.14086914 43.70890045]
[188.64642334 60.29647064]
[173.67755127 68.25692749]
[163.81645203 79.55997467]
[153.95535278 90.86301422]
[144.09425354 102.16606140]
[158.16716003 96.97436523]
[167.31341553 108.86326599]
[169.72830200 123.66760254]
[164.83427429 137.84675598]
[153.80180359 148.00964355]
[139.26939392 151.72570801]
[124.71263123 148.10621643]
[113.61292267 138.01678467]
[108.62465668 123.86808014]
[104.51728058 109.44138336]
[101.20531464 124.07117462]
[97.89334106 138.70097351]
[94.58137512 153.33076477]
[100.81124878 164.70478821]
[97.67738342 176.87387085]
[87.40727997 183.39190674]
[83.73445892 197.93530273]
[80.06164551 212.47869873]
[76.38883209 227.02209473]
[72.71601868 241.56549072]
[78.17704010 259.09893799]
[65.58426666 271.25524902]
[62.27230072 285.88504028]
[58.96033096 300.51483154]
[55.64836121 315.14462280]
[52.33639145 329.77441406]
[60.59372711 338.50448608]
[63.53186798 350.03192139]
[60.52233505 361.41625977]
[52.43862152 369.81207275]
[41.40697479 373.18005371]
[37.37556076 387.62814331]
[33.34414291 402.07626343]
[34.04915619 411.29406738]
[29.03020668 416.82952881]
[24.64266014 431.17349243]
[20.25511360 445.51745605]
[15.86756611 459.86141968]
[11.48001957 474.20538330]
[24.19605064 482.34204102]
[34.24443436 493.60848999]
[40.87951279 507.16864014]
[43.60892105 522.01629639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 122]
[18 121]
[19 120]
[20 119]
[21 118]
[22 116]
[23 115]
[24 114]
[27 109]
[28 108]
[29 107]
[30 106]
[31 105]
[34 103]
[35 102]
[36 101]
[37 100]
[38 99]
[40 96]
[41 95]
[42 94]
[43 93]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[54 64]
[55 63]
[56 62]
[57 61]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
