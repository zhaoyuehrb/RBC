%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAUGCACACGAAUCCGGAAGUGACGCCAGAAGAAGAGGAAGUGAAGGCUACAGGGUAUCCACGUGGGUUCUGAGCGUGUUUCUACGUCCCUGGAAGCCGGUCAUUUAAGCUCAUUCCUCGCCACGGCUUAGUCAAC\
) } def
/len { sequence length } bind def

/coor [
[14.32328033 443.81875610]
[13.98994732 458.87985229]
[10.31305695 473.48904419]
[3.47704077 486.91351318]
[-6.17521048 498.47991943]
[-18.15954399 507.60809326]
[-31.87482834 513.84014893]
[-46.63311386 516.86352539]
[-61.69412994 516.52655029]
[-76.30242157 512.84613037]
[-89.72524261 506.00686646]
[-101.28931427 496.35180664]
[-110.41458130 484.36526489]
[-116.64332581 470.64846802]
[-119.66311646 455.88943481]
[-119.32248688 440.82852173]
[-115.63851166 426.22113037]
[-108.79599762 412.79995728]
[-99.13813782 401.23822021]
[-87.14938354 392.11587524]
[-73.43107605 385.89044189]
[-58.67132950 382.87423706]
[-43.61048126 383.21850586]
[-29.00397491 386.90600586]
[-22.19411659 373.54092407]
[-15.38426018 360.17581177]
[-8.57440281 346.81072998]
[-2.21818542 333.22399902]
[3.67719007 319.43109131]
[9.57256508 305.63818359]
[0.20062599 296.51727295]
[-5.50506783 284.71432495]
[-6.83809376 271.64031982]
[-3.61621690 258.86651611]
[3.79405618 247.93560791]
[14.51902866 240.17546082]
[27.28078270 236.53778076]
[40.54942703 237.48141479]
[47.05768585 223.96688843]
[53.56594086 210.45234680]
[60.07419586 196.93782043]
[66.58245087 183.42329407]
[73.09070587 169.90875244]
[78.20343781 155.80697632]
[81.86853790 141.26164246]
[85.53364563 126.71629333]
[89.19875336 112.17095184]
[84.17697144 96.20122528]
[95.90151215 84.25193787]
[99.23932648 69.62802124]
[102.57714081 55.00410080]
[105.91495514 40.38018417]
[100.05908203 22.96228600]
[112.39710999 10.53229713]
[115.40595245 -4.16283369]
[118.41479492 -18.85796356]
[121.42363739 -33.55309677]
[124.43247986 -48.24822617]
[110.48484039 -42.72885895]
[97.36055756 -49.99199295]
[94.62986755 -64.74134064]
[104.28398895 -76.22166443]
[119.28313446 -76.06150055]
[128.68983459 -64.37794495]
[133.32508850 -78.64379120]
[137.96034241 -92.90964508]
[142.59559631 -107.17549133]
[147.23085022 -121.44133759]
[151.86610413 -135.70718384]
[156.50135803 -149.97303772]
[149.58035278 -163.92787170]
[154.48437500 -178.32943726]
[167.83082581 -184.84155273]
[159.39129639 -198.00621033]
[161.43957520 -213.50907898]
[173.00852966 -224.03015137]
[188.63566589 -224.60173035]
[200.94232178 -214.95391846]
[204.11766052 -199.64212036]
[196.66239929 -185.89610291]
[182.09667969 -180.20629883]
[189.06645203 -167.09303284]
[184.56886292 -152.55940247]
[170.76721191 -145.33778381]
[166.13195801 -131.07192993]
[161.49670410 -116.80608368]
[156.86145020 -102.54023743]
[152.22619629 -88.27438354]
[147.59092712 -74.00853729]
[142.95567322 -59.74269104]
[139.12760925 -45.23938370]
[136.11877441 -30.54425430]
[133.10992432 -15.84912300]
[130.10108948 -1.15399230]
[127.09224701 13.54113865]
[133.50723267 23.85745811]
[131.06214905 36.16707993]
[120.53887939 43.71799469]
[117.20106506 58.34191513]
[113.86325073 72.96583557]
[110.52543640 87.58975220]
[116.13097382 97.85742188]
[113.40009308 109.23236084]
[103.74409485 115.83605957]
[100.07898712 130.38140869]
[96.41388702 144.92674255]
[92.74877930 159.47209167]
[105.09600830 150.95469666]
[120.08193970 150.30523682]
[133.11973572 157.72250366]
[140.21884155 170.93623352]
[139.20637512 185.90203857]
[130.39224243 198.03919983]
[116.47423553 203.63285828]
[101.71231842 200.97091675]
[90.62477875 190.86811829]
[86.60523987 176.41700745]
[80.09698486 189.93154907]
[73.58872986 203.44607544]
[67.08047485 216.96061707]
[60.57221603 230.47514343]
[54.06396103 243.98966980]
[64.99377441 257.14163208]
[69.10245514 273.68475342]
[65.61855316 290.31442261]
[55.28240585 303.73019409]
[40.18943405 311.29061890]
[23.36548233 311.53356934]
[17.47010612 325.32647705]
[11.57473087 339.11938477]
[12.22842026 344.46557617]
[10.85212898 349.04171753]
[8.09907341 352.19070435]
[4.79069567 353.62057495]
[-2.01916194 366.98568726]
[-8.82901955 380.35076904]
[-15.63887691 393.71588135]
[-4.07013083 403.36532593]
[5.06094360 415.34744263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 137]
[25 136]
[26 135]
[27 134]
[28 130]
[29 129]
[30 128]
[38 122]
[39 121]
[40 120]
[41 119]
[42 118]
[43 117]
[44 107]
[45 106]
[46 105]
[47 104]
[49 101]
[50 100]
[51 99]
[52 98]
[54 95]
[55 94]
[56 93]
[57 92]
[58 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
