%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGCGCCCGCGAGGUGCUGAAAGGACAGUUCCCGCCGCCGAACUUAGCCCGCGGGUGGGGCGGCCCGGGAGCCAGCGGGGCACGUGAGCG\
) } def
/len { sequence length } bind def

/coor [
[49.94081497 262.64804077]
[43.68908691 276.28314209]
[37.43735886 289.91824341]
[31.18563080 303.55334473]
[33.25780487 319.82104492]
[20.04360962 329.53274536]
[5.13667727 322.69787598]
[3.87198114 306.34756470]
[17.55053139 297.30160522]
[23.80225945 283.66650391]
[30.05398750 270.03140259]
[36.30571747 256.39633179]
[42.10320282 242.56196594]
[47.44010925 228.54350281]
[43.64476776 211.49737549]
[57.79051590 199.85374451]
[54.60498428 185.30377197]
[66.40396118 174.76362610]
[71.27445221 160.57637024]
[76.14495087 146.38911438]
[81.01544189 132.20185852]
[85.88593292 118.01459503]
[78.90550995 108.87439728]
[77.25253296 97.49296570]
[81.34445953 86.74468231]
[90.14787292 79.34405518]
[101.43946075 77.16011047]
[93.38062286 65.84000397]
[92.03024292 52.11952591]
[97.63826752 39.64418411]
[108.62020111 31.67461967]
[122.00300598 30.23454094]
[128.25473022 16.59944344]
[134.50645447 2.96434546]
[140.75819397 -10.67075253]
[147.00991821 -24.30585098]
[153.26164246 -37.94094849]
[159.51336670 -51.57604599]
[155.75227356 -64.04899597]
[161.39407349 -75.34233093]
[172.86863708 -79.54698181]
[179.56776428 -92.96791840]
[186.26690674 -106.38886261]
[192.96603394 -119.80979919]
[188.19050598 -134.63653564]
[195.17556763 -148.15184021]
[209.34002686 -152.61320496]
[216.03915405 -166.03414917]
[216.01809692 -172.97026062]
[219.15240479 -178.01145935]
[223.65045166 -180.09860229]
[231.22193909 -193.04745483]
[238.79342651 -205.99629211]
[238.34268188 -222.38925171]
[252.45379639 -230.74438477]
[266.61047363 -222.46665955]
[266.24951172 -206.07148743]
[251.74227905 -198.42481995]
[244.17079163 -185.47596741]
[236.59930420 -172.52711487]
[229.46009827 -159.33502197]
[222.76095581 -145.91407776]
[227.70948792 -131.91236877]
[221.10679626 -118.20619965]
[206.38697815 -113.11067200]
[199.68783569 -99.68972778]
[192.98870850 -86.26879120]
[186.28958130 -72.84784698]
[188.37791443 -55.50962067]
[173.14846802 -45.32431793]
[166.89674377 -31.68922043]
[160.64501953 -18.05412292]
[154.39328003 -4.41902447]
[148.14155579 9.21607304]
[141.88983154 22.85117149]
[135.63810730 36.48627090]
[144.13171387 50.42673492]
[142.69950867 66.85350037]
[131.70379639 79.36148834]
[115.27380371 82.95759583]
[122.86910248 99.14166260]
[116.50832367 115.84954071]
[100.07318878 122.88508606]
[95.20269775 137.07234192]
[90.33220673 151.25959778]
[85.46171570 165.44686890]
[80.59122467 179.63412476]
[83.42838287 195.19885254]
[71.97777557 204.72422791]
[76.95578003 216.76333618]
[72.46026611 228.55993652]
[61.45857620 233.88041687]
[56.12166977 247.89888000]
[56.82961655 254.79879761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[13 93]
[14 92]
[16 89]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[27 80]
[32 76]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[38 70]
[41 68]
[42 67]
[43 66]
[44 65]
[47 62]
[48 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
