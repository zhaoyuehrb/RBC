%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGGGGUGGGGUUACGUGUAGGUGACGUGGCCGCUUCCAGUCUUUGGUCGGGUUUCGGCGGCUUCAGUGCUCGGGGAGGAGGCAGUGACGGCCGGUGAGAUUGGAAGUGGCGGCGGCGGCAGGCGGCAGAGGGGAGUCCGAGGUUAUGCGUCUCA\
) } def
/len { sequence length } bind def

/coor [
[75.16668701 130.51676941]
[63.65474319 140.13317871]
[52.14280319 149.74957275]
[40.63086319 159.36598206]
[29.11892319 168.98239136]
[17.60698318 178.59878540]
[6.09504366 188.21519470]
[-5.41689682 197.83160400]
[-16.92883682 207.44801331]
[-19.59339333 213.59519958]
[-24.27709007 216.93395996]
[-29.09497452 217.20683289]
[-40.98012543 226.35797119]
[-52.86528015 235.50909424]
[-64.75043488 244.66021729]
[-76.63558960 253.81135559]
[-88.52074432 262.96246338]
[-100.40589142 272.11361694]
[-112.29104614 281.26473999]
[-112.76644897 296.89508057]
[-123.21614075 308.52856445]
[-138.70610046 310.67221069]
[-151.92243958 302.31384277]
[-156.62481689 287.40002441]
[-150.59289551 272.97262573]
[-136.67477417 265.84381104]
[-121.44217682 269.37957764]
[-109.55702209 260.22845459]
[-97.67186737 251.07731628]
[-85.78671265 241.92619324]
[-73.90155792 232.77507019]
[-62.01640701 223.62394714]
[-50.13125229 214.47280884]
[-38.24610138 205.32168579]
[-26.54524040 195.93606567]
[-15.03330135 186.31965637]
[-3.52136111 176.70326233]
[7.99057913 167.08685303]
[19.50251961 157.47044373]
[31.01445961 147.85404968]
[42.52639771 138.23764038]
[54.03833771 128.62123108]
[65.55027771 119.00482941]
[61.76435089 109.27372742]
[60.67146683 98.88945770]
[62.34859848 88.58340454]
[66.67761993 79.08145142]
[73.35363007 71.05284882]
[81.90641022 65.06307220]
[91.73358154 61.53400040]
[91.43534851 46.53696442]
[83.42519379 32.89335632]
[90.90792084 20.01476479]
[90.60968781 5.01773071]
[90.31145477 -9.97930431]
[90.01322174 -24.97633934]
[89.71498871 -39.97337341]
[89.41675568 -54.97040939]
[89.11852264 -69.96744537]
[81.10837555 -83.61105347]
[88.59110260 -96.48964691]
[88.29286957 -111.48667908]
[87.99463654 -126.48371124]
[87.69640350 -141.48074341]
[87.39817047 -156.47778320]
[86.95085907 -171.47111511]
[86.35450745 -186.45925903]
[85.75816345 -201.44738770]
[77.47833252 -214.92904663]
[84.70352173 -227.95387268]
[84.10717773 -242.94200134]
[83.51082611 -257.93014526]
[82.76550293 -272.91162109]
[81.87127686 -287.88494873]
[69.88475800 -298.18536377]
[68.77584076 -313.95071411]
[79.20242310 -325.82766724]
[94.97860718 -326.76983643]
[106.74465179 -316.21826172]
[107.51998138 -300.43301392]
[96.84459686 -288.77917480]
[97.73882294 -273.80584717]
[101.29627991 -267.28076172]
[98.49897003 -258.52648926]
[99.09531403 -243.53836060]
[99.69166565 -228.55021667]
[107.92884064 -216.14060974]
[100.74629974 -202.04374695]
[101.34265137 -187.05560303]
[101.93899536 -172.06745911]
[105.36601257 -165.47293091]
[102.39520264 -156.77601624]
[102.69343567 -141.77897644]
[102.99166870 -126.78194427]
[103.28990173 -111.78491211]
[103.58813477 -96.78787994]
[111.57695007 -84.21695709]
[104.11556244 -70.26567841]
[104.41379547 -55.26864243]
[104.71202850 -40.27160645]
[105.01026154 -25.27457237]
[105.30848694 -10.27753735]
[105.60671997 4.71949768]
[105.90495300 19.71653366]
[113.89377594 32.28745270]
[106.43238068 46.23873520]
[106.73061371 61.23576736]
[127.82055664 72.17944336]
[138.76423645 93.26938629]
[153.76126099 93.56761932]
[167.71253967 86.10622406]
[180.28346252 94.09504700]
[195.28050232 94.39328003]
[211.16334534 85.12574005]
[225.83277893 94.71524048]
[240.83277893 94.71524048]
[254.75659180 86.05154419]
[269.09201050 94.01567078]
[269.09201050 110.41481781]
[254.75659180 118.37894440]
[240.83277893 109.71524048]
[225.83277893 109.71524048]
[217.02899170 118.06075287]
[204.49705505 118.15116882]
[194.98226929 109.39031219]
[179.98522949 109.09207916]
[167.10664368 116.57480621]
[153.46302795 108.56465149]
[138.46600342 108.26641846]
[134.39434814 119.10485077]
[127.34423828 128.28884888]
[135.52217102 140.86349487]
[143.70008850 153.43814087]
[151.87800598 166.01277161]
[165.88804626 173.36325073]
[166.34063721 188.25097656]
[180.35066223 195.60145569]
[180.80325317 210.48918152]
[188.98117065 223.06382751]
[204.48390198 223.73114014]
[216.61265564 233.40962219]
[220.70368958 248.37768555]
[215.18391418 262.87982178]
[202.17581177 271.33966064]
[186.68124390 270.50421143]
[174.65818787 260.69470215]
[170.72976685 245.68315125]
[176.40653992 231.24174500]
[168.22860718 218.66711426]
[154.80351257 212.21604919]
[153.76599121 196.42890930]
[140.34089661 189.97784424]
[139.30335999 174.19070435]
[131.12544250 161.61605835]
[122.94752502 149.04141235]
[114.76959991 136.46678162]
[101.13518524 139.32783508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[50 107]
[51 106]
[53 104]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[59 98]
[61 96]
[62 95]
[63 94]
[64 93]
[65 92]
[66 90]
[67 89]
[68 88]
[70 86]
[71 85]
[72 84]
[73 82]
[74 81]
[109 129]
[110 128]
[112 126]
[113 125]
[115 122]
[116 121]
[131 156]
[132 155]
[133 154]
[134 153]
[136 151]
[138 149]
[139 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
