%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGAUCUGUGAGCCCAGCGCUGACUGCGCCGCGGAGAAAGCCAGUGGGAACCCAGACCCAUAGGAGACCCGCGUCCCCGCUCGGCCUGGCCAGGCCCCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[74.43096924 131.65765381]
[67.58152771 145.00251770]
[60.93058777 158.44740295]
[54.47961044 171.98937988]
[59.99810028 186.79888916]
[53.35245514 201.13803101]
[38.48542023 206.49963379]
[24.21734428 199.70275879]
[19.01322174 184.77987671]
[25.96056557 170.58445740]
[40.93764496 165.53839111]
[47.38862228 151.99642944]
[47.42431641 144.48374939]
[54.23667145 138.15307617]
[61.08610916 124.80821991]
[56.89625931 118.58767700]
[41.93213272 119.62448120]
[48.51655579 106.14659119]
[44.32670593 99.92604828]
[29.38595963 101.25798798]
[14.44521141 102.58992767]
[-0.49553600 103.92186737]
[-11.84913540 115.25656128]
[-27.77291679 113.30393219]
[-36.05151749 99.56186676]
[-30.33430290 84.57210541]
[-15.00703144 79.83350372]
[-1.82747447 88.98111725]
[13.11327362 87.64917755]
[28.05401993 86.31724548]
[42.99477005 84.98530579]
[53.28240204 74.06905365]
[53.72690201 59.07563782]
[54.17140198 44.08222580]
[54.61590195 29.08881378]
[55.06040192 14.09540081]
[52.15098190 5.26246071]
[55.74678802 -1.33388829]
[44.40872192 -9.33095074]
[38.58711624 -21.80520058]
[39.72224045 -35.41499710]
[47.40649414 -46.57330704]
[59.52052307 -52.39313126]
[60.85246277 -67.33387756]
[54.37112427 -81.76657867]
[63.20798874 -93.75653076]
[64.53992462 -108.69728088]
[65.87186432 -123.63803101]
[67.20380402 -138.57878113]
[68.53574371 -153.51953125]
[56.75355911 -163.61703491]
[53.18950272 -178.71925354]
[59.21402359 -193.01907349]
[72.51056671 -201.01791382]
[87.96634674 -199.64006042]
[99.63829803 -189.41532898]
[103.03832245 -174.27532959]
[96.85902405 -160.04171753]
[83.47649384 -152.18759155]
[82.14455414 -137.24684143]
[80.81261444 -122.30609131]
[79.48067474 -107.36534119]
[78.14873505 -92.42459869]
[84.72534180 -79.06055450]
[75.79321289 -66.00193787]
[74.46127319 -51.06119156]
[87.13627625 -40.74658585]
[91.26331329 -24.76409912]
[85.04368591 -9.29579163]
[70.72044373 -0.44527882]
[70.05381775 14.53990078]
[69.60931396 29.53331375]
[69.16481781 44.52672577]
[68.72031403 59.52013779]
[68.27581787 74.51354980]
[88.25810242 63.52593994]
[109.62490082 65.37154388]
[125.29748535 77.94010162]
[130.90655518 95.81508636]
[125.96940613 112.47955322]
[137.33207703 122.27188110]
[148.69474792 132.06420898]
[164.24041748 131.07942200]
[175.62428284 141.17210388]
[176.46733093 155.99859619]
[187.83000183 165.79092407]
[199.19267273 175.58325195]
[210.55532837 185.37559509]
[221.91799927 195.16792297]
[238.12129211 197.69483948]
[243.78138733 213.08624268]
[233.07566833 225.50877380]
[217.01725769 222.18321228]
[212.12567139 206.53059387]
[200.76300049 196.73825073]
[189.40032959 186.94592285]
[178.03767395 177.15359497]
[166.67500305 167.36126709]
[151.88653564 168.71653748]
[140.22367859 158.94758606]
[138.90240479 143.42687988]
[127.53974152 133.63455200]
[116.17707062 123.84222412]
[108.69974518 130.56881714]
[98.55385590 134.72293091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 12]
[4 11]
[19 31]
[20 30]
[21 29]
[22 28]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[38 70]
[43 66]
[44 65]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[80 103]
[81 102]
[82 101]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
