%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCCGGCCUGCGCGGUACUCACUGCCGGCCUCCGCGGUACCCACUGCCGGCCUCCGCGCUACCCGGCCGCAGCGCGCGAGUCAC\
) } def
/len { sequence length } bind def

/coor [
[93.30186462 185.17047119]
[104.44632721 175.13049316]
[119.06671143 171.77722168]
[133.47120667 175.95626831]
[126.20696259 162.83259583]
[118.94271851 149.70893860]
[111.67846680 136.58526611]
[104.41422272 123.46159363]
[89.83921814 121.60301208]
[79.11302948 111.56140900]
[76.29863739 97.14044189]
[82.46210480 83.80265808]
[75.19786072 70.67898560]
[67.93360901 57.55531693]
[60.66936493 44.43164444]
[53.40511703 31.30797577]
[46.14086914 18.18430519]
[42.28236771 32.67954636]
[32.33571243 43.90737152]
[18.41143608 49.48540497]
[3.46405673 48.23007965]
[-9.33481693 40.40774918]
[-17.26945686 27.67819786]
[-18.65625191 12.74244118]
[-13.20094490 -1.23037612]
[-2.06107140 -11.27543545]
[12.39965725 -15.26132584]
[27.11289215 -12.34230232]
[38.95658493 -3.13789034]
[36.79749680 -17.98168755]
[34.63840485 -32.82548523]
[32.47931671 -47.66928482]
[23.17029953 -53.83992767]
[19.00352859 -63.96178818]
[21.18038368 -74.46197510]
[28.70882797 -81.78267670]
[27.62646294 -96.74357605]
[26.54409599 -111.70447540]
[25.46172905 -126.66537476]
[24.37936401 -141.62626648]
[14.73353481 -154.88862610]
[21.64249039 -169.76136780]
[37.99888992 -170.94468689]
[46.97666931 -157.22129822]
[39.34026337 -142.70863342]
[40.42262650 -127.74774170]
[41.50499344 -112.78684235]
[42.58736038 -97.82594299]
[43.66972733 -82.86504364]
[55.76709747 -67.96006775]
[47.32311630 -49.82837296]
[49.48220444 -34.98457718]
[51.64129257 -20.14077759]
[53.80038452 -5.29697990]
[59.43372726 1.23176634]
[59.26454163 10.92005825]
[66.52878571 24.04372787]
[73.79303741 37.16740036]
[81.05728149 50.29106903]
[88.32153320 63.41473770]
[95.58577728 76.53840637]
[110.16078186 78.39698792]
[120.88697052 88.43859100]
[123.70136261 102.85955811]
[117.53789520 116.19734192]
[124.80213928 129.32101440]
[132.06639099 142.44468689]
[139.33062744 155.56835938]
[146.59487915 168.69201660]
[156.09768677 180.29791260]
[167.53012085 190.00871277]
[178.96255493 199.71949768]
[195.00502014 199.85583496]
[204.78694153 212.57171631]
[200.80445862 228.11260986]
[186.11257935 234.55686951]
[171.98167419 226.96101379]
[169.25175476 211.15193176]
[157.81932068 201.44113159]
[146.38690186 191.73034668]
[147.64147949 206.67778015]
[141.46875000 220.34883118]
[129.42681885 229.29266357]
[114.55529785 231.25169373]
[100.60801697 225.73143005]
[91.10551453 214.12528992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[29 54]
[30 53]
[31 52]
[32 51]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[70 80]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
