%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGGAAGGAAGUGACGCGAGGCUGAGGGGCGGGUUGCGCUGUGCGUCCGGAAGUGUCUCGCAGAUAGUAAAUAAUCUCGGAAAGGCGAGAAAGAAGCUGUCUCCAUCUUGUCUGUAUCCGCUGCUCUUGUGACGUUGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[158.16000366 246.15261841]
[148.28976440 232.68518066]
[144.30993652 216.43167114]
[146.85246277 199.85530090]
[155.55860901 185.47923279]
[146.48100281 173.53782654]
[137.40338135 161.59643555]
[123.54155731 156.14675903]
[121.34965515 140.47811890]
[112.27204132 128.53672791]
[103.19443512 116.59532928]
[104.41834259 131.54531860]
[95.30132294 143.45664978]
[80.55052948 146.17950439]
[67.78180695 138.30804443]
[63.58769226 123.90632629]
[70.13360596 110.40999603]
[84.04193878 104.78720093]
[69.29558563 102.04035187]
[54.54923630 99.29350281]
[39.80288696 96.54666138]
[25.05653763 93.79981232]
[10.31018829 91.05296326]
[-4.43616199 88.30612183]
[-15.48445225 101.89095306]
[-31.79243088 108.02036285]
[-48.87885666 105.10542297]
[-62.09649277 94.02952576]
[-67.89607239 77.88329315]
[-82.74756622 75.77781677]
[-97.59906769 73.67234802]
[-112.45056152 71.56687164]
[-127.30206299 69.46139526]
[-142.05165100 75.18503571]
[-153.56687927 65.73786926]
[-164.26220703 76.98018646]
[-179.52903748 79.75572968]
[-193.49694824 72.99725342]
[-200.79501343 59.30353546]
[-198.61695862 43.94008255]
[-187.80029297 32.81445694]
[-172.50425720 30.20469093]
[-158.61047363 37.11429214]
[-151.46141052 50.88637543]
[-137.77409363 45.01213837]
[-125.19658661 54.60989761]
[-110.34508514 56.71537399]
[-95.49359131 58.82084656]
[-80.64208984 60.92632294]
[-65.79059601 63.03179550]
[-59.06492615 52.24177933]
[-48.70491028 44.79033279]
[-36.24463272 41.82476044]
[-23.54594803 43.82483673]
[-12.52030468 50.52558899]
[-4.84100866 60.95179367]
[-1.68931568 73.55976868]
[13.05703449 76.30661774]
[27.80338478 79.05345917]
[42.54973221 81.80030823]
[57.29608536 84.54715729]
[72.04243469 87.29399872]
[86.78878021 90.04084778]
[93.44148254 85.85877228]
[100.82365417 85.39154053]
[107.99293518 72.21575165]
[115.16220856 59.03996277]
[122.33148956 45.86417389]
[129.50076294 32.68838501]
[136.67004395 19.51259422]
[127.96452332 8.32934475]
[124.20375061 -5.28973341]
[125.92637634 -19.26937866]
[132.83811951 -31.49250603]
[143.86135864 -40.12081528]
[157.30310059 -43.87124252]
[171.11489868 -42.20668411]
[178.56794739 -55.22406387]
[186.02099609 -68.24143982]
[193.47402954 -81.25881958]
[200.92707825 -94.27619934]
[196.54019165 -109.45944214]
[204.24740601 -123.25705719]
[219.47618103 -127.48316956]
[233.19154358 -119.63050079]
[237.25640869 -104.35790253]
[229.25918579 -90.72632599]
[213.94445801 -86.82315826]
[206.49140930 -73.80577850]
[199.03837585 -60.78839874]
[191.58532715 -47.77101898]
[184.13227844 -34.75364304]
[193.42050171 -21.79251671]
[196.15396118 -6.02406645]
[191.73832703 9.41869354]
[181.00477600 21.44513130]
[166.05415344 27.62553215]
[149.84584045 26.68187332]
[142.67655945 39.85766220]
[135.50727844 53.03345108]
[128.33799744 66.20924377]
[121.16872406 79.38503265]
[113.99944305 92.56082153]
[115.13582611 107.51771545]
[124.21343994 119.45911407]
[133.29106140 131.40051270]
[147.80216980 137.70431519]
[149.34477234 152.51881409]
[158.42239380 164.46022034]
[167.50000000 176.40161133]
[180.36340332 172.24391174]
[193.85914612 172.27299500]
[206.66105652 176.47184753]
[217.51551819 184.41438293]
[225.36425781 195.30868530]
[229.44747925 208.07592773]
[229.37742615 221.45716858]
[225.17512512 234.13754272]
[217.26699829 244.87541199]
[225.81880188 257.19882202]
[234.37060547 269.52224731]
[242.92240906 281.84567261]
[251.47421265 294.16906738]
[265.69863892 301.09558105]
[266.59805298 315.96301270]
[275.14984131 328.28640747]
[283.83465576 340.51647949]
[292.65142822 352.65173340]
[307.84472656 358.82391357]
[309.82775879 375.10272217]
[296.56057739 384.74191284]
[281.69131470 377.82550049]
[280.51617432 361.46850586]
[271.69940186 349.33325195]
[265.17486572 345.74407959]
[262.82644653 336.83822632]
[254.27462769 324.51480103]
[240.66189575 318.46975708]
[239.15080261 302.72088623]
[230.59898376 290.39746094]
[222.04718018 278.07406616]
[213.49537659 265.75064087]
[204.94357300 253.42721558]
[188.82632446 257.34854126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 110]
[6 109]
[7 108]
[9 106]
[10 105]
[11 104]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[65 103]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[119 143]
[120 142]
[121 141]
[122 140]
[123 139]
[125 137]
[126 136]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
