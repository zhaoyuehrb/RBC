%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGGCUCGGCGGCAGCGGAGCGGCCGGAGCUGCGGUGCGGACCGGGGCCGCGCGGCGUGGCGCGGGGAGCGGCGGCGGCGGCAGAGCCAGAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[75.98176575 242.17720032]
[80.63877869 227.46952820]
[92.52265930 217.63200378]
[90.62377167 202.75267029]
[88.72488403 187.87335205]
[86.82599640 172.99403381]
[84.92710876 158.11471558]
[83.02822113 143.23538208]
[81.12933350 128.35606384]
[70.77815247 117.50005341]
[56.00603485 114.89533234]
[41.19445038 112.52530670]
[26.43361282 118.21988678]
[14.93701839 108.75006104]
[0.08969662 106.61534119]
[-14.75762463 104.48061371]
[-29.51846504 110.17519379]
[-41.01505661 100.70536804]
[-55.86238098 98.57064819]
[-70.62322235 104.26522064]
[-82.11981201 94.79539490]
[-96.96713257 92.66067505]
[-111.81445312 90.52594757]
[-123.34716797 101.08675385]
[-138.97224426 101.71205139]
[-151.31199646 92.10661316]
[-154.53997803 76.80582428]
[-147.13203430 63.03424835]
[-132.58595276 57.29440689]
[-117.76997375 62.29647446]
[-109.67973328 75.67862701]
[-94.83241272 77.81335449]
[-79.98509216 79.94807434]
[-66.28623199 74.10080719]
[-53.72765732 83.72332001]
[-38.88033676 85.85804749]
[-25.18147659 80.01078033]
[-12.62290287 89.63329315]
[2.22441912 91.76802063]
[17.07174110 93.90274048]
[30.77059937 88.05547333]
[43.32917404 97.67798615]
[50.52954483 95.47366333]
[58.61075592 100.12321472]
[73.38287354 102.72793579]
[77.69161224 87.95178223]
[88.97628784 78.73625946]
[102.67793274 77.61078644]
[113.88562775 84.05158997]
[127.10742188 76.96752167]
[140.32922363 69.88346100]
[153.55102539 62.79939270]
[166.77282715 55.71532822]
[172.99974060 48.77630997]
[180.52842712 48.62382126]
[193.96833801 41.96282196]
[202.89732361 28.90205383]
[217.73675537 30.18287086]
[231.17666626 23.52187157]
[244.61657715 16.86087227]
[253.54556274 3.80010390]
[268.38500977 5.08092022]
[281.82489014 -1.58007884]
[285.33551025 -16.81850243]
[297.85095215 -26.19390488]
[313.46176147 -25.27950668]
[324.79705811 -14.50706100]
[326.50460815 1.03701496]
[317.77816772 14.01328278]
[302.73812866 18.29474449]
[288.48590088 11.85982800]
[275.04598999 18.52082634]
[267.07830811 31.10515594]
[251.27757263 30.30077934]
[237.83766174 36.96177673]
[224.39775085 43.62277603]
[216.43006897 56.20710754]
[200.62933350 55.40272903]
[187.18942261 62.06372833]
[173.85688782 68.93712616]
[160.63508606 76.02119446]
[147.41328430 83.10526276]
[134.19149780 90.18932343]
[120.96968842 97.27339172]
[116.76229858 117.10830688]
[96.00865936 126.45717621]
[97.90754700 141.33650208]
[99.80643463 156.21582031]
[101.70532227 171.09513855]
[103.60420227 185.97447205]
[105.50308990 200.85379028]
[107.40197754 215.73310852]
[121.37564087 222.27072144]
[129.57719421 235.33740234]
[129.38954163 250.76362610]
[120.87257385 263.62692261]
[106.74401855 269.82269287]
[91.51225281 267.37387085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[8 87]
[9 86]
[10 45]
[11 44]
[12 42]
[14 40]
[15 39]
[16 38]
[18 36]
[19 35]
[21 33]
[22 32]
[23 31]
[49 84]
[50 83]
[51 82]
[52 81]
[53 80]
[55 79]
[56 78]
[58 76]
[59 75]
[60 74]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
