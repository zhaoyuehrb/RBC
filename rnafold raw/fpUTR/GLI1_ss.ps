%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGACUCCAGCCCUGGACCGCGCAUCCCGAGCCCAGCGCCCAGACAGAGUGUCCCCACACCCUCCUCUGAGACGCC\
) } def
/len { sequence length } bind def

/coor [
[87.49048615 132.51670837]
[80.95433807 129.17338562]
[70.24281311 139.67402649]
[59.53129196 150.17465210]
[48.81976700 160.67527771]
[52.04967880 175.76074219]
[46.58966064 190.18959045]
[34.18198013 199.35763550]
[18.78588867 200.33938599]
[5.31421614 192.82156372]
[-1.93427098 179.20309448]
[-0.64660835 163.82955933]
[8.76631546 151.60661316]
[23.30087090 146.43455505]
[38.31913376 149.96376038]
[49.03065872 139.46313477]
[59.74218369 128.96249390]
[70.45370483 118.46186829]
[66.15428162 108.26385498]
[65.27015686 97.23195648]
[67.89054871 86.47937775]
[73.75104523 77.09113312]
[64.83802795 65.02638245]
[55.92501068 52.96163559]
[47.01199722 40.89688873]
[32.02600098 43.79217911]
[17.27005959 39.89026642]
[5.67397356 29.96587181]
[-0.45984417 15.98949814]
[0.08647946 0.73616153]
[7.20447159 -12.76557732]
[19.48085022 -21.83493805]
[34.47813034 -24.67119026]
[49.21859360 -20.71119690]
[60.77550507 -10.74121761]
[66.85424042 3.25920296]
[66.24784851 18.51026917]
[59.07674408 31.98387337]
[67.98976135 44.04862213]
[76.90277863 56.11336899]
[85.81578827 68.17811584]
[112.85121155 67.61682129]
[132.14483643 86.56372070]
[146.90530396 83.89375305]
[161.66575623 81.22378540]
[176.42622375 78.55381775]
[190.02780151 66.33072662]
[206.30426025 72.57054138]
[220.94689941 69.31585693]
[232.73947144 58.76854324]
[246.84236145 63.55996323]
[261.48501587 60.30528259]
[276.12765503 57.05059814]
[290.77029419 53.79591751]
[302.48254395 42.31744385]
[318.20449829 46.98135376]
[321.76278687 62.98981476]
[309.49691772 73.87469482]
[294.02499390 68.43856049]
[279.38232422 71.69324493]
[264.73968506 74.94792938]
[250.09704590 78.20260620]
[239.35182190 88.51712799]
[224.20158386 83.95850372]
[209.55894470 87.21318054]
[202.66783142 97.36070251]
[190.29037476 100.07083893]
[179.09619141 93.31427765]
[164.33572388 95.98424530]
[149.57527161 98.65421295]
[134.81480408 101.32418823]
[133.76435852 108.59024048]
[131.21463013 115.47485352]
[127.27883148 121.67231750]
[122.13174438 126.90743256]
[116.00190735 130.94773865]
[109.16151428 133.61384583]
[101.91431427 134.78733826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[22 41]
[23 40]
[24 39]
[25 38]
[43 71]
[44 70]
[45 69]
[46 68]
[48 65]
[49 64]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
