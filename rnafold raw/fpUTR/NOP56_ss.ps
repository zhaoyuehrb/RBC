%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGGCCGGAGAUGGUGUCGUCCCCGGCCUCCGAUUGGUCGGGGGGGCGGGGGCGUGGCCUCUGGAGCCUGGUUCCGCGCGCCGGAGCGCGCUAGCCGCAUUGCGAGCCGAACCCGGGAGCUGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[93.34217072 127.98577118]
[83.00370026 121.87203979]
[76.41618347 112.37227631]
[74.47544861 101.43321991]
[59.91131973 97.84348297]
[45.34719086 94.25375366]
[30.78306389 90.66401672]
[18.92463303 100.49681091]
[3.72779179 101.45042419]
[-8.96645069 93.36833191]
[-14.40241909 79.52679443]
[-28.96654701 75.93705750]
[-43.53067398 72.34732819]
[-52.71630859 73.33258057]
[-58.40124130 68.49088287]
[-72.87437439 64.55027008]
[-87.34750366 60.60966110]
[-100.95166779 68.19679260]
[-115.57334900 63.99428177]
[-122.72267914 50.97803879]
[-137.19581604 47.03742599]
[-151.66894531 43.09681702]
[-166.14207458 39.15620422]
[-180.61521912 35.21559525]
[-195.08834839 31.27498436]
[-209.56147766 27.33437347]
[-224.03460693 23.39376259]
[-239.38270569 27.23388672]
[-249.63029480 16.42480659]
[-264.10342407 12.48419666]
[-278.57656860 8.54358578]
[-293.04968262 4.60297537]
[-307.52282715 0.66236448]
[-318.91091919 11.06981468]
[-334.12170410 13.64572716]
[-348.30151367 7.56813765]
[-356.92556763 -5.22361708]
[-357.24200439 -20.64773560]
[-349.14984131 -33.78243637]
[-335.23123169 -40.43648529]
[-319.92761230 -38.48659897]
[-308.12225342 -28.55497742]
[-303.58221436 -13.81076908]
[-289.10910034 -9.87015820]
[-274.63595581 -5.92954731]
[-260.16281128 -1.98893678]
[-245.68968201 1.95167387]
[-231.37680054 -2.17030978]
[-220.09400940 8.92062950]
[-205.62086487 12.86123943]
[-191.14773560 16.80185127]
[-176.67460632 20.74246216]
[-162.20147705 24.68307114]
[-147.72833252 28.62368202]
[-133.25520325 32.56429291]
[-118.78206635 36.50490570]
[-106.02084351 28.90972328]
[-91.28689575 32.69988632]
[-83.40689850 46.13652802]
[-68.93376160 50.07714081]
[-54.46062851 54.01774979]
[-39.94094086 57.78319931]
[-25.37681198 61.37293243]
[-10.81268406 64.96266937]
[0.43311164 55.23281479]
[15.42924023 53.97578430]
[28.44220734 61.88249588]
[34.37279892 76.09989166]
[48.93692780 79.68962097]
[63.50105286 83.27935791]
[78.06517792 86.86909485]
[96.76402283 71.41576385]
[123.06465149 77.86334991]
[133.54231262 67.12936401]
[144.01998901 56.39537811]
[154.49766541 45.66139603]
[164.97532654 34.92741013]
[175.45300293 24.19342613]
[176.69770813 8.19873047]
[190.05920410 -0.68100661]
[205.28771973 4.36598921]
[210.70121765 19.46809387]
[202.14692688 33.04026413]
[186.18698120 34.67109680]
[175.70932007 45.40507889]
[165.23164368 56.13906479]
[154.75396729 66.87304688]
[144.27630615 77.60703278]
[133.79862976 88.34101868]
[135.60668945 103.23165131]
[148.34870911 111.14625549]
[161.09072876 119.06085968]
[173.83273315 126.97546387]
[186.57475281 134.89006042]
[199.31677246 142.80467224]
[212.05879211 150.71926880]
[224.80081177 158.63388062]
[238.69343567 164.29029846]
[253.34005737 167.52706909]
[267.98666382 170.76382446]
[284.75735474 168.27777100]
[291.78884888 183.70483398]
[278.91119385 194.73217773]
[264.74990845 185.41044617]
[250.10328674 182.17367554]
[235.45668030 178.93692017]
[231.89126587 185.53523254]
[224.76043701 198.73188782]
[221.19503784 205.33020020]
[231.92901611 215.80787659]
[242.66300964 226.28553772]
[258.67855835 229.81173706]
[263.37393188 245.52432251]
[251.91894531 257.25955200]
[236.09748840 252.94520569]
[232.18533325 237.01953125]
[221.45133972 226.54185486]
[210.71736145 216.06419373]
[204.13177490 197.22982788]
[207.28068542 180.99388123]
[216.88621521 171.37590027]
[204.14419556 163.46128845]
[191.40217590 155.54669189]
[178.66015625 147.63208008]
[165.91813660 139.71748352]
[153.17611694 131.80287170]
[140.43409729 123.88827515]
[127.69207764 115.97367096]
[117.96840668 125.14042664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 71]
[5 70]
[6 69]
[7 68]
[11 64]
[12 63]
[13 62]
[15 61]
[16 60]
[17 59]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[90 128]
[91 127]
[92 126]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
[98 106]
[99 105]
[100 104]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
