%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACGCCCCCAUCGAGCUUGCUUUGCUUACGCAAGGCCUCAGCCUUUGCCUCUUCCCCAAACCCAAGCUACCUGAGGAGGAGGAGCUGAGUGAGGGGGAGGGACCAACAGAUUUGUCCCCUGUGCAGGCUGCCUGCCUGCUUGAGUUACAUCCACAA\
) } def
/len { sequence length } bind def

/coor [
[20.87797737 122.22231293]
[31.57417488 111.70607758]
[44.51203918 104.11584473]
[58.91032410 99.90995026]
[73.89958191 99.34238434]
[88.57034302 102.44589996]
[75.38571167 95.29288483]
[62.20108414 88.13987732]
[49.01645660 80.98686218]
[35.83182907 73.83384705]
[26.74202919 72.47830200]
[22.45823860 66.40528870]
[9.41843414 58.99155426]
[-3.62136984 51.57781601]
[3.11556053 64.97982025]
[-2.23526239 78.99298096]
[-16.19016075 84.49396515]
[-29.66373253 77.90132904]
[-33.88394928 63.50724411]
[-26.10358047 50.68329239]
[-39.69118881 57.03758240]
[-53.27879333 63.39186859]
[-66.86640167 69.74615479]
[-80.45400238 76.10044098]
[-94.04161072 82.45472717]
[-107.62921906 88.80902100]
[-116.57184601 102.55533600]
[-132.93122864 101.41387177]
[-139.87821960 86.55886078]
[-130.26635742 73.27186584]
[-113.98350525 75.22141266]
[-100.39589691 68.86712646]
[-86.80828857 62.51283646]
[-73.22068787 56.15855026]
[-59.63307953 49.80426407]
[-46.04547501 43.44997406]
[-32.45786667 37.09568787]
[-28.47963905 22.63285065]
[-36.90595627 10.22328949]
[-45.33227158 -2.18627095]
[-53.75858688 -14.59583187]
[-62.18490601 -27.00539207]
[-70.61122131 -39.41495132]
[-79.08040619 -39.43300247]
[-86.75303650 -42.78987503]
[-92.38567352 -48.85943222]
[-95.09845734 -56.58297348]
[-94.51203156 -64.65343475]
[-90.79878235 -71.73648834]
[-98.21251678 -84.77629089]
[-105.62625885 -97.81610107]
[-113.03999329 -110.85590363]
[-120.45373535 -123.89570618]
[-127.86746979 -136.93551636]
[-135.28120422 -149.97531128]
[-142.69494629 -163.01512146]
[-156.24186707 -171.18772888]
[-155.80610657 -186.07595825]
[-163.21984863 -199.11576843]
[-178.37136841 -197.58233643]
[-192.83464050 -202.35032654]
[-204.10382080 -212.59364319]
[-210.22644043 -226.53758240]
[-210.14173889 -241.76625061]
[-203.86437988 -255.64122009]
[-192.48194885 -265.75854492]
[-177.96653748 -270.36535645]
[-162.83302307 -268.66348267]
[-149.70336914 -260.94778442]
[-140.85237122 -248.55503845]
[-137.81352234 -233.63240051]
[-141.11331177 -218.76528931]
[-150.18005371 -206.52951050]
[-142.76631165 -193.48970032]
[-129.74967957 -186.24978638]
[-129.65513611 -170.42886353]
[-122.24140167 -157.38905334]
[-114.82766724 -144.34924316]
[-107.41392517 -131.30944824]
[-100.00019073 -118.26963806]
[-92.58644867 -105.22983551]
[-85.17271423 -92.19003296]
[-77.75897980 -79.15023041]
[-58.06377029 -70.22188568]
[-58.20166016 -47.84127045]
[-49.77534485 -35.43170929]
[-41.34902573 -23.02214813]
[-32.92271042 -10.61258698]
[-24.49639511 1.79697311]
[-16.07007790 14.20653343]
[3.79236817 38.53801346]
[16.83217239 45.95174789]
[29.87197685 53.36548615]
[42.98484039 60.64922333]
[56.16946793 67.80223846]
[69.35409546 74.95524597]
[82.53872681 82.10826111]
[95.72335052 89.26127625]
[98.83324432 71.62937164]
[113.22760773 56.74718857]
[127.27710724 51.49252701]
[141.32661438 46.23786163]
[155.37611389 40.98320007]
[169.42561340 35.72853851]
[171.87971497 20.56697464]
[181.59825134 8.67387676]
[195.96696472 3.24842429]
[211.12075806 5.75003815]
[222.98333740 15.50579643]
[228.36372375 29.89144897]
[225.81462097 45.03733063]
[216.02172852 56.86927032]
[201.61927795 62.20453644]
[186.48146057 59.60797119]
[174.68028259 49.77803802]
[160.63078308 55.03270340]
[146.58126831 60.28736496]
[132.53176880 65.54203033]
[118.48226929 70.79669189]
[117.81209564 78.26668549]
[132.75207520 79.60726166]
[131.41127014 94.54721832]
[116.47174835 93.20668030]
[115.80157471 100.67668152]
[128.69140625 108.34821320]
[141.58122253 116.01974487]
[154.47105408 123.69127655]
[167.36088562 131.36280823]
[180.25070190 139.03434753]
[196.09190369 136.49743652]
[207.85466003 147.40693665]
[206.51557922 163.39401245]
[193.10189819 172.19473267]
[177.90345764 167.05795288]
[172.57917786 151.92416382]
[159.68934631 144.25263977]
[146.79951477 136.58110046]
[133.90969849 128.90957642]
[121.01986694 121.23803711]
[108.13004303 113.56650543]
[118.30279541 124.58989716]
[125.48011780 137.76130676]
[129.22860718 152.28538513]
[129.32189941 167.28509521]
[125.75438690 181.85469055]
[118.74147034 195.11436462]
[108.70663452 206.26344299]
[96.25583649 214.62870789]
[82.14090729 219.70500183]
[67.21417999 221.18580627]
[52.37699890 218.98168945]
[38.52531052 213.22575378]
[26.49554634 204.26557922]
[17.01412201 192.64222717]
[10.65357113 179.05754089]
[7.79797649 164.33186340]
[8.61977196 149.35440063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[12 93]
[13 92]
[14 91]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[49 83]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[58 74]
[59 73]
[100 119]
[101 118]
[102 117]
[103 116]
[104 115]
[124 140]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
