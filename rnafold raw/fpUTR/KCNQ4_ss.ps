%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAUGCGUCUCUGAGCGCCCCGAGCGCGCCCCCGCCCCGGACCGUGCCCGGGCCCCGGCGCCCCCAGCCCGGCGCCGCCC\
) } def
/len { sequence length } bind def

/coor [
[109.23468781 172.47236633]
[94.24542236 173.03968811]
[80.83128357 166.32693481]
[72.29993439 153.98934937]
[70.75502777 139.06912231]
[76.57749939 125.24527740]
[88.33054352 115.92698669]
[75.53353119 123.75235748]
[62.73651886 131.57772827]
[49.93950653 139.40310669]
[46.47964478 154.82402039]
[33.08438873 163.21109009]
[17.70090675 159.58837891]
[9.45594406 146.10519409]
[13.24109077 130.76087952]
[26.81068611 122.65892792]
[42.11413193 126.60608673]
[54.91114426 118.78071594]
[67.70816040 110.95534515]
[80.50517273 103.12997437]
[85.78338623 89.08930206]
[81.31041718 74.77174377]
[76.83744812 60.45417786]
[72.36447906 46.13661957]
[60.86401367 35.27154541]
[64.45405579 20.81606483]
[59.98108292 6.49850416]
[55.50811386 -7.81905651]
[51.03514481 -22.13661766]
[46.56217575 -36.45417786]
[32.84340668 -43.83205795]
[28.51114082 -58.41582108]
[35.62936401 -71.44910431]
[31.15639687 -85.76666260]
[17.04249954 -92.87816620]
[12.17046547 -107.91275024]
[19.43078804 -121.95067596]
[34.51604843 -126.66348267]
[48.47642517 -119.25514221]
[53.02947617 -104.12090302]
[45.47395706 -90.23963165]
[49.94692612 -75.92207336]
[63.21857452 -69.25881958]
[67.95875549 -54.80249405]
[60.87973785 -40.92714691]
[65.35270691 -26.60958672]
[69.82567596 -12.29202557]
[74.29864502 2.02553558]
[78.77161407 16.34309578]
[89.95214081 26.18408203]
[86.68204498 41.66365051]
[91.15501404 55.98121262]
[95.62797546 70.29877472]
[100.10094452 84.61633301]
[106.54098511 85.42946625]
[112.30099487 88.91497040]
[116.28616333 94.63803101]
[117.64956665 101.72336578]
[131.00175476 108.55850220]
[144.35394287 115.39364624]
[157.70613098 122.22878265]
[171.05831909 129.06391907]
[184.41049194 135.89906311]
[197.76268005 142.73420715]
[211.54037476 135.59593201]
[226.87745667 137.95256042]
[237.87649536 148.89791870]
[240.30815125 164.22326660]
[233.23739624 178.03573608]
[219.38307190 185.02410889]
[204.07246399 182.50125122]
[193.19281006 171.43722534]
[190.92755127 156.08638000]
[177.57536316 149.25125122]
[164.22317505 142.41610718]
[150.87098694 135.58096313]
[137.51879883 128.74583435]
[124.16661835 121.91069031]
[110.81443024 115.07555389]
[123.23934937 123.47920227]
[130.09008789 136.82337952]
[129.67739868 151.81770325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 20]
[8 19]
[9 18]
[10 17]
[21 54]
[22 53]
[23 52]
[24 51]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[33 42]
[34 41]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
