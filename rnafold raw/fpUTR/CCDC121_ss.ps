%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAGGAAGUGGGGGCGCUGAGCAAGCGAGAGGAAGGCUGAAGGGAGCUAGGAAAAGGGCGCUGAUCUCUGCAGCCUGGGAGGGCUUUUGUCUCCCGGAGGAAGGCCAGAAGAG\
) } def
/len { sequence length } bind def

/coor [
[147.64985657 283.29693604]
[144.82318115 268.56567383]
[141.99649048 253.83441162]
[127.23310089 251.52627563]
[114.12561798 244.29281616]
[104.26535034 232.99017334]
[98.85692596 218.96981812]
[98.57111359 203.91696167]
[103.46170044 189.64802551]
[112.95668793 177.89144897]
[125.92510223 170.07827759]
[123.09841919 155.34703064]
[120.27174377 140.61576843]
[117.44506073 125.88451385]
[110.96686554 122.10523987]
[98.01046753 114.54667664]
[91.53227234 110.76739502]
[77.31747437 115.55692291]
[63.10267639 120.34644318]
[48.88787842 125.13596344]
[40.50030136 138.81178284]
[24.56150246 140.63777161]
[13.29836273 129.21318054]
[15.35100174 113.30198669]
[29.14480972 105.10988617]
[44.09835434 110.92116547]
[58.31315231 106.13164520]
[72.52795410 101.34212494]
[86.74275208 96.55259705]
[96.75956726 85.38732147]
[99.98412323 70.73801422]
[103.20867920 56.08870697]
[98.61890411 40.94788361]
[108.91129303 30.18145943]
[112.13584900 15.53215218]
[115.36040497 0.88284343]
[118.58496094 -13.76646519]
[121.80952454 -28.41577339]
[125.03408051 -43.06508255]
[128.25863647 -57.71438980]
[116.51231384 -73.85793304]
[120.15724182 -93.18226624]
[136.47239685 -103.61469269]
[138.49740601 -118.47737885]
[140.52239990 -133.34005737]
[131.23056030 -145.84204102]
[133.49591064 -160.88606262]
[145.47189331 -169.66737366]
[147.49690247 -184.53005981]
[138.20504761 -197.03202820]
[140.47041321 -212.07606506]
[152.44639587 -220.85737610]
[154.47140503 -235.72006226]
[156.49639893 -250.58273315]
[147.20454407 -263.08471680]
[149.46990967 -278.12875366]
[161.44589233 -286.91006470]
[163.47090149 -301.77273560]
[156.76622009 -316.73867798]
[166.59272766 -329.86770630]
[182.84175110 -327.65383911]
[188.79768372 -312.37448120]
[178.33358765 -299.74774170]
[176.30857849 -284.88504028]
[185.49879456 -273.21990967]
[183.65687561 -258.11819458]
[171.35908508 -248.55773926]
[169.33407593 -233.69505310]
[167.30908203 -218.83236694]
[176.49929810 -207.16722107]
[174.65737915 -192.06550598]
[162.35958862 -182.50506592]
[160.33457947 -167.64237976]
[169.52479553 -155.97723389]
[167.68287659 -140.87550354]
[155.38508606 -131.31506348]
[153.36009216 -116.45237732]
[151.33508301 -101.58969879]
[159.68991089 -95.24076080]
[164.63098145 -85.89116669]
[165.17808533 -75.24878693]
[161.16084290 -65.29063416]
[153.26319885 -57.89555359]
[142.90794373 -54.48983383]
[139.68338013 -39.84052658]
[136.45883179 -25.19121742]
[133.23426819 -10.54190826]
[130.00971985 4.10739994]
[126.78515625 18.75670815]
[123.56060028 33.40601730]
[128.38102722 47.49902344]
[117.85798645 59.31326294]
[114.63343048 73.96257019]
[111.40887451 88.61187744]
[132.17631531 123.05783844]
[135.00299072 137.78909302]
[137.82968140 152.52033997]
[140.65635681 167.25160217]
[155.59565735 169.70974731]
[168.76783752 177.11688232]
[178.59255981 188.56219482]
[183.89868164 202.65173340]
[184.06385803 217.67817688]
[179.08743286 231.82772827]
[169.58827209 243.39903259]
[156.72775269 251.00773621]
[159.55442810 265.73898315]
[162.38110352 280.47024536]
[176.48519897 286.93972778]
[184.06362915 300.48028564]
[182.20233154 315.88531494]
[171.61701965 327.23129272]
[156.37794495 330.15539551]
[142.34486389 323.53329468]
[134.91377258 309.91131592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[11 98]
[12 97]
[13 96]
[14 95]
[17 29]
[18 28]
[19 27]
[20 26]
[30 94]
[31 93]
[32 92]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[43 78]
[44 77]
[45 76]
[48 73]
[49 72]
[52 69]
[53 68]
[54 67]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
