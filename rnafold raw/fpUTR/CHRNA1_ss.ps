%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAAGCACCCAGCCAGAGUGCCAGUGAGAAGCACAGGCCACCACUCUGCCCUGGUCCACACAAGCUCCGGUAGCCC\
) } def
/len { sequence length } bind def

/coor [
[133.85618591 264.81262207]
[121.89462280 258.79183960]
[111.51544189 250.31883240]
[103.21330261 239.79342651]
[97.38471222 227.71336365]
[94.30914307 214.65074158]
[94.13558197 201.22492981]
[96.87535858 188.07324219]
[102.40142822 175.82061768]
[110.45426941 165.04994202]
[120.65407562 156.27435303]
[113.76461792 142.95011902]
[106.87516022 129.62586975]
[99.98570251 116.30163574]
[85.67125702 107.77372742]
[86.32638550 91.12442017]
[78.91265106 78.08461761]
[71.49890900 65.04480743]
[64.08517456 52.00500870]
[56.67143631 38.96520233]
[49.25769806 25.92539787]
[40.83138275 13.51583862]
[31.44576073 1.81497860]
[22.06014061 -9.88588142]
[7.38972282 -15.80951500]
[5.46170378 -30.57880783]
[-3.92391753 -42.27966690]
[-13.30953884 -53.98052597]
[-29.03564453 -57.15372086]
[-36.23131561 -71.49254608]
[-29.37664795 -85.99748230]
[-13.72995853 -89.54158020]
[-1.29404593 -79.40611267]
[-1.60867906 -63.36614990]
[7.77694225 -51.66528702]
[17.16256332 -39.96442795]
[31.16165733 -34.87771988]
[33.76099777 -19.27150154]
[43.14662170 -7.57064247]
[52.53224182 4.13021708]
[55.58503342 4.43437958]
[58.67593384 6.13634729]
[61.20048904 9.24648666]
[62.56795120 13.52785397]
[62.29750061 18.51166153]
[69.71124268 31.55146408]
[77.12497711 44.59127045]
[84.53871918 57.63107300]
[91.95245361 70.67087555]
[99.36618805 83.71067810]
[110.53720856 87.56171417]
[116.17195892 97.94784546]
[113.30993652 109.41217804]
[120.19940186 122.73641968]
[127.08885956 136.06065369]
[133.97831726 149.38490295]
[150.44271851 145.77400208]
[167.25770569 146.74909973]
[183.17079163 152.23075867]
[196.99844360 161.80419922]
[207.71423340 174.75053406]
[214.52490234 190.10081482]
[216.92913818 206.70855713]
[214.75450134 223.33534241]
[208.16969299 238.74317932]
[197.67156982 251.78665161]
[206.58459473 263.85140991]
[215.49760437 275.91613770]
[231.08512878 279.71206665]
[237.70504761 294.32562256]
[230.27912903 308.54656982]
[214.50390625 311.46582031]
[202.48077393 300.84393311]
[203.43286133 284.82916260]
[194.51983643 272.76440430]
[185.60682678 260.69967651]
[173.33508301 265.98849487]
[160.20216370 268.49533081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 56]
[12 55]
[13 54]
[14 53]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[22 40]
[23 39]
[24 38]
[26 36]
[27 35]
[28 34]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
