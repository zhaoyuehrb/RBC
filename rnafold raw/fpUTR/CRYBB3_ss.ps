%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGGCGAGUCUGCAGACGGCCGUGGCUCCUCUGUUCUUCCCGAGGCUACAGCAACAGCCAGAGGUGUUCCUGGGGAG\
) } def
/len { sequence length } bind def

/coor [
[88.45602417 117.79092407]
[80.31156921 107.88327026]
[65.31438446 108.17414093]
[50.31720734 108.46500397]
[35.32002640 108.75587463]
[20.32284737 109.04674530]
[5.32566786 109.33761597]
[-8.32187271 117.34106445]
[-21.19678879 109.85202026]
[-36.19396973 110.14289093]
[-51.19114685 110.43376160]
[-66.18832397 110.72463226]
[-81.18550873 111.01550293]
[-97.66380310 122.31594849]
[-114.36170197 112.88322449]
[-129.29124451 114.33538818]
[-140.55323792 125.76110840]
[-156.49221802 123.93672180]
[-164.88116455 110.26174164]
[-159.28480530 95.22644043]
[-143.99617004 90.36461639]
[-130.74340820 99.40584564]
[-115.81386566 97.95368195]
[-109.84089661 89.27370453]
[-99.81583405 85.36698914]
[-89.11008453 87.81579590]
[-81.47637939 96.01831818]
[-66.47919464 95.72744751]
[-51.48201752 95.43657684]
[-36.48483658 95.14571381]
[-21.48765755 94.85484314]
[-8.91281605 86.87219238]
[5.03479815 94.34043884]
[20.03197670 94.04956818]
[35.02915573 93.75869751]
[50.02633667 93.46782684]
[65.02351379 93.17695618]
[80.02069855 92.88608551]
[91.05438995 80.77095032]
[107.42861176 80.13555908]
[119.36795044 91.35923767]
[134.34257507 90.48706055]
[149.31719971 89.61489105]
[164.29182434 88.74271393]
[177.61875916 80.21610260]
[190.77438354 87.20028687]
[205.74900818 86.32810974]
[220.72363281 85.45594025]
[230.01135254 76.26263428]
[242.67214966 75.98350525]
[251.75607300 84.21626282]
[266.75326538 83.92539215]
[281.75042725 83.63452911]
[295.39797974 75.63107300]
[308.27288818 83.12012482]
[315.62261963 69.63394165]
[328.73910522 61.64311981]
[344.09408569 61.29715729]
[357.55718994 68.68911743]
[365.50683594 81.83058929]
[365.80468750 97.18659973]
[358.37054443 110.62644196]
[345.20422363 118.53487396]
[329.84735107 118.78456879]
[316.43087769 111.30835724]
[308.56375122 98.11730194]
[295.98892212 106.09994507]
[282.04129028 98.63170624]
[267.04412842 98.92257690]
[252.04695129 99.21344757]
[237.69476318 109.11483765]
[221.59579468 100.43056488]
[206.62117004 101.30273438]
[191.64656067 102.17490387]
[179.39070129 110.63914490]
[165.16398621 103.71733856]
[150.18936157 104.58951569]
[135.21475220 105.46168518]
[120.24011993 106.33385468]
[112.88792419 116.84285736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[15 23]
[16 22]
[41 79]
[42 78]
[43 77]
[44 76]
[46 74]
[47 73]
[48 72]
[51 70]
[52 69]
[53 68]
[55 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
