%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCUCGCUUGUGGGCGGAGGUCUGGGAUCUCCUGGCUGUUGCUGUCUUCUGCUCUCAUCCUGCAGGUGGGACUCUCAGCUGACACC\
) } def
/len { sequence length } bind def

/coor [
[87.75915527 169.45500183]
[87.22978210 154.46435547]
[86.70040894 139.47369385]
[72.62525177 134.28814697]
[62.49682236 145.35227966]
[52.36839294 156.41639709]
[42.23996353 167.48052979]
[43.18737793 183.25639343]
[32.63971329 195.02593994]
[16.85471344 195.80651855]
[5.19733572 185.13500977]
[4.58369732 169.34263611]
[15.37785816 157.79873657]
[31.17583466 157.35209656]
[41.30426407 146.28796387]
[51.43269348 135.22384644]
[61.56112671 124.15971375]
[57.38134384 109.75383759]
[42.90393829 105.82894897]
[28.42653465 101.90406036]
[13.94912910 97.97917175]
[-0.52827555 94.05427551]
[-15.00568008 90.12938690]
[-29.48308563 86.20449829]
[-46.35246658 87.89573669]
[-52.64751434 72.15379333]
[-39.26341629 61.74695587]
[-25.55819702 71.72709656]
[-11.08079147 75.65198517]
[3.39661336 79.57687378]
[17.87401772 83.50176239]
[32.35142136 87.42665100]
[46.82882690 91.35153961]
[61.30623245 95.27642822]
[88.57748413 70.01095581]
[116.64471436 81.07862854]
[129.45501709 73.27503967]
[142.26533508 65.47144318]
[155.07563782 57.66785431]
[167.88594055 49.86426163]
[167.26319885 37.12543106]
[172.17207336 25.43307877]
[181.59263611 17.05368996]
[193.63720703 13.58193398]
[205.92843628 15.63746452]
[216.06845093 22.75535774]
[229.39730835 15.87483025]
[242.72616577 8.99430275]
[256.05502319 2.11377525]
[269.13275146 -5.23286104]
[281.94305420 -13.03645229]
[294.75335693 -20.84004402]
[307.56365967 -28.64363670]
[320.37396240 -36.44722748]
[320.64242554 -51.87225723]
[329.22665405 -64.69077301]
[343.38748169 -70.81244659]
[358.60620117 -68.28386688]
[370.02661133 -57.91189194]
[374.00448608 -43.00618744]
[369.27050781 -28.32310486]
[357.33523560 -18.54796410]
[342.00723267 -16.79997826]
[328.17755127 -23.63692093]
[315.36724854 -15.83332920]
[302.55694580 -8.02973747]
[289.74664307 -0.22614594]
[276.93634033 7.57744598]
[274.92733765 12.13585377]
[269.91168213 15.36940289]
[262.93554688 15.44262886]
[249.60668945 22.32315636]
[236.27783203 29.20368385]
[222.94897461 36.08421326]
[221.21884155 53.47863388]
[209.41488647 66.57999420]
[191.99206543 70.17047882]
[175.68952942 62.67456818]
[162.87922668 70.47815704]
[150.06892395 78.28175354]
[137.25862122 86.08534241]
[124.44831085 93.88893127]
[128.02992249 110.09979248]
[120.37506866 127.70121765]
[101.69107056 138.94432068]
[102.22043610 153.93498230]
[102.74980927 168.92562866]
[105.61891937 188.09378052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 17]
[5 16]
[6 15]
[7 14]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[36 82]
[37 81]
[38 80]
[39 79]
[40 78]
[46 74]
[47 73]
[48 72]
[49 71]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
