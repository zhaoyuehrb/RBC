%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGGCGGAGCCUGGCCGGUGCCCUCGGAGCUGCUGGCCCCGGGCGGCUGCUCCAGUCUGAGCGCCCUCCGCUCGCCCCGAGAGAGACCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[148.00093079 249.99159241]
[155.49308777 236.84918213]
[166.68115234 226.66673279]
[160.49055481 213.00376892]
[154.29994202 199.34082031]
[148.10932922 185.67785645]
[141.91873169 172.01489258]
[135.72811890 158.35194397]
[129.98895264 153.46409607]
[129.56666565 144.13917542]
[123.82640839 130.28097534]
[118.08615875 116.42278290]
[101.97348785 122.73733521]
[86.98542786 116.75503540]
[80.65242767 103.18995667]
[66.04427338 99.78381348]
[51.43611526 96.37767029]
[36.82796097 92.97152710]
[22.21980667 89.56538391]
[7.61165285 86.15923309]
[-6.99650192 82.75308990]
[-21.65843201 79.58641815]
[-36.37021255 76.66006470]
[-51.12789917 73.97481537]
[-66.27700806 80.25466919]
[-79.12364960 70.06173706]
[-76.45230103 53.88162994]
[-61.01101685 48.35905457]
[-48.68446732 59.17516327]
[-41.43186188 57.11876297]
[-33.44385529 61.94828415]
[-18.73207664 64.87464142]
[-11.41606808 63.05664062]
[-3.59035802 68.14493561]
[11.01779652 71.55107880]
[25.62595177 74.95722961]
[40.23410416 78.36337280]
[54.84226227 81.76951599]
[69.45041656 85.17565918]
[84.05857086 88.58180237]
[93.94297791 79.66719818]
[108.25721741 78.72325897]
[120.94256592 87.42121124]
[129.27612305 74.94916534]
[137.60968018 62.47711945]
[138.84330750 46.70408249]
[152.34753418 40.42035675]
[160.68109131 27.94831276]
[169.01463318 15.47626877]
[171.24801636 6.41290760]
[177.83049011 2.73863339]
[186.56765747 -9.45406723]
[195.30480957 -21.64676666]
[204.04197693 -33.83946609]
[201.22056580 -49.38987732]
[210.28988647 -62.33295059]
[225.86924744 -64.98979187]
[238.71571350 -55.78414536]
[241.20770264 -40.17755890]
[231.86674500 -27.42914009]
[216.23468018 -25.10230255]
[207.49751282 -12.90960217]
[198.76034546 -0.71690154]
[190.02317810 11.47579861]
[181.48667908 23.80982208]
[173.15312195 36.28186798]
[164.81958008 48.75391006]
[164.18200684 63.63486481]
[150.08171082 70.81067657]
[141.74816895 83.28271484]
[133.41461182 95.75476074]
[131.94435120 110.68253326]
[137.68460083 124.54072571]
[143.42485046 138.39892578]
[149.39108276 152.16133118]
[155.58169556 165.82429504]
[161.77229309 179.48725891]
[167.96290588 193.15020752]
[174.15350342 206.81317139]
[180.34411621 220.47612000]
[195.37649536 218.77825928]
[210.19740295 221.81072998]
[223.35482788 229.27645874]
[233.55975342 240.44403076]
[239.81240845 254.21936035]
[241.50019836 269.25286865]
[238.45779419 284.07174683]
[230.98324585 297.22418213]
[219.80883789 307.42160034]
[206.02932739 313.66503906]
[190.99468994 315.34274292]
[176.17785645 312.29040527]
[163.03044128 304.80706787]
[152.84048462 293.62582397]
[146.60630798 279.84213257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[10 74]
[11 73]
[12 72]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 32]
[23 31]
[24 29]
[43 71]
[44 70]
[45 69]
[47 67]
[48 66]
[49 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
