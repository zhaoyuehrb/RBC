%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAACUGCGGGAAGCAGGAAAGAGCACAACAGGUUUCUCUCUAUUUCCGGUGUAUUGUAUCCUCACGUUUCCGGAGAUUGACGUUGCUCUUGUGUUCUCGCGAGAGGCGGGAAAGGGCGCAGGGUUUGAAAC\
) } def
/len { sequence length } bind def

/coor [
[108.17201996 233.52052307]
[106.41768646 218.62347412]
[104.66336060 203.72640991]
[92.84908295 194.72872925]
[90.85772705 179.64598083]
[100.37543488 167.31507874]
[98.62110138 152.41802979]
[96.86677551 137.52096558]
[95.11244202 122.62390900]
[82.15146637 115.07321167]
[68.32715607 120.89458466]
[54.50284576 126.71596527]
[40.67853546 132.53733826]
[26.85422707 138.35871887]
[13.02991581 144.18009949]
[-0.79439455 150.00148010]
[-6.82682562 164.36279297]
[-20.92956924 170.06956482]
[-34.58371735 164.23007202]
[-35.81592178 179.48588562]
[-44.00651932 192.41542053]
[-57.27337265 200.04753113]
[-72.56785583 200.62844849]
[-86.37540436 194.02464294]
[-95.52314758 181.75364685]
[-97.90900421 166.63523865]
[-92.98471832 152.14350891]
[-81.88185120 141.60856628]
[-67.15177155 137.45126343]
[-52.17933273 140.62690735]
[-40.40509796 150.40576172]
[-35.04126740 136.55783081]
[-21.10437775 130.45719910]
[-6.61577225 136.17716980]
[7.20853806 130.35578918]
[21.03284836 124.53440857]
[34.85715866 118.71303558]
[48.68146896 112.89165497]
[62.50577927 107.07027435]
[76.33009338 101.24890137]
[82.95127869 87.78933716]
[79.12563324 73.28538513]
[68.12457275 61.91493225]
[72.36000061 47.63521194]
[68.53436279 33.13126373]
[64.70871735 18.62731743]
[60.88307571 4.12337160]
[57.05743408 -10.38057518]
[53.23179245 -24.88452148]
[49.40615082 -39.38846970]
[45.58050919 -53.89241409]
[30.64907074 -56.86116028]
[18.53664589 -65.98125458]
[11.61344528 -79.40100098]
[11.20504475 -94.43410492]
[17.33890724 -108.09738159]
[28.74954796 -117.70272827]
[24.92390633 -132.20668030]
[11.14352608 -139.94467163]
[6.95141459 -155.18284607]
[14.83467865 -168.88064575]
[30.11631584 -172.91140747]
[43.73000336 -164.88377380]
[47.59897995 -149.56036377]
[39.42785263 -136.03231812]
[43.25349426 -121.52837372]
[57.91720581 -118.80053711]
[69.99205017 -109.94008636]
[77.05136108 -96.66126251]
[77.64766693 -81.57270813]
[71.60917664 -67.66502380]
[60.08445740 -57.71805573]
[63.91009903 -43.21411133]
[67.73574066 -28.71016312]
[71.56137848 -14.20621681]
[75.38702393 0.29773024]
[79.21266174 14.80167675]
[83.03830719 29.30562401]
[86.86394501 43.80957031]
[97.59136963 54.14260483]
[93.62957764 69.45974731]
[97.45522308 83.96369171]
[102.57888031 82.63176727]
[108.24946594 83.01727295]
[113.87316132 85.31475067]
[118.79470825 89.51057434]
[122.37042999 95.36592102]
[137.26748657 97.12025452]
[152.16455078 98.87458038]
[167.06159973 100.62891388]
[181.95866394 102.38323975]
[196.85572815 104.13757324]
[200.96746826 102.17191315]
[205.07083130 101.72379303]
[208.67237854 102.59333801]
[211.40016174 104.43614197]
[213.04145813 106.81797028]
[227.70877075 109.95957184]
[242.37609863 113.10117340]
[257.04342651 116.24278259]
[271.71072388 119.38438416]
[286.37805176 122.52598572]
[300.57357788 115.05155945]
[315.20965576 121.62153625]
[319.05874634 137.19599915]
[309.16818237 149.82756042]
[293.12512207 149.82635498]
[283.23645020 137.19331360]
[268.56912231 134.05171204]
[253.90180969 130.91009521]
[239.23449707 127.76850128]
[224.56716919 124.62689209]
[209.89984131 121.48529053]
[195.10139465 119.03462982]
[180.20433044 117.28029633]
[165.30728149 115.52597046]
[150.41021729 113.77163696]
[135.51316833 112.01731110]
[120.61610413 110.26297760]
[110.00949860 120.86958313]
[111.76383209 135.76663208]
[113.51816559 150.66369629]
[115.27249146 165.56076050]
[127.39435577 175.34329224]
[128.96128845 190.47602844]
[119.56041718 201.97207642]
[121.31475067 216.86914062]
[123.06907654 231.76620483]
[135.62843323 241.35984802]
[137.64266968 257.03524780]
[127.91677856 269.49249268]
[112.22095490 271.34088135]
[99.86724854 261.48382568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[6 123]
[7 122]
[8 121]
[9 120]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[19 31]
[41 82]
[42 81]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[57 66]
[58 65]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[92 114]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
