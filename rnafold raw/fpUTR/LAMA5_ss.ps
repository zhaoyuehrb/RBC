%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCCGCCGGGCUCCCGCCGCGCGCGCUGUCCCUGGAGCUCGGGGACGCGGCCCGGAGCCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[79.63726044 289.79858398]
[64.35681915 290.67419434]
[50.42453766 284.33776855]
[41.04195786 272.24539185]
[38.36511993 257.17578125]
[43.00915146 242.59182739]
[53.90687943 231.84481812]
[68.55408478 227.40434265]
[71.31033325 212.65974426]
[66.04340363 198.72744751]
[76.18473816 186.58398438]
[78.94097900 171.83938599]
[81.69721985 157.09478760]
[84.45346069 142.35018921]
[87.20970917 127.60559845]
[89.96595001 112.86100006]
[83.90060425 97.37380219]
[94.57321930 84.61697388]
[96.64556885 69.76081848]
[98.71791077 54.90465927]
[100.79026031 40.04850388]
[102.86260223 25.19234657]
[89.57729340 32.15657043]
[74.84645844 29.32767868]
[65.08586121 17.93773842]
[64.54654694 2.94743657]
[73.46340942 -9.11446953]
[87.95286560 -12.99463367]
[101.70429230 -7.00311995]
[108.72840118 6.24989653]
[115.41447449 -7.17755318]
[122.10055542 -20.60500336]
[128.78663635 -34.03245163]
[135.47270203 -47.45989990]
[142.15878296 -60.88735199]
[148.84484863 -74.31479645]
[145.13035583 -89.92191315]
[155.12962341 -102.46760559]
[171.17207336 -102.32788086]
[180.95130920 -89.60993195]
[176.96553040 -74.06988525]
[162.27230835 -67.62872314]
[155.58622742 -54.20127487]
[148.90014648 -40.77382660]
[142.21408081 -27.34637642]
[135.52799988 -13.91892719]
[128.84193420 -0.49147773]
[122.15585327 12.93597126]
[117.71875763 27.26469231]
[115.64641571 42.12084961]
[113.57406616 56.97700500]
[111.50172424 71.83316040]
[109.42938232 86.68931580]
[115.95262909 96.59397125]
[114.04325104 108.29907227]
[104.71054840 115.61724091]
[101.95429993 130.36183167]
[99.19805908 145.10643005]
[96.44181824 159.85102844]
[93.68557739 174.59562683]
[90.92932892 189.34022522]
[95.99911499 204.32714844]
[86.05492401 215.41598511]
[83.29868317 230.16058350]
[95.35271454 239.59239197]
[101.63227844 253.55038452]
[100.69437408 268.82711792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 64]
[9 63]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
