%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGCGCGUGCGUAGAGGGGCGGUGAGAGCUAAGAGGGGCAGCGCGUGUGCAGAGGGGCGGUGUGACUUAGGACGGGGCGAUGGCGGCUGAGAGGAGCUGCGCGUGCGCGAACAUGUAACUGGUGGGAUCUGCGGCGGCUCCCAG\
) } def
/len { sequence length } bind def

/coor [
[86.40728760 474.63616943]
[94.77349854 460.53161621]
[94.45511627 445.53500366]
[86.44941711 432.97482300]
[93.89205933 419.01351929]
[93.57368469 404.01690674]
[93.25530243 389.02029419]
[89.94589233 382.35354614]
[93.09272003 373.70275879]
[93.09272003 358.70275879]
[93.09272003 343.70275879]
[89.92556763 336.96728516]
[93.25530243 328.38522339]
[93.57368469 313.38858032]
[93.89205933 298.39196777]
[94.21044159 283.39535522]
[94.52882385 268.39874268]
[94.84720612 253.40211487]
[81.41311646 241.04090881]
[81.20674896 222.46876526]
[94.82028961 209.37170410]
[86.81459045 196.81152344]
[94.25723267 182.85023499]
[93.93885040 167.85360718]
[93.62047577 152.85699463]
[93.30209351 137.86036682]
[72.57378387 126.94573212]
[62.02717590 106.02777100]
[65.57757568 82.87207031]
[50.10638428 84.68315887]
[38.20130539 75.21089935]
[36.57004929 60.45032120]
[24.70213127 51.27685547]
[12.83421040 42.10338974]
[0.96629012 32.92992401]
[-10.90163040 23.75645828]
[-22.25521278 27.55123138]
[-33.90599442 25.38389587]
[-42.94989777 17.91336823]
[-47.19034958 7.10543585]
[-45.67119598 -4.28341198]
[-57.13909149 -13.95230103]
[-68.60698700 -23.62118912]
[-84.14498901 -26.60130882]
[-88.88790894 -40.72058105]
[-100.35580444 -50.38947296]
[-111.82369995 -60.05836105]
[-127.36170197 -63.03847885]
[-132.10462952 -77.15775299]
[-147.64262390 -80.13787079]
[-152.38555908 -94.25714874]
[-168.61523438 -96.60869598]
[-174.44142151 -111.93800354]
[-163.87065125 -124.47557831]
[-147.77722168 -121.32385254]
[-142.71667480 -105.72504425]
[-127.99892426 -103.43650818]
[-122.43573761 -88.62564850]
[-107.71800232 -86.33711243]
[-102.15481567 -71.52625275]
[-90.68692017 -61.85736465]
[-79.21902466 -52.18847656]
[-64.50128174 -49.89994049]
[-58.93809509 -35.08908463]
[-47.47020340 -25.42019463]
[-36.00230789 -15.75130558]
[-17.94528961 -18.43795013]
[-3.36585140 -6.93112469]
[-1.72816467 11.88853836]
[10.13975525 21.06200409]
[22.00767517 30.23546982]
[33.87559509 39.40893555]
[45.74351501 48.58240128]
[60.43885040 46.44167709]
[72.60529327 55.57581329]
[74.75103760 71.00415039]
[86.51984406 63.99229431]
[100.00000000 61.55173111]
[113.48015594 63.99229431]
[125.24896240 71.00415039]
[137.11688232 61.83068085]
[148.98480225 52.65721512]
[160.75469971 43.35831070]
[172.42523193 33.93500900]
[184.09576416 24.51170921]
[195.66563416 14.96507835]
[207.13352966 5.29618931]
[218.60142517 -4.37269926]
[230.06932068 -14.04158783]
[241.53720093 -23.71047592]
[253.00509644 -33.37936401]
[254.09550476 -49.14599228]
[266.06991577 -59.46049881]
[281.82412720 -58.20346451]
[292.01144409 -46.12067032]
[290.58792114 -30.38062286]
[278.39810181 -20.32161331]
[262.67398071 -21.91147041]
[251.20610046 -12.24258232]
[239.73820496 -2.57369399]
[228.27030945 7.09519482]
[216.80241394 16.76408386]
[205.33451843 26.43297195]
[202.22659302 33.19598770]
[193.51905823 36.18224716]
[181.84852600 45.60554504]
[170.17799377 55.02884674]
[166.92721558 61.72436905]
[158.15826416 64.52513885]
[146.29034424 73.69860077]
[134.42242432 82.87207031]
[136.94863892 89.36666107]
[138.26107788 96.21056366]
[138.31661987 103.17895508]
[137.11346436 110.04291534]
[134.69111633 116.57695770]
[131.12916565 122.56644440]
[126.54460907 127.81462097]
[121.08805847 132.14907837]
[114.93875885 135.42742920]
[108.29871368 137.54199219]
[108.61709595 152.53860474]
[108.93547058 167.53523254]
[109.25385284 182.53184509]
[117.28232574 196.16468811]
[109.81690979 209.05331421]
[119.90192413 215.50285339]
[125.53491211 225.92915344]
[125.40413666 237.65876770]
[119.65911865 247.74774170]
[109.84382629 253.72048950]
[109.52544403 268.71710205]
[109.20706177 283.71374512]
[108.88867950 298.71035767]
[108.57030487 313.70697021]
[108.25192261 328.70358276]
[108.09272003 343.70275879]
[108.09272003 358.70275879]
[108.09272003 373.70275879]
[108.25192261 388.70190430]
[108.57030487 403.69851685]
[108.88867950 418.69515991]
[116.91715240 432.32797241]
[109.45173645 445.21661377]
[109.77011871 460.21322632]
[118.72740936 473.95001221]
[111.06935120 488.45126343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[5 142]
[6 141]
[7 140]
[9 139]
[10 138]
[11 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[21 126]
[23 124]
[24 123]
[25 122]
[26 121]
[29 76]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[41 66]
[42 65]
[43 64]
[45 62]
[46 61]
[47 60]
[49 58]
[51 56]
[80 111]
[81 110]
[82 109]
[83 107]
[84 106]
[85 105]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
