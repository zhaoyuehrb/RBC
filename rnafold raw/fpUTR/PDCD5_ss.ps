%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUGGUCAAGGCCGCGCUCGCGCCGAGGGGCUGCGAGAGUGACCGCGGCUGCUCCAGCGCUGACGCCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[76.53195190 219.45516968]
[72.99114227 234.30189514]
[63.35257721 246.13662720]
[49.52998734 252.60955811]
[34.26786041 252.43547058]
[20.59650803 245.64895630]
[11.23038101 233.59745789]
[8.02913475 218.67382812]
[11.62837791 203.84115601]
[21.31347656 192.04447937]
[35.16144943 185.62603760]
[50.42277145 185.86021423]
[57.09229660 172.42454529]
[63.76182556 158.98886108]
[70.14851379 145.41645813]
[76.24956512 131.71327209]
[76.08722687 124.09970093]
[82.90376282 117.57238770]
[89.57328796 104.13671112]
[95.95997620 90.56430817]
[102.06102753 76.86112976]
[107.87376404 63.03318024]
[113.39562988 49.08653259]
[118.91749573 35.13988495]
[124.43936920 21.19323730]
[121.22747040 3.20193505]
[135.09346008 -7.34497309]
[140.02645874 -21.51061821]
[144.95945740 -35.67626572]
[142.19094849 -51.25336075]
[153.68345642 -60.72815704]
[158.61645508 -74.89379883]
[163.54945374 -89.05944824]
[168.48245239 -103.22509003]
[173.41545105 -117.39073944]
[178.34844971 -131.55638123]
[183.28144836 -145.72203064]
[174.31539917 -158.38652039]
[174.53938293 -173.90199280]
[183.86726379 -186.30239868]
[198.71229553 -190.81953430]
[213.36625671 -185.71649170]
[222.19439697 -172.95547485]
[221.80212402 -157.44335938]
[212.34025574 -145.14486694]
[197.44709778 -140.78903198]
[192.51409912 -126.62338257]
[187.58110046 -112.45774078]
[182.64810181 -98.29209137]
[177.71510315 -84.12644958]
[172.78208923 -69.96080017]
[167.84909058 -55.79515457]
[170.97044373 -41.23128128]
[159.12510681 -30.74326515]
[154.19210815 -16.57761955]
[149.25910950 -2.41197324]
[154.26754761 8.80090237]
[150.04463196 20.76277351]
[138.38601685 26.71510696]
[132.86415100 40.66175461]
[127.34227753 54.60840225]
[121.82040405 68.55504608]
[122.30142975 76.15514374]
[115.76420593 82.96217346]
[109.66316223 96.66535950]
[109.49122620 104.98314667]
[103.00896454 110.80624390]
[96.33943939 124.24192047]
[89.95274353 137.81433105]
[83.85169983 151.51750183]
[83.16734314 160.93040466]
[77.19750214 165.65838623]
[70.52797699 179.09407043]
[63.85844803 192.52973938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 74]
[13 73]
[14 72]
[15 70]
[16 69]
[18 68]
[19 67]
[20 65]
[21 64]
[22 62]
[23 61]
[24 60]
[25 59]
[27 56]
[28 55]
[29 54]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
