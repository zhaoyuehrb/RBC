%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGAAUUCGGGCACCAGGAGAAGGAAGCCAACAGGAUCCGACCCGGUGUUUUGUGACAAAGGCAAGACCCCCAGGUCUACUUAGAGCAAAGUUAGUAGAGGAGGCAGCUAGGCGUGGCUCUCAUUCCUUCCCACAGA\
) } def
/len { sequence length } bind def

/coor [
[110.65812683 232.70141602]
[96.50075531 238.07241821]
[81.36643219 238.55300903]
[66.89681244 234.09107971]
[54.66145706 225.17060852]
[45.98756409 212.75923157]
[41.81600952 198.20323181]
[42.59929657 183.08155823]
[48.25245667 169.03446960]
[58.16227722 157.58570862]
[71.25382233 149.97714233]
[86.10700989 147.03410339]
[88.10631561 132.16793823]
[90.10561371 117.30177307]
[79.67772675 106.51941681]
[64.75305939 108.02085876]
[49.82839584 109.52229309]
[34.90372849 111.02372742]
[26.60019112 115.02468872]
[19.63038254 112.38854980]
[4.67596912 113.55710602]
[-3.71464419 117.37208557]
[-10.62399292 114.58132172]
[-21.13331604 126.07879639]
[-36.33375168 126.71234894]
[-47.23006821 116.62245941]
[-62.20680618 117.45755768]
[-77.18354034 118.29265594]
[-86.39313507 127.39813232]
[-98.93740082 127.74266052]
[-108.03047180 119.68858337]
[-123.02209473 120.18980408]
[-136.64862061 129.31393433]
[-151.24217224 121.83326721]
[-151.79016113 105.44328308]
[-137.72885132 97.00457764]
[-123.52332306 105.19818115]
[-108.53170013 104.69696045]
[-94.20714569 94.61901093]
[-78.01863861 103.31592560]
[-63.04190445 102.48082733]
[-48.06516647 101.64572906]
[-38.35812759 90.40700531]
[-23.18148422 89.34674835]
[-11.45909119 99.60458374]
[3.50741220 98.60269165]
[18.46182632 97.43413544]
[33.40229416 96.09906006]
[48.32696152 94.59762573]
[63.25162888 93.09619141]
[78.17629242 91.59474945]
[88.84181213 81.04739380]
[90.50941467 66.14038086]
[92.17702484 51.23336792]
[93.84462738 36.32635117]
[95.51223755 21.41933632]
[97.17984009 6.51232195]
[89.73303223 -4.08349180]
[91.47978210 -16.51032829]
[100.93411255 -24.13710213]
[95.10523224 -38.84542465]
[104.46987152 -50.42785645]
[106.46917725 -65.29402161]
[108.46848297 -80.16017914]
[101.32241058 -88.49468231]
[100.01577759 -99.17307281]
[104.74377441 -108.59027100]
[113.70501709 -113.70236206]
[116.36457825 -128.46470642]
[119.02413940 -143.22705078]
[121.68369293 -157.98939514]
[124.34325409 -172.75172424]
[118.28556824 -187.99102783]
[128.66523743 -200.68727112]
[144.80456543 -197.77963257]
[150.10078430 -182.25926208]
[139.10560608 -170.09216309]
[136.44604492 -155.32983398]
[133.78648376 -140.56748962]
[131.12692261 -125.80514526]
[128.46736145 -111.04280090]
[136.38574219 -93.45416260]
[123.33464813 -78.16087341]
[121.33534241 -63.29471207]
[119.33603668 -48.42855072]
[125.30792236 -34.78355789]
[115.80027771 -22.13779831]
[123.35524750 -6.33652735]
[112.08685303 8.17992783]
[110.41925049 23.08694267]
[108.75164032 37.99395752]
[107.08403778 52.90097046]
[105.41643524 67.80798340]
[103.74882507 82.71500397]
[112.35909271 70.43235779]
[123.93003082 60.88702393]
[138.90957642 61.67004395]
[149.42225647 72.36974335]
[149.94104004 87.36076355]
[140.19393921 98.76119995]
[125.19724274 99.07561493]
[138.50881958 105.98949432]
[151.82041931 112.90336609]
[165.13200378 119.81723785]
[178.44358826 126.73111725]
[191.75517273 133.64498901]
[209.50939941 127.21807098]
[226.07867432 135.59060669]
[231.25633240 153.08793640]
[244.86270142 159.40196228]
[258.46905518 165.71597290]
[272.07543945 172.02999878]
[285.68179321 178.34402466]
[301.95880127 176.34626770]
[311.60995483 189.60473633]
[304.70700073 204.48025513]
[288.35107422 205.67016602]
[279.36776733 191.95039368]
[265.76141357 185.63636780]
[252.15504456 179.32234192]
[238.54867554 173.00831604]
[224.94230652 166.69430542]
[215.24714661 172.88505554]
[203.64549255 173.59738159]
[193.04852295 168.53544617]
[186.17216492 158.86711121]
[184.84129333 146.95657349]
[171.52970886 140.04270935]
[158.21812439 133.12882996]
[144.90653992 126.21495056]
[131.59495544 119.30107880]
[118.28336334 112.38720703]
[104.97177887 119.30107880]
[102.97247314 134.16723633]
[100.97316742 149.03340149]
[114.52107239 155.79603577]
[125.13731384 166.59298706]
[131.67031860 180.25308228]
[133.41143799 195.29460144]
[130.17181396 210.08593750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 135]
[13 134]
[14 133]
[15 51]
[16 50]
[17 49]
[18 48]
[20 47]
[21 46]
[23 45]
[26 42]
[27 41]
[28 40]
[31 38]
[32 37]
[52 94]
[53 93]
[54 92]
[55 91]
[56 90]
[57 89]
[60 87]
[62 85]
[63 84]
[64 83]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[101 132]
[102 131]
[103 130]
[104 129]
[105 128]
[106 127]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
