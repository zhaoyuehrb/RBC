%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGCUGAUGGGGCAACCGCCAACGGCUGUGGCGUUUAAACCCAAGCCGCAGCCGCUGCUGCUCGCCGAGCUCCCGGAGCUGGGUGGGGGUGCCCCACGCUGAAAGAGAGUG\
) } def
/len { sequence length } bind def

/coor [
[121.01313019 332.40545654]
[132.72320557 322.54986572]
[129.44297791 307.91293335]
[126.16276550 293.27597046]
[122.88255310 278.63903809]
[119.60233307 264.00207520]
[115.00550079 258.08169556]
[116.43927765 248.91677856]
[112.00732422 242.87196350]
[113.69309235 233.75003052]
[111.22416687 218.95462036]
[108.75524902 204.15919495]
[106.28633118 189.36376953]
[103.81741333 174.56835938]
[101.34849548 159.77293396]
[98.87957764 144.97752380]
[94.61586761 138.81289673]
[96.55233765 129.74087524]
[94.49203491 114.88304138]
[86.81375885 101.99723053]
[74.72727966 93.11370087]
[61.65127945 96.67279053]
[49.11111450 92.07558441]
[41.65530777 81.23038483]
[41.84823990 68.26642609]
[30.01113319 59.05323410]
[18.17402458 49.84004211]
[6.33691692 40.62685394]
[-5.50019073 31.41366196]
[-17.33729744 22.20047188]
[-29.17440605 12.98728085]
[-41.01151276 3.77409053]
[-52.84862137 -5.43910027]
[-64.68572998 -14.65229130]
[-78.33517456 -7.82181358]
[-93.59665680 -7.59862375]
[-107.44001007 -14.02703571]
[-117.11660767 -25.83068466]
[-120.70516968 -40.66594696]
[-117.49317932 -55.58726883]
[-108.11837769 -67.63201141]
[-94.44213867 -74.40868378]
[-79.17989349 -74.57177734]
[-65.36196899 -68.08889771]
[-55.73192596 -56.24723434]
[-52.20181274 -41.39795685]
[-55.47253799 -26.48939896]
[-43.63542938 -17.27620697]
[-31.79832268 -8.06301689]
[-19.96121597 1.15017354]
[-8.12410736 10.36336422]
[3.71300006 19.57655525]
[15.55010796 28.78974533]
[27.38721466 38.00293732]
[39.22432327 47.21612549]
[51.06143188 56.42931747]
[67.57723236 53.60778046]
[81.33379364 63.74972153]
[83.61080933 81.02722168]
[95.69728851 89.91075134]
[98.93638611 87.38518524]
[103.33978271 86.04330444]
[108.43781281 86.35649109]
[121.42819214 78.85649109]
[134.41857910 71.35649109]
[147.40895081 63.85649109]
[160.39933777 56.35649109]
[173.38972473 48.85649109]
[181.47236633 35.25570297]
[196.36315918 35.59276581]
[209.35354614 28.09276772]
[222.34391785 20.59276772]
[235.33430481 13.09276772]
[248.32469177 5.59276724]
[259.01861572 -7.56308270]
[274.62069702 -0.92898566]
[272.56494141 15.89986610]
[255.82469177 18.58314896]
[242.83430481 26.08314896]
[229.84391785 33.58314896]
[216.85354614 41.08314896]
[203.86315918 48.58314896]
[196.70967102 61.64748383]
[180.88972473 61.84687042]
[167.89933777 69.34687042]
[154.90895081 76.84687042]
[141.91857910 84.34687042]
[128.92819214 91.84687042]
[115.93781281 99.34687042]
[109.34986877 112.82273865]
[111.41017151 127.68056488]
[113.67499542 142.50860596]
[116.14391327 157.30401611]
[118.61283112 172.09944153]
[121.08174896 186.89485168]
[123.55066681 201.69027710]
[126.01959229 216.48570251]
[128.48851013 231.28111267]
[131.16105652 246.04110718]
[134.23928833 260.72186279]
[137.51950073 275.35882568]
[140.79971313 289.99575806]
[144.07992554 304.63269043]
[147.36015320 319.26965332]
[162.15637207 323.18505859]
[173.43035889 333.53665161]
[178.59143066 347.94573975]
[176.45361328 363.10122681]
[167.50816345 375.52044678]
[153.81066895 382.34960938]
[138.50871277 382.01937866]
[125.11859894 374.60565186]
[116.71724701 361.81207275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[8 99]
[10 98]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[18 91]
[19 90]
[20 60]
[21 59]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
