%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUUCGUUCCCAGCAGGCCCUGCGCGCGGCAACAUGGCGGGGUCCAGGUGGAGGUCUUGAGGCUAUCAGAUCGGU\
) } def
/len { sequence length } bind def

/coor [
[120.80157471 240.27923584]
[105.93164062 242.25030518]
[91.31659698 238.87384033]
[78.81815338 230.57992554]
[70.02839661 218.42509460]
[66.06699371 203.95762634]
[67.43855286 189.02046204]
[73.96836853 175.51634216]
[84.82465363 165.16543579]
[98.62449646 159.28630066]
[113.61003876 158.62780762]
[127.87028503 163.27273560]
[120.37028503 150.28236389]
[112.87028503 137.29197693]
[99.80594635 130.13848877]
[99.60655975 114.31854248]
[87.59510040 107.16197205]
[87.40306091 93.18145752]
[79.90306091 80.19107819]
[72.14299011 67.35436249]
[64.12600708 54.67650986]
[56.10901642 41.99865723]
[48.09202957 29.32080460]
[40.07504272 16.64295387]
[32.05805588 3.96510291]
[24.61908913 -1.81329858]
[23.98545837 -9.38860321]
[16.48545837 -22.37898445]
[2.88467383 -30.46163368]
[3.22173643 -45.35242462]
[-11.24315166 -53.07894135]
[-11.51373100 -69.47585297]
[2.68834734 -77.67543030]
[16.75320244 -69.24264526]
[16.21211815 -52.85242462]
[29.27645302 -45.69893265]
[29.47583961 -29.87898445]
[36.97584152 -16.88860321]
[44.73590851 -4.05188465]
[52.75289536 8.62596703]
[60.76988220 21.30381775]
[68.78687286 33.98167038]
[76.80385590 46.65951920]
[84.82084656 59.33737183]
[91.23397827 63.41884232]
[92.89344025 72.69107819]
[100.39344025 85.68145752]
[112.40489960 92.83802795]
[112.59693909 106.81854248]
[126.19772339 114.90119171]
[125.86066437 129.79197693]
[133.36065674 142.78236389]
[140.86065674 155.77273560]
[147.73445129 159.39445496]
[151.06819153 165.57719421]
[164.35002136 172.54804993]
[177.63186646 179.51889038]
[190.91371155 186.48974609]
[204.19554138 193.46058655]
[213.52708435 194.74534607]
[217.86347961 200.98893738]
[230.85385132 208.48893738]
[246.66003418 205.74227905]
[258.56637573 216.49490356]
[257.43933105 232.49832153]
[244.14347839 241.47607422]
[228.87826538 236.54121399]
[223.35385132 221.47932434]
[210.36347961 213.97932434]
[197.22470093 206.74243164]
[183.94285583 199.77159119]
[170.66101074 192.80073547]
[157.37918091 185.82989502]
[144.09733582 178.85903931]
[149.31311035 192.92301941]
[149.25772095 207.92292786]
[143.93821716 221.94799805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 53]
[13 52]
[14 51]
[16 49]
[18 47]
[19 46]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[27 38]
[28 37]
[30 35]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
