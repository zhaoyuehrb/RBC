%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACUUCCGGGCGAAGAGGUUAGCGAGAAGGAACCCCUCCACGCAGCGACGACGGGACCUGACGUCACUUCCGCGCGCCGCCGCAAACGUCAGUGUCGGGCGCAGACGGCGGCAGUGCGGCUUGCUCUUGGAAGUUCAGGCUCGGUUGUCUUUUGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[198.96208191 320.69384766]
[193.32212830 306.79452515]
[187.68218994 292.89523315]
[181.64283752 279.16473389]
[175.20909119 265.61456299]
[168.77536011 252.06440735]
[162.34161377 238.51423645]
[155.90788269 224.96406555]
[149.47415161 211.41390991]
[142.78045654 197.99024963]
[135.82931519 184.69808960]
[128.87815857 171.40592957]
[121.92701721 158.11376953]
[114.97586823 144.82160950]
[108.02471924 131.52944946]
[98.61773682 133.73580933]
[88.62335968 133.09265137]
[78.91487122 129.45384216]
[70.39725494 122.94281006]
[63.92379761 113.95738983]
[49.42869186 117.81639862]
[34.93358612 121.67541504]
[27.40278435 126.93121338]
[20.12189674 125.46623993]
[5.55511284 129.04518127]
[-9.01167107 132.62411499]
[-20.56719208 143.43061829]
[-34.77297592 138.95344543]
[-46.32849503 149.75994873]
[-60.53427887 145.28279114]
[-75.10106659 148.86172485]
[-89.66784668 152.44065857]
[-101.12239075 164.17631531]
[-116.94401550 159.86256409]
[-120.85678101 143.93704224]
[-108.83557892 132.78256226]
[-93.24678802 137.87388611]
[-78.68000031 134.29493713]
[-64.11322021 130.71600342]
[-53.59960938 120.16548920]
[-38.35191345 124.38666534]
[-27.83830643 113.83615112]
[-12.59060955 118.05732727]
[1.97617507 114.47839355]
[16.54295921 110.89945221]
[31.07457924 107.18030548]
[45.56968307 103.32129669]
[60.06478500 99.46228790]
[63.07969666 84.76840210]
[51.27537537 75.51324463]
[39.47105026 66.25807953]
[27.66672897 57.00292587]
[12.03262043 54.57697678]
[6.79082823 40.63520813]
[-5.01349449 31.38005066]
[-16.81781769 22.12489128]
[-33.01315308 17.11017609]
[-32.67773056 0.15954657]
[-16.29668427 -4.21053934]
[-7.56265783 10.32056904]
[4.24166441 19.57572746]
[16.04598808 28.83088684]
[30.83577156 30.59484291]
[36.92188644 45.19860077]
[48.72621155 54.45376205]
[60.53053284 63.70891953]
[72.33485413 72.96408081]
[79.83979797 68.43639374]
[87.92335510 65.84935760]
[96.10958862 65.22333527]
[103.94451141 66.46709442]
[111.02120972 69.38897705]
[119.21906281 56.82732010]
[127.41691589 44.26566315]
[135.61476135 31.70400620]
[143.81262207 19.14234924]
[152.01046753 6.58069229]
[160.08688354 -6.05938053]
[168.04112244 -18.77669716]
[175.99536133 -31.49401283]
[183.94960022 -44.21132660]
[191.90383911 -56.92864227]
[199.85807800 -69.64595795]
[207.81230164 -82.36327362]
[200.72821045 -95.91918945]
[201.37625122 -111.10065460]
[209.48234558 -123.83477020]
[222.78500366 -130.75538635]
[237.66540527 -130.09272766]
[245.61964417 -142.81004333]
[253.57388306 -155.52735901]
[261.52810669 -168.24467468]
[256.53042603 -183.06213379]
[262.27456665 -197.60650635]
[276.04833984 -205.01039124]
[291.34817505 -201.77787781]
[300.94998169 -189.43528748]
[300.32003784 -173.81039429]
[289.75582886 -162.28080750]
[274.24542236 -160.29043579]
[266.29119873 -147.57312012]
[258.33697510 -134.85580444]
[250.38272095 -122.13848877]
[257.49026489 -109.04846954]
[257.08871460 -94.05864716]
[249.18582153 -81.19744110]
[235.81869507 -73.97132111]
[220.52961731 -74.40904236]
[212.57539368 -61.69172287]
[204.62115479 -48.97440720]
[196.66691589 -36.25709152]
[188.71267700 -23.53977585]
[180.75843811 -10.82246017]
[172.80419922 1.89485574]
[171.91912842 9.26873589]
[164.57212830 14.77854443]
[156.37426758 27.34020042]
[148.17642212 39.90185928]
[139.97857666 52.46351624]
[131.78071594 65.02516937]
[123.58286285 77.58683014]
[132.49687195 101.56703949]
[121.31687927 124.57829285]
[128.26802063 137.87045288]
[135.21917725 151.16261292]
[142.17031860 164.45477295]
[149.12147522 177.74693298]
[156.07261658 191.03909302]
[161.50457764 194.94252014]
[163.77279663 200.21913147]
[163.02430725 204.98016357]
[169.45805359 218.53033447]
[175.89178467 232.08050537]
[182.32553101 245.63066101]
[188.75926208 259.18084717]
[195.19299316 272.73098755]
[199.57254028 275.74404907]
[202.07623291 279.74673462]
[202.64328003 283.84555054]
[201.58151245 287.25527954]
[207.22145081 301.15460205]
[212.86138916 315.05392456]
[224.44129944 320.80517578]
[228.83894348 332.53598022]
[224.19964600 343.73999023]
[229.57066345 357.74542236]
[234.94168091 371.75085449]
[240.31269836 385.75628662]
[252.47837830 395.87097168]
[249.81132507 410.52484131]
[255.18235779 424.53027344]
[268.25729370 434.42868042]
[265.95428467 450.66531372]
[250.64245605 456.53732300]
[238.07333374 446.00408936]
[241.17692566 429.90130615]
[235.80589294 415.89587402]
[224.02438354 406.78295898]
[226.30726624 391.12731934]
[220.93624878 377.12188721]
[215.56523132 363.11645508]
[210.19421387 349.11102295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 136]
[5 135]
[6 134]
[7 133]
[8 132]
[9 131]
[10 128]
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[20 48]
[21 47]
[22 46]
[24 45]
[25 44]
[26 43]
[28 41]
[30 39]
[31 38]
[32 37]
[49 67]
[50 66]
[51 65]
[52 64]
[54 62]
[55 61]
[56 60]
[72 121]
[73 120]
[74 119]
[75 118]
[76 117]
[77 116]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[89 103]
[90 102]
[91 101]
[92 100]
[145 162]
[146 161]
[147 160]
[148 159]
[150 157]
[151 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
