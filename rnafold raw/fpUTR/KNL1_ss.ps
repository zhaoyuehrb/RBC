%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUUGAAUACUUCACUGAGGCGAGCCGGGCGUUGUGAGCGGACUGCUAGAGGCGGCUGUCUGUUUCCGCUCUAAGGAAACUCAGAGCGUGUGGACCCCAAACAAGUCUGCGCAAAAUUUGUCGAGGAGGUUUGCCGCGGCAGAAAAGUUUUCUUCAAAA\
) } def
/len { sequence length } bind def

/coor [
[111.92922211 600.40441895]
[122.62174988 588.76629639]
[121.74958038 573.79168701]
[109.13220978 565.92150879]
[103.50191498 551.96569824]
[107.21227264 537.19793701]
[119.04364777 527.33264160]
[118.17147827 512.35797119]
[117.29930115 497.38336182]
[116.42713165 482.40875244]
[105.16441345 472.72955322]
[104.06658173 457.55560303]
[114.29537201 445.80783081]
[113.42320251 430.83322144]
[112.55102539 415.85858154]
[102.12546539 401.76821899]
[110.46094513 385.37420654]
[109.29856110 370.41931152]
[108.13616943 355.46441650]
[99.43586731 343.37500000]
[106.08049774 329.01675415]
[104.91810608 314.06185913]
[103.75572205 299.10696411]
[102.59333801 284.15206909]
[101.43094635 269.19717407]
[100.26856232 254.24227905]
[99.10617828 239.28738403]
[97.94379425 224.33248901]
[89.56996155 218.37234497]
[85.80494690 208.57215881]
[88.12952423 198.10853577]
[96.00688934 190.51858521]
[87.78190613 178.10090637]
[94.97827911 164.01109314]
[94.39664459 149.02238464]
[93.81501770 134.03366089]
[70.91661072 118.72700500]
[66.45760345 91.54708862]
[53.05311584 84.81510162]
[39.64862442 78.08311462]
[26.24413681 71.35112000]
[12.83964729 64.61913300]
[-0.56484270 57.88714981]
[-13.96933270 51.15515900]
[-27.37382126 44.42317200]
[-43.17860031 45.14397049]
[-51.07961273 32.51767731]
[-64.48410034 25.78569031]
[-77.88858795 19.05370140]
[-92.80997467 24.26214409]
[-107.00740051 17.31890869]
[-112.05780029 2.34329247]
[-104.96484375 -11.77993584]
[-89.93666840 -16.67171669]
[-75.88922119 -9.42984104]
[-71.15660095 5.64921236]
[-57.75211334 12.38119984]
[-44.34762573 19.11318779]
[-29.50162506 17.91087341]
[-20.64183426 31.01868248]
[-7.23734474 37.75067139]
[6.16714525 44.48265839]
[19.57163429 51.21464539]
[32.97612381 57.94663239]
[46.38061523 64.67861938]
[59.78510284 71.41060638]
[73.18959045 78.14259338]
[77.93775940 70.83959961]
[84.68745422 64.63158417]
[93.16701508 60.06458664]
[92.29484558 45.08996582]
[91.42266846 30.11534309]
[90.55049896 15.14072037]
[89.67832947 0.16609807]
[81.15171051 -13.16084290]
[88.13589478 -26.31646538]
[87.26371765 -41.29108810]
[77.80507660 -54.68758392]
[84.92220306 -69.46183777]
[101.29360199 -70.41536713]
[110.07778931 -56.56725693]
[102.23834229 -42.16326141]
[103.11051178 -27.18863869]
[111.57475281 -14.93278313]
[104.65294647 -0.70607436]
[105.52512360 14.26854801]
[106.39729309 29.24316978]
[107.26946259 44.21779251]
[108.14163971 59.19241333]
[122.08184814 64.73050690]
[132.99246216 54.43688202]
[143.90306091 44.14325714]
[154.81365967 33.84963226]
[165.72427368 23.55600929]
[176.63487244 13.26238441]
[187.54547119 2.96876001]
[198.45608521 -7.32486439]
[195.51557922 -22.46940231]
[201.25085449 -36.79107285]
[213.83178711 -45.71987915]
[229.24386597 -46.40667725]
[242.56912231 -38.63230896]
[249.55554199 -24.87754440]
[247.97378540 -9.53148556]
[238.32856750 2.50900126]
[223.69764709 7.40183830]
[208.74971008 3.58574009]
[197.83909607 13.87936497]
[186.92849731 24.17298889]
[176.01789856 34.46661377]
[165.10728455 44.76023865]
[154.19668579 55.05386353]
[143.28608704 65.34748840]
[132.37547302 75.64111328]
[135.96305847 82.66427612]
[138.07551575 90.14253998]
[138.67437744 97.77446747]
[137.78132629 105.26128387]
[135.47552490 112.31855774]
[131.88899231 118.68701172]
[127.19980621 124.14204407]
[121.62371063 128.50157166]
[115.40455627 131.63198853]
[108.80373383 133.45202637]
[109.38536835 148.44075012]
[109.96699524 163.42947388]
[118.23358154 176.91925049]
[110.99560547 189.93696594]
[122.52497864 206.43345642]
[112.89868164 223.17010498]
[114.06107330 238.12500000]
[115.22345734 253.07987976]
[116.38584137 268.03479004]
[117.54823303 282.98968506]
[118.71061707 297.94458008]
[119.87300110 312.89947510]
[121.03539276 327.85437012]
[129.81883240 341.01345825]
[123.09106445 354.30203247]
[124.25344849 369.25692749]
[125.41584015 384.21182251]
[134.70867920 393.20272827]
[135.34370422 405.71545410]
[127.52565002 414.98641968]
[128.39782715 429.96105957]
[129.26998901 444.93566895]
[140.79344177 455.41650391]
[141.46463013 470.61532593]
[131.40174866 481.53659058]
[132.27392578 496.51119995]
[133.14610291 511.48580933]
[134.01826477 526.46044922]
[146.91494751 534.88555908]
[152.31465149 549.12268066]
[148.34259033 563.63775635]
[136.72419739 572.91949463]
[137.59637451 587.89410400]
[149.56770325 598.21221924]
[150.65341187 613.97912598]
[140.20933533 625.84069824]
[124.43178558 626.75964355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 157]
[3 156]
[7 152]
[8 151]
[9 150]
[10 149]
[13 146]
[14 145]
[15 144]
[17 141]
[18 140]
[19 139]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[26 132]
[27 131]
[28 130]
[32 128]
[34 126]
[35 125]
[36 124]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[47 58]
[48 57]
[49 56]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[76 83]
[77 82]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
