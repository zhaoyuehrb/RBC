%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGCGCGCGGCCGGGCGGGCGGCCAUGGCGCGGCACGCUGGGAGGUAGCGCGGCGGCUGCAGGAGCGCACAGUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[85.19605255 254.14372253]
[77.81980133 240.85240173]
[76.09637451 225.74948120]
[80.28857422 211.13804626]
[89.75713348 199.24624634]
[103.05815125 191.88748169]
[93.91229248 180.13153076]
[100.01589203 165.53506470]
[98.29563904 150.63403320]
[96.57538605 135.73300171]
[94.85513306 120.83197021]
[77.99279785 109.77463531]
[76.47341156 87.36933899]
[61.64920425 85.07960510]
[46.82499695 82.78986359]
[32.00078964 80.50012207]
[17.13544273 78.49475861]
[2.23441219 76.77451324]
[-12.66661930 75.05426025]
[-26.07973862 83.85583496]
[-41.27851868 78.72002411]
[-46.60375977 63.58656693]
[-37.97038651 50.06457138]
[-22.00119019 48.52694321]
[-10.94636726 60.15322876]
[3.95466375 61.87347794]
[18.85569572 63.59373093]
[26.04351044 61.17059708]
[34.29052734 65.67591858]
[49.11473465 67.96566010]
[63.93894196 70.25539398]
[78.76314545 72.54513550]
[92.33065796 66.14804840]
[99.99593353 53.25450516]
[107.66121674 40.36096191]
[115.32649994 27.46741676]
[122.99177551 14.57387257]
[124.76307678 5.34491062]
[131.20568848 1.34128869]
[139.35920715 -11.24919319]
[147.51271057 -23.83967400]
[155.66622925 -36.43015671]
[163.81974792 -49.02063751]
[164.82664490 -64.80976868]
[178.23919678 -71.28685760]
[174.68888855 -86.68721008]
[183.13885498 -100.04286957]
[198.57588196 -103.43015289]
[211.84146118 -94.83945465]
[215.06535339 -79.36747742]
[206.33488464 -66.19347382]
[190.82968140 -63.13334274]
[190.40597534 -48.24476624]
[176.41021729 -40.86712265]
[168.25671387 -28.27664185]
[160.10319519 -15.68616104]
[151.94967651 -3.09567952]
[143.79617310 9.49480152]
[135.88531494 22.23915291]
[128.22004700 35.13269806]
[120.55476379 48.02624130]
[112.88948059 60.91978455]
[105.22419739 73.81333160]
[116.35822296 80.23835754]
[122.80541229 90.76378632]
[123.41414642 102.57950592]
[118.52136230 112.78738403]
[109.75616455 119.11171722]
[111.47641754 134.01275635]
[113.19667053 148.91378784]
[114.91692352 163.81481934]
[124.18582153 176.63659668]
[117.95918274 190.16723633]
[132.58703613 194.30174255]
[144.51611328 203.72328186]
[151.92730713 216.99516296]
[153.69046021 232.09349060]
[149.53672791 246.71591187]
[140.09948730 258.63256836]
[126.81787872 266.02630615]
[111.71723175 267.76959229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 73]
[8 71]
[9 70]
[10 69]
[11 68]
[13 32]
[14 31]
[15 30]
[16 29]
[17 27]
[18 26]
[19 25]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
