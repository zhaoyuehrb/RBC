%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCAGGGGGAGCGAGGAGGAAGGGAACCGCGGCCGGGCCAGCGGAGGCGGCGGAGCGCACCGCCCACCAGGGCUCAGGGUCCUCCGACCGGGUGAAGCUUCGCUGGCUGCCAGGAUCCCCGGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[98.50382996 346.82232666]
[98.14138031 331.82672119]
[90.09880066 319.29013062]
[97.50037384 305.30703735]
[97.13791656 290.31140137]
[88.56733704 281.68527222]
[88.20127106 269.12844849]
[96.78669739 259.41430664]
[96.78669739 244.41429138]
[96.78669739 229.41429138]
[96.78669739 214.41429138]
[96.78669739 199.41429138]
[89.04939270 186.68702698]
[96.78669739 172.88684082]
[86.10581970 162.56916809]
[85.89214325 147.35704041]
[96.78669739 136.22390747]
[96.78669739 121.22390747]
[89.59531403 134.38764954]
[85.44808960 148.80293274]
[74.38574982 158.93331909]
[59.66205978 161.79913330]
[45.60770416 156.55744934]
[36.35650635 144.75003052]
[34.62952805 129.84977722]
[40.93471909 116.23931885]
[53.41753387 107.92190552]
[68.40828705 107.34440613]
[82.91052246 103.51228333]
[68.34638977 99.92254639]
[53.78226471 96.33280945]
[39.21813965 92.74307251]
[24.61170006 89.32957458]
[9.96508408 86.09281158]
[-4.68153191 82.85604858]
[-21.45221519 85.34210968]
[-28.48370743 69.91503906]
[-15.60604382 58.88770676]
[-1.44476914 68.20943451]
[13.20184708 71.44619751]
[27.84846306 74.68296051]
[35.13227081 73.03776550]
[42.80787277 78.17894745]
[57.37200165 81.76868439]
[71.93612671 85.35842133]
[86.50025177 88.94815063]
[100.64993286 83.96953583]
[109.75737000 72.05087280]
[111.98843384 56.38776398]
[125.86383820 50.97275543]
[134.97128296 39.05408859]
[144.07872009 27.13542366]
[153.18615723 15.21675968]
[162.29359436 3.29809403]
[171.40103149 -8.62057114]
[180.50846863 -20.53923607]
[189.61590576 -32.45790100]
[198.72334290 -44.37656784]
[200.61764526 -62.64574432]
[216.98724365 -68.84931183]
[225.80401611 -80.98456573]
[234.62080383 -93.11981964]
[243.43757629 -105.25507355]
[249.59376526 -118.93357086]
[252.83053589 -133.58018494]
[256.06729126 -148.22680664]
[259.30404663 -162.87342834]
[253.84899902 -178.33868408]
[264.71887207 -190.61785889]
[280.73165894 -187.07917786]
[285.41479492 -171.36294556]
[273.95068359 -159.63665771]
[270.71392822 -144.99005127]
[267.47714233 -130.34342957]
[264.24038696 -115.69680786]
[270.41278076 -111.43632507]
[278.93392944 -123.78094482]
[291.27841187 -115.25955963]
[282.75753784 -102.91535187]
[288.92990112 -98.65486908]
[301.47695923 -106.87505341]
[314.02401733 -115.09524536]
[326.57104492 -123.31542969]
[333.47009277 -138.19277954]
[349.82568359 -139.38702393]
[358.81262207 -125.66962433]
[351.18591309 -111.15187073]
[334.79125977 -110.76837921]
[322.24420166 -102.54819489]
[309.69714355 -94.32800293]
[297.15008545 -86.10781860]
[270.74893188 -83.40633392]
[255.57283020 -96.43830109]
[246.75605774 -84.30303955]
[237.93927002 -72.16778564]
[229.12249756 -60.03253174]
[230.69502258 -47.97466278]
[223.36186218 -37.77503586]
[210.64199829 -35.26913071]
[201.53456116 -23.35046387]
[192.42712402 -11.43179893]
[183.31968689 0.48686653]
[174.21224976 12.40553188]
[165.10481262 24.32419777]
[155.99737549 36.24286270]
[146.88993835 48.16152573]
[137.78250122 60.08019257]
[136.20286560 74.89080048]
[121.67603302 81.15830994]
[112.56859589 93.07697296]
[118.55998993 105.34085083]
[111.78669739 121.22390747]
[111.78669739 136.22390747]
[122.68125153 147.35704041]
[122.46756744 162.56916809]
[111.78669739 172.88684082]
[119.52399445 186.68702698]
[111.78669739 199.41429138]
[111.78669739 214.41429138]
[111.78669739 229.41429138]
[111.78669739 244.41429138]
[111.78669739 259.41430664]
[121.37387848 275.08071899]
[112.13353729 289.94894409]
[112.49599457 304.94458008]
[120.56449890 318.55374146]
[113.13699341 331.46426392]
[113.49945068 346.45989990]
[116.15499115 365.65878296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[4 125]
[5 124]
[8 122]
[9 121]
[10 120]
[11 119]
[12 118]
[14 116]
[17 113]
[18 112]
[29 46]
[30 45]
[31 44]
[32 43]
[33 41]
[34 40]
[35 39]
[47 110]
[48 109]
[50 107]
[51 106]
[52 105]
[53 104]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[60 96]
[61 95]
[62 94]
[63 93]
[64 75]
[65 74]
[66 73]
[67 72]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
