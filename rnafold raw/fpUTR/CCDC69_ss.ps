%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUUUCAGGGUCUCGCCGGCAGCCCCAGCCGGCGGGCGCGGAGCGGGCAGCGGGGCCCGGAUCGCAGGCUCCUCUGGGGGCCCCGGAGUUGGGAAGCGGCGUCCGGGAGCCCCCGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[135.01954651 143.50650024]
[132.28170776 158.25453186]
[123.60989380 170.49378967]
[110.60381317 177.96653748]
[95.66268921 179.29425049]
[81.54270935 174.23200989]
[70.84859467 163.71365356]
[65.55307007 149.67950439]
[66.63301849 134.71842957]
[73.88920593 121.59030151]
[85.98030090 112.71810913]
[71.78656006 117.56967926]
[57.59282303 122.42124939]
[50.38594818 128.22212219]
[42.97764206 127.21098328]
[28.66555214 131.70143127]
[14.35346222 136.19187927]
[0.04137370 140.68232727]
[-14.27071476 145.17276001]
[-28.58280373 149.66320801]
[-42.89489365 154.15365601]
[-48.73200226 168.66098022]
[-62.55287170 175.97654724]
[-77.83170319 172.64619446]
[-87.35430908 160.24240112]
[-86.62439728 144.62187195]
[-75.98661041 133.16012573]
[-60.46379471 131.26905823]
[-47.38533783 139.84156799]
[-33.07324982 135.35112000]
[-18.76116180 130.86067200]
[-4.44907331 126.37023163]
[9.86301613 121.87978363]
[24.17510414 117.38933563]
[38.48719406 112.89888763]
[52.74125290 108.22750854]
[66.93498993 103.37593842]
[81.12873077 98.52436829]
[86.69297791 84.59457397]
[79.74802399 71.29917145]
[72.80307770 58.00377274]
[65.85813141 44.70837021]
[51.04703140 39.88455582]
[44.19326401 26.30219650]
[48.88330841 12.21180820]
[41.93836212 -1.08359265]
[34.99341202 -14.37899303]
[28.04846001 -27.67439270]
[21.10351181 -40.96979523]
[5.95088482 -45.46128082]
[-1.51414299 -59.39142609]
[3.13729644 -74.49571991]
[17.14558601 -81.81304932]
[32.19985580 -77.00218201]
[39.36867523 -62.91730881]
[34.39891052 -47.91474533]
[41.34386063 -34.61934280]
[48.28881073 -21.32394218]
[55.23376083 -8.02854252]
[62.17871094 5.26685810]
[76.42285919 9.46683121]
[83.65542603 22.85132408]
[79.15352631 37.76342392]
[86.09848022 51.05882263]
[93.04342651 64.35422516]
[99.98838043 77.64962769]
[105.80740356 81.26021576]
[109.55697632 86.07675934]
[111.11161041 91.22890472]
[110.66331482 95.89853668]
[125.49034119 98.16995239]
[140.31736755 100.44136810]
[155.14439392 102.71278381]
[169.97142029 104.98419952]
[184.79844666 107.25561523]
[199.62547302 109.52703094]
[214.45248413 111.79844666]
[229.27951050 114.06987000]
[244.10653687 116.34128571]
[258.93356323 118.61270142]
[273.76058960 120.88411713]
[288.58761597 123.15553284]
[303.44223022 125.23894501]
[318.32202148 127.13402557]
[333.20184326 129.02909851]
[348.08163452 130.92417908]
[362.96145630 132.81925964]
[377.84124756 134.71434021]
[392.74389648 136.42077637]
[407.66693115 137.93830872]
[422.58996582 139.45582581]
[437.51300049 140.97335815]
[450.80523682 131.99024963]
[466.07241821 136.91897583]
[471.60290527 151.97863770]
[463.15414429 165.61674500]
[447.20733643 167.37132263]
[435.99548340 155.89639282]
[421.07244873 154.37887573]
[406.14938354 152.86134338]
[391.22634888 151.34382629]
[384.17324829 153.82554626]
[375.94619751 149.59414673]
[361.06637573 147.69906616]
[346.18655396 145.80398560]
[331.30676270 143.90892029]
[316.42694092 142.01383972]
[301.54714966 140.11875916]
[294.43341064 142.42102051]
[286.31619263 137.98255920]
[271.48916626 135.71113586]
[256.66213989 133.43972778]
[241.83512878 131.16830444]
[227.00810242 128.89689636]
[212.18107605 126.62547302]
[197.35404968 124.35405731]
[182.52702332 122.08264160]
[167.69999695 119.81122589]
[152.87297058 117.53981018]
[138.04594421 115.26839447]
[123.21892548 112.99697113]
[108.39189911 110.72555542]
[121.86096954 117.32739258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 38]
[12 37]
[13 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[39 66]
[40 65]
[41 64]
[42 63]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[70 122]
[71 121]
[72 120]
[73 119]
[74 118]
[75 117]
[76 116]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
