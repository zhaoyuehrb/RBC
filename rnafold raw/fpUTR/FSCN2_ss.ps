%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCAGGGGGUUCGUGACGCCGGCUGGGUCUGGGGGCUGUGGGCCAGCCGAGCCGACCCGGGCUUCUGGGGGACCGCGGGGGCCGUGAGCACUCAGAGGGCGCAUCCCAGGCCCCUCCGGGGACCCGGCCAGCCUGAAG\
) } def
/len { sequence length } bind def

/coor [
[119.41747284 196.19436646]
[129.14443970 183.43640137]
[128.48092651 168.45108032]
[127.81743622 153.46575928]
[127.15393066 138.48043823]
[126.49043274 123.49512482]
[119.39964294 121.05162048]
[105.21806335 116.16461182]
[98.12727356 113.72110748]
[88.37294769 125.11641693]
[85.27677155 140.63171387]
[71.12244415 145.26896667]
[61.36811066 156.66427612]
[51.61378098 168.05958557]
[45.90709686 184.02423096]
[28.98658180 182.96002197]
[25.32513809 166.40617371]
[40.21847534 158.30525208]
[49.97280502 146.90994263]
[59.72713852 135.51463318]
[62.12561417 120.81441498]
[76.97763824 115.36208344]
[86.73197174 103.96677399]
[94.03956604 90.86719513]
[98.61164856 76.58097839]
[103.18373871 62.29475784]
[107.75582123 48.00854111]
[112.32791138 33.72232056]
[116.89999390 19.43610382]
[121.47208405 5.14988565]
[126.04416656 -9.13633251]
[130.61625671 -23.42255020]
[135.18833923 -37.70876694]
[139.12402344 -52.18324280]
[142.41560364 -66.81763458]
[145.70718384 -81.45203400]
[148.99876404 -96.08642578]
[152.29034424 -110.72082520]
[155.58190918 -125.35521698]
[158.87348938 -139.98960876]
[157.70143127 -149.13020325]
[162.40315247 -154.90963745]
[166.01766968 -169.46763611]
[169.63218689 -184.02563477]
[173.24668884 -198.58363342]
[162.19895935 -211.34162903]
[160.91584778 -228.00318909]
[169.70390320 -242.02149963]
[184.95111084 -248.00573730]
[188.24269104 -262.64013672]
[191.53427124 -277.27453613]
[179.17224121 -291.21743774]
[182.63348389 -312.69903564]
[175.32589722 -325.79861450]
[168.01831055 -338.89819336]
[160.71070862 -351.99777222]
[145.44041443 -356.07128906]
[137.59550476 -369.79107666]
[141.83021545 -385.01745605]
[155.63218689 -392.71688843]
[170.81295776 -388.32141113]
[178.36601257 -374.43881226]
[173.81030273 -359.30535889]
[181.11788940 -346.20578003]
[188.42547607 -333.10620117]
[195.73307800 -320.00662231]
[210.73216248 -319.84069824]
[218.32774353 -332.77542114]
[225.92333984 -345.71014404]
[233.51893616 -358.64483643]
[241.11453247 -371.57955933]
[248.71012878 -384.51428223]
[249.02616882 -400.33233643]
[262.14291382 -407.38928223]
[258.38589478 -422.50625610]
[266.27316284 -435.51568604]
[280.70803833 -439.00427246]
[288.30361938 -451.93899536]
[295.89923096 -464.87371826]
[303.49481201 -477.80844116]
[311.09039307 -490.74313354]
[313.89706421 -507.46316528]
[330.74063110 -509.39474487]
[337.25949097 -493.74417114]
[324.02511597 -483.14755249]
[316.42953491 -470.21282959]
[308.83392334 -457.27810669]
[301.23834229 -444.34338379]
[293.64276123 -431.40869141]
[297.62841797 -417.10308838]
[290.10968018 -403.87722778]
[275.07763672 -399.79370117]
[275.30487061 -384.90081787]
[261.64483643 -376.91870117]
[254.04925537 -363.98397827]
[246.45365906 -351.04925537]
[238.85806274 -338.11453247]
[231.26246643 -325.17980957]
[223.66687012 -312.24508667]
[225.47700500 -285.81478882]
[206.16865540 -273.98294067]
[202.87709045 -259.34854126]
[199.58551025 -244.71415710]
[209.31901550 -235.51266479]
[213.24711609 -222.59379578]
[210.23513794 -209.31987000]
[200.96945190 -199.20147705]
[187.80468750 -194.96911621]
[184.19017029 -180.41111755]
[180.57566833 -165.85311890]
[176.96115112 -151.29512024]
[173.50788879 -136.69802856]
[170.21630859 -122.06363678]
[166.92472839 -107.42924500]
[163.63314819 -92.79485321]
[160.34158325 -78.16045380]
[157.05000305 -63.52605820]
[153.75842285 -48.89166641]
[155.21907043 -46.41108704]
[155.74487305 -43.18026733]
[155.03639221 -39.56758118]
[152.93876648 -36.04578400]
[149.47456360 -33.13668060]
[144.90246582 -18.85046387]
[140.33038330 -4.56424618]
[135.75830078 9.72197151]
[131.18621826 24.00819016]
[126.61412811 38.29440689]
[122.04203796 52.58062744]
[117.46995544 66.86684418]
[112.89786530 81.15306091]
[108.32578278 95.43927765]
[128.41888428 100.02945709]
[141.47575378 122.83162689]
[142.13925171 137.81694031]
[142.80274963 152.80226135]
[143.46624756 167.78758240]
[144.12974548 182.77290344]
[154.94619751 194.62127686]
[152.28451538 210.44198608]
[138.18650818 218.09873962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 138]
[3 137]
[4 136]
[5 135]
[6 134]
[9 23]
[10 22]
[12 20]
[13 19]
[14 18]
[24 132]
[25 131]
[26 130]
[27 129]
[28 128]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[34 118]
[35 117]
[36 116]
[37 115]
[38 114]
[39 113]
[40 112]
[42 111]
[43 110]
[44 109]
[45 108]
[49 103]
[50 102]
[51 101]
[53 66]
[54 65]
[55 64]
[56 63]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[72 94]
[74 92]
[77 89]
[78 88]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
