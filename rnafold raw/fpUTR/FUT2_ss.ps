%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACCGAUGCUGGAAGGGUUUCUUUGGCCCUGAGUGAAGAGAGACCCAGAGGGAACACUGAGGUGCCUGCCCAACCACUCUGUCCCGGUUUCCUUCAGCAGGACCAGGUGAGAGAAGCC\
) } def
/len { sequence length } bind def

/coor [
[-3.73494458 419.82589722]
[-5.14309597 431.30123901]
[-10.75704384 441.34896851]
[-19.71053886 448.49880981]
[-30.65204811 451.72146606]
[-41.94871140 450.57678223]
[-49.67060471 463.43652344]
[-57.39249420 476.29623413]
[-57.13285065 492.69332886]
[-71.34039307 500.88342285]
[-85.39962006 492.44125366]
[-84.84761047 476.05139160]
[-70.25221252 468.57434082]
[-62.53032303 455.71463013]
[-54.80842972 442.85488892]
[-63.12998581 426.25582886]
[-59.87775421 407.82458496]
[-46.16285706 394.87304688]
[-27.28222847 392.64581299]
[-20.57582283 379.22851562]
[-13.86941528 365.81118774]
[-7.16300869 352.39389038]
[-0.45660171 338.97659302]
[6.24980497 325.55929565]
[12.95621204 312.14196777]
[19.66261864 298.72467041]
[25.49196625 284.90371704]
[30.42010117 270.73638916]
[35.34823608 256.56903076]
[32.22188950 242.00624084]
[44.06362534 231.51416016]
[48.99176407 217.34681702]
[53.91989899 203.17947388]
[58.84803391 189.01214600]
[53.85205841 177.91401672]
[57.93355942 166.02171326]
[69.40264893 159.95318604]
[74.69392395 145.91743469]
[79.98520660 131.88166809]
[85.27648926 117.84592438]
[90.56777191 103.81017303]
[90.24446106 95.65240479]
[96.18021393 89.48406982]
[101.83113861 75.58921051]
[107.48205566 61.69435120]
[113.13297272 47.79949188]
[118.78388977 33.90463257]
[124.43480682 20.00977325]
[129.36294556 5.84243393]
[133.55523682 -8.55981350]
[137.74751282 -22.96206284]
[141.93980408 -37.36431122]
[146.13208008 -51.76655960]
[150.13859558 -66.22158813]
[153.95866394 -80.72700500]
[148.31202698 -87.23010254]
[145.79452515 -95.36716461]
[146.76049805 -103.73431396]
[150.96998596 -110.91994476]
[157.64244080 -115.74284363]
[165.60029602 -117.44618988]
[170.89158630 -131.48194885]
[171.00447083 -140.73736572]
[176.50402832 -145.80804443]
[182.15495300 -159.70291138]
[187.80586243 -173.59776306]
[185.02595520 -189.75956726]
[197.80387878 -200.03852844]
[212.99479675 -193.86050415]
[214.97160339 -177.58093262]
[201.70072937 -167.94683838]
[196.04980469 -154.05198669]
[190.39889526 -140.15711975]
[184.92733765 -126.19066620]
[179.63604736 -112.15490723]
[185.50024414 -91.36721802]
[168.46408081 -76.90693665]
[164.64401245 -62.40151978]
[165.99928284 -55.04487228]
[160.53433228 -47.57427216]
[156.34204102 -33.17202377]
[152.14976501 -18.76977730]
[147.95747375 -4.36752939]
[143.76519775 10.03471851]
[145.10826111 12.62403393]
[145.44317627 15.93168926]
[144.47901917 19.55188370]
[142.08650208 22.97710419]
[138.32966614 25.66069031]
[132.67875671 39.55554962]
[127.02783203 53.45040894]
[121.37691498 67.34526825]
[115.72599792 81.24012756]
[110.07508087 95.13498688]
[104.60352325 109.10145569]
[99.31224060 123.13720703]
[94.02095795 137.17295837]
[88.72968292 151.20870972]
[83.43840027 165.24446106]
[86.88865662 183.27636719]
[73.01537323 193.94027710]
[68.08723450 208.10762024]
[63.15909958 222.27494812]
[58.23096466 236.44229126]
[61.00482178 252.01843262]
[49.51557541 261.49716187]
[44.58744049 275.66452026]
[39.65930557 289.83184814]
[54.26382828 286.41018677]
[66.20616913 295.48657227]
[66.81944275 310.47402954]
[55.65858841 320.49575806]
[40.82332993 318.27874756]
[33.07992554 305.43109131]
[26.37351799 318.84838867]
[19.66711235 332.26568604]
[12.96070480 345.68298340]
[6.25429773 359.10031128]
[-0.45210928 372.51760864]
[-7.15851593 385.93490601]
[-13.86492348 399.35223389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 15]
[7 14]
[8 13]
[19 121]
[20 120]
[21 119]
[22 118]
[23 117]
[24 116]
[25 115]
[26 114]
[27 108]
[28 107]
[29 106]
[31 104]
[32 103]
[33 102]
[34 101]
[37 99]
[38 98]
[39 97]
[40 96]
[41 95]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 84]
[50 83]
[51 82]
[52 81]
[53 80]
[54 78]
[55 77]
[61 75]
[62 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
