%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGGCGGGCGGGUACUUAAGGCGCGGCCACCGCGGCUGCGGCAGUGCGCCCAACAGCGGACUCCGAGACCAGCGGAUCUCGGCAAACCCUCUUUCUCGACCACCCACCUACCAUUCUUGGAACC\
) } def
/len { sequence length } bind def

/coor [
[167.50254822 292.81271362]
[162.06358337 278.83352661]
[156.62460327 264.85433960]
[151.18563843 250.87515259]
[145.74665833 236.89598083]
[140.30769348 222.91679382]
[126.61252594 217.17413330]
[120.89749908 203.07473755]
[127.01377869 188.74893188]
[121.57480621 174.76974487]
[115.96335602 160.85890198]
[110.18027496 147.01852417]
[104.39720154 133.17814636]
[98.61412811 119.33776855]
[100.35665894 134.23620605]
[92.61481476 147.08392334]
[78.62843323 152.50434875]
[64.25057983 148.22914124]
[55.49816513 136.04737854]
[56.03392410 121.05695343]
[65.63365173 109.53110504]
[80.28128052 106.29335785]
[66.02929688 113.16297150]
[53.80454254 104.65387726]
[38.83321762 103.72683716]
[23.86189270 102.79978943]
[8.89056778 101.87274933]
[-6.08075809 100.94570160]
[-21.05208397 100.01866150]
[-36.02341080 99.09161377]
[-48.95053482 108.59261322]
[-64.40045166 104.27061462]
[-70.52130127 89.44109344]
[-62.61769867 75.47998810]
[-46.75260544 73.09705353]
[-35.09636307 84.12028503]
[-20.12503815 85.04733276]
[-5.15371323 85.97438049]
[9.81761169 86.90142059]
[24.78893852 87.82846832]
[39.76026154 88.75550842]
[54.73159027 89.68255615]
[67.91271973 82.74662781]
[81.20832062 91.32202911]
[89.59963226 78.88877106]
[83.13917542 65.35132599]
[76.67871857 51.81387711]
[63.75213623 42.69170380]
[65.25342560 27.87294960]
[58.79296875 14.33550262]
[52.33251190 0.79805464]
[37.35190201 -4.23751688]
[30.39462090 -18.42807007]
[35.58829498 -33.35459900]
[49.85161209 -40.16146088]
[64.72239685 -34.81026459]
[71.37807465 -20.47578049]
[65.86995697 -5.66240263]
[72.33041382 7.87504530]
[78.79087067 21.41249275]
[91.25535583 29.56637764]
[90.21616364 45.35342026]
[96.67662048 58.89086533]
[103.13708496 72.42831421]
[118.11872864 73.17012024]
[125.88490295 60.33709335]
[133.65107727 47.50406647]
[141.41725159 34.67104340]
[149.18342590 21.83801651]
[156.94958496 9.00498962]
[164.55645752 -3.92310762]
[172.00282288 -16.94429970]
[174.61706543 -33.69548035]
[191.43730164 -35.82059097]
[198.13566589 -20.24598885]
[185.02401733 -9.49792004]
[177.57763672 3.52327156]
[176.98185730 10.97151089]
[169.78262329 16.77116203]
[162.01644897 29.60418892]
[154.25027466 42.43721390]
[146.48410034 55.27024078]
[138.71792603 68.10326385]
[130.95175171 80.93629456]
[143.91969299 73.39755249]
[158.75614929 71.18854523]
[173.20542908 75.21573639]
[184.76042175 84.78036499]
[191.41619873 98.22285461]
[192.01791382 113.21078491]
[186.46116638 127.14356995]
[175.71009827 137.60371399]
[161.63015747 142.77626038]
[146.66436768 141.76371765]
[133.40948486 134.74177551]
[124.16506195 122.92820740]
[112.45450592 113.55468750]
[118.23757935 127.39506531]
[124.02065277 141.23544312]
[129.80372620 155.07582092]
[136.06617737 161.87631226]
[135.55398560 169.33076477]
[140.99296570 183.30995178]
[155.18293762 189.73507690]
[160.49969482 203.98944092]
[154.28688049 217.47781372]
[159.72584534 231.45700073]
[165.16482544 245.43618774]
[170.60379028 259.41537476]
[176.04277039 273.39456177]
[181.48173523 287.37374878]
[200.03720093 299.83605957]
[196.50556946 321.14907837]
[203.29888916 334.52261353]
[210.09220886 347.89611816]
[224.12240601 356.38644409]
[223.51420593 372.77429199]
[208.89324951 380.20126343]
[195.30035400 371.02713013]
[196.71870422 354.68942261]
[189.92538452 341.31591797]
[183.13206482 327.94241333]
[175.05990601 327.12188721]
[167.91810608 323.07534790]
[162.95201111 316.42077637]
[161.06256104 308.23800659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[5 107]
[6 106]
[9 103]
[10 102]
[11 100]
[12 99]
[13 98]
[14 97]
[22 44]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[45 64]
[46 63]
[47 62]
[49 60]
[50 59]
[51 58]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 77]
[72 76]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
