%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCCUCUCUUCGCUAGCCGGAAGUCGCGAGAUCUGAAUGAGUCAAAGCCGGCGGCCUCGGCUCCUCAGCUCCACCUGACAGUAGGCCGCUGAUCGGCCGCGGGUCUUGUCGACCGCUAGGCCACCAGGUUC\
) } def
/len { sequence length } bind def

/coor [
[60.40605545 532.90295410]
[48.09019470 523.46368408]
[43.70697784 508.57858276]
[48.94184494 493.97119141]
[61.78188324 485.25836182]
[62.13352203 470.26248169]
[62.48516083 455.26663208]
[49.40111923 450.06240845]
[38.86711121 440.67327881]
[32.16994476 428.21878052]
[30.13710976 414.19445801]
[33.03459549 400.29232788]
[40.53227997 388.19683838]
[51.74140930 379.38067627]
[65.31991577 374.92550659]
[66.02299500 359.94198608]
[66.72608185 344.95849609]
[67.42916870 329.97497559]
[68.13224792 314.99145508]
[65.27675629 308.09817505]
[69.03152466 299.66616821]
[70.08566284 284.70324707]
[67.97768402 281.76690674]
[67.24040222 277.63507080]
[68.43275452 272.98870850]
[71.77632904 268.73770142]
[73.87940216 253.88587952]
[75.98247528 239.03404236]
[77.91130829 224.15856934]
[79.66563416 209.26150513]
[81.41996765 194.36445618]
[83.17429352 179.46739197]
[84.92862701 164.57034302]
[86.68295288 149.67327881]
[88.43728638 134.77622986]
[90.19161224 119.87916565]
[91.94594574 104.98210907]
[89.66123962 100.14809418]
[90.30224609 94.37863922]
[94.14762115 89.43393707]
[96.59828186 74.63548279]
[94.90503693 65.56188965]
[99.28376007 59.52053452]
[102.08065796 44.78359604]
[104.87756348 30.04665565]
[95.11080933 22.07461548]
[89.72572327 10.75560570]
[89.70204163 -1.70655584]
[94.98226929 -12.91470432]
[104.49461365 -20.73944283]
[116.36997986 -23.72363663]
[119.85456085 -38.31328201]
[123.33914185 -52.90292358]
[126.82372284 -67.49256897]
[130.30830383 -82.08221436]
[133.79287720 -96.67185211]
[137.27746582 -111.26149750]
[140.76203918 -125.85114288]
[144.24662781 -140.44078064]
[142.69522095 -147.02368164]
[144.49566650 -152.53851318]
[148.25163269 -155.62475586]
[152.41622925 -170.03503418]
[156.58082581 -184.44531250]
[151.03121948 -196.15611267]
[154.86349487 -208.11415100]
[165.48420715 -214.02566528]
[169.98547363 -228.33436584]
[174.48674011 -242.64305115]
[178.98800659 -256.95175171]
[171.45996094 -270.84793091]
[176.04292297 -285.97314453]
[190.01791382 -293.35385132]
[205.09382629 -288.61123657]
[212.32638550 -274.55895996]
[207.42463684 -259.53405762]
[193.29670715 -252.45046997]
[188.79542542 -238.14178467]
[184.29415894 -223.83308411]
[179.79289246 -209.52439880]
[184.55145264 -192.67439270]
[170.99110413 -180.28070068]
[166.82650757 -165.87042236]
[162.66191101 -151.46015930]
[158.83627319 -136.95620728]
[155.35168457 -122.36656189]
[151.86711121 -107.77691650]
[148.38252258 -93.18727112]
[144.89794922 -78.59763336]
[141.41336060 -64.00798798]
[137.92878723 -49.41834259]
[134.44419861 -34.82870102]
[130.95962524 -20.23905754]
[143.03800964 -7.45748329]
[145.11454773 10.16228676]
[136.18278503 25.67205429]
[119.61450195 32.84355545]
[116.81759644 47.58049393]
[114.02069855 62.31743240]
[111.39673615 77.08614349]
[108.94607544 91.88459778]
[106.84300232 106.73643494]
[105.08866882 121.63349152]
[103.33434296 136.53054810]
[101.58000946 151.42761230]
[99.82568359 166.32466125]
[98.07135010 181.22172546]
[96.31702423 196.11878967]
[94.56269073 211.01583862]
[92.80836487 225.91290283]
[94.92504883 234.89715576]
[90.83431244 241.13711548]
[88.73123932 255.98895264]
[86.62816620 270.84078979]
[85.04857635 285.75738525]
[83.99443817 300.72030640]
[83.11576080 315.69454956]
[82.41268158 330.67803955]
[81.70959473 345.66156006]
[81.00650787 360.64508057]
[80.30342865 375.62860107]
[94.86130524 382.34945679]
[105.71363068 394.10098267]
[111.23027802 409.07464600]
[110.59918213 424.98129272]
[103.94577026 439.40106201]
[92.30937958 450.15161133]
[77.48104095 455.61825562]
[77.12940216 470.61413574]
[76.77776337 485.61001587]
[89.19529724 494.91510010]
[93.73973083 509.75180054]
[88.66363525 524.41510010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 130]
[6 129]
[7 128]
[15 121]
[16 120]
[17 119]
[18 118]
[19 117]
[21 116]
[22 115]
[26 114]
[27 113]
[28 112]
[29 110]
[30 109]
[31 108]
[32 107]
[33 106]
[34 105]
[35 104]
[36 103]
[37 102]
[40 101]
[41 100]
[43 99]
[44 98]
[45 97]
[51 93]
[52 92]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[59 85]
[62 84]
[63 83]
[64 82]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
