%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCAGGUUUUGAUCAUCAUUCCAGACCCUAGGGGACCUCAACUGGGUGUCUUGCCCCCUAGGCUCCGGAAGGGGACCUCCCGUGGAUCUCAGGAAGCCCUCUGGUGCUCAGAGGCUCCUGGGAAAGUCCCUAGCCAUGAUACCAC\
) } def
/len { sequence length } bind def

/coor [
[81.68814850 240.77690125]
[80.75878906 225.44615173]
[87.63366699 211.71183777]
[100.46347809 203.26840210]
[99.50891113 188.29881287]
[98.55434418 173.32920837]
[97.44095612 158.37059021]
[96.16886139 143.42463684]
[94.89677429 128.47866821]
[93.62468719 113.53270721]
[93.52967834 128.53240967]
[86.23123932 141.63708496]
[73.52902222 149.61541748]
[58.55513382 150.50009155]
[45.00183105 144.07296753]
[36.21107483 131.91885376]
[34.35049438 117.03469086]
[39.87886810 103.09062195]
[51.43301010 93.52496338]
[66.16390991 90.69641876]
[80.43818665 95.30178833]
[66.64170074 89.41477966]
[52.84520721 83.52777100]
[39.04871750 77.64076233]
[23.31915283 79.34115601]
[14.64967823 67.22960663]
[0.85318881 61.34260178]
[-14.87637711 63.04299164]
[-23.54585075 50.93144608]
[-37.34234238 45.04443741]
[-51.13883209 39.15742874]
[-64.93531799 33.27042007]
[-78.73181152 27.38340950]
[-92.52829742 21.49640083]
[-106.32479095 15.60939217]
[-120.12127686 9.72238255]
[-134.31668091 4.87567234]
[-148.83267212 1.09600163]
[-163.34866333 -2.68366933]
[-177.86465454 -6.46334028]
[-192.37329102 0.38349989]
[-206.70823669 -6.81990576]
[-209.87294006 -22.54771996]
[-199.43972778 -34.73490906]
[-183.41206360 -34.03250885]
[-174.08499146 -20.97933388]
[-159.56900024 -17.19966316]
[-145.05300903 -13.41999245]
[-130.53700256 -9.64032173]
[-137.75456238 -22.78972816]
[-135.00674438 -37.53589630]
[-123.53749847 -47.20317841]
[-108.53899384 -47.41515732]
[-96.80111694 -38.07586670]
[-93.63765717 -23.41324615]
[-100.48071289 -10.06511688]
[-114.23426819 -4.07410717]
[-100.43778229 1.81290221]
[-86.64128876 7.69991159]
[-72.84480286 13.58692074]
[-59.04830933 19.47393036]
[-45.25181961 25.36093903]
[-31.45533180 31.24794769]
[-17.65884209 37.13495636]
[-2.91609359 35.01348877]
[6.74019814 47.54611206]
[20.53668785 53.43312073]
[35.27943802 51.31165314]
[44.93572617 63.84427261]
[58.73221588 69.73128510]
[72.52870941 75.61829376]
[86.32519531 81.50530243]
[111.70749664 85.51432800]
[125.85066223 80.51722717]
[139.99382019 75.52013397]
[154.13697815 70.52303314]
[168.28015137 65.52593994]
[182.42330933 60.52883911]
[187.85565186 40.73480225]
[209.21873474 31.03586960]
[215.39724731 17.36744118]
[221.57575989 3.69901466]
[222.59033203 -13.22454929]
[239.13336182 -16.93454552]
[247.27795410 -2.06504059]
[235.24418640 9.87753296]
[229.06567383 23.54596138]
[222.88716125 37.21438980]
[232.06062317 49.08230972]
[246.84486389 46.54729462]
[261.62908936 44.01228333]
[276.41333008 41.47727203]
[291.19757080 38.94226074]
[305.98181152 36.40724564]
[320.76605225 33.87223434]
[335.55029297 31.33722305]
[343.54483032 26.77366829]
[350.67498779 28.90878677]
[365.50967407 26.68814659]
[380.34439087 24.46750641]
[388.43402100 20.07466698]
[395.51721191 22.36064339]
[410.39572144 20.45537758]
[425.27423096 18.55010986]
[440.15274048 16.64484215]
[451.06225586 4.88209772]
[467.04931641 6.22118378]
[475.85003662 19.63486671]
[470.71325684 34.83332062]
[455.57946777 40.15758514]
[442.05801392 31.52334976]
[427.17950439 33.42861557]
[412.30099487 35.33388519]
[397.42248535 37.23915100]
[382.56503296 39.30221939]
[367.73031616 41.52286148]
[352.89559937 43.74349976]
[338.08529663 46.12145996]
[323.30105591 48.65647507]
[308.51681519 51.19148636]
[293.73257446 53.72649765]
[278.94833374 56.26150894]
[264.16412354 58.79652405]
[249.37986755 61.33153534]
[234.59562683 63.86654663]
[222.11219788 81.88552856]
[202.29846191 85.33599091]
[187.42041016 74.67200470]
[173.27723694 79.66909790]
[159.13407898 84.66619873]
[144.99092102 89.66329193]
[130.84776306 94.66039276]
[116.70459747 99.65748596]
[108.57064819 112.26062012]
[109.84273529 127.20658112]
[111.11483002 142.15254211]
[112.38691711 157.09851074]
[116.25604248 165.45126343]
[113.52394104 172.37464905]
[114.47850800 187.34423828]
[115.43307495 202.31384277]
[129.23144531 209.05926514]
[137.79513550 221.80911255]
[138.82058716 237.13372803]
[132.03193665 250.91088867]
[119.25531769 259.43457031]
[103.92755127 260.41198730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 141]
[5 140]
[6 139]
[7 137]
[8 136]
[9 135]
[10 134]
[21 72]
[22 71]
[23 70]
[24 69]
[26 67]
[27 66]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 49]
[38 48]
[39 47]
[40 46]
[73 133]
[74 132]
[75 131]
[76 130]
[77 129]
[78 128]
[80 88]
[81 87]
[82 86]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[98 117]
[99 116]
[100 115]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
