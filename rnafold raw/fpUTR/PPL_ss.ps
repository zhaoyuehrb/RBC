%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCGCCGCUCGCUCACCUGCGCUCCCGCCCGCCCCUCGGUGCGCGCCCGGCCCGCCAGCCGCCGCCGCCCGCACCCCGAGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[-33.84234619 197.93301392]
[-41.58193588 191.86958313]
[-55.20679092 198.14360046]
[-68.83164978 204.41761780]
[-70.33998108 219.63839722]
[-79.20586395 231.97911072]
[-92.96691895 238.18391418]
[-107.88628387 236.67771912]
[-119.96719360 227.96467590]
[-133.59205627 234.23869324]
[-147.21690369 240.51271057]
[-148.54895020 255.81373596]
[-157.36619568 268.38958740]
[-171.29682922 274.85742188]
[-186.59361267 273.47741699]
[-199.14175415 264.62078857]
[-205.56587219 250.66993713]
[-204.13793945 235.37757874]
[-195.24203491 222.85725403]
[-181.27111816 216.47688293]
[-165.98329163 217.95275879]
[-153.49092102 226.88786316]
[-139.86607361 220.61384583]
[-126.24121094 214.33982849]
[-125.00792694 199.49581909]
[-116.45325470 187.18023682]
[-102.79244232 180.75772095]
[-87.65167236 182.04377747]
[-75.10566711 190.79277039]
[-61.48080826 184.51875305]
[-47.85595322 178.24473572]
[-42.78762436 158.64639282]
[-24.87962151 148.61795044]
[-4.98258066 154.70205688]
[7.64893246 146.61225891]
[10.61329174 134.74638367]
[21.25552940 127.93701172]
[34.06501770 130.36730957]
[46.96823502 122.71832275]
[59.87144852 115.06933594]
[72.77466583 107.42034149]
[85.67787933 99.77135468]
[92.69575500 87.67833710]
[106.67313385 87.32543182]
[114.59873199 73.63253784]
[129.49241638 73.79821777]
[142.39562988 66.14923096]
[155.29884338 58.50024414]
[159.32023621 43.45145035]
[172.51489258 35.87809753]
[186.83683777 39.80461502]
[199.74005127 32.15562439]
[212.64326477 24.50663757]
[225.54647827 16.85764694]
[229.56213379 4.45345592]
[240.64361572 -1.61493635]
[252.47628784 1.47930384]
[265.63583374 -5.71975851]
[271.50540161 -20.65052032]
[286.88012695 -25.23278046]
[299.96585083 -15.95141983]
[300.72430420 0.07369477]
[288.57366943 10.54946709]
[272.83489990 7.43978214]
[259.67535400 14.63884449]
[251.50689697 30.06641197]
[233.19546509 29.76086235]
[220.29225159 37.40985107]
[207.38903809 45.05884171]
[194.48582458 52.70782852]
[191.05693054 67.15699005]
[178.08020020 75.09796906]
[162.94784546 71.40345764]
[150.04461670 79.05244446]
[137.14140320 86.70143890]
[130.13873291 99.84722137]
[114.32212067 100.22864532]
[107.30424500 112.32166290]
[93.32686615 112.67456818]
[80.42365265 120.32356262]
[67.52043915 127.97254944]
[54.61722183 135.62153625]
[41.71400833 143.27052307]
[33.19372940 159.48182678]
[15.73873329 159.24377441]
[3.10721970 167.33357239]
[3.89175749 177.48843384]
[0.81903273 187.13722229]
[-5.61799145 194.87782288]
[-14.44091511 199.60289001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[9 24]
[10 23]
[11 22]
[34 86]
[35 85]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[44 77]
[46 75]
[47 74]
[48 73]
[51 70]
[52 69]
[53 68]
[54 67]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
