%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCGUCCCCGGCGUUGGCGUCUUCGUCCUGUUGCUGGUCUCCGUCCGGUCGCCGGCCGUCUAGGUCUCCGGCCCUCCCCAGCCGCUCCUGCGCCCUUGCCGGCCCCGCCGCCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[152.61053467 427.87719727]
[149.56684875 413.18927002]
[146.52316284 398.50131226]
[142.03288269 392.52062988]
[143.59436035 383.39956665]
[140.92677307 368.63867188]
[138.25918579 353.87777710]
[124.78653717 347.58288574]
[117.51799011 334.40594482]
[119.42453766 319.29904175]
[129.98297119 308.08181763]
[127.31538391 293.32092285]
[124.64780426 278.56002808]
[121.98021698 263.79913330]
[119.31263733 249.03825378]
[116.64505768 234.27735901]
[104.29955292 226.02362061]
[101.38397217 211.09196472]
[110.12496185 198.19883728]
[107.45738220 183.43794250]
[104.78979492 168.67704773]
[102.12221527 153.91615295]
[99.45463562 139.15525818]
[82.33170319 134.94657898]
[68.79107666 123.65237427]
[61.57814407 107.56259155]
[62.15534973 89.93946838]
[70.40566254 74.35614777]
[55.80715942 68.25744629]
[54.05595016 53.46614456]
[44.81096649 41.65385056]
[35.56598663 29.84155655]
[26.32100296 18.02926254]
[7.52668142 16.53890610]
[-4.10696602 2.10686874]
[-1.65861022 -15.94884586]
[-11.49467564 -27.27367783]
[-21.33074188 -38.59851074]
[-31.16680717 -49.92333984]
[-41.00287247 -61.24817276]
[-50.83893585 -72.57300568]
[-66.36461639 -73.83441925]
[-76.17845154 -85.45952606]
[-74.88021088 -100.25311279]
[-84.71627808 -111.57794189]
[-100.38763428 -116.40914154]
[-103.77509308 -132.45462036]
[-91.39392090 -143.20816040]
[-75.98080444 -137.60743713]
[-73.39144135 -121.41400909]
[-63.55537796 -110.08917999]
[-48.72574615 -109.30329895]
[-38.58924866 -97.95842743]
[-39.51410675 -82.40907288]
[-29.67803955 -71.08423615]
[-19.84197426 -59.75940704]
[-10.00590897 -48.43457413]
[-0.16984388 -37.10974121]
[9.66622162 -25.78491020]
[21.08688545 -27.47148323]
[31.99703217 -23.34301949]
[39.59572220 -14.33391476]
[41.87139511 -2.64704132]
[38.13329697 8.78427982]
[47.37828064 20.59657478]
[56.62326050 32.40886688]
[65.86824799 44.22116470]
[79.80548859 49.47496796]
[82.21796417 65.11116028]
[97.18369293 60.94234467]
[112.59269714 62.92095184]
[126.01969147 70.73555756]
[137.94908142 61.64218140]
[149.87847900 52.54879761]
[161.80787659 43.45541763]
[161.31658936 27.94612122]
[170.06311035 15.12901592]
[184.68418884 9.93254185]
[199.55775452 14.35484695]
[208.96459961 26.69546700]
[209.28761292 42.20917892]
[200.40257263 54.93064880]
[185.72596741 59.96820450]
[170.90126038 55.38481140]
[158.97186279 64.47819519]
[147.04246521 73.57157135]
[135.11308289 82.66495514]
[138.51034546 92.90171814]
[138.98603821 103.67699432]
[136.50410461 114.17330933]
[131.25279236 123.59438324]
[123.63051605 131.22547913]
[114.21552277 136.48768616]
[116.88311005 151.24858093]
[119.55068970 166.00946045]
[122.21827698 180.77035522]
[124.88585663 195.53125000]
[137.58665466 204.54943848]
[140.08168030 219.55708313]
[131.40594482 231.60977173]
[134.07353210 246.37066650]
[136.74111938 261.13156128]
[139.40869141 275.89245605]
[142.07627869 290.65335083]
[144.74386597 305.41424561]
[158.56054688 312.22640991]
[165.63403320 325.71041870]
[163.43728638 340.59796143]
[153.02008057 351.21020508]
[155.68766785 365.97109985]
[158.35525513 380.73199463]
[161.21112061 395.45761108]
[164.25480652 410.14556885]
[167.29849243 424.83352661]
[181.73580933 430.27111816]
[190.92312622 442.66452026]
[191.92881775 458.05908203]
[184.43194580 471.54241943]
[170.82475281 478.81207275]
[155.44924927 477.54830933]
[143.21166992 468.15438843]
[138.01702881 453.62789917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[5 111]
[6 110]
[7 109]
[11 105]
[12 104]
[13 103]
[14 102]
[15 101]
[16 100]
[19 97]
[20 96]
[21 95]
[22 94]
[23 93]
[28 69]
[30 67]
[31 66]
[32 65]
[33 64]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[44 51]
[45 50]
[72 87]
[73 86]
[74 85]
[75 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
