%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUGAGAAUGGCGCCGCUGGAGAUCCUUUCCUGCUUUUGGUUUCCCUGGCAGGGGUUGAACUGUGGAGUGUGUGGGCUCUUAUCACGCG\
) } def
/len { sequence length } bind def

/coor [
[95.44010162 354.66290283]
[89.08531189 340.73901367]
[89.94077301 325.45742798]
[97.80989838 312.32974243]
[110.88442230 304.37265015]
[109.87177277 289.40689087]
[108.85912323 274.44110107]
[107.84648132 259.47531128]
[106.83383179 244.50953674]
[105.82118988 229.54376221]
[95.24605560 215.65046692]
[103.21797943 199.15834045]
[94.23278046 187.27914429]
[100.53424072 172.76699829]
[99.01671600 157.84396362]
[97.49919128 142.92091370]
[95.98166656 127.99787903]
[94.21231842 113.10260010]
[85.80661774 101.92959595]
[90.92441559 88.91807556]
[88.90373993 74.05480194]
[86.88307190 59.19152832]
[77.35725403 46.55944824]
[83.30951691 32.90588379]
[81.28884888 18.04261017]
[71.76303101 5.41053200]
[77.71529388 -8.24303246]
[75.69462585 -23.10630608]
[63.39961624 -32.67033005]
[61.56209946 -47.77258682]
[70.75570679 -59.43505859]
[68.73503113 -74.29833221]
[66.71436310 -89.16160583]
[64.69368744 -104.02487946]
[62.67301559 -118.88814545]
[60.65234375 -133.75141907]
[58.63167191 -148.61470032]
[56.61100006 -163.47796631]
[47.38476944 -169.71485901]
[43.30826187 -179.83932495]
[45.54584885 -190.29472351]
[53.08910370 -197.55555725]
[52.07645798 -212.52134705]
[42.49252701 -225.82849121]
[49.47070694 -240.66888428]
[65.83244324 -241.77598572]
[74.74618530 -228.01091003]
[67.04223633 -213.53398132]
[68.05488586 -198.56820679]
[80.07171631 -183.57780457]
[71.47427368 -165.49864197]
[73.49494934 -150.63536072]
[75.51561737 -135.77209473]
[77.53629303 -120.90882111]
[79.55696106 -106.04554749]
[81.57763672 -91.18227386]
[83.59830475 -76.31900024]
[85.61898041 -61.45573044]
[97.59239960 -52.67092896]
[99.85338593 -37.62624359]
[90.55789948 -25.12697792]
[92.57856750 -10.26370430]
[101.95985413 1.30525398]
[96.15211487 16.02193832]
[98.17279053 30.88521194]
[107.55407715 42.45417023]
[101.74633789 57.17085648]
[103.76701355 72.03412628]
[105.78768158 86.89739990]
[114.19338226 98.07040405]
[109.07558441 111.08192444]
[113.41170502 119.36157227]
[110.90470886 126.48035431]
[112.42223358 141.40339661]
[113.93975830 156.32643127]
[115.45728302 171.24948120]
[124.55102539 184.19607544]
[118.14101410 197.64080811]
[127.70561218 206.49353027]
[128.55870056 219.09378052]
[120.78696442 228.53111267]
[121.79961395 243.49690247]
[122.81226349 258.46267700]
[123.82490540 273.42846680]
[124.83755493 288.39422607]
[125.85019684 303.36001587]
[139.87745667 309.48330688]
[149.44329834 321.43124390]
[152.34956360 336.45828247]
[147.92840576 351.11132812]
[137.19578552 362.02322388]
[122.61798096 366.68649292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[12 78]
[14 76]
[15 75]
[16 74]
[17 73]
[18 71]
[20 69]
[21 68]
[22 67]
[24 65]
[25 64]
[27 62]
[28 61]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
