%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCAGCCCUGUGCCCCAAAGCACCUGGAGCAUAUAGCCUUGCAGAACUUCUACUUGCCUGCCUCCCUGCCUCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[124.90990448 133.12739563]
[114.26924133 138.91421509]
[102.40998077 141.37776184]
[90.34490967 140.30764771]
[79.10438538 135.79525757]
[69.64834595 128.22595215]
[62.78433609 118.24615479]
[59.09854889 106.70812988]
[44.10136795 106.41725922]
[29.10136795 106.41725922]
[14.10418892 106.70812988]
[-1.27340174 116.61383820]
[-16.34970474 107.85440063]
[-31.32432747 108.72657776]
[-46.29895020 109.59874725]
[-61.27357101 110.47092438]
[-71.59164429 122.44225311]
[-87.35859680 123.52795410]
[-99.22017670 113.08388519]
[-100.13911438 97.30633545]
[-89.57022095 85.55583954]
[-73.78383636 84.80376434]
[-62.14574432 95.49629974]
[-47.17112350 94.62413025]
[-32.19649887 93.75195312]
[-17.22187614 92.87978363]
[-8.80324364 83.96784210]
[3.84111071 83.26501465]
[13.81331921 91.71094513]
[28.81049919 91.42007446]
[35.61254883 88.05428314]
[44.39223862 91.42007446]
[59.38941956 91.71094513]
[66.71615601 75.29953003]
[80.30113220 63.53244781]
[97.59001923 58.62223053]
[115.33204651 61.49213028]
[130.19123840 71.60252380]
[139.37368774 87.05239868]
[154.23568726 85.02242279]
[169.09770203 82.99245453]
[179.71499634 67.55561829]
[197.89367676 64.56253052]
[212.39945984 75.40686798]
[227.05946350 72.23131561]
[241.71948242 69.05575562]
[256.37948608 65.88019562]
[257.27059937 50.81007767]
[262.19561768 36.53959274]
[270.78909302 24.12770844]
[282.41329956 14.49546909]
[296.20568848 8.35764885]
[311.14273071 6.16971636]
[326.11602783 8.09403038]
[340.01446533 13.98779392]
[351.80664062 23.41365051]
[360.61755371 35.67213821]
[365.79333496 49.85359955]
[366.94995117 64.90567017]
[364.00149536 79.71138763]
[357.16687012 93.17208099]
[346.95315552 104.28885651]
[334.11831665 112.23679352]
[319.61477661 116.42609406]
[304.51882935 116.54588318]
[289.95062256 112.58727264]
[276.99130249 104.84402466]
[266.60244751 93.89073181]
[259.55505371 80.54020691]
[244.89503479 83.71576691]
[230.23503113 86.89131927]
[215.57502747 90.06687927]
[211.47917175 101.03948975]
[202.42390442 108.65776825]
[190.67337036 110.86067963]
[179.24345398 106.96123505]
[171.12767029 97.85446167]
[156.26565552 99.88442993]
[141.40365601 101.91439819]
[139.08227539 113.80230713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 33]
[9 32]
[10 30]
[11 29]
[13 26]
[14 25]
[15 24]
[16 23]
[39 79]
[40 78]
[41 77]
[44 72]
[45 71]
[46 70]
[47 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
