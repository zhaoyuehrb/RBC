%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGAAAGCAGUGAUAUAACUCUAGGUAAAUGCUAUGUCUACUAAUUAUAGUUUCUUAAUUUUCAUAGCUAUAUUAUGAAAAGAGUAAAUUGAAGAA\
) } def
/len { sequence length } bind def

/coor [
[114.41108704 149.68121338]
[104.86092377 151.50022888]
[95.13907623 151.50022888]
[85.58891296 149.68121338]
[76.54776001 146.10743713]
[68.33495331 140.90510559]
[61.24057770 134.25798035]
[55.51520157 126.40085602]
[51.36105347 117.61123657]
[48.92486191 108.19957733]
[48.29267502 98.49830627]
[33.52055740 95.89357758]
[18.74844170 93.28885651]
[3.93685794 90.91883850]
[-10.91046333 88.78411102]
[-25.75778580 86.64939117]
[-40.60510635 84.51467133]
[-55.45242691 82.37994385]
[-70.29975128 80.24522400]
[-85.06059265 85.93979645]
[-96.55718231 76.46997833]
[-105.47454834 88.90939331]
[-119.15657806 95.76947784]
[-134.45922852 95.47383881]
[-147.86607361 88.09040070]
[-156.29631042 75.31583405]
[-157.81274414 60.08563232]
[-152.06689453 45.89958572]
[-140.37911987 36.01755142]
[-125.43519592 32.71033859]
[-110.66912079 36.73792648]
[-99.47402191 47.17480469]
[-94.42246246 61.62265396]
[-80.72360229 55.77538681]
[-68.16503143 65.39790344]
[-53.31770706 67.53262329]
[-38.47038269 69.66735077]
[-23.62306213 71.80207062]
[-8.77574158 73.93679047]
[6.07158041 76.07151794]
[13.27195072 73.86718750]
[21.35316467 78.51673889]
[36.12527847 81.12146759]
[50.89739609 83.72618866]
[61.69357300 65.23622131]
[79.05241394 52.70199585]
[100.00000000 48.27087021]
[120.94758606 52.70199585]
[138.30642700 65.23622131]
[149.10260010 83.72618866]
[163.87472534 81.12146759]
[178.64683533 78.51673889]
[193.41894531 75.91201782]
[208.19107056 73.30729675]
[222.96318054 70.70257568]
[237.69210815 67.86380768]
[252.37414551 64.79170227]
[267.05618286 61.71960449]
[272.46426392 57.41513443]
[278.34268188 56.73802948]
[282.76568604 58.94959641]
[297.61300659 56.81487274]
[312.46032715 54.68015289]
[327.30764771 52.54542923]
[342.15496826 50.41070557]
[357.00228882 48.27598572]
[371.84960938 46.14126205]
[386.69692993 44.00653839]
[401.54425049 41.87181473]
[412.27087402 29.94206238]
[428.27673340 31.03419304]
[437.28344727 44.31042099]
[432.38189697 59.58635712]
[417.33209229 65.14361572]
[403.67898560 56.71913910]
[388.83166504 58.85385895]
[373.98434448 60.98858261]
[359.13702393 63.12330627]
[344.28970337 65.25802612]
[329.44238281 67.39275360]
[314.59506226 69.52747345]
[299.74774170 71.66219330]
[284.90039062 73.79692078]
[270.12829590 76.40164185]
[255.44625854 79.47373962]
[240.76422119 82.54584503]
[234.75199890 87.07990265]
[225.56790161 85.47469330]
[210.79579163 88.07941437]
[196.02368164 90.68413544]
[181.25155640 93.28885651]
[166.47944641 95.89357758]
[151.70732117 98.49830627]
[151.07513428 108.19957733]
[148.63894653 117.61123657]
[144.48480225 126.40085602]
[138.75942993 134.25798035]
[131.66503906 140.90510559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 44]
[12 43]
[13 42]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[21 33]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[56 86]
[57 85]
[58 84]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
