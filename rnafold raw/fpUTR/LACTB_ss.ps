%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCUCCGCCCCGCGCCGCGGCUGGCAGGGUGUGCGUGAGUUUGGUGGCGGCCGGCUGUGCAGAGACGCC\
) } def
/len { sequence length } bind def

/coor [
[91.60578156 298.40057373]
[80.16098785 288.23812866]
[74.76069641 273.91699219]
[76.64585876 258.72799683]
[85.38327789 246.16154480]
[98.96514893 239.10525513]
[98.96514893 224.10525513]
[98.96514893 209.10525513]
[91.22785187 196.37797546]
[98.96514893 182.57780457]
[98.96514893 167.57780457]
[98.64241028 152.58128357]
[97.35293579 137.63681030]
[95.42171478 122.76165009]
[93.49049377 107.88648987]
[89.29933929 100.68686676]
[91.81046295 92.33146667]
[90.52098846 77.38700104]
[89.23151398 62.44252396]
[87.94204712 47.49805069]
[86.65257263 32.55358124]
[77.75758362 19.46962929]
[84.37214661 6.12433529]
[83.08267212 -8.82013702]
[81.79320526 -23.76461029]
[80.50373077 -38.70908356]
[79.21425629 -53.65355682]
[76.96342468 -68.48371887]
[73.76061249 -83.13779449]
[63.25512314 -94.96764374]
[68.09645081 -109.05347443]
[55.42223358 -118.88932037]
[55.35404968 -134.93223572]
[67.94419861 -144.87545776]
[83.53459167 -141.09140015]
[90.16562653 -126.48287964]
[82.75052643 -112.25629425]
[93.02693176 -101.47460175]
[88.41468811 -86.34060669]
[91.61750793 -71.68653107]
[94.69523621 -69.41777039]
[96.67649841 -65.39548492]
[96.67629242 -60.23153305]
[94.15872955 -54.94302750]
[95.44820404 -39.99855423]
[96.73767090 -25.05408096]
[98.02714539 -10.10960865]
[99.31661987 4.83486366]
[108.11937714 16.84988594]
[101.59704590 31.26410866]
[102.88652039 46.20858002]
[104.17598724 61.15305328]
[105.46546173 76.09752655]
[106.75493622 91.04199982]
[108.36565399 105.95526886]
[110.29687500 120.83042908]
[112.22809601 135.70558167]
[116.21910095 141.59899902]
[116.36004639 147.67514038]
[113.62852478 151.93594360]
[117.21453857 160.67987061]
[113.96514893 167.57780457]
[113.96514893 182.57780457]
[121.70245361 196.37797546]
[113.96514893 209.10525513]
[113.96514893 224.10525513]
[113.96514893 239.10525513]
[127.54702759 246.16154480]
[136.28443909 258.72799683]
[138.16960144 273.91699219]
[132.76931763 288.23812866]
[121.32452393 298.40057373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 67]
[7 66]
[8 65]
[10 63]
[11 62]
[12 60]
[13 57]
[14 56]
[15 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 40]
[29 39]
[31 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
