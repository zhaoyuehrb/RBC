%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCACUGCUAAUUUCCCUAGCAAAUAAACCAGCAGCUGCUGGUCCAAGUUACCACUGAGAACAGGGCACUGCAUGC\
) } def
/len { sequence length } bind def

/coor [
[100.97230530 159.21188354]
[91.17504883 158.55862427]
[81.62040710 156.29550171]
[72.57105255 152.48471069]
[64.27576447 147.23104858]
[56.96259308 140.67890930]
[50.83258820 133.00845337]
[46.05427551 124.43054199]
[31.71650314 128.83828735]
[17.37873268 133.24604797]
[3.04095984 137.65379333]
[-11.29681206 142.06155396]
[-17.21756935 156.53492737]
[-31.08043671 163.77059937]
[-46.33979034 160.35211182]
[-55.79063034 147.89355469]
[-54.97056198 132.27748108]
[-44.26679230 120.87733459]
[-28.73331642 119.07591248]
[-15.70456600 127.72378540]
[-1.36679423 123.31603241]
[12.97097778 118.90827179]
[27.30875015 114.50051880]
[41.64652252 110.09276581]
[40.93103409 95.77512360]
[43.67693710 81.70506287]
[49.72332001 68.70706177]
[58.71587372 57.54280472]
[70.12764740 48.86650085]
[83.28990936 43.18657684]
[80.91393280 28.37594604]
[78.53796387 13.56531525]
[76.16199493 -1.24531448]
[73.78602600 -16.05594444]
[71.41005707 -30.86657524]
[60.65022659 -43.24228287]
[66.24310303 -58.65823746]
[82.43521881 -61.25583267]
[92.56951141 -48.36287689]
[86.22068787 -33.24254608]
[88.59665680 -18.43191528]
[90.97262573 -3.62128496]
[93.34859467 11.18934536]
[95.72456360 25.99997520]
[98.10054016 40.81060410]
[120.95838928 44.61283112]
[140.60740662 56.89511490]
[154.03921509 75.77697754]
[159.19735718 98.36750031]
[174.12329102 99.85630798]
[189.04922485 101.34511566]
[199.67120361 93.72053528]
[212.22485352 95.43871307]
[219.90040588 105.00665283]
[234.75535583 107.08768463]
[243.96745300 105.14939880]
[250.15492249 109.55813599]
[264.91537476 112.22810364]
[279.67584229 114.89807129]
[294.91940308 108.85112762]
[307.60833740 119.23975372]
[304.68930054 135.37702942]
[289.16519165 140.66229248]
[277.00588989 129.65853882]
[262.24542236 126.98857117]
[247.48495483 124.31860352]
[232.67431641 121.94262695]
[217.81938171 119.86159515]
[202.09011841 127.37485504]
[187.56040955 116.27104950]
[172.63449097 114.78224182]
[157.70855713 113.29343414]
[154.71876526 122.64618683]
[150.22465515 131.37635803]
[144.34979248 139.24395752]
[137.25569153 146.03265381]
[129.13737488 151.55586243]
[120.21800995 155.66169739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[49 72]
[50 71]
[51 70]
[54 68]
[55 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
