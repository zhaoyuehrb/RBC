%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGCAGGGUUCCAGCGACAGCAGCACUGGACUCGUCCAGAGGGCGGCGGGUGAGCGGCUGGGGCCCCGUGGAGCCACC\
) } def
/len { sequence length } bind def

/coor [
[131.08866882 398.14566040]
[130.50703430 383.15695190]
[129.92539978 368.16824341]
[126.42834473 361.43273926]
[129.62326050 352.58941650]
[129.62326050 337.58941650]
[115.73318481 320.00900269]
[125.75279999 299.19595337]
[122.86212158 284.47711182]
[119.97143555 269.75827026]
[117.08074951 255.03944397]
[114.19006348 240.32061768]
[111.29938507 225.60179138]
[108.40869904 210.88296509]
[105.51801300 196.16412354]
[102.62733459 181.44529724]
[99.73664856 166.72647095]
[91.25759125 162.82456970]
[85.56551361 155.25117493]
[84.13316345 145.74430847]
[87.43597412 136.56610107]
[94.80641174 129.96464539]
[93.64402771 115.00974274]
[85.17611694 106.77815247]
[84.48945618 94.98862457]
[91.94448090 85.82962799]
[91.36284637 70.84091187]
[90.78121948 55.85219193]
[90.19959259 40.86347198]
[81.93299866 27.37369347]
[89.17097473 14.35597706]
[85.63556671 5.64320660]
[88.86882782 -1.22283304]
[85.67391968 -10.06613827]
[89.17097473 -16.80164337]
[89.75260925 -31.79036331]
[90.33423615 -46.77908325]
[90.91587067 -61.76779938]
[91.49749756 -76.75652313]
[86.06987762 -92.81819153]
[100.00133514 -102.48001099]
[113.14218140 -91.76766205]
[106.48622131 -76.17488861]
[105.90458679 -61.18616867]
[105.32295990 -46.19745255]
[104.74132538 -31.20873260]
[104.15969849 -16.22001266]
[103.86882782 -1.22283304]
[104.15969849 13.77434635]
[112.38468170 26.19202995]
[105.18830872 40.28184128]
[105.76993561 55.27056122]
[106.35157013 70.25927734]
[106.93319702 85.24800110]
[116.27244568 99.05223846]
[108.59892273 113.84735870]
[109.76130676 128.80224609]
[123.15825653 145.29148865]
[114.45547485 163.83578491]
[117.34616089 178.55461121]
[120.23684692 193.27345276]
[123.12752533 207.99227905]
[126.01821136 222.71110535]
[128.90888977 237.42993164]
[131.79957581 252.14875793]
[134.69026184 266.86758423]
[137.58094788 281.58642578]
[140.47163391 296.30526733]
[148.14401245 299.20687866]
[154.17088318 304.66802979]
[157.75045776 311.89337158]
[158.43186951 319.85806274]
[156.17134094 327.45294189]
[151.33129883 333.63897705]
[144.62326050 337.58941650]
[144.62326050 352.58941650]
[144.91412354 367.58660889]
[145.49575806 382.57531738]
[146.07739258 397.56402588]
[149.01330566 416.72207642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[5 76]
[6 75]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[22 57]
[23 56]
[26 54]
[27 53]
[28 52]
[29 51]
[31 49]
[33 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
