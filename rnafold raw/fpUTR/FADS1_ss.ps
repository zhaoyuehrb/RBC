%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUCGAAUCCGGCGGCGACGCCUUUAGGGAGCCCGCGAGGGGGCGCGUGUUGGCAGCCCAGCUGUGAGUUGCCCAAGACCCACCGGGGGACGGGAUCUCGCUCCCCGCGCCACGAGGCUCGGCCA\
) } def
/len { sequence length } bind def

/coor [
[-45.85462952 529.53765869]
[-52.22087860 543.11962891]
[-66.24829865 548.43298340]
[-80.01515961 542.47698975]
[-85.74686432 528.61346436]
[-93.08813477 541.69421387]
[-100.42940521 554.77496338]
[-107.77066803 567.85571289]
[-107.03005219 584.23809814]
[-120.99118042 592.84155273]
[-135.29205322 584.81549072]
[-135.22114563 568.41650391]
[-120.85140991 560.51446533]
[-113.51014709 547.43371582]
[-106.16887665 534.35296631]
[-98.82760620 521.27221680]
[-92.46075439 507.69049072]
[-87.10229492 493.68026733]
[-81.74382782 479.67001343]
[-76.55635834 465.59555054]
[-71.54064941 451.45898438]
[-72.27658844 444.02648926]
[-66.22684479 437.04177856]
[-60.86838531 423.03155518]
[-55.50992203 409.02130127]
[-50.15145874 395.01107788]
[-44.79299545 381.00082397]
[-51.08330536 367.54840088]
[-45.84864426 353.26370239]
[-31.69585991 346.75704956]
[-26.33739662 332.74679565]
[-41.02191162 335.80703735]
[-52.72779846 326.42770386]
[-52.94277954 311.42922974]
[-41.51052475 301.71823120]
[-26.74433327 304.35632324]
[-19.38178253 317.42645264]
[-12.36122131 304.17083740]
[-5.34066010 290.91519165]
[1.67990136 277.65957642]
[2.03398252 270.19912720]
[9.03623676 264.16970825]
[16.37750435 251.08897400]
[23.71877289 238.00822449]
[31.06003952 224.92749023]
[38.40130615 211.84674072]
[45.74257660 198.76600647]
[53.08384323 185.68525696]
[59.77953339 172.26260376]
[57.81586838 157.49801636]
[70.45105743 147.97631836]
[76.48529053 134.24357605]
[82.51952362 120.51084137]
[88.55375671 106.77810669]
[64.85230255 71.92513275]
[65.58261871 56.94292068]
[66.31293488 41.96070862]
[67.04324341 26.97849846]
[67.77355957 11.99628735]
[68.50387573 -2.98592377]
[61.44764709 -17.14644051]
[69.79543304 -29.48190880]
[70.52574921 -44.46411896]
[62.55023575 -58.79322433]
[71.20288086 -72.72389984]
[87.58257294 -71.92546844]
[94.83930206 -57.21928024]
[85.50795746 -43.73380280]
[84.77764130 -28.75159454]
[91.88610840 -15.66270542]
[83.48608398 -2.25560975]
[82.75576782 12.72660160]
[82.02545929 27.70881271]
[81.29514313 42.69102097]
[80.56482697 57.67323303]
[79.83451843 72.65544128]
[86.18841553 76.64015961]
[89.84088898 62.09164047]
[104.80603790 61.06963730]
[110.40248108 74.98652649]
[98.89621735 84.60958862]
[105.25011444 88.59430695]
[118.41927338 81.41285706]
[131.58843994 74.23141479]
[139.66490173 59.95896149]
[156.06353760 60.08774567]
[163.91484070 74.48528290]
[155.14205933 88.34062195]
[138.76988220 87.40057373]
[125.60072327 94.58202362]
[112.43156433 101.76346588]
[102.28649139 112.81233978]
[96.25225830 126.54507446]
[90.21802521 140.27781677]
[84.18379211 154.01054382]
[85.71584320 169.75740051]
[73.51226807 178.29684448]
[74.19494629 182.82646179]
[73.41568756 186.90013123]
[71.51469421 190.09922791]
[68.93637085 192.16650391]
[66.16458130 193.02653503]
[58.82331848 206.10726929]
[51.48204803 219.18801880]
[44.14078140 232.26875305]
[36.79951477 245.34948730]
[29.45824623 258.43023682]
[22.11697769 271.51098633]
[14.93553066 284.68014526]
[7.91496992 297.93576050]
[0.89440835 311.19140625]
[-6.12615299 324.44702148]
[-12.32715511 338.10525513]
[-17.68561745 352.11550903]
[-11.48702621 366.40591431]
[-17.12085152 380.53793335]
[-30.78275299 386.35928345]
[-36.14121628 400.36953735]
[-41.49967957 414.37976074]
[-46.85814285 428.39001465]
[-52.21660614 442.40023804]
[-57.40407944 456.47470093]
[-62.41978836 470.61126709]
[-62.35010147 479.85144043]
[-67.73358917 485.02847290]
[-73.09205627 499.03872681]
[-78.45051575 513.04895020]
[-64.12972260 508.58636475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[17 127]
[18 126]
[19 125]
[20 123]
[21 122]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[30 114]
[31 113]
[37 112]
[38 111]
[39 110]
[40 109]
[42 108]
[43 107]
[44 106]
[45 105]
[46 104]
[47 103]
[48 102]
[49 97]
[51 95]
[52 94]
[53 93]
[54 92]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[62 69]
[63 68]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
