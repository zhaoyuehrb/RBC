%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCCAUGGAGCUGCCCGCCCCAAACCACGCCGCCGGCGCCGCGGAGGGCAAUCGCCAAGGACCGCCGCCUGCCUGAGCAGCCCGGGGUGUCUGUGCCUCCGGAGCCCGAGAACCUGGGACCCAGGCCAGCCAGAGCUAAUUUCUAUCUCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[91.41957092 187.93945312]
[91.41957092 172.93945312]
[91.41957092 157.93945312]
[91.41957092 142.93945312]
[84.30068970 140.57904053]
[73.09367371 150.54913330]
[70.06292725 135.85823059]
[62.94404221 133.49783325]
[53.98220825 145.52635193]
[45.02037048 157.55488586]
[42.97993088 173.24395752]
[29.17139435 178.82728577]
[20.20955849 190.85581970]
[21.09672546 206.87432861]
[9.03064728 217.44737244]
[-6.73261356 214.46421814]
[-14.10083199 200.21330261]
[-7.42174244 185.62667847]
[8.18103027 181.89398193]
[17.14286613 169.86544800]
[18.54229355 155.03674316]
[32.99184036 148.59304810]
[41.95367813 136.56451416]
[50.91551590 124.53598785]
[50.40022278 105.06981659]
[56.66399002 88.47985077]
[67.62307739 76.81198120]
[80.70422363 71.03121948]
[93.32707977 70.96724701]
[83.43219757 59.69377136]
[73.53730774 48.42029953]
[63.64241791 37.14682388]
[53.74753189 25.87335205]
[45.68718719 21.45533371]
[43.77020264 14.27389526]
[34.10286331 2.80469418]
[24.43552589 -8.66450691]
[14.76818657 -20.13370895]
[6.79785585 -24.71212006]
[5.02494526 -31.93047714]
[-4.41097260 -43.59081268]
[-19.10676003 -49.45122147]
[-21.09835815 -64.21207428]
[-30.53427505 -75.87241364]
[-44.03612137 -75.73960114]
[-54.97926331 -83.31183624]
[-59.47960281 -95.62799835]
[-56.09835434 -108.09531403]
[-65.29907227 -119.94211578]
[-74.49979401 -131.78892517]
[-83.70051575 -143.63572693]
[-92.90122986 -155.48252869]
[-103.82352448 -156.22377014]
[-112.34053802 -162.74542236]
[-115.76068878 -172.68002319]
[-113.17364502 -182.63597107]
[-121.89301300 -194.84141541]
[-126.74985504 -197.04206848]
[-129.92506409 -200.55404663]
[-131.20030212 -204.50141907]
[-130.74328613 -208.05097961]
[-138.71469116 -220.75755310]
[-153.45323181 -227.94833374]
[-154.32501221 -244.32429504]
[-140.43322754 -253.03924561]
[-126.06855011 -245.12799072]
[-126.00812531 -228.72895813]
[-118.03672028 -216.02238464]
[-109.68757629 -203.56077576]
[-100.96820831 -191.35534668]
[-82.83883667 -184.72561646]
[-81.05442810 -164.68324280]
[-71.85370636 -152.83644104]
[-62.65298843 -140.98963928]
[-53.45227051 -129.14283752]
[-44.25154877 -117.29603577]
[-27.51449776 -115.93180847]
[-16.70903969 -102.64027405]
[-18.87393761 -85.30832672]
[-9.43802071 -73.64799500]
[4.58284712 -68.62161255]
[7.24936438 -53.02672958]
[16.68528175 -41.36639404]
[26.23738861 -29.80104637]
[35.90472794 -18.33184433]
[45.57206345 -6.86264372]
[55.23940277 4.60655737]
[65.02100372 15.97846413]
[74.91589355 27.25193596]
[84.81078339 38.52540970]
[94.70566559 49.79888153]
[104.60055542 61.07235718]
[118.88484192 65.65048218]
[133.48944092 62.22911453]
[148.09403992 58.80774689]
[155.78684998 53.77698898]
[163.02503967 55.46713638]
[177.69515991 52.33867645]
[192.36529541 49.21021652]
[207.03543091 46.08175278]
[212.26373291 41.88857651]
[217.96632385 41.12376785]
[222.35467529 43.13402939]
[237.13821411 40.59502029]
[246.26660156 27.97319794]
[261.29541016 25.60887718]
[273.27212524 34.38917923]
[288.05566406 31.85017014]
[302.83923340 29.31116104]
[317.62277222 26.77215004]
[326.53939819 13.72342682]
[342.08648682 10.88374519]
[355.04022217 19.93783951]
[357.71536255 35.51407623]
[348.52481079 48.37134933]
[332.92117310 50.88166809]
[320.16177368 41.55570221]
[305.37823486 44.09471512]
[290.59469604 46.63372421]
[275.81112671 49.17273331]
[267.45025635 61.44593048]
[252.49380493 64.23144531]
[239.67723083 55.37857056]
[224.89367676 57.91757965]
[210.16389465 60.75188446]
[195.49375916 63.88034439]
[180.82362366 67.00880432]
[166.15350342 70.13726807]
[151.51539612 73.41234589]
[136.91079712 76.83370972]
[122.30620575 80.25508118]
[132.97790527 85.41015625]
[142.08366394 95.41641235]
[147.63943481 109.63465881]
[147.95661926 126.67327881]
[155.92802429 139.37983704]
[163.89942932 152.08641052]
[177.78750610 159.66477966]
[177.99682617 174.55792236]
[185.96823120 187.26448059]
[201.22259521 192.23274231]
[206.71403503 207.30668640]
[198.22996521 220.92286682]
[182.27865601 222.63610840]
[171.09657288 211.13217163]
[173.26165771 195.23588562]
[165.29025269 182.52931213]
[151.97235107 175.85980225]
[151.19287109 160.05781555]
[143.22146606 147.35124207]
[135.25006104 134.64468384]
[128.04243469 136.71836853]
[106.41957092 142.93945312]
[106.41957092 157.93945312]
[106.41957092 172.93945312]
[106.41957092 187.93945312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[8 24]
[9 23]
[10 22]
[12 20]
[13 19]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[35 87]
[36 86]
[37 85]
[38 84]
[40 83]
[41 82]
[43 80]
[44 79]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[56 70]
[57 69]
[61 68]
[62 67]
[93 131]
[94 130]
[95 129]
[97 128]
[98 127]
[99 126]
[100 125]
[103 124]
[104 123]
[107 120]
[108 119]
[109 118]
[110 117]
[135 151]
[136 150]
[137 149]
[139 147]
[140 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
