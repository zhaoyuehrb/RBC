%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCCUCCAGCCCCGGGACGCGGCCCGCCACCGCCGCUGCCGCCAGCCCAGACGCGCCGCCCGCAUGCGCCGCGACC\
) } def
/len { sequence length } bind def

/coor [
[157.14401245 208.91944885]
[146.67799377 207.15051270]
[136.81584167 203.20408630]
[128.00541687 197.25576782]
[120.64760590 189.57211304]
[115.07804108 180.49876404]
[111.55183411 170.44480896]
[110.23184967 159.86445618]
[111.18122864 149.23640442]
[114.36032867 139.04226685]
[119.62843323 129.74468994]
[108.91690826 119.24405670]
[92.54669952 119.85681915]
[80.62283325 108.62380981]
[80.25859070 92.24619293]
[69.13806915 82.17971039]
[58.01754379 72.11323547]
[42.59404373 68.58815002]
[38.35093689 54.31071091]
[29.64088249 50.73932266]
[26.99860001 43.61612320]
[16.28707695 33.11549377]
[5.57555246 22.61486053]
[-5.13597155 12.11423016]
[-15.84749508 1.61359918]
[-31.12567711 4.32594395]
[-45.06550598 -2.49027300]
[-52.30683136 -16.21407700]
[-50.06521988 -31.56838608]
[-39.20261383 -42.64915466]
[-23.89590836 -45.19560242]
[-10.03084373 -38.22856522]
[-2.93881941 -24.42701340]
[-5.34686422 -9.09792519]
[5.36465979 1.40270638]
[16.07618332 11.90333748]
[26.78770828 22.40396881]
[37.49923325 32.90459824]
[48.41741562 43.19018555]
[63.04549789 45.99525070]
[68.08402252 60.99271393]
[79.20454407 71.05918884]
[90.32506561 81.12566376]
[102.97957611 79.00078583]
[114.54351044 84.56201935]
[120.78423309 95.77384949]
[119.41753387 108.53253174]
[130.12905884 119.03315735]
[148.83244324 110.36072540]
[169.40579224 109.93984985]
[188.37699890 117.81056213]
[202.55680847 132.61616516]
[209.57496643 151.83697510]
[208.27636719 172.21911621]
[221.98760986 178.30200195]
[235.69886780 184.38487244]
[249.41012573 190.46775818]
[265.16232300 188.99153137]
[273.65844727 201.22531128]
[287.36968994 207.30818176]
[301.08096313 213.39106750]
[315.73602295 207.47460938]
[330.24942017 213.73056030]
[336.01058960 228.44735718]
[329.60156250 242.89379883]
[314.82467651 248.49906921]
[300.44680786 241.93765259]
[294.99807739 227.10232544]
[281.28680420 221.01943970]
[267.57556152 214.93656921]
[252.80409241 216.84786987]
[243.32725525 204.17901611]
[229.61599731 198.09613037]
[215.90473938 192.01325989]
[202.19348145 185.93037415]
[195.60868835 194.20448303]
[187.41603088 200.90298462]
[177.98440552 205.71990967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 48]
[12 47]
[15 43]
[16 42]
[17 41]
[19 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[54 75]
[55 74]
[56 73]
[57 72]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
