%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGUGGCGCCGGGGAUUGGGAGGGCUUCUUGCAGGCUGCUGGGCUGGGGCUAAGGGCUGCUCAGUUUCCUUCAGCGGGGCACUGGGAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[130.24815369 126.17650604]
[124.60094452 113.82294464]
[110.04130554 110.21506500]
[96.55473328 113.90343475]
[86.35082245 104.34457397]
[71.09476471 108.53544617]
[60.60214615 97.96406555]
[46.04249954 94.35618591]
[31.48285675 90.74831390]
[16.92321205 87.14044189]
[7.64350557 88.11445618]
[1.95432281 83.17280579]
[-12.48085594 79.09535980]
[-26.91603470 75.01790619]
[-41.35121536 70.94045258]
[-56.73497391 74.63510895]
[-66.87977600 63.72949982]
[-84.51143646 68.72245026]
[-96.35661316 55.88576508]
[-110.91625977 52.27789307]
[-125.47589874 48.67001724]
[-140.73194885 52.86088943]
[-151.22457886 42.28950500]
[-165.78422546 38.68162918]
[-180.34387207 35.07375717]
[-194.77056885 42.09156418]
[-209.18963623 35.05805588]
[-212.53997803 19.36873436]
[-202.25151062 7.05910778]
[-186.21665955 7.57206631]
[-176.73599243 20.51411247]
[-162.17634583 24.12198639]
[-147.61669922 27.72986031]
[-133.40205383 23.28093147]
[-121.86802673 34.11037445]
[-107.30838013 37.71824646]
[-92.74873352 41.32612228]
[-82.10993958 35.32218552]
[-69.85890198 38.34905624]
[-62.80232239 49.29431915]
[-48.45106125 45.30802155]
[-37.27376175 56.50527573]
[-22.83858490 60.58272934]
[-8.40340519 64.66017914]
[6.03177404 68.73763275]
[20.53108597 72.58079529]
[35.09073257 76.18866730]
[49.65037537 79.79654694]
[64.21002197 83.40441895]
[78.42466736 78.95549011]
[89.95869446 89.78493500]
[103.44526672 86.09656525]
[113.64917755 95.65542603]
[128.20881653 99.26329803]
[142.91632080 89.96299744]
[159.49702454 94.00440216]
[167.93704224 108.45053864]
[183.04937744 103.76784515]
[193.87882996 113.99391174]
[208.54766846 117.12842560]
[223.21650696 120.26293945]
[238.32884216 115.58024597]
[249.15827942 125.80631256]
[263.82711792 128.94082642]
[278.49597168 132.07534790]
[293.16479492 135.20985413]
[307.83364868 138.34436035]
[322.50247192 141.47888184]
[337.61483765 136.79618835]
[348.44427490 147.02226257]
[363.11309814 150.15676880]
[377.78195190 153.29129028]
[392.45077515 156.42579651]
[406.64266968 148.94450378]
[421.28192139 155.50741577]
[425.13858032 171.08001709]
[415.25408936 183.71633911]
[399.21105957 183.72288513]
[389.31625366 171.09463501]
[374.64743042 167.96012878]
[359.97857666 164.82560730]
[345.30975342 161.69110107]
[331.24661255 166.59799194]
[319.36798096 156.14772034]
[304.69912720 153.01319885]
[290.03027344 149.87869263]
[275.36145020 146.74418640]
[260.69259644 143.60966492]
[246.02377319 140.47515869]
[231.96064758 145.38204956]
[220.08198547 134.93177795]
[205.41314697 131.79725647]
[190.74430847 128.66275024]
[176.68118286 133.56964111]
[164.80252075 123.11937714]
[154.97416687 131.62203979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[5 51]
[7 49]
[8 48]
[9 47]
[10 46]
[12 45]
[13 44]
[14 43]
[15 42]
[17 40]
[19 37]
[20 36]
[21 35]
[23 33]
[24 32]
[25 31]
[57 95]
[59 93]
[60 92]
[61 91]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[70 82]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
