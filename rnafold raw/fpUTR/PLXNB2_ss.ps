%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGGCGGCGGACGUGCAGAGAAUCUCGAUGCUGGCCUGGAGCAGAAACUGAGCUGGACCACUGGAGCCUCGGUGAGGGGGUGCGGGGGGCA\
) } def
/len { sequence length } bind def

/coor [
[117.37944794 397.86108398]
[115.87801361 382.93640137]
[114.37657928 368.01174927]
[112.87514496 353.08706665]
[103.90275574 341.19821167]
[110.21986389 326.69287109]
[108.71842194 311.76818848]
[107.21698761 296.84353638]
[98.24460602 284.95465088]
[104.56170654 270.44931030]
[93.45607758 263.68719482]
[88.25364685 251.55761719]
[91.09170532 238.46772766]
[101.14004517 229.31816101]
[92.56993866 217.13610840]
[99.36820984 202.84996033]
[98.36631775 187.88345337]
[97.36443329 172.91694641]
[88.79431915 160.73489380]
[95.59259033 146.44874573]
[94.59070587 131.48223877]
[93.58881378 116.51573944]
[85.54981232 110.25012207]
[82.29343414 100.59199524]
[84.89745331 90.73793030]
[92.50000000 83.94936371]
[92.50000000 68.94936371]
[92.50000000 53.94936371]
[84.76270294 40.14919281]
[92.50000000 27.42192078]
[89.31974792 18.63756752]
[92.75902557 11.92279053]
[89.87407684 3.03707433]
[93.53580475 -3.55902958]
[94.53769684 -18.52553368]
[95.53958893 -33.49203491]
[88.74131012 -47.77818680]
[97.31142426 -59.96023941]
[98.31331635 -74.92674255]
[99.31520081 -89.89324951]
[100.31709290 -104.85974884]
[90.19047546 -116.69568634]
[91.41973877 -131.85957336]
[102.76590729 -141.44081116]
[103.76779175 -156.40731812]
[104.76968384 -171.37382507]
[99.79478455 -187.58143616]
[113.99180603 -196.84863281]
[126.82696533 -185.77185059]
[119.73619080 -170.37193298]
[118.73429871 -155.40542603]
[117.73240662 -140.43893433]
[127.70028687 -129.43087769]
[126.89743042 -114.23844910]
[115.28359222 -103.85786438]
[114.28170776 -88.89135742]
[113.27981567 -73.92485809]
[112.27792358 -58.95835114]
[119.14785767 -45.74270630]
[110.50608826 -32.49014664]
[109.50419617 -17.52364349]
[108.50231171 -2.55714011]
[107.75064850 12.42401505]
[107.50000000 27.42192078]
[115.23729706 40.14919281]
[107.50000000 53.94936371]
[107.50000000 68.94936371]
[107.50000000 83.94936371]
[117.70656586 99.40800476]
[108.55531311 115.51384735]
[109.55720520 130.48034668]
[110.55909729 145.44685364]
[119.20086670 158.69941711]
[112.33093262 171.91505432]
[113.33282471 186.88156128]
[114.33470917 201.84806824]
[122.97648621 215.10063171]
[116.10655212 228.31626892]
[129.44519043 239.48300171]
[130.65849304 256.50057983]
[119.48637390 268.94787598]
[128.56614685 281.90426636]
[122.14165497 295.34210205]
[123.64308929 310.26675415]
[125.14453125 325.19143677]
[134.22430420 338.14782715]
[127.79981232 351.58563232]
[129.30123901 366.51031494]
[130.80268860 381.43496704]
[132.30412292 396.35964966]
[142.31802368 409.34631348]
[135.82881165 424.40692139]
[119.51201630 426.04843140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[6 85]
[7 84]
[8 83]
[10 81]
[14 78]
[16 76]
[17 75]
[18 74]
[20 72]
[21 71]
[22 70]
[26 68]
[27 67]
[28 66]
[30 64]
[32 63]
[34 62]
[35 61]
[36 60]
[38 58]
[39 57]
[40 56]
[41 55]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
