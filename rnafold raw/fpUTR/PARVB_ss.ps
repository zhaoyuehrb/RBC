%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGGCCCUACACUUUGACGUCCUCCCCAUCUCCGGCAGCUCCUUAAACUAAGAACUCAUUUUAAUUUCUGAAUUCUCCCUUUUUAAAGACCAGAUAAAUUUACCUUUGGGACAGUUAGAUGUGCACAA\
) } def
/len { sequence length } bind def

/coor [
[86.25310516 455.22326660]
[72.04166412 460.44949341]
[56.90322495 460.77563477]
[42.47989273 456.16625977]
[30.33620453 447.12139893]
[21.78941727 434.62216187]
[17.76662064 420.02435303]
[18.70417976 404.91143799]
[24.50039291 390.92279053]
[34.52653122 379.57574463]
[47.69503403 372.10116577]
[62.57748032 369.30984497]
[64.72838593 354.46487427]
[66.87929535 339.61987305]
[68.85204315 324.75018311]
[70.64636230 309.85787964]
[72.44067383 294.96557617]
[74.23499298 280.07330322]
[76.02930450 265.18099976]
[77.82361603 250.28869629]
[79.43923950 235.37596130]
[80.87593079 220.44493103]
[82.31262207 205.51388550]
[83.74931335 190.58285522]
[85.18600464 175.65180969]
[55.45797348 162.91787720]
[33.56935501 139.11036682]
[23.37256241 108.41941071]
[8.37364006 108.59926605]
[-2.48615360 120.08144379]
[-18.28641891 120.43801880]
[-29.65314102 109.45743561]
[-29.84264183 93.65428162]
[-18.74249649 82.40428925]
[-2.93822360 82.38188171]
[8.19378185 93.60034180]
[23.19270325 93.42048645]
[24.03140068 86.90715790]
[25.42141342 80.48884583]
[27.35265732 74.21212769]
[29.81111526 68.12255859]
[32.77894592 62.26432800]
[36.23461533 56.67995453]
[40.15303802 51.40996170]
[29.48303604 40.86714172]
[18.81303406 30.32431984]
[8.14303303 19.78149986]
[-7.37356997 12.94985485]
[-5.10433102 -3.85154080]
[11.66864681 -6.32207394]
[18.68585396 9.11149788]
[29.35585594 19.65431976]
[40.02585602 30.19713974]
[50.69585800 40.73995972]
[56.48373795 36.36835861]
[62.65687180 32.56008911]
[69.16059875 29.34886932]
[75.93735504 26.76312447]
[82.92713165 24.82574844]
[90.06806183 23.55389214]
[97.29691315 22.95881653]
[104.54970551 23.04578590]
[111.76220703 23.81403542]
[118.87058258 25.25676155]
[125.81189728 27.36119080]
[132.52470398 30.10869217]
[138.94955444 33.47494507]
[145.02958679 37.43014526]
[150.71098328 41.93928146]
[161.63072205 31.65534973]
[172.55046082 21.37141991]
[183.47021484 11.08749104]
[183.17416382 0.08947100]
[188.91087341 -9.03872108]
[198.54609680 -13.36110592]
[208.74287415 -11.64892387]
[220.14311218 -21.39748192]
[231.54336548 -31.14603806]
[228.65652466 -46.23118973]
[233.71418762 -60.73345184]
[245.35585022 -70.75179291]
[260.44998169 -73.59133148]
[274.93630981 -68.48824310]
[284.91812134 -56.81523514]
[287.71032715 -41.71228409]
[282.56185913 -27.24201012]
[270.85760498 -17.29684448]
[255.74598694 -14.55198765]
[241.29191589 -19.74579239]
[229.89167786 -9.99723434]
[218.49142456 -0.24867731]
[213.51593018 18.37597847]
[193.75413513 22.00723457]
[182.83439636 32.29116440]
[171.91465759 42.57509232]
[160.99490356 52.85902405]
[167.69270325 63.11709976]
[172.68084717 74.30669403]
[175.83334351 86.14520264]
[177.07057190 98.33363342]
[176.36131287 110.56414795]
[173.72344971 122.52785492]
[169.22361755 133.92259216]
[162.97544861 144.46057129]
[155.13677979 153.87565613]
[145.90556335 161.93003845]
[135.51493835 168.42031860]
[124.22735596 173.18255615]
[112.32788086 176.09648132]
[100.11704254 177.08850098]
[98.68035126 192.01954651]
[97.24365997 206.95057678]
[95.80696869 221.88162231]
[94.37027740 236.81265259]
[96.67871094 245.75578308]
[92.71591187 252.08302307]
[90.92160034 266.97531128]
[89.12728119 281.86761475]
[87.33296967 296.75988770]
[85.53865814 311.65219116]
[83.74433899 326.54449463]
[85.83766174 335.54040527]
[81.72428131 341.77078247]
[79.57337189 356.61578369]
[77.42247009 371.46075439]
[90.90065002 378.36129761]
[101.40615845 389.26602173]
[107.79943085 402.99206543]
[109.38697052 418.05056763]
[105.99657440 432.80807495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 125]
[13 124]
[14 123]
[15 121]
[16 120]
[17 119]
[18 118]
[19 117]
[20 116]
[21 114]
[22 113]
[23 112]
[24 111]
[25 110]
[28 37]
[29 36]
[44 54]
[45 53]
[46 52]
[47 51]
[69 96]
[70 95]
[71 94]
[72 93]
[76 91]
[77 90]
[78 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
