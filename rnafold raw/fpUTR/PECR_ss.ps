%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCCCGCCCGCCUCGAAUGUCCCUGAGACCCAGAAGGGCCUGCGCUCAGCUGCUCUGGCACCCCGCUGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[146.00459290 156.51371765]
[139.42907715 142.85174561]
[139.43740845 127.62802887]
[125.96154022 121.04008484]
[112.48567963 114.45213318]
[98.74752045 119.05747986]
[85.73026276 112.69373322]
[80.92637634 99.02373505]
[67.45050812 92.43578339]
[53.97464752 85.84783173]
[40.49877930 79.25988770]
[30.08448410 83.48857117]
[19.31468582 81.16855621]
[11.87317276 73.35021973]
[10.16021824 62.91951752]
[-2.72559118 55.24124146]
[-15.11219311 61.64991379]
[-28.93539047 61.03007126]
[-40.51446152 53.65579605]
[-46.82064056 41.58514023]
[-46.26906204 28.08692169]
[-58.82656097 19.88269806]
[-71.38405609 11.67847633]
[-87.31754303 13.55023956]
[-98.61345673 2.15804958]
[-96.60652924 -13.75897884]
[-82.83631134 -21.99066544]
[-67.86613464 -16.22236252]
[-63.17983627 -0.87902057]
[-50.62233734 7.32520199]
[-38.06484222 15.52942371]
[-23.06549644 9.19521809]
[-7.06207514 12.98623180]
[3.71507740 25.62613487]
[4.95268440 42.35543060]
[17.83849335 50.03370667]
[36.94436264 48.59176254]
[47.08673096 65.78401947]
[60.56259537 72.37197113]
[74.03845978 78.95991516]
[87.51432037 85.54786682]
[101.25247955 80.94252014]
[114.26973724 87.30626678]
[119.07362366 100.97626495]
[132.54948425 107.56421661]
[146.02536011 114.15216827]
[158.03388977 104.79500580]
[172.85386658 101.59265137]
[187.53454590 105.12792969]
[199.17660522 114.64755249]
[205.50483704 128.22190857]
[205.31260681 143.13594055]
[218.78846741 149.72389221]
[232.26434326 156.31184387]
[245.74020386 162.89978027]
[260.52694702 158.00184631]
[274.09954834 164.87493896]
[278.67785645 179.00202942]
[292.15371704 185.58996582]
[305.62957764 192.17791748]
[321.94366455 190.50981140]
[331.32467651 203.96078491]
[324.12222290 218.69363403]
[307.74557495 219.55245972]
[299.04162598 205.65379333]
[285.56576538 199.06584167]
[272.08990479 192.47789001]
[258.12960815 197.54199219]
[244.36930847 191.05285645]
[239.15225220 176.37565613]
[225.67639160 169.78770447]
[212.20053101 163.19975281]
[198.72465515 156.61180115]
[187.07345581 165.92388916]
[172.47450256 169.26756287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 46]
[4 45]
[5 44]
[8 41]
[9 40]
[10 39]
[11 38]
[15 36]
[16 35]
[21 31]
[22 30]
[23 29]
[52 73]
[53 72]
[54 71]
[55 70]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
