%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACACAUCAGGAGGUGGCCUUGAGAAGCUGAGCGGAGACCGGCUAGACUUUACUCAAAGAAACCAAGAGACUGUUACC\
) } def
/len { sequence length } bind def

/coor [
[91.39643860 344.55261230]
[81.31959534 332.87097168]
[79.18061066 317.59262085]
[85.66203308 303.59280396]
[98.69566345 295.33883667]
[98.69566345 280.33883667]
[98.69566345 265.33883667]
[98.40115356 250.34172058]
[97.81225586 235.35328674]
[84.56719971 228.53904724]
[76.45736694 215.92608643]
[75.74501038 200.84765625]
[82.72145844 187.34855652]
[95.60206604 179.10008240]
[95.01316833 164.11164856]
[94.42427063 149.12321472]
[83.34656525 139.23281860]
[82.53582001 124.04080200]
[92.98488617 112.48854065]
[85.68709564 100.56235504]
[92.02667236 88.10035706]
[91.43777466 73.11192322]
[90.84887695 58.12348557]
[90.25998688 43.13505173]
[89.67108917 28.14661598]
[88.49420166 13.19285583]
[86.73114014 -1.70317137]
[84.96807861 -16.59919739]
[82.91289520 -31.45773888]
[80.56637573 -46.27306366]
[78.21985626 -61.08839035]
[65.71783447 -70.38016510]
[63.54917908 -85.43843842]
[72.48451233 -97.29994965]
[70.13799286 -112.11527252]
[67.79148102 -126.93059540]
[59.34179306 -141.62886047]
[71.12654114 -153.81721497]
[86.10091400 -145.86709595]
[82.60680389 -129.27711487]
[84.95331573 -114.46179199]
[87.29983521 -99.64646149]
[99.46324921 -91.12666321]
[102.05400085 -76.13524628]
[93.03518677 -63.43490601]
[95.38169861 -48.61957932]
[97.72821808 -33.80425644]
[101.99813843 -27.52523994]
[99.86410522 -18.36225891]
[101.62716675 -3.46623230]
[103.39022827 11.42979431]
[106.73455048 15.17661476]
[107.57757568 21.14133835]
[104.65952301 27.55771828]
[105.24842072 42.54615402]
[105.83731842 57.53458786]
[106.42621613 72.52302551]
[107.01511383 87.51145935]
[114.31290436 99.43764496]
[107.97332764 111.89964294]
[119.29656219 122.59646606]
[119.68027496 137.80526733]
[109.41270447 148.53431702]
[110.00160217 163.52275085]
[110.59049988 178.51118469]
[124.07856750 185.72363281]
[132.09263611 198.63375854]
[132.56550598 213.72158813]
[125.47028351 226.93196106]
[112.80069733 234.76438904]
[113.38959503 249.75282288]
[116.93075562 258.46914673]
[113.69566345 265.33883667]
[113.69566345 280.33883667]
[113.69566345 295.33883667]
[126.72929382 303.59280396]
[133.21070862 317.59262085]
[131.07173157 332.87097168]
[120.99488831 344.55261230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 75]
[6 74]
[7 73]
[8 71]
[9 70]
[14 65]
[15 64]
[16 63]
[19 60]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 51]
[27 50]
[28 49]
[29 47]
[30 46]
[31 45]
[34 42]
[35 41]
[36 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
