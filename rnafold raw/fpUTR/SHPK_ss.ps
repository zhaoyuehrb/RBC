%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGGCAGGCGACUCCCCGCCCCUGCCCCGCCCCCCUGGGCGAAGAGCGCGGACUUGUGGGGCCGCUGGCUGCAGACUGGAGCUGCGCGGGUCAGGGAGAUA\
) } def
/len { sequence length } bind def

/coor [
[116.98260498 262.33642578]
[105.32817078 271.77963257]
[91.09469604 276.51336670]
[76.10600281 275.93103027]
[62.28268433 270.10729980]
[51.39600754 259.78839111]
[44.84095001 246.29647827]
[43.45744705 231.36042786]
[47.42288589 216.89381409]
[35.34111786 225.78375244]
[23.25935173 234.67369080]
[11.17758560 243.56361389]
[9.04767990 259.22372437]
[-3.58216190 268.72439575]
[-19.21887779 266.42904663]
[-28.58548355 253.69946289]
[-26.12493515 238.08789062]
[-13.29703522 228.85638428]
[2.28765249 231.48185730]
[14.36941910 222.59191895]
[26.45118713 213.70198059]
[38.53295517 204.81205750]
[48.30908585 193.43544006]
[55.27993393 180.15361023]
[62.25077820 166.87176514]
[69.22162628 153.58992004]
[75.99108124 140.20431519]
[82.55759430 126.71799469]
[89.12411499 113.23167419]
[85.53437805 98.66754150]
[73.45261383 89.77761078]
[61.37084198 80.88768005]
[49.28907776 71.99774933]
[37.20730972 63.10781479]
[20.85771751 61.83388901]
[14.03126335 46.92310333]
[23.75041771 33.71439362]
[40.01694870 35.79574585]
[46.09724426 51.02604675]
[58.17900848 59.91597748]
[70.26077271 68.80591583]
[82.34254456 77.69584656]
[94.42430878 86.58577728]
[89.91700745 72.27899170]
[98.96969604 60.31868744]
[113.96285248 60.77169418]
[122.27693939 73.25672150]
[116.91404724 87.26534271]
[129.51052856 79.12110901]
[142.10700989 70.97687531]
[154.70350647 62.83264160]
[167.29998779 54.68840790]
[179.89646912 46.54417038]
[185.52172852 39.13058472]
[192.99868774 38.35087967]
[205.83541870 30.59081268]
[218.18017578 22.06984138]
[224.27169800 7.46834040]
[239.06213379 5.70986652]
[250.86988831 -3.54091668]
[256.96142578 -18.14241791]
[271.75186157 -19.90089226]
[283.55960083 -29.15167618]
[295.36737061 -38.40245819]
[307.17510986 -47.65324020]
[315.91452026 -62.18111038]
[332.29394531 -57.80495453]
[332.62307739 -40.85420227]
[316.42590332 -35.84548950]
[304.61813354 -26.59470558]
[292.81039429 -17.34392357]
[281.00262451 -8.09313965]
[275.75567627 5.84668398]
[260.12066650 8.26683521]
[248.31291199 17.51761818]
[243.06596375 31.45744324]
[227.43095398 33.87759399]
[227.03488159 36.81534958]
[225.35147095 39.75594711]
[222.38017273 42.16841125]
[218.32768250 43.53486633]
[213.59547424 43.42753220]
[200.75875854 51.18759918]
[188.04071045 59.14065933]
[175.44421387 67.28488922]
[162.84773254 75.42913055]
[150.25125122 83.57336426]
[137.65476990 91.71759796]
[125.05828094 99.86183167]
[102.61043549 119.79818726]
[96.04391479 133.28451538]
[89.47740173 146.77082825]
[88.49874878 156.02539062]
[82.50347137 160.56077576]
[75.53262329 173.84260559]
[68.56177521 187.12445068]
[61.59092712 200.40629578]
[75.29593658 194.30934143]
[90.27011871 193.42965698]
[104.59474182 197.87995911]
[116.43430328 207.08999634]
[124.27173615 219.87962341]
[127.10276794 234.61004639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 22]
[10 21]
[11 20]
[12 19]
[23 97]
[24 96]
[25 95]
[26 94]
[27 92]
[28 91]
[29 90]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[48 89]
[49 88]
[50 87]
[51 86]
[52 85]
[53 84]
[55 83]
[56 82]
[57 77]
[59 75]
[60 74]
[62 72]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
