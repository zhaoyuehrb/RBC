%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGGGCGUGCGCAGCCGCAGAGCGCCGCAGCCUCGCCAGCUCGCCCCGGCACUGCGCACUUGCCAGCCAGUCCGCCCGUCCGGAGCCCGGCUCGCUGGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[126.56521606 214.31246948]
[141.56593323 214.19078064]
[133.62544250 201.46487427]
[125.68495941 188.73896790]
[117.74446869 176.01306152]
[109.80397797 163.28715515]
[101.86349487 150.56124878]
[93.92300415 137.83535767]
[78.83205414 100.52465820]
[65.55809021 93.53881836]
[52.28413391 86.55297852]
[39.01017380 79.56713867]
[25.73621178 72.58129120]
[12.46225262 65.59545135]
[-0.81170779 58.60961151]
[-14.28502655 52.01645660]
[-27.94609070 45.82167435]
[-41.60715485 39.62688828]
[-55.26821518 33.43210602]
[-72.57814789 40.81797409]
[-89.56698608 33.48272324]
[-95.84364319 16.41021919]
[-109.84471893 11.02784729]
[-123.84579468 5.64547634]
[-137.84686279 0.26310509]
[-149.53303528 7.14792728]
[-162.85241699 6.01026917]
[-172.90318298 -2.50397253]
[-176.11807251 -15.07620144]
[-189.95510864 -20.86727524]
[-204.48156738 -14.64171314]
[-219.12422180 -20.58882141]
[-225.19584656 -35.18028641]
[-219.09426880 -49.75925064]
[-204.43942261 -55.67627335]
[-189.92578125 -49.42088699]
[-184.16403198 -34.70430756]
[-170.32699585 -28.91323471]
[-155.13745117 -35.96371460]
[-139.20768738 -29.79705238]
[-132.46449280 -13.73796940]
[-118.46342468 -8.35559750]
[-104.46234894 -2.97322679]
[-90.46127319 2.40914464]
[-81.12577820 -4.46437550]
[-69.50279999 -5.92053938]
[-58.53612137 -1.47162926]
[-51.06147003 7.85930204]
[-49.07343292 19.77104187]
[-35.41236877 25.96582603]
[-21.75130653 32.16061020]
[-8.09024239 38.35539246]
[-3.24817991 37.47757339]
[2.18071747 39.74645615]
[6.17413378 45.33565140]
[19.44809341 52.32149506]
[32.72205353 59.30733490]
[45.99601364 66.29317474]
[59.26997375 73.27901459]
[72.54393768 80.26486206]
[85.81789398 87.25070190]
[77.10858154 75.03809357]
[78.83695221 60.13800049]
[90.11065674 50.24337769]
[105.10905457 50.46283722]
[116.08843231 60.68307495]
[117.38011932 75.62735748]
[108.31546783 87.58100128]
[121.78878784 80.98784637]
[126.67692566 65.95848083]
[140.79843140 58.86211014]
[155.77528381 63.90887833]
[162.72195435 78.10462952]
[157.51712036 93.02726746]
[143.24871826 99.82347107]
[128.38194275 94.46115875]
[114.90862274 101.05431366]
[112.84369659 108.26445007]
[108.71383667 122.68472290]
[106.64891052 129.89486694]
[114.58940125 142.62077332]
[122.52988434 155.34667969]
[130.47036743 168.07257080]
[138.41085815 180.79847717]
[146.35134888 193.52438354]
[154.29183960 206.25028992]
[163.14421082 218.35960388]
[172.86079407 229.78712463]
[182.57736206 241.21463013]
[192.29394531 252.64215088]
[207.57009888 250.48748779]
[221.57656860 256.95452881]
[229.84390259 269.97970581]
[229.73405457 285.40667725]
[221.28207397 298.31277466]
[207.18495178 304.57971191]
[191.94102478 302.20773315]
[180.41458130 291.95373535]
[176.28366089 277.08972168]
[180.86643982 262.35873413]
[171.14985657 250.93121338]
[161.43327332 239.50370789]
[151.71669006 228.07618713]
[147.05003357 242.33178711]
[133.10266113 247.85182190]
[119.94406891 240.65101624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 52]
[17 51]
[18 50]
[19 49]
[22 44]
[23 43]
[24 42]
[25 41]
[29 38]
[30 37]
[68 77]
[69 76]
[87 103]
[88 102]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
