%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUUCCGUGUUGUGGGGCUCAGCUGGUUCAUUUAUGUUGUUUUUCCUGUACCUAAGUUCCCGCUGUAGGUGGUACCUUUGCAGACGGUGCG\
) } def
/len { sequence length } bind def

/coor [
[77.12683868 105.63037872]
[62.17807007 104.39169312]
[47.22930145 103.15299988]
[32.28053284 101.91430664]
[17.33176613 100.67562103]
[6.09198284 114.68927765]
[-11.12116814 119.25985718]
[-27.54456139 112.78142548]
[-36.83760452 97.95238495]
[-51.83555603 97.70437622]
[-66.83350372 97.45636749]
[-81.83145142 97.20835876]
[-91.74302673 105.66300964]
[-104.35144806 105.03287506]
[-112.81123352 96.21376038]
[-127.79278564 95.47000885]
[-142.77433777 94.72624969]
[-157.75588989 93.98249817]
[-172.73744202 93.23873901]
[-186.90428162 100.28225708]
[-199.23225403 91.92340851]
[-210.77824402 102.71532440]
[-226.57049561 102.09862518]
[-237.23974609 90.43917084]
[-236.45610046 74.65431976]
[-224.68450928 64.10894775]
[-208.90882874 65.05942535]
[-198.48849487 76.94185638]
[-185.39323425 69.84513855]
[-171.99368286 78.25718689]
[-157.01213074 79.00094604]
[-142.03057861 79.74470520]
[-127.04902649 80.48845673]
[-112.06748199 81.23221588]
[-97.02846527 72.35508728]
[-81.58344269 82.21041107]
[-66.58549500 82.45841980]
[-51.58754349 82.70642853]
[-36.58959579 82.95443726]
[-30.67975807 72.09679413]
[-20.60861969 64.80328369]
[-8.30576324 62.54890442]
[3.83793950 65.83567810]
[13.43495369 74.08250427]
[18.57045746 85.72685242]
[33.51922607 86.96553802]
[48.46799088 88.20423126]
[63.41675949 89.44292450]
[78.36552429 90.68161011]
[89.26158905 76.54396820]
[108.43134308 73.25912476]
[126.11647034 84.67675018]
[138.93836975 76.89221191]
[151.76025391 69.10766602]
[164.58213806 61.32312012]
[177.40403748 53.53857803]
[190.22592163 45.75403595]
[202.91735840 37.75856018]
[215.47485352 29.55433655]
[228.03234863 21.35011292]
[234.95030212 6.48155403]
[251.30740356 5.30811596]
[260.27688599 19.03693199]
[252.63171387 33.54497528]
[236.23657227 33.90761185]
[223.67907715 42.11183167]
[211.12158203 50.31605530]
[207.16592407 56.73674774]
[198.01046753 58.57592392]
[185.18858337 66.36046600]
[172.36668396 74.14501190]
[159.54479980 81.92955780]
[146.72290039 89.71409607]
[133.90101624 97.49864197]
[131.67706299 112.33286285]
[141.65243530 123.53518677]
[151.62779236 134.73750305]
[161.60316467 145.93983459]
[171.57853699 157.14215088]
[186.80142212 154.63871765]
[200.95210266 160.78376770]
[209.51515198 173.61645508]
[209.75813293 189.04190063]
[201.60350037 202.13790894]
[187.65336609 208.72558594]
[172.35919189 206.70285034]
[160.60127258 196.71510315]
[156.13151550 181.94944763]
[160.37622070 167.11752319]
[150.40084839 155.91519165]
[140.42547607 144.71287537]
[130.45010376 133.51055908]
[120.47473907 122.30822754]
[101.45454407 128.00082397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[9 39]
[10 38]
[11 37]
[12 36]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[21 28]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 67]
[59 66]
[60 65]
[75 93]
[76 92]
[77 91]
[78 90]
[79 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
