%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGGCGGCGCGCUCCGAGCCUGCGUCUAGGGCGCCCCCGGGUCAGAGCUGUCGCCGUGGCCGCCGCUGCAAGAACC\
) } def
/len { sequence length } bind def

/coor [
[128.39379883 375.24374390]
[138.99716187 363.91464233]
[136.03425598 349.21020508]
[133.07135010 334.50573730]
[130.10842896 319.80126953]
[127.14552307 305.09680176]
[124.18260956 290.39236450]
[121.21969604 275.68789673]
[118.25679016 260.98342896]
[115.29387665 246.27897644]
[112.33096313 231.57450867]
[107.80007935 225.47592163]
[109.55483246 216.22711182]
[107.17885590 201.41647339]
[104.80288696 186.60585022]
[95.14729309 175.26483154]
[100.60099030 160.41329956]
[98.22502136 145.60267639]
[93.94017792 139.32878113]
[96.06124115 130.15702820]
[94.27596283 115.26364899]
[85.46806335 107.38691711]
[84.29526520 95.62908173]
[91.37375641 86.16773987]
[90.18199921 71.21515656]
[88.99024963 56.26256943]
[80.18098450 43.12075424]
[86.88263702 29.81898499]
[85.69088745 14.86640167]
[73.94624329 4.63404465]
[72.95064545 -10.54697704]
[82.77801514 -21.68063927]
[81.58625793 -36.63322449]
[80.39450836 -51.58580399]
[71.58523560 -64.72762299]
[78.28689575 -78.02938843]
[68.54433441 -91.22084808]
[75.34432983 -106.14371490]
[91.69164276 -107.44663239]
[100.76954651 -93.78926849]
[93.23947906 -79.22114563]
[101.96350098 -67.14883423]
[95.34709167 -52.77755737]
[96.53884125 -37.82497406]
[97.73059082 -22.87239265]
[109.19744110 -13.43592358]
[110.61905670 1.71114421]
[100.64347076 13.67464924]
[101.83522034 28.62723160]
[110.55924988 40.69954300]
[103.94283295 55.07081985]
[105.13458252 70.02339935]
[106.32633972 84.97598267]
[116.22114563 98.38199615]
[109.16934967 113.47837830]
[110.95462036 128.37176514]
[113.03565216 143.22669983]
[115.41162109 158.03733826]
[125.23715973 170.43771362]
[119.61351776 184.22987366]
[121.98948669 199.04051208]
[124.36545563 213.85113525]
[127.03543091 228.61160278]
[129.99833679 243.31605530]
[132.96124268 258.02050781]
[135.92416382 272.72497559]
[138.88706970 287.42944336]
[141.84997559 302.13391113]
[144.81289673 316.83834839]
[147.77580261 331.54281616]
[150.73870850 346.24728394]
[153.70162964 360.95175171]
[167.86500549 367.29040527]
[175.56843567 380.76025391]
[173.84980774 396.18185425]
[163.36996460 407.62530518]
[148.15861511 410.69033813]
[134.06483459 404.19842529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[13 62]
[14 61]
[15 60]
[17 58]
[18 57]
[20 56]
[21 55]
[24 53]
[25 52]
[26 51]
[28 49]
[29 48]
[32 45]
[33 44]
[34 43]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
