%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCUAAGCCUUAAAGAGACAGGACGGUCGAUUGGUCUGAAAUUCUUGAAGAGACAGGCGCCCGCUCCGGCCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[110.14928436 143.67869568]
[98.87384033 144.82820129]
[87.67034149 143.11398315]
[77.25448608 138.64553833]
[68.29167175 131.70832825]
[61.35445786 122.74551392]
[56.88601685 112.32965851]
[55.17179489 101.12615967]
[56.32130814 89.85071564]
[60.26111984 79.22363281]
[66.73954773 69.92378998]
[57.45313644 58.14403915]
[48.16672516 46.36428452]
[33.54689026 40.31689072]
[31.74374580 25.53183365]
[22.45733643 13.75207901]
[13.17092800 1.97232521]
[3.88451862 -9.80742836]
[-5.40189075 -21.58718300]
[-22.16150856 -20.64606094]
[-36.09587097 -29.70745087]
[-41.91695786 -45.10060120]
[-37.55329514 -60.79790878]
[-47.29501343 -72.20399475]
[-57.03673553 -83.61008453]
[-66.77845764 -95.01617432]
[-81.62444305 -100.48493195]
[-84.00665283 -115.18780518]
[-99.82306671 -117.87490082]
[-107.45716858 -131.98518372]
[-101.05271912 -146.69445801]
[-85.52266693 -150.71900940]
[-72.78034210 -140.97157288]
[-72.60056305 -124.92952728]
[-58.45137024 -120.27660370]
[-55.37236786 -104.75789642]
[-45.63064575 -93.35180664]
[-35.88892365 -81.94571686]
[-26.14720345 -70.53962708]
[-12.84275150 -72.81217957]
[-0.07390235 -68.11248779]
[8.72266865 -57.58953476]
[11.12185192 -43.97478485]
[6.37786341 -30.87359238]
[15.66427231 -19.09383774]
[24.95068169 -7.31408405]
[34.23709106 4.46567011]
[43.52349854 16.24542427]
[57.47911072 21.45025063]
[59.94647980 37.07787323]
[69.23288727 48.85762787]
[78.51930237 60.63738251]
[96.80851746 55.27136612]
[115.67433167 57.98629379]
[131.70832825 68.29167175]
[142.01370239 84.32566833]
[144.72863770 103.19148254]
[139.36260986 121.48069763]
[151.14236450 130.76710510]
[166.76998901 133.23448181]
[171.97482300 147.19009399]
[183.75457764 156.47650146]
[195.53433228 165.76290894]
[211.16195679 168.23028564]
[216.36677551 182.18588257]
[228.14653015 191.47230530]
[244.44477844 193.28868103]
[250.77209473 208.41802979]
[240.61947632 221.29656982]
[224.43107605 218.67594910]
[218.86012268 203.25204468]
[207.08036804 193.96563721]
[192.29531860 192.16250610]
[186.24792480 177.54266357]
[174.46817017 168.25625610]
[162.68841553 158.96984863]
[147.90335083 157.16670227]
[141.85595703 142.54685974]
[130.07620239 133.26045227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 52]
[12 51]
[13 50]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[23 39]
[24 38]
[25 37]
[26 36]
[28 34]
[58 79]
[59 78]
[61 76]
[62 75]
[63 74]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
