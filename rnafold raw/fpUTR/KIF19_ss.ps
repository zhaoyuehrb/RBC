%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUUGUUGGUUUCGGGUUGUCAGGCAGCGCGCGAGGCGGCGGGCAGCUAGCAGCUGGCGGACGCGACCCGGAGGCGGUGGGGGUGCGGCUGAGCCAUGCCCGGUGGCGCGGCCUGAGCCCCUCCACCUGCUGCAAUC\
) } def
/len { sequence length } bind def

/coor [
[80.45563507 210.68032837]
[72.81751251 196.16856384]
[81.79367828 182.44412231]
[82.13266754 167.44795227]
[82.47165680 152.45178223]
[82.81065369 137.45561218]
[83.14964294 122.45944214]
[85.85047913 111.49731445]
[92.40431976 103.55340576]
[76.78689575 106.08454132]
[67.48809052 94.44918823]
[53.39915466 89.30119324]
[39.31021881 84.15319824]
[25.22128105 79.00520325]
[11.13234520 73.85720062]
[-2.95659161 68.70920563]
[-17.04552841 63.56121063]
[-31.13446426 58.41321182]
[-45.22340012 53.26521683]
[-59.31233597 48.11722183]
[-73.40127563 42.96922302]
[-90.18014526 51.62267685]
[-107.68649292 45.45267868]
[-115.07477570 28.77083206]
[-130.56187439 32.00509644]
[-140.37695312 20.80181885]
[-154.68411255 16.29572296]
[-168.99128723 11.78962708]
[-183.29846191 7.28353071]
[-195.13191223 12.55179596]
[-206.99154663 8.44293880]
[-212.65377808 -2.30622172]
[-226.85546875 -7.13450146]
[-238.80496216 -2.13501096]
[-250.56871033 -6.51084042]
[-255.98657227 -17.38521957]
[-270.07550049 -22.53321457]
[-284.16442871 -27.68121147]
[-296.96392822 -18.90892220]
[-312.47418213 -19.36898613]
[-324.73120117 -28.88450050]
[-329.02191162 -43.79655457]
[-323.69644165 -58.37116241]
[-310.80258179 -67.00408173]
[-295.29821777 -66.37579346]
[-283.14514160 -56.72787094]
[-279.01644897 -41.77014923]
[-264.92752075 -36.62215042]
[-250.83856201 -31.47415543]
[-233.78456116 -35.45737457]
[-222.02717590 -21.33618164]
[-207.82550049 -16.50790215]
[-190.86587524 -20.87551689]
[-178.79235840 -7.02363873]
[-164.48519897 -2.51754284]
[-150.17802429 1.98855317]
[-135.87084961 6.49464941]
[-121.40710449 2.93807888]
[-110.56867981 14.46366310]
[-101.74961090 7.07180691]
[-90.33234406 4.87023592]
[-79.16822052 8.52783203]
[-71.10337830 17.23516464]
[-68.25328064 28.88028717]
[-54.16434097 34.02828217]
[-40.07540512 39.17628098]
[-25.98646736 44.32427597]
[-11.89753151 49.47227478]
[2.19140530 54.62026978]
[16.28034210 59.76826859]
[30.36927795 64.91626740]
[44.45821381 70.06426239]
[58.54714966 75.21225739]
[72.63608551 80.36025238]
[87.24577332 77.46089935]
[97.55232239 89.46446991]
[112.41461182 91.49236298]
[127.36769867 90.30702972]
[142.32080078 89.12168884]
[157.27388000 87.93635559]
[172.22697449 86.75102234]
[187.18006897 85.56568146]
[202.13316345 84.38034821]
[217.08625793 83.19501495]
[230.23185730 74.39138794]
[243.53074646 81.09875488]
[258.48382568 79.91341400]
[273.38815308 78.22191620]
[288.22659302 76.02619934]
[303.06500244 73.83048248]
[317.90344238 71.63476562]
[332.74185181 69.43904877]
[345.26077271 59.76500702]
[358.98355103 65.55593109]
[373.82199097 63.36021423]
[388.66040039 61.16449738]
[403.49884033 58.96878052]
[418.33724976 56.77306366]
[429.01477051 44.79933167]
[445.02496338 45.82567978]
[454.08618164 59.06478119]
[449.24743652 74.36073303]
[434.22058105 79.97978973]
[420.53295898 71.61148834]
[405.69454956 73.80720520]
[390.85610962 76.00292206]
[376.01770020 78.19863892]
[361.17926025 80.39435577]
[349.72167969 89.91134644]
[334.93756104 84.27747345]
[320.09915161 86.47319031]
[305.26071167 88.66890717]
[290.42230225 90.86462402]
[275.58389282 93.06034088]
[273.17373657 95.74235535]
[269.30938721 97.34909821]
[264.53033447 97.19387817]
[259.66915894 94.86650848]
[244.71607971 96.05184174]
[232.64002991 104.77069092]
[218.27159119 98.14810944]
[203.31849670 99.33344269]
[188.36540222 100.51877594]
[173.41230774 101.70411682]
[158.45922852 102.88945007]
[143.50613403 104.07478333]
[128.55303955 105.26012421]
[113.59994507 106.44545746]
[127.28564453 112.58562469]
[130.20623779 127.29854584]
[119.90351868 138.20056152]
[105.04912567 136.11558533]
[98.14581299 122.79843140]
[97.80682373 137.79460144]
[97.46782684 152.79077148]
[97.12883759 167.78694153]
[96.78984833 182.78311157]
[105.13666534 196.89915466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 137]
[4 136]
[5 135]
[6 134]
[7 133]
[9 76]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[24 59]
[26 57]
[27 56]
[28 55]
[29 54]
[32 52]
[33 51]
[36 49]
[37 48]
[38 47]
[77 128]
[78 127]
[79 126]
[80 125]
[81 124]
[82 123]
[83 122]
[84 121]
[86 119]
[87 118]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
