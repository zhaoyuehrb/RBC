%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGGCGUCGGGCGGCCGUCGGGACGGAAGCCGGGAGGCGCUGCCGACCGCGCCUGCGACAGCGUCAGCCCUGCGCGGAGCGCCGGCCCG\
) } def
/len { sequence length } bind def

/coor [
[83.93193054 206.10049438]
[68.20873260 204.50160217]
[58.28622437 192.20039368]
[60.05126572 176.49497986]
[72.45668030 166.70307922]
[73.97420502 151.78004456]
[75.49172974 136.85700989]
[77.00925446 121.93396759]
[69.50925446 108.94358826]
[55.82675934 102.79627991]
[42.14426804 96.64897919]
[28.46177292 90.50167084]
[14.77927876 84.35437012]
[0.15920857 89.72943115]
[-13.62921524 83.30027771]
[-18.66341782 69.32914734]
[-32.44778442 63.41381073]
[-46.33009338 57.73212814]
[-60.21240234 52.05044556]
[-75.91500854 53.98400116]
[-84.76321411 42.00240707]
[-98.64551544 36.32072449]
[-114.34812927 38.25428391]
[-123.19632721 26.27268982]
[-137.07864380 20.59100533]
[-146.41708374 20.20637321]
[-151.32862854 14.47585392]
[-167.58001709 16.67233467]
[-177.39245605 3.53277183]
[-170.67173767 -11.42597771]
[-154.33158875 -12.81563473]
[-145.18132019 0.79336029]
[-131.39695740 6.70869827]
[-117.51464844 12.39038181]
[-102.80499268 10.05043125]
[-92.96383667 22.43841743]
[-79.08152771 28.12010002]
[-64.37187195 25.78014946]
[-54.53071594 38.16813660]
[-40.64841080 43.84981918]
[-26.76610184 49.53150177]
[-19.22876930 49.14321899]
[-12.51611328 55.64665604]
[1.27256668 50.13232040]
[15.23613167 56.17164612]
[20.92658424 70.67187500]
[34.60907745 76.81917572]
[48.29157257 82.96648407]
[61.97406387 89.11378479]
[75.65656281 95.26109314]
[96.69953156 78.49530029]
[116.45009613 91.08062744]
[131.39663696 89.81536102]
[146.34317017 88.55009460]
[161.28971863 87.28482819]
[176.21275330 85.76730347]
[191.10804749 83.99795532]
[206.00332642 82.22860718]
[220.89860535 80.45925140]
[235.79388428 78.68990326]
[244.14558411 74.49423981]
[251.22100830 77.12111664]
[266.16754150 75.85585022]
[281.11410522 74.59058380]
[289.02786255 61.24322510]
[303.28890991 55.12749863]
[318.41357422 58.59503174]
[328.58612061 70.31248474]
[329.89501953 85.77426147]
[321.83691406 99.03498840]
[307.51037598 104.99564362]
[292.42419434 101.36424255]
[282.37936401 89.53712463]
[267.43280029 90.80239105]
[252.48626709 92.06765747]
[237.56323242 93.58518219]
[222.66795349 95.35453796]
[207.77267456 97.12388611]
[192.87739563 98.89323425]
[177.98211670 100.66259003]
[171.58030701 104.65996552]
[162.55497742 102.23136902]
[147.60844421 103.49663544]
[132.66189575 104.76190186]
[117.71536255 106.02716827]
[113.64763641 115.61943817]
[104.37644958 122.34661865]
[91.93229675 123.45149231]
[90.41477203 138.37452698]
[88.89724731 153.29757690]
[87.37972260 168.22061157]
[97.56010437 180.30924988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 91]
[6 90]
[7 89]
[8 88]
[9 50]
[10 49]
[11 48]
[12 47]
[13 46]
[16 43]
[17 41]
[18 40]
[19 39]
[21 37]
[22 36]
[24 34]
[25 33]
[27 32]
[52 85]
[53 84]
[54 83]
[55 82]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
