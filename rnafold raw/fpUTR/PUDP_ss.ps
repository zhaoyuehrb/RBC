%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGUGCGCGUGCGCGGGGCGGGCGGGUGCGCGCGCACUUCCUCCUCGCCCCCACCCAGACCCAGAAGGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[104.07701111 278.15417480]
[88.38795471 276.24917603]
[78.70705414 263.75695801]
[80.77781677 248.08889771]
[93.37169647 238.54061890]
[95.17974854 223.64999390]
[96.98779297 208.75935364]
[94.60145569 201.54187012]
[99.18021393 193.31002808]
[101.58638000 178.50427246]
[103.99255371 163.69851685]
[106.39871979 148.89276123]
[104.89089203 133.96875000]
[93.14323425 124.81222534]
[95.48413086 109.16515350]
[89.75795746 103.15126038]
[90.24575806 94.46659088]
[85.49573517 80.23854065]
[80.74571991 66.01049805]
[75.99569702 51.78245163]
[71.24568176 37.55440521]
[66.49565887 23.32635689]
[61.46009064 9.19684696]
[56.14101791 -4.82839632]
[44.01290894 -14.98809719]
[46.73425674 -29.63198853]
[41.41518402 -43.65723038]
[35.53568268 -57.45692444]
[29.10529518 -71.00868225]
[22.67490768 -84.56043243]
[16.24451828 -98.11219025]
[2.44826198 -106.97759247]
[3.49796367 -123.34310913]
[18.31377983 -130.37330627]
[31.65447044 -120.83611298]
[29.79627609 -104.54257965]
[36.22666550 -90.99082184]
[42.65705109 -77.43907166]
[49.08744049 -63.88731003]
[53.46417618 -61.40300369]
[56.17139435 -56.00553513]
[55.44042587 -48.97630310]
[60.75949860 -34.95106125]
[72.50715637 -25.79454041]
[70.16625977 -10.14746952]
[75.48533630 3.87777400]
[80.95246887 9.15955353]
[80.72370911 18.57633781]
[85.47372437 32.80438232]
[90.22374725 47.03243256]
[94.97376251 61.26047897]
[99.72378540 75.48852539]
[104.47380829 89.71656799]
[109.50936890 103.84608459]
[121.63748169 114.00578308]
[118.91613770 128.64967346]
[124.91450500 114.90122986]
[135.84005737 104.62348938]
[149.92904663 99.47562408]
[164.90699768 100.28868866]
[178.35594177 106.93142700]
[188.10473633 118.33146667]
[192.57960510 132.64843750]
[191.05812073 147.57107544]
[183.78591919 160.69033813]
[171.93698120 169.88830566]
[157.42416382 173.68013000]
[142.59031677 171.45364380]
[129.83016968 163.56829834]
[121.20447540 151.29893494]
[118.79830170 166.10469055]
[116.39213562 180.91044617]
[113.98596954 195.71620178]
[111.87843323 210.56739807]
[110.07038116 225.45803833]
[108.26232910 240.34866333]
[118.20520020 252.63340759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 76]
[6 75]
[7 74]
[9 73]
[10 72]
[11 71]
[12 70]
[13 56]
[15 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 46]
[24 45]
[26 43]
[27 42]
[28 39]
[29 38]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
