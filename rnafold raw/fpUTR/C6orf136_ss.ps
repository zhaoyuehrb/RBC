%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAGCCGCUUCCCUCGAGCCUGCAGUGCGCAAGCGCGGGACAUCUCCGUUUCCCUCCCUCAGCCCCUUCCCCCCCUACCCCCCCGCCCCGGCCUCCUUUCCCCUUCACGAAGCCGGCUCUGGGGCGCGCUCACCCCUGUGAGGAGGCCGGAGGUCGGACUCAGGAGGCUCCUUCUCCACUCCCGGAAGAUC\
) } def
/len { sequence length } bind def

/coor [
[64.88690948 301.83746338]
[50.04324722 303.99749756]
[35.15968704 302.13214111]
[21.30820084 296.37570190]
[9.48643970 287.14285278]
[0.54585594 275.09851074]
[-4.86960936 261.11019897]
[-6.36991024 246.18542480]
[-3.84698915 231.39910889]
[2.51744270 217.81625366]
[12.26499081 206.41514587]
[24.69359398 198.01693726]
[38.90808868 193.22651672]
[53.88468170 192.38890076]
[68.54470062 195.56442261]
[81.83225250 202.52436829]
[92.79032135 212.76745605]
[100.62833405 225.55291748]
[99.65738678 210.58436584]
[98.68643951 195.61582947]
[97.71549225 180.64729309]
[96.74454498 165.67874146]
[95.77359772 150.71020508]
[87.22869110 138.51045227]
[94.05648041 124.23838806]
[79.82430267 121.12384033]
[67.89760590 109.45311737]
[54.86692810 116.88288879]
[41.83625031 124.31266022]
[28.80557442 131.74243164]
[21.00109100 146.16539001]
[4.60295439 146.34745789]
[-3.51983833 132.10133362]
[4.98874569 118.08219910]
[21.37580490 118.71175385]
[34.40647888 111.28198242]
[47.43715668 103.85221100]
[60.46783447 96.42243958]
[56.39038086 81.98725891]
[41.39824677 82.47299194]
[26.40611458 82.95871735]
[11.41398144 83.44445038]
[-2.12840557 91.62456512]
[-15.09955120 84.30345917]
[-30.09168434 84.78918457]
[-43.72763824 93.89922333]
[-58.31344986 86.40348053]
[-58.84448624 70.01293182]
[-44.77445984 61.58877182]
[-30.57741356 69.79705048]
[-15.58527946 69.31132507]
[-3.11523080 61.16594696]
[10.92825222 68.45231628]
[25.92038536 67.96658325]
[40.91252136 67.48085785]
[55.90465164 66.99513245]
[42.51494598 60.23378372]
[27.51532173 60.12775803]
[12.86925220 56.88852692]
[-0.77610570 50.65922165]
[-12.81780910 41.71509933]
[-22.72377777 30.45136070]
[-30.05630302 17.36571693]
[-34.49138260 3.03637385]
[-35.83304977 -11.90350342]
[-34.02202225 -26.79377365]
[-29.13831520 -40.97649002]
[-21.39772987 -53.82496643]
[-11.14229298 -64.77147675]
[1.17484319 -73.33232117]
[15.00942802 -79.12924194]
[29.75015831 -81.90608215]
[44.74569321 -81.54015350]
[59.33343506 -78.04761505]
[72.86879730 -71.58279419]
[84.75370789 -62.43134308]
[94.46300507 -50.99764252]
[101.56767273 -37.78690338]
[105.75378418 -23.38285828]
[106.83635712 -8.42197418]
[104.76757812 6.43467808]
[99.63883972 20.53063774]
[91.67677307 33.24304962]
[81.22834778 44.01424026]
[76.65691376 58.30066681]
[87.51800537 47.95481110]
[98.37908936 37.60895157]
[109.15605927 27.17549515]
[119.84819031 16.65512085]
[130.45478821 6.04851866]
[140.97515869 -4.64361477]
[151.49554443 -15.33574867]
[162.01591492 -26.02788162]
[172.53628540 -36.72001648]
[183.05667114 -47.41214752]
[193.57704163 -58.10428238]
[204.09741211 -68.79641724]
[214.61778259 -79.48854828]
[225.13816833 -90.18068695]
[214.18281555 -97.93974304]
[208.50498962 -113.47380066]
[212.31513977 -133.15591431]
[220.16296387 -145.93917847]
[228.01080322 -158.72242737]
[235.85862732 -171.50567627]
[227.83264160 -185.95393372]
[228.18191528 -202.38420105]
[236.71662903 -216.31826782]
[251.02886963 -224.00601196]
[267.17117310 -223.43446350]
[274.81097412 -236.34312439]
[274.44686890 -252.73823547]
[288.60192871 -261.01867676]
[302.71466064 -252.66627502]
[302.26708984 -236.27323914]
[287.71963501 -228.70332336]
[280.07983398 -215.79466248]
[287.55322266 -204.35467529]
[289.37420654 -190.74502563]
[285.13052368 -177.61674500]
[275.59686279 -167.55192566]
[262.59414673 -162.55587769]
[248.64189148 -163.65785217]
[240.79405212 -150.87458801]
[232.94622803 -138.09133911]
[225.09838867 -125.30809021]
[229.76777649 -119.43894958]
[239.10655212 -107.70066833]
[243.77593994 -101.83152771]
[257.99609375 -106.60517120]
[272.21621704 -111.37881470]
[276.73898315 -126.22212982]
[289.14294434 -135.54531860]
[304.65847778 -135.76341248]
[317.31958008 -126.79255676]
[322.25778198 -112.08222198]
[317.57424927 -97.28884125]
[305.06988525 -88.10076904]
[289.55288696 -88.05099487]
[276.98986816 -97.15867615]
[262.76971436 -92.38503265]
[248.54959106 -87.61138916]
[235.83029175 -79.66030884]
[225.30992126 -68.96817780]
[214.78955078 -58.27604294]
[204.26916504 -47.58390808]
[193.74879456 -36.89177322]
[183.22842407 -26.19964027]
[172.70805359 -15.50750732]
[162.18766785 -4.81537390]
[151.66729736 5.87676001]
[141.14692688 16.56889343]
[138.69313049 23.55170059]
[130.36856079 27.34725380]
[119.67642975 37.86763000]
[117.10987854 44.80978775]
[108.72494507 48.47004318]
[97.86386108 58.81589890]
[87.00276947 69.16175842]
[104.13964844 68.22134399]
[118.72937012 75.76475525]
[127.07868195 89.04463196]
[127.50522614 103.98733521]
[120.63407898 116.42724609]
[109.02502441 123.26744080]
[117.63938141 136.53784180]
[110.74214172 149.73925781]
[111.71308899 164.70779419]
[112.68403625 179.67634583]
[113.65498352 194.64488220]
[114.62593079 209.61341858]
[115.59687805 224.58197021]
[119.08674622 239.17034912]
[124.99488068 252.95780945]
[130.90301514 266.74526978]
[136.81115723 280.53271484]
[142.71929932 294.32015991]
[157.87979126 297.62759399]
[168.17565918 309.23684692]
[169.64794922 324.68389893]
[161.73051453 338.02908325]
[147.46778870 344.14089966]
[132.34405518 340.66918945]
[122.17472839 328.94894409]
[120.87010193 313.48681641]
[128.93183899 300.22830200]
[123.02370453 286.44085693]
[117.11556244 272.65338135]
[111.20742798 258.86593628]
[105.29929352 245.07847595]
[104.09514618 260.03005981]
[98.95803833 274.12298584]
[90.25797272 286.34219360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 172]
[19 171]
[20 170]
[21 169]
[22 168]
[23 167]
[25 165]
[27 38]
[28 37]
[29 36]
[30 35]
[39 56]
[40 55]
[41 54]
[42 53]
[44 51]
[45 50]
[85 159]
[86 158]
[87 157]
[88 155]
[89 154]
[90 152]
[91 151]
[92 150]
[93 149]
[94 148]
[95 147]
[96 146]
[97 145]
[98 144]
[99 143]
[102 126]
[103 125]
[104 124]
[105 123]
[110 117]
[111 116]
[129 142]
[130 141]
[131 140]
[173 190]
[174 189]
[175 188]
[176 187]
[177 186]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
