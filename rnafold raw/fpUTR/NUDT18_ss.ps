%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGUGAGCUCCCGGCCCGCUGCCGCAGGGACUGGGAGCGGGCUCCGCAGCGCACUCUAGCCCGCGGCUCGGCUCAGUCGGUCUGCGAGGAUCCGGCCCGCCGCCCCCCGGGGGACCCG\
) } def
/len { sequence length } bind def

/coor [
[58.44810104 187.64559937]
[54.38288116 202.08422852]
[43.28102493 212.17129517]
[28.51998329 214.83807373]
[14.59041595 209.27325439]
[5.73002481 197.16979980]
[4.63435173 182.20986938]
[11.63633347 168.94503784]
[-2.50328922 173.95214844]
[-16.64291191 178.95924377]
[-30.78253365 183.96635437]
[-44.92215729 188.97344971]
[-59.06177902 193.98056030]
[-73.20140076 198.98765564]
[-87.34102631 203.99476624]
[-101.41389465 209.18652344]
[-115.41760254 214.56204224]
[-129.42131042 219.93756104]
[-143.35345459 225.49591064]
[-157.21163940 231.23616028]
[-166.76010132 244.56878662]
[-183.05206299 242.69683838]
[-189.32774353 227.54598999]
[-179.13127136 214.70216370]
[-162.95188904 217.37797546]
[-149.09370422 211.63772583]
[-144.05619812 206.10292053]
[-134.79682922 205.93385315]
[-120.79312134 200.55833435]
[-106.78941345 195.18281555]
[-101.60875702 189.78176880]
[-92.34812927 189.85513306]
[-78.20850372 184.84803772]
[-64.06887817 179.84092712]
[-49.92926025 174.83383179]
[-35.78963852 169.82672119]
[-21.65001488 164.81962585]
[-7.51039219 159.81251526]
[6.62923050 154.80541992]
[20.08232117 148.17108154]
[32.66238022 140.00149536]
[45.24243927 131.83190918]
[49.18694687 125.47178650]
[58.26046371 123.61815643]
[71.05006409 115.78067780]
[83.83966827 107.94319916]
[87.53196716 93.40473175]
[80.03196716 80.41435242]
[66.87611389 69.72042847]
[73.51021576 54.11834335]
[90.33906555 56.17409134]
[93.02234650 72.91435242]
[100.52234650 85.90473175]
[96.04820251 71.58753967]
[101.27420044 57.52735138]
[114.01334381 49.60812378]
[128.93450928 51.14393234]
[139.79344177 61.49205780]
[142.04583740 76.32198334]
[134.74911499 89.42762756]
[120.95556641 95.32457733]
[135.70439148 92.59104156]
[150.45321655 89.85751343]
[165.20204163 87.12397766]
[177.36111450 77.00135803]
[191.28527832 82.28973389]
[206.03410339 79.55620575]
[214.99542236 66.81523132]
[229.99177551 64.25314331]
[242.08311462 72.87491608]
[256.83193970 70.14138031]
[271.58078003 67.40784454]
[286.32958984 64.67431641]
[292.67721558 52.71130753]
[304.60021973 46.71175003]
[317.60342407 48.68473434]
[326.92886353 57.67986679]
[341.74417114 55.33334732]
[356.55950928 52.98683167]
[371.37481689 50.64031601]
[386.19015503 48.29379654]
[400.97351074 45.75355530]
[415.72232056 43.02002335]
[430.47113037 40.28649139]
[442.58294678 29.23044968]
[458.12969971 34.44879150]
[461.11819458 50.57333374]
[448.47415161 61.01652908]
[433.20468140 55.03531265]
[418.45584106 57.76884460]
[403.70703125 60.50238037]
[397.62887573 64.86887360]
[388.53668213 63.10912323]
[373.72134399 65.45564270]
[358.90603638 67.80215454]
[344.09069824 70.14867401]
[329.27536011 72.49519348]
[320.04193115 86.48471069]
[303.22775269 89.58746338]
[289.06311035 79.42314148]
[274.31430054 82.15666962]
[259.56549072 84.89020538]
[244.81665039 87.62373352]
[236.61817932 100.00600433]
[221.69970703 102.98829651]
[208.76763916 94.30503082]
[194.01881409 97.03855896]
[182.91467285 106.96566010]
[167.93557739 101.87280273]
[153.18675232 104.60633850]
[138.43792725 107.33986664]
[123.68910217 110.07340240]
[91.67714691 120.73280334]
[78.88754272 128.57028198]
[66.09793854 136.40776062]
[53.41202545 144.41197205]
[40.83196640 152.58155823]
[28.25190735 160.75114441]
[43.03865814 163.27146912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 30]
[17 29]
[18 28]
[19 26]
[20 25]
[40 118]
[41 117]
[42 116]
[44 115]
[45 114]
[46 113]
[47 53]
[48 52]
[61 112]
[62 111]
[63 110]
[64 109]
[66 107]
[67 106]
[70 103]
[71 102]
[72 101]
[73 100]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
