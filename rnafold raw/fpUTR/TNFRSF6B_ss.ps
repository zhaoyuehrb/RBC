%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGACUUGGGCGGCCCCUCCGCAGGCGGACCGGGGGCAAAGGAGGUGGCAUGUCGGUCAGGCACAGCAGGGUCCUGUGUCCGCGCUGAGCCGCGCUCUCCCUGCUCCAGCAAGGACC\
) } def
/len { sequence length } bind def

/coor [
[109.14955139 226.53547668]
[115.19589233 210.69635010]
[104.51501465 200.37866211]
[104.30133820 185.16653442]
[115.19589233 174.03341675]
[115.19589233 159.03341675]
[115.19589233 144.03341675]
[115.19589233 129.03341675]
[108.89139557 124.97097015]
[96.28241730 116.84609222]
[89.97792816 112.78365326]
[76.31840515 118.98184204]
[62.65888596 125.18002319]
[49.08308029 131.55947876]
[35.59339905 138.11909485]
[22.19223022 144.85768127]
[8.88194942 151.77407837]
[-4.42833138 158.69046021]
[-12.78887844 172.79838562]
[-29.18165588 172.34135437]
[-36.74317932 157.78953552]
[-27.69480324 144.11259460]
[-11.34471893 145.38018799]
[1.96556211 138.46379089]
[15.27584362 131.54740906]
[19.81833458 125.59498596]
[29.03379059 124.62940979]
[42.52347183 118.06980133]
[47.22280884 112.24040985]
[56.46070480 111.52050018]
[70.12022400 105.32231903]
[83.77974701 99.12413788]
[95.19879150 89.39760590]
[103.49079132 76.89789581]
[111.78279877 64.39818573]
[120.07479858 51.89847946]
[128.36679077 39.39876938]
[136.65879822 26.89906120]
[132.85386658 9.88755608]
[142.29019165 -4.36802721]
[158.77526855 -7.38973522]
[166.73158264 -20.10575104]
[174.68789673 -32.82176971]
[182.64421082 -45.53778458]
[190.43055725 -58.35858536]
[198.04554749 -71.28189850]
[205.66052246 -84.20520782]
[213.27551270 -97.12851715]
[220.89050293 -110.05182648]
[220.92308044 -115.53128052]
[222.92884827 -119.95280457]
[226.13987732 -122.72579956]
[229.66415405 -123.66763306]
[238.28596497 -135.94216919]
[246.90777588 -148.21672058]
[255.52958679 -160.49125671]
[264.15139771 -172.76579285]
[261.63552856 -188.13812256]
[270.55413818 -200.46342468]
[285.22479248 -202.76718140]
[293.84658813 -215.04173279]
[302.30426025 -227.42994690]
[310.59625244 -239.92965698]
[318.88824463 -252.42936707]
[327.18026733 -264.92907715]
[335.47225952 -277.42877197]
[330.87322998 -292.37478638]
[337.00488281 -306.76010132]
[350.97198486 -313.79238892]
[366.17977905 -310.15127563]
[375.44754028 -297.55593872]
[374.39932251 -281.95352173]
[363.53012085 -270.71099854]
[347.97195435 -269.13677979]
[339.67996216 -256.63708496]
[331.38796997 -244.13735962]
[323.09597778 -231.63764954]
[314.80395508 -219.13795471]
[313.71459961 -211.72991943]
[306.12115479 -206.41992188]
[297.49932861 -194.14537048]
[300.30905151 -179.56315613]
[291.74014282 -166.99220276]
[276.42593384 -164.14398193]
[267.80413818 -151.86944580]
[259.18231201 -139.59490967]
[250.56050110 -127.32036591]
[241.93869019 -115.04582214]
[233.81381226 -102.43684387]
[226.19882202 -89.51352692]
[218.58383179 -76.59021759]
[210.96885681 -63.66690826]
[203.35386658 -50.74359894]
[202.66032410 -43.28809357]
[195.36022949 -37.58147049]
[187.40391541 -24.86545372]
[179.44760132 -12.14943790]
[171.49128723 0.56657857]
[176.12083435 12.67095566]
[172.84582520 25.41163826]
[162.65475464 34.03553009]
[149.15850830 35.19106293]
[140.86650085 47.69077301]
[132.57450867 60.19047928]
[124.28250122 72.69018555]
[115.99050140 85.18989563]
[107.69850159 97.68960571]
[119.28584290 101.17570496]
[128.02822876 112.29307556]
[130.19589233 129.03341675]
[130.19589233 144.03341675]
[130.19589233 159.03341675]
[130.19589233 174.03341675]
[141.09043884 185.16653442]
[140.87675476 200.37866211]
[130.19589233 210.69635010]
[136.24223328 226.53547668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 116]
[5 113]
[6 112]
[7 111]
[8 110]
[11 32]
[12 31]
[13 30]
[14 28]
[15 27]
[16 25]
[17 24]
[18 23]
[33 107]
[34 106]
[35 105]
[36 104]
[37 103]
[38 102]
[41 98]
[42 97]
[43 96]
[44 95]
[45 93]
[46 92]
[47 91]
[48 90]
[49 89]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[60 81]
[61 80]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
