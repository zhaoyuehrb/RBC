%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCGGCGGCGACGGCGGCGGCGGCCUGAACAGUGUGCACCACCACCCCCUGCUCCCCCGUCACGAACUCAAC\
) } def
/len { sequence length } bind def

/coor [
[198.92045593 283.99288940]
[190.71624756 271.43539429]
[182.51202393 258.87786865]
[174.30780029 246.32038879]
[166.10357666 233.76289368]
[159.62286377 229.77256775]
[157.83232117 220.51257324]
[150.15403748 207.62675476]
[142.47576904 194.74095154]
[134.79748535 181.85514832]
[127.11920929 168.96932983]
[120.80893707 164.71459961]
[119.40258789 155.38851929]
[107.74697113 151.53265381]
[101.75566101 140.35559082]
[105.20975494 127.73335266]
[98.62180328 114.25748444]
[87.13150024 106.29103088]
[87.90233612 92.33045959]
[81.31438446 78.85459900]
[68.30227661 69.85484314]
[69.66362000 55.02257919]
[63.07567215 41.54671478]
[50.99340820 36.51973724]
[45.85307693 24.92666054]
[49.96927643 13.36041260]
[43.94384384 -0.37618697]
[37.63580704 -13.98532581]
[22.32931519 -16.53305817]
[11.46764088 -27.61473846]
[9.22731876 -42.96923447]
[16.46979713 -56.69243240]
[30.41019821 -63.50747681]
[45.68815231 -60.79384995]
[56.42897415 -49.59499359]
[58.50259781 -34.21709824]
[51.11167145 -20.57327461]
[57.04904175 -15.81198025]
[57.68044662 -6.40161848]
[63.70587540 7.33498144]
[78.35473633 16.76929855]
[76.55153656 34.95876694]
[83.13948822 48.43463135]
[95.68038177 56.47050095]
[94.79024506 72.26664734]
[101.37819672 85.74251556]
[112.86849976 93.70896912]
[112.09766388 107.66954041]
[118.68561554 121.14540100]
[134.14721680 130.89462280]
[132.59469604 148.24931335]
[140.00502014 161.29106140]
[147.68330383 174.17686462]
[155.36157227 187.06268311]
[163.03985596 199.94848633]
[170.71812439 212.83428955]
[178.66107178 225.55867004]
[186.86529541 238.11616516]
[195.06951904 250.67366028]
[203.27374268 263.23117065]
[211.47796631 275.78866577]
[226.31895447 272.60913086]
[241.30572510 275.00939941]
[254.41143799 282.66476440]
[263.86364746 294.53997803]
[268.38400269 309.02896118]
[267.36120605 324.17221069]
[260.93353271 337.92175293]
[249.97030640 348.41802979]
[235.95420837 354.24154663]
[220.78079224 354.60470581]
[206.50213623 349.45840454]
[195.04933167 339.49859619]
[187.97125244 326.07229614]
[186.22515869 310.99533081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[13 51]
[16 49]
[17 48]
[19 46]
[20 45]
[22 43]
[23 42]
[26 40]
[27 39]
[28 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
