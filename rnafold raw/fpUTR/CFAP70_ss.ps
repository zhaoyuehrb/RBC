%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCAGCGUCUCGCUCCCUGCUCCCGGCCCCAGAGGGUUAUCGCGAGUCUUGGAAUAAACUUGCUCGUGCGAUGGCCAAAAAGACCAAAGAAAACAGAGGGACUUUUCCCAGUUGGUGAU\
) } def
/len { sequence length } bind def

/coor [
[48.82303619 206.78413391]
[45.30345535 207.70785522]
[36.61214066 219.93327332]
[40.53542709 238.37199402]
[30.01701355 253.63381958]
[12.01409721 256.43313599]
[3.96365428 269.08978271]
[-4.08678865 281.74639893]
[-12.13723183 294.40304565]
[-15.53627968 311.01275635]
[-32.43783569 312.34457397]
[-38.39641953 296.47222900]
[-24.79386520 286.35260010]
[-16.74342155 273.69598389]
[-8.69297886 261.03933716]
[-0.64253622 248.38270569]
[-5.51602936 237.91435242]
[-4.66787720 226.27740479]
[1.80442953 216.42465210]
[12.36149693 210.91336060]
[24.38671303 211.24195862]
[33.07802963 199.01654053]
[41.29076004 186.46459961]
[49.01265335 173.60488892]
[56.56833649 160.64680481]
[63.95655441 147.59252930]
[71.34477997 134.53825378]
[78.73300171 121.48397064]
[86.12121582 108.42969513]
[73.47231293 116.49227142]
[58.53474808 115.12505341]
[47.55966568 104.90020752]
[45.13994980 90.09665680]
[52.28821564 76.90945435]
[66.01303101 70.85723114]
[80.57078552 74.47274017]
[89.86970520 86.24414062]
[87.18049622 71.48716736]
[84.49128723 56.73020172]
[81.80207062 41.97323227]
[79.11286163 27.21626282]
[76.42365265 12.45929337]
[73.73443604 -2.29767561]
[71.04522705 -17.05464554]
[68.35601807 -31.81161499]
[65.28773499 -46.49444962]
[61.84241867 -61.09341431]
[58.39710236 -75.69238281]
[54.95178604 -90.29134369]
[45.25915909 -95.54800415]
[40.22307968 -105.10785675]
[41.32374954 -115.63462830]
[47.94612503 -123.60568237]
[45.25691223 -138.36265564]
[32.11819077 -147.14613342]
[29.12055779 -162.66352844]
[38.04245758 -175.70864868]
[53.59068680 -178.54205322]
[66.54074860 -169.48274231]
[69.20960999 -153.90542603]
[60.01388168 -141.05186462]
[62.70309448 -126.29489136]
[76.30193329 -112.64727783]
[69.55075073 -93.73666382]
[72.99607086 -79.13769531]
[76.44138336 -64.53873444]
[79.88670349 -49.93976593]
[83.50666809 -46.66041565]
[85.03044128 -41.02952194]
[83.11298370 -34.50082397]
[85.80220032 -19.74385643]
[88.49140930 -4.98688698]
[91.18061829 9.77008247]
[93.86983490 24.52705193]
[96.55904388 39.28401947]
[99.24825287 54.04098892]
[101.93746185 68.79795837]
[104.62667847 83.55493164]
[101.93943024 68.79759979]
[103.24553680 53.85457611]
[108.45223999 39.78722763]
[117.18970490 27.59474373]
[128.83732605 18.14313507]
[142.56779480 12.10373974]
[157.40585327 9.90552425]
[172.29756165 11.70462513]
[186.18521118 17.37325478]
[198.08236694 26.50877762]
[207.14398193 38.46231461]
[212.72644043 52.38481903]
[214.43322754 67.28739929]
[212.14309692 82.11154938]
[206.01872253 95.80432129]
[196.49511719 107.39315033]
[184.24871826 116.05489349]
[170.14938354 121.17431641]
[155.19854736 122.38780212]
[140.45816040 119.60915375]
[126.97519684 113.03572845]
[115.70900726 103.13634491]
[126.97599030 113.03862762]
[138.24296570 122.94091034]
[149.50994873 132.84318542]
[165.68792725 135.52743530]
[171.19818115 150.97311401]
[160.37225342 163.29104614]
[144.34690857 159.80958557]
[139.60766602 144.11016846]
[128.34068298 134.20788574]
[117.07370758 124.30561066]
[105.80672455 114.40332794]
[102.58506775 115.47008514]
[99.17549896 115.81791687]
[91.78727722 128.87219238]
[84.39905548 141.92646790]
[77.01083374 154.98075867]
[69.62261200 168.03503418]
[68.08675385 177.16282654]
[61.87237167 181.32676697]
[54.15047836 194.18649292]
[54.07165909 199.64585876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[6 16]
[7 15]
[8 14]
[9 13]
[23 120]
[24 119]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[37 78]
[38 77]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 67]
[47 66]
[48 65]
[49 64]
[53 62]
[54 61]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
