%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAGAUUGGGUGCUUGGCCGUCCCUGCCAUUAGCGCGUAACGAGAGACUGCUUGCUGCGGCAGAGACGCCAGAGGUGCAGCUCCAGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[95.04286194 130.67680359]
[87.56903076 131.30271912]
[80.36029816 144.45697021]
[73.15157318 157.61122131]
[77.82114410 172.70991516]
[70.37284851 186.64900208]
[55.22562790 191.15869141]
[41.36605835 183.56343079]
[37.01677704 168.36938477]
[44.75813675 154.59088135]
[59.99732590 150.40248108]
[67.20605469 137.24824524]
[74.41477966 124.09398651]
[69.58466339 104.32373047]
[76.58908844 88.02045441]
[89.82803345 80.63421631]
[87.82872772 65.76805115]
[85.82942200 50.90188980]
[83.83012390 36.03572464]
[81.83081818 21.16956329]
[77.50810242 12.88747501]
[80.02169800 5.77420044]
[78.52026367 -9.15046692]
[77.01882935 -24.07513428]
[67.93904877 -37.03152847]
[74.36354065 -50.46935272]
[72.86210632 -65.39402008]
[71.36067200 -80.31868744]
[69.85923767 -95.24335480]
[68.35780334 -110.16802216]
[58.80426025 -119.02890778]
[57.96275711 -131.62744141]
[65.74025726 -141.05685425]
[64.73836517 -156.02336121]
[63.73647690 -170.98985291]
[62.73458481 -185.95635986]
[61.73269653 -200.92286682]
[53.09092331 -214.17543030]
[59.96085739 -227.39106750]
[58.95896912 -242.35757446]
[57.95708084 -257.32406616]
[44.40125275 -264.68905640]
[36.99921799 -278.22470093]
[38.11294174 -293.61181641]
[47.38703918 -305.94042969]
[61.86217499 -311.27651978]
[76.91938782 -307.91738892]
[87.75397491 -296.93490601]
[90.90866852 -281.83352661]
[85.37680054 -267.43206787]
[72.92358398 -258.32595825]
[73.92547607 -243.35946655]
[74.92736053 -228.39295959]
[83.49747467 -216.21090698]
[76.69920349 -201.92475891]
[77.70108795 -186.95825195]
[78.70298004 -171.99174500]
[79.70486450 -157.02525330]
[80.70675659 -142.05874634]
[91.27147675 -128.15538025]
[83.28247070 -111.66945648]
[84.78390503 -96.74478912]
[86.28533936 -81.82012177]
[87.78677368 -66.89545441]
[89.28820801 -51.97078705]
[98.26059723 -40.08190536]
[91.94349670 -25.57656860]
[93.44493103 -10.65190220]
[94.94636536 4.27276516]
[96.69697571 19.17025948]
[98.69628143 34.03642273]
[100.69558716 48.90258408]
[102.69489288 63.76874542]
[104.69419861 78.63491058]
[126.44268036 89.34274292]
[129.23635864 119.50279236]
[143.86125183 125.53797150]
[145.67674255 140.32151794]
[154.97299194 152.09350586]
[164.26924133 163.86549377]
[179.90425110 164.14910889]
[191.66505432 174.45529175]
[193.99856567 189.91778564]
[185.80297852 203.23567200]
[170.94798279 208.12065125]
[156.44766235 202.26618958]
[149.14862061 188.43658447]
[152.49725342 173.16174316]
[143.20100403 161.38975525]
[133.90475464 149.61776733]
[119.94480133 144.42460632]
[117.46437073 128.79904175]
[109.99053955 129.42495728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[16 74]
[17 73]
[18 72]
[19 71]
[20 70]
[22 69]
[23 68]
[24 67]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[39 53]
[40 52]
[41 51]
[76 92]
[78 90]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
