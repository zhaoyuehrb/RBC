%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGGUUGACCCGGGCCCUCCUCCACACCCCCUUCCUUCUUCGCCUCCUCCCUCUUUCCUGCACGGGGGCUCGGGCUCACUAUAAAAGGUGGGAGCGCGUGGUGCCCCAGCAACGACGAGUUUCAGAACG\
) } def
/len { sequence length } bind def

/coor [
[103.96255493 345.03302002]
[103.96934509 329.94454956]
[107.88204193 315.37219238]
[115.43384552 302.30953979]
[126.10988617 291.64724731]
[139.18223572 284.11224365]
[135.29994202 269.62338257]
[131.41766357 255.13447571]
[127.53537750 240.64559937]
[122.71863556 234.94346619]
[123.73748779 225.76564026]
[110.92520905 218.25689697]
[107.13115692 203.52395630]
[115.09387207 190.13616943]
[111.55749512 175.55899048]
[108.02111053 160.98181152]
[104.48472595 146.40464783]
[100.77512360 131.87059021]
[96.89283752 117.38169861]
[83.05801392 104.97461700]
[87.98883820 87.05744171]
[83.25183868 72.82505798]
[78.34582520 58.65004349]
[73.43980408 44.47502899]
[68.53378296 30.30001831]
[62.71475983 23.12996483]
[63.68405151 15.72890663]
[59.11675644 1.44115710]
[54.54945755 -12.84659290]
[49.98215866 -27.13434219]
[35.87522125 -25.87119102]
[21.82415962 -27.60010147]
[8.45622540 -32.24120712]
[-3.63240457 -39.58469391]
[-13.90319538 -49.30029678]
[-21.89925575 -60.95214081]
[-27.26565170 -74.01831055]
[-29.76517677 -87.91419983]
[-29.28881836 -102.01871490]
[-25.86052322 -115.70197296]
[-19.63600159 -128.35348511]
[-10.89565468 -139.40939331]
[-0.03195412 -148.37751770]
[12.46819115 -154.85940552]
[8.58590508 -169.34829712]
[4.70361948 -183.83718872]
[0.82133394 -198.32608032]
[-13.51259995 -203.96916199]
[-21.67975235 -216.82028198]
[-20.72495651 -231.83868408]
[-11.22353172 -243.27812195]
[-15.10581779 -257.76699829]
[-18.98810387 -272.25588989]
[-22.87038803 -286.74478149]
[-26.75267410 -301.23367310]
[-41.60879135 -305.13128662]
[-52.51446152 -315.94619751]
[-56.53611755 -330.76919556]
[-52.59195328 -345.61303711]
[-41.74293137 -356.48474121]
[-26.90737915 -360.45993042]
[-12.07599068 -356.46923828]
[-1.23833203 -345.58621216]
[2.69032001 -330.73825073]
[-1.34682202 -315.91946411]
[-12.26378727 -305.11596680]
[-8.38150120 -290.62707520]
[-4.49921560 -276.13818359]
[-0.61693013 -261.64929199]
[3.26535559 -247.16041565]
[17.21355438 -242.00427246]
[25.54963112 -229.47535706]
[24.90222549 -214.26239014]
[15.31022167 -202.20835876]
[19.19250679 -187.71946716]
[23.07479286 -173.23059082]
[26.95707893 -158.74169922]
[42.84155273 -159.24406433]
[58.40134048 -155.96871948]
[72.75040436 -149.09809875]
[85.07070923 -139.01954651]
[94.65881348 -126.30332947]
[100.96607971 -111.67053986]
[103.63004303 -95.95207214]
[102.49523926 -80.04151917]
[97.62227631 -64.84431458]
[89.28460693 -51.22627640]
[77.95319366 -39.96420670]
[64.26991272 -31.70163918]
[68.83720398 -17.41389084]
[73.40450287 -3.12614012]
[77.97180176 11.16160965]
[82.70879364 25.39399910]
[87.61481476 39.56901169]
[92.52083588 53.74402237]
[97.42685699 67.91903687]
[102.63809967 73.26300812]
[102.27658844 82.49014282]
[111.47264099 86.57776642]
[116.94198608 95.02538300]
[116.90800476 105.08892822]
[111.38172913 113.49941254]
[115.26401520 127.98829651]
[120.55670929 135.55520630]
[119.06189728 142.86825562]
[122.59828186 157.44543457]
[126.13466644 172.02261353]
[129.67105103 186.59977722]
[142.88323975 194.85058594]
[146.26197815 209.68429565]
[138.31466675 222.22924805]
[142.02426147 236.76330566]
[145.90655518 251.25219727]
[149.78883362 265.74108887]
[153.67111206 280.22998047]
[168.75959778 280.21929932]
[183.33647156 284.11511230]
[196.40785217 291.65176392]
[207.08250427 302.31546021]
[214.63264465 315.37905884]
[218.54345703 329.95190430]
[218.54830933 345.04040527]
[214.64688110 359.61575317]
[207.10514832 372.68423462]
[196.43736267 383.35476685]
[183.37083435 390.89984131]
[168.79647827 394.80505371]
[153.70797729 394.80407715]
[139.13412476 390.89700317]
[126.06857300 383.35025024]
[115.40215302 372.67831421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 115]
[7 114]
[8 113]
[9 112]
[11 111]
[14 108]
[15 107]
[16 106]
[17 105]
[18 103]
[19 102]
[21 98]
[22 96]
[23 95]
[24 94]
[25 93]
[27 92]
[28 91]
[29 90]
[30 89]
[44 77]
[45 76]
[46 75]
[47 74]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
