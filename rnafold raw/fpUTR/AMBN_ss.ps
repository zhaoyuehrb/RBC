%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUACAGAGCAAGUCCCACGCACAGUCCUGAAAAAAAUUUUAAUCUUCUUUUCUUAGAACUAUCUUGGUUGGCAUCAUCAGGCCCUGAGAGCACAGUGC\
) } def
/len { sequence length } bind def

/coor [
[84.79579926 178.45915222]
[86.88902283 193.40173340]
[85.04253387 208.37680054]
[79.38222504 222.36334229]
[70.29403687 234.40773010]
[58.39759827 243.68875122]
[44.50404358 249.57359314]
[29.56065178 251.66105652]
[14.58629036 249.80877686]
[0.60193491 244.14308167]
[-11.43893719 235.05023193]
[-20.71535873 223.15022278]
[-26.59484863 209.25439453]
[-28.67653465 194.31019592]
[-26.81848145 179.33654785]
[-21.14737701 165.35438538]
[-12.04988384 153.31701660]
[-0.14628564 144.04519653]
[13.75181007 138.17106628]
[28.69680977 136.09515381]
[43.66973495 137.95898438]
[57.64971161 143.63549805]
[66.68923187 131.66523743]
[75.72875214 119.69497681]
[84.76827240 107.72471619]
[86.61159515 92.83840942]
[80.76480865 79.02482605]
[74.91802216 65.21124268]
[62.41358185 55.51848221]
[64.57799530 40.78197479]
[58.73120880 26.96839142]
[52.88441849 13.15480995]
[47.03763199 -0.65877318]
[34.53319550 -10.35153770]
[36.69760895 -25.08804321]
[30.85082054 -38.90162659]
[25.00403214 -52.71520996]
[19.15724373 -66.52879333]
[3.90959454 -67.21577454]
[-9.52592087 -74.45799255]
[-18.48167038 -86.81748962]
[-21.17948341 -101.84029388]
[-17.08370781 -116.54360199]
[-7.00756264 -128.00807190]
[7.04832649 -133.95742798]
[22.29315186 -133.21040344]
[35.70004272 -125.91532898]
[44.60705185 -113.52066040]
[47.24568558 -98.48735046]
[43.09204102 -83.80027771]
[32.97082520 -72.37557983]
[38.81761551 -58.56199646]
[44.66440201 -44.74841309]
[50.51119232 -30.93483162]
[62.59742355 -22.23010635]
[60.85121536 -6.50556135]
[66.69800568 7.30802155]
[72.54479218 21.12160492]
[78.39157867 34.93518829]
[90.47781372 43.63991165]
[88.73159790 59.36445618]
[94.57839203 73.17803955]
[100.42517853 86.99162292]
[109.87491608 86.46354675]
[119.30223083 93.10774994]
[134.18853760 94.95107269]
[149.07484436 96.79439545]
[163.96115112 98.63771820]
[178.84745789 100.48104858]
[193.73376465 102.32437134]
[200.22779846 100.00686646]
[205.99777222 101.25846100]
[209.46916199 104.76695251]
[224.21376038 107.52320099]
[238.95835876 110.27944183]
[250.13751221 99.51811218]
[265.51159668 97.41631317]
[279.16891479 104.78221893]
[285.85803223 118.78349304]
[283.00677490 134.03636169]
[271.71151733 144.67578125]
[256.31555176 146.61068726]
[242.73892212 139.09704590]
[236.20211792 125.02404022]
[221.45751953 122.26779175]
[206.71292114 119.51155090]
[191.89044189 117.21067810]
[177.00413513 115.36735535]
[162.11782837 113.52402496]
[147.23152161 111.68070221]
[132.34521484 109.83737946]
[117.45890045 107.99405670]
[129.26412964 117.24805450]
[130.39421082 132.20542908]
[120.11338806 143.12809753]
[105.11505127 142.90481567]
[95.16393280 131.68095398]
[96.73852539 116.76423645]
[87.69901276 128.73449707]
[78.65949249 140.70475769]
[69.61997223 152.67501831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 101]
[23 100]
[24 99]
[25 98]
[26 63]
[27 62]
[28 61]
[30 59]
[31 58]
[32 57]
[33 56]
[35 54]
[36 53]
[37 52]
[38 51]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[73 86]
[74 85]
[75 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
