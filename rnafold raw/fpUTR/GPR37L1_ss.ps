%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAUGCCAGACGCCUGACUGGAGGCGGAUCCAGCCGGCCAGCUGCCUCUCUGGAGCCCAGCUCUUGGGCCCCCUGCACUCACCUGCUCUUCCUGGGCUGGCUGUCUCCUGCUCAUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[21.74388123 464.45336914]
[23.83450127 479.30694580]
[19.04517937 493.52182007]
[8.39213467 504.08178711]
[-5.86421633 508.74615479]
[-20.69889259 506.52526855]
[-32.96419907 497.89031982]
[-40.05762100 484.67352295]
[-40.47408676 469.67950439]
[-49.95321655 481.30474854]
[-59.43234634 492.92996216]
[-61.51688004 509.19610596]
[-76.74836731 515.27343750]
[-89.45796204 504.91009521]
[-86.57112122 488.76705933]
[-71.05757904 483.45083618]
[-61.57845306 471.82562256]
[-52.09931946 460.20037842]
[-50.86755753 450.72164917]
[-42.20248795 444.32238770]
[-35.93985367 430.69229126]
[-29.67721748 417.06219482]
[-23.41458321 403.43209839]
[-17.15194893 389.80200195]
[-11.23661041 376.01763916]
[-5.67236662 362.08786011]
[-0.10812240 348.15805054]
[5.27922106 334.15887451]
[10.48880005 320.09262085]
[15.69837856 306.02633667]
[9.26575279 292.64138794]
[14.34862709 278.30194092]
[28.43161011 271.64556885]
[33.64118958 257.57928467]
[38.85076904 243.51301575]
[44.06034851 229.44673157]
[49.26992416 215.38044739]
[54.47950363 201.31416321]
[59.68908310 187.24787903]
[64.89865875 173.18159485]
[70.10823822 159.11532593]
[58.71489716 151.80422974]
[49.04573059 142.32966614]
[41.50454712 131.08729553]
[36.40628815 118.54664612]
[33.96387100 105.23143768]
[34.27929688 91.69774628]
[37.33938980 78.51078796]
[43.01635742 66.22126770]
[51.07311249 55.34243774]
[61.17318344 46.32862473]
[72.89476013 39.55627060]
[85.74832916 35.30820465]
[99.19708252 33.76184082]
[100.71460724 18.83880234]
[94.41314697 4.32666397]
[103.39834595 -7.55253887]
[104.91587067 -22.47557831]
[106.43339539 -37.39861679]
[107.95092010 -52.32165909]
[109.46844482 -67.24469757]
[100.48533630 -80.53692627]
[105.41406250 -95.80412292]
[120.47372437 -101.33459473]
[134.11184692 -92.88584137]
[135.86640930 -76.93902588]
[124.39148712 -65.72717285]
[122.87396240 -50.80413437]
[121.35643768 -35.88109207]
[119.83891296 -20.95805359]
[118.32138824 -6.03501415]
[124.73139191 7.40972805]
[115.63764954 20.35632706]
[114.12012482 35.27936554]
[128.91079712 40.39878845]
[142.08747864 48.84550858]
[152.91459656 60.14797974]
[165.84118652 52.53854370]
[178.76776123 44.92910767]
[182.48600769 29.56843948]
[196.02018738 21.40744209]
[211.34068298 25.28789139]
[219.35812378 38.90758514]
[215.31591797 54.18619919]
[201.61222839 62.05920792]
[186.37719727 57.85568619]
[173.45062256 65.46512604]
[160.52403259 73.07456207]
[165.27986145 88.74483490]
[166.04618835 105.10294342]
[162.77618408 121.14920044]
[155.66970825 135.90295410]
[145.16105652 148.46253967]
[131.89244080 158.06040955]
[116.67475891 164.10998535]
[100.43802643 166.24157715]
[84.17452240 164.32490540]
[78.96494293 178.39117432]
[73.75536346 192.45745850]
[68.54578400 206.52374268]
[63.33620834 220.59002686]
[58.12662888 234.65631104]
[52.91704941 248.72259521]
[47.70746994 262.78887939]
[42.49789047 276.85516357]
[48.84769058 291.07901001]
[43.36405563 305.26998901]
[29.76465988 311.23590088]
[24.55508232 325.30218506]
[19.34550285 339.36846924]
[19.28694916 348.61972046]
[13.82167244 353.72229004]
[8.25742817 367.65209961]
[2.69318461 381.58187866]
[3.27621961 388.35385132]
[0.67062360 393.56652832]
[-3.52185631 396.06463623]
[-9.78449154 409.69473267]
[-16.04712677 423.32482910]
[-22.30976105 436.95492554]
[-28.57239532 450.58502197]
[-14.92708969 444.35559082]
[0.06289644 444.90359497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 18]
[10 17]
[11 16]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[25 114]
[26 113]
[27 112]
[28 110]
[29 109]
[30 108]
[33 105]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[39 99]
[40 98]
[41 97]
[54 74]
[55 73]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[77 88]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
