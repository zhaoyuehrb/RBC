%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAGAGGUGGAAAAUGGCGCUGACGUGAGCGCGAACUCGCACUGCCCAGAGGGUGGCCGCCGCCUAAGCUGCAGCCGCCGGAGCCGCAGAAACAAGAGGCCGAGCCGUGUCGAAG\
) } def
/len { sequence length } bind def

/coor [
[71.04303741 128.93952942]
[65.70951843 120.91652679]
[62.48825836 112.03070831]
[47.59398270 113.80851746]
[32.69971085 115.58631897]
[19.91383553 124.90468597]
[6.35924101 118.73036957]
[-6.42663383 128.04873657]
[-19.98122787 121.87441254]
[-34.87549973 123.65222168]
[-49.76977539 125.43002319]
[-64.66404724 127.20783234]
[-79.53356171 129.18208313]
[-94.37571716 131.35243225]
[-101.17489624 143.06634521]
[-113.31928253 148.60751343]
[-126.23905182 146.13914490]
[-135.21459961 136.79295349]
[-148.00047302 146.11131287]
[-161.55506897 139.93699646]
[-176.44934082 141.71479797]
[-191.34361267 143.49261475]
[-206.23788452 145.27041626]
[-221.13217163 147.04821777]
[-230.70600891 159.62268066]
[-246.37821960 161.66162109]
[-258.85076904 151.95538330]
[-260.72387695 136.26248169]
[-250.88632202 123.89326477]
[-235.17449951 122.18614960]
[-222.90997314 132.15394592]
[-208.01570129 130.37614441]
[-193.12142944 128.59832764]
[-178.22715759 126.82052612]
[-163.33287048 125.04271698]
[-151.61233521 115.85150909]
[-136.99240112 121.89867401]
[-127.23157501 108.27324677]
[-110.31236267 105.81452179]
[-96.54606628 116.51027679]
[-81.70391083 114.33992767]
[-75.46250153 110.20681763]
[-66.44185638 112.31356049]
[-51.54758453 110.53575134]
[-36.65330887 108.75794220]
[-21.75903511 106.98014069]
[-10.03849792 97.78893280]
[4.58143377 103.83609009]
[16.30197144 94.64488220]
[30.92190170 100.69204712]
[45.81617737 98.91423798]
[60.71044922 97.13642883]
[69.04054260 75.64059448]
[87.97317505 62.48701477]
[111.02458191 62.18033218]
[117.88731384 48.84230423]
[124.75003815 35.50428009]
[131.61277771 22.16625404]
[138.47549438 8.82822704]
[145.33822632 -4.50979900]
[144.77200317 -20.32086945]
[157.47494507 -28.09804916]
[164.33767700 -41.43607330]
[163.77143860 -57.24714661]
[176.47438049 -65.02432251]
[183.33711243 -78.36235046]
[182.00369263 -94.70719910]
[195.64408875 -103.81057739]
[210.22624207 -96.30771637]
[210.74926758 -79.91691589]
[196.67514038 -71.49961853]
[189.81240845 -58.16159439]
[190.86950684 -43.30455017]
[177.67570496 -34.57334518]
[170.81297302 -21.23531914]
[171.87007141 -6.37827349]
[158.67625427 2.35293055]
[151.81352234 15.69095707]
[144.95079041 29.02898216]
[138.08807373 42.36700821]
[131.22534180 55.70503616]
[124.36260986 69.04306030]
[132.83128357 75.86846924]
[139.34504700 85.02658081]
[143.26046753 95.94585419]
[144.10404968 107.87797546]
[158.53143311 111.98291779]
[172.95881653 116.08786011]
[188.34957886 112.42252350]
[198.47358704 123.34744263]
[210.59797668 113.66350555]
[226.10040283 112.98920441]
[239.01985168 121.58383179]
[244.38851929 136.14256287]
[240.14207458 151.06729126]
[227.91334534 160.61912537]
[212.40452576 161.12521362]
[199.57907104 152.39094543]
[194.36863708 137.77482605]
[180.00981140 141.73377991]
[168.85386658 130.51524353]
[154.42648315 126.41030121]
[139.99909973 122.30535889]
[130.64675903 134.03282166]
[137.85917664 147.18505859]
[145.07159424 160.33728027]
[160.31195068 164.52139282]
[168.05718994 178.29771423]
[163.71217346 193.49298096]
[149.85473633 201.09213257]
[134.70625305 196.58671570]
[127.25403595 182.64970398]
[131.91937256 167.54969788]
[124.70694733 154.39747620]
[117.49452972 141.24525452]
[107.17922974 143.44024658]
[96.81981659 143.13981628]
[87.00112915 140.44676208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 52]
[4 51]
[5 50]
[7 48]
[9 46]
[10 45]
[11 44]
[12 43]
[13 41]
[14 40]
[18 37]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[55 82]
[56 81]
[57 80]
[58 79]
[59 78]
[60 77]
[62 75]
[63 74]
[65 72]
[66 71]
[86 103]
[87 102]
[88 101]
[90 99]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
