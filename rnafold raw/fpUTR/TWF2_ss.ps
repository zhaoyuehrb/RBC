%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGGGCGGGUCCUGCGGCACCGCCCGGGAAGCUGCGCGAGGGUCGACAGCCUCCGCCACAUCCUCCACCUCUCUUGGUCCAGCGAGCGUUGCCGGGCCAGGGUCAAGCGGAGGGCUCCGACGGCGCGGACGGAGCGAAGCGCCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[77.38563538 206.08834839]
[77.07563019 191.09155273]
[76.76562500 176.09475708]
[68.76694489 163.53010559]
[76.21738434 149.57298279]
[75.90738678 134.57618713]
[64.26321411 125.12032318]
[49.52197647 127.89449310]
[34.78074265 130.66865540]
[20.03950882 133.44282532]
[5.29827356 136.21699524]
[-9.44296074 138.99116516]
[-18.36914062 151.75677490]
[-33.35836792 154.36018372]
[-45.47342682 145.77177429]
[-60.21466064 148.54592896]
[-74.95589447 151.32009888]
[-89.66767883 154.24645996]
[-104.34842682 157.32469177]
[-119.02918243 160.40292358]
[-133.70993042 163.48114014]
[-145.62858582 173.88577271]
[-159.67279053 168.92498779]
[-174.32095337 172.15475464]
[-188.93495178 175.53573608]
[-203.54895020 178.91671753]
[-215.25001526 189.56544495]
[-229.39375305 184.89596558]
[-244.00775146 188.27694702]
[-258.62176514 191.65792847]
[-270.23446655 203.23709106]
[-285.99609375 198.70909119]
[-289.69244385 182.73194885]
[-277.52102661 171.74157715]
[-262.00271606 177.04393005]
[-247.38873291 173.66294861]
[-232.77473450 170.28196716]
[-222.11894226 159.87506104]
[-206.92993164 164.30271912]
[-192.31593323 160.92173767]
[-177.70191956 157.54075623]
[-171.85719299 152.93991089]
[-162.75102234 154.24423218]
[-151.88243103 144.05976868]
[-136.78816223 148.80039978]
[-122.10741425 145.72216797]
[-107.42665863 142.64393616]
[-92.74590302 139.56570435]
[-86.80733490 135.08662415]
[-77.73006439 136.57887268]
[-62.98882675 133.80470276]
[-48.24759293 131.03053284]
[-40.08327103 118.62571716]
[-25.17308235 115.60232544]
[-12.21712780 124.24992371]
[2.52410674 121.47575378]
[17.26534081 118.70159149]
[32.00657654 115.92742157]
[46.74781036 113.15325928]
[61.48904419 110.37908936]
[65.07147980 92.62284851]
[75.48740387 80.19580078]
[88.86103821 75.04618835]
[101.19264984 76.88967896]
[109.46712494 83.57840729]
[117.92911530 71.19315338]
[126.39111328 58.80789185]
[134.85310364 46.42263031]
[143.31509399 34.03737259]
[144.71166992 18.27792549]
[158.28010559 12.13408756]
[152.37229919 -3.68280578]
[156.98777771 -19.75148582]
[170.12571716 -29.82044411]
[186.51023865 -30.09474754]
[194.71446228 -42.65224457]
[202.91867065 -55.20974350]
[211.12289429 -67.76724243]
[219.32711792 -80.32473755]
[227.53134155 -92.88223267]
[235.73556519 -105.43972778]
[243.93978882 -117.99723053]
[252.14401245 -130.55471802]
[253.21458435 -146.33967590]
[266.65313721 -152.76261902]
[274.85736084 -165.32011414]
[283.06158447 -177.87760925]
[291.26580811 -190.43510437]
[294.86721802 -207.00213623]
[311.78375244 -208.12768555]
[317.54827881 -192.18383789]
[303.82330322 -182.23088074]
[295.61907959 -169.67338562]
[287.41485596 -157.11589050]
[279.21063232 -144.55839539]
[278.72689819 -129.67164612]
[264.70150757 -122.35050201]
[256.49728394 -109.79300690]
[248.29306030 -97.23551178]
[240.08883667 -84.67800903]
[231.88461304 -72.12051392]
[223.68040466 -59.56301498]
[215.47618103 -47.00551987]
[207.27195740 -34.44802094]
[199.06773376 -21.89052582]
[204.96398926 -9.87353516]
[204.12976074 3.59469271]
[196.67677307 14.97365189]
[184.47073364 21.21885490]
[170.66535950 20.59608269]
[169.87405396 35.46965408]
[155.70036316 42.49936676]
[147.23837280 54.88462448]
[138.77636719 67.26988220]
[130.31437683 79.65514374]
[121.85237885 92.04040527]
[124.93061066 106.72115326]
[137.65498352 114.66410065]
[150.37934875 122.60704803]
[163.10372925 130.54998779]
[175.82809448 138.49293518]
[188.55245972 146.43588257]
[204.35617065 147.17999268]
[211.05546570 160.48295593]
[226.39463806 156.67695618]
[239.88900757 164.90357971]
[243.53262329 180.28213501]
[235.16377258 193.68876648]
[219.74757385 197.16958618]
[206.43016052 188.65946960]
[203.11251831 173.20732117]
[188.21896362 173.03134155]
[180.60952759 159.16024780]
[167.88514709 151.21731567]
[155.16078186 143.27436829]
[142.43640137 135.33142090]
[129.71203613 127.38847351]
[116.98766327 119.44552612]
[110.46679688 123.15068817]
[117.87712097 136.19242859]
[125.28724670 149.23429871]
[112.24526978 156.64421082]
[104.83538055 143.60275269]
[97.42504883 130.56101990]
[90.90418243 134.26617432]
[91.21417999 149.26296997]
[99.23503876 162.90029907]
[91.76242065 175.78475952]
[92.07242584 190.78155518]
[92.38243103 205.77835083]
[94.97080231 224.98641968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[5 146]
[6 145]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[15 52]
[16 51]
[17 50]
[18 48]
[19 47]
[20 46]
[21 45]
[23 43]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[71 110]
[75 105]
[76 104]
[77 103]
[78 102]
[79 101]
[80 100]
[81 99]
[82 98]
[83 97]
[85 95]
[86 94]
[87 93]
[88 92]
[117 138]
[118 137]
[119 136]
[120 135]
[121 134]
[122 133]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
