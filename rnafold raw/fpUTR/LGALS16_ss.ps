%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGCAACUCAGAGAUUCACUCAGAAGACUGGACACAAUUCCGAAGGUCGCCCAGAAGGAGAGGACA\
) } def
/len { sequence length } bind def

/coor [
[90.17435455 235.59580994]
[74.95121002 236.01502991]
[60.87614059 230.20019531]
[50.38773727 219.15876770]
[45.30318069 204.80372620]
[46.50339890 189.62217712]
[53.78044891 176.24441528]
[65.87353516 166.98822021]
[80.68746185 163.45729065]
[83.40420532 148.70535278]
[86.12094879 133.95343018]
[71.02690887 122.49497223]
[63.66626358 105.03222656]
[48.70123291 104.00859070]
[33.73619843 102.98495483]
[20.74803162 112.40233612]
[5.32632685 107.98072815]
[-0.69870186 93.11202240]
[7.29483175 79.20220184]
[23.17497253 76.92170715]
[34.75983429 88.01992798]
[49.72486877 89.04356384]
[64.68989563 90.06719971]
[69.20404053 80.07331085]
[76.47068024 71.86044312]
[85.84032440 66.16263580]
[96.47553253 63.48915482]
[107.42575836 64.07894897]
[113.40177155 50.32077789]
[119.37778473 36.56261063]
[125.35380554 22.80443954]
[130.37699890 8.67052555]
[134.42395020 -5.77323341]
[138.47090149 -20.21699333]
[130.50756836 -33.86839676]
[134.61038208 -49.13085175]
[148.34521484 -56.94940948]
[163.56343079 -52.68546295]
[171.23634338 -38.86873627]
[166.81173706 -23.69644356]
[152.91465759 -16.17004204]
[148.86770630 -1.72628200]
[144.82075500 12.71747780]
[146.49853516 16.18363380]
[146.35768127 20.70276070]
[143.89215088 25.29481697]
[139.11196899 28.78045654]
[133.13595581 42.53862381]
[127.15994263 56.29679489]
[121.18392181 70.05496216]
[131.05447388 80.47863007]
[136.16850281 93.89232635]
[135.74270630 108.24150848]
[149.36128235 114.52915955]
[165.63438416 112.49987030]
[175.31121826 125.73961639]
[168.43708801 140.62847900]
[152.08349609 141.85008240]
[143.07363892 128.14772034]
[129.45506287 121.86007690]
[116.87544250 132.56813049]
[100.87287140 136.67018127]
[98.15612793 151.42210388]
[95.43938446 166.17402649]
[108.02355957 174.75065613]
[116.02582550 187.70764160]
[118.05973816 202.80012512]
[113.77291870 217.41323853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 64]
[10 63]
[11 62]
[13 23]
[14 22]
[15 21]
[28 50]
[29 49]
[30 48]
[31 47]
[32 43]
[33 42]
[34 41]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
