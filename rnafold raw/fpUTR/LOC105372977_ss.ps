%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAGUUUCUUAAGUGCUGGGUCAUCUGUGCAGCUUCACUGAACUUCCAUCCCACCUUCUUUGGCCUGGAGAGGAAGCAAAAAUCAUAGAAAGGCUGUA\
) } def
/len { sequence length } bind def

/coor [
[-80.02157593 255.48551941]
[-90.20787048 266.49639893]
[-100.39415741 277.50726318]
[-110.58045197 288.51815796]
[-120.76674652 299.52902222]
[-130.95303345 310.53991699]
[-141.13932800 321.55078125]
[-137.17704773 336.46063232]
[-141.92637634 351.13876343]
[-153.87184143 360.90142822]
[-169.20167542 362.63339233]
[-183.02418518 355.78198242]
[-190.92866516 342.53347778]
[-190.39282227 327.11541748]
[-181.58763123 314.44766235]
[-167.32281494 308.57241821]
[-152.15020752 311.36450195]
[-141.96391296 300.35360718]
[-131.77761841 289.34274292]
[-121.59133148 278.33184814]
[-111.40503693 267.32098389]
[-101.21874237 256.31008911]
[-91.03245544 245.29922485]
[-93.20922852 238.05587769]
[-92.62904358 230.44543457]
[-89.31999969 223.49085999]
[-83.68032837 218.14483643]
[-76.43103027 215.15934753]
[-68.52390289 214.98017883]
[-61.01664352 217.68103027]
[-49.24773026 208.38087463]
[-37.47881699 199.08073425]
[-25.70990372 189.78059387]
[-13.94098949 180.48045349]
[-2.17207527 171.18031311]
[9.59683895 161.88017273]
[21.36575317 152.58001709]
[22.83870316 137.80281067]
[34.64157104 128.20349121]
[50.13128281 129.84864807]
[61.90019989 120.54850769]
[73.66911316 111.24836731]
[73.56323242 89.00278473]
[89.41525269 73.39540100]
[111.65649414 73.84722900]
[121.13854218 62.22437286]
[130.62059021 50.60151672]
[140.10263062 38.97866058]
[149.58468628 27.35580254]
[152.66220093 18.56253624]
[159.54684448 15.52493286]
[169.38577271 4.20258808]
[179.04743958 -7.27139950]
[188.52947998 -18.89425659]
[198.01153564 -30.51711273]
[207.12751770 -42.42923737]
[215.86863708 -54.61910629]
[213.05226135 -70.17042542]
[222.12576294 -83.11056519]
[237.70599365 -85.76235962]
[250.54948425 -76.55255127]
[253.03640747 -60.94515610]
[243.69131470 -48.19976425]
[228.05850220 -45.87799072]
[219.31738281 -33.68812180]
[219.23834229 -28.75005531]
[215.93388367 -23.85207558]
[209.63438416 -21.03506660]
[200.15234375 -9.41220951]
[190.67028809 2.21064687]
[188.84910583 9.51193047]
[180.70812988 14.04151726]
[170.86920166 25.36386108]
[161.20753479 36.83784866]
[151.72549438 48.46070480]
[142.24343872 60.08356094]
[132.76139832 71.70642090]
[123.27935028 83.32927704]
[127.00774384 90.49089813]
[128.58860779 98.40864563]
[127.89625549 106.45292664]
[124.98572540 113.98410034]
[120.08844757 120.40332794]
[113.59383392 125.20018005]
[106.01830292 127.99324036]
[97.96423340 128.56040955]
[90.07202911 126.85659790]
[82.96925354 123.01728058]
[71.20034027 132.31741333]
[59.43142700 141.61756897]
[57.45116806 157.06800842]
[45.38333130 166.33203125]
[30.66589546 164.34893799]
[18.89698219 173.64907837]
[7.12806797 182.94921875]
[-4.64084625 192.24935913]
[-16.40975952 201.54951477]
[-28.17867470 210.84965515]
[-39.94758987 220.14979553]
[-51.71650314 229.44993591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[40 90]
[41 89]
[42 88]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[51 73]
[52 72]
[53 70]
[54 69]
[55 68]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
