%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUACUUUUGUCUUCAAUCUGUUUGCAAGUGAGCGGUUGACAAUGCAUGGACAGACUUUGAGUUUAUGUGGUUCUUUCUUUAGGUAUAAGAAAAAGAUGA\
) } def
/len { sequence length } bind def

/coor [
[87.56790924 159.40740967]
[80.31855774 161.33013916]
[72.88468933 174.35847473]
[65.45082092 187.38682556]
[58.01695251 200.41516113]
[50.58308792 213.44349670]
[51.20748520 229.83074951]
[37.18567657 238.33493042]
[22.94210052 230.20765686]
[23.12932396 213.80957031]
[37.55474854 206.00962830]
[44.98861313 192.98129272]
[52.42248154 179.95295715]
[59.85634995 166.92460632]
[67.29021454 153.89627075]
[61.07791519 140.24316406]
[46.37173843 137.28877258]
[31.66556549 134.33438110]
[16.95939064 131.37998962]
[7.75371885 132.76625061]
[1.85287404 128.10472107]
[-12.75636196 124.70322418]
[-27.36559868 121.30171967]
[-41.97483444 117.90022278]
[-56.58407211 114.49871826]
[-71.19330597 111.09721375]
[-84.47758484 119.65895844]
[-99.90718842 116.23801422]
[-108.32800293 102.86396027]
[-104.74411774 87.47138214]
[-91.28177643 79.19243622]
[-75.92795563 82.93886566]
[-67.79180145 96.48797607]
[-53.18256760 99.88948059]
[-38.57333374 103.29098511]
[-23.96409607 106.69248962]
[-9.35485935 110.09398651]
[5.25437641 113.49549103]
[19.91378593 116.67381287]
[34.61996078 119.62820435]
[49.32613373 122.58259583]
[64.03231049 125.53699493]
[58.18473816 105.55741882]
[62.22959900 86.07794952]
[74.37369537 71.50118256]
[91.09733582 64.70788574]
[108.13227081 66.50379944]
[114.75805664 53.04649353]
[121.38383484 39.58918762]
[128.00961304 26.13188362]
[134.63539124 12.67457962]
[141.26116943 -0.78272402]
[147.88696289 -14.24002838]
[154.51274109 -27.69733238]
[146.46549988 -40.85961151]
[146.83465576 -56.28255844]
[155.50238037 -69.04476166]
[169.70286560 -75.07386017]
[184.90476990 -72.44598389]
[196.25721741 -61.99967194]
[200.13769531 -47.06831741]
[195.30795288 -32.41645050]
[183.30914307 -22.71943474]
[167.97004700 -21.07155228]
[161.34426880 -7.61424780]
[154.71847534 5.84305620]
[148.09269714 19.30035973]
[141.46691895 32.75766373]
[134.84114075 46.21496964]
[128.21536255 59.67227173]
[121.58957672 73.12957764]
[130.77706909 81.17794037]
[136.90333557 92.37279510]
[138.89898682 105.53152466]
[136.15562439 119.11446381]
[128.64161682 131.40505981]
[116.94765472 140.72578430]
[129.86111450 148.35746765]
[142.77456665 155.98915100]
[155.68803406 163.62083435]
[168.60148621 171.25251770]
[181.51495361 178.88420105]
[196.20195007 173.51521301]
[210.88627625 178.89152527]
[218.63442993 192.47460938]
[215.78796387 207.85095215]
[203.69091797 217.76029968]
[188.05511475 217.52377319]
[176.26333618 207.25306702]
[173.88327026 191.79766846]
[160.96980286 184.16598511]
[148.05635071 176.53430176]
[135.14288330 168.90261841]
[122.22943115 161.27093506]
[109.31597137 153.63925171]
[102.06661987 155.56196594]
[109.74041748 168.45043945]
[119.95362854 179.43637085]
[118.82621765 194.39393616]
[107.08166504 203.72482300]
[92.25649261 201.44134521]
[83.86407471 189.00883484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[16 42]
[17 41]
[18 40]
[19 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
