%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUGCGGUUCUUGCCAACGCAGCAGCCCUCCUGCUAUAUAGCCCGCCGCGCCGCAGCCCCACCCGCUCAGCGCCGCCGCCCCACCAGCUCAGCACCGCCGUGCGCCCAGCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[129.42617798 380.29061890]
[141.22340393 370.66015625]
[137.24394226 356.19766235]
[133.26448059 341.73516846]
[129.28501892 327.27267456]
[125.30556488 312.81018066]
[121.32611084 298.34765625]
[117.34664917 283.88516235]
[113.36719513 269.42266846]
[101.32081604 264.64035034]
[94.15581512 253.60623169]
[94.70357513 240.26574707]
[102.98793030 229.54690552]
[99.39819336 214.98277283]
[95.80846405 200.41865540]
[82.96495056 196.51802063]
[73.67567444 186.67883301]
[70.46820068 173.42118835]
[74.29299927 160.21511841]
[84.24523926 150.57235718]
[81.04781342 135.91711426]
[69.30242920 126.58727264]
[54.30377960 126.78865051]
[39.30513000 126.99002838]
[24.30648232 127.19140625]
[9.30783367 127.39278412]
[-2.86824679 137.83895874]
[-18.59942055 134.69099426]
[-25.81807709 120.36372375]
[-18.98668098 105.84781647]
[-3.34569478 102.27862549]
[9.10645580 112.39413452]
[24.10510445 112.19275665]
[39.10375214 111.99137878]
[54.10240173 111.79000092]
[69.10105133 111.58862305]
[67.84108734 101.91736603]
[69.46731567 92.53747559]
[73.69781494 84.27033997]
[80.02890778 77.79848480]
[87.79132843 73.60955811]
[96.21911621 71.96076202]
[98.22691345 57.09574127]
[91.01171112 46.30170441]
[93.07422638 33.89104843]
[102.75357819 26.50042725]
[105.15974426 11.69467354]
[99.73634338 -3.16794038]
[109.41504669 -14.48924732]
[111.82121277 -29.29500198]
[114.22738647 -44.10075378]
[116.63355255 -58.90650940]
[111.21015167 -73.76911926]
[120.88885498 -85.09043121]
[119.16510010 -94.19718170]
[123.56351471 -100.25918579]
[126.36631775 -114.99500275]
[129.16912842 -129.73081970]
[119.13972473 -141.72853088]
[119.22042847 -157.36590576]
[129.37313843 -169.25944519]
[144.80404663 -171.79341125]
[158.22715759 -163.77130127]
[163.30448914 -148.98094177]
[157.63867188 -134.40588379]
[143.90493774 -126.92800903]
[141.10214233 -112.19219208]
[138.29933167 -97.45637512]
[135.69461060 -82.68425751]
[141.29011536 -68.88065338]
[131.43930054 -56.50033951]
[129.03314209 -41.69458771]
[126.62696838 -26.88883209]
[124.22080231 -12.08307838]
[129.81629944 1.72052932]
[119.96549988 14.10084248]
[117.55932617 28.90659714]
[124.69087982 44.87989426]
[113.09193420 59.10353851]
[111.08413696 73.96855927]
[119.92319489 79.09055328]
[126.52526855 87.15921783]
[129.93086243 97.23431396]
[129.56443787 108.07288361]
[125.32579803 118.28239441]
[117.62150574 126.49965668]
[107.33005524 131.57244873]
[95.70307159 132.71968079]
[98.90048981 147.37493896]
[114.43298340 153.91123962]
[122.96619415 168.25068665]
[121.33522034 184.69100952]
[110.37258911 196.82891846]
[113.96232605 211.39303589]
[117.55205536 225.95716858]
[132.64979553 234.66839600]
[136.75921631 251.26173401]
[127.82968903 265.44320679]
[131.80914307 279.90570068]
[135.78860474 294.36819458]
[139.76806641 308.83071899]
[143.74752808 323.29321289]
[147.72698975 337.75570679]
[151.70643616 352.21820068]
[155.68589783 366.68069458]
[170.74923706 368.92028809]
[183.59588623 377.09851074]
[192.00007629 389.79849243]
[194.50573730 404.81988525]
[190.67874146 419.56008911]
[181.18214417 431.46533203]
[167.66130066 438.47293091]
[152.45875549 439.36877441]
[138.20845032 433.99765015]
[127.37934113 423.29016113]
[121.84763336 409.10144043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[13 95]
[14 94]
[15 93]
[20 89]
[21 88]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[42 80]
[43 79]
[46 77]
[47 76]
[49 74]
[50 73]
[51 72]
[52 71]
[54 69]
[56 68]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
