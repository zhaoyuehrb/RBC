%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCGCGGCGAGAGCGGGUAUGUGGGCGGGAGGCCGGAGCAGCUGUCAGGCUGAAGUCCUGCGAGCGACGCGCGGCGGGGCGGCGAGAGGAAACGCGGCGCCGGGCCGGGCCCGGCCCUGGAG\
) } def
/len { sequence length } bind def

/coor [
[-12.15402222 346.20193481]
[-23.94516373 344.20156860]
[-31.82278252 356.96649170]
[-39.70040131 369.73141479]
[-47.57802200 382.49633789]
[-55.45564270 395.26126099]
[-63.33325958 408.02615356]
[-58.24656296 422.81329346]
[-63.90314484 437.39196777]
[-77.63214111 444.87854004]
[-92.95113373 441.73809814]
[-102.62696838 429.45346069]
[-102.09101105 413.82504272]
[-91.59632874 402.23214722]
[-76.09817505 400.14852905]
[-68.22055817 387.38363647]
[-60.34293747 374.61871338]
[-52.46532059 361.85379028]
[-44.58769989 349.08886719]
[-36.71007919 336.32394409]
[-46.02526093 320.92553711]
[-46.34031677 302.84759521]
[-37.48555374 286.98742676]
[-21.78678894 277.68389893]
[-3.45504928 277.53060913]
[3.43864870 264.20855713]
[10.33234692 250.88650513]
[17.22604370 237.56446838]
[16.20346451 222.70500183]
[29.41752434 214.00447083]
[36.31122208 200.68243408]
[36.59412003 193.21246338]
[43.54922867 187.11544800]
[42.90039062 172.23498535]
[56.32892227 163.86927795]
[63.55522537 150.72467041]
[70.78153229 137.58007812]
[78.00783539 124.43547821]
[69.26870728 111.67627716]
[67.33041382 96.33311462]
[72.62190247 81.80143738]
[62.35369873 70.86691284]
[52.08549118 59.93238068]
[41.81728363 48.99784851]
[31.54907799 38.06332016]
[15.70201206 33.84401703]
[11.69433117 17.94211388]
[23.64879608 6.71612549]
[39.26767731 11.71438599]
[42.48360825 27.79511452]
[52.75181580 38.72964478]
[63.02001953 49.66417313]
[73.28823090 60.59870148]
[83.55643463 71.53323364]
[92.52358246 66.07792664]
[103.28765869 63.55028534]
[114.86464691 64.52960205]
[120.03428650 50.44859314]
[125.20393372 36.36758423]
[130.37358093 22.28657532]
[135.54321289 8.20556736]
[140.71286011 -5.87544012]
[145.88250732 -19.95644760]
[141.16983032 -32.04129791]
[145.84898376 -43.70674133]
[156.87757874 -48.84442139]
[162.39944458 -62.79106903]
[167.92131042 -76.73771667]
[168.13034058 -93.69037628]
[184.47834778 -98.18247986]
[193.32048035 -83.71689606]
[181.86796570 -71.21585083]
[176.34608459 -57.26920319]
[170.82421875 -43.32255554]
[174.36158752 -26.18266678]
[159.96351624 -14.78680420]
[154.79386902 -0.70579624]
[149.62422180 13.37521172]
[144.45458984 27.45621872]
[139.28494263 41.53722763]
[134.11529541 55.61823654]
[128.94564819 69.69924164]
[137.76243591 81.83449554]
[152.75177002 81.26914215]
[167.74111938 80.70378876]
[182.73045349 80.13844299]
[191.90924072 65.99503326]
[207.53993225 60.12861633]
[223.43942261 64.64984894]
[233.44223022 77.60112762]
[246.79455566 68.08023834]
[261.60177612 75.12851715]
[262.63150024 91.49530792]
[248.82441711 100.34384918]
[234.38409424 92.57152557]
[228.26773071 104.50817871]
[216.94561768 111.89931488]
[203.33998108 112.70864105]
[191.02679443 106.61554718]
[183.29580688 95.12778473]
[168.30647278 95.69313812]
[153.31712341 96.25848389]
[138.32778931 96.82383728]
[134.15444946 114.39246368]
[122.71690369 127.49678802]
[107.11064148 133.52505493]
[91.15243530 131.66177368]
[83.92613220 144.80638123]
[76.69982910 157.95098877]
[69.47351837 171.09558105]
[69.60548401 186.91624451]
[56.69382858 194.34175110]
[49.63326645 207.57612610]
[42.73957062 220.89817810]
[43.26906586 236.71051025]
[30.54809189 244.45816040]
[23.65439415 257.78021240]
[16.76069450 271.10226440]
[9.86699772 284.42431641]
[17.70138741 293.78134155]
[21.86347008 305.21630859]
[21.87665749 317.35031128]
[17.76315308 328.72872925]
[10.03844452 337.99560547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[25 119]
[26 118]
[27 117]
[28 116]
[30 114]
[31 113]
[33 112]
[35 110]
[36 109]
[37 108]
[38 107]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[62 77]
[63 76]
[66 74]
[67 73]
[68 72]
[83 103]
[84 102]
[85 101]
[86 100]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
