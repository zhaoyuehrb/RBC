%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGGGCGUCUCGGGCGAGGAGAGGAGGUGACCCCGCGAAAGGAGGAUGGACAGAAGAAAAAGAUAAUAAAUCAUCAUUGAUCAAG\
) } def
/len { sequence length } bind def

/coor [
[34.72728348 169.59620667]
[20.33643341 152.51547241]
[10.31062222 132.55723572]
[5.19919682 110.81508636]
[-9.79166508 111.33857727]
[-24.78252792 111.86207581]
[-39.77339172 112.38556671]
[-54.76425171 112.90905762]
[-69.75511169 113.43254852]
[-84.73455811 114.21759033]
[-99.69802094 115.26393890]
[-114.66147614 116.31028748]
[-129.62493896 117.35662842]
[-144.58839417 118.40297699]
[-159.55186462 119.44932556]
[-165.15098572 133.64836121]
[-176.36218262 144.00556946]
[-190.95945740 148.46452332]
[-206.04452515 146.13989258]
[-218.62220764 137.49324036]
[-226.19520569 124.24136353]
[-227.25990295 109.01542664]
[-221.60490417 94.83855438]
[-210.35301208 84.52557373]
[-195.73829651 80.12413788]
[-180.66250610 82.50814819]
[-168.11897278 91.20426178]
[-160.59820557 104.48586273]
[-145.63475037 103.43951416]
[-130.67127991 102.39317322]
[-115.70782471 101.34682465]
[-100.74436951 100.30047607]
[-85.78090668 99.25412750]
[-79.18504333 95.56645966]
[-70.27861023 98.44168854]
[-55.28774643 97.91819763]
[-40.29688263 97.39470673]
[-25.30602074 96.87120819]
[-10.31515789 96.34771729]
[4.67570448 95.82422638]
[5.76104689 85.06085205]
[8.05777073 74.48951721]
[11.53635216 64.24610138]
[16.15207863 54.46227264]
[21.84561539 45.26380920]
[28.54377747 36.76894379]
[36.16046524 29.08687019]
[44.59776688 22.31634140]
[53.74723053 16.54438591]
[63.49124146 11.84519863]
[73.70455170 8.27918625]
[84.25587463 5.89218521]
[95.00957489 4.71488047]
[105.82742310 4.76240492]
[116.57036591 6.03414774]
[127.10030365 8.51376152]
[137.28189087 12.16937256]
[146.98423767 16.95399094]
[156.08264160 22.80611038]
[164.46012878 29.65051079]
[172.00901794 37.39920807]
[178.63229370 45.95259857]
[184.24478149 55.20073318]
[188.77436829 65.02473450]
[192.16282654 75.29831696]
[194.36657715 85.88942719]
[195.35729980 96.66191864]
[195.12228394 107.47731781]
[193.66452026 118.19660950]
[191.00276184 128.68199158]
[187.17121887 138.79867554]
[182.21914673 148.41664124]
[176.21020508 157.41223145]
[169.22161865 165.66983032]
[179.25857544 176.81700134]
[189.29553223 187.96417236]
[199.33250427 199.11134338]
[215.08772278 203.66159058]
[218.76150513 219.64393616]
[206.57455444 230.61711121]
[191.06378174 225.29284668]
[188.18531799 209.14830017]
[178.14836121 198.00112915]
[168.11140442 186.85395813]
[158.07444763 175.70678711]
[138.88375854 187.13330078]
[117.56249237 193.78549194]
[95.27892303 195.29884338]
[73.25403595 191.59045410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
