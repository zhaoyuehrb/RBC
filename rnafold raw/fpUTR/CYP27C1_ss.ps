%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUCCUUGUGCGAUCUCCCAGACAUGAGAGCCCUGCUGGGCUUUCUGGCUCCUCCUCCGUGCAGAGUUGUCCCGUCAGGAGCCAGGAGGGGCGACGCUGGCUCCGUGGGAGGGUGAACAGUGGCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[101.98188782 278.14221191]
[92.37644958 290.48196411]
[77.07565308 293.70993042]
[63.30408096 286.30197144]
[57.56423950 271.75588989]
[62.56630707 256.93991089]
[75.94846344 248.84968567]
[78.08318329 234.00236511]
[80.21790314 219.15504456]
[82.35263062 204.30772400]
[76.50536346 190.60885620]
[86.12787628 178.05027771]
[88.26260376 163.20295715]
[82.41533661 149.50410461]
[92.03784943 136.94552612]
[94.17256927 122.09820557]
[85.18099213 134.10452271]
[81.87323761 148.73526001]
[71.80097198 159.85054016]
[57.56584549 164.57929993]
[42.84476471 161.70008850]
[31.44017220 151.95661926]
[26.29785347 137.86560059]
[28.74606514 123.06674957]
[38.15243530 111.38256073]
[52.08731461 105.83106232]
[66.94876862 107.84512329]
[81.34030914 103.61624146]
[66.68311310 100.42776489]
[52.02590561 97.23928070]
[37.36870575 94.05080414]
[22.71150017 90.86231995]
[8.05429840 87.67384338]
[-6.60290480 84.48536682]
[-21.26010895 81.29688263]
[-36.70730972 86.80287933]
[-49.02223969 75.97354126]
[-45.53635025 59.94916153]
[-29.83562660 55.21425629]
[-18.07162857 66.63967896]
[-3.41442561 69.82816315]
[11.24277687 73.01663971]
[25.89998055 76.20512390]
[40.55718231 79.39360046]
[55.21438599 82.58207703]
[69.87158966 85.77056122]
[84.52879333 88.95903778]
[98.97045898 84.90461731]
[103.61875916 69.78165436]
[118.16927338 66.59857941]
[129.02528381 56.24739456]
[133.13008118 47.97567749]
[140.26498413 45.78286743]
[151.36424255 35.69296265]
[162.46351624 25.60305595]
[173.56278992 15.51315022]
[184.66206360 5.42324448]
[195.76133728 -4.66666126]
[200.76821899 -19.67471695]
[215.39035034 -22.51062202]
[226.48962402 -32.60052872]
[231.63526917 -50.23408127]
[248.85514832 -53.39379501]
[259.71115112 -63.74497986]
[270.44320679 -74.22461700]
[281.04983521 -84.83121490]
[285.33691406 -100.06050873]
[299.80755615 -103.58895111]
[310.41415405 -114.19555664]
[321.02075195 -124.80215454]
[331.62734985 -135.40875244]
[342.23397827 -146.01536560]
[352.84057617 -156.62196350]
[363.44717407 -167.22856140]
[374.05377197 -177.83515930]
[378.34088135 -193.06445312]
[392.81149292 -196.59289551]
[403.41812134 -207.19950867]
[400.85778809 -222.50389099]
[407.81225586 -236.37527466]
[421.60736084 -243.47979736]
[436.93862915 -241.08564758]
[447.91085815 -230.11341858]
[450.30499268 -214.78216553]
[443.20046997 -200.98704529]
[429.32910156 -194.03257751]
[414.02471924 -196.59289551]
[403.41812134 -185.98629761]
[399.88964844 -171.51565552]
[384.66036987 -167.22856140]
[374.05377197 -156.62196350]
[363.44717407 -146.01536560]
[352.84057617 -135.40875244]
[342.23397827 -124.80215454]
[331.62734985 -114.19555664]
[321.02075195 -103.58895111]
[310.41415405 -92.98235321]
[306.88571167 -78.51171112]
[291.65643311 -74.22461700]
[281.04983521 -63.61801529]
[278.51998901 -56.59553528]
[270.06234741 -52.88896942]
[259.20632935 -42.53778458]
[258.58489990 -30.39620018]
[249.54000854 -21.68220901]
[236.57952881 -21.50125694]
[225.48025513 -11.41135120]
[221.26727295 2.87500620]
[205.85124207 6.43260956]
[194.75196838 16.52251434]
[183.65269470 26.61242104]
[172.55342102 36.70232773]
[161.45414734 46.79223251]
[150.35488892 56.88213730]
[139.37646484 67.10340881]
[128.52046204 77.45458984]
[124.64864349 91.83716583]
[109.32164001 95.76062775]
[114.14264679 99.76655579]
[116.66714478 106.92565155]
[115.22939301 115.81134796]
[109.01989746 124.23293304]
[106.88516998 139.08024597]
[112.57975006 153.84109497]
[103.10992432 165.33769226]
[100.97519684 180.18501282]
[106.66977692 194.94584656]
[97.19995117 206.44244385]
[95.06523132 221.28976440]
[92.93050385 236.13708496]
[90.79578400 250.98440552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 131]
[8 130]
[9 129]
[10 128]
[12 126]
[13 125]
[15 123]
[16 122]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[48 118]
[50 116]
[51 115]
[53 114]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
[60 107]
[61 106]
[63 103]
[64 102]
[65 100]
[66 99]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
