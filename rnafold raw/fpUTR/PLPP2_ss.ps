%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGGAGGCGGGGACCUCGCGUGAGGACCAGACCUCCCUCCGCGCCCCGCACUGCGCGCGCCCUCCCAGGCUCGGGGGUCCCCGCGUCCCAGGCCCAGGGGG\
) } def
/len { sequence length } bind def

/coor [
[176.53044128 371.29263306]
[178.06178284 364.58062744]
[174.47206116 350.01651001]
[170.88232422 335.45236206]
[167.29258728 320.88824463]
[163.70285034 306.32412720]
[159.89355469 291.81588745]
[149.02276611 281.63378906]
[152.77009583 266.26275635]
[148.74211121 251.81370544]
[144.71414185 237.36463928]
[140.68615723 222.91557312]
[136.65818787 208.46650696]
[132.63020325 194.01745605]
[128.60221863 179.56838989]
[124.57424927 165.11932373]
[120.54627228 150.67025757]
[116.51829529 136.22120667]
[112.49031067 121.77214050]
[61.61085892 113.42388916]
[47.93236160 107.26769257]
[34.25386047 101.11150360]
[20.57536507 94.95530701]
[6.89686680 88.79911804]
[-6.87304878 82.85021973]
[-20.73124123 77.10996246]
[-34.58943558 71.36971283]
[-46.72545242 80.78314209]
[-61.94443512 82.85150909]
[-76.15255737 77.01841736]
[-85.52790070 64.85295868]
[-87.54854584 49.62756348]
[-81.67095184 35.43779755]
[-69.47615814 26.10063362]
[-54.24451065 24.12771988]
[-40.07323837 30.04976273]
[-30.77434349 42.27376175]
[-28.84918404 57.51152039]
[-14.99099064 63.25177383]
[-1.13279748 68.99202728]
[6.37636614 68.63783264]
[13.05305862 75.12062073]
[26.73155594 81.27680969]
[40.41005325 87.43300629]
[54.08855057 93.58919525]
[67.76705170 99.74539185]
[74.18540955 95.86535645]
[87.02212524 88.10528564]
[93.44049072 84.22525024]
[94.34616852 69.25261688]
[95.25184631 54.27998734]
[90.17287445 38.10468292]
[104.31004333 28.74643707]
[117.21612549 39.74049759]
[110.22447968 55.18566513]
[109.31880188 70.15829468]
[108.41312408 85.13092804]
[121.79872894 91.90038300]
[133.32168579 82.29719543]
[138.96943665 67.51837158]
[153.70001221 65.31398010]
[165.22297668 55.71078873]
[176.74594116 46.10759735]
[177.92642212 30.34745789]
[189.95959473 20.10155487]
[205.70635986 21.44860077]
[215.82447815 33.58941650]
[214.31101990 49.32107162]
[202.06390381 59.31025696]
[186.34913635 57.63056183]
[174.82617188 67.23374939]
[163.30320740 76.83694458]
[158.47966003 90.92888641]
[142.92488098 93.82015991]
[131.40191650 103.42334747]
[126.93937683 117.74416351]
[130.96736145 132.19322205]
[134.99533081 146.64228821]
[139.02331543 161.09135437]
[143.05128479 175.54040527]
[147.07926941 189.98947144]
[151.10723877 204.43853760]
[155.13522339 218.88758850]
[159.16319275 233.33665466]
[163.19117737 247.78572083]
[167.21916199 262.23477173]
[178.37805176 273.45037842]
[174.34262085 287.78790283]
[179.74699402 295.36401367]
[178.26698303 302.73437500]
[181.85670471 317.29852295]
[185.44644165 331.86264038]
[189.03617859 346.42675781]
[192.62591553 360.99090576]
[196.65390015 375.43997192]
[201.11643982 389.76077271]
[205.57897949 404.08157349]
[216.06373596 417.40472412]
[206.16374207 431.16793823]
[190.19779968 425.46487427]
[191.25817871 408.54412842]
[186.79562378 394.22332764]
[182.33308411 379.90249634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 88]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 40]
[26 39]
[27 38]
[49 57]
[50 56]
[51 55]
[58 75]
[59 74]
[61 72]
[62 71]
[63 70]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
