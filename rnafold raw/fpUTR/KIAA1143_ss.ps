%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGACGUCACAGCUAAGCGCCUCUGUAUCGUCGCGAAUCCGUCGCGGAACCUGUCUUCUGUCUUUACCCAGAGCUACC\
) } def
/len { sequence length } bind def

/coor [
[57.56361771 126.30367279]
[51.86296844 113.24974060]
[36.96694183 115.01280212]
[22.07091522 116.77586365]
[7.17488766 118.53892517]
[-7.72113895 120.30198669]
[-22.61716652 122.06504822]
[-32.39260483 134.19264221]
[-47.52441025 135.76843262]
[-59.02597427 126.37431335]
[-73.92200470 128.13737488]
[-88.81803131 129.90043640]
[-103.71405792 131.66349792]
[-109.70307922 145.80659485]
[-121.97093964 155.04754639]
[-137.21763611 156.90058899]
[-151.34188843 150.86726379]
[-160.54434204 138.57051086]
[-162.34959412 123.31806946]
[-156.27201843 109.21279907]
[-143.94647217 100.04893494]
[-128.68846130 98.29150391]
[-114.60230255 104.41326141]
[-105.47711945 116.76747131]
[-90.58109283 115.00440979]
[-75.68505859 113.24134827]
[-60.78903580 111.47828674]
[-51.79827499 99.65873718]
[-36.71669769 97.65853882]
[-24.38022614 107.16902161]
[-9.48419952 105.40596008]
[5.41182709 103.64289856]
[20.30785370 101.87983704]
[35.20388031 100.11677551]
[50.09990692 98.35371399]
[55.22443008 77.91204071]
[68.32649231 61.40571976]
[87.07173920 51.77563477]
[108.12037659 50.73754883]
[112.75563049 36.47170258]
[117.39088440 22.20585442]
[122.02613831 7.94000626]
[121.17028809 -8.99232578]
[137.20397949 -14.50206375]
[146.93695068 -0.62022704]
[136.29199219 12.57526112]
[131.65673828 26.84110832]
[127.02147675 41.10695648]
[122.38622284 55.37280273]
[129.74928284 59.90374756]
[136.22032166 65.63697052]
[141.60528564 72.40055847]
[145.74273682 79.99171448]
[148.50859070 88.18281555]
[149.81993103 96.72825623]
[149.63742065 105.37179565]
[147.96653748 113.85427094]
[161.58868408 120.13416290]
[175.21083069 126.41406250]
[188.83297729 132.69395447]
[202.45512390 138.97384644]
[215.92739868 131.27467346]
[231.34846497 132.99816895]
[242.78860474 143.48162842]
[245.84884644 158.69393921]
[239.35247803 172.78567505]
[225.79747009 180.33824158]
[210.39601135 178.44755554]
[199.07026672 167.84062195]
[196.17523193 152.59599304]
[182.55308533 146.31610107]
[168.93093872 140.03620911]
[155.30879211 133.75631714]
[141.68664551 127.47641754]
[132.23110962 138.12983704]
[120.15205383 145.67958069]
[106.43265533 149.51110840]
[92.18965912 149.31256104]
[78.58240509 145.10006714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[10 27]
[11 26]
[12 25]
[13 24]
[39 49]
[40 48]
[41 47]
[42 46]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
