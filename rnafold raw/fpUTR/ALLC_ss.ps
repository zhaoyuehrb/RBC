%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACAUUCUCUCUGAGCUGGCACUCAAGCACCGUGGGACCUUGGCUGGCUUCUGGGGAGCAAGAGAUCCAUUUAUGAAUACUUGAUUUCUGACUGCUGGGAAGCACGGCUGAUGCUCCGAAGGAGGGAAGACUGACCCGGUUUCUGGACUUCACCCAGCUG\
) } def
/len { sequence length } bind def

/coor [
[110.06498718 225.18812561]
[108.90579987 240.30209351]
[102.64441681 254.10684204]
[92.03691864 264.93536377]
[78.36421967 271.48007202]
[63.27736664 272.95065308]
[48.59816742 269.16952515]
[36.09920502 260.59329224]
[27.28978920 248.25758362]
[23.23370552 233.65196228]
[24.42074013 218.54014587]
[30.70755577 204.74697876]
[41.33498764 193.93801880]
[55.01972580 187.41851807]
[70.10926056 185.97575378]
[73.85088348 171.44990540]
[77.59249878 156.92404175]
[81.33411407 142.39819336]
[85.07572937 127.87235260]
[88.81735229 113.34650421]
[77.05111694 104.04296875]
[63.77968597 111.03362274]
[50.50825882 118.02427673]
[49.27969742 133.40264893]
[39.91382599 145.66168213]
[25.39925766 150.88957214]
[10.36753941 147.41812134]
[-0.38476121 136.35504150]
[-3.42662501 121.23053741]
[2.21259594 106.87078094]
[14.73344707 97.85791016]
[30.14056969 97.06790161]
[43.51760864 104.75284576]
[56.78903580 97.76219177]
[70.06046295 90.77154541]
[76.79244995 77.36705017]
[74.47467041 62.54720306]
[72.15688324 47.72735596]
[69.69551849 32.93067932]
[59.67938995 20.68373108]
[65.08907318 6.80624628]
[62.48435211 -7.96586990]
[59.87963104 -22.73798561]
[57.27490616 -37.51010132]
[54.67018509 -52.28221893]
[52.06546021 -67.05433655]
[49.46073914 -81.82645416]
[46.71290588 -96.57261658]
[43.82222366 -111.29145050]
[40.93153763 -126.01027679]
[38.04085541 -140.72911072]
[35.15016937 -155.44793701]
[32.25948715 -170.16676331]
[22.00775719 -182.21717834]
[27.14732361 -196.19696045]
[24.25663948 -210.91578674]
[14.00491047 -222.96621704]
[19.14447594 -236.94598389]
[16.25379181 -251.66481018]
[3.41796422 -260.48974609]
[0.69607502 -275.45791626]
[9.18839359 -287.64053345]
[6.29770994 -302.35934448]
[3.40702629 -317.07818604]
[0.51634234 -331.79699707]
[-2.37434149 -346.51583862]
[-5.26502562 -361.23468018]
[-8.15570927 -375.95349121]
[-23.10496902 -378.57723999]
[-36.09490585 -386.42745972]
[-45.36874390 -398.44247437]
[-49.67226410 -412.99734497]
[-48.42345428 -428.12362671]
[-41.79121017 -441.77566528]
[-30.67248154 -452.10708618]
[-16.57098770 -457.72067261]
[-1.39384127 -457.85723877]
[12.80637455 -452.49829102]
[24.10919762 -442.36859131]
[30.98601341 -428.83810425]
[32.50679016 -413.73672485]
[28.46585274 -399.10678101]
[19.40970612 -386.92684937]
[6.56312037 -378.84417725]
[9.45380402 -364.12536621]
[12.34448814 -349.40652466]
[15.23517227 -334.68768311]
[18.12585640 -319.96887207]
[21.01654053 -305.25003052]
[23.90722275 -290.53121948]
[36.37622833 -282.46527100]
[39.51747131 -267.57943726]
[30.97262192 -254.55549622]
[33.86330414 -239.83666992]
[43.90827560 -228.83903503]
[38.97546768 -213.80647278]
[41.86615372 -199.08764648]
[51.91112137 -188.09001160]
[46.97831726 -173.05744934]
[49.86899948 -158.33862305]
[52.75968552 -143.61979675]
[55.65036774 -128.90095520]
[58.54105377 -114.18212891]
[61.43173599 -99.46330261]
[65.82819366 -93.47637939]
[64.23285675 -84.43117523]
[66.83757782 -69.65905762]
[69.44229889 -54.88694000]
[72.04701996 -40.11482620]
[74.65174866 -25.34270859]
[77.25646973 -10.57059288]
[79.86119080 4.20152378]
[89.69100952 15.39187145]
[84.46763611 30.32595634]
[88.74717712 36.39700317]
[86.97673035 45.40957642]
[89.29451752 60.22942352]
[91.61229706 75.04927063]
[138.86540222 92.89962006]
[151.70791626 100.65010834]
[164.55041504 108.40059662]
[177.39291382 116.15109253]
[191.63531494 110.28081512]
[206.43045044 113.88044739]
[216.15403748 125.36591339]
[217.23703003 140.19714355]
[230.07952881 147.94763184]
[242.92204285 155.69812012]
[251.93476868 157.46772766]
[255.93637085 163.72547913]
[268.62615967 171.72354126]
[281.31594849 179.72160339]
[294.00576782 187.71966553]
[306.69555664 195.71774292]
[323.31918335 199.04811096]
[324.72082520 215.94401550]
[308.87322998 221.96815491]
[298.69747925 208.40753174]
[286.00769043 200.40946960]
[273.31790161 192.41140747]
[260.62808228 184.41333008]
[247.93829346 176.41526794]
[235.17155457 168.54061890]
[222.32904053 160.79013062]
[209.48654175 153.03964233]
[195.85972595 158.99343872]
[181.16619873 155.74311829]
[171.08621216 144.33053589]
[169.64242554 128.99359131]
[156.79992676 121.24310303]
[143.95742798 113.49261475]
[131.11491394 105.74211884]
[124.17198944 108.57862091]
[110.28612518 114.25161743]
[103.34320068 117.08811951]
[99.60158539 131.61396790]
[95.85996246 146.13981628]
[92.11834717 160.66566467]
[88.37673187 175.19151306]
[84.63511658 189.71736145]
[97.14985657 198.27055359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 160]
[16 159]
[17 158]
[18 157]
[19 156]
[20 155]
[21 35]
[22 34]
[23 33]
[36 118]
[37 117]
[38 116]
[39 114]
[41 112]
[42 111]
[43 110]
[44 109]
[45 108]
[46 107]
[47 106]
[48 104]
[49 103]
[50 102]
[51 101]
[52 100]
[53 99]
[55 97]
[56 96]
[58 94]
[59 93]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[119 152]
[120 151]
[121 150]
[122 149]
[126 145]
[127 144]
[128 143]
[130 142]
[131 141]
[132 140]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
