%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGCUGAGCCCGGCUGUCAGUCCUUUCGCGCCUCGGCGGCGCGGCAUAGCCCGGCUCGGCCUGUAAAGCAGUCUCAAGCCUGCCGCAGGGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[215.04847717 228.76295471]
[205.73327637 213.53527832]
[202.80198669 195.89334106]
[206.70666504 178.40728760]
[194.13534546 170.22425842]
[181.56402588 162.04122925]
[168.99270630 153.85821533]
[156.42138672 145.67518616]
[143.85006714 137.49217224]
[131.27873230 129.30914307]
[118.70742035 121.12612152]
[106.13609314 112.94309235]
[92.18579102 112.00473022]
[85.68087769 99.62822723]
[73.10955811 91.44520569]
[60.53823853 83.26217651]
[47.96691513 75.07915497]
[35.39559555 66.89613342]
[22.82427216 58.71310806]
[15.94902325 57.94657898]
[11.30376148 54.27372742]
[9.73305416 49.58124161]
[-2.28814983 40.60958481]
[-6.51156759 40.41925049]
[-10.15402985 39.10917282]
[-12.95101929 36.97345734]
[-14.75135517 34.35925293]
[-15.52455807 31.62822342]
[-15.35610867 29.11837578]
[-25.79134750 18.34313583]
[-36.22658539 7.56789446]
[-46.66182327 -3.20734549]
[-57.09706116 -13.98258591]
[-67.53230286 -24.75782585]
[-83.48568726 -26.45161247]
[-91.98635101 -40.05743027]
[-86.51331329 -55.13805771]
[-71.26501465 -60.12493134]
[-57.93864441 -51.19254684]
[-56.75706100 -35.19306564]
[-46.32182312 -24.41782379]
[-35.88658142 -13.64258385]
[-25.45134544 -2.86734366]
[-15.01610661 7.90789652]
[-4.58086872 18.68313599]
[6.68350792 28.58837891]
[18.70471191 37.56003571]
[31.00729561 46.14178848]
[43.57861710 54.32481003]
[56.14994049 62.50783539]
[68.72126007 70.69085693]
[81.29257965 78.87387848]
[93.86390686 87.05690765]
[107.81420898 87.99526978]
[114.31912231 100.37177277]
[126.89044189 108.55479431]
[139.46176147 116.73782349]
[152.03308105 124.92084503]
[164.60440063 133.10386658]
[177.17572021 141.28689575]
[189.74705505 149.46990967]
[202.31837463 157.65293884]
[214.88969421 165.83596802]
[224.51470947 157.81007385]
[235.90757751 152.62432861]
[248.25228882 150.64166260]
[260.66693115 151.99584961]
[272.26666260 156.58258057]
[282.22674561 164.06741333]
[289.84133911 173.91018677]
[294.57330322 185.40394592]
[296.09219360 197.72575378]
[294.29736328 209.99562073]
[289.32452393 221.33927917]
[300.74621582 231.06271362]
[312.16790771 240.78613281]
[323.58959961 250.50956726]
[329.10427856 251.49873352]
[333.17938232 254.31912231]
[335.34356689 258.05953979]
[335.58251953 261.75720215]
[346.01776123 272.53244019]
[356.45300293 283.30767822]
[366.88824463 294.08291626]
[382.25064087 301.25463867]
[379.61193848 318.00198364]
[362.78863525 320.10253906]
[356.11300659 304.51815796]
[345.67776489 293.74291992]
[335.24252319 282.96768188]
[324.80728149 272.19244385]
[313.86618042 261.93124390]
[302.44448853 252.20782471]
[291.02279663 242.48440552]
[279.60110474 232.76097107]
[264.18533325 241.49754333]
[246.58580017 243.82080078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[22 47]
[23 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[74 95]
[75 94]
[76 93]
[77 92]
[81 91]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
