%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGGUCAGCCCGCGCGAGGGGUCGGCGUUCAUUCCUGCCGCUGCCGCCGCCGCCGCCGAGGUCCCGCACCAGCC\
) } def
/len { sequence length } bind def

/coor [
[102.45833588 254.69470215]
[107.84350586 240.36785889]
[119.27756500 230.19334412]
[115.59528351 215.65234375]
[111.91299438 201.11132812]
[102.40469360 196.49333191]
[97.03471375 187.13032532]
[97.88416290 176.14627075]
[104.90863037 167.37152100]
[102.43971252 152.57609558]
[99.97079468 137.78068542]
[97.19662476 123.03945160]
[94.11839294 108.35869598]
[89.38984680 101.52004242]
[91.22956085 93.00814819]
[88.76064301 78.21273041]
[86.29172516 63.41731262]
[81.67333221 55.19392395]
[84.03971863 47.96049881]
[74.65485382 35.22335052]
[80.75846863 21.63676834]
[78.90308380 6.75195980]
[74.62846375 -1.65525591]
[77.29174805 -8.78471470]
[76.05306244 -23.73348236]
[74.81436920 -38.68224716]
[73.57568359 -53.63101578]
[72.33699036 -68.57978058]
[57.65318680 -72.27635956]
[44.96662903 -80.54254913]
[35.65346146 -92.48171234]
[30.72390366 -106.79877472]
[30.71267891 -121.94071960]
[35.62100601 -136.26507568]
[44.91646194 -148.21803284]
[57.59075165 -156.50302124]
[72.26905823 -160.22135925]
[87.35919189 -158.96971130]
[101.22428131 -152.88383484]
[112.36035156 -142.62387085]
[119.55944824 -129.30278015]
[122.04065704 -114.36549377]
[119.53484344 -99.43232727]
[112.31381226 -86.12310028]
[101.16085815 -75.88150787]
[87.28575897 -69.81847382]
[88.52444458 -54.86970520]
[89.76313782 -39.92094040]
[91.00183105 -24.97217178]
[92.24051666 -10.02340412]
[93.78788757 4.89657021]
[95.64328003 19.78137970]
[104.89543152 31.45386505]
[98.92453003 46.10510635]
[101.08714294 60.94839096]
[103.55606079 75.74381256]
[106.02497864 90.53923035]
[108.79914856 105.28046417]
[111.87738037 119.96121979]
[116.83165741 127.98672485]
[114.76621246 135.31176758]
[117.23513031 150.10717773]
[119.70404816 164.90260315]
[133.28759766 179.52890015]
[126.45400238 197.42904663]
[130.13629150 211.97006226]
[133.81857300 226.51106262]
[148.71705627 230.01727295]
[160.27200317 240.05430603]
[165.82814026 254.31570435]
[164.10873413 269.52432251]
[155.50888062 282.18533325]
[142.00476074 289.38931274]
[126.69953156 289.48086548]
[113.11020660 282.43890381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[9 63]
[10 62]
[11 61]
[12 59]
[13 58]
[15 57]
[16 56]
[17 55]
[19 54]
[21 52]
[22 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
