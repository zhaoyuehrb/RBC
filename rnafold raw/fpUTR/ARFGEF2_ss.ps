%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGCCGUGGGGCCGAGGUGUCGCUUCCUGACGGGGCGGCGCGGACGGACGCGGCCGGUGCCGGCCGGGACGCCGGGCCCGCAGCCUAGCUCGCCAUCUCGCUCACGCCGCCCGCCCGCGGGGCCGUCAGCCCCCGCCGGGCCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[183.52464294 299.49078369]
[177.25523376 285.86380005]
[170.98582458 272.23681641]
[164.71641541 258.60983276]
[158.44702148 244.98284912]
[152.17761230 231.35588074]
[139.82904053 223.02748108]
[141.09019470 207.25662231]
[134.82078552 193.62963867]
[128.55137634 180.00265503]
[122.28197479 166.37567139]
[116.01257324 152.74870300]
[109.74316406 139.12171936]
[103.47376251 125.49474335]
[98.17751312 125.66568756]
[92.95856476 124.74806976]
[88.03826904 122.78082275]
[83.62529755 119.84736633]
[71.12126160 128.13284302]
[58.61722565 136.41831970]
[46.11318970 144.70379639]
[33.60915375 152.98925781]
[23.74540329 166.77848816]
[7.76450729 161.11744690]
[8.78035545 144.19396973]
[25.32368088 140.48522949]
[37.82771683 132.19975281]
[50.33175278 123.91427612]
[62.83578873 115.62880707]
[75.33982086 107.34333038]
[74.32559204 101.69513702]
[74.58841705 95.96262360]
[76.11523438 90.43093872]
[78.83010101 85.37522125]
[82.59796906 81.04695129]
[87.23142242 77.66141510]
[92.50000000 75.38701630]
[92.50000000 60.38702011]
[92.50000000 45.38702011]
[92.50000000 30.38702011]
[92.50000000 15.38701916]
[92.50000000 0.38701952]
[92.50000000 -14.61298084]
[92.50000000 -29.61297989]
[84.76270294 -43.41315460]
[92.50000000 -56.14042664]
[92.50000000 -71.14042664]
[84.76270294 -84.94059753]
[92.50000000 -97.66786957]
[92.50000000 -112.66786957]
[92.34600067 -127.66707611]
[92.03802490 -142.66390991]
[82.13552094 -158.15490723]
[91.11598969 -173.20137024]
[90.50016785 -188.18872070]
[89.88433838 -203.17607117]
[89.11467743 -218.15631104]
[88.19126892 -233.12785339]
[77.66112518 -248.19924927]
[86.01629639 -263.60171509]
[84.78568268 -278.55114746]
[83.40165710 -293.48715210]
[81.86436462 -308.40817261]
[80.32707214 -323.32919312]
[71.21618652 -336.26373291]
[77.60837555 -349.71694946]
[76.07108307 -364.63796997]
[74.53379059 -379.55899048]
[72.99649811 -394.48001099]
[63.88561249 -407.41455078]
[70.27780151 -420.86776733]
[68.74050903 -435.78878784]
[61.10271835 -450.92483521]
[73.53290558 -462.45422363]
[88.05273438 -453.70147705]
[83.66152954 -437.32608032]
[85.19882202 -422.40505981]
[94.19974518 -410.53775024]
[87.91751862 -396.01730347]
[89.45481110 -381.09628296]
[90.99210358 -366.17526245]
[92.52939606 -351.25424194]
[101.53031921 -339.38696289]
[95.24809265 -324.86648560]
[96.78538513 -309.94546509]
[98.32267761 -295.02444458]
[102.16033936 -288.65383911]
[99.73511505 -279.78176880]
[100.96572876 -264.83230591]
[110.00785828 -256.73898315]
[111.12226105 -244.25180054]
[103.16281891 -234.05126953]
[104.08622742 -219.07972717]
[107.65911865 -212.55694580]
[104.87169647 -203.79190063]
[105.48751831 -188.80453491]
[106.10334778 -173.81718445]
[114.80557251 -165.35945129]
[115.40637970 -152.83705139]
[107.03486633 -142.97189331]
[107.34284210 -127.97505951]
[110.64492035 -121.31108856]
[107.50000000 -112.66786957]
[107.50000000 -97.66786957]
[115.23729706 -84.94059753]
[107.50000000 -71.14042664]
[107.50000000 -56.14042664]
[115.23729706 -43.41315460]
[107.50000000 -29.61297989]
[107.50000000 -14.61298084]
[107.50000000 0.38701952]
[107.50000000 15.38701916]
[107.50000000 30.38702011]
[107.50000000 45.38702011]
[107.50000000 60.38702011]
[107.50000000 75.38701630]
[125.13460541 94.49543762]
[117.10073853 119.22533417]
[123.37014771 132.85231018]
[129.63955688 146.47929382]
[135.90895081 160.10627747]
[142.17835999 173.73324585]
[148.44776917 187.36022949]
[154.71716309 200.98721313]
[167.51416016 210.29029846]
[165.80459595 225.08647156]
[172.07398987 238.71345520]
[178.34339905 252.34042358]
[184.61280823 265.96740723]
[190.88221741 279.59439087]
[197.15161133 293.22137451]
[212.41510010 303.47109985]
[210.18814087 320.85168457]
[216.73600769 334.34707642]
[223.28387451 347.84246826]
[229.83175659 361.33782959]
[236.37962341 374.83322144]
[249.36492920 383.87161255]
[247.95950317 398.69976807]
[254.50737000 412.19515991]
[266.86138916 423.80612183]
[259.12411499 438.89157104]
[242.48632812 435.63275146]
[241.01199341 418.74301147]
[234.46412659 405.24765015]
[221.94715881 397.17453003]
[222.88423157 381.38110352]
[216.33636475 367.88571167]
[209.78849792 354.39031982]
[203.24063110 340.89495850]
[196.69274902 327.39956665]
[185.33757019 323.11914062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[4 128]
[5 127]
[6 126]
[8 124]
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[37 116]
[38 115]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[46 107]
[47 106]
[49 104]
[50 103]
[51 101]
[52 100]
[54 97]
[55 96]
[56 95]
[57 93]
[58 92]
[60 89]
[61 88]
[62 86]
[63 85]
[64 84]
[66 82]
[67 81]
[68 80]
[69 79]
[71 77]
[72 76]
[133 151]
[134 150]
[135 149]
[136 148]
[137 147]
[139 145]
[140 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
