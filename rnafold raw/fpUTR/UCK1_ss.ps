%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAUCGCUCCGGUUGCCUCCGACCUCGGCGCUGGGCGGGCGCGCCGGGCCUGGGGAAGGGGCGGGCGCGGGGACCCGAUGCGCGGGAGCGGAGGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[100.35702515 308.16061401]
[110.64509583 296.16348267]
[109.26107025 281.22747803]
[97.67375946 271.93930054]
[96.05739594 256.81176758]
[105.87823486 244.72093201]
[104.49420929 229.78491211]
[103.11018372 214.84890747]
[101.72615814 199.91288757]
[100.34213257 184.97686768]
[98.95811462 170.04086304]
[97.57408905 155.10484314]
[88.69546509 143.14578247]
[95.12644196 128.69056702]
[93.74241638 113.75455475]
[88.32379150 99.76747131]
[79.28427124 87.79721069]
[70.24475098 75.82695770]
[61.20523453 63.85669708]
[53.39664459 58.78178787]
[52.07842255 51.37574005]
[43.41181564 39.13278961]
[28.08728790 36.34055328]
[19.47252083 23.80099869]
[22.22892952 9.20861053]
[13.56232262 -3.03434348]
[4.89571476 -15.27729702]
[-3.77089286 -27.52025032]
[-12.43750000 -39.76320648]
[-21.10410690 -52.00615692]
[-28.75271225 -57.31912231]
[-29.84223557 -64.76225281]
[-38.12771225 -77.26628876]
[-46.41318512 -89.77032471]
[-60.48574829 -97.00036621]
[-61.06601715 -111.88366699]
[-69.35149384 -124.38770294]
[-77.63696289 -136.89173889]
[-85.92243958 -149.39576721]
[-100.83554077 -156.21716309]
[-102.11502075 -172.56631470]
[-88.44464874 -181.62463379]
[-73.88734436 -174.07368469]
[-73.41840363 -157.68124390]
[-65.13292694 -145.17721558]
[-56.84745407 -132.67317200]
[-48.56198120 -120.16914368]
[-35.08205032 -113.83347321]
[-33.90914917 -98.05580139]
[-25.62367439 -85.55176544]
[-17.33819962 -73.04772949]
[-8.86115360 -60.67276764]
[-0.19454658 -48.42981339]
[8.47206116 -36.18685913]
[17.13866806 -23.94390488]
[25.80527496 -11.70095062]
[34.47188187 0.54200262]
[49.15086365 2.79213405]
[58.11444092 15.08477116]
[55.65476990 30.46618080]
[64.32138062 42.70913315]
[73.17549133 54.81717682]
[82.21501160 66.78743744]
[91.25453186 78.75769043]
[100.29405212 90.72795105]
[106.84562683 85.94208527]
[116.87710571 85.89450836]
[131.81312561 84.51048279]
[146.74913025 83.12645721]
[161.66206360 81.51258850]
[176.54837036 79.66926575]
[191.43467712 77.82594299]
[204.18827820 67.51683044]
[219.39375305 73.65894318]
[221.40901184 89.93379211]
[208.16093445 99.59921265]
[193.27799988 92.71224976]
[178.39169312 94.55557251]
[163.50538635 96.39889526]
[157.14416504 100.41414642]
[148.13316345 98.06246948]
[133.19714355 99.44649506]
[118.26113129 100.83052063]
[108.67842865 112.37052917]
[110.06245422 127.30654144]
[119.04006958 140.33393860]
[112.51010132 153.72082520]
[113.89412689 168.65682983]
[115.27815247 183.59284973]
[116.66217804 198.52886963]
[118.04619598 213.46487427]
[119.43022156 228.40089417]
[120.81424713 243.33689880]
[132.68955994 253.41731262]
[133.88038635 268.58425903]
[124.19708252 279.84344482]
[125.58110809 294.77944946]
[137.89846802 304.68188477]
[139.52299500 320.40246582]
[129.49090576 332.61444092]
[113.75402832 334.07266235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[6 93]
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[14 85]
[15 84]
[16 65]
[17 64]
[18 63]
[19 62]
[21 61]
[22 60]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[32 51]
[33 50]
[34 49]
[36 47]
[37 46]
[38 45]
[39 44]
[67 83]
[68 82]
[69 81]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
