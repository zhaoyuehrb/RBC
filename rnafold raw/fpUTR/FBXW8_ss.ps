%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGACACUUCCCUGGGCGGGACUGUCUCGUGGCACCCGGUGGAACCGAGGAGAACGUGGAGCGCCGGGAGCGGCGAAU\
) } def
/len { sequence length } bind def

/coor [
[42.55238724 143.57012939]
[39.67745972 143.04565430]
[37.46023178 141.72927856]
[23.22988129 146.47238159]
[8.99953175 151.21549988]
[-5.23081779 155.95861816]
[-19.46116829 160.70173645]
[-22.12071609 164.21218872]
[-25.41347313 166.52444458]
[-28.90409660 167.58546448]
[-32.18285370 167.48323059]
[-34.90778351 166.42727661]
[-36.83778000 164.71728516]
[-51.70634460 166.69863892]
[-66.57491302 168.67997742]
[-81.44348145 170.66131592]
[-92.29267883 182.47972107]
[-108.28639221 181.22241211]
[-117.15560150 167.85392761]
[-112.09661865 152.62939453]
[-96.99025726 147.22779846]
[-83.42482758 155.79275513]
[-68.55625916 153.81141663]
[-53.68769073 151.83006287]
[-38.81912231 149.84872437]
[-24.20428276 146.47138977]
[-9.97393322 141.72827148]
[4.25641680 136.98515320]
[18.48676682 132.24203491]
[32.71711731 127.49892426]
[46.43564987 121.43247223]
[59.51962280 114.09696198]
[72.60359192 106.76145172]
[85.68756104 99.42594147]
[92.99510193 87.50572968]
[106.97692871 87.49008942]
[120.06089783 80.15457916]
[128.31449890 66.65685272]
[143.19984436 67.18175507]
[156.28382874 59.84624863]
[169.36779785 52.51073837]
[182.45176697 45.17522812]
[195.53573608 37.83971786]
[208.61970520 30.50420761]
[221.70367432 23.16869736]
[223.88966370 9.72668934]
[233.33940125 0.19436583]
[246.37528992 -2.04205751]
[258.10858154 3.62504387]
[271.46078491 -3.21009541]
[284.81295776 -10.04523468]
[293.57141113 -23.22096634]
[308.42623901 -22.13315201]
[314.70343018 -36.89717865]
[330.19815063 -41.05569458]
[343.02416992 -31.41864967]
[343.34246826 -15.37875366]
[330.90887451 -5.24044514]
[315.26138306 -8.78096676]
[307.45794678 3.90587020]
[291.64810181 3.30695176]
[278.29589844 10.14209080]
[264.94372559 16.97723007]
[260.56759644 33.09727097]
[245.65214539 41.33248138]
[229.03918457 36.25266647]
[215.95521545 43.58817673]
[202.87124634 50.92368698]
[189.78727722 58.25919724]
[176.70330811 65.59471130]
[163.61933899 72.93021393]
[150.53535461 80.26572418]
[143.21762085 93.23876953]
[127.39640808 93.23854828]
[114.31243896 100.57405853]
[107.00489807 112.49427032]
[93.02307129 112.50991058]
[79.93910217 119.84542084]
[66.85513306 127.18093109]
[53.77116013 134.51643372]
[51.81949997 138.46453857]
[49.02053070 141.35496521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[13 25]
[14 24]
[15 23]
[16 22]
[31 80]
[32 79]
[33 78]
[34 77]
[36 75]
[37 74]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[49 63]
[50 62]
[51 61]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
