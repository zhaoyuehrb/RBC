%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUUCUCUCUGCCACUCCCCACGAGUGGGUCACUCCACGGGGAGCCCCAACGCUGGCAGGAGAGGAUCCUACAGGACAGCAAGGAG\
) } def
/len { sequence length } bind def

/coor [
[144.63255310 195.01911926]
[140.42594910 187.45454407]
[139.68367004 178.73484802]
[142.61445618 170.38749695]
[133.71223450 158.31478882]
[124.80999756 146.24208069]
[115.90776825 134.16937256]
[107.00553894 122.09666443]
[98.10330963 110.02395630]
[91.00700378 105.80466461]
[89.10887909 97.36440277]
[80.63825989 84.98504639]
[72.16763306 72.60568237]
[63.69701385 60.22632217]
[55.22639465 47.84696198]
[46.75577164 35.46760178]
[36.43365479 24.58394814]
[24.51993752 15.47003937]
[12.60621929 6.35613060]
[0.69250178 -2.75777817]
[-11.22121620 -11.87168694]
[-23.13493347 -20.98559570]
[-40.31435013 -18.31436348]
[-53.91139603 -28.60318756]
[-55.92878342 -45.19733810]
[-68.15672302 -53.88511658]
[-80.38465881 -62.57289505]
[-92.61260223 -71.26067352]
[-104.84053802 -79.94845581]
[-121.25448608 -84.19329071]
[-121.71936798 -101.14086914]
[-105.56280518 -106.27913666]
[-96.15276337 -92.17639160]
[-83.92481995 -83.48860931]
[-71.69688416 -74.80083466]
[-59.46894455 -66.11305237]
[-47.24100494 -57.42527771]
[-34.83003235 -61.34143448]
[-22.26390457 -57.26715469]
[-14.27841759 -46.49891663]
[-14.02102470 -32.89931488]
[-2.10730696 -23.78540421]
[9.80641079 -14.67149544]
[21.72012901 -5.55758715]
[33.63384628 3.55632186]
[45.54756165 12.67023087]
[43.85657501 -2.23414969]
[50.26764679 -15.79505348]
[62.85893631 -23.94732094]
[77.85594177 -24.24714279]
[90.76300049 -16.60463905]
[97.71095276 -3.31081033]
[96.61701202 11.64924622]
[87.80911255 23.79094505]
[73.92759705 29.47456360]
[59.13513184 26.99697876]
[67.60575104 39.37633896]
[76.07637787 51.75570297]
[84.54699707 64.13506317]
[93.01761627 76.51441956]
[101.48823547 88.89378357]
[110.17601776 101.12171936]
[119.07824707 113.19443512]
[127.98047638 125.26714325]
[136.88270569 137.33984375]
[145.78494263 149.41255188]
[154.68716431 161.48526001]
[175.87272644 168.38513184]
[178.65235901 189.75514221]
[189.16494751 200.45492554]
[199.67753601 211.15470886]
[210.19012451 221.85449219]
[224.82366943 217.36917114]
[239.86331177 220.20954895]
[251.85305786 229.72293091]
[258.03775024 243.72322083]
[256.99621582 258.99325562]
[248.96774292 272.02407837]
[235.79725647 279.82131958]
[220.51123047 280.59320068]
[206.62226868 274.16238403]
[197.32196045 262.00662231]
[194.74745178 246.91918945]
[199.49034119 232.36709595]
[188.97775269 221.66729736]
[178.46516418 210.96751404]
[167.95257568 200.26773071]
[159.75846863 201.96723938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[9 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[69 87]
[70 86]
[71 85]
[72 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
