%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGCCAGAGCGGCGGCCGGUCCCGCGCGGAGCCCGGCGCCCCUCCAGCCCGAGCCAGGACGCCGCCGGCCCCGGUCCCGGCCCCGGGCACGCAGCGAGCCAGGGAUGUGAGCGGCGCCCCGCGGC\
) } def
/len { sequence length } bind def

/coor [
[116.13854218 127.03113556]
[104.20263672 132.00866699]
[90.94800568 131.82205200]
[78.56616211 126.24540710]
[69.20571899 115.96482086]
[64.60067749 102.50334167]
[49.85018921 105.22789764]
[40.88111115 117.96340942]
[25.88320732 120.51636505]
[13.79711342 111.88723755]
[-0.95337129 114.61178589]
[-15.70385647 117.33634186]
[-27.86909294 127.45155334]
[-41.79003525 122.15470123]
[-56.54051971 124.87925720]
[-71.29100800 127.60380554]
[-86.04148865 130.32835388]
[-94.00885773 135.00878906]
[-101.18405151 132.93507385]
[-115.99651337 135.29963684]
[-130.80897522 137.66418457]
[-145.62142944 140.02874756]
[-158.02937317 149.84472656]
[-171.81719971 144.21044922]
[-186.59976196 146.75518799]
[-201.35025024 149.47975159]
[-213.46879578 160.52841187]
[-229.01234436 155.30059814]
[-231.99104309 139.17424011]
[-219.34063721 128.73875427]
[-204.07479858 134.72926331]
[-189.32432556 132.00469971]
[-183.25555420 127.65110779]
[-174.18176270 129.39799500]
[-162.83329773 119.75114441]
[-147.98597717 125.21628571]
[-133.17352295 122.85173035]
[-118.36106873 120.48717499]
[-103.54860687 118.12261963]
[-88.76604462 115.57787323]
[-74.01555634 112.85332489]
[-59.26507187 110.12876892]
[-44.51458740 107.40422058]
[-33.40440369 97.48387909]
[-18.42840958 102.58585358]
[-3.67792416 99.86130524]
[11.07256126 97.13674927]
[19.27857590 84.75947571]
[34.19885254 81.78626251]
[47.12563705 90.47740936]
[61.87612152 87.75286102]
[69.05757141 74.58369446]
[63.35953140 60.70809174]
[48.68196869 54.84766006]
[42.52417374 40.29234695]
[48.53945923 25.67756462]
[63.15906143 19.67400169]
[77.70942688 25.84346581]
[83.55809021 40.52572632]
[77.23513794 55.01005554]
[82.93317413 68.88565826]
[103.10124207 66.52481842]
[120.12293243 75.44216156]
[128.63034058 91.44865417]
[143.62033081 90.90082550]
[158.61032104 90.35299683]
[173.60031128 89.80516815]
[188.59030151 89.25733948]
[203.89486694 79.10417938]
[219.09103394 87.79288483]
[234.06323242 86.88019562]
[249.03544617 85.96750641]
[262.33926392 77.40486145]
[275.51373291 84.35341644]
[290.48593140 83.44072723]
[305.45816040 82.52803802]
[318.76196289 73.96539307]
[331.93643188 80.91395569]
[346.90866089 80.00126648]
[360.21246338 71.43861389]
[373.38693237 78.38717651]
[388.35916138 77.47448730]
[397.53405762 68.31315613]
[410.09124756 67.91559601]
[419.22256470 75.94771576]
[434.21255493 75.39988708]
[449.20254517 74.85205078]
[462.71093750 66.61590576]
[475.71231079 73.88321686]
[490.70230103 73.33538818]
[505.69229126 72.78755951]
[519.20068359 64.55140686]
[532.20202637 71.81871796]
[547.19201660 71.27088928]
[562.79974365 64.65010834]
[573.48248291 77.81507874]
[563.78924561 91.72470856]
[547.73986816 86.26087952]
[532.74987793 86.80871582]
[520.31365967 95.00567627]
[506.24011230 87.77754974]
[491.25012207 88.32537842]
[476.26013184 88.87320709]
[463.82391357 97.07017517]
[449.75036621 89.84204865]
[434.76037598 90.38987732]
[419.77038574 90.93770599]
[405.49133301 101.06319427]
[389.27185059 92.44669342]
[374.29962158 93.35938263]
[362.06674194 101.85675049]
[347.82135010 94.97347260]
[332.84912109 95.88616180]
[320.61624146 104.38352966]
[306.37084961 97.50025177]
[291.39862061 98.41294098]
[276.42642212 99.32563019]
[264.19351196 107.82299805]
[249.94813538 100.93971252]
[234.97592163 101.85240173]
[220.00372314 102.76509094]
[211.69688416 111.64724731]
[199.16058350 112.47287750]
[189.13813782 104.24732971]
[174.14814758 104.79515839]
[159.15815735 105.34298706]
[144.16815186 105.89081573]
[129.17816162 106.43865204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 51]
[7 50]
[10 47]
[11 46]
[12 45]
[14 43]
[15 42]
[16 41]
[17 40]
[19 39]
[20 38]
[21 37]
[22 36]
[24 34]
[25 32]
[26 31]
[52 61]
[53 60]
[64 128]
[65 127]
[66 126]
[67 125]
[68 124]
[70 121]
[71 120]
[72 119]
[74 117]
[75 116]
[76 115]
[78 113]
[79 112]
[81 110]
[82 109]
[85 107]
[86 106]
[87 105]
[89 103]
[90 102]
[91 101]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
