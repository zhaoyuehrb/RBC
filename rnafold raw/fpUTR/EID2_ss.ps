%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUGCAUUUACAGCGCGCAUAGCGCCCACGCACGCGCACUGGGGUGUCCGCCGGGCAUCGCUCUGUCCAGUUAUUCCAGUUUCUCUGGGAGCAGCCGAGUUGACCCCACGGUCUGAG\
) } def
/len { sequence length } bind def

/coor [
[54.93939590 261.85180664]
[50.29156876 276.11355591]
[41.89647293 288.54425049]
[30.40312958 298.18289185]
[16.70009804 304.28427124]
[1.84675813 306.37670898]
[-13.00857162 304.29846191]
[-26.71742249 298.21014404]
[-38.21995926 288.58248901]
[-46.62691879 276.15982056]
[-51.28835297 261.90249634]
[-51.84389114 246.91279602]
[-48.25057983 232.34954834]
[-40.78622055 219.33865356]
[-30.02576447 208.88442993]
[-44.84108734 211.23094177]
[-59.65641403 213.57746887]
[-74.47174072 215.92398071]
[-89.28706360 218.27049255]
[-93.87236023 226.76010132]
[-101.77724457 232.04701233]
[-111.09831238 233.01409912]
[-119.66260529 229.56623840]
[-125.53418732 222.62249756]
[-140.48794556 223.79937744]
[-155.44171143 224.97627258]
[-168.64283752 234.70570374]
[-183.55894470 227.89088440]
[-184.84561157 211.54228210]
[-171.17921448 202.47796631]
[-156.61859131 210.02250671]
[-141.66484070 208.84562683]
[-126.71107483 207.66873169]
[-110.97435760 194.42120361]
[-91.63358307 203.45516968]
[-76.81825256 201.10865784]
[-62.00292969 198.76214600]
[-47.18760681 196.41561890]
[-32.37228012 194.06910706]
[-18.66909981 187.96806335]
[-7.01190948 178.52824402]
[4.64527988 169.08843994]
[16.30246925 159.64863586]
[27.83509636 150.05705261]
[39.24118805 140.31533813]
[50.64727402 130.57360840]
[53.72787476 123.75303650]
[62.48181915 120.73092651]
[74.13900757 111.29112244]
[85.79619598 101.85131836]
[90.98564911 88.86820221]
[104.76399994 86.49149323]
[116.42118835 77.05168915]
[118.21708679 61.57872772]
[130.17359924 52.17148209]
[144.91363525 53.97895432]
[156.57083130 44.53914642]
[168.22802734 35.09934235]
[168.75805664 24.07987785]
[175.19105530 15.39105129]
[185.15982056 11.81748676]
[195.21871948 14.33352947]
[207.35397339 5.51675081]
[219.48922729 -3.30002809]
[231.62448120 -12.11680698]
[233.83502197 -17.11978340]
[237.42918396 -20.37182426]
[241.47180176 -21.63807297]
[245.07583618 -21.10470772]
[257.86544800 -28.94218636]
[270.65502930 -36.77966309]
[283.44464111 -44.61714172]
[287.24481201 -59.72332001]
[300.32693481 -67.48944092]
[314.70492554 -63.77347565]
[315.78808594 -79.25270081]
[325.78860474 -91.11732483]
[340.86108398 -94.80515289]
[355.20983887 -88.89813995]
[363.31750488 -75.66765594]
[362.06649780 -60.20109558]
[351.93783569 -48.44565964]
[336.82623291 -44.92155457]
[322.54241943 -50.98387527]
[319.32589722 -36.48595810]
[306.46707153 -28.35544968]
[291.28210449 -31.82754135]
[278.49252319 -23.99006271]
[265.70291138 -16.15258408]
[252.91331482 -8.31510544]
[240.44126892 0.01844816]
[228.30601501 8.83522701]
[216.17076111 17.65200615]
[204.03550720 26.46878433]
[197.63200378 44.63666534]
[177.66783142 46.75653076]
[166.01063538 56.19633484]
[154.35345459 65.63613892]
[153.05679321 80.42986298]
[141.36921692 90.16923523]
[125.86099243 88.70887756]
[114.20380402 98.14868164]
[109.01435089 111.13179779]
[95.23600006 113.50850677]
[83.57881165 122.94831085]
[71.92162323 132.38812256]
[60.38899612 141.97970581]
[48.98290634 151.72142029]
[37.57681656 161.46315002]
[33.01003647 169.51976013]
[25.74227524 171.30583191]
[14.08508587 180.74563599]
[2.42789626 190.18544006]
[-9.22929287 199.62524414]
[5.73723412 198.62371826]
[20.40099716 201.78189087]
[33.62833786 208.85560608]
[44.39664459 219.29800415]
[51.87341690 232.30175781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[24 33]
[25 32]
[26 31]
[40 114]
[41 113]
[42 112]
[43 111]
[44 109]
[45 108]
[46 107]
[48 106]
[49 105]
[50 104]
[52 102]
[53 101]
[56 98]
[57 97]
[58 96]
[62 94]
[63 93]
[64 92]
[65 91]
[69 90]
[70 89]
[71 88]
[72 87]
[75 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
