%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUUACCGUGGGGCGGAGCGGAGCGCCAGGCUCGCUGUACUCGCGCACCCACCAUGGCCUCCCGCAGCGCGGGCACCCUACUGACCGAGUUCAAUGCCGCCUACGUGCCCCCUGGACUCAUGCCCGG\
) } def
/len { sequence length } bind def

/coor [
[80.92179108 165.03849792]
[72.08141327 161.76194763]
[63.78122711 157.29035950]
[56.18183136 151.71028137]
[49.43026733 145.12966919]
[43.65716553 137.67585754]
[38.97422791 129.49305725]
[35.47206879 120.73959351]
[33.21844482 111.58485413]
[18.24623871 112.49754333]
[3.27403069 113.41023254]
[-11.69817638 114.32292175]
[-26.67038345 115.23561096]
[-41.63036728 116.33054352]
[-56.57591248 117.60755157]
[-71.52145386 118.88455963]
[-86.45034027 120.34345245]
[-101.36035156 121.98402405]
[-116.27037048 123.62458801]
[-129.14151001 132.82481384]
[-142.63867188 126.52592468]
[-155.50982666 135.72615051]
[-169.00697327 129.42726135]
[-183.91699219 131.06784058]
[-198.82701111 132.70840454]
[-213.73703003 134.34896851]
[-222.26713562 147.45512390]
[-237.24102783 151.96249390]
[-251.58850098 145.74284363]
[-258.53509521 131.73289490]
[-254.80087280 116.54772186]
[-242.14900208 107.35729980]
[-226.55329895 108.50106049]
[-215.37759399 119.43895721]
[-200.46757507 117.79838562]
[-185.55755615 116.15782166]
[-170.64755249 114.51725006]
[-158.84286499 105.43437195]
[-144.27923584 111.61591339]
[-132.47456360 102.53303528]
[-117.91093445 108.71457672]
[-103.00092316 107.07400513]
[-88.09090424 105.43344116]
[-81.72054291 101.53444672]
[-72.79846191 103.93901062]
[-57.85292053 102.66200256]
[-42.90737534 101.38500214]
[-36.44395447 97.64228821]
[-27.58307457 100.26340485]
[-12.61086655 99.35071564]
[2.36134100 98.43802643]
[17.33354950 97.52533722]
[32.30575562 96.61264801]
[38.82478714 70.81818390]
[54.76983643 49.52013016]
[77.68405914 36.00012970]
[104.03676605 32.34137726]
[106.58151245 17.55880928]
[95.93016815 6.42978811]
[93.89806366 -8.66073608]
[101.05678558 -21.89768219]
[114.47662354 -28.30438805]
[117.02136993 -43.08695602]
[119.56610870 -57.86952209]
[122.11085510 -72.65209198]
[124.65559387 -87.43465424]
[121.38400269 -104.06994629]
[136.46351624 -111.81879425]
[148.08395386 -99.47368622]
[139.43815613 -84.88991547]
[136.89341736 -70.10734558]
[134.34867859 -55.32477951]
[131.80393982 -40.54221344]
[129.25918579 -25.75964546]
[139.76428223 -15.23438549]
[142.08474731 -0.36564603]
[135.12364197 13.17674160]
[121.36407471 20.10355186]
[118.81933594 34.88611984]
[129.57559204 39.01418686]
[139.47729492 44.90436935]
[148.23834229 52.38647842]
[155.60560608 61.24432755]
[161.36619568 71.22197723]
[165.35368347 82.03112793]
[167.45286560 93.35948181]
[167.60305786 104.87969208]
[165.79994202 116.25891876]
[179.87438965 121.44638824]
[193.94883728 126.63385773]
[208.02328491 131.82133484]
[222.09774780 137.00880432]
[236.17219543 142.19627380]
[250.24664307 147.38374329]
[267.03045654 138.77319336]
[284.51632690 144.95710754]
[291.89877319 161.62606812]
[306.20907593 166.12214661]
[320.57308960 170.44363403]
[334.98864746 174.58988953]
[350.76477051 170.11253357]
[362.34020996 181.72892761]
[357.80722046 197.48912048]
[341.82888794 201.18038940]
[330.84240723 189.00546265]
[316.42681885 184.85919189]
[309.05288696 186.04600525]
[301.71301270 180.43246460]
[287.40267944 175.93640137]
[278.56979370 183.34637451]
[267.12982178 185.54844666]
[255.94830322 181.87167358]
[247.88423157 173.13282776]
[245.05917358 161.45819092]
[230.98472595 156.27072144]
[216.91026306 151.08325195]
[202.83581543 145.89578247]
[188.76136780 140.70831299]
[174.68692017 135.52084351]
[160.61247253 130.33337402]
[155.81692505 138.45068359]
[149.94139099 145.82403564]
[143.09954834 152.31072998]
[135.42379761 157.78529358]
[127.06261444 162.14176941]
[118.17781830 165.29588318]
[108.94129181 167.18658447]
[99.53176880 167.77732849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[14 47]
[15 46]
[16 45]
[17 43]
[18 42]
[19 41]
[21 39]
[23 37]
[24 36]
[25 35]
[26 34]
[57 79]
[58 78]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[97 109]
[98 108]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
