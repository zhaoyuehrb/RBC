%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAACCGUUGGGUGGGGCCAGGAGAGCGUUGGGUGGGGCCAGGAAACCGUCUGGUGGGAUCUCCGCAGCUGCUUUUCACCUGCUGUUCCUCCUGCGCUUCCUAAGAGGAAGAAUCA\
) } def
/len { sequence length } bind def

/coor [
[112.75228119 365.83926392]
[108.17514801 351.55468750]
[109.66166687 336.62850952]
[116.96621704 323.52722168]
[128.88175964 314.41571045]
[143.43936157 310.79956055]
[158.23345947 313.27633667]
[170.81764221 321.43496704]
[165.77012634 307.30972290]
[160.72259521 293.18447876]
[149.15377808 283.80303955]
[151.79608154 268.20404053]
[146.74855042 254.07879639]
[141.70103455 239.95355225]
[136.42094421 234.64709473]
[136.71208191 225.38829041]
[132.03918457 211.13471985]
[127.36628723 196.88116455]
[122.69338226 182.62760925]
[118.02048492 168.37403870]
[112.97296143 154.24879456]
[107.55433655 140.26171875]
[102.13571167 126.27462769]
[96.71708679 112.28754425]
[90.74897003 98.52594757]
[84.24070740 85.01142120]
[77.73245239 71.49688721]
[71.22419739 57.98235321]
[64.71594238 44.46781921]
[58.02986908 31.04036903]
[51.16713715 17.70234299]
[44.30440903 4.36431694]
[37.44167709 -8.97370911]
[24.24786758 -17.70491409]
[25.30496597 -32.56195831]
[18.51042557 -38.85835648]
[18.44238472 -46.34388351]
[11.93412781 -59.85841370]
[5.42587233 -73.37294769]
[-1.95952380 -86.42882538]
[-10.18990040 -98.96919250]
[-18.42027855 -111.50956726]
[-26.65065384 -124.04993439]
[-34.88103104 -136.59030151]
[-43.11140823 -149.13067627]
[-58.63503647 -152.09590149]
[-67.44593048 -165.21626282]
[-64.31674194 -180.70767212]
[-51.10396194 -189.37934875]
[-35.64650345 -186.08656311]
[-27.11499977 -172.78283691]
[-30.57103729 -157.36105347]
[-22.34066010 -144.82067871]
[-14.11028385 -132.28031921]
[-5.87990713 -119.73994446]
[2.35046983 -107.19956970]
[10.58084679 -94.65920258]
[16.80425262 -108.30725098]
[31.28696060 -112.21252441]
[43.52818680 -103.54347992]
[44.65234756 -88.58566284]
[33.84436417 -78.18434143]
[18.94040489 -79.88120270]
[25.44866180 -66.36666870]
[31.95691681 -52.85213852]
[38.64299393 -39.42469025]
[51.34593582 -31.64751053]
[50.77970505 -15.83643913]
[57.64243317 -2.49841285]
[64.50516510 10.83961296]
[71.36789703 24.17763901]
[77.30046844 28.74297333]
[78.23047638 37.95956421]
[84.73873138 51.47409439]
[91.24698639 64.98863220]
[97.75524139 78.50315857]
[104.26349640 92.01769257]
[107.82740021 93.82998657]
[110.53250122 97.25609589]
[111.65460968 101.85492706]
[110.70417023 106.86891937]
[116.12279510 120.85600281]
[121.54141998 134.84309387]
[126.96004486 148.83016968]
[132.01518250 153.40231323]
[133.65646362 159.00953674]
[132.27404785 163.70114136]
[136.94694519 177.95469666]
[141.61984253 192.20826721]
[146.29273987 206.46182251]
[150.96565247 220.71539307]
[155.82627869 234.90602112]
[160.87379456 249.03126526]
[165.92132568 263.15652466]
[177.85118103 273.54827881]
[174.84783936 288.13696289]
[179.89537048 302.26220703]
[184.94288635 316.38745117]
[192.32829285 329.44332886]
[201.83460999 341.04632568]
[211.34094238 352.64932251]
[220.84727478 364.25231934]
[230.35360718 375.85534668]
[239.85993958 387.45834351]
[254.57511902 395.87854004]
[250.55755615 412.34957886]
[233.61802673 413.04867554]
[228.25692749 396.96466064]
[218.75059509 385.36166382]
[209.24427795 373.75866699]
[199.73794556 362.15567017]
[190.23161316 350.55264282]
[180.72528076 338.94964600]
[181.23461914 353.94100952]
[175.73507690 367.89648438]
[165.13543701 378.51000977]
[151.18719482 384.02783203]
[136.19517517 383.53817749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 98]
[9 97]
[10 96]
[12 94]
[13 93]
[14 92]
[16 91]
[17 90]
[18 89]
[19 88]
[20 87]
[21 84]
[22 83]
[23 82]
[24 81]
[25 77]
[26 76]
[27 75]
[28 74]
[29 73]
[30 71]
[31 70]
[32 69]
[33 68]
[35 66]
[37 65]
[38 64]
[39 63]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
