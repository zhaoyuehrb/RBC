%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUCCUGUCCUAAGUUCGGAGUCAGCGCCCCUUGUGGUCCGGAAGGGAAGUGACGUUGUUGCUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[54.71579742 314.80725098]
[42.10953522 303.47067261]
[49.51334000 288.21878052]
[50.82067490 273.27584839]
[52.12801361 258.33294678]
[53.43534851 243.39001465]
[54.74268341 228.44709778]
[56.05001831 213.50416565]
[42.79611588 220.52798462]
[28.34539986 216.50595093]
[20.62607002 203.64468384]
[23.87323761 189.00036621]
[36.30538559 180.60742188]
[51.10177612 183.07051086]
[60.14414597 195.03675842]
[65.27444458 180.94137573]
[70.40474701 166.84599304]
[66.31865692 149.91926575]
[80.15628815 137.99490356]
[84.66687012 123.68914795]
[89.17745972 109.38339233]
[86.33901215 95.69270325]
[96.51678467 86.10602570]
[101.02737427 71.80027008]
[105.53795624 57.49451447]
[110.04854584 43.18875885]
[109.66417694 33.73912811]
[115.08050537 28.36509323]
[108.65072632 14.17722034]
[114.05437469 -0.04442549]
[127.61996460 -6.08680105]
[132.75027466 -20.18218994]
[137.88056946 -34.27758026]
[143.01087952 -48.37297058]
[148.14117432 -62.46835709]
[145.59042358 -78.08258820]
[157.21409607 -87.39600372]
[162.34440613 -101.49139404]
[162.08000183 -118.44327545]
[178.29620361 -123.39009094]
[187.53878784 -109.17703247]
[176.43978882 -96.36109161]
[171.30947876 -82.26570129]
[174.22718811 -67.65966034]
[162.23657227 -57.33805466]
[157.10626221 -43.24266815]
[151.97596741 -29.14727783]
[146.84565735 -15.05188847]
[141.71536255 -0.95649910]
[148.22323608 12.39202404]
[143.22117615 26.75983620]
[129.17588806 33.49539566]
[124.35430145 47.69934464]
[119.84371185 62.00510025]
[115.33312988 76.31085205]
[110.82254028 90.61660767]
[113.66098785 104.30729675]
[103.48321533 113.89397430]
[98.97262573 128.19973755]
[94.46204376 142.50549316]
[99.75824738 154.48995972]
[95.47730255 166.44403076]
[84.50013733 171.97628784]
[79.36983490 186.07167053]
[74.23953247 200.16706848]
[70.99294281 214.81150818]
[69.68560791 229.75442505]
[68.37826538 244.69734192]
[67.07093048 259.64025879]
[65.76359558 274.58319092]
[64.45626068 289.52612305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[15 65]
[16 64]
[17 63]
[19 60]
[20 59]
[21 58]
[23 56]
[24 55]
[25 54]
[26 53]
[28 52]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
