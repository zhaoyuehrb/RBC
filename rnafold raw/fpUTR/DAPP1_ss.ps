%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCUGCUGUCUCACAGAGCGAGAAGGUGUCAGGAGCAGCCCAGUUGUGUCUCUCUCUCUACCUCUGUGAAGGGCGCGA\
) } def
/len { sequence length } bind def

/coor [
[66.99314880 365.25564575]
[52.76184845 358.77459717]
[46.07267761 344.63992310]
[50.08405685 329.52557373]
[62.90193939 320.56814575]
[64.05017853 305.61215210]
[61.35350800 298.52243042]
[65.53964233 290.10888672]
[67.25989532 275.20785522]
[68.98014069 260.30682373]
[62.75349808 246.77618408]
[72.02239990 233.95440674]
[69.59926605 226.76658630]
[74.10459137 218.51956177]
[76.39432526 203.69535828]
[78.68406677 188.87115479]
[80.97380829 174.04695129]
[83.26354980 159.22274780]
[85.55328369 144.39854431]
[87.84302521 129.57432556]
[90.13276672 114.75012207]
[82.37086487 97.96480560]
[93.75318909 83.38958740]
[94.90142059 68.43360138]
[96.04965973 53.47761154]
[97.19789886 38.52162552]
[90.53969574 24.16966248]
[99.22856140 12.07201862]
[100.37679291 -2.88396811]
[98.02994537 -7.24366140]
[97.43917084 -11.66510677]
[98.37479401 -15.53171253]
[100.41374207 -18.38492584]
[103.01708984 -19.97773743]
[106.43489075 -34.58316803]
[109.85269928 -49.18860245]
[105.46334076 -64.38874054]
[115.89706421 -75.01824951]
[119.31487274 -89.62368011]
[122.73267365 -104.22911835]
[126.15047455 -118.83454895]
[129.56828308 -133.43997192]
[127.28998566 -150.24014282]
[142.80290222 -157.08015442]
[153.66999817 -144.06698608]
[144.17370605 -130.02217102]
[140.75590515 -115.41674042]
[137.33810425 -100.81130981]
[133.92030334 -86.20587921]
[130.50250244 -71.60044861]
[135.13632202 -57.44499207]
[124.45812988 -45.77079773]
[121.04032898 -31.16536713]
[117.62252045 -16.55993652]
[115.33278656 -1.73572934]
[114.18454742 13.22025776]
[120.92488098 26.50247002]
[112.15388489 39.66986465]
[111.00565338 54.62585068]
[109.85741425 69.58184052]
[108.70917511 84.53782654]
[115.81031799 91.94007874]
[117.62913513 102.03519440]
[113.55795288 111.45034790]
[104.95697021 117.03986359]
[102.66722870 131.86407471]
[100.37749481 146.68827820]
[98.08775330 161.51248169]
[95.79801178 176.33668518]
[93.50827789 191.16088867]
[91.21853638 205.98510742]
[88.92879486 220.80931091]
[86.92343140 235.67465210]
[93.02703094 250.27111816]
[83.88117218 262.02706909]
[82.16091919 276.92810059]
[80.44067383 291.82913208]
[79.00616455 306.76037598]
[77.85792542 321.71636963]
[89.15823364 332.52548218]
[90.81541443 348.07501221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 79]
[6 78]
[8 77]
[9 76]
[10 75]
[12 73]
[14 72]
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[23 61]
[24 60]
[25 59]
[26 58]
[28 56]
[29 55]
[34 54]
[35 53]
[36 52]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
