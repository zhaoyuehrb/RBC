%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAGCAGAGUCUUGUAUUUGAUAUGAAUUACCUCAUUCAUUUUAAAUGUCACUAAUGCCCUAUUGUUUAAUCUCUUUGAUCUAGGUAGAGCCAGAUCAA\
) } def
/len { sequence length } bind def

/coor [
[186.21652222 202.81080627]
[166.12979126 197.34875488]
[149.27311707 185.09271240]
[137.85585022 167.62693787]
[133.38226318 147.21998596]
[136.45333862 126.52996826]
[123.02588654 119.84388733]
[109.59844208 113.15781403]
[92.96574402 114.68936157]
[83.73151398 100.77098846]
[70.10453033 94.50158691]
[56.47755432 88.23217773]
[46.15562820 94.53694916]
[34.18998337 94.98818970]
[23.63795662 89.58891296]
[17.13795090 79.82192993]
[16.24999619 68.24474335]
[3.03481317 61.14833832]
[-10.18036938 54.05193329]
[-23.39555359 46.95553207]
[-36.61073685 39.85912704]
[-49.82592010 32.76272583]
[-63.04109955 25.66632080]
[-78.85968781 25.95420456]
[-86.41210175 13.11635876]
[-99.62728882 6.01995516]
[-112.84246826 -1.07644820]
[-126.05765533 -8.17285156]
[-139.27284241 -15.26925468]
[-152.48802185 -22.36565781]
[-167.54638672 -17.56763077]
[-181.54843140 -24.89690971]
[-186.18698120 -40.00516510]
[-178.71008301 -53.92893600]
[-163.55361938 -58.40749741]
[-149.70968628 -50.78379440]
[-145.39161682 -35.58084106]
[-132.17643738 -28.48443794]
[-118.96125031 -21.38803482]
[-105.74606323 -14.29163074]
[-92.53088379 -7.19522762]
[-79.31569672 -0.09882444]
[-64.44235229 -0.89429003]
[-55.94469833 12.45113850]
[-42.72951508 19.54754257]
[-29.51433182 26.64394569]
[-16.29914856 33.74034882]
[-3.08396649 40.83675003]
[10.13121605 47.93315506]
[23.34639931 55.02956009]
[40.36376953 48.63854218]
[57.00916290 56.69476700]
[62.74695969 74.60520172]
[76.37393951 80.87460327]
[90.00091553 87.14401245]
[101.25909424 83.76199341]
[111.86135864 88.83907318]
[116.28451538 99.73036194]
[129.71195984 106.41644287]
[143.13941956 113.10251617]
[149.67773438 105.08018494]
[157.53540039 98.35231018]
[166.46055603 93.13227081]
[176.16752625 89.58515930]
[186.34594727 87.82254028]
[196.67074585 87.89897156]
[206.81246948 89.81029510]
[216.44778442 93.49382019]
[225.26983643 98.83040619]
[232.99803162 105.64827728]
[239.38685608 113.72857666]
[244.23382568 122.81240845]
[247.38575745 132.60906982]
[248.74372864 142.80541992]
[248.26609802 153.07588196]
[245.96984863 163.09277344]
[241.92990112 172.53683472]
[236.27679443 181.10739136]
[246.71879578 191.87606812]
[257.16079712 202.64474487]
[267.60281372 213.41342163]
[278.04483032 224.18209839]
[288.48684692 234.95077515]
[298.92883301 245.71945190]
[307.30187988 249.79631042]
[309.52023315 256.98422241]
[319.62567139 268.06936646]
[329.73110962 279.15451050]
[344.87014771 286.78637695]
[341.72744751 303.44650269]
[324.84841919 305.03857422]
[318.64596558 289.25994873]
[308.54052734 278.17480469]
[298.43508911 267.08966064]
[288.16015625 256.16146851]
[277.71813965 245.39279175]
[267.27615356 234.62411499]
[256.83413696 223.85542297]
[246.39212036 213.08674622]
[235.95011902 202.31806946]
[225.50810242 191.54939270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 60]
[7 59]
[8 58]
[10 55]
[11 54]
[12 53]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[78 101]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
