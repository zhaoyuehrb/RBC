%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCAAGAGAUCUAGGACUUCUAGCCCCUGAACUUUCAGCCGAAUACAUCUUUUCCAAAGGAGUGAAUUCAGGCCCUUGUAUCACUGGCAGCAGGACGUGACC\
) } def
/len { sequence length } bind def

/coor [
[67.81513214 353.95599365]
[58.48327637 365.95535278]
[45.26733398 373.46582031]
[30.18264008 375.34213257]
[15.52950382 371.29812622]
[3.54241848 361.95050049]
[-3.95067072 348.72467041]
[-5.80712223 333.63754272]
[-1.74384141 318.98971558]
[7.61955166 307.01495361]
[20.85520744 299.53927612]
[35.94478226 297.70266724]
[39.93533707 283.24322510]
[32.38425446 270.45584106]
[36.22526169 255.73507690]
[49.68902969 247.90150452]
[42.13794708 235.11413574]
[45.97895432 220.39335632]
[59.44272232 212.55979919]
[63.43327332 198.10035706]
[59.36072922 183.77333069]
[70.49055481 172.52888489]
[74.48110199 158.06944275]
[73.20565796 150.66334534]
[78.81336975 143.24053955]
[83.23469543 128.90693665]
[87.65602112 114.57334900]
[80.97849274 101.71423340]
[85.24935913 87.86843872]
[98.01038361 81.00532532]
[102.43171692 66.67173004]
[106.85304260 52.33813858]
[111.05944824 37.94001007]
[115.05000305 23.48056793]
[104.67361450 13.96791458]
[99.46641541 0.96108484]
[100.40266418 -12.95139980]
[107.24011230 -25.02753830]
[118.57914734 -32.91227722]
[132.14892578 -35.09670639]
[136.57025146 -49.43029785]
[140.99157715 -63.76388931]
[145.19799805 -78.16201782]
[149.18855286 -92.62145996]
[153.17909241 -107.08090210]
[157.16964722 -121.54034424]
[153.38253784 -136.90161133]
[164.22692871 -147.11181641]
[168.21748352 -161.57125854]
[171.99128723 -176.08877563]
[175.54748535 -190.66113281]
[179.10369873 -205.23348999]
[182.65989685 -219.80583191]
[186.21611023 -234.37818909]
[181.10046387 -249.95901489]
[192.23619080 -261.99761963]
[208.16780090 -258.10968018]
[212.50622559 -242.29481506]
[200.78845215 -230.82197571]
[197.23225403 -216.24963379]
[193.67604065 -201.67727661]
[190.11984253 -187.10491943]
[186.56362915 -172.53257751]
[188.06007385 -165.16795349]
[182.67692566 -157.58070374]
[178.68637085 -143.12126160]
[182.75892639 -128.79423523]
[171.62908936 -117.54979706]
[167.63853455 -103.09034729]
[163.64799500 -88.63090515]
[159.65744019 -74.17146301]
[160.93289185 -66.76537323]
[155.32518005 -59.34255981]
[150.90385437 -45.00896835]
[146.48251343 -30.67537689]
[157.72627258 -19.17568398]
[161.70507812 -3.49625564]
[157.25396729 12.15273571]
[145.48460388 23.52069855]
[129.50944519 27.47112083]
[125.51889801 41.93056488]
[126.79434204 49.33665466]
[121.18663025 56.75946808]
[116.76530457 71.09306335]
[112.34397888 85.42665100]
[119.02150726 98.28576660]
[114.75064087 112.13156128]
[101.98961639 118.99467468]
[97.56828308 133.32826233]
[93.14695740 147.66186523]
[88.94055176 162.05998230]
[84.94999695 176.51942444]
[88.73711395 191.88069153]
[77.89271545 202.09089661]
[73.90216827 216.55033875]
[81.44229126 230.18061829]
[77.18932343 244.78770447]
[64.14847565 251.89205933]
[71.68859863 265.52233887]
[67.43563080 280.12942505]
[54.39477921 287.23376465]
[50.40422821 301.69320679]
[62.41586304 311.00927734]
[69.94372559 324.21533203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 102]
[13 101]
[16 98]
[19 95]
[20 94]
[22 92]
[23 91]
[25 90]
[26 89]
[27 88]
[30 85]
[31 84]
[32 83]
[33 81]
[34 80]
[40 75]
[41 74]
[42 73]
[43 71]
[44 70]
[45 69]
[46 68]
[48 66]
[49 65]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
