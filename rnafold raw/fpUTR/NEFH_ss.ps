%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGGGCCGGCGCCCUGGUGCUGCCGCAGUGCCUCCCGCCCCGUCCCGGCCUCGCGCACCUGCUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[94.98822784 108.94379425]
[91.80684662 107.63835907]
[89.01038361 105.18318176]
[87.01256561 101.71173096]
[86.17460632 97.50392151]
[75.11544800 87.37007141]
[64.05628204 77.23621368]
[48.65448761 73.61749268]
[44.49820328 59.31453705]
[33.43904114 49.18068314]
[22.37988281 39.04682922]
[6.97808361 35.42810440]
[2.82179856 21.12514687]
[-8.23736095 10.99129391]
[-24.60297203 14.61852169]
[-39.80256271 7.94882679]
[-48.04917526 -6.26673603]
[-46.32844925 -22.44568062]
[-57.81911469 -32.08749390]
[-69.30978394 -41.72930908]
[-80.80045319 -51.37112427]
[-92.29111481 -61.01293564]
[-103.78178406 -70.65475464]
[-115.27245331 -80.29656219]
[-131.29243469 -85.84600067]
[-130.39465332 -102.77616119]
[-113.87760162 -106.60019684]
[-105.63063812 -91.78723145]
[-94.13996887 -82.14541626]
[-82.64929962 -72.50360107]
[-71.15863800 -62.86178970]
[-59.66796875 -53.21997452]
[-48.17730331 -43.57816315]
[-36.68663406 -33.93634796]
[-23.91331482 -38.37690735]
[-10.52150726 -35.82670593]
[-0.10858752 -26.85972595]
[4.47297287 -13.78836918]
[1.89649177 -0.06786568]
[12.95565224 10.06598759]
[27.56642532 12.95987129]
[32.51373672 27.98766899]
[43.57289505 38.12152100]
[54.63205719 48.25537491]
[69.24282837 51.14925766]
[74.19013977 66.17705536]
[85.24929810 76.31091309]
[96.30845642 86.44476318]
[108.40512848 95.31440735]
[121.39550781 102.81440735]
[134.38589478 110.31440735]
[147.37626648 117.81440735]
[160.36665344 125.31440735]
[169.67549133 126.98442078]
[173.74981689 133.43551636]
[189.54602051 134.32476807]
[196.12284851 147.68870544]
[208.77371216 155.74819946]
[225.17193604 155.92256165]
[232.98320007 170.34185791]
[224.17193604 184.17276001]
[207.80242920 183.18721008]
[200.71421814 168.39906311]
[188.06335449 160.33956909]
[173.17202759 160.02679443]
[165.69032288 146.08639526]
[152.86665344 138.30479431]
[139.87626648 130.80479431]
[126.88588715 123.30478668]
[113.89550781 115.80478668]
[100.90512848 108.30478668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 48]
[6 47]
[7 46]
[9 44]
[10 43]
[11 42]
[13 40]
[14 39]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[55 66]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
