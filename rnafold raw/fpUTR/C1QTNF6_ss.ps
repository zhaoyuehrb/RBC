%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUCCUCUGCUGGGCCUGGGGGUCUGGGCCAGCAACAAGUUAGUAUUGCAGACAUGGGCCAAGGAGCCAGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[89.02906799 230.24018860]
[73.62512970 228.36981201]
[62.28541946 217.77780151]
[59.37028122 202.53701782]
[66.00064850 188.50784302]
[79.62701416 181.08477783]
[81.43505859 166.19415283]
[83.24311066 151.30351257]
[85.05116272 136.41287231]
[86.85921478 121.52224731]
[78.58855438 109.00840759]
[64.18078613 104.83514404]
[49.77301025 100.66188049]
[35.36524200 96.48861694]
[20.95746803 92.31535339]
[11.55753326 92.92311096]
[6.05989790 87.67308807]
[-8.16814899 82.92306519]
[-22.39619446 78.17304230]
[-36.62424088 73.42302704]
[-50.85228729 68.67300415]
[-66.80303955 72.48162079]
[-77.87873840 60.38777924]
[-72.68565369 44.83259201]
[-56.56598663 41.81789780]
[-46.10226822 54.44495773]
[-31.87422180 59.19498062]
[-17.64617538 63.94499969]
[-3.41812897 68.69502258]
[10.80991745 73.44503784]
[25.13073158 77.90758514]
[39.53850174 82.08084869]
[53.94627380 86.25411224]
[68.35404205 90.42736816]
[82.76181793 94.60063171]
[86.90102386 85.23735046]
[96.07757568 78.95392609]
[108.07104492 78.37647247]
[118.01788330 67.14881134]
[121.37763977 51.68845367]
[135.60884094 47.29273224]
[145.55567932 36.06507111]
[155.50251770 24.83740997]
[158.86227417 9.37705231]
[173.09346008 4.98133183]
[183.04029846 -6.24632931]
[189.01783752 -22.11155510]
[205.91780090 -20.75955391]
[209.29699707 -4.14578533]
[194.26795959 3.70051050]
[184.32112122 14.92817211]
[181.67283630 29.58545113]
[166.73017883 34.78424835]
[156.78334045 46.01190948]
[146.83650208 57.23957062]
[144.18820190 71.89685059]
[129.24554443 77.09564972]
[119.29870605 88.32331085]
[122.00253296 103.07760620]
[135.28437805 110.04845428]
[148.56620789 117.01930237]
[163.57843018 112.07878876]
[177.64930725 119.27503967]
[182.43083191 134.33865356]
[175.08621216 148.33265686]
[159.97288513 152.95465088]
[146.05731201 145.46249390]
[141.59536743 130.30114746]
[128.31352234 123.33029938]
[115.03168488 116.35945129]
[101.74984741 123.33029938]
[99.94179535 138.22093201]
[98.13374329 153.11155701]
[96.32569122 168.00219727]
[94.51764679 182.89282227]
[105.97159576 193.36119080]
[109.05189514 208.56945801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[38 58]
[39 57]
[41 55]
[42 54]
[43 53]
[45 51]
[46 50]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
