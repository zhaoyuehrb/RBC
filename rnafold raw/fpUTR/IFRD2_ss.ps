%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGCUGGUGGGCCCCAGGCGUGGACUACCAUUCCCAUGGUGCUCUACGCGCAGCUAGCCGCCGUCGCCUGCGCGCUCAGGCCUCUGGGAUUAGUAGUUUUAGCCUCGUGGAUGUGGGCCUGAAUCGG\
) } def
/len { sequence length } bind def

/coor [
[122.06542969 502.96588135]
[109.67625427 512.77832031]
[93.98719788 510.87332153]
[84.30629730 498.38110352]
[86.37705994 482.71304321]
[98.97094727 473.16476440]
[100.77899170 458.27413940]
[102.58704376 443.38351440]
[104.39509583 428.49285889]
[106.20314789 413.60223389]
[107.65085602 398.67227173]
[108.73737335 383.71166992]
[109.82389832 368.75106812]
[110.91041565 353.79046631]
[111.99694061 338.82986450]
[113.08346558 323.86926270]
[113.98914337 308.89663696]
[114.71384430 293.91415405]
[114.17022705 278.92401123]
[112.36217499 264.03338623]
[110.55412292 249.14274597]
[98.70746613 240.18772888]
[96.66172791 225.11225891]
[106.13489532 212.74711609]
[104.32684326 197.85649109]
[102.51879120 182.96585083]
[100.71074677 168.07522583]
[98.90269470 153.18458557]
[97.09464264 138.29396057]
[95.28659058 123.40332031]
[82.47444916 116.21069336]
[76.30081940 102.87760162]
[79.10423279 88.45449829]
[89.82277679 78.40473175]
[88.01472473 63.51409531]
[86.20667267 48.62346268]
[84.39862061 33.73283005]
[82.59057617 18.84219551]
[73.24626160 6.07527161]
[79.39304352 -7.49183273]
[77.58499146 -22.38246536]
[73.40649414 -30.62180519]
[75.91765594 -37.65420151]
[74.46994781 -52.58417511]
[73.02223206 -67.51415253]
[58.35913849 -75.84787750]
[51.58526993 -91.11271667]
[55.17234039 -107.25370789]
[67.52420807 -117.99533844]
[65.71615601 -132.88597107]
[63.90810776 -147.77661133]
[62.10005569 -162.66723633]
[60.29200745 -177.55787659]
[58.48395538 -192.44850159]
[56.67590714 -207.33914185]
[53.40691757 -211.66793823]
[52.30811691 -216.35086060]
[53.13740921 -220.47573853]
[55.31684875 -223.36886597]
[54.59214783 -238.35134888]
[42.03278732 -247.66781616]
[38.45056915 -262.88955688]
[45.53690720 -276.82934570]
[59.94585037 -282.90524292]
[74.87393188 -278.24838257]
[83.27257538 -265.05758667]
[81.17618561 -249.56117249]
[69.57463074 -239.07604980]
[70.29933167 -224.09356689]
[71.56653595 -209.14718628]
[73.37458801 -194.25656128]
[75.18264008 -179.36592102]
[76.99069214 -164.47529602]
[78.79873657 -149.58465576]
[80.60678864 -134.69403076]
[82.41484070 -119.80339050]
[94.68113708 -114.39268494]
[102.71582794 -103.52507782]
[104.31839752 -89.99587250]
[98.96032715 -77.35192871]
[87.95220947 -68.96186066]
[89.39991760 -54.03188324]
[90.84762573 -39.10190964]
[92.47562408 -24.19051552]
[94.28367615 -9.29988289]
[103.49866486 2.40196419]
[97.48120880 17.03414536]
[99.28925323 31.92477989]
[101.09730530 46.81541061]
[102.90535736 61.70604706]
[104.71340942 76.59667969]
[117.52555084 83.78930664]
[123.69918060 97.12239838]
[120.89576721 111.54550171]
[110.17722321 121.59526825]
[111.98527527 136.48590088]
[113.79332733 151.37654114]
[115.60137939 166.26716614]
[117.40942383 181.15780640]
[119.21747589 196.04843140]
[121.02552795 210.93907166]
[133.18260193 220.67782593]
[134.80409241 235.80480957]
[125.44475555 247.33470154]
[127.25280762 262.22534180]
[129.06085205 277.11596680]
[138.82983398 265.73321533]
[153.59561157 263.09277344]
[166.70397949 270.38458252]
[172.24765015 284.32257080]
[167.72836304 298.62557983]
[155.18273926 306.84796143]
[140.26446533 305.28427124]
[129.69631958 294.63885498]
[128.97161865 309.62133789]
[131.70333862 318.44656372]
[128.04406738 324.95581055]
[126.95753479 339.91638184]
[125.87101746 354.87698364]
[124.78449249 369.83758545]
[123.69797516 384.79818726]
[122.61145020 399.75878906]
[125.20896912 406.01727295]
[124.31455231 411.75936890]
[121.09378052 415.41027832]
[119.28572845 430.30090332]
[117.47767639 445.19155884]
[115.66962433 460.08218384]
[113.86157990 474.97280884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 129]
[7 128]
[8 127]
[9 126]
[10 125]
[11 122]
[12 121]
[13 120]
[14 119]
[15 118]
[16 117]
[17 115]
[18 114]
[19 106]
[20 105]
[21 104]
[24 101]
[25 100]
[26 99]
[27 98]
[28 97]
[29 96]
[30 95]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[40 85]
[41 84]
[43 83]
[44 82]
[45 81]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
