%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGAAUGCGGCAAGGGUCUGGAGGCUGAGGACCAGGCAGACAGACAUUCAGAGUUGCUGGAACGCGACAGAGACAGGGAGUCAGACUGGUCAUGCAAGGCCAGCUCUGGGGUCUCAGCAGGUGGUCCGCAAC\
) } def
/len { sequence length } bind def

/coor [
[23.65995407 149.07366943]
[10.52547550 149.02218628]
[-0.00571237 141.50404358]
[-14.31440067 146.00531006]
[-28.62309074 150.50657654]
[-42.93177795 155.00784302]
[-57.24046707 159.50912476]
[-71.54915619 164.01039124]
[-85.80410004 168.67907715]
[-86.46508789 181.97654724]
[-91.62020874 194.21710205]
[-100.62790680 203.93389893]
[-112.38639069 209.97071838]
[-125.46842194 211.61947632]
[-138.29449463 208.70323181]
[-149.32356262 201.59484863]
[-157.23820496 191.16957092]
[-171.64848328 195.33416748]
[-186.05876160 199.49876404]
[-200.46902466 203.66336060]
[-214.87930298 207.82797241]
[-229.28958130 211.99256897]
[-232.89622498 226.92199707]
[-243.49600220 238.03686523]
[-258.23764038 242.34733582]
[-273.15567017 238.69390869]
[-284.23727417 228.05934143]
[-288.50149536 213.30429077]
[-284.80133057 198.39776611]
[-274.13211060 187.34956360]
[-259.36373901 183.13159180]
[-244.46888733 186.87846375]
[-233.45419312 197.58229065]
[-219.04391479 193.41769409]
[-204.63363647 189.25308228]
[-190.22335815 185.08848572]
[-175.81307983 180.92388916]
[-161.40280151 176.75929260]
[-159.10908508 160.10012817]
[-149.77241516 146.04783630]
[-135.20893860 137.42216492]
[-118.28919983 135.97879028]
[-102.37242889 142.05223083]
[-90.63956451 154.47984314]
[-85.27179718 149.29734802]
[-76.05042267 149.70170593]
[-61.74173737 145.20042419]
[-47.43304825 140.69915771]
[-33.12435913 136.19789124]
[-18.81567001 131.69662476]
[-4.50698185 127.19535065]
[2.58092713 111.99073792]
[18.77637291 106.46531677]
[34.27740479 114.47601318]
[48.47663879 109.64054871]
[62.67587662 104.80508423]
[76.87510681 99.96961975]
[91.07434845 95.13414764]
[97.14913940 89.71282196]
[105.66348267 90.35601044]
[119.97216797 85.85473633]
[134.28085327 81.35346985]
[145.12316895 69.83154297]
[159.58572388 73.39299011]
[173.89440918 68.89172363]
[188.20309448 64.39044952]
[191.60198975 48.25437164]
[202.59121704 36.08535004]
[218.12010193 31.12122536]
[233.94769287 34.61891556]
[245.80097961 45.53777313]
[260.00021362 40.70230865]
[274.19946289 35.86684418]
[288.39868164 31.03137970]
[302.59793091 26.19591331]
[304.36462402 18.64313507]
[308.64929199 12.25981045]
[314.85818481 7.84347773]
[322.16110229 5.92509937]
[329.60232544 6.70556879]
[336.22558594 10.03580666]
[341.19705200 15.44223499]
[355.86437988 12.30063152]
[370.53170776 9.15902710]
[385.19903564 6.01742315]
[399.86636353 2.87581921]
[414.49584961 -0.43750048]
[429.08547974 -3.92208076]
[443.67514038 -7.40666103]
[458.26477051 -10.89124107]
[472.85440063 -14.37582207]
[487.44406128 -17.86040306]
[495.50299072 -31.45559692]
[510.83523560 -35.28933334]
[524.34448242 -27.08712578]
[528.01586914 -11.71519566]
[519.67132568 1.70656133]
[504.26141357 5.21525574]
[490.92864990 -3.27075863]
[476.33898926 0.21382169]
[461.74935913 3.69840217]
[447.15969849 7.18298244]
[432.57006836 10.66756248]
[417.98040771 14.15214348]
[412.15093994 18.80922508]
[403.00796509 17.54314041]
[388.34063721 20.68474579]
[373.67330933 23.82634926]
[359.00598145 26.96795273]
[344.33865356 30.10955620]
[329.62512207 47.05892181]
[307.43338013 40.39514923]
[293.23416138 45.23061371]
[279.03491211 50.06607819]
[264.83569336 54.90154266]
[250.63644409 59.73700714]
[248.85856628 73.32814026]
[241.34544373 84.87180328]
[229.52470398 92.06938934]
[215.68824768 93.45823669]
[202.54801941 88.70849609]
[192.70437622 78.69914246]
[178.39567566 83.20040894]
[164.08699036 87.70168304]
[154.26812744 98.90164948]
[138.78213501 95.66216278]
[124.47344208 100.16342926]
[110.16474915 104.66469574]
[95.90981293 109.33338928]
[81.71057129 114.16885376]
[67.51133728 119.00431824]
[53.31210327 123.83978271]
[39.11286926 128.67524719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[8 46]
[9 44]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[54 133]
[55 132]
[56 131]
[57 130]
[58 129]
[60 128]
[61 127]
[62 126]
[64 124]
[65 123]
[66 122]
[71 116]
[72 115]
[73 114]
[74 113]
[75 112]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[87 104]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
