%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGUUUCCGUAGGAAGAAGCGCCGGGAAAGAUGGCGGCGUCUGUGGUUUGAAUUCCAGCGGCGCCGCCAGAGUCUGAACAAGAGCUGGGGUGGAGGGGGCGGGGACCUGGGGAGCCCGGCGGGUCGCUAUCGCGGGGGGUACUAGUGGCGCCGCCGCCACAGACACCAACGCUGUCGCCACCUCUGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[120.45452118 136.74781799]
[105.87411499 141.64474487]
[90.50806427 140.97186279]
[84.57102203 154.74688721]
[78.63397217 168.52192688]
[72.69692993 182.29695129]
[66.75988770 196.07199097]
[60.82284164 209.84701538]
[68.85674286 223.12240601]
[67.51969147 238.58177185]
[57.32579422 250.28067017]
[42.19482422 253.72062683]
[27.94494438 247.57891846]
[20.05552292 234.21716309]
[21.56020546 218.77320862]
[31.88041115 207.18559265]
[47.04780960 203.90997314]
[52.98485184 190.13493347]
[58.92189789 176.35990906]
[64.85894012 162.58486938]
[70.79598999 148.80984497]
[76.73303223 135.03482056]
[64.04251862 121.81397247]
[58.17924118 104.45132446]
[43.21946716 103.35356140]
[28.25968933 102.25579834]
[13.29991245 101.15803528]
[6.55003071 111.70035553]
[-3.98377228 118.32884979]
[-16.26534081 119.83489990]
[-27.95136642 115.99308777]
[-36.83848190 107.59249878]
[-41.27866364 96.27552032]
[-56.19478226 94.69140625]
[-71.11090088 93.10729218]
[-86.02701569 91.52317810]
[-100.94313812 89.93906403]
[-115.85925293 88.35494995]
[-130.77537537 86.77083588]
[-145.69149780 85.18672180]
[-160.60760498 83.60260773]
[-175.52372742 82.01849365]
[-187.74514771 91.67637634]
[-202.84963989 89.85737610]
[-211.98164368 78.14660645]
[-226.89776611 76.56249237]
[-241.81387329 74.97837830]
[-252.10896301 86.58831787]
[-267.26922607 89.89677429]
[-281.46524048 83.63157654]
[-289.23837280 70.20181274]
[-287.59963989 54.77151108]
[-277.17919922 43.27393341]
[-261.98394775 40.13013077]
[-247.85671997 46.54896545]
[-240.22976685 60.06225586]
[-225.31364441 61.64636993]
[-210.39752197 63.23048401]
[-199.00956726 53.69896698]
[-183.85993958 55.09299850]
[-173.93960571 67.10237122]
[-159.02349854 68.68648529]
[-144.10737610 70.27059937]
[-129.19125366 71.85471344]
[-114.27513885 73.43882751]
[-99.35902405 75.02294159]
[-84.44290161 76.60705566]
[-69.52678680 78.19117737]
[-54.61066818 79.77529144]
[-39.69454956 81.35940552]
[-28.49921036 67.71701813]
[-11.20629501 63.47750092]
[5.31846905 70.51798248]
[14.39767361 86.19826508]
[29.35745049 87.29602051]
[44.31722641 88.39378357]
[59.27700424 89.49154663]
[64.45193481 77.52501678]
[73.04297638 67.71829224]
[84.22454071 61.01378632]
[96.92209625 58.05579376]
[109.91544342 59.12856674]
[121.95592499 64.12902069]
[131.88647461 72.57660675]
[138.75279236 83.65954590]
[153.39208984 80.38977814]
[168.03137207 77.12001038]
[182.58645630 73.49381256]
[197.04867554 69.51335144]
[211.51091003 65.53289032]
[225.97312927 61.55242157]
[240.43534851 57.57195663]
[254.89758301 53.59149170]
[269.35980225 49.61103058]
[280.61199951 38.48905182]
[294.93618774 42.57159042]
[309.39840698 38.59112549]
[320.65060425 27.46915054]
[334.97479248 31.55169106]
[349.43701172 27.57122612]
[363.89923096 23.59076118]
[378.36148071 19.61029625]
[390.97640991 6.20556402]
[407.77099609 11.27328491]
[422.16653442 7.05794621]
[430.27200317 -8.43615341]
[446.74902344 -13.18811131]
[461.27679443 -4.72920275]
[475.60177612 -9.17829800]
[489.92678833 -13.62739277]
[500.81100464 -25.10973167]
[515.26049805 -21.49560165]
[529.58544922 -25.94469643]
[532.43762207 -29.26420212]
[535.85675049 -31.29044914]
[539.36352539 -32.00443268]
[542.52227783 -31.54572487]
[544.98919678 -30.18428612]
[559.57330322 -33.69190216]
[574.15740967 -37.19951630]
[588.74157715 -40.70713425]
[603.32568359 -44.21474838]
[617.90979004 -47.72236633]
[632.46490479 -51.34856033]
[646.98999023 -55.09309769]
[661.51507568 -58.83763123]
[676.04016113 -62.58216858]
[690.56524658 -66.32670593]
[705.09039307 -70.07124329]
[719.61547852 -73.81578064]
[727.67645264 -87.14463043]
[742.46032715 -90.73520660]
[755.11767578 -82.96815491]
[769.64276123 -86.71269226]
[779.00140381 -99.74326324]
[795.03070068 -100.40688324]
[805.43438721 -88.19448090]
[802.23162842 -72.47437286]
[787.87933350 -65.30567169]
[773.38726807 -72.18759918]
[758.86218262 -68.44306183]
[751.53747559 -55.52468491]
[736.86035156 -51.52027893]
[723.35998535 -59.29067993]
[708.83489990 -55.54614258]
[694.30981445 -51.80160904]
[679.78472900 -48.05707169]
[665.25964355 -44.31253433]
[650.73449707 -40.56800079]
[636.20941162 -36.82346344]
[630.50854492 -32.10216522]
[621.41741943 -33.13824081]
[606.83331299 -29.63062668]
[592.24914551 -26.12301064]
[577.66503906 -22.61539459]
[563.08093262 -19.10778046]
[548.49682617 -15.60016346]
[534.03454590 -11.61969948]
[519.70959473 -7.17060423]
[509.84997559 3.99350595]
[494.37588501 0.69760424]
[480.05087280 5.14669943]
[465.72589111 9.59579468]
[461.37667847 21.73420525]
[450.66778564 29.25976944]
[437.38436890 29.23833847]
[426.38186646 21.45346451]
[411.98635864 25.66880226]
[405.90100098 36.13423538]
[393.93045044 39.75805283]
[382.34191895 34.07252121]
[367.87969971 38.05298615]
[353.41748047 42.03345108]
[338.95526123 46.01391220]
[328.73748779 56.85118103]
[313.37887573 53.05335236]
[298.91665649 57.03381348]
[288.69888306 67.87108612]
[273.34027100 64.07324982]
[258.87805176 68.05371857]
[244.41581726 72.03417969]
[229.95359802 76.01464844]
[215.49136353 79.99510956]
[201.02914429 83.97557831]
[186.56692505 87.95603943]
[184.51319885 90.83972168]
[180.95365906 92.86549377]
[176.30978394 93.33331299]
[171.30113220 91.75929260]
[156.66184998 95.02906036]
[142.02256775 98.29882812]
[139.82405090 113.52166748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[24 77]
[25 76]
[26 75]
[27 74]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[45 58]
[46 57]
[47 56]
[85 191]
[86 190]
[87 189]
[88 185]
[89 184]
[90 183]
[91 182]
[92 181]
[93 180]
[94 179]
[96 177]
[97 176]
[99 174]
[100 173]
[101 172]
[102 171]
[104 168]
[105 167]
[108 163]
[109 162]
[110 161]
[112 159]
[113 158]
[118 157]
[119 156]
[120 155]
[121 154]
[122 153]
[123 152]
[124 150]
[125 149]
[126 148]
[127 147]
[128 146]
[129 145]
[130 144]
[133 141]
[134 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
