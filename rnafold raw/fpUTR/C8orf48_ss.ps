%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACAGCUGGGAAGGCGUCUCCCGGAAGACGACCUCCGCAGAGCUGAUGGCAUUGAGAUCCAUUCCCGGAGGGGUCAGCUCCUGACGGGUUCCUGAGCCAGUCUUAACCUGGGCAAAGGAGAUGAGGAGCCGAGCCUGAUGCAUUGUG\
) } def
/len { sequence length } bind def

/coor [
[14.58535767 212.40438843]
[6.13264513 212.06228638]
[-1.98065948 209.72306824]
[-9.29057312 205.52836609]
[-15.38092804 199.72566223]
[-28.67398071 206.67510986]
[-41.96703720 213.62455750]
[-55.26008987 220.57398987]
[-68.55314636 227.52343750]
[-81.69774628 234.74974060]
[-94.60887146 242.38536072]
[-107.43933868 250.15576172]
[-120.26979828 257.92617798]
[-126.03700256 265.09692383]
[-133.45133972 265.72171021]
[-146.44171143 273.22171021]
[-159.35284424 280.85733032]
[-172.18331909 288.62774658]
[-185.01377869 296.39813232]
[-197.84423828 304.16854858]
[-210.67469788 311.93893433]
[-214.20068359 327.34487915]
[-227.63179016 335.67440796]
[-242.99958801 331.98574829]
[-251.18664551 318.46731567]
[-247.33570862 303.13937378]
[-233.73147583 295.09570312]
[-218.44511414 299.10848999]
[-205.61463928 291.33807373]
[-192.78417969 283.56768799]
[-179.95372009 275.79727173]
[-167.12326050 268.02685547]
[-163.00387573 261.83062744]
[-153.94171143 260.23132324]
[-140.95133972 252.73132324]
[-128.04020691 245.09570312]
[-115.20973969 237.32530212]
[-102.37928009 229.55488586]
[-98.25990295 223.35864258]
[-89.19774628 221.75935364]
[-87.10718536 217.39833069]
[-82.22042084 214.33680725]
[-75.50258636 214.23037720]
[-62.20952988 207.28092957]
[-48.91647720 200.33149719]
[-35.62342072 193.38204956]
[-22.33036804 186.43261719]
[-21.36696815 164.43154907]
[-7.42854404 147.22169495]
[14.13268471 141.64613342]
[34.89686966 150.03468323]
[46.84481812 140.96569824]
[58.79276657 131.89671326]
[70.74071503 122.82772827]
[82.68866730 113.75873566]
[67.72928619 114.86191559]
[58.16613388 103.30570221]
[62.04838181 88.81680298]
[76.10839844 83.59033203]
[88.51209259 92.02540588]
[82.69935608 78.19746399]
[76.88662720 64.36951447]
[62.16104126 58.63081360]
[55.88293839 44.12698746]
[61.77700424 29.46289825]
[76.34639740 23.33848953]
[90.94734955 29.38726425]
[96.91738129 44.02059174]
[90.71456909 58.55677795]
[96.52730560 72.38472748]
[102.34004211 86.21267700]
[115.97858429 92.45688629]
[130.24443054 87.82163239]
[144.51028442 83.18637848]
[155.24406433 71.56327820]
[169.73937988 74.98894501]
[184.00521851 70.35369110]
[194.73901367 58.73059082]
[209.23432922 62.15625763]
[223.50016785 57.52100372]
[237.76602173 52.88574982]
[252.03186035 48.25049591]
[266.29769897 43.61523819]
[280.56356812 38.97998428]
[282.17776489 27.51715469]
[287.95501709 17.54544830]
[297.01507568 10.50689125]
[308.00637817 7.40245771]
[319.30749512 8.64986038]
[329.26641846 14.02778339]
[336.44192505 22.71396065]
[350.97067261 18.98361206]
[365.49942017 15.25326443]
[380.02816772 11.52291584]
[394.55691528 7.79256725]
[402.63092041 -5.52840900]
[417.41827393 -9.10454464]
[430.06802368 -1.32513487]
[444.59677124 -5.05548334]
[459.12551880 -8.78583145]
[473.61441040 -12.66811752]
[488.06185913 -16.70191383]
[494.35659790 -31.01659584]
[508.40274048 -37.88969421]
[523.56817627 -34.07593918]
[532.69213867 -21.37607384]
[531.46667480 -5.78658152]
[520.47039795 5.33165264]
[504.89535522 6.72894001]
[492.09564209 -2.25447607]
[477.64819336 1.77932131]
[472.01428223 6.63952971]
[462.85586548 5.74291611]
[448.32711792 9.47326374]
[433.79837036 13.20361233]
[426.46105957 26.11482811]
[411.77999878 30.10490036]
[398.28726196 22.32131386]
[383.75851440 26.05166245]
[369.22976685 29.78201103]
[354.70101929 33.51235962]
[340.17227173 37.24270630]
[334.38073730 54.94181061]
[319.01477051 65.72385406]
[300.10351562 65.14035034]
[285.19882202 53.24583054]
[270.93295288 57.88108826]
[256.66711426 62.51634216]
[242.40127563 67.15159607]
[228.13542175 71.78684998]
[213.86958313 76.42210388]
[204.15617371 87.71366119]
[188.64047241 84.61953735]
[174.37463379 89.25479126]
[164.66123962 100.54634857]
[149.14553833 97.45222473]
[134.87968445 102.08747864]
[120.61383820 106.72273254]
[91.75765228 125.70668793]
[79.80970001 134.77568054]
[67.86175537 143.84466553]
[55.91380310 152.91365051]
[43.96585464 161.98263550]
[46.59165955 170.15762329]
[47.19568634 178.70681763]
[45.75076294 187.13858032]
[42.34731674 194.96980286]
[37.18777466 201.75364685]
[30.57452583 207.10496521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 40]
[11 38]
[12 37]
[13 36]
[15 35]
[16 34]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[51 143]
[52 142]
[53 141]
[54 140]
[55 139]
[60 71]
[61 70]
[62 69]
[72 138]
[73 137]
[74 136]
[76 134]
[77 133]
[79 131]
[80 130]
[81 129]
[82 128]
[83 127]
[84 126]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[98 115]
[99 114]
[100 113]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
