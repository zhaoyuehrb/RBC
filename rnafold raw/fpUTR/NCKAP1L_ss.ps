%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGUGUCACCAUCUAAGCUGAAAGUGUUUGGGGAGAUCAGACAUUGCUGUCUGGUGCUCCUCUCUCAGUGGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[57.61852264 172.45370483]
[47.87680054 183.85980225]
[38.13507843 195.26588440]
[28.61918068 206.86103821]
[19.33277130 218.64079285]
[21.43902779 234.30410767]
[11.78645611 246.81823730]
[-3.89824581 248.75877380]
[-16.30962181 238.97442627]
[-18.08422279 223.27009583]
[-8.16920853 210.96284485]
[7.55301714 209.35438538]
[16.83942604 197.57463074]
[18.55182266 190.17694092]
[26.72899055 185.52416992]
[36.47071075 174.11807251]
[46.21243286 162.71199036]
[43.01056290 143.73878479]
[54.63594055 128.03886414]
[74.30110168 125.49050140]
[82.63465118 113.01845551]
[90.96820831 100.54640961]
[90.66851807 96.39638519]
[92.34584045 92.15840149]
[95.97849274 88.78653717]
[101.08750153 87.17843628]
[104.16650391 71.65972900]
[118.31569672 67.00680542]
[128.05741882 55.60071945]
[124.58921051 40.59146500]
[130.55421448 26.58175087]
[143.47207642 18.86210823]
[158.28129578 20.21310616]
[168.02301025 8.80701637]
[177.76473999 -2.59907269]
[187.50645447 -14.00516224]
[197.24816895 -25.41125107]
[206.98989868 -36.81734085]
[216.50579834 -48.41249847]
[225.79220581 -60.19225311]
[235.07861328 -71.97200775]
[244.36502075 -83.75176239]
[253.65142822 -95.53151703]
[262.93783569 -107.31126404]
[272.22424316 -119.09101868]
[281.51065063 -130.87077332]
[283.32705688 -147.16902161]
[298.45639038 -153.49633789]
[311.33493042 -143.34371948]
[308.71429443 -127.15531921]
[293.29040527 -121.58436584]
[284.00399780 -109.80461121]
[274.71759033 -98.02485657]
[265.43118286 -86.24510193]
[256.14477539 -74.46534729]
[246.85836792 -62.68559647]
[237.57196045 -50.90584183]
[228.28555298 -39.12608719]
[226.57315063 -31.72838974]
[218.39598083 -27.07562065]
[208.65426636 -15.66953087]
[198.91253662 -4.26344156]
[189.17082214 7.14264822]
[179.42910767 18.54873848]
[169.68737793 29.95482635]
[173.33842468 44.37037277]
[167.73461914 58.33681107]
[154.83052063 66.41998291]
[139.46350098 65.34243774]
[129.72178650 76.74852753]
[127.33957672 91.45139313]
[112.49359131 96.92015839]
[103.44024658 108.87996674]
[95.10669708 121.35200500]
[86.77313995 133.82405090]
[91.57756805 143.86628723]
[91.62950897 154.91625977]
[86.98926544 164.85417175]
[78.61055756 171.80355835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 13]
[5 12]
[20 75]
[21 74]
[22 73]
[26 72]
[28 70]
[29 69]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
