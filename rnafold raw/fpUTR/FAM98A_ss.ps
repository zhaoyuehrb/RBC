%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCUCCGGACAUGCGCAGUGCGGGAGCUGAGGCGCCAGCUGUGGAUUUGGAAGUUCCGGGGAAGUCGCGCAUGCGCGAGUGUACGCGUUGCCGGCGAAGAGGGGAGCCUGACGACUCGGAAAUUUGAAUACCACAGUAGC\
) } def
/len { sequence length } bind def

/coor [
[-173.93582153 424.54049683]
[-190.18572998 433.91067505]
[-208.66383362 431.70462036]
[-218.16369629 443.31292725]
[-227.66354370 454.92123413]
[-237.16340637 466.52954102]
[-246.66326904 478.13781738]
[-249.41545105 493.71783447]
[-263.46371460 498.66708374]
[-266.51150513 507.36392212]
[-273.30441284 510.42407227]
[-283.05874634 521.81933594]
[-292.81307983 533.21466064]
[-293.01058960 549.25653076]
[-305.76370239 558.98986816]
[-321.28927612 554.94812012]
[-327.67745972 540.23175049]
[-320.02777100 526.12994385]
[-304.20837402 523.46032715]
[-294.45404053 512.06500244]
[-284.69970703 500.66973877]
[-275.07202148 489.16720581]
[-272.99932861 474.41754150]
[-258.27157593 468.63796997]
[-248.77171326 457.02966309]
[-239.27185059 445.42135620]
[-229.77198792 433.81304932]
[-220.27214050 422.20477295]
[-225.13813782 412.01913452]
[-225.81724548 400.69967651]
[-222.17092896 389.90759277]
[-214.69828796 381.24142456]
[-204.46815491 376.00018311]
[-192.96635437 374.98870850]
[-181.87985229 378.39428711]
[-171.63101196 367.44158936]
[-171.70526123 355.29580688]
[-163.18737793 346.08190918]
[-150.27153015 345.14477539]
[-139.78291321 334.42150879]
[-129.29428101 323.69821167]
[-118.80565643 312.97494507]
[-108.31703186 302.25164795]
[-97.82840729 291.52838135]
[-87.33978271 280.80508423]
[-87.76082611 265.96063232]
[-77.27662659 254.93627930]
[-61.70352554 254.59529114]
[-51.21490097 243.87202454]
[-47.84674454 229.36323547]
[-32.66580582 224.90794373]
[-22.17717934 214.18466187]
[-11.68855476 203.46138000]
[-8.32039738 188.95259094]
[6.86054087 184.49729919]
[17.34916687 173.77401733]
[27.83779144 163.05073547]
[38.32641602 152.32745361]
[48.81504440 141.60417175]
[59.30366898 130.88088989]
[69.79229736 120.15761566]
[63.68459320 99.83832550]
[69.97296906 79.57421875]
[86.51091766 66.28235626]
[107.65329742 64.49983215]
[113.77455139 50.80566406]
[119.89580536 37.11149216]
[126.01705933 23.41732597]
[126.67618561 14.22550583]
[132.42819214 9.49026108]
[138.85089111 -4.06514120]
[145.27359009 -17.62054253]
[146.13589478 -26.79553223]
[151.99124146 -31.40237236]
[158.71224976 -44.81237411]
[165.43324280 -58.22237396]
[172.15425110 -71.63237762]
[178.87524414 -85.04237366]
[173.65458679 -99.95948792]
[180.58618164 -114.16260529]
[195.55764771 -119.22526550]
[209.68669128 -112.14389038]
[214.59077454 -97.11972809]
[207.36042786 -83.06635284]
[192.28524780 -78.32137299]
[185.56425476 -64.91137695]
[178.84324646 -51.50137329]
[172.12223816 -38.09136963]
[165.40124512 -24.68136978]
[158.82899475 -11.19784355]
[152.40629578 2.35755873]
[145.98359680 15.91296101]
[139.71122742 29.53857994]
[133.58998108 43.23274994]
[127.46871948 56.92691803]
[121.34746552 70.62108612]
[125.18677521 73.83778381]
[128.54696655 77.55215454]
[131.36412048 81.69354248]
[133.58467102 86.18315887]
[135.16633606 90.93560028]
[150.15165710 90.27210236]
[165.13697815 89.60860443]
[178.66392517 80.33748627]
[193.33761597 87.65971375]
[194.06300354 104.04280853]
[180.09388733 112.63324738]
[165.80047607 104.59391785]
[150.81515503 105.25742340]
[135.82984924 105.92092133]
[131.99699402 117.17636108]
[124.73414612 126.59053802]
[114.81987000 133.15428162]
[103.31694031 136.16397095]
[91.45844269 135.29698181]
[80.51557159 130.64624023]
[70.02694702 141.36952209]
[59.53832245 152.09280396]
[49.04969788 162.81608582]
[38.56107330 173.53936768]
[28.07244682 184.26264954]
[17.58382034 194.98591614]
[13.46544743 210.26170349]
[-0.96527427 213.94999695]
[-11.45389938 224.67327881]
[-21.94252586 235.39656067]
[-26.06089783 250.67234802]
[-40.49161911 254.36064148]
[-50.98024750 265.08392334]
[-50.97663498 280.66076660]
[-61.76634979 291.38626099]
[-76.61650085 291.29373169]
[-87.10512543 302.01699829]
[-97.59375000 312.74029541]
[-108.08238220 323.46356201]
[-118.57100677 334.18682861]
[-129.05963135 344.91012573]
[-139.54824829 355.63339233]
[-143.66075134 373.54486084]
[-160.67832947 377.69042969]
[-170.92716980 388.64312744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[6 25]
[7 24]
[9 22]
[11 21]
[12 20]
[13 19]
[35 141]
[36 140]
[39 138]
[40 137]
[41 136]
[42 135]
[43 134]
[44 133]
[45 132]
[48 129]
[49 128]
[51 126]
[52 125]
[53 124]
[55 122]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[61 116]
[65 96]
[66 95]
[67 94]
[68 93]
[70 92]
[71 91]
[72 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
