%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUCGCGGGGAGCGGGCAGCGGGGACGGCGGCGGCGCGGCCCGCGUGACCCAGCGCCGCGCCCCGUGGCCCCGCCGCAGG\
) } def
/len { sequence length } bind def

/coor [
[64.38342285 253.67771912]
[49.42747116 252.52896118]
[38.48795700 242.26606750]
[36.38752365 227.41593933]
[25.98603630 238.22375488]
[15.58454895 249.03158569]
[5.18306160 259.83941650]
[4.05152082 275.84249878]
[-9.24684429 284.81652832]
[-24.51066589 279.87738037]
[-30.03084755 264.81393433]
[-21.57277679 251.18159485]
[-5.62476206 249.43792725]
[4.77672529 238.63009644]
[15.17821312 227.82228088]
[25.57970047 217.01445007]
[34.44290543 204.91305542]
[41.60870361 191.73538208]
[40.89146042 176.85804749]
[54.28139114 168.43069458]
[61.44718552 155.25300598]
[68.61298370 142.07533264]
[75.77878571 128.89764404]
[82.94458008 115.71995544]
[90.11037445 102.54227448]
[90.93270111 94.29820251]
[97.81141663 89.00478363]
[98.21281433 73.18867493]
[111.36743164 66.20259857]
[119.03271484 53.30905914]
[126.69799805 40.41551208]
[134.36328125 27.52196884]
[136.13456726 18.29300690]
[142.57719421 14.28938580]
[150.73069763 1.69890392]
[158.88421631 -10.89157772]
[167.03771973 -23.48205948]
[175.19123840 -36.07254028]
[183.34475708 -48.66302109]
[191.49826050 -61.25350189]
[199.65177917 -73.84398651]
[200.41389465 -80.83386230]
[204.16789246 -85.52769470]
[208.94264221 -87.05279541]
[218.03602600 -98.98218536]
[213.45263672 -113.80690002]
[218.49018860 -128.48350525]
[231.21165466 -137.36853027]
[246.72537231 -137.04553223]
[259.06597900 -127.63868713]
[263.48831177 -112.76512909]
[258.29180908 -98.14403534]
[245.47471619 -89.39752197]
[229.96542358 -89.88880157]
[220.87203979 -77.95941162]
[212.24226379 -65.69046783]
[204.08874512 -53.09999084]
[195.93524170 -40.50951004]
[187.78172302 -27.91902733]
[179.62820435 -15.32854557]
[171.47470093 -2.73806429]
[163.32118225 9.85241699]
[155.16766357 22.44289780]
[147.25682068 35.18724823]
[139.59153748 48.08079529]
[131.92625427 60.97433853]
[124.26097870 73.86788177]
[124.40785217 88.76176453]
[110.70495605 96.67006683]
[103.28806305 109.70807648]
[96.12226105 122.88575745]
[88.95646667 136.06344604]
[81.79066467 149.24111938]
[74.62487030 162.41880798]
[67.45907593 175.59649658]
[67.66377258 191.41636658]
[54.78638840 198.90116882]
[47.62059021 212.07885742]
[62.41454697 209.60119629]
[75.49912262 216.93562317]
[81.10550690 230.84851074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[17 78]
[18 77]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[27 69]
[29 67]
[30 66]
[31 65]
[32 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[44 55]
[45 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
