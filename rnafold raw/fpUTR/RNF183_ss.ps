%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAUUCAGGGGAGGGAGCAACUGGAGCCUCAGGCCCUCCAGAGUAGUCUGCCUGACCACCCUGGAGCCCACAGAAGCCCAGGACGUCUCCCGCGAAGCCUCCCCGUGUGUGGCUGAGG\
) } def
/len { sequence length } bind def

/coor [
[161.37727356 360.41308594]
[151.72926331 349.06561279]
[157.19288635 334.21774292]
[154.82681274 319.40551758]
[145.17880249 308.05804443]
[150.64242554 293.21017456]
[148.27635193 278.39794922]
[145.71498108 263.61825562]
[142.95874023 248.87365723]
[140.20249939 234.12905884]
[137.44625854 219.38447571]
[134.69000244 204.63987732]
[130.39498901 190.26792908]
[124.60903168 176.42875671]
[118.82308197 162.58958435]
[113.03713226 148.75039673]
[107.25117493 134.91122437]
[101.28305817 121.14963531]
[85.76610565 115.69552612]
[78.82598877 100.78385162]
[84.64456940 85.39986420]
[78.13631439 71.88533020]
[71.62805939 58.37079620]
[65.11980438 44.85626221]
[58.49383545 38.38270569]
[58.62341309 30.89799118]
[52.47416687 17.21636963]
[39.75953293 7.80102634]
[41.59924698 -6.97952604]
[35.44999695 -20.66114807]
[18.58580971 -31.55131340]
[21.05499840 -50.65429306]
[14.19226933 -63.99231720]
[2.10010910 -68.71107483]
[-3.31392241 -80.06394196]
[0.38687283 -91.66308594]
[-6.12138319 -105.17761993]
[-12.62963963 -118.69214630]
[-19.13789558 -132.20668030]
[-25.64615059 -145.72122192]
[-32.15440750 -159.23574829]
[-45.11314392 -168.31217957]
[-43.66423416 -183.13615417]
[-50.17248917 -196.65068054]
[-63.13122559 -205.72712708]
[-61.68231583 -220.55108643]
[-68.19057465 -234.06561279]
[-74.69882965 -247.58015442]
[-89.30575562 -254.21469116]
[-93.08605957 -269.80599976]
[-83.13980865 -282.39376831]
[-67.09691620 -282.32171631]
[-57.26411819 -269.64514160]
[-61.18429565 -254.08840942]
[-54.67604065 -240.57386780]
[-48.16778564 -227.05934143]
[-35.67456055 -218.94955444]
[-36.65795898 -203.15893555]
[-30.14970207 -189.64440918]
[-17.65647888 -181.53462219]
[-18.63987541 -165.74400330]
[-12.13161850 -152.22947693]
[-5.62336254 -138.71493530]
[0.88489366 -125.20040894]
[7.39314985 -111.68587494]
[13.90140629 -98.17134094]
[28.89713669 -89.15980530]
[27.53029442 -70.85504913]
[34.39302444 -57.51702118]
[44.50973129 -55.23116684]
[51.80083847 -47.54682922]
[53.62764359 -36.88819122]
[49.13161850 -26.81039429]
[55.28086853 -13.12877274]
[67.55566406 -4.69202995]
[66.15578461 11.06712341]
[72.30503082 24.74874496]
[78.63433838 38.34800720]
[85.14259338 51.86254120]
[91.65084839 65.37707520]
[98.15910339 78.89160919]
[110.60350800 81.65554810]
[119.20987701 91.05943298]
[120.86306000 103.69943237]
[114.96467590 115.00038910]
[121.41745758 121.64659119]
[121.09035492 129.12527466]
[126.87630463 142.96444702]
[132.66226196 156.80363464]
[138.44821167 170.64280701]
[144.23416138 184.48197937]
[149.96580505 170.62022400]
[162.64314270 162.60241699]
[177.62376404 163.36466980]
[189.42181396 172.62782288]
[193.71687317 186.99975586]
[188.93612671 201.21749878]
[176.83024597 210.07456970]
[161.83236694 210.32752991]
[149.43460083 201.88363647]
[152.19084167 216.62821960]
[154.94709778 231.37281799]
[157.70333862 246.11741638]
[160.45957947 260.86203003]
[165.16674805 268.84030151]
[163.08857727 276.03189087]
[165.45465088 290.84408569]
[175.27189636 303.25103760]
[169.63903809 317.03942871]
[172.00511169 331.85165405]
[181.82235718 344.25860596]
[176.18949890 358.04699707]
[189.69622803 365.92752075]
[194.92880249 380.66366577]
[189.41656494 395.29748535]
[175.76222229 402.91937256]
[160.41294861 399.93048096]
[150.61618042 387.74206543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[3 110]
[4 109]
[6 107]
[7 106]
[8 104]
[9 103]
[10 102]
[11 101]
[12 100]
[13 91]
[14 90]
[15 89]
[16 88]
[17 87]
[18 85]
[21 81]
[22 80]
[23 79]
[24 78]
[26 77]
[27 76]
[29 74]
[30 73]
[32 69]
[33 68]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[43 59]
[44 58]
[46 56]
[47 55]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
