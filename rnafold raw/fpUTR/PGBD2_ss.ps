%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCCGCGACGCCCGACGCCAACGCAGGCGCAGCGCUCCGAUUCGGCGCGGCUCAUGGUCCGGUUCGGGCUCGCGAGUCUCCGUCUGGGGUAGGGCAGGUUCUUAGACUCUGUGAGUAAAGACAGCUUCAUCUUCCCAGUUCAUC\
) } def
/len { sequence length } bind def

/coor [
[218.70664978 162.97091675]
[212.27627563 153.65753174]
[208.48649597 142.97665405]
[207.60627747 131.66192627]
[193.01332092 128.19120789]
[178.42037964 124.72049713]
[163.79141235 121.40486145]
[149.12808228 118.24467468]
[134.46475220 115.08448792]
[119.80142212 111.92429352]
[105.13809204 108.76410675]
[97.16084290 110.28489685]
[90.19860840 105.37808990]
[75.60565948 101.90737915]
[61.01271057 98.43666840]
[46.41976166 94.96595764]
[31.82681465 91.49523926]
[17.23386574 88.02452850]
[8.08970642 89.08433533]
[2.36961484 84.32218170]
[-12.14637947 80.54251099]
[-26.66237450 76.76284027]
[-44.25735474 82.08428955]
[-56.30055237 69.36060333]
[-70.89350128 65.88989258]
[-80.03765869 66.94969177]
[-85.75775146 62.18753815]
[-100.27374268 58.40786743]
[-115.57825470 62.41816711]
[-125.94522858 51.72353363]
[-141.24974060 55.73383331]
[-151.61671448 45.03919983]
[-166.13270569 41.25952911]
[-181.43721008 45.26982880]
[-191.80418396 34.57519531]
[-206.32017517 30.79552460]
[-220.83616638 27.01585388]
[-235.35217285 23.23618317]
[-249.86816406 19.45651245]
[-262.50827026 28.66313744]
[-278.10540771 27.53935623]
[-289.29510498 16.61578369]
[-290.79394531 1.05019486]
[-281.89419556 -11.80781364]
[-266.79803467 -15.88708305]
[-252.63345337 -9.26150799]
[-246.08848572 4.94051743]
[-231.57249451 8.72018814]
[-217.05650330 12.49985981]
[-202.54051208 16.27952957]
[-188.02452087 20.05920219]
[-173.75828552 15.77855396]
[-162.35302734 26.74353600]
[-147.83703613 30.52320671]
[-133.57080078 26.24255943]
[-122.16555786 37.20753860]
[-107.89932251 32.92689133]
[-96.49407196 43.89187241]
[-81.97808075 47.67154694]
[-67.42279053 51.29693985]
[-52.82983780 54.76765442]
[-42.32471466 48.68327332]
[-30.10477066 51.50564194]
[-22.88270187 62.24684525]
[-8.36670876 66.02651215]
[6.14928579 69.80618286]
[20.70457649 73.43157959]
[35.29752731 76.90229034]
[49.89047623 80.37300873]
[64.48342133 83.84371948]
[79.07637024 87.31443024]
[93.66931915 90.78514099]
[108.29828644 94.10077667]
[122.96161652 97.26097107]
[137.62493896 100.42115784]
[152.28826904 103.58134460]
[166.95159912 106.74153137]
[176.07119751 105.48788452]
[181.89108276 110.12754822]
[196.48403931 113.59826660]
[211.07698059 117.06897736]
[222.47654724 101.66223145]
[239.37641907 92.72592926]
[258.43057251 91.98197937]
[275.88681030 99.53492737]
[288.32589722 113.85964203]
[293.33096313 132.10905457]
[308.20947266 134.01432800]
[323.08798218 135.91958618]
[337.96649170 137.82485962]
[352.84500122 139.73013306]
[367.72351074 141.63539124]
[376.70391846 139.61285400]
[382.89633179 143.74224854]
[397.73104858 145.96289062]
[412.56573486 148.18353271]
[425.18905640 139.05720520]
[440.20193481 141.52058411]
[448.82470703 153.61122131]
[463.65942383 155.83184814]
[478.49414062 158.05249023]
[493.32882690 160.27313232]
[508.20733643 162.17840576]
[523.12292480 163.76744080]
[538.03851318 165.35647583]
[552.95416260 166.94551086]
[563.50354004 159.44606018]
[575.93298340 161.12005615]
[583.61322021 170.52168274]
[598.49176025 172.42695618]
[613.37023926 174.33222961]
[628.24877930 176.23748779]
[644.72760010 172.25196838]
[653.11914062 186.98350525]
[641.28631592 199.12521362]
[626.34350586 191.11599731]
[611.46496582 189.21072388]
[596.58648682 187.30546570]
[581.70794678 185.40019226]
[565.94799805 193.05221558]
[551.36511230 181.86109924]
[536.44952393 180.27206421]
[521.53393555 178.68302917]
[506.61831665 177.09399414]
[502.35830688 179.38935852]
[496.60205078 178.98419189]
[491.10821533 175.10784912]
[476.27349854 172.88720703]
[461.43878174 170.66656494]
[446.60406494 168.44592285]
[434.81884766 177.48165894]
[419.74270630 175.44093323]
[410.34512329 163.01824951]
[395.51040649 160.79760742]
[380.67568970 158.57696533]
[365.81823730 156.51390076]
[350.93972778 154.60862732]
[336.06121826 152.70336914]
[321.18270874 150.79809570]
[306.30419922 148.89283752]
[291.42568970 146.98756409]
[286.75247192 157.15780640]
[279.58306885 165.77310181]
[270.40557861 172.23431396]
[259.84793091 176.08935547]
[248.63517761 177.06483459]
[237.53964233 175.08537292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 81]
[5 80]
[6 79]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[18 67]
[20 66]
[21 65]
[22 64]
[24 61]
[25 60]
[27 59]
[28 58]
[30 56]
[32 54]
[33 53]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[87 141]
[88 140]
[89 139]
[90 138]
[91 137]
[92 136]
[94 135]
[95 134]
[96 133]
[99 130]
[100 129]
[101 128]
[102 127]
[103 124]
[104 123]
[105 122]
[106 121]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
