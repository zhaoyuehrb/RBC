%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCAAGGUGUGCAGGCAGCUGUGUUUGUCAGGAAGGCAGAAGGAGUUGGCUUUGCUUUAGGGGAGGAGACGAGGUCCCACAACACCCUCUGAAGGGUAUAUAAGGAGCCCCAGCGUGCAGCCUGGCCUGGUACCUCCUGCCAGCAUCUCUUGGGUUUGCUGAGAACUCACGGGCUCCAGCUACCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[79.17748260 614.10980225]
[64.44609833 609.95709229]
[53.33993530 599.42565918]
[48.41110992 584.93548584]
[50.79222870 569.81628418]
[59.93613052 557.54241943]
[73.74161530 550.93432617]
[74.23239899 535.94238281]
[74.72318268 520.95037842]
[75.21397400 505.95840454]
[75.70475769 490.96646118]
[72.77665710 484.16735840]
[76.32821655 475.73376465]
[77.06423187 460.75183105]
[69.96074677 447.66024780]
[78.36586761 434.25634766]
[79.10188293 419.27441406]
[76.28542328 412.42834473]
[79.97449493 404.05398560]
[80.95554352 389.08609009]
[81.93658447 374.11819458]
[82.91763306 359.15032959]
[83.77619171 344.17492676]
[84.51220703 329.19299316]
[85.24822235 314.21105957]
[76.39741516 299.06542969]
[86.48331451 283.66793823]
[86.97410583 268.67599487]
[79.65737152 255.70236206]
[87.84205627 242.16273499]
[88.33283997 227.17077637]
[88.82363129 212.17880249]
[89.31441498 197.18682861]
[81.99768066 184.21321106]
[90.18236542 170.67359924]
[90.67315674 155.68162537]
[91.16394043 140.68965149]
[83.84720612 127.71604156]
[92.03189087 114.17641449]
[84.59237671 105.20256042]
[85.06907654 93.55570984]
[93.21705627 85.21984100]
[93.95307159 70.23790741]
[94.68908691 55.25597763]
[95.30250549 40.26852417]
[95.79329681 25.27655602]
[96.16141510 10.28107452]
[96.40683746 -4.71691751]
[96.65226746 -19.71491051]
[96.89768982 -34.71290207]
[97.14311981 -49.71089554]
[97.38854218 -64.70888519]
[88.21590424 -52.84032822]
[74.37940216 -47.04798126]
[59.48710632 -48.84228134]
[47.42238617 -57.75533295]
[41.33128357 -71.46294403]
[42.80214310 -86.39065552]
[51.45141602 -98.64585876]
[65.02368164 -105.03284454]
[79.97978210 -103.88611603]
[92.41970825 -95.50469971]
[99.09910583 -82.07648468]
[101.78435516 -96.83417511]
[104.46961212 -111.59186554]
[107.15486145 -126.34955597]
[109.84011078 -141.10723877]
[112.52536774 -155.86492920]
[105.83658600 -166.90551758]
[108.38767242 -179.15025330]
[118.27460480 -186.13732910]
[121.20095825 -200.84910583]
[116.30461121 -215.89358521]
[126.37620544 -226.86683655]
[129.30256653 -241.57861328]
[132.22891235 -256.29040527]
[135.15527344 -271.00216675]
[138.08163452 -285.71395874]
[125.50102234 -294.19946289]
[117.15013123 -306.82110596]
[114.27553558 -321.63833618]
[117.28469849 -336.38732910]
[125.68856812 -348.82678223]
[138.18070984 -357.07852173]
[152.84037781 -359.91116333]
[155.76672363 -374.62295532]
[158.69308472 -389.33471680]
[152.12664795 -398.03140259]
[151.45347595 -408.68762207]
[156.65493774 -417.76000977]
[165.79882812 -422.36483765]
[169.20497131 -436.97299194]
[172.61111450 -451.58114624]
[171.05430603 -458.03344727]
[172.74665833 -463.47988892]
[176.37509155 -466.60775757]
[180.25737000 -481.09664917]
[184.13966370 -495.58551025]
[188.02194214 -510.07440186]
[177.56871033 -521.42047119]
[174.93154907 -536.62078857]
[180.95198059 -550.82495117]
[193.70890808 -559.50042725]
[209.13162231 -559.87902832]
[222.29881287 -551.83984375]
[229.00886536 -537.94812012]
[227.12062073 -522.63677979]
[217.23663330 -510.79150391]
[202.51083374 -506.19213867]
[198.62854004 -491.70324707]
[194.74626160 -477.21435547]
[190.86398315 -462.72546387]
[187.21926880 -448.17498779]
[183.81312561 -433.56683350]
[180.40698242 -418.95867920]
[187.37112427 -400.93014526]
[173.40486145 -386.40835571]
[170.47850037 -371.69659424]
[167.55215454 -356.98480225]
[180.01190186 -348.75778198]
[188.39532471 -336.35360718]
[191.39912415 -321.64505005]
[188.53503418 -306.86721802]
[180.20893860 -294.27792358]
[167.66363525 -285.81280518]
[152.79341125 -282.78759766]
[149.86705017 -268.07580566]
[146.94068909 -253.36402893]
[144.01434326 -238.65225220]
[141.08798218 -223.94047546]
[146.19364929 -209.94828796]
[135.91273499 -197.92274475]
[132.98638916 -183.21096802]
[139.51907349 -166.93058777]
[127.28305817 -153.17968750]
[124.59780121 -138.42199707]
[121.91255188 -123.66429901]
[119.22729492 -108.90660858]
[116.54204559 -94.14891815]
[113.85679626 -79.39122772]
[112.38653564 -64.46346283]
[112.14111328 -49.46546936]
[111.89568329 -34.46747589]
[111.65026093 -19.46948433]
[111.40483093 -4.47149134]
[111.15940857 10.52650070]
[114.19835663 17.27676582]
[110.78526306 25.76734352]
[110.29447937 40.75931168]
[113.22257233 47.55839539]
[109.67102051 55.99199295]
[108.93500519 70.97392273]
[108.19898987 85.95585632]
[116.24866486 100.66503906]
[107.02386475 114.66719818]
[114.30548859 128.71313477]
[106.15590668 141.18043518]
[105.66512299 156.17240906]
[105.17433929 171.16438293]
[112.45596313 185.21031189]
[104.30638123 197.67761230]
[103.81559753 212.66958618]
[103.32481384 227.66156006]
[102.83402252 242.65351868]
[110.11565399 256.69946289]
[101.96607208 269.16677856]
[101.47528839 284.15872192]
[109.71166229 294.09838867]
[108.98486328 306.58489990]
[100.23015594 314.94705200]
[99.49414062 329.92898560]
[98.75812531 344.91091919]
[101.46594238 353.65203857]
[97.88552094 360.13137817]
[96.90447235 375.09924316]
[95.92342377 390.06713867]
[94.94237518 405.03503418]
[94.08381653 420.01043701]
[93.34780121 434.99237061]
[100.39864349 449.15554810]
[92.04616547 461.48785400]
[91.31015015 476.46978760]
[90.69672394 491.45724487]
[90.20594025 506.44921875]
[89.71515656 521.44116211]
[89.22436523 536.43316650]
[88.73358154 551.42510986]
[102.07730865 558.92199707]
[110.39888763 571.76763916]
[111.78607178 587.01013184]
[105.92009735 601.14691162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 187]
[8 186]
[9 185]
[10 184]
[11 183]
[13 182]
[14 181]
[16 179]
[17 178]
[19 177]
[20 176]
[21 175]
[22 174]
[23 172]
[24 171]
[25 170]
[27 167]
[28 166]
[30 164]
[31 163]
[32 162]
[33 161]
[35 159]
[36 158]
[37 157]
[39 155]
[42 153]
[43 152]
[44 151]
[45 149]
[46 148]
[47 146]
[48 145]
[49 144]
[50 143]
[51 142]
[52 141]
[63 140]
[64 139]
[65 138]
[66 137]
[67 136]
[68 135]
[71 133]
[72 132]
[74 130]
[75 129]
[76 128]
[77 127]
[78 126]
[85 119]
[86 118]
[87 117]
[91 115]
[92 114]
[93 113]
[96 112]
[97 111]
[98 110]
[99 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
