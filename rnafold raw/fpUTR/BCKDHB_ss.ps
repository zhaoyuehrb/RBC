%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUGGAAGCCUCCUCGGGUGCUCCGCCCUCCCCGCAGGCGGCGUGCGGCUGCAUAGCCUGAGAAUCCCGGUGGUGAGCGGGG\
) } def
/len { sequence length } bind def

/coor [
[-6.24665833 176.48913574]
[-18.87985611 181.79304504]
[-32.36807632 180.11351013]
[-43.14054489 172.00459290]
[-57.02511215 177.68077087]
[-70.90967560 183.35693359]
[-84.79424286 189.03309631]
[-98.67880249 194.70925903]
[-109.46553040 209.49392700]
[-126.69062805 206.73286438]
[-140.35595703 212.91821289]
[-154.02130127 219.10354614]
[-167.68664551 225.28889465]
[-176.79901123 238.92329407]
[-193.14297485 237.57910156]
[-199.90527344 222.63909912]
[-190.12942505 209.47229004]
[-173.87199402 211.62355042]
[-160.20664978 205.43821716]
[-146.54130554 199.25286865]
[-132.87597656 193.06752014]
[-128.22213745 181.73905945]
[-116.68776703 176.54183960]
[-104.35497284 180.82469177]
[-90.47040558 175.14852905]
[-76.58583832 169.47236633]
[-62.70127869 163.79620361]
[-48.81671143 158.12004089]
[-45.49694443 142.15724182]
[-33.25227737 131.14379883]
[-16.70052528 129.49522400]
[-2.24057460 138.04466248]
[11.42476559 131.85931396]
[25.09010506 125.67397308]
[38.75544357 119.48862457]
[52.42078400 113.30328369]
[66.08612061 107.11793518]
[68.41339874 85.74859619]
[82.89495087 69.86309052]
[103.95839691 65.57403564]
[108.85647583 51.39627838]
[113.75455475 37.21852112]
[118.65263367 23.04076195]
[123.55072021 8.86300468]
[117.85395050 -6.13454294]
[126.15129089 -19.86530304]
[142.07771301 -21.79621124]
[153.41584778 -10.44604111]
[151.46803284 5.47832918]
[137.72846985 13.76108551]
[132.83039856 27.93884277]
[127.93231201 42.11660004]
[123.03423309 56.29435730]
[118.13615417 70.47211456]
[124.45907593 75.45270538]
[129.46240234 81.75765228]
[132.87619019 89.04680634]
[134.51625061 96.92689514]
[149.39093018 98.86188507]
[164.26559448 100.79686737]
[178.94857788 94.90442657]
[190.57139587 104.21888733]
[202.94049072 94.38115692]
[218.63340759 96.25408936]
[228.33982849 108.72650146]
[226.30108643 124.39874268]
[213.72674561 133.97274780]
[198.07693481 131.76841736]
[188.63641357 119.09355927]
[175.01736450 125.12440491]
[162.33061218 115.67153931]
[147.45593262 113.73654938]
[132.58126831 111.80156708]
[126.36953735 122.48251343]
[116.80525970 130.30509949]
[105.10441589 134.27478027]
[92.75460815 133.88687134]
[81.32595825 129.19068909]
[72.27146912 120.78327942]
[58.60612869 126.96862030]
[44.94078827 133.15396118]
[31.27544975 139.33930969]
[17.61010933 145.52465820]
[3.94477034 151.71000671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[10 21]
[11 20]
[12 19]
[13 18]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[58 73]
[59 72]
[60 71]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
