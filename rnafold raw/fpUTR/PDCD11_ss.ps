%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUAUCCUGGUCUCCGCGUGUGUGAGUACCGCGGCGCGAGGUUAGUGGUAGCUGGGUGCAGACGCCGUGGCGCUGGAGACCCAAAC\
) } def
/len { sequence length } bind def

/coor [
[118.58500671 340.06286621]
[116.45027924 325.21554565]
[114.31555939 310.36822510]
[112.18083191 295.52090454]
[102.71101379 284.02429199]
[108.40558624 269.26345825]
[106.27086639 254.41613770]
[104.13613892 239.56881714]
[99.97349548 233.25398254]
[102.20003510 224.15446472]
[100.59661102 209.24040222]
[96.66200256 202.78102112]
[99.21191406 193.76676941]
[90.58637238 181.62390137]
[97.31946564 167.30691528]
[96.24937439 152.34513855]
[95.17929077 137.38334656]
[94.10919952 122.42156982]
[93.03911591 107.45978546]
[89.29580688 100.09694672]
[92.20758820 91.94658661]
[91.67220306 76.95614624]
[91.13681793 61.96570206]
[90.60143280 46.97526169]
[79.31645966 36.23808289]
[78.98704529 21.02801323]
[89.29284668 10.33568096]
[88.75746155 -4.65476084]
[88.22207642 -19.64520264]
[87.68669128 -34.63564682]
[87.15130615 -49.62608719]
[83.65243530 -58.31612396]
[86.87401581 -65.15908051]
[86.87401581 -80.15908051]
[86.87401581 -95.15908051]
[86.87401581 -110.15908051]
[86.60627747 -125.15669250]
[86.07089233 -140.14714050]
[77.84596252 -153.66235352]
[85.12406921 -166.65768433]
[73.38766479 -177.24221802]
[72.65661621 -193.02958679]
[83.36464691 -204.65342712]
[99.15886688 -205.21751404]
[110.66884613 -194.38719177]
[111.06591797 -178.58789062]
[100.11450958 -167.19306946]
[108.30114746 -154.75006104]
[101.06134033 -140.68252563]
[101.59672546 -125.69207764]
[105.06049347 -118.96846771]
[101.87401581 -110.15908051]
[101.87401581 -95.15908051]
[101.87401581 -80.15908051]
[101.87401581 -65.15908051]
[102.14175415 -50.16147232]
[102.67713928 -35.17103195]
[103.21252441 -20.18058777]
[103.74790955 -5.19014597]
[104.28329468 9.80029678]
[115.32562256 19.73017883]
[116.08212280 34.92499161]
[105.59188080 46.43987656]
[106.12726593 61.43031693]
[106.66264343 76.42076111]
[107.19802856 91.41120148]
[108.00089264 106.38970184]
[109.07098389 121.35147858]
[110.14107513 136.31326294]
[111.21115875 151.27503967]
[112.28125000 166.23683167]
[120.98332977 179.44985962]
[114.17369080 192.69668579]
[115.51066589 207.63697815]
[117.11408997 222.55104065]
[118.98345947 237.43409729]
[121.11818695 252.28141785]
[123.25290680 267.12872314]
[132.87542725 279.68731689]
[127.02816010 293.38616943]
[129.16287231 308.23348999]
[131.29760742 323.08081055]
[133.43232727 337.92813110]
[145.36207581 348.65475464]
[144.26994324 364.66058350]
[130.99372864 373.66732788]
[115.71778107 368.76577759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[6 78]
[7 77]
[8 76]
[10 75]
[11 74]
[13 73]
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[21 66]
[22 65]
[23 64]
[24 63]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 50]
[38 49]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
