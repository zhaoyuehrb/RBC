%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCGGGAUUCAGGAAGCGCGGAUCUCCCGGCCGCCGGCGCCCAGCCGUCCCGGAGGCUGAGCAGUGCAGACGGGCCUGGGGCAGGC\
) } def
/len { sequence length } bind def

/coor [
[54.76386642 127.99962616]
[50.40077591 128.00024414]
[47.06078720 126.32676697]
[32.50635147 129.95559692]
[17.95191765 133.58442688]
[3.39748144 137.21324158]
[-11.15695477 140.84207153]
[-25.71138954 144.47090149]
[-40.26582718 148.09973145]
[-54.82026291 151.72856140]
[-67.62772369 164.81663513]
[-84.28149414 159.58963013]
[-98.70041656 163.72419739]
[-109.83330536 174.96560669]
[-124.20023346 171.03614807]
[-131.64213562 184.97866821]
[-146.78729248 189.49528503]
[-160.65034485 181.90640259]
[-165.00659180 166.71434021]
[-157.27156067 152.93229675]
[-142.03428650 148.73690796]
[-128.33479309 156.61721802]
[-118.23324585 145.67153931]
[-102.83497620 149.30526733]
[-88.41605377 145.17071533]
[-82.17646027 134.64845276]
[-70.02687836 131.17286682]
[-58.44908905 137.17413330]
[-43.89465332 133.54530334]
[-29.34021950 129.91647339]
[-14.78578281 126.28764343]
[-0.23134702 122.65881348]
[14.32308865 119.02998352]
[28.87752533 115.40115356]
[43.43196106 111.77233124]
[57.77653122 107.38674927]
[71.87191772 102.25644684]
[85.96730804 97.12614441]
[95.10092163 86.53989410]
[108.90238953 88.77846527]
[122.99777985 83.64816284]
[130.17860413 77.64588165]
[137.67559814 78.59417725]
[151.94145203 73.95892334]
[166.20729065 69.32366943]
[180.47314453 64.68841553]
[194.73899841 60.05316162]
[199.69270325 55.15076828]
[205.51295471 53.85807419]
[210.16435242 55.63001251]
[217.93324280 50.41121292]
[225.29005432 52.13796616]
[239.96226501 49.01929092]
[254.63447571 45.90061569]
[269.30670166 42.78194046]
[275.69223022 28.76298904]
[288.95315552 21.27960396]
[303.90100098 23.01909447]
[314.82751465 33.10618973]
[329.49972534 29.98751640]
[335.68783569 15.75772285]
[349.07522583 7.91188145]
[364.51419067 9.46687794]
[376.06811523 19.82478333]
[379.29431152 35.00277328]
[372.95220947 49.16460037]
[359.48049927 56.86475372]
[344.05929565 55.14236450]
[332.61840820 44.65972900]
[317.94619751 47.77840424]
[312.06713867 61.43763733]
[299.11911011 69.10657501]
[283.96087646 67.66387177]
[272.42535400 57.45415497]
[257.75314331 60.57283020]
[243.08093262 63.69150543]
[228.40872192 66.81018066]
[213.79316711 70.18444824]
[199.37425232 74.31900787]
[185.10839844 78.95426178]
[170.84255981 83.58951569]
[156.57670593 88.22476959]
[142.31085205 92.86003113]
[128.12808228 97.74355316]
[114.03269196 102.87385559]
[104.89907837 113.46010590]
[91.09761047 111.22153473]
[77.00222015 116.35183716]
[62.90683365 121.48213959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[12 25]
[13 24]
[15 22]
[36 89]
[37 88]
[38 87]
[40 85]
[41 84]
[43 83]
[44 82]
[45 81]
[46 80]
[47 79]
[50 78]
[52 77]
[53 76]
[54 75]
[55 74]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
