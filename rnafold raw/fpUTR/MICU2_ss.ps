%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGAGUUCCCAAGCGGUAGGCGGCGGCGCCGGGAGAGAAGCGCCGCCUAGCUGCGCUUCCGCAAAG\
) } def
/len { sequence length } bind def

/coor [
[105.57257080 286.29852295]
[102.85582733 271.54660034]
[100.13908386 256.79467773]
[90.22463226 245.67924500]
[95.33453369 230.70596313]
[92.61779022 215.95404053]
[89.90105438 201.20210266]
[87.18431091 186.45018005]
[76.18453217 196.64846802]
[61.18528748 196.49798584]
[50.39232635 186.08108521]
[49.71023941 171.09658813]
[59.51218033 159.74221802]
[74.43572235 158.22966003]
[86.31565857 167.38496399]
[87.67968750 152.44711304]
[89.04370880 137.50926208]
[90.40773010 122.57140350]
[91.77175140 107.63355255]
[92.79538727 92.66851807]
[93.47811127 77.68406677]
[94.16082764 62.69961166]
[94.84354401 47.71515656]
[95.52626801 32.73070145]
[96.20898438 17.74624443]
[96.89170074 2.76178980]
[97.57442474 -12.22266579]
[85.61922455 -21.93757439]
[81.72239685 -36.65722656]
[87.17573547 -50.68309402]
[99.69257355 -58.71222305]
[100.03401947 -73.70833588]
[91.37031555 -87.63214111]
[99.33444214 -101.96757507]
[115.73358917 -101.96757507]
[123.69772339 -87.63214111]
[115.03401947 -73.70833588]
[118.29289246 -66.79161835]
[114.67702484 -58.02950668]
[126.41187286 -48.89542770]
[130.56718445 -34.43176651]
[125.34796906 -20.12746048]
[112.55887604 -11.53994656]
[111.87615967 3.44450879]
[111.19343567 18.42896461]
[110.51071930 33.41341782]
[109.82800293 48.39787292]
[109.14527893 63.38232803]
[108.46256256 78.36678314]
[107.77984619 93.35124207]
[110.66231537 101.19314575]
[106.70960236 108.99757385]
[105.34558105 123.93542480]
[103.98155975 138.87327576]
[102.61753845 153.81112671]
[101.25351715 168.74899292]
[101.93623352 183.73344421]
[104.65297699 198.48536682]
[107.36972046 213.23728943]
[110.08646393 227.98921204]
[120.19523621 240.15980530]
[114.89101410 254.07794189]
[117.60775757 268.82986450]
[120.32450104 283.58178711]
[132.66671753 293.83114624]
[132.20463562 309.86755371]
[119.29273987 319.38922119]
[103.83592224 315.09197998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[5 60]
[6 59]
[7 58]
[8 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[31 39]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
