%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGGGCGGGCGGACGCUGGCGCGGGUAGGUAAGAGCAGCGGCGGGCGGUGGCGCUCACUCCCGGCUUCCAACCGCGCGGAGCCUCUGCCUUGGAGAUUCUCAGUGCUGCGGAUC\
) } def
/len { sequence length } bind def

/coor [
[83.49341583 210.93122864]
[85.50654602 195.42376709]
[97.05163574 184.87649536]
[96.24648285 169.89811707]
[87.83718109 157.60450745]
[94.82257843 143.40892029]
[94.01743317 128.43054199]
[93.21228027 113.45216370]
[89.62254333 98.88803864]
[83.37467194 85.25117493]
[77.12680054 71.61431122]
[70.87892151 57.97744370]
[64.63105011 44.34057999]
[58.38317871 30.70371628]
[52.13530350 17.06685066]
[39.35301971 7.74355745]
[41.08596420 -7.04989290]
[34.83808899 -20.68675804]
[28.59021568 -34.32362366]
[13.35322094 -44.55502319]
[15.52631855 -61.91252518]
[8.91457367 -75.37673187]
[2.30283022 -88.84093475]
[-4.30891371 -102.30514526]
[-10.92065811 -115.76934814]
[-17.53240204 -129.23355103]
[-30.76852989 -132.11958313]
[-39.76323318 -141.98689270]
[-41.36710739 -155.04508972]
[-35.21307373 -166.45182800]
[-41.46094513 -180.08868408]
[-45.94195175 -183.25131226]
[-48.42338181 -187.42936707]
[-48.85992813 -191.65280151]
[-47.61317825 -195.08363342]
[-52.74348068 -209.17903137]
[-57.87378311 -223.27441406]
[-63.00408554 -237.36981201]
[-77.36838531 -248.79409790]
[-73.80563354 -265.92044067]
[-86.06904602 -275.91641235]
[-83.54454041 -290.59552002]
[-89.05142975 -304.54809570]
[-101.31484222 -314.54406738]
[-98.79033661 -329.22317505]
[-104.29721832 -343.17572021]
[-109.80410767 -357.12829590]
[-115.31098938 -371.08087158]
[-120.81787872 -385.03344727]
[-133.98838806 -394.80429077]
[-131.84329224 -411.06253052]
[-116.58927917 -417.08309937]
[-103.91836548 -406.67251587]
[-106.86530304 -390.54031372]
[-101.35842133 -376.58776855]
[-95.85153198 -362.63519287]
[-90.34465027 -348.68261719]
[-84.83776093 -334.73004150]
[-72.96823883 -325.73205566]
[-75.09885406 -310.05499268]
[-69.59197235 -296.10241699]
[-57.72244644 -287.10443115]
[-59.85306549 -271.42733765]
[-48.82078171 -266.26983643]
[-44.16019440 -254.58407593]
[-48.90869522 -242.50010681]
[-43.77839279 -228.40472412]
[-38.64809036 -214.30932617]
[-33.51778793 -200.21394348]
[-27.82408333 -186.33656311]
[-21.57620811 -172.69969177]
[-5.62011528 -167.57583618]
[1.89786398 -152.22312927]
[-4.06819630 -135.84530640]
[2.54354787 -122.38109589]
[9.15529156 -108.91688538]
[15.76703644 -95.45268250]
[22.37878036 -81.98847198]
[28.99052429 -68.52426910]
[40.40203857 -64.27122498]
[45.98782730 -52.99837112]
[42.22707748 -40.57149506]
[48.47495270 -26.93463135]
[54.72282791 -13.29776669]
[67.05821991 -4.94987297]
[65.77217102 10.81897736]
[72.02004242 24.45584106]
[78.26791382 38.09270477]
[84.51579285 51.72957230]
[90.76366425 65.36643219]
[97.01153564 79.00330353]
[103.25941467 92.64016724]
[113.07399750 84.28545380]
[127.10273743 81.46452332]
[142.89143372 85.65240479]
[155.23619080 94.17337799]
[167.58094788 102.69435120]
[184.05101013 106.71596527]
[184.74592590 123.65566254]
[168.66061401 129.01280212]
[159.05996704 115.03910828]
[146.71520996 106.51813507]
[134.37045288 97.99716187]
[127.82550812 101.65962982]
[127.62416077 116.65827942]
[114.73560333 108.98455048]
[108.19065857 112.64701843]
[108.99580383 127.62538910]
[109.80095673 142.60375977]
[118.26784515 155.96873474]
[111.22486115 169.09297180]
[112.03000641 184.07135010]
[124.63922119 193.32022095]
[128.30313110 208.52252197]
[121.29175568 222.50016785]
[106.91564941 228.65335083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 112]
[4 111]
[6 109]
[7 108]
[8 107]
[9 92]
[10 91]
[11 90]
[12 89]
[13 88]
[14 87]
[15 86]
[17 84]
[18 83]
[19 82]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[30 71]
[31 70]
[35 69]
[36 68]
[37 67]
[38 66]
[40 63]
[42 61]
[43 60]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
