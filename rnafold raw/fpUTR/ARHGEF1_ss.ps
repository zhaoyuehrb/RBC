%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGACUCAGGGCGGCUAGAGCGACGCGGCGGCAGGGGUGGGGAGAGUGCGGAGCCCGAGCGCGGAGGCUUCGGUUCCGGUGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[100.84370422 111.84471893]
[95.57728577 112.02979279]
[83.14172363 120.41768646]
[76.02750397 134.54916382]
[61.14947510 135.25164795]
[55.63403320 142.81283569]
[48.13031006 143.70639038]
[35.40958786 151.65518188]
[22.68886757 159.60397339]
[10.10880947 167.77355957]
[-2.32675409 176.16145325]
[-6.78704643 191.57200623]
[-21.67083168 197.55970764]
[-35.56054306 189.53128052]
[-37.80118179 173.64547729]
[-26.67392540 162.08850098]
[-10.71464729 163.72587585]
[1.72091579 155.33798218]
[5.58926296 148.84643555]
[14.74007893 146.88323975]
[27.46080017 138.93446350]
[40.18152237 130.98567200]
[52.76158142 122.81607819]
[58.98632431 109.28456879]
[74.75382996 107.98212433]
[87.18939209 99.59423065]
[99.16892242 90.56700134]
[110.65959167 80.92519379]
[116.25769806 66.12749481]
[130.98078918 63.87367630]
[142.47146606 54.23186493]
[148.06956482 39.43416595]
[162.79266357 37.18035126]
[174.28332520 27.53853607]
[159.28495789 27.31753922]
[145.21104431 22.12861824]
[133.65881348 12.56065464]
[125.93930054 -0.30049792]
[122.92859650 -14.99524784]
[124.96837616 -29.85591125]
[131.82714844 -43.19597244]
[142.72651672 -53.50149536]
[156.42953491 -59.60291672]
[171.38105774 -60.80780029]
[185.88427734 -56.97940445]
[198.29324341 -48.55220413]
[207.19967651 -36.48259354]
[211.59278870 -22.14033127]
[210.97402954 -7.15309763]
[205.41362000 6.77822828]
[195.54072571 18.07413292]
[210.39474487 15.98653603]
[225.24876404 13.89894009]
[240.10278320 11.81134319]
[254.95681763 9.72374725]
[269.81082153 7.63615036]
[284.66485596 5.54855394]
[297.25390625 -4.03406048]
[310.93414307 1.85664713]
[325.78814697 -0.23094942]
[340.64218140 -2.31854582]
[355.49618530 -4.40614223]
[364.80609131 -17.17725563]
[380.43243408 -19.54213142]
[393.10443115 -10.09772968]
[395.30395508 5.55275297]
[385.72610474 18.12416267]
[370.05322266 20.15810585]
[357.58380127 10.44787884]
[342.72976685 12.53547478]
[327.87576294 14.62307167]
[313.02172852 16.71066856]
[301.49514771 26.14396286]
[286.75244141 20.40257454]
[271.89843750 22.49017143]
[257.04440308 24.57776833]
[242.19038391 26.66536522]
[227.33636475 28.75296021]
[212.48234558 30.84055710]
[197.62832642 32.92815399]
[183.92514038 39.02920532]
[172.43447876 48.67101669]
[167.65826416 62.77906799]
[152.11326599 65.72252655]
[140.62260437 75.36434174]
[135.84638977 89.47238922]
[120.30140686 92.41585541]
[108.81073761 102.05767059]
[107.93572998 106.06851196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[5 23]
[7 22]
[8 21]
[9 20]
[10 18]
[11 17]
[27 88]
[28 87]
[30 85]
[31 84]
[33 82]
[34 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
