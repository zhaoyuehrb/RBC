%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGGGCGUGGCACCAGGAAGCGGCGUCCGCGCCGGGCCCAGAGCCGCAGCCGCAGCCGCCGCUACAGUCCGGGCCGGGCUCCACCGCGCAUCCUGCUCCACUCUGGCGACCGCCCCCGGGGCCCCCGCCGCGGGCGCGGCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[90.20144653 97.94915009]
[75.93559265 93.31389618]
[61.66974640 88.67864227]
[47.40390015 84.04338837]
[33.09029388 79.55777740]
[18.73050308 75.22229767]
[4.32609701 71.03743744]
[-10.12134171 67.00363922]
[-25.49386406 70.74477386]
[-35.67158127 59.86988068]
[-50.11902237 55.83608246]
[-64.56645966 51.80228806]
[-79.01390076 47.76848984]
[-88.18907928 48.47310638]
[-93.71998596 43.49597549]
[-108.07977295 39.16049957]
[-117.26770020 39.67281342]
[-122.69316101 34.58094406]
[-136.95899963 29.94568825]
[-151.22485352 25.31043243]
[-165.67228699 21.27663612]
[-180.27597046 17.85137177]
[-194.87965393 14.42610931]
[-209.48333740 11.00084591]
[-224.08702087 7.57558346]
[-238.69070435 4.15032005]
[-253.29438782 0.72505724]
[-268.49676514 5.10664797]
[-279.12094116 -5.33250761]
[-294.32333374 -0.95091677]
[-304.94750977 -11.39007282]
[-319.55120850 -14.81533623]
[-334.15487671 -18.24059868]
[-348.79364014 -21.51274681]
[-363.90090942 -16.81374359]
[-374.74139404 -27.02811241]
[-389.44546509 -29.99297333]
[-404.17977905 -32.80369186]
[-418.91406250 -35.61441422]
[-432.93777466 -27.82240486]
[-447.71801758 -34.06133652]
[-451.91665649 -49.54523087]
[-442.31283569 -62.39617157]
[-426.27383423 -62.75601578]
[-416.10336304 -50.34872055]
[-401.36904907 -47.53800201]
[-386.63473511 -44.72728348]
[-379.42733765 -46.57558823]
[-371.62271118 -41.70032883]
[-357.56488037 -46.62240219]
[-345.67495728 -36.18496323]
[-338.43045044 -37.88191986]
[-330.72961426 -32.84428406]
[-316.12594604 -29.41901970]
[-301.52224731 -25.99375534]
[-287.36444092 -30.62034416]
[-275.69567871 -19.93619156]
[-261.53787231 -24.56278038]
[-249.86912537 -13.87862587]
[-235.26544189 -10.45336342]
[-220.66175842 -7.02810001]
[-206.05807495 -3.60283709]
[-191.45439148 -0.17757413]
[-176.85070801 3.24768901]
[-162.24702454 6.67295218]
[-159.76010132 5.24788141]
[-156.54071045 4.75575256]
[-152.95404053 5.48758793]
[-149.46606445 7.59218502]
[-146.58959961 11.04458523]
[-132.32374573 15.67984009]
[-118.05790710 20.31509399]
[-103.74430084 24.80070686]
[-89.38450623 29.13618469]
[-74.98010254 33.32104874]
[-60.53266144 37.35484695]
[-46.08522415 41.38864517]
[-31.63778496 45.42244339]
[-17.29863930 41.39278030]
[-6.08754396 52.55619812]
[8.35989475 56.58999634]
[15.69667053 55.35127258]
[23.06597900 60.86250687]
[37.42577362 65.19798279]
[44.78688049 64.11318207]
[52.03915405 69.77754211]
[66.30500031 74.41279602]
[80.57084656 79.04804993]
[94.83670044 83.68330383]
[109.44038391 80.25804138]
[120.15747070 69.76309204]
[130.87455750 59.26814270]
[137.96078491 43.86613846]
[154.72253418 46.41173172]
[156.91653442 63.22311783]
[141.36950684 69.98522949]
[130.65242004 80.48018646]
[119.93533325 90.97513580]
[120.71929169 98.43404388]
[135.15597534 94.36190796]
[148.31947327 87.17008209]
[161.60340881 94.13693237]
[163.17137146 109.05475616]
[151.62623596 118.63128662]
[137.25506592 114.33347321]
[122.28722382 113.35187531]
[123.07118225 120.81079102]
[135.73609924 128.84819031]
[148.40101624 136.88558960]
[161.06594849 144.92298889]
[170.05317688 146.90037537]
[173.90946960 153.26368713]
[186.40328979 161.56455994]
[198.89710999 169.86543274]
[211.39093018 178.16630554]
[227.16714478 179.35864258]
[233.48620605 192.84635925]
[245.98001099 201.14723206]
[258.47384644 209.44810486]
[270.96765137 217.74897766]
[286.74386597 218.94131470]
[293.06292725 232.42904663]
[305.55673218 240.72991943]
[318.05056763 249.03079224]
[334.44241333 249.51992798]
[341.97543335 264.08651733]
[332.90026855 277.74572754]
[316.55270386 276.44610596]
[309.74969482 261.52462769]
[297.25585938 253.22373962]
[284.76205444 244.92286682]
[269.87948608 244.32426453]
[262.66677856 230.24279785]
[250.17295837 221.94192505]
[237.67913818 213.64105225]
[225.18533325 205.34017944]
[210.30274963 204.74157715]
[203.09005737 190.66012573]
[190.59623718 182.35925293]
[178.10241699 174.05838013]
[165.60859680 165.75750732]
[153.02853394 157.58792114]
[140.36361694 149.55050659]
[127.69869995 141.51310730]
[115.03378296 133.47570801]
[101.79097748 132.19917297]
[91.49323273 126.46788788]
[85.36062622 118.19573975]
[83.65670776 109.50461578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[3 87]
[4 86]
[5 84]
[6 83]
[7 81]
[8 80]
[10 78]
[11 77]
[12 76]
[13 75]
[15 74]
[16 73]
[18 72]
[19 71]
[20 70]
[21 65]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[29 57]
[31 55]
[32 54]
[33 53]
[34 51]
[36 49]
[37 47]
[38 46]
[39 45]
[90 98]
[91 97]
[92 96]
[107 145]
[108 144]
[109 143]
[110 142]
[112 141]
[113 140]
[114 139]
[115 138]
[117 136]
[118 135]
[119 134]
[120 133]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
