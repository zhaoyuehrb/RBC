%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGAGUCGGGCGGGGCGCCGGGCAGGUUCCUCUGCGUUCCGCGGCGGCGGCAGCGGCGGCGACGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[100.72509003 118.87242889]
[100.73632050 114.30500793]
[88.19817352 108.11740112]
[86.90483093 94.19551849]
[78.40430450 81.83667755]
[63.11887360 78.83779907]
[54.67418671 66.18308258]
[57.62735367 51.62923431]
[49.12682724 39.27038956]
[40.62630081 26.91154480]
[32.12577438 14.55270004]
[15.40205383 7.19731522]
[14.36165524 -10.18738937]
[5.33729410 -22.16908073]
[-3.68706703 -34.15077209]
[-12.71142769 -46.13246155]
[-21.73578835 -58.11415100]
[-30.76014900 -70.09584045]
[-39.78451157 -82.07752991]
[-48.80887222 -94.05922699]
[-57.83323288 -106.04091644]
[-72.31614685 -112.40926361]
[-73.79277802 -127.23049164]
[-82.81713867 -139.21217346]
[-91.84150696 -151.19387817]
[-107.46592712 -151.83528137]
[-118.98775482 -162.40795898]
[-120.96672821 -177.91981506]
[-112.46844482 -191.04661560]
[-97.50552368 -195.59030151]
[-83.14300537 -189.40547180]
[-76.16242981 -175.41241455]
[-79.85980988 -160.21823120]
[-70.83544922 -148.23654175]
[-61.81109238 -136.25485229]
[-47.97366333 -130.74351501]
[-45.85154343 -115.06527710]
[-36.82718277 -103.08358765]
[-27.80282021 -91.10189056]
[-18.77845955 -79.12020111]
[-9.75409794 -67.13851166]
[-0.72973740 -55.15682220]
[8.29462337 -43.17513275]
[17.31898499 -31.19344139]
[26.34334564 -19.21175003]
[38.45404053 -17.12958908]
[46.04122543 -6.95334911]
[44.48461914 6.05217314]
[52.98514557 18.41101837]
[61.48567200 30.76986313]
[69.98619843 43.12870789]
[84.63346100 45.57681656]
[93.43025970 57.98934937]
[90.76315308 73.33615112]
[99.26367950 85.69499207]
[111.80182648 91.88259888]
[113.09516907 105.80448151]
[122.87364960 117.17906952]
[138.23336792 120.97246552]
[142.22694397 135.32170105]
[153.17031860 145.58049011]
[169.25379944 148.78257751]
[174.26550293 164.39715576]
[163.04980469 176.36128235]
[147.14445496 172.36727905]
[142.91151428 156.52384949]
[131.96815491 146.26506042]
[117.39118958 143.20544434]
[112.61486053 128.12243652]
[109.99897766 128.44834900]
[107.08734894 127.72766113]
[104.28302765 125.84407043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[4 55]
[5 54]
[8 51]
[9 50]
[10 49]
[11 48]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 35]
[24 34]
[25 33]
[58 69]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
