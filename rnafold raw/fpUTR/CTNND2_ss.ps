%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCGGGAGCCGCCUCUCGCCCGCGGCGCUCGCCCCUGCCGCCCGCCAGCAUCCCUUGUCCCGCGGCCGCGCUCAGACAACAAAAGCGGAAGAUGCUGCAGUUGGGCAAGGUCAGGACCUUGCCCUGAAGCCGGGCGGCGCCGCGCACGCCUCUUCCCGGACUGAGGAGCUGUCGCCGGCGGAGGGUGC\
) } def
/len { sequence length } bind def

/coor [
[-112.63467407 492.38955688]
[-119.95591736 505.48150635]
[-127.27716064 518.57348633]
[-134.59840393 531.66540527]
[-141.91964722 544.75738525]
[-149.24089050 557.84936523]
[-156.45422363 571.00109863]
[-163.55915833 584.21166992]
[-164.87213135 593.26885986]
[-170.89112854 597.57971191]
[-178.21237183 610.67169189]
[-171.58529663 624.70239258]
[-174.50399780 639.94250488]
[-185.84619141 650.53186035]
[-201.25056458 652.39862061]
[-214.79383850 644.82501221]
[-221.26831055 630.72320557]
[-218.18444824 615.51568604]
[-206.72805786 605.04998779]
[-191.30433655 603.35040283]
[-183.98307800 590.25848389]
[-176.76976013 577.10675049]
[-169.66482544 563.89611816]
[-169.26478577 556.50347900]
[-162.33285522 550.52807617]
[-155.01161194 537.43615723]
[-147.69036865 524.34417725]
[-140.36912537 511.25222778]
[-133.04788208 498.16027832]
[-125.72663116 485.06829834]
[-128.71420288 473.33547974]
[-122.70772552 462.36373901]
[-110.45286560 458.30560303]
[-102.91728210 445.33584595]
[-95.48861694 432.30453491]
[-88.16737366 419.21258545]
[-80.84612274 406.12063599]
[-73.52487946 393.02865601]
[-73.00330353 385.64355469]
[-65.97402954 379.78302002]
[-58.43844604 366.81323242]
[-50.90286255 353.84347534]
[-43.36727905 340.87368774]
[-35.83169556 327.90393066]
[-36.12793732 313.01226807]
[-22.50504684 304.96694946]
[-14.96946335 291.99716187]
[-7.64821863 278.90521240]
[-0.54329264 265.69461060]
[6.56163311 252.48399353]
[13.66655922 239.27339172]
[14.06660271 231.88072205]
[20.99853325 225.90534973]
[28.31977844 212.81340027]
[35.64102173 199.72143555]
[29.23952675 186.29910278]
[32.00181198 171.50607300]
[43.07456589 161.05392456]
[58.35532379 159.10337830]
[65.67656708 146.01142883]
[72.99781799 132.91946411]
[80.31906128 119.82750702]
[66.37990570 98.21612549]
[75.35981750 69.25825500]
[68.91514587 55.71328354]
[62.47047043 42.16831207]
[56.02579498 28.62334442]
[49.58112335 15.07837582]
[29.35952759 9.37073612]
[20.02495193 -9.12602520]
[27.23889923 -28.23543549]
[19.91765404 -41.32739258]
[12.59640980 -54.41935349]
[5.27516508 -67.51130676]
[-10.02311325 -67.04093170]
[-23.78258705 -73.74433136]
[-32.84142685 -86.08110046]
[-35.11798096 -101.21635437]
[-30.08910942 -115.67211914]
[-18.91041374 -126.12656403]
[-4.15067673 -130.17732239]
[10.79842377 -126.89358521]
[22.50169373 -117.02991486]
[28.26980782 -102.85291290]
[26.77729416 -87.62034607]
[18.36712265 -74.83255768]
[25.68836784 -61.74059677]
[33.00961304 -48.64863968]
[40.33085632 -35.55667877]
[49.71689987 -35.90565109]
[58.63694763 -32.78400421]
[65.84510040 -26.58291435]
[70.31827545 -18.12669563]
[71.40127563 -8.56340408]
[68.90248108 0.79099470]
[63.12609100 8.63370228]
[69.57076263 22.17867088]
[76.01544189 35.72364044]
[82.46011353 49.26860809]
[88.90478516 62.81357956]
[96.36196136 63.61389923]
[97.96285248 48.69956970]
[112.87715149 50.30070496]
[111.27631378 65.21453857]
[118.73348999 66.01485443]
[127.90563965 54.14591599]
[137.07778931 42.27697754]
[146.24993896 30.40803719]
[155.42207336 18.53909874]
[164.59422302 6.67015839]
[173.76637268 -5.19878149]
[182.93852234 -17.06772041]
[192.11067200 -28.93666077]
[193.76948547 -45.25169754]
[208.83697510 -51.72491455]
[221.81300354 -41.69721985]
[219.34895325 -25.48424911]
[203.97959900 -19.76451492]
[194.80746460 -7.89557457]
[185.63531494 3.97336483]
[176.46316528 15.84230423]
[167.29101562 27.71124458]
[158.11886597 39.58018494]
[148.94673157 51.44912338]
[139.77458191 63.31806183]
[130.60243225 75.18700409]
[129.72348022 84.18836975]
[126.71811676 91.83838654]
[141.71354675 91.46834564]
[156.70898438 91.09829712]
[171.70442200 90.72824860]
[177.56063843 87.60083008]
[183.25866699 87.87243652]
[187.19731140 90.60083771]
[202.19680786 90.72419739]
[217.19630432 90.84755707]
[232.19580078 90.97091675]
[247.19528198 91.09427643]
[262.19528198 91.09427643]
[277.19479370 90.97091675]
[292.19427490 90.84755707]
[307.98315430 84.67115784]
[318.28897095 98.13320160]
[308.20596313 111.76292419]
[292.31762695 105.84704590]
[277.31814575 105.97040558]
[262.31863403 106.09376526]
[255.64450073 109.29807281]
[247.07192993 106.09376526]
[232.07243347 105.97040558]
[217.07293701 105.84704590]
[202.07345581 105.72368622]
[187.07395935 105.60032654]
[172.07446289 105.72368622]
[157.07902527 106.09373474]
[142.08358765 106.46377563]
[127.08815765 106.83382416]
[120.10060120 119.40193939]
[107.78744507 126.82955933]
[93.41101837 127.14875031]
[86.08977509 140.24070740]
[78.76853180 153.33267212]
[71.44728088 166.42462158]
[77.78567505 180.46496582]
[74.67762756 195.37112427]
[63.52023697 205.46946716]
[48.73298264 207.04267883]
[41.41173553 220.13464355]
[34.09049225 233.22659302]
[26.87716293 246.37832642]
[19.77223587 259.58892822]
[12.66730976 272.79953003]
[5.56238413 286.01013184]
[5.37907791 292.64657593]
[2.32121444 297.46224976]
[-1.99969137 299.53274536]
[-9.53527451 312.50253296]
[-9.77802944 328.32186890]
[-22.86192513 335.43951416]
[-30.39750862 348.40927124]
[-37.93309021 361.37905884]
[-45.46867371 374.34881592]
[-53.00425720 387.31860352]
[-60.43292236 400.34991455]
[-67.75416565 413.44186401]
[-75.07540894 426.53381348]
[-82.39665985 439.62579346]
[-83.85842133 448.66015625]
[-89.94750977 452.87142944]
[-97.48309326 465.84118652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 23]
[8 22]
[10 21]
[11 20]
[33 190]
[34 189]
[35 187]
[36 186]
[37 185]
[38 184]
[40 183]
[41 182]
[42 181]
[43 180]
[44 179]
[46 177]
[47 176]
[48 173]
[49 172]
[50 171]
[51 170]
[53 169]
[54 168]
[55 167]
[59 163]
[60 162]
[61 161]
[62 160]
[64 100]
[65 99]
[66 98]
[67 97]
[68 96]
[71 89]
[72 88]
[73 87]
[74 86]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
[128 157]
[129 156]
[130 155]
[131 154]
[134 153]
[135 152]
[136 151]
[137 150]
[138 149]
[139 147]
[140 146]
[141 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
