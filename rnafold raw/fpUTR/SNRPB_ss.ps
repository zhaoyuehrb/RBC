%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCCAGGGCUAGUGAGCUGGACCGGAAGUAGGUUUCUACCCGACCGCAUUUUACGUGGUGCUGCAUUUCCGGUAGCGGCGGCGGGAAAUCGGCUGUGGGAGAGAGGCUAGGCCUCUGAGGAGGCGAAUCCGGCGGGUAUCAGAGCCAUCAGAACCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[92.66202545 482.00952148]
[85.48289490 468.75344849]
[81.68543243 454.16430664]
[81.49043274 439.09033203]
[84.90923309 424.40783691]
[91.74305725 410.97048950]
[101.59460449 399.55950928]
[113.89111328 390.83831787]
[127.91768646 385.31393433]
[125.91232300 370.44860840]
[123.90695953 355.58325195]
[121.90159607 340.71789551]
[112.45700836 333.11306763]
[110.68801117 320.71142578]
[118.08837891 310.11029053]
[116.36812592 295.20925903]
[114.64787292 280.30822754]
[112.78498077 265.42434692]
[110.77961731 250.55900574]
[108.77425385 235.69366455]
[99.40489197 224.11505127]
[105.22777557 209.40435791]
[101.19829559 203.16685486]
[103.32920074 194.23536682]
[101.60894775 179.33433533]
[99.88869476 164.43330383]
[98.16844940 149.53227234]
[96.44819641 134.63124084]
[80.74158478 129.00088501]
[69.45888519 116.70864105]
[65.19189453 100.57819366]
[68.92079926 84.31493378]
[79.78900909 71.65473175]
[73.91628265 57.85215759]
[68.04356384 44.04957962]
[62.17084503 30.24700165]
[56.29812622 16.44442368]
[50.42540359 2.64184546]
[44.55268478 -11.16073227]
[29.59004784 -21.85685730]
[32.33653259 -39.16947937]
[26.20050240 -52.85703659]
[20.06447411 -66.54458618]
[13.92844391 -80.23214722]
[-2.92655969 -91.23388672]
[-0.23901914 -110.35498047]
[-6.89481688 -123.79747009]
[-13.55061436 -137.23994446]
[-20.19408989 -143.57844543]
[-20.20238113 -151.00427246]
[-26.59946823 -164.57177734]
[-32.99655533 -178.13929749]
[-39.39364243 -191.70680237]
[-53.99574280 -197.13049316]
[-60.29002380 -210.98100281]
[-55.02937698 -224.86845398]
[-61.42646408 -238.43595886]
[-67.82355499 -252.00346375]
[-80.70733643 -261.18597412]
[-79.13677979 -275.99755859]
[-85.53386688 -289.56506348]
[-92.06060791 -303.07067871]
[-98.71640015 -316.51315308]
[-105.37220001 -329.95562744]
[-112.02799988 -343.39813232]
[-118.68379974 -356.84060669]
[-133.92085266 -360.35711670]
[-143.29141235 -372.87619019]
[-142.37097168 -388.48666382]
[-131.59414673 -399.81774902]
[-116.04941559 -401.51928711]
[-103.07652283 -392.78784180]
[-98.80088043 -377.74612427]
[-105.24131012 -363.49639893]
[-98.58551788 -350.05392456]
[-91.92971802 -336.61145020]
[-85.27391815 -323.16894531]
[-78.61812592 -309.72647095]
[-72.80487823 -305.10595703]
[-71.96635437 -295.96215820]
[-65.56926727 -282.39465332]
[-53.14304352 -274.18255615]
[-54.25604248 -258.40054321]
[-47.85895538 -244.83303833]
[-41.46186829 -231.26553345]
[-27.40080643 -226.48828125]
[-20.71997643 -212.82003784]
[-25.82613373 -198.10388184]
[-19.42904663 -184.53637695]
[-13.03195953 -170.96887207]
[-6.63487291 -157.40136719]
[-0.10813092 -143.89575195]
[6.54766655 -130.45326233]
[13.20346451 -117.01078033]
[23.19297981 -114.60473633]
[30.34044838 -106.91929626]
[32.08866119 -96.34736633]
[27.61599731 -86.36817169]
[33.75202942 -72.68061829]
[39.88805771 -58.99306488]
[46.02408600 -45.30551147]
[57.23669052 -40.68909073]
[62.44783020 -29.29723930]
[58.35526276 -17.03345299]
[64.22798157 -3.23087478]
[70.10070038 10.57170296]
[75.97342682 24.37428093]
[81.84614563 38.17686081]
[87.71886444 51.97943497]
[93.59158325 65.78201294]
[109.72429657 66.57282257]
[123.76369476 74.55937958]
[132.68756104 88.02245331]
[147.55290222 86.01708984]
[162.41825867 84.01172638]
[177.28359985 82.00636292]
[192.14894104 80.00099945]
[204.78948975 69.55358124]
[220.06097412 75.52970123]
[222.25338745 91.78163147]
[209.11137390 101.59078979]
[194.15431213 94.86634064]
[179.28895569 96.87170410]
[164.42361450 98.87706757]
[149.55827332 100.88243103]
[134.69291687 102.88779449]
[132.43222046 112.65265656]
[127.48304749 121.36867523]
[120.25568390 128.31335449]
[111.34922791 132.91099548]
[113.06948090 147.81202698]
[114.78972626 162.71305847]
[116.50997925 177.61408997]
[118.23023224 192.51512146]
[120.09312439 207.39898682]
[129.60592651 220.04087830]
[123.63960266 233.68829346]
[125.64496613 248.55364990]
[127.65032959 263.41897583]
[131.91677856 271.54977417]
[129.54890442 278.58798218]
[131.26916504 293.48901367]
[132.98941040 308.39004517]
[144.30728149 322.88809204]
[136.76695251 338.71255493]
[138.77230835 353.57788086]
[140.77767944 368.44323730]
[142.78303528 383.30859375]
[157.77206421 384.91870117]
[171.93997192 390.06979370]
[184.46305847 398.46240234]
[194.61325073 409.60855103]
[201.80041504 422.86029053]
[205.60671997 437.44711304]
[205.81086731 452.52096558]
[202.40097046 467.20553589]
[195.57528687 480.64700317]
[185.73066711 492.06396484]
[173.43943787 500.79260254]
[159.41621399 506.32550049]
[144.47628784 508.34091187]
[129.48823547 506.72171021]
[115.32345581 501.56204224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 148]
[10 147]
[11 146]
[12 145]
[15 143]
[16 142]
[17 141]
[18 139]
[19 138]
[20 137]
[22 135]
[24 134]
[25 133]
[26 132]
[27 131]
[28 130]
[33 110]
[34 109]
[35 108]
[36 107]
[37 106]
[38 105]
[39 104]
[41 101]
[42 100]
[43 99]
[44 98]
[46 94]
[47 93]
[48 92]
[50 91]
[51 90]
[52 89]
[53 88]
[56 85]
[57 84]
[58 83]
[60 81]
[61 80]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
