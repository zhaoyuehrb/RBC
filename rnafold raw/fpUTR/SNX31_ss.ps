%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGUCCCCGGCCGGCGAGAGCGGGCGCCGGGGUUCGCUCUGAGUCGCGUGGCAGGCCGCGCUGCGUCCACCGCUGCCGAGUUCAGAGCCGCGCACCGCCCGCCGCCGCAGGUCGGGUUCCCAGCGCUACUCCCAAGACACCGCUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[240.76310730 426.61340332]
[235.82777405 417.92614746]
[232.84033203 408.38238525]
[231.93980408 398.41348267]
[233.17086792 388.47076416]
[236.48155212 379.00531006]
[241.72547913 370.44726562]
[248.66830444 363.18652344]
[240.99003601 350.30068970]
[233.31175232 337.41488647]
[225.63348389 324.52908325]
[217.95520020 311.64328003]
[210.27693176 298.75747681]
[202.59864807 285.87164307]
[189.43699646 278.89886475]
[189.01965332 263.08316040]
[181.34136963 250.19734192]
[173.66310120 237.31152344]
[157.91766357 229.62364197]
[157.73805237 211.23959351]
[151.48869324 207.20544434]
[149.76557922 198.16915894]
[142.08731079 185.28334045]
[134.40904236 172.39753723]
[126.73075867 159.51173401]
[119.05248260 146.62591553]
[111.37420654 133.74011230]
[103.69593048 120.85430145]
[91.09070587 119.21421814]
[81.69479370 110.65275574]
[78.89282227 98.25394440]
[83.69410706 86.48409271]
[70.14933014 78.30793762]
[70.58897400 63.41982269]
[63.17864609 50.37807846]
[50.93695450 46.18647385]
[45.04481888 35.11951065]
[48.19426727 23.39920235]
[41.05505753 10.20709610]
[33.91584396 -2.98500967]
[26.77663422 -16.17711639]
[19.63742256 -29.36922264]
[12.49821186 -42.56132889]
[5.35900116 -55.75343323]
[-1.78020966 -68.94554138]
[-9.05536652 -82.06316376]
[-16.46569252 -95.10491180]
[-23.87601852 -108.14665222]
[-30.88135910 -114.10894012]
[-31.30153847 -121.53539276]
[-38.44075012 -134.72749329]
[-45.57995987 -147.91960144]
[-52.71916962 -161.11170959]
[-59.85838318 -174.30381775]
[-77.48493195 -183.99880981]
[-76.27147675 -203.25994873]
[-83.94975281 -216.14575195]
[-97.66061401 -224.04023743]
[-97.52875519 -238.93426514]
[-105.20703125 -251.82006836]
[-112.88530731 -264.70587158]
[-126.18725586 -275.21752930]
[-119.76876068 -290.90954590]
[-102.91318512 -289.08584595]
[-99.99949646 -272.38415527]
[-92.32122040 -259.49835205]
[-84.64294434 -246.61253357]
[-71.48128510 -239.63973999]
[-71.06394196 -223.82403564]
[-63.38566971 -210.93821716]
[-53.22017670 -209.30818176]
[-45.49131775 -202.17761230]
[-42.94443512 -191.74798584]
[-46.66627502 -181.44302368]
[-39.52706528 -168.25091553]
[-32.38785553 -155.05882263]
[-25.24864388 -141.86671448]
[-18.10943222 -128.67460632]
[-10.83427525 -115.55697632]
[-3.42394924 -102.51523590]
[3.98637676 -89.47349548]
[10.06367874 -85.18453217]
[11.41189671 -76.08475494]
[18.55110741 -62.89264679]
[25.69031906 -49.70053864]
[32.82952881 -36.50843430]
[39.96873856 -23.31632614]
[47.10795212 -10.12422085]
[54.24716187 3.06788564]
[61.38637161 16.25999260]
[76.80065918 24.59198761]
[76.22039032 42.96775055]
[83.63071442 56.00949478]
[96.64546204 63.25282288]
[96.73584747 79.07376862]
[112.72035980 83.06617737]
[121.00723267 97.30596161]
[116.58174133 113.17602539]
[124.26001740 126.06183624]
[131.93829346 138.94764709]
[139.61656189 151.83345032]
[147.29484558 164.71926880]
[154.97311401 177.60507202]
[162.65139771 190.49087524]
[170.46241760 203.29666138]
[182.86688232 206.97879028]
[189.21131897 217.79281616]
[186.54890442 229.63325500]
[194.22718811 242.51905823]
[201.90545654 255.40487671]
[215.61631775 263.29934692]
[215.48446655 278.19338989]
[223.16273499 291.07919312]
[230.84100342 303.96499634]
[238.51928711 316.85079956]
[246.19755554 329.73660278]
[253.87583923 342.62243652]
[261.55410767 355.50823975]
[282.01733398 352.37609863]
[301.80859375 358.29605103]
[317.12570190 372.09155273]
[325.04284668 391.07687378]
[324.06936646 411.57989502]
[314.43032837 429.65231323]
[324.12481689 441.09857178]
[333.81930542 452.54483032]
[343.51379395 463.99108887]
[357.18127441 461.94750977]
[369.96643066 466.90023804]
[378.55349731 477.44964600]
[380.77261353 490.75997925]
[376.14746094 503.32110596]
[385.60333252 514.96527100]
[401.10620117 520.31250000]
[403.96075439 536.46130371]
[391.23046875 546.79913330]
[376.01116943 540.69140625]
[373.95916748 524.42114258]
[364.50329590 512.77697754]
[348.17788696 514.19433594]
[334.07138062 505.53436279]
[327.82290649 490.02752686]
[332.06753540 473.68557739]
[322.37304688 462.23931885]
[312.67855835 450.79306030]
[302.98406982 439.34680176]
[293.99703979 443.56436157]
[284.31201172 445.78616333]
[274.36706543 445.90777588]
[264.61273193 443.91983032]
[255.49186707 439.90863037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 118]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[16 110]
[17 109]
[18 108]
[20 105]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[32 95]
[34 93]
[35 92]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[46 81]
[47 80]
[48 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[56 70]
[57 69]
[59 67]
[60 66]
[61 65]
[124 146]
[125 145]
[126 144]
[127 143]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
