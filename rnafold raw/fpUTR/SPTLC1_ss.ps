%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCCGCCGCCCCGCCCUCUGCGGAGGUGAUAACGACACUGAGCAGCGACGCGCACUUUUGGGACGCGCUUGUGACCCGCCUUCCGGAAGGAAGCGGCUAACU\
) } def
/len { sequence length } bind def

/coor [
[62.20773697 491.35369873]
[48.66437149 484.31524658]
[39.52296448 472.09243774]
[36.59855652 457.11209106]
[40.47178650 442.34860229]
[50.37362289 430.73324585]
[64.33805084 424.57226562]
[64.78678131 409.57897949]
[65.23551178 394.58569336]
[65.68424225 379.59240723]
[66.13298035 364.59912109]
[56.55336761 358.05755615]
[51.33522797 347.56222534]
[51.91373062 335.73446655]
[58.25942230 325.59338379]
[68.85575104 319.78524780]
[70.20034027 304.84561157]
[63.63505173 291.47601318]
[72.57823944 278.42495728]
[73.92282867 263.48535156]
[75.26741791 248.54574585]
[76.61200714 233.60612488]
[74.03464508 226.54679871]
[78.22684479 218.24197388]
[80.01776123 203.34927368]
[81.80867004 188.45655823]
[83.59958649 173.56385803]
[85.39050293 158.67115784]
[87.18141174 143.77845764]
[88.97232819 128.88574219]
[79.82010651 123.42579651]
[73.06529236 115.18280792]
[69.51038361 105.13607788]
[69.57769775 94.47916412]
[73.25924683 84.47814178]
[80.11764526 76.32114410]
[89.33811188 70.97724915]
[99.82523346 69.08130646]
[103.38143921 54.50895691]
[106.93764496 39.93660736]
[105.93086243 30.68831062]
[110.82435608 24.98473740]
[114.81490326 10.52529526]
[118.80545807 -3.93414783]
[122.79601288 -18.39359093]
[122.06635284 -27.66786575]
[127.12827301 -33.22249603]
[131.54960632 -47.55608749]
[135.97093201 -61.88967896]
[132.64505005 -77.35736084]
[143.79002380 -87.23858643]
[140.46414185 -102.70626068]
[151.60913086 -112.58748627]
[156.03045654 -126.92108154]
[148.42495728 -140.77502441]
[152.92341614 -155.92558289]
[166.85699463 -163.38418579]
[181.95915222 -158.72579956]
[189.27001953 -144.71414185]
[184.45222473 -129.66207886]
[170.36404419 -122.49974823]
[165.94271851 -108.16616058]
[169.58485413 -93.72371674]
[158.12362671 -82.81725311]
[161.76574707 -68.37480927]
[150.30451965 -57.46834946]
[145.88319397 -43.13475800]
[141.46186829 -28.80116653]
[137.25544739 -14.40303802]
[133.26490784 0.05640487]
[129.27435303 14.51584816]
[125.28379822 28.97529030]
[121.50999451 43.49281311]
[117.95378876 58.06516266]
[114.39758301 72.63751221]
[127.79449463 86.45516968]
[130.42230225 105.52083588]
[121.26286316 122.44742584]
[103.86502838 130.67666626]
[102.07411957 145.56936646]
[100.28320312 160.46206665]
[98.49228668 175.35476685]
[96.70137787 190.24748230]
[94.91046143 205.14018250]
[93.11955261 220.03288269]
[91.55162048 234.95071411]
[90.20703125 249.89033508]
[88.86244202 264.82995605]
[87.51785278 279.76956177]
[93.98696899 294.20773315]
[85.13995361 306.19021606]
[83.79536438 321.12982178]
[96.47471619 335.03063965]
[95.16106415 353.48394775]
[81.12626648 365.04785156]
[80.67752838 380.04113770]
[80.22879791 395.03442383]
[79.78006744 410.02770996]
[79.33133698 425.02099609]
[92.90231323 432.00607300]
[102.09178162 444.19281006]
[105.07516479 459.16149902]
[101.26010132 473.94015503]
[91.40408325 485.59439087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[16 92]
[17 91]
[19 89]
[20 88]
[21 87]
[22 86]
[24 85]
[25 84]
[26 83]
[27 82]
[28 81]
[29 80]
[30 79]
[38 75]
[39 74]
[40 73]
[42 72]
[43 71]
[44 70]
[45 69]
[47 68]
[48 67]
[49 66]
[51 64]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
