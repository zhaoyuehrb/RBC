%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGCACCAGGCAGGCGGUUGGAGUACGGGGCGGGGGUCGGCCGAGGGCGCGGGGCCCCGGGGCUCCGGGCUCGCCCCCGCCGCUCGGGGCAGGCGCGCCGAUGGCGUUUCUGAGGUGACGCCGCCCACACCGGGCUUCUCCGGGGGCGGAGGAAACACCU\
) } def
/len { sequence length } bind def

/coor [
[165.46156311 189.44425964]
[156.78570557 177.20785522]
[148.10984802 164.97146606]
[139.43399048 152.73506165]
[130.75813293 140.49865723]
[122.08227539 128.26225281]
[105.22154236 132.51795959]
[89.85806274 128.23674011]
[81.41963959 140.63806152]
[72.98121643 153.03939819]
[64.54279327 165.44073486]
[63.17620468 181.20280457]
[49.61947632 187.37243652]
[48.94924545 203.75788879]
[34.30029297 211.12947083]
[20.74220848 201.90394592]
[22.22238541 185.57173157]
[37.21814346 178.93402100]
[37.98116302 164.05897522]
[52.14146423 157.00230408]
[60.57988739 144.60098267]
[69.01831055 132.19964600]
[77.45673370 119.79831696]
[72.43441010 113.96021271]
[68.94987488 106.84262848]
[67.32868195 98.85701752]
[67.78491211 90.49713898]
[70.40051270 82.30852509]
[75.11322021 74.85295868]
[59.39723587 73.03131866]
[53.62205505 59.30191040]
[41.46982956 50.50853729]
[29.31760216 41.71516418]
[17.16537666 32.92179108]
[5.01315212 24.12841797]
[-7.13907337 15.33504391]
[-19.29129791 6.54167080]
[-31.44352341 -2.25170279]
[-43.59574890 -11.04507637]
[-59.31173325 -12.86671925]
[-65.08691406 -26.59612465]
[-77.23914337 -35.38949966]
[-89.39136505 -44.18287277]
[-101.54359436 -52.97624588]
[-116.94972992 -50.67655563]
[-129.14855957 -59.76739883]
[-131.24601746 -74.46897125]
[-143.39823914 -83.26234436]
[-155.55046082 -92.05571747]
[-167.70268250 -100.84909058]
[-183.41867065 -102.67073822]
[-189.19384766 -116.40013885]
[-204.90983582 -118.22178650]
[-210.68501282 -131.95118713]
[-222.83724976 -140.74456787]
[-239.21380615 -145.13142395]
[-239.53187561 -162.08238220]
[-223.33140564 -167.08052063]
[-214.04386902 -152.89678955]
[-201.89164734 -144.10340881]
[-187.04487610 -142.91073608]
[-180.40048218 -128.55236816]
[-165.55371094 -127.35968781]
[-158.90931702 -113.00131989]
[-146.75709534 -104.20794678]
[-134.60485840 -95.41457367]
[-122.45263672 -86.62120056]
[-107.83238983 -89.22580719]
[-95.38304138 -80.48118591]
[-92.75022125 -65.12847137]
[-80.59799194 -56.33509827]
[-68.44577026 -47.54172516]
[-56.29354095 -38.74834824]
[-41.44676590 -37.55566788]
[-34.80237579 -23.19730186]
[-22.65015030 -14.40392780]
[-10.49792576 -5.61055470]
[1.65430009 3.18281865]
[13.80652523 11.97619247]
[25.95875168 20.76956558]
[38.11097717 29.56293869]
[50.26320267 38.35631180]
[62.41542816 47.14968491]
[77.26220703 48.34236908]
[83.90659332 62.70073318]
[98.53964996 59.40319824]
[105.74567413 46.24747086]
[112.95170593 33.09174347]
[120.15773010 19.93601799]
[120.00137329 4.11558390]
[132.90156555 -3.32983613]
[140.10760498 -16.48556328]
[139.19813538 -32.85947037]
[153.06982422 -41.60636139]
[167.45268250 -33.72817612]
[167.55082703 -17.32932472]
[153.26332092 -9.27953339]
[146.05729675 3.87619305]
[146.72908020 18.75564194]
[133.31346130 27.14204597]
[126.10742950 40.29777527]
[118.90140533 53.45349884]
[111.69537354 66.60923004]
[126.23266602 75.89933777]
[134.73121643 91.04876709]
[149.06683350 86.63401794]
[163.40246582 82.21926880]
[177.73808289 77.80451965]
[192.07369995 73.38977051]
[206.40931702 68.97502136]
[211.30371094 54.25005722]
[223.93806458 45.24156189]
[239.45417786 45.41347885]
[251.88581848 54.69970703]
[256.45275879 69.52950287]
[251.39891052 84.20050049]
[238.66757202 93.07141113]
[223.15423584 92.73117828]
[210.82406616 83.31063843]
[196.48844910 87.72538757]
[182.15283203 92.14013672]
[167.81721497 96.55488586]
[153.48158264 100.96963501]
[139.14596558 105.38438416]
[134.31867981 119.58640289]
[142.99453735 131.82279968]
[151.67039490 144.05920410]
[160.34625244 156.29559326]
[169.02210999 168.53199768]
[177.69796753 180.76840210]
[191.17620850 181.49267578]
[201.61447144 189.73931885]
[205.32745361 202.31036377]
[201.17022705 214.53590393]
[209.60865784 226.93722534]
[228.30929565 229.72714233]
[238.89253235 245.00997925]
[235.05909729 262.87472534]
[243.96917725 274.94165039]
[252.87924194 287.00857544]
[261.78930664 299.07550049]
[270.69940186 311.14242554]
[279.60946655 323.20935059]
[288.51953125 335.27627563]
[303.75994873 341.33114624]
[305.86843872 357.59417725]
[292.67596436 367.33535767]
[277.75381470 360.53378296]
[276.45260620 344.18634033]
[267.54254150 332.11941528]
[258.63247681 320.05249023]
[249.72239685 307.98556519]
[240.81231689 295.91864014]
[231.90225220 283.85171509]
[222.99217224 271.78479004]
[211.55413818 272.56887817]
[201.05880737 267.66363525]
[194.18220520 258.19131470]
[192.73951721 246.45425415]
[197.20732117 235.37565613]
[188.76889038 222.97431946]
[172.14732361 220.55860901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[5 126]
[6 125]
[8 23]
[9 22]
[10 21]
[11 20]
[13 18]
[29 85]
[31 83]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[41 73]
[42 72]
[43 71]
[44 70]
[47 67]
[48 66]
[49 65]
[50 64]
[52 62]
[54 60]
[55 59]
[86 103]
[87 102]
[88 101]
[89 100]
[91 98]
[92 97]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
[110 119]
[134 161]
[135 160]
[138 155]
[139 154]
[140 153]
[141 152]
[142 151]
[143 150]
[144 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
