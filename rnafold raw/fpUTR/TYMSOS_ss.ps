%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAGGGGCCAAAGCCAGGACUUUGAGACCGGCGCGCGGUCAAGCCCAGGCAGCUCUCCCUAACCCUCCAGCACUGGGCAAACGCUGCCCG\
) } def
/len { sequence length } bind def

/coor [
[214.47766113 222.76277161]
[204.41589355 211.63800049]
[194.35412598 200.51321411]
[184.29234314 189.38842773]
[174.23057556 178.26365662]
[163.62397766 167.65704346]
[152.49919128 157.59527588]
[141.37442017 147.53350830]
[130.24963379 137.47174072]
[119.12484741 127.40996552]
[105.35935211 132.99005127]
[90.53535461 132.05442810]
[77.58067322 124.78789520]
[69.05392456 112.62562561]
[66.63918304 97.96972656]
[70.81337738 83.71482086]
[59.68859863 73.65304565]
[48.56381607 63.59127426]
[33.13882446 60.07271576]
[28.88968086 45.79706955]
[17.76489830 35.73529816]
[2.33990908 32.21673965]
[-1.90923607 17.94109535]
[-13.03401756 7.87932444]
[-24.15880013 -2.18244648]
[-29.67222214 -3.34132934]
[-33.67638016 -6.30467415]
[-35.72231674 -10.13366127]
[-35.82841110 -13.85205841]
[-45.89018250 -24.97684097]
[-55.95195389 -36.10162354]
[-66.01372528 -47.22640228]
[-76.07549286 -58.35118484]
[-91.96185303 -60.58794403]
[-99.99366760 -74.47569275]
[-94.00960541 -89.36093903]
[-78.60013580 -93.82499695]
[-65.58608246 -84.44342041]
[-64.95071411 -68.41295624]
[-54.88894272 -57.28817368]
[-44.82717133 -46.16339111]
[-34.76539993 -35.03861237]
[-24.70363045 -23.91382980]
[-14.09702778 -13.30722809]
[-2.97224665 -3.24545717]
[8.15253448 6.81631374]
[22.78180504 9.61518860]
[27.82666969 24.61051750]
[38.95145035 34.67229080]
[53.58072281 37.47116470]
[58.62558746 52.46649551]
[69.75036621 62.52826309]
[80.87515259 72.59003448]
[94.64064789 67.00994873]
[109.46464539 67.94557190]
[122.41932678 75.21210480]
[130.94607544 87.37437439]
[133.36080933 102.03027344]
[129.18661499 116.28517914]
[140.31140137 126.34695435]
[151.43618774 136.40872192]
[162.56095886 146.47048950]
[173.68574524 156.53227234]
[179.19917297 157.69114685]
[183.20332336 160.65449524]
[185.24926758 164.48347473]
[185.35536194 168.20187378]
[195.41712952 179.32666016]
[205.47889709 190.45144653]
[215.54067993 201.57621765]
[225.60244751 212.70100403]
[235.46249390 210.25891113]
[245.46012878 211.68728638]
[254.14015198 216.73364258]
[260.25588989 224.62216187]
[262.94824219 234.17263794]
[261.86608887 243.97698975]
[257.21148682 252.60685730]
[265.70071411 264.97348022]
[274.18991089 277.34011841]
[282.67910767 289.70672607]
[291.16833496 302.07336426]
[306.61480713 306.40759277]
[312.72390747 321.24197388]
[304.80920410 335.19680786]
[288.94223022 337.56713867]
[277.29473877 326.53466797]
[278.80169678 310.56256104]
[270.31250000 298.19592285]
[261.82327271 285.82931519]
[253.33407593 273.46267700]
[244.84486389 261.09606934]
[224.66104126 259.39761353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[16 53]
[17 52]
[18 51]
[20 49]
[21 48]
[23 46]
[24 45]
[25 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
