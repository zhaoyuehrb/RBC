%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGCCGGGGGCGGGGGGCGGCGGGCGACGGGGCGGGCGCAGGAUGAGGGCGGCCAUUGCUGGGGCUCCGCUUCGGGGAGGAGGACGCUGAGGAGGCGCCGAGCCGCGCAGCGCUGCGGGGGAGGCGCCCGCGCCGACGCGGGGCCC\
) } def
/len { sequence length } bind def

/coor [
[86.76171112 597.22937012]
[79.09954834 582.73034668]
[88.05294800 568.99102783]
[88.36708832 553.99432373]
[88.68122101 538.99761963]
[81.21215820 526.11108398]
[89.23677063 512.47595215]
[89.55091095 497.47924805]
[89.86504364 482.48254395]
[82.39598083 469.59603882]
[90.42059326 455.96090698]
[90.42059326 440.96090698]
[90.10646057 425.96420288]
[89.79232025 410.96749878]
[89.47818756 395.97079468]
[80.94648743 387.33709717]
[80.60037994 374.80221558]
[89.17416382 365.10842896]
[89.17416382 350.10842896]
[89.17416382 335.10842896]
[89.17416382 320.10842896]
[89.17416382 305.10842896]
[81.43686676 292.38116455]
[89.17416382 278.58099365]
[78.85261536 270.80377197]
[74.85502625 258.30908203]
[78.86254883 245.61297607]
[89.61936951 237.44149780]
[79.15691376 226.90238953]
[79.26185608 211.68911743]
[90.38717651 200.78659058]
[90.70130920 185.78988647]
[83.23224640 172.90336609]
[91.25685883 159.26824951]
[91.57099915 144.27154541]
[91.88513184 129.27484131]
[92.19927216 114.27812195]
[83.73078918 99.82962036]
[92.50000000 85.56163788]
[92.50000000 70.56163788]
[92.50000000 55.56164169]
[92.50000000 40.56164169]
[89.35395050 31.91393471]
[92.66036987 25.24832726]
[92.97450256 10.25161648]
[82.04624939 4.02802372]
[74.86457062 -6.20754385]
[72.75478363 -18.45850563]
[76.06014252 -30.36717033]
[84.08775330 -39.66846085]
[95.25274658 -44.62072754]
[96.19460297 -59.59112930]
[97.13646698 -74.56153107]
[98.07832336 -89.53192902]
[95.48147583 -98.36011505]
[99.19990540 -104.80495453]
[100.45507050 -119.75234985]
[97.94991302 -125.98651886]
[98.87852478 -131.67784119]
[102.08866882 -135.29501343]
[96.14199829 -149.95610046]
[105.41343689 -161.61328125]
[107.29344177 -176.49499512]
[101.34677124 -191.15609741]
[110.61820984 -202.81326294]
[112.49820709 -217.69499207]
[103.08491516 -230.10577393]
[105.20349121 -245.17117310]
[117.09329224 -254.06883240]
[118.97328949 -268.95056152]
[120.85328674 -283.83227539]
[114.90661621 -298.49337769]
[124.17806244 -310.15054321]
[126.05805969 -325.03225708]
[127.93805695 -339.91397095]
[129.81805420 -354.79568481]
[125.80456543 -371.26773071]
[140.52182007 -379.68429565]
[152.68360901 -367.87213135]
[144.69976807 -352.91571045]
[142.81977844 -338.03396606]
[140.93977356 -323.15225220]
[139.05978394 -308.27053833]
[145.14091492 -294.67388916]
[135.73501587 -281.95227051]
[133.85501099 -267.07055664]
[131.97500610 -252.18882751]
[141.27851868 -240.61383057]
[139.58392334 -225.49487305]
[127.37992859 -215.81498718]
[125.49993134 -200.93327332]
[131.58106995 -187.33660889]
[122.17515564 -174.61500549]
[120.29515839 -159.73327637]
[126.37629700 -146.13662720]
[116.97039032 -133.41500854]
[115.40246582 -118.49718475]
[114.14729309 -103.54978943]
[113.04872131 -88.59007263]
[112.10686493 -73.61967468]
[111.16500854 -58.64927292]
[110.22315216 -43.67887115]
[124.31643677 -33.12403488]
[129.34489441 -16.08667755]
[123.13294220 0.72252631]
[107.97121429 10.56575298]
[107.65707397 25.56246376]
[107.50000000 40.56164169]
[107.50000000 55.56164169]
[107.50000000 70.56163788]
[107.50000000 85.56163788]
[115.24470520 94.31535339]
[115.12231445 106.00265503]
[107.19598389 114.59226227]
[106.88184357 129.58897400]
[106.56771088 144.58567810]
[106.25357056 159.58239746]
[113.70016479 173.54158020]
[105.69802094 186.10401917]
[105.38388824 201.10072327]
[116.04289246 212.45956421]
[115.51068115 227.66389465]
[104.61607361 237.75563049]
[116.94399261 250.12229919]
[116.55472565 267.24270630]
[104.17416382 278.58099365]
[111.91146851 292.38116455]
[104.17416382 305.10842896]
[104.17416382 320.10842896]
[104.17416382 335.10842896]
[104.17416382 350.10842896]
[104.17416382 365.10842896]
[113.75708008 380.79669189]
[104.47489929 395.65664673]
[104.78903198 410.65335083]
[105.10316467 425.65005493]
[105.41730499 440.64678955]
[108.56038666 446.58493042]
[108.23176575 452.34213257]
[105.41730499 456.27505493]
[112.86389923 470.23422241]
[104.86175537 482.79669189]
[104.54762268 497.79339600]
[104.23348236 512.79010010]
[111.68007660 526.74926758]
[103.67793274 539.31170654]
[103.36380005 554.30841064]
[103.04965973 569.30517578]
[111.41986847 583.40734863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 148]
[4 147]
[5 146]
[7 144]
[8 143]
[9 142]
[11 140]
[12 137]
[13 136]
[14 135]
[15 134]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[24 126]
[28 123]
[31 120]
[32 119]
[34 117]
[35 116]
[36 115]
[37 114]
[39 111]
[40 110]
[41 109]
[42 108]
[44 107]
[45 106]
[51 102]
[52 101]
[53 100]
[54 99]
[56 98]
[57 97]
[60 96]
[62 94]
[63 93]
[65 91]
[66 90]
[69 87]
[70 86]
[71 85]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
