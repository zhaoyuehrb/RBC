%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCGUAGUUUCCUGAUAACCAUUCAGUCAUCUAUUUCAACACCCUGACAUGACAUAAAGGCAGGCACGGAACCACACGUUCACCAUACAGACACACGCCACUUUGCUGGAGCAUUCACUAGGCGAGGCGCUCCAUCGGACUCACUAGCUGCACUC\
) } def
/len { sequence length } bind def

/coor [
[113.21142578 243.50164795]
[108.18383789 228.82162476]
[112.77729797 214.00003052]
[125.22553253 204.73606873]
[124.92347717 189.73910522]
[124.62142181 174.74214172]
[124.31936646 159.74519348]
[124.01731110 144.74822998]
[123.71525574 129.75126648]
[90.58837128 131.98371887]
[72.87022400 109.15475464]
[57.89759064 110.06043243]
[42.92495728 110.96611023]
[27.95232391 111.87178802]
[24.11400414 126.49111938]
[15.95597649 139.19108582]
[4.28777075 148.73474121]
[-9.73994255 154.19718933]
[-24.74882126 155.05519104]
[-39.26827621 151.23730469]
[-51.87957764 143.12957764]
[-61.35446548 131.53662109]
[-66.77477264 117.60172272]
[-81.74740601 118.50740051]
[-96.72003937 119.41307831]
[-111.68279266 120.46946716]
[-126.63415527 121.67646790]
[-141.58551025 122.88346863]
[-156.53688049 124.09046936]
[-160.83497620 138.64692688]
[-170.10433960 150.66539001]
[-183.09135437 158.52044678]
[-198.03964233 161.14976501]
[-212.92755127 158.19773865]
[-225.74163818 150.06362915]
[-234.74888611 137.84750366]
[-238.73114014 123.20147705]
[-237.14984131 108.10630798]
[-230.21884155 94.60350800]
[-218.87550354 84.51921082]
[-204.65391541 79.21723175]
[-189.47743225 79.41462708]
[-175.39855957 85.08469391]
[-164.32133484 95.46060944]
[-157.74386597 109.13910675]
[-142.79251099 107.93210602]
[-127.84115601 106.72510529]
[-112.88979340 105.51811218]
[-106.43868256 101.82394409]
[-97.62571716 104.44044495]
[-82.65308380 103.53476715]
[-67.68045044 102.62908936]
[-63.97932816 88.14245605]
[-55.97090149 75.49195099]
[-44.42882919 65.92321777]
[-30.47543144 60.38303375]
[-15.47256374 59.42566299]
[-0.88870281 63.15742874]
[11.84478855 71.22505188]
[21.47414589 82.84907532]
[27.04664612 96.89915466]
[42.01927948 95.99347687]
[56.99191284 95.08779907]
[71.96454620 94.18212128]
[76.34958649 80.71643066]
[87.16485596 70.25254822]
[102.46896362 65.80790710]
[118.94879913 69.19786835]
[132.63554382 80.44308472]
[130.82749939 65.55245209]
[129.01943970 50.66181946]
[127.21139526 35.77118683]
[115.52014923 24.78508377]
[116.96362305 8.80710125]
[130.43450928 0.09417986]
[145.59907532 5.33012772]
[150.82438660 20.49837303]
[142.10202026 33.96313858]
[143.91007996 48.85377121]
[145.71812439 63.74440384]
[147.52616882 78.63504028]
[153.07841492 64.70045471]
[158.63064575 50.76586533]
[156.87629700 35.86881256]
[159.75648499 21.14792442]
[166.99586487 8.01052189]
[177.90235901 -2.28745985]
[191.43330383 -8.76153278]
[206.29513550 -10.79277611]
[221.06706238 -8.18700218]
[234.33689880 -1.19332314]
[244.83602905 9.51966476]
[251.56076050 22.92779922]
[253.86817932 37.74926376]
[251.53771973 52.56712341]
[244.79217529 65.96479034]
[234.27639771 76.66144562]
[220.99571228 83.63449860]
[206.21975708 86.21731567]
[191.36219788 84.16331482]
[177.31863403 89.43382263]
[163.27507019 94.70433044]
[178.12628174 96.81186676]
[192.97747803 98.91940308]
[207.82868958 101.02693939]
[222.57907104 95.30535126]
[234.09298706 104.75411224]
[248.94419861 106.86164856]
[263.79541016 108.96918488]
[278.64660645 111.07672119]
[293.49780273 113.18425751]
[308.34899902 115.29180145]
[325.23333740 108.01002502]
[338.63818359 119.29804230]
[353.52880859 121.10609436]
[368.41943359 122.91414642]
[379.71737671 112.10255432]
[395.32495117 111.13415527]
[407.87274170 120.46620941]
[411.43603516 135.69239807]
[404.33239746 149.62338257]
[389.91592407 155.68138123]
[374.99365234 151.00598145]
[366.61138916 137.80477905]
[351.72076416 135.99673462]
[336.83010864 134.18867493]
[327.08288574 141.41281128]
[314.62985229 139.99014282]
[306.24148560 130.14300537]
[291.39025879 128.03546143]
[276.53906250 125.92792511]
[261.68786621 123.82038879]
[246.83665466 121.71285248]
[231.98545837 119.60531616]
[218.29731750 125.47765350]
[205.72114563 115.87814331]
[190.86994934 113.77060699]
[176.01873779 111.66307068]
[161.16754150 109.55553436]
[155.55371094 114.52895355]
[169.78178406 119.27888489]
[172.78234863 133.97570801]
[161.55487061 143.92276001]
[147.32670593 139.17308044]
[144.32604980 124.47579193]
[138.71221924 129.44921875]
[139.01426697 144.44616699]
[139.31632996 159.44313049]
[139.61837769 174.44009399]
[139.92044067 189.43704224]
[140.22248840 204.43400574]
[153.03366089 213.18922424]
[158.22019958 227.81384277]
[153.78779602 242.68438721]
[141.44078064 252.08285522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[11 64]
[12 63]
[13 62]
[14 61]
[23 52]
[24 51]
[25 50]
[26 48]
[27 47]
[28 46]
[29 45]
[69 81]
[70 80]
[71 79]
[72 78]
[102 139]
[103 138]
[104 137]
[105 136]
[107 134]
[108 133]
[109 132]
[110 131]
[111 130]
[112 129]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
