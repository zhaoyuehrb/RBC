%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGUCGCUGUCGCGGAGGCUGGAGCGCUGCCCCGGAAGUCCUCCCCCCUGUUCCCCGCCCGCGGCAAAC\
) } def
/len { sequence length } bind def

/coor [
[88.54444885 331.72457886]
[74.33052826 337.19122314]
[59.12231064 336.39746094]
[45.55472183 329.48077393]
[35.97842407 317.63955688]
[32.05257034 302.92535400]
[34.45733643 287.88751221]
[42.77608490 275.13140869]
[55.56754303 266.86709595]
[70.61550903 264.52645874]
[74.49779510 250.03758240]
[78.38008118 235.54869080]
[82.26236725 221.05979919]
[86.14465332 206.57092285]
[90.02693939 192.08203125]
[93.90922546 177.59313965]
[97.79151154 163.10426331]
[98.77256012 148.13636780]
[96.81466675 133.26469421]
[94.85677338 118.39302826]
[83.42565918 109.48932648]
[81.53439331 95.12376404]
[90.27155304 83.56486511]
[88.31365967 68.69319153]
[86.35577393 53.82151794]
[84.39788055 38.94984818]
[74.92548370 26.27765656]
[80.93534851 12.64934826]
[78.97745514 -2.22232437]
[77.01956940 -17.09399796]
[63.31915283 -24.37948036]
[56.54785919 -38.34118652]
[59.30938721 -53.61055374]
[70.54187775 -64.31620026]
[85.92620087 -66.34158325]
[99.54677582 -58.90790558]
[106.16621399 -44.87356567]
[103.23920441 -29.63505554]
[91.89123535 -19.05188942]
[93.84912872 -4.18021727]
[95.80702209 10.69145584]
[105.13937378 22.29992294]
[99.26955414 36.99195480]
[101.22743988 51.86362839]
[103.18533325 66.73529816]
[105.14322662 81.60697174]
[116.57434082 90.51067352]
[118.46560669 104.87623596]
[109.72844696 116.43513489]
[111.68634033 131.30680847]
[113.64422607 146.17848206]
[123.63061523 134.98597717]
[137.99783325 130.67520142]
[152.49639893 134.52117920]
[162.83795166 145.38636780]
[165.96369934 160.05708313]
[160.94909668 174.19404602]
[149.27737427 183.61585999]
[134.40074158 185.53578186]
[120.71939850 179.38591003]
[112.28039551 166.98654175]
[108.39810944 181.47543335]
[104.51582336 195.96432495]
[100.63353729 210.45320129]
[96.75125122 224.94209290]
[92.86896515 239.43098450]
[88.98668671 253.91986084]
[85.10440063 268.40875244]
[96.96600342 277.95977783]
[103.91158295 291.51260376]
[104.73777008 306.71908569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[15 63]
[16 62]
[17 61]
[18 51]
[19 50]
[20 49]
[23 46]
[24 45]
[25 44]
[26 43]
[28 41]
[29 40]
[30 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
