%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAACUAGCUUCCCCUUAGUACAUUGAAAUUCAAAGUCAUGCUUGUAACUGUUAAUGAAAGCAGAUUUAAAGCAACACCACCAUCACUGGAGUAUUUUUAGUUAUAUACGAUUGAGACUACCAAGC\
) } def
/len { sequence length } bind def

/coor [
[93.57166290 215.95442200]
[90.27918243 230.95626831]
[79.91503906 242.29118347]
[65.26714325 246.91012573]
[50.27569962 243.57064819]
[38.97333145 233.17102051]
[34.40032196 218.50872803]
[37.78678131 203.52781677]
[48.22177505 192.25810242]
[62.89833832 187.73107910]
[66.15979004 173.08993530]
[69.42124176 158.44879150]
[72.68270111 143.80766296]
[67.74619293 138.16133118]
[57.86466217 149.44651794]
[48.75168991 161.36096191]
[34.26475143 157.47140503]
[32.34482956 142.59477234]
[45.36946487 135.15464783]
[57.87318420 126.86869812]
[52.93667603 121.22238159]
[44.55186081 125.10572052]
[37.61237335 122.34397888]
[22.64016724 123.25666809]
[9.33634853 131.81932068]
[-3.83812571 124.87075043]
[-18.81033325 125.78343964]
[-33.78253937 126.69613647]
[-48.75474930 127.60882568]
[-64.19664001 134.60771179]
[-75.19674683 121.70677185]
[-65.84511566 107.56522369]
[-49.66743851 112.63661194]
[-34.69522858 111.72392273]
[-19.72302246 110.81123352]
[-4.75081539 109.89854431]
[7.48209143 101.40117645]
[21.72747803 108.28445435]
[36.69968414 107.37176514]
[51.65967178 106.27684021]
[60.69746399 78.84335327]
[82.22628784 63.58165359]
[78.25586700 49.11667252]
[74.28543854 34.65168762]
[70.31501007 20.18670654]
[66.34458160 5.72172403]
[52.89173508 -2.13057089]
[49.07121658 -16.85667992]
[56.64008331 -29.63352776]
[52.66965866 -44.09851074]
[48.52339172 -58.51407242]
[44.20190811 -72.87808228]
[39.88042068 -87.24208832]
[35.55893326 -101.60610199]
[31.23744774 -115.97010803]
[17.19945335 -123.23029327]
[12.48649883 -138.31550598]
[19.89469528 -152.27595520]
[35.02889252 -156.82916260]
[48.91023636 -149.27377319]
[53.30317688 -134.09228516]
[45.60145569 -120.29159546]
[49.92294312 -105.92758942]
[54.24443054 -91.56357574]
[58.56591415 -77.19956970]
[62.88740158 -62.83555984]
[67.87863159 -57.27936172]
[67.13463593 -48.06893539]
[71.10506439 -33.60395432]
[84.13601685 -26.48145676]
[88.36865234 -11.86846733]
[80.80957031 1.75129759]
[84.77999115 16.21627998]
[88.75041962 30.68126297]
[92.72084808 45.14624405]
[96.69127655 59.61122513]
[102.56677246 59.55729675]
[108.38830566 60.35359955]
[114.03349304 61.98340225]
[119.38365173 64.41243744]
[124.32630157 67.58963776]
[128.75753784 71.44821167]
[132.58419800 75.90702820]
[146.08738708 69.37527466]
[159.59057617 62.84352112]
[168.35234070 48.98122025]
[184.72526550 49.90826035]
[191.86628723 64.67098236]
[182.42932129 78.08276367]
[166.12232971 76.34671021]
[152.61914062 82.87846375]
[139.11595154 89.41022491]
[140.44898987 102.46572876]
[137.54000854 115.26264191]
[150.14982605 123.38621521]
[162.75964355 131.50979614]
[178.55113220 132.47918701]
[185.06005859 145.87631226]
[197.66987610 153.99987793]
[210.27969360 162.12345886]
[222.88951111 170.24703979]
[235.49934387 178.37060547]
[248.10916138 186.49418640]
[260.71896362 194.61776733]
[273.32879639 202.74133301]
[288.72067261 199.15444946]
[302.09637451 207.57266235]
[305.52032471 223.00160217]
[296.96115112 236.28753662]
[281.49688721 239.54818726]
[268.30218506 230.84904480]
[265.20520020 215.35115051]
[252.59539795 207.22758484]
[239.98558044 199.10400391]
[227.37576294 190.98042297]
[214.76594543 182.85685730]
[202.15612793 174.73327637]
[189.54631042 166.60969543]
[176.93649292 158.48612976]
[162.04695129 158.09779358]
[154.63607788 144.11961365]
[142.02626038 135.99603271]
[129.41644287 127.87245941]
[112.10493469 142.96235657]
[87.32383728 147.06910706]
[84.06238556 161.71025085]
[80.80093384 176.35137939]
[77.53947449 190.99252319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 128]
[11 127]
[12 126]
[13 125]
[21 40]
[23 39]
[24 38]
[26 36]
[27 35]
[28 34]
[29 33]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[49 69]
[50 68]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[83 92]
[84 91]
[85 90]
[94 123]
[95 122]
[96 121]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
