%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUUCUUUCCGGCUUCGCUGCUGGUGUCGGCUCCGAGAGCUCUGGCUUAUCAGGACUCCAUAGUUCUCCAACAGAGAAAUCUUGAAAAGGACUGACCAGUUUUUGCAGUUCUAAAACC\
) } def
/len { sequence length } bind def

/coor [
[72.96630859 159.11941528]
[77.74757385 144.90184021]
[89.20637512 135.22583008]
[76.91288757 143.82060242]
[64.61940765 152.41539001]
[52.32592392 161.01017761]
[53.54568863 176.25679016]
[47.01327515 189.97628784]
[34.57345963 198.52716064]
[19.62384415 199.69548035]
[6.18716717 193.26731873]
[-6.10631561 201.86209106]
[-18.39979744 210.45687866]
[-30.69328117 219.05166626]
[-42.98676300 227.64643860]
[-45.49523163 243.25039673]
[-58.35141754 252.44245911]
[-73.92797089 249.76914978]
[-82.98359680 236.81649780]
[-80.14575958 221.26908875]
[-67.09809113 212.35090637]
[-51.58154678 215.35296631]
[-39.28806305 206.75817871]
[-26.99458122 198.16339111]
[-14.70109844 189.56861877]
[-2.40761542 180.97383118]
[-3.83111262 166.14685059]
[2.39950132 152.50737000]
[14.70198822 143.76007080]
[29.83037758 142.33578491]
[43.73114014 148.71669006]
[56.02462387 140.12190247]
[68.31810760 131.52713013]
[80.61158752 122.93234253]
[74.14705658 94.88351440]
[93.05815887 78.40983582]
[93.44756317 63.41489029]
[93.83697510 48.41994476]
[94.22638702 33.42500305]
[94.61579132 18.43005753]
[84.14164734 1.30058777]
[94.65916443 -14.83984470]
[94.26975250 -29.83478928]
[93.88034821 -44.82973480]
[93.49093628 -59.82467651]
[93.10152435 -74.81962585]
[81.71118164 -79.24197388]
[72.54051208 -87.26345825]
[66.67523193 -97.90276337]
[64.79890442 -109.87059021]
[67.11335754 -121.72590637]
[73.31722260 -132.04943848]
[82.64500427 -139.61357117]
[93.96141052 -143.52838135]
[94.73996735 -158.50816345]
[95.51852417 -173.48794556]
[96.29708862 -188.46771240]
[97.07564545 -203.44749451]
[97.85420227 -218.42727661]
[89.92487335 -232.78199768]
[98.62232971 -246.68473816]
[114.99937439 -245.83355713]
[122.20870209 -231.10408020]
[112.83398438 -217.64872742]
[112.05541992 -202.66894531]
[111.27686310 -187.68916321]
[110.49830627 -172.70938110]
[109.71974945 -157.72959900]
[108.94119263 -142.74981689]
[124.50127411 -133.72776794]
[133.46746826 -118.03884125]
[133.34129333 -99.88519287]
[124.07273102 -84.17805481]
[108.09646606 -75.20903015]
[108.48587799 -60.21408844]
[108.87528992 -45.21914291]
[109.26470184 -30.22419930]
[109.65410614 -15.22925472]
[117.77029419 -8.78101349]
[121.00236511 1.30058777]
[118.02674866 11.69102669]
[109.61074066 18.81946754]
[109.22132874 33.81441116]
[108.83191681 48.80935669]
[108.44251251 63.80430222]
[108.05310059 78.79924774]
[118.82860565 84.29825592]
[125.91718292 95.21955872]
[126.66837311 109.14320374]
[119.97721863 122.42127991]
[132.48968506 130.69401550]
[145.00215149 138.96675110]
[157.51461792 147.23950195]
[170.02706909 155.51223755]
[182.53953552 163.78497314]
[195.05200195 172.05770874]
[204.05409241 174.22152710]
[207.77807617 180.71116638]
[222.40161133 175.52162170]
[237.27308655 179.95095825]
[246.67408752 192.29603577]
[246.98974609 207.80989075]
[238.09869385 220.52716064]
[223.41970825 225.55776978]
[208.59716797 220.96734619]
[199.33062744 208.52102661]
[199.18328857 193.00465393]
[186.77926636 184.57017517]
[174.26679993 176.29743958]
[161.75433350 168.02470398]
[149.24186707 159.75195312]
[136.72940063 151.47921753]
[124.21694183 143.20648193]
[111.70447540 134.93374634]
[123.41204071 144.31100464]
[128.55955505 158.40011597]
[125.65456390 173.11613464]
[115.53934479 184.19233704]
[101.14665222 188.41732788]
[86.64947510 184.56613159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 31]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
[98 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
