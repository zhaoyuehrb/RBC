%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUUCCUCAGGCUUCCCUUGUGAGGCUGCCUGGGUUCUGCCGCUGGGUGGUUUGGGAUGUCCAAGAGAUAUCCCCUUUCAGCCAGUGACUCGGUCCUCAGUUGCUGCUCCGGAAAGACGCUGGGGCUGGGAAGGGCCCUGUGUCCUCUGGCUUUAAA\
) } def
/len { sequence length } bind def

/coor [
[102.23643494 124.80306244]
[99.02179718 139.45454407]
[95.80716705 154.10603333]
[101.28557587 169.56304932]
[90.43427277 181.85862732]
[74.41614532 178.34413147]
[69.70926666 162.63499451]
[81.15567780 150.89140320]
[84.37031555 136.23991394]
[87.58495331 121.58842468]
[74.49692535 114.25878906]
[61.41006851 106.92978668]
[50.59726715 117.32609558]
[39.78446198 127.72241211]
[28.97165871 138.11871338]
[18.15885353 148.51502991]
[7.34605026 158.91134644]
[7.28637695 174.71551514]
[-3.98975492 185.78910828]
[-19.79241753 185.56234741]
[-30.74617004 174.16976929]
[-30.35234642 158.37039185]
[-18.84459496 147.53768921]
[-3.05026031 148.09854126]
[7.76254368 137.70222473]
[18.57534790 127.30591583]
[29.38815117 116.90960693]
[40.20095444 106.51329803]
[51.01375961 96.11698151]
[53.50561142 81.32540894]
[46.69575119 67.96031189]
[39.62480164 54.73149109]
[32.29548264 41.64405441]
[24.96616364 28.55661201]
[17.63684654 15.46917248]
[10.30752659 2.38173246]
[-4.63780832 -2.00856423]
[-11.88434410 -15.38549900]
[-7.60676384 -29.60653496]
[-14.93608284 -42.69397736]
[-22.26540184 -55.78141785]
[-40.03167725 -65.23389435]
[-39.06882858 -84.51584625]
[-46.90630722 -97.30544281]
[-54.74378586 -110.09504700]
[-62.58126450 -122.88465118]
[-70.41873932 -135.67425537]
[-78.25621796 -148.46385193]
[-92.06392670 -156.18771362]
[-92.11677551 -171.08221436]
[-99.95425415 -183.87182617]
[-107.79173279 -196.66142273]
[-123.13811493 -198.00108337]
[-134.61885071 -208.00337219]
[-137.96882629 -222.67449951]
[-132.10765076 -236.34141541]
[-139.94512939 -249.13101196]
[-147.78260803 -261.92062378]
[-155.62008667 -274.71020508]
[-163.45756531 -287.49981689]
[-171.29504395 -300.28942871]
[-179.13252258 -313.07904053]
[-186.97000122 -325.86862183]
[-202.17134094 -330.99688721]
[-207.50411987 -346.12768555]
[-198.87748718 -359.65396118]
[-182.90905762 -361.19955444]
[-171.84843445 -349.57876587]
[-174.18040466 -333.70611572]
[-166.34292603 -320.91650391]
[-158.50544739 -308.12689209]
[-150.66796875 -295.33731079]
[-142.83049011 -282.54769897]
[-134.99301147 -269.75808716]
[-127.15553284 -256.96850586]
[-119.31805420 -244.17889404]
[-104.47982788 -243.19657898]
[-92.92861938 -233.55117798]
[-89.22865295 -218.78082275]
[-95.00212860 -204.49890137]
[-87.16464996 -191.70930481]
[-79.32717133 -178.91969299]
[-66.08005524 -172.11064148]
[-65.46662140 -156.30133057]
[-57.62913895 -143.51173401]
[-49.79166031 -130.72213745]
[-41.95418167 -117.93252563]
[-34.11670303 -105.14292145]
[-26.27922630 -92.35332489]
[-16.10765076 -90.85338593]
[-8.29584885 -83.83458710]
[-5.60912085 -73.45464325]
[-9.17796135 -63.11073303]
[-1.84864247 -50.02329636]
[5.48067617 -36.93585587]
[19.84113312 -33.15261841]
[27.46054077 -19.98450279]
[23.39496803 -4.94758606]
[30.72428513 8.13985443]
[38.05360413 21.22729492]
[45.38292313 34.31473541]
[52.71224213 47.40217590]
[57.03218079 49.54708481]
[60.02482224 54.45512772]
[60.06085205 61.15045547]
[66.87070465 74.51554871]
[83.15229797 63.05881119]
[102.33604431 60.66315460]
[119.85874176 67.35522461]
[131.80377197 81.06229401]
[135.77502441 98.21456146]
[149.27125549 104.76069641]
[162.76747131 111.30683899]
[176.26370239 117.85297394]
[189.75991821 124.39911652]
[202.21406555 120.91597748]
[213.33676147 126.68656158]
[217.39120483 138.11785889]
[230.75630188 144.92771912]
[244.12139893 151.73757935]
[257.48648071 158.54743958]
[270.85159302 165.35729980]
[279.97067261 166.47683716]
[284.41027832 172.43431091]
[297.63909912 179.50526428]
[310.86791992 186.57621765]
[324.09674072 193.64717102]
[337.32556152 200.71810913]
[350.55438232 207.78906250]
[365.60348511 202.96206665]
[379.61959839 210.26437378]
[384.28723145 225.36366272]
[376.83715820 239.30180359]
[361.68936157 243.80953979]
[347.83074951 236.21249390]
[343.48342896 221.01788330]
[330.25460815 213.94692993]
[317.02578735 206.87597656]
[303.79696655 199.80503845]
[290.56814575 192.73408508]
[277.33932495 185.66313171]
[264.04174805 178.72239685]
[250.67663574 171.91253662]
[237.31153870 165.10267639]
[223.94644165 158.29281616]
[210.58134460 151.48295593]
[193.15594482 153.36633301]
[183.21379089 137.89533997]
[169.71755981 131.34919739]
[156.22132874 124.80306244]
[142.72511292 118.25692749]
[129.22888184 111.71078491]
[122.48077393 114.98385620]
[131.18644714 127.19906616]
[142.44427490 137.11174011]
[140.42303467 151.97494507]
[126.92693329 158.52133179]
[114.00298309 150.90742493]
[113.18773651 135.92906189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[30 106]
[31 105]
[32 102]
[33 101]
[34 100]
[35 99]
[36 98]
[39 95]
[40 94]
[41 93]
[43 89]
[44 88]
[45 87]
[46 86]
[47 85]
[48 84]
[50 82]
[51 81]
[52 80]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[111 152]
[112 151]
[113 150]
[114 149]
[115 148]
[118 146]
[119 145]
[120 144]
[121 143]
[122 142]
[124 141]
[125 140]
[126 139]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
