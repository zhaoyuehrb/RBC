%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUUCCACCUUUUGUGGGCACUCAAGUUCGGACCUCUGGGAUCGGCGAUUCCCCUCUGGCCAGGGCUGGUUUUA\
) } def
/len { sequence length } bind def

/coor [
[117.32556915 186.77214050]
[113.15230560 172.36436462]
[108.97904968 157.95660400]
[104.80578613 143.54882812]
[100.63252258 129.14105225]
[96.45925903 114.73328400]
[82.78076172 108.57708740]
[69.22900391 115.00747681]
[55.67724991 121.43786621]
[42.12549210 127.86825562]
[28.57373810 134.29864502]
[21.85525894 148.86715698]
[6.24245882 152.55769348]
[-6.28786087 142.53916931]
[-6.12350988 126.49695587]
[6.60943556 116.73726654]
[22.14334869 120.74688721]
[35.69510651 114.31649780]
[49.24686050 107.88610840]
[62.79861832 101.45571899]
[76.35037231 95.02532959]
[62.18877792 90.08071899]
[51.58440781 79.47189331]
[46.64575195 65.30821228]
[48.35477829 50.40589142]
[56.37167358 37.72798157]
[69.10242462 29.79526329]
[84.01573944 28.18501282]
[98.14638519 33.21740341]
[108.68472290 43.89183426]
[113.53539276 58.08588028]
[111.73393250 72.97731018]
[103.63873291 85.60502625]
[114.02959442 74.78698730]
[117.85982513 66.18132782]
[125.06336975 63.75321579]
[135.88140869 53.36235046]
[133.30906677 36.78002167]
[140.96046448 22.03025818]
[155.70338440 14.72901344]
[171.74876404 17.52639961]
[182.13963318 6.70836210]
[192.53048706 -4.10967445]
[202.92135620 -14.92771149]
[200.05337524 -30.17744064]
[206.72709656 -44.18604660]
[220.37634277 -51.56693268]
[235.75271606 -49.48199463]
[246.94366455 -38.73294067]
[249.64605713 -23.45299530]
[242.82075500 -9.51761150]
[229.09223938 -2.28522897]
[213.73939514 -4.53684568]
[203.34852600 6.28119087]
[192.95765686 17.09922791]
[182.56680298 27.91726494]
[186.13938904 40.93924332]
[182.71501160 54.11380005]
[173.10061646 63.90371704]
[159.77989197 67.62461853]
[146.27227783 64.18038940]
[135.45423889 74.57125092]
[124.84763336 85.17785645]
[114.45676422 95.99589539]
[110.86703491 110.56002045]
[115.04029846 124.96778870]
[119.21355438 139.37556458]
[123.38681793 153.78334045]
[127.56008148 168.19110107]
[131.73333740 182.59887695]
[146.37399292 187.73999023]
[155.16893005 200.52391052]
[154.73634338 216.03495789]
[145.24255371 228.30880737]
[130.33811951 232.62593079]
[115.75410461 227.32629395]
[107.09835815 214.44772339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[33 64]
[34 63]
[36 62]
[37 61]
[41 56]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
