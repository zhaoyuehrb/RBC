%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACAGCCGAGUUCAGGUGAGCGGUUGCUCGUCGUCGGGGCGGCCGGCAGCGGCGGCUCCAGGGCCCAGCAUGCGCGGGGGACCCCGCGGCCACC\
) } def
/len { sequence length } bind def

/coor [
[57.67801285 224.16744995]
[45.88367081 227.34941101]
[38.03583908 240.13265991]
[30.18800735 252.91590881]
[22.34017754 265.69915771]
[26.26046371 281.00952148]
[18.13469887 294.56488037]
[2.78375340 298.32305908]
[-10.68492794 290.05444336]
[-14.28061485 274.66461182]
[-5.87005186 261.28411865]
[9.55692387 257.85131836]
[17.40475655 245.06808472]
[25.25258636 232.28482056]
[33.10041809 219.50157166]
[32.54065323 202.04376221]
[48.61050415 193.23666382]
[56.04027557 180.20599365]
[63.47004318 167.17532349]
[70.89981079 154.14463806]
[71.48925018 146.63203430]
[78.78704071 140.81791687]
[86.63487244 128.03466797]
[74.26084900 114.46382141]
[72.15367889 97.14958954]
[80.03795624 82.63352203]
[94.05442047 75.79333496]
[95.02536774 60.82479477]
[95.99631500 45.85625458]
[96.96726227 30.88771057]
[88.40010071 14.68867683]
[98.47812653 0.42256069]
[98.96385193 -14.56957245]
[99.44958496 -29.56170654]
[92.16321564 -43.60519028]
[100.30859375 -56.07523727]
[97.41692352 -64.94653320]
[101.06061554 -71.54276276]
[102.03156281 -86.51129913]
[103.00251007 -101.47984314]
[103.97345734 -116.44838715]
[104.94440460 -131.41693115]
[98.11661530 -145.68899536]
[106.66152191 -157.88874817]
[107.63246918 -172.85728455]
[108.60341644 -187.82582092]
[109.57436371 -202.79437256]
[101.83011627 -217.24977112]
[110.70547485 -231.03962708]
[127.07022858 -229.97810364]
[134.08972168 -215.15722656]
[124.54290771 -201.82342529]
[123.57196045 -186.85487366]
[122.60101318 -171.88633728]
[121.63006592 -156.91780090]
[128.52729797 -143.71638489]
[119.91294861 -130.44598389]
[118.94200134 -115.47743988]
[117.97105408 -100.50889587]
[117.00010681 -85.54035187]
[116.02915955 -70.57181549]
[115.30072784 -55.58951187]
[122.62183380 -42.61836624]
[114.44171906 -29.07597733]
[113.95598602 -14.08384418]
[113.47026062 0.90828907]
[121.56480408 10.05758286]
[121.16483307 22.67066193]
[111.93580627 31.85865784]
[110.96485901 46.82720184]
[109.99391174 61.79574203]
[109.02296448 76.76428223]
[122.92881012 85.79975128]
[128.89265442 102.64785004]
[122.99182892 120.87929535]
[135.09846497 129.73533630]
[147.20510864 138.59136963]
[159.31173706 147.44740295]
[171.41838074 156.30343628]
[183.52500916 165.15946960]
[199.87811279 166.38757324]
[206.74632263 181.27915955]
[197.06423950 194.51506042]
[180.79193115 192.47930908]
[174.66897583 177.26611328]
[162.56234741 168.41007996]
[150.45570374 159.55403137]
[138.34907532 150.69799805]
[126.24243164 141.84196472]
[114.13579559 132.98593140]
[99.41812134 135.88250732]
[91.57028961 148.66575623]
[83.93048859 161.57441711]
[76.50071716 174.60508728]
[69.07095337 187.63575745]
[61.64118195 200.66644287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[17 96]
[18 95]
[19 94]
[20 93]
[22 92]
[23 91]
[27 72]
[28 71]
[29 70]
[30 69]
[32 66]
[33 65]
[34 64]
[36 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[44 55]
[45 54]
[46 53]
[47 52]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
