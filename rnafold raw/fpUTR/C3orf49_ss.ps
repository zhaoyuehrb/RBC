%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCACAAAACCAUGGCCCACACCUUGACAGUACAUUCAGUCACUGGAUGAUUUUGUAUUGAAGUCUGUAAGUUCAAGAACUAAAACAAUCCAAAACGGCUACUACAGGUGAAGUUGAGAGCA\
) } def
/len { sequence length } bind def

/coor [
[27.20672226 383.52441406]
[19.71245384 383.11788940]
[12.44054604 381.29544067]
[4.88619852 394.25427246]
[-2.66814971 407.21313477]
[-10.22249794 420.17199707]
[-3.84755230 434.31906128]
[-7.03850937 449.50448608]
[-18.56838036 459.88919067]
[-34.00369644 461.47998047]
[-47.40925980 453.66522217]
[-53.63035965 439.44982910]
[-50.27486038 424.29989624]
[-38.63301086 414.04092407]
[-23.18134880 412.61764526]
[-15.62700081 399.65878296]
[-8.07265282 386.69992065]
[-0.51830488 373.74108887]
[-12.95463276 353.47341919]
[-11.41948700 329.63632202]
[3.64888191 310.96395874]
[26.83076286 304.36981201]
[30.19482422 289.75189209]
[33.55888748 275.13400269]
[36.92294693 260.51608276]
[40.28701019 245.89819336]
[32.20350266 237.66331482]
[29.11671257 226.41940308]
[31.91995049 214.97726440]
[40.01865387 206.25675964]
[51.45191956 202.54173279]
[55.54619598 188.11132812]
[59.64047623 173.68090820]
[45.75059128 179.34403992]
[31.83625031 173.74125671]
[25.74646759 160.03306580]
[30.91646004 145.95219421]
[44.42985916 139.44157410]
[58.66382217 144.17384338]
[65.58894348 157.47854614]
[71.80458069 143.82695007]
[78.02021027 130.17536926]
[84.23584747 116.52378082]
[77.16269684 100.03556824]
[84.18444824 83.52540588]
[100.96736908 77.18316650]
[106.48923492 63.23651886]
[112.01110840 49.28987122]
[117.53297424 35.34322357]
[123.05484009 21.39657593]
[117.02371979 7.03470516]
[122.82235718 -7.03051710]
[136.55137634 -12.69176388]
[142.07324219 -26.63841057]
[147.59510803 -40.58505630]
[153.11697388 -54.53170395]
[158.46315002 -68.54663849]
[163.63279724 -82.62764740]
[160.02885437 -100.63269043]
[173.81636047 -111.41200256]
[178.63050842 -125.61847687]
[183.44467163 -139.82495117]
[188.25881958 -154.03143311]
[193.07298279 -168.23789978]
[190.17407227 -183.79125977]
[201.58679199 -193.36199951]
[195.80143738 -208.32559204]
[204.01742554 -222.10517883]
[219.93215942 -224.13023376]
[231.33721924 -212.84732056]
[229.48359680 -196.91169739]
[215.79325867 -188.54783630]
[219.03651428 -174.01063538]
[207.27944946 -163.42375183]
[202.46530151 -149.21726990]
[197.65113831 -135.01080322]
[192.83699036 -120.80432129]
[188.02282715 -106.59784698]
[193.10713196 -95.54454803]
[189.12652588 -83.62264252]
[177.71380615 -77.45800018]
[172.54415894 -63.37699509]
[173.19972229 -55.93048477]
[167.06362915 -49.00983810]
[161.54174805 -35.06319046]
[156.01988220 -21.11654282]
[150.49801636 -7.16989517]
[156.63064575 6.35513401]
[151.22937012 20.57767868]
[137.00149536 26.91844368]
[131.47961426 40.86508942]
[125.95775604 54.81173706]
[120.43588257 68.75838470]
[114.91401672 82.70503235]
[121.41603088 92.06919861]
[122.58136749 103.40965271]
[118.11964417 113.90044403]
[109.14266968 120.92738342]
[97.88743591 122.73941040]
[91.67179871 136.39100647]
[85.45616913 150.04258728]
[79.24053192 163.69418335]
[74.07089233 177.77519226]
[69.97660828 192.20559692]
[65.88233185 206.63601685]
[75.75422668 222.70237732]
[70.94318390 240.60787964]
[54.90491104 249.26225281]
[51.54085159 263.88015747]
[48.17678833 278.49804688]
[44.81272888 293.11596680]
[41.44866562 307.73385620]
[48.07765961 311.49996948]
[53.86288071 316.45266724]
[58.59521103 322.40863037]
[62.10440063 329.14846802]
[64.26519775 336.42456055]
[65.00180817 343.97036743]
[64.29055023 351.51007080]
[62.16061020 358.76873779]
[58.69284439 365.48223877]
[54.01672745 371.40692139]
[48.30552292 376.32855225]
[41.76984406 380.06982422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[31 105]
[32 104]
[33 103]
[40 102]
[41 101]
[42 100]
[43 99]
[46 94]
[47 93]
[48 92]
[49 91]
[50 90]
[53 87]
[54 86]
[55 85]
[56 84]
[57 82]
[58 81]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
