%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUUUGUAUGGCAAGUGGAACCACUGGCUUGGUGGAUUUUGCUAGAUUUUUCUGAUUUUUAAACUCCUGAAAAAUAUCCCAGAUAACUGUC\
) } def
/len { sequence length } bind def

/coor [
[88.34473419 170.86227417]
[74.06304169 175.44848633]
[59.12967300 174.03622437]
[45.96092987 166.85401917]
[36.68759155 155.06396484]
[32.81014252 140.57377625]
[34.95597458 125.72806549]
[42.77788162 112.92893219]
[55.01022720 104.24736023]
[69.67375183 101.08808136]
[84.39820862 103.96328735]
[70.22817230 99.04290771]
[56.05813217 94.12253571]
[41.88809586 89.20216370]
[27.71805954 84.28179169]
[13.54802322 79.36141968]
[-0.62201333 74.44104767]
[-12.25849438 84.36775208]
[-27.20264435 87.11897278]
[-41.42289734 82.05430603]
[-51.13380814 70.62828064]
[-53.80367661 55.97436142]
[-67.97371674 51.05398560]
[-82.14375305 46.13361359]
[-96.31378937 41.21324158]
[-110.42547607 48.32912445]
[-125.40927887 43.30306244]
[-132.37556458 29.11692619]
[-127.19136047 14.18710327]
[-112.93237305 7.37119007]
[-98.05818939 12.71294689]
[-91.39341736 27.04320526]
[-77.22338104 31.96357727]
[-63.05334091 36.88394928]
[-48.88330460 41.80432510]
[-37.70622635 31.95858765]
[-23.00382805 29.00978279]
[-8.70495987 33.84803772]
[1.31813276 45.26882553]
[4.29835939 60.27101135]
[18.46839523 65.19138336]
[32.63843155 70.11175537]
[46.80846786 75.03212738]
[60.97850418 79.95249939]
[75.14854431 84.87287140]
[89.31858063 89.79325104]
[96.91469574 79.48349762]
[113.03477478 76.67460632]
[125.94079590 69.03035736]
[138.84681702 61.38610458]
[151.75285339 53.74185562]
[164.65887451 46.09760666]
[177.56489563 38.45335388]
[190.47091675 30.80910683]
[187.64816284 15.91589165]
[190.09246826 0.95590752]
[197.50869751 -12.26435566]
[209.00129700 -22.14848518]
[223.18247986 -27.50292778]
[238.33978271 -27.68110466]
[252.64291382 -22.66150284]
[264.36468506 -13.05026245]
[272.08963013 -0.00798803]
[274.88494873 14.89040279]
[272.41305542 29.84585762]
[264.97247314 43.05242920]
[253.46168518 52.91536331]
[239.27066040 58.24366379]
[224.11305237 58.39390945]
[209.81919861 53.34795380]
[198.11517334 43.71512985]
[185.20913696 51.35937881]
[172.30311584 59.00362778]
[159.39709473 66.64788055]
[146.49107361 74.29212952]
[133.58505249 81.93637848]
[120.67902374 89.58062744]
[135.64431763 88.56079865]
[145.14294434 100.17009735]
[141.18005371 114.63714600]
[127.09114838 119.78521729]
[114.73462677 111.28118134]
[121.94335175 124.43543243]
[129.15208435 137.58967590]
[143.44123840 145.63653564]
[143.34645081 162.03541565]
[128.96520996 169.91654968]
[115.09172058 161.17250061]
[115.99783325 144.79840088]
[108.78910828 131.64416504]
[101.58037567 118.48991394]
[106.86423492 132.52845764]
[106.18898010 147.51325989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[22 35]
[23 34]
[24 33]
[25 32]
[48 77]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
