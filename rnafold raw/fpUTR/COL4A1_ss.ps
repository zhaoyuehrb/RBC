%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCUCCGCUUGGAGCCGCCGCACCCGGGACGGUGCGUAGCGCUGGAAGUCCGGCCUUCCGAGAGCUAGCUGUCCGCCGCGGCCCCCGCACGCCGGGCAGCCGUCCCUCGCCGCCUCGGGCGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[5.25801516 391.65356445]
[-2.18022871 378.62783813]
[-9.10202599 391.93530273]
[-10.30939865 401.09228516]
[-16.35269547 405.47592163]
[-23.59160614 418.61358643]
[-30.83051682 431.75125122]
[-38.06942749 444.88891602]
[-37.20092010 461.26504517]
[-51.09445190 469.97720337]
[-65.45755005 462.06307983]
[-65.51468658 445.66403198]
[-51.20709229 437.64999390]
[-43.96817780 424.51232910]
[-36.72926712 411.37466431]
[-29.49035835 398.23699951]
[-22.40949440 385.01348877]
[-15.48769760 371.70602417]
[-9.37569523 358.00772095]
[-12.13755512 343.37142944]
[-0.03760453 333.17819214]
[5.24263906 319.13830566]
[10.52288246 305.09838867]
[7.76102304 290.46206665]
[19.86097336 280.26885986]
[25.14121819 266.22894287]
[30.42146111 252.18904114]
[35.70170593 238.14913940]
[40.98194885 224.10922241]
[46.26219177 210.06932068]
[43.50033188 195.43301392]
[55.60028458 185.23979187]
[60.88052750 171.19987488]
[66.16076660 157.15997314]
[71.44101715 143.12007141]
[76.72126007 129.08015442]
[73.95939636 114.44385529]
[86.05934906 104.25063324]
[84.62265778 89.31959534]
[76.76218414 76.54410553]
[68.90171814 63.76862335]
[61.04124832 50.99313736]
[47.21967697 43.29413223]
[47.14003754 28.39973831]
[39.27956772 15.62425423]
[31.26647949 2.94393826]
[23.10192299 -9.63938427]
[14.93736553 -22.22270775]
[6.77280903 -34.80603027]
[-1.39174783 -47.38935471]
[-16.89962387 -50.43587875]
[-25.64164925 -63.60221863]
[-22.43133545 -79.07701874]
[-9.17330360 -87.67935181]
[6.26668978 -84.30561066]
[14.72837162 -70.95737457]
[11.19157505 -55.55390930]
[19.35613251 -42.97058868]
[27.52068901 -30.38726425]
[35.68524551 -17.80394173]
[43.84980011 -5.22061825]
[50.19257355 -1.28273642]
[52.05505371 7.76378441]
[59.91552353 20.53927040]
[73.17486572 27.32448769]
[73.81673431 43.13266754]
[81.67720032 55.90815353]
[89.53767395 68.68363953]
[97.39813995 81.45912170]
[112.05010986 84.67156219]
[124.53462982 76.35671234]
[137.01914978 68.04186249]
[149.50367737 59.72701263]
[161.98818970 51.41216278]
[174.47271729 43.09731293]
[186.95724487 34.78246307]
[199.44175720 26.46761131]
[202.79142761 20.58112335]
[207.87298584 17.76694870]
[212.73020935 18.07022476]
[225.59902954 10.36350536]
[238.46783447 2.65678596]
[251.24333191 -5.20368338]
[263.92364502 -13.21677208]
[271.06597900 -27.97884941]
[287.43899536 -28.90441322]
[296.19952393 -15.04132175]
[288.33547974 -0.65073645]
[271.93673706 -0.53645700]
[259.25640869 7.47663212]
[255.24276733 13.77173042]
[246.17456055 15.52560425]
[233.30574036 23.23232269]
[220.43692017 30.93904305]
[207.75660706 38.95213318]
[195.27209473 47.26698303]
[182.78756714 55.58183289]
[170.30303955 63.89668274]
[157.81852722 72.21153259]
[145.33399963 80.52638245]
[132.84948730 88.84123230]
[120.36495972 97.15608215]
[118.52906799 102.69508362]
[115.36501312 107.00263977]
[111.40305328 109.81744385]
[107.20306396 111.07154846]
[103.29048157 110.88337708]
[100.09925842 109.53087616]
[102.48343658 125.17140961]
[90.76116943 134.36039734]
[85.48091888 148.40031433]
[80.20067596 162.44021606]
[74.92043304 176.48013306]
[69.64019012 190.52003479]
[72.02437592 206.16056824]
[60.30210114 215.34956360]
[55.02185822 229.38946533]
[49.74161148 243.42938232]
[44.46136856 257.46929932]
[39.18112564 271.50918579]
[33.90088272 285.54910278]
[36.28506470 301.18963623]
[24.56279182 310.37863159]
[19.28254700 324.41854858]
[14.00230408 338.45843506]
[16.38648415 354.09896851]
[4.66421270 363.28796387]
[19.32655334 360.12319946]
[31.09651947 369.42199707]
[31.41045952 384.41873169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[5 16]
[6 15]
[7 14]
[8 13]
[19 127]
[21 125]
[22 124]
[23 123]
[25 121]
[26 120]
[27 119]
[28 118]
[29 117]
[30 116]
[32 114]
[33 113]
[34 112]
[35 111]
[36 110]
[38 108]
[39 69]
[40 68]
[41 67]
[42 66]
[44 64]
[45 63]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[70 102]
[71 101]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[80 94]
[81 93]
[82 92]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
