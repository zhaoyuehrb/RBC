%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAGCCAGGGCUGCAGAGCAUUCCUCGGCUCAGCUGGGGCAGCGCCGCCCCAUCCCCCAGUGGUCCUC\
) } def
/len { sequence length } bind def

/coor [
[173.99395752 123.67829895]
[170.45277405 115.84261322]
[168.34860229 107.50000000]
[153.34860229 107.50000000]
[138.34860229 107.50000000]
[123.34859467 107.50000000]
[108.34859467 107.50000000]
[93.35237122 107.83657074]
[78.36747742 108.50954437]
[63.38257980 109.18251801]
[48.39768219 109.85549164]
[34.95853806 118.20413971]
[21.89695168 111.04563904]
[6.91205502 111.71861267]
[-8.07284069 112.39158630]
[-23.62475586 119.14245605]
[-34.41699982 106.06713867]
[-24.84026527 92.07705688]
[-8.74581337 97.40668488]
[6.23908234 96.73371124]
[21.22397804 96.06074524]
[33.59130096 87.76022339]
[47.72471237 94.87059021]
[62.70960617 94.19761658]
[77.69450378 93.52465057]
[92.67939758 92.85167694]
[100.22303772 89.27507019]
[108.34859467 92.50000000]
[123.34859467 92.50000000]
[138.34860229 92.50000000]
[153.34860229 92.50000000]
[168.34860229 92.50000000]
[178.77375793 69.43491364]
[199.33645630 54.80558395]
[224.39335632 52.53302383]
[247.11488342 63.15979004]
[258.41094971 53.29070663]
[269.70703125 43.42162704]
[281.00311279 33.55254745]
[292.29916382 23.68346596]
[303.59524536 13.81438541]
[304.40817261 -1.96898210]
[316.19934082 -12.49248695]
[331.97323608 -11.51272106]
[342.37149048 0.38903761]
[341.22500610 16.15168762]
[329.21395874 26.42352676]
[313.46432495 25.11045647]
[302.16824341 34.97953796]
[290.87219238 44.84861755]
[279.57611084 54.71770096]
[268.28002930 64.58677673]
[256.98397827 74.45586395]
[260.88079834 82.01657104]
[263.38381958 90.15120697]
[264.41275024 98.60499573]
[263.93344116 107.11283875]
[261.95916748 115.40761566]
[258.55010986 123.22857666]
[253.81158447 130.32952881]
[247.89079285 136.48658752]
[240.97224426 141.50527954]
[233.27203369 145.22659302]
[225.03100586 147.53210449]
[216.50732422 148.34770203]
[207.96833801 147.64598083]
[199.68220520 145.44712830]
[191.90942383 141.81842041]
[184.89474487 136.87210083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 26]
[9 25]
[10 24]
[11 23]
[13 21]
[14 20]
[15 19]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
