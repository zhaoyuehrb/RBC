%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGCUUCGCUUUCGUUUCCCGCUGGCGCCUGGCUCCCUCCGGGUUUCGUUUCCCGCCGGCGCCUGGCUCCCGCCAGGUUUCGUUUCCGAGGCGGGGCCGAGGGCGGCGUCGCUGAGGCGCCC\
) } def
/len { sequence length } bind def

/coor [
[89.50064087 394.00186157]
[89.26733398 378.19927979]
[100.33625031 366.91857910]
[99.95626068 351.92337036]
[99.57627106 336.92819214]
[99.19628143 321.93301392]
[98.81629181 306.93783569]
[98.43630219 291.94262695]
[97.86638641 276.95346069]
[97.10665131 261.97271729]
[86.38517761 254.70719910]
[81.77053070 242.39706421]
[85.17344666 229.49638367]
[95.55910492 220.81335449]
[95.17911530 205.81816101]
[94.79912567 190.82298279]
[94.41913605 175.82778931]
[86.36190033 163.30061340]
[93.74712372 149.30886841]
[93.36712646 134.31367493]
[92.98713684 119.31848907]
[82.82142639 113.64138031]
[76.84668732 102.78432465]
[77.56295013 89.66189575]
[85.53794861 78.28717804]
[73.91271210 68.80804443]
[62.28747559 59.32891464]
[50.66224289 49.84978485]
[39.03700638 40.37065506]
[27.41177177 30.89152336]
[18.67671394 27.84390831]
[15.61608887 21.02202797]
[4.23471737 11.25144100]
[-7.14665461 1.48085415]
[-6.77217579 16.47617912]
[-15.95684719 28.33542824]
[-30.56910515 31.72392845]
[-44.03588104 25.11742020]
[-50.29938126 11.48772526]
[-46.54207611 -3.03407526]
[-34.45413208 -11.91560364]
[-19.47269440 -11.16149521]
[-28.95182610 -22.78672981]
[-38.43095779 -34.41196442]
[-53.91584778 -33.41310120]
[-67.01248169 -41.73522568]
[-72.68493652 -56.17831802]
[-68.75203705 -71.18871307]
[-56.72605896 -80.99460602]
[-41.23123932 -81.82543182]
[-28.22565651 -73.36171722]
[-22.71021652 -58.85794067]
[-26.80572128 -43.89109421]
[-17.32659149 -32.26586151]
[-7.84746027 -20.64062691]
[2.62393260 -9.90051746]
[14.00530434 -0.12993047]
[25.38667679 9.64065647]
[36.89090347 19.26628876]
[48.51613617 28.74541855]
[60.14137268 38.22454834]
[71.76660919 47.70367813]
[83.39183807 57.18281174]
[95.01707458 66.66194153]
[109.97377014 67.80093384]
[122.90035248 60.19150162]
[135.82693481 52.58206558]
[148.75350952 44.97262573]
[154.64514160 37.83975983]
[162.10534668 37.33892822]
[175.22055054 30.05939865]
[188.33575439 22.77986908]
[201.45094299 15.50033855]
[214.56614685 8.22080994]
[227.68135071 0.94128013]
[236.71888733 -15.04168129]
[254.19842529 -14.19271660]
[267.12500000 -21.80215263]
[268.48251343 -37.25973511]
[278.69186401 -48.94514084]
[293.82736206 -52.36509705]
[308.06912231 -46.20455551]
[315.94085693 -32.83237457]
[314.41574097 -17.39043045]
[304.08023071 -5.81646299]
[288.90850830 -2.56090045]
[274.73443604 -8.87557316]
[261.80786133 -1.26613641]
[258.43423462 10.42479229]
[247.62944031 16.84891129]
[234.96087646 14.05647945]
[221.84567261 21.33600807]
[208.73048401 28.61553764]
[195.61528015 35.89506912]
[182.50007629 43.17459869]
[169.38488770 50.45412827]
[156.36294556 57.89920807]
[143.43637085 65.50864410]
[130.50978088 73.11808014]
[117.58320618 80.72751617]
[122.98257446 103.95344543]
[107.98232269 118.93849945]
[108.36231232 133.93368530]
[108.74230957 148.92886353]
[116.82672119 162.52861023]
[109.41432190 175.44779968]
[109.79431152 190.44299316]
[110.17430115 205.43817139]
[110.55429077 220.43336487]
[123.43312836 232.19097900]
[123.87263489 249.28771973]
[112.08740234 261.21298218]
[112.84713745 276.19372559]
[116.44161987 284.71832275]
[113.43148804 291.56265259]
[113.81147766 306.55783081]
[114.19146729 321.55300903]
[114.57145691 336.54821777]
[114.95144653 351.54339600]
[115.33143616 366.53857422]
[126.95751190 377.24417114]
[127.52489471 393.03826904]
[116.69696808 404.55050659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 120]
[4 119]
[5 118]
[6 117]
[7 116]
[8 115]
[9 113]
[10 112]
[14 109]
[15 108]
[16 107]
[17 106]
[19 104]
[20 103]
[21 102]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[32 58]
[33 57]
[34 56]
[42 55]
[43 54]
[44 53]
[65 100]
[66 99]
[67 98]
[68 97]
[70 96]
[71 95]
[72 94]
[73 93]
[74 92]
[75 91]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
