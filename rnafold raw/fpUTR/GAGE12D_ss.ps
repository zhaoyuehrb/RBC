%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCACUGGGCGUCUUCUGCCCGGCCCCUUCGCCCACGUGAAGAACGCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[83.75142670 211.35339355]
[92.07081604 197.22117615]
[91.70269775 182.22569275]
[91.33457947 167.23020935]
[90.96646118 152.23472595]
[90.59834290 137.23924255]
[75.47406006 126.31921387]
[68.13684082 110.48165894]
[58.06345749 121.59592438]
[47.99007416 132.71018982]
[37.91669083 143.82446289]
[27.84330559 154.93872070]
[27.19119263 170.96852112]
[14.16734886 180.33650208]
[-1.23745024 175.85635376]
[-7.20595980 160.96485901]
[0.84034944 147.08551025]
[16.72903824 144.86534119]
[26.80242157 133.75106812]
[36.87580490 122.63680267]
[46.94919205 111.52253723]
[57.02257538 100.40827179]
[52.31734848 86.16535187]
[37.60556793 83.23899841]
[22.89379120 80.31263733]
[8.58738518 90.29152679]
[-8.19028664 86.95384216]
[-17.22556496 72.82587433]
[-32.00473022 70.26145172]
[-46.78389359 67.69702148]
[-61.56305695 65.13259125]
[-76.34222412 62.56816483]
[-91.12139130 60.00373459]
[-106.32136536 66.15944672]
[-119.08418274 55.86175537]
[-116.28055573 39.70404434]
[-100.79460907 34.30797958]
[-88.55696106 45.22457123]
[-73.77779388 47.78899765]
[-58.99863052 50.35342789]
[-44.21946716 52.91785431]
[-29.44030190 55.48228455]
[-14.66113663 58.04671097]
[-5.21350002 49.19513321]
[7.80590010 47.40716553]
[19.63639641 53.56431961]
[25.82014465 65.60086060]
[40.53192520 68.52721405]
[55.24370193 71.45356750]
[68.72382355 64.87432861]
[75.46798706 51.47596359]
[82.21215820 38.07759857]
[88.95632935 24.67923355]
[95.70050049 11.28086853]
[102.44467163 -2.11749554]
[109.02391052 -15.59761238]
[115.43724060 -29.15745163]
[121.85057068 -42.71729279]
[122.71183777 -51.91963196]
[128.59127808 -56.52825165]
[135.33544922 -69.92661285]
[141.91470337 -83.40673065]
[148.32801819 -96.96657562]
[154.74134827 -110.52641296]
[161.15467834 -124.08625031]
[167.56800842 -137.64608765]
[165.59800720 -155.90531921]
[180.30413818 -165.39823914]
[186.38276672 -179.11138916]
[192.46138000 -192.82453918]
[190.18344116 -209.06469727]
[203.27363586 -218.94290161]
[218.26589966 -212.29728699]
[219.73747253 -195.96430969]
[206.17453003 -186.74591064]
[200.09590149 -173.03277588]
[194.01728821 -159.31962585]
[198.08135986 -147.85615540]
[193.04455566 -136.34509277]
[181.12783813 -131.23275757]
[174.71452332 -117.67292786]
[168.30119324 -104.11308289]
[161.88786316 -90.55324554]
[155.47453308 -76.99340820]
[155.45857239 -69.52299500]
[148.73382568 -63.18244553]
[141.98965454 -49.78408051]
[135.41040039 -36.30396652]
[128.99708557 -22.74412537]
[122.58375549 -9.18428612]
[122.56778717 -1.71387625]
[115.84303284 4.62667418]
[109.09886169 18.02503967]
[102.35469818 31.42340279]
[95.61052704 44.82176971]
[88.86635590 58.22013092]
[82.12218475 71.61849976]
[100.68571472 65.24766541]
[120.36009216 70.34044647]
[134.43591309 85.95094299]
[137.68360901 107.42282867]
[151.08197021 114.16699982]
[164.48033142 120.91117096]
[180.81271362 119.43283844]
[190.03669739 132.99197388]
[182.66346741 147.64009094]
[166.27793884 148.30845642]
[157.73616028 134.30953979]
[144.33779907 127.56536102]
[130.93943787 120.82119751]
[124.60302734 124.83367920]
[133.12786865 137.17576599]
[141.65270996 149.51783752]
[154.48965454 157.27754211]
[154.64529419 172.27673340]
[141.97213745 180.30113220]
[128.48014832 173.74623108]
[126.95477295 158.82521057]
[119.44249725 145.84193420]
[111.93022919 132.85864258]
[105.59382629 136.87112427]
[105.96194458 151.86660767]
[106.33006287 166.86209106]
[106.69818115 181.85757446]
[107.06629944 196.85305786]
[116.06909943 210.56004333]
[108.45917511 225.08660889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[23 49]
[24 48]
[25 47]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[56 90]
[57 89]
[58 88]
[60 87]
[61 86]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[68 77]
[69 76]
[70 75]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
