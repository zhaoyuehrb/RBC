%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGACCGCCCUUUGCCACUCCCCCUGCCUCCUCUCCGCCUUUAACUUCUCGGGAAGAUGAGGCAGUUUGGCAUCUGUGGCCGAGUUGCUGUUGCCGGGUGAUAGUUGGAGCGGAGACUUAGCAUA\
) } def
/len { sequence length } bind def

/coor [
[172.29875183 405.92477417]
[169.71434021 391.14910889]
[167.12991333 376.37341309]
[154.83108521 368.05029297]
[151.99963379 353.10244751]
[160.81307983 340.25875854]
[158.22866821 325.48306274]
[155.64424133 310.70739746]
[153.05982971 295.93170166]
[150.29286194 281.18911743]
[147.34376526 266.48187256]
[135.05552673 254.01782227]
[140.94856262 236.62481689]
[137.63658142 221.99502563]
[134.32461548 207.36523438]
[123.96812439 196.66046143]
[128.46740723 181.49249268]
[125.15544128 166.86270142]
[121.84347534 152.23291016]
[118.53150177 137.60311890]
[115.21953583 122.97332001]
[98.97383118 126.27645111]
[84.58763123 119.72917938]
[77.17423248 106.64997864]
[78.77981567 92.47818756]
[67.11872864 83.04319000]
[55.45765305 73.60819244]
[43.79656982 64.17319489]
[32.13549042 54.73819351]
[20.47441101 45.30319214]
[8.81333065 35.86819458]
[-6.78175831 33.20290756]
[-11.80924606 19.18243408]
[-23.47032738 9.74743462]
[-35.13140869 0.31243581]
[-46.90828705 -8.97761536]
[-58.79917145 -18.12129784]
[-71.75758362 -10.21914291]
[-86.69622040 -7.53557062]
[-101.59475708 -10.43351173]
[-114.43828583 -18.52104378]
[-123.48983002 -30.70439339]
[-127.52523804 -45.33586121]
[-125.99875641 -60.43666840]
[-119.11682892 -73.96454620]
[-107.81017303 -84.08996582]
[-93.60793304 -89.44354248]
[-78.43083954 -89.30125427]
[-64.33146667 -83.68234253]
[-53.21664810 -73.34671783]
[-46.58955765 -59.69218826]
[-45.34646606 -44.56541824]
[-49.65548706 -30.01218033]
[-37.76460648 -20.86849785]
[-30.46600533 -19.26798248]
[-25.69640732 -11.34864426]
[-14.03532791 -1.91364551]
[-2.37424731 7.52135372]
[12.38676357 9.51178837]
[18.24832916 24.20711327]
[29.90941048 33.64211273]
[41.57049179 43.07711411]
[53.23157120 52.51211166]
[64.89265442 61.94710922]
[76.55373383 71.38211060]
[88.21481323 80.81710815]
[98.06734467 76.30394745]
[109.47541046 76.82677460]
[119.88875580 82.79702759]
[126.74385834 93.35364532]
[139.07237244 84.80920410]
[151.40089417 76.26475525]
[163.72941589 67.72030640]
[170.66439819 53.50002289]
[185.53236389 52.60948944]
[192.46734619 38.38920212]
[207.33531189 37.49866867]
[219.66383362 28.95422173]
[231.99235535 20.40977669]
[244.32087708 11.86532974]
[256.64938354 3.32088423]
[266.22341919 -10.67105198]
[282.31890869 -5.34453058]
[281.65621948 11.59646034]
[265.19384766 15.64940548]
[252.86532593 24.19385147]
[240.53680420 32.73829651]
[228.20828247 41.28274536]
[215.87976074 49.82719040]
[209.82658386 63.43632126]
[194.07681274 64.93801117]
[188.02363586 78.54714203]
[172.27386475 80.04882812]
[159.94534302 88.59327698]
[147.61682129 97.13772583]
[135.28829956 105.68216705]
[129.84933472 119.66135406]
[133.16130066 134.29115295]
[136.47326660 148.92094421]
[139.78523254 163.55073547]
[143.09721375 178.18052673]
[153.69059753 189.93173218]
[148.95440674 204.05326843]
[152.26638794 218.68305969]
[155.57835388 233.31285095]
[166.09954834 240.89468384]
[168.51243591 253.22697449]
[162.05099487 263.53277588]
[165.00009155 278.24002075]
[169.80329895 286.13903809]
[167.83551025 293.34729004]
[170.41993713 308.12295532]
[173.00434875 322.89865112]
[175.58877563 337.67434692]
[188.23857117 346.76388550]
[190.64906311 361.78533936]
[181.90559387 373.78900146]
[184.49002075 388.56466675]
[187.07443237 403.34036255]
[201.07040405 410.04055786]
[208.42547607 423.70373535]
[206.31149292 439.07611084]
[195.54130554 450.24673462]
[180.25628662 452.92025757]
[166.33381653 446.06863403]
[159.12739563 432.32647705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[6 114]
[7 113]
[8 112]
[9 111]
[10 109]
[11 108]
[13 105]
[14 104]
[15 103]
[17 101]
[18 100]
[19 99]
[20 98]
[21 97]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[33 58]
[34 57]
[35 56]
[36 54]
[37 53]
[70 96]
[71 95]
[72 94]
[73 93]
[75 91]
[77 89]
[78 88]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
