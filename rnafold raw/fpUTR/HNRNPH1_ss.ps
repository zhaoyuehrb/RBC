%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGGGACCUUAUUUAGGUUGCGCAGGCGCCCGCUGGCCAUUUCGUCUUAGCCACGCAGAAGUCGCGUGUCUAGGUGAGUCGCGGUGGGUCCUCGCUUGCAGUUCAGCGACCACGUUUGUUUCGACGCCGGACCGCGUAAGAGACG\
) } def
/len { sequence length } bind def

/coor [
[90.27384949 166.68904114]
[75.27722931 167.00770569]
[67.50287628 154.17962646]
[74.72553253 141.03247070]
[67.22722626 141.19166565]
[65.90990448 156.95793152]
[52.37252426 163.16990662]
[43.97290039 175.59754944]
[35.57328033 188.02519226]
[27.17365837 200.45283508]
[18.77403641 212.88049316]
[20.39636612 228.84130859]
[8.82889748 239.95765686]
[-7.05479527 237.70202637]
[-15.07010365 223.80474854]
[-9.06836891 208.92662048]
[6.34639120 204.48086548]
[14.74601364 192.05322266]
[23.14563560 179.62557983]
[31.54525757 167.19793701]
[39.94487762 154.77027893]
[40.66140366 139.89292908]
[54.79957962 132.79203796]
[55.59521484 117.81315613]
[48.55939102 104.56562805]
[41.52356720 91.31809235]
[34.48773956 78.07055664]
[27.45191574 64.82302094]
[20.41609001 51.57548904]
[13.38026524 38.32795334]
[5.78853846 25.39096451]
[-2.34540963 12.78783417]
[-10.47935772 0.18470414]
[-18.61330605 -12.41842651]
[-26.74725342 -25.02155685]
[-34.88120270 -37.62468719]
[-43.01514816 -50.22781754]
[-55.55818176 -49.26823044]
[-67.24136353 -53.73301315]
[-75.84739685 -62.70856094]
[-79.77136230 -74.43163300]
[-78.31980133 -86.63552094]
[-71.83239746 -96.98831177]
[-79.42412567 -109.92530060]
[-87.01585388 -122.86228943]
[-94.60757446 -135.79927063]
[-101.69990540 -141.66763306]
[-102.21979523 -149.09240723]
[-109.53521729 -162.18762207]
[-116.85064697 -175.28283691]
[-124.16606903 -188.37805176]
[-131.48149109 -201.47325134]
[-144.96653748 -209.74755859]
[-144.41879272 -224.63209534]
[-151.73422241 -237.72731018]
[-159.04963684 -250.82250977]
[-166.36506653 -263.91772461]
[-173.68049622 -277.01293945]
[-189.07344055 -279.76809692]
[-199.05439758 -291.80615234]
[-198.91064453 -307.44308472]
[-188.71008301 -319.29559326]
[-173.26907349 -321.76733398]
[-159.87840271 -313.69119263]
[-154.86074829 -298.88046265]
[-160.58528137 -284.32836914]
[-153.26985168 -271.23315430]
[-145.95442200 -258.13793945]
[-138.63900757 -245.04272461]
[-131.32357788 -231.94750977]
[-118.36178589 -224.60986328]
[-118.38628387 -208.78868103]
[-111.07085419 -195.69346619]
[-103.75543213 -182.59826660]
[-96.44001007 -169.50305176]
[-89.12458038 -156.40783691]
[-81.67058563 -143.39100647]
[-74.07886505 -130.45401001]
[-66.48713684 -117.51702881]
[-58.89540863 -104.58003235]
[-41.31166458 -103.71382141]
[-27.61410141 -92.40698242]
[-23.35729218 -75.00221252]
[-30.41201973 -58.36176300]
[-22.27807045 -45.75863266]
[-14.14412308 -33.15550232]
[-6.01017523 -20.55237389]
[2.12377262 -7.94924402]
[10.25772095 4.65388632]
[18.39166832 17.25701714]
[21.17434311 17.95658302]
[23.83673477 19.83916473]
[25.91213036 22.86063576]
[26.96012306 26.80356026]
[26.62779999 31.29212761]
[33.66362381 44.53966141]
[40.69945145 57.78719711]
[47.73527527 71.03472900]
[54.77109909 84.28226471]
[61.80692673 97.52980042]
[68.84275055 110.77733612]
[69.19772339 93.64673615]
[77.89221191 79.82038116]
[91.75122833 72.80874634]
[106.44281006 73.88603210]
[117.81817627 81.92756653]
[123.08328247 93.95671844]
[138.05287170 94.91129303]
[153.02247620 95.86585999]
[167.99206543 96.82042694]
[182.43898010 89.06036377]
[196.23854065 97.92063141]
[195.19493103 114.28653717]
[180.38174438 121.32225037]
[167.03749084 111.79002380]
[152.06790161 110.83545685]
[137.09831238 109.88088989]
[122.12870789 108.92631531]
[119.08339691 121.05303192]
[109.28041840 131.63540649]
[118.19992065 143.69535828]
[127.11941528 155.75532532]
[136.03890991 167.81527710]
[144.95841980 179.87522888]
[161.99098206 186.78846741]
[163.36773682 204.25373840]
[172.54119873 216.12165833]
[181.71467590 227.98957825]
[190.88813782 239.85749817]
[206.59428406 241.61607361]
[216.39128113 254.01745605]
[214.46675110 269.70413208]
[201.96249390 279.36947632]
[186.29704285 277.27920532]
[176.76443481 264.67343140]
[179.02021790 249.03096008]
[169.84675598 237.16304016]
[160.67327881 225.29512024]
[151.49981689 213.42720032]
[139.50413513 211.56153870]
[131.76963806 201.68881226]
[132.89845276 188.79472351]
[123.97895813 176.73477173]
[115.05946350 164.67481995]
[106.13996124 152.61485291]
[97.22046661 140.55490112]
[89.72215271 140.71409607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[24 101]
[25 100]
[26 99]
[27 98]
[28 97]
[29 96]
[30 95]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[36 85]
[37 84]
[43 80]
[44 79]
[45 78]
[46 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[107 118]
[108 117]
[109 116]
[110 115]
[120 146]
[121 145]
[122 144]
[123 143]
[124 142]
[126 139]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
