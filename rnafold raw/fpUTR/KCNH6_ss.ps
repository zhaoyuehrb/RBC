%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCUGCUGAGCCCGAGGACAGACGGAGACGCCGGGAGCCAGUGGCGCCUGUGGCUCCGGGCAGGGGCCGCGGCCGAAAG\
) } def
/len { sequence length } bind def

/coor [
[168.69128418 158.64207458]
[176.14285278 145.62385559]
[189.31950378 138.46026611]
[175.12727356 133.60426331]
[160.93505859 128.74824524]
[146.74282837 123.89224243]
[132.55061340 119.03623199]
[118.35838318 114.18022156]
[104.16616058 109.32421875]
[95.89628601 109.89498901]
[89.52411652 103.99494934]
[75.53086090 98.59227753]
[61.43547440 93.46197510]
[47.24325180 88.60597229]
[35.16847229 93.60382080]
[23.34250450 89.07390594]
[18.04692650 78.01709747]
[4.05367088 72.61443329]
[-0.25971931 73.63809967]
[-4.29578924 73.31921387]
[-7.67901564 71.89817047]
[-10.14599419 69.70970154]
[-11.56594563 67.13975525]
[-11.94621944 64.57898712]
[-24.63601685 56.58091736]
[-41.03488922 56.48606110]
[-48.91596222 42.10479736]
[-40.17186356 28.23134232]
[-23.79777336 29.13751411]
[-16.63794899 43.89112091]
[-3.94815302 51.88918686]
[9.45633698 58.62117767]
[23.44959259 64.02384186]
[40.48045349 60.28587341]
[52.09925842 74.41374969]
[66.29148102 79.26975250]
[73.83448792 78.43338776]
[80.93352509 84.59902191]
[94.92678070 90.00169373]
[109.02217102 95.13199615]
[123.21439362 99.98799896]
[137.40661621 104.84400940]
[151.59884644 109.70001984]
[165.79106140 114.55603027]
[179.98329163 119.41204071]
[194.17550659 124.26805115]
[208.99536133 126.58583069]
[223.99253845 126.29496002]
[238.98971558 126.00408936]
[247.76940918 122.63829803]
[254.57145691 126.00408936]
[269.56863403 126.29496002]
[284.56582642 126.58583069]
[299.56298828 126.87670135]
[314.56018066 127.16757202]
[329.55734253 127.45844269]
[344.55453491 127.74931335]
[359.55169678 128.04017639]
[372.06399536 117.99915314]
[387.68341064 121.66160583]
[394.42807007 136.21801758]
[387.12405396 150.50195312]
[371.37435913 153.55599976]
[359.26083374 143.03735352]
[344.26367188 142.74649048]
[329.26647949 142.45561218]
[314.26928711 142.16474915]
[299.27212524 141.87388611]
[284.27493286 141.58300781]
[269.27777100 141.29214478]
[254.28057861 141.00126648]
[239.28057861 141.00126648]
[224.28340149 141.29214478]
[209.28622437 141.58300781]
[219.64738464 152.42950439]
[222.76722717 167.10147095]
[217.71575928 181.22529602]
[205.99877930 190.59078979]
[191.10903931 192.40614319]
[177.48504639 186.13023376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[11 39]
[12 38]
[13 36]
[14 35]
[17 33]
[18 32]
[24 31]
[25 30]
[47 74]
[48 73]
[49 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
