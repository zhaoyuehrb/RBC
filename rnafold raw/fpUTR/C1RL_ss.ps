%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACAUUUCCAGGAACUUCCUCCUCCCCCACCGGCCUUCACCUUUUGUUCCCUAUCCUGGGCCAGUUCUCUCGCAGGUCCCAGAUGUCCAGUUCCAG\
) } def
/len { sequence length } bind def

/coor [
[75.01834869 307.77862549]
[66.52831268 320.35971069]
[54.06454086 329.02105713]
[39.31266403 332.59127808]
[24.26774788 330.58755493]
[10.96449566 323.28085327]
[1.20206273 311.65933228]
[-3.69926167 297.29473877]
[-3.07661414 282.12976074]
[2.98579764 268.21533203]
[13.66808224 257.43325806]
[27.52554703 251.24171448]
[42.68408585 250.47807312]
[47.36458969 236.22702026]
[52.04508972 221.97595215]
[56.72559357 207.72488403]
[61.40609360 193.47381592]
[66.08659363 179.22274780]
[56.69816589 174.50714111]
[47.95333862 168.68411255]
[39.98209381 161.84022522]
[32.90290833 154.07719421]
[26.82099915 145.51039124]
[21.82676506 136.26716614]
[17.99443626 126.48490143]
[15.38097382 116.30898285]
[14.02522087 105.89065552]
[13.94732952 95.38477325]
[15.14845657 84.94749451]
[17.61075020 74.73394012]
[21.29761124 64.89591980]
[26.15424347 55.57965851]
[32.10845947 46.92362976]
[39.07176208 39.05648422]
[29.42994881 27.56581497]
[13.66593552 26.43823433]
[3.37970161 14.43952751]
[4.67388725 -1.31168270]
[16.78067589 -11.47048378]
[32.51732254 -10.00983906]
[42.54755402 2.20367694]
[40.92061615 17.92400169]
[50.56242752 29.41466904]
[59.81634903 23.76590919]
[69.70629120 19.32377434]
[80.07571411 16.15857124]
[90.76049805 14.32039833]
[101.59152222 13.83835220]
[112.39736176 14.72006130]
[123.00697327 16.95157051]
[133.25242615 20.49755859]
[142.97157288 25.30190086]
[152.01057434 31.28855515]
[160.22634888 38.36276627]
[167.48887634 46.41256332]
[173.68319702 55.31053162]
[178.71127319 64.91584015]
[182.49351501 75.07646179]
[197.17555237 72.00436401]
[211.85758972 68.93225861]
[226.53962708 65.86016083]
[241.22166443 62.78805923]
[255.85310364 59.48340225]
[270.43026733 55.94701767]
[282.01730347 45.17430496]
[296.20996094 49.69293594]
[310.78713989 46.15655136]
[318.79769897 32.53281784]
[334.11624146 28.64463997]
[347.65454102 36.79880905]
[351.38052368 52.15760040]
[343.08367920 65.60891724]
[327.68637085 69.17232513]
[314.32351685 60.73372650]
[299.74633789 64.27011108]
[289.20196533 74.78987885]
[273.96667480 70.52419281]
[259.38949585 74.06057739]
[253.52416992 78.78311157]
[244.29376221 77.47010040]
[229.61172485 80.54219818]
[214.92968750 83.61429596]
[200.24765015 86.68639374]
[185.56561279 89.75849915]
[185.14086914 113.31896210]
[178.35006714 135.88356018]
[165.70095825 155.76510620]
[148.13932800 171.47703552]
[126.97827911 181.84457397]
[103.80003357 186.09251404]
[80.33766174 183.90324402]
[75.65715790 198.15431213]
[70.97666168 212.40538025]
[66.29615784 226.65644836]
[61.61565399 240.90751648]
[56.93515396 255.15858459]
[68.68910980 264.76113892]
[76.17710876 277.96319580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 96]
[14 95]
[15 94]
[16 93]
[17 92]
[18 91]
[34 43]
[35 42]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[63 78]
[64 77]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
