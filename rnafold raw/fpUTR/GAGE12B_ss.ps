%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[71.75614929 124.16348267]
[65.22255707 113.11938477]
[62.83379364 100.51170349]
[64.87454987 87.84303284]
[51.98101044 80.17774963]
[39.08746338 72.51247406]
[26.19392014 64.84719086]
[13.30037689 57.18191147]
[0.40683275 49.51663208]
[-12.63117313 42.09973145]
[-25.80885696 34.93393707]
[-38.98654175 27.76813698]
[-48.27657700 26.35163498]
[-52.52402878 20.06709862]
[-65.41757202 12.40181828]
[-78.45558167 4.98491907]
[-91.63326263 -2.18087840]
[-104.81095123 -9.34667587]
[-117.98863220 -16.51247215]
[-131.16632080 -23.67827034]
[-149.43330383 -22.67819405]
[-158.19897461 -37.75349426]
[-171.64146423 -44.40929413]
[-185.08395386 -51.06509018]
[-201.40623474 -49.47924805]
[-210.71931458 -62.97734070]
[-203.44268799 -77.67369080]
[-187.06192017 -78.44995117]
[-178.42814636 -64.50757599]
[-164.98567200 -57.85177612]
[-151.54318237 -51.19598007]
[-139.81991577 -54.77119064]
[-128.48745728 -49.12617874]
[-124.00051880 -36.85595322]
[-110.82283020 -29.69015694]
[-97.64514923 -22.52435875]
[-84.46746826 -15.35856247]
[-71.28977966 -8.19276524]
[-63.71725845 -7.75329781]
[-57.75229263 -0.49172559]
[-44.85874939 7.17355442]
[-31.82074356 14.59045410]
[-18.64306068 21.75625229]
[-5.46537590 28.92204857]
[2.10714793 29.36151505]
[8.07211304 36.62308884]
[20.96565628 44.28836823]
[33.85919952 51.95364761]
[46.75274658 59.61892700]
[59.64628983 67.28421021]
[72.53983307 74.94948578]
[88.31304169 64.71538544]
[107.07678986 63.51016617]
[124.02967834 71.64221954]
[134.83367920 87.03067017]
[149.65788269 84.74092865]
[164.48208618 82.45118713]
[176.92021179 71.76356506]
[192.30335999 77.44606018]
[194.80667114 93.65302277]
[181.85496521 103.71210480]
[166.77183533 97.27539825]
[151.94763184 99.56513214]
[137.12341309 101.85487366]
[134.98191833 112.56399536]
[129.82046509 122.18847656]
[139.80035400 133.38677979]
[149.78024292 144.58508301]
[159.76011658 155.78337097]
[169.74000549 166.98167419]
[185.47178650 171.61235046]
[189.06387329 187.61325073]
[176.82104492 198.52403259]
[161.33766174 193.12060547]
[158.54171753 176.96156311]
[148.56182861 165.76325989]
[138.58193970 154.56495667]
[128.60205078 143.36666870]
[118.62216949 132.16836548]
[106.57377625 136.58380127]
[93.74190521 136.63911438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[10 44]
[11 43]
[12 42]
[14 41]
[15 40]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[22 31]
[23 30]
[24 29]
[55 64]
[56 63]
[57 62]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
