%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUCGCUCCGGAGCCGCGCCGCCGCCGGCCCAGCAUCUCGGGCGCCCGCCGCCCCCGCCGCCGCCGUCAGCGCGGGGAUGUAGG\
) } def
/len { sequence length } bind def

/coor [
[86.69935608 108.64442444]
[71.72135162 109.45651245]
[56.74335098 110.26859283]
[48.86070633 121.36015320]
[36.18858337 125.75106049]
[23.50948334 122.02493286]
[15.47002888 111.78439331]
[0.47247401 112.05520630]
[-14.52508068 112.32601929]
[-20.71298790 115.57985687]
[-26.67342377 115.10755157]
[-30.60553169 112.03565216]
[-45.58353424 111.22357178]
[-54.55707169 113.92932129]
[-61.08464432 110.10211945]
[-76.02355957 108.74982452]
[-90.96247864 107.39752960]
[-105.90139771 106.04523468]
[-114.96677399 108.42525482]
[-121.35192108 104.36488342]
[-136.23228455 102.47414398]
[-151.13708496 109.31365204]
[-164.35429382 99.60606384]
[-162.28718567 83.33772278]
[-147.06222534 77.24408722]
[-134.34153748 87.59378052]
[-119.46117401 89.48452759]
[-104.54910278 91.10631561]
[-89.61018372 92.45861053]
[-74.67126465 93.81090546]
[-59.73234940 95.16320038]
[-44.77145004 96.24556732]
[-29.79344940 97.05765533]
[-14.79589367 97.32846069]
[0.20166177 97.05765533]
[15.19921684 96.78684235]
[26.22524261 84.22793579]
[43.25207520 83.40128326]
[55.93126678 95.29058838]
[70.90927124 94.47850800]
[85.88726807 93.66642761]
[98.14860535 85.02584076]
[103.95134735 71.19370270]
[109.75409698 57.36155701]
[115.55683899 43.52941895]
[121.35958862 29.69727516]
[116.64247131 14.36338043]
[125.80854034 1.19665349]
[141.82637024 0.29748186]
[152.40846252 12.35563278]
[149.43713379 28.12112427]
[135.19172668 35.50002289]
[129.38897705 49.33216476]
[123.58623505 63.16430283]
[117.78349304 76.99644470]
[111.98074341 90.82859039]
[119.00687408 104.08126831]
[133.71200562 107.04081726]
[142.98156738 105.65488434]
[148.89027405 110.38180542]
[163.47898865 113.87032318]
[178.06768799 117.35883331]
[192.65638733 120.84734344]
[201.96994019 119.79696655]
[207.70414734 124.73413086]
[222.15739441 128.74705505]
[236.77439880 122.13472748]
[250.99148560 129.56802368]
[253.90252686 145.34475708]
[243.27442932 157.36236572]
[227.26014709 156.40197754]
[218.14447021 143.20030212]
[203.69122314 139.18737793]
[189.16787720 135.43605042]
[174.57917786 131.94754028]
[159.99047852 128.45903015]
[145.40176392 124.97051239]
[130.75245667 121.74595642]
[116.04732513 118.78640747]
[121.12400818 132.90119934]
[117.89543915 147.54962158]
[107.35547638 158.22244263]
[92.74863434 161.63423157]
[78.57137299 156.73474121]
[69.18787384 145.03216553]
[67.48667908 130.12895203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[7 36]
[8 35]
[9 34]
[12 33]
[13 32]
[15 31]
[16 30]
[17 29]
[18 28]
[20 27]
[21 26]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[57 79]
[58 78]
[60 77]
[61 76]
[62 75]
[63 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
