%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGUCCGGGCCGGCGCGGCUGCCGCUCGGCGCCGCGGUCCUCGUGCCAGUGAGCGCCGCGGCCGCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[47.06142807 215.41395569]
[44.40739822 218.46826172]
[41.22682190 220.06805420]
[38.14073563 220.24713135]
[28.33942604 231.60205078]
[18.53811836 242.95698547]
[15.99839783 259.15826416]
[0.60252309 264.80621338]
[-11.81155014 254.09065247]
[-8.47328854 238.03488159]
[7.18319178 233.15567017]
[16.98450089 221.80075073]
[26.78581047 210.44581604]
[35.60258865 198.31056213]
[43.37299347 185.48010254]
[51.14339828 172.64964294]
[58.64339828 159.65925598]
[65.86970520 146.51464844]
[73.09600830 133.37005615]
[80.32231140 120.22545624]
[87.54862213 107.08085632]
[87.44783020 93.09938812]
[99.30677795 85.69284058]
[106.53308868 72.54824066]
[113.75939178 59.40364075]
[120.98569489 46.25903702]
[128.21200562 33.11443710]
[128.47111511 26.02258301]
[131.92910767 21.04439735]
[136.63319397 19.20940590]
[144.93406677 6.71558809]
[153.23493958 -5.77823067]
[161.53581238 -18.27204895]
[169.83668518 -30.76586723]
[177.87408447 -43.43078613]
[185.64448547 -56.26124954]
[193.41488647 -69.09171295]
[200.91488647 -82.08209229]
[208.14120483 -95.22669220]
[215.36750793 -108.37129974]
[210.71812439 -123.47621918]
[218.18504333 -137.40534973]
[233.33828735 -141.89477539]
[247.18768311 -134.28100586]
[251.51664734 -119.08114624]
[243.75688171 -105.31301117]
[228.51210022 -101.14498901]
[221.28579712 -88.00038910]
[214.05949402 -74.85578918]
[213.58418274 -67.25533295]
[206.24536133 -61.32130814]
[198.47494507 -48.49084473]
[190.70454407 -35.66038132]
[189.91137695 -28.08649826]
[182.33050537 -22.46499443]
[174.02963257 -9.97117615]
[165.72875977 2.52264261]
[157.42788696 15.01646137]
[149.12699890 27.51028061]
[141.35659790 40.34074402]
[134.13029480 53.48534393]
[126.90399170 66.62994385]
[119.67768860 79.77454376]
[112.45137787 92.91914368]
[112.55216980 106.90061188]
[100.69322205 114.30715942]
[93.46691132 127.45175934]
[86.24060822 140.59635925]
[79.01430511 153.74096680]
[71.78800201 166.88555908]
[70.31838989 176.20817566]
[63.97386169 180.42004395]
[56.20345688 193.25050354]
[48.43305206 206.08096313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[14 74]
[15 73]
[16 72]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 53]
[36 52]
[37 51]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
