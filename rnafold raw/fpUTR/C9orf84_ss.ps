%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCUAAAGAAGAAAGUGCUUCAAGAAGGAAGUAGUAGUCCAAUGUGUUGGGCUCCUGUUAAAAGCUCAAGUUAUGUGAGGAUAGUGAGUUGACCAUUAGCUUGACUAAAUUCUCAGCUGUUUCAGUUCCGGGA\
) } def
/len { sequence length } bind def

/coor [
[122.74069977 109.97151947]
[118.32777405 121.58103943]
[107.88382721 130.80305481]
[101.82501221 144.52496338]
[95.76619720 158.24687195]
[89.70738220 171.96878052]
[94.13870239 187.38769531]
[84.72950745 200.38179016]
[68.69772339 200.98312378]
[58.34156799 188.73037720]
[61.60539246 173.02284241]
[75.98547363 165.90995789]
[82.04428864 152.18804932]
[88.10310364 138.46615601]
[94.16191864 124.74423981]
[83.92912292 113.77655792]
[73.57677460 125.74065399]
[58.97827530 122.78546906]
[44.86976624 127.87957764]
[30.76125526 132.97367859]
[16.65274429 138.06779480]
[2.54423404 143.16189575]
[-11.56427670 148.25601196]
[-18.05247688 162.66706848]
[-32.85989761 168.19117737]
[-47.20156097 161.55097961]
[-52.56880951 146.68598938]
[-45.77735138 132.41532898]
[-30.85643959 127.20554352]
[-16.65838432 134.14749146]
[-2.54987311 129.05339050]
[11.55863762 123.95928192]
[25.66714859 118.86517334]
[39.77565765 113.77106476]
[53.88417053 108.67696381]
[63.22738266 97.07723236]
[78.83501434 99.66805267]
[80.56366730 84.76799011]
[67.99620056 76.57904053]
[55.42873764 68.39009094]
[42.86127853 60.20114517]
[30.29381371 52.01219559]
[17.72635269 43.82324600]
[5.15888977 35.63429642]
[-11.23667622 35.29159164]
[-18.89948845 20.79285622]
[-9.94670391 7.05314541]
[6.41182184 8.20669556]
[13.34783840 23.06683350]
[25.91530037 31.25578308]
[38.48276520 39.44473267]
[51.05022430 47.63368225]
[63.61768723 55.82263184]
[76.18515015 64.01158142]
[88.75261688 72.20053101]
[103.63171387 74.10115051]
[117.85412598 69.33428192]
[132.07653809 64.56740570]
[146.29895020 59.80053711]
[148.62026978 51.57410812]
[153.98716736 45.04340744]
[161.43907166 41.25772095]
[169.68931580 40.78558350]
[177.34698486 43.63057327]
[183.15155029 49.24339294]
[197.75311279 45.80913544]
[212.35469055 42.37487411]
[226.95625305 38.94061661]
[230.30979919 25.31046867]
[239.18171692 14.51888657]
[251.78562927 8.64850521]
[265.62240601 8.80006886]
[277.97567749 14.88648891]
[286.44503784 25.66119957]
[301.12203979 22.56512260]
[309.76675415 9.60723209]
[324.69540405 6.67645025]
[336.99551392 14.99770546]
[351.67251587 11.90162849]
[366.34951782 8.80555248]
[381.02651978 5.70947552]
[395.70352173 2.61339903]
[410.38052368 -0.48267746]
[424.98208618 -3.91693568]
[439.50042725 -7.68754339]
[454.01876831 -11.45815086]
[468.53713989 -15.22875786]
[483.01095581 -19.16679764]
[497.43835449 -23.27174187]
[511.86572266 -27.37668610]
[526.29309082 -31.48163223]
[540.72052002 -35.58657837]
[555.14788818 -39.69152069]
[569.57525635 -43.79646683]
[583.15509033 -53.94657516]
[596.66778564 -43.70728683]
[590.56933594 -27.88814163]
[573.68023682 -29.36908150]
[559.25280762 -25.26413727]
[544.82543945 -21.15919113]
[530.39807129 -17.05424690]
[515.97070312 -12.94930172]
[501.54330444 -8.84435749]
[487.11590576 -4.73941231]
[481.49288940 0.16062161]
[472.30773926 -0.71040714]
[457.78939819 3.06020045]
[443.27102661 6.83080769]
[428.75268555 10.60141563]
[425.56683350 14.26868534]
[420.01004028 15.91831875]
[413.47659302 14.19432163]
[398.79959106 17.29039764]
[384.12258911 20.38647461]
[369.44558716 23.48255157]
[354.76858521 26.57862854]
[340.09158325 29.67470360]
[332.20068359 42.25520325]
[317.36019897 45.60414505]
[304.21813965 37.24212265]
[289.54113770 40.33819962]
[284.92727661 55.78133392]
[273.10458374 66.87310028]
[257.21640015 70.53540039]
[241.55244446 65.68286896]
[230.39051819 53.54218674]
[215.78894043 56.97644424]
[201.18737793 60.41070557]
[186.58580017 63.84496307]
[172.53833008 80.26752472]
[151.06581116 74.02294922]
[136.84339905 78.78981781]
[122.62099457 83.55668640]
[108.39858246 88.32356262]
[115.73184204 91.53281403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[16 37]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[56 134]
[57 133]
[58 132]
[59 131]
[65 129]
[66 128]
[67 127]
[68 126]
[74 121]
[75 120]
[78 117]
[79 116]
[80 115]
[81 114]
[82 113]
[83 112]
[84 109]
[85 108]
[86 107]
[87 106]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
