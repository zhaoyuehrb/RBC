%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAAACCGGAAGCGGCGGCUGUCCGCGGUGCCGGCUGGGGGCGGAGAGGCGGCGGUGGGCUCCCUGGGGUGUGUGAGCCCGGUG\
) } def
/len { sequence length } bind def

/coor [
[169.90347290 202.89399719]
[168.37678528 199.22155762]
[167.99972534 194.88743591]
[158.49691772 183.28155518]
[148.99411011 171.67565918]
[134.19357300 170.45916748]
[124.39105225 158.82450867]
[125.76737976 143.30859375]
[116.26457214 131.70271301]
[106.76176453 120.09682465]
[93.95504761 120.32393646]
[83.35417175 113.13469696]
[78.82748413 101.15251923]
[82.02678680 88.74977112]
[72.94918060 76.80838013]
[58.43805695 70.50457001]
[56.89545059 55.69006348]
[47.81784058 43.74866486]
[29.13279152 42.07658386]
[17.60861015 27.67259026]
[19.99518204 9.69657898]
[10.07956791 -1.55866873]
[0.16395375 -12.81391621]
[-9.75166035 -24.06916428]
[-19.66727448 -35.32440948]
[-29.58288956 -46.57965851]
[-44.51105118 -51.81994247]
[-47.11861801 -66.48451996]
[-57.03422928 -77.73976898]
[-66.94984436 -88.99501801]
[-76.86545563 -100.25025940]
[-92.57047272 -104.97092438]
[-96.07089996 -120.99212646]
[-83.76580048 -131.83264160]
[-68.31360626 -126.34066010]
[-65.61021423 -110.16587830]
[-55.69459915 -98.91062927]
[-45.77898407 -87.65538025]
[-35.86336899 -76.40013885]
[-21.64443970 -71.96490479]
[-18.32764244 -56.49527359]
[-8.41202736 -45.24002457]
[1.50358677 -33.98477936]
[11.41920090 -22.72953033]
[21.33481598 -11.47428322]
[31.25042915 -0.21903570]
[42.79407501 -1.98777628]
[53.83360291 2.17902732]
[61.48541641 11.32024956]
[63.68868256 23.15942383]
[59.75923538 34.67105484]
[68.83684540 46.61244965]
[82.69867706 52.06212616]
[84.89057159 67.73076630]
[93.96818542 79.67215729]
[110.27133942 81.44997406]
[120.43016815 94.32443237]
[118.36765289 110.59401703]
[127.87046051 122.19990540]
[137.37327576 133.80578613]
[152.85572815 135.51785278]
[162.32760620 147.42324829]
[160.59999084 162.17285156]
[170.10279846 173.77874756]
[179.60562134 185.38462830]
[190.11602783 196.08654785]
[201.54846191 205.79734802]
[212.98089600 215.50813293]
[224.41333008 225.21893311]
[235.84576416 234.92973328]
[251.37274170 237.96669006]
[256.06396484 252.10322571]
[272.10644531 252.23956299]
[281.88836670 264.95544434]
[277.90588379 280.49633789]
[263.21398926 286.94061279]
[249.08309937 279.34475708]
[246.35317993 263.53567505]
[231.64390564 261.19326782]
[226.13496399 246.36215210]
[214.70252991 236.65136719]
[203.27009583 226.94056702]
[191.83767700 217.22978210]
[180.40524292 207.51898193]
[177.87333679 207.89369202]
[175.03686523 207.30496216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[8 60]
[9 59]
[10 58]
[14 55]
[15 54]
[17 52]
[18 51]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[28 39]
[29 38]
[30 37]
[31 36]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
