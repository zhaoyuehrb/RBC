%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGACUGACGGCGCCGGCCGCCCCUGCCCGUCGCCCGCCCGCUGCUGCCGCCCGCCCGGGGUGUGGAGCCCGGCCGCUGCUCGCGGGCUGAGUGUCUGUCGCUGCUGCCGCCUCCACCCAGCCUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[25.99441910 178.74304199]
[13.50989914 187.05789185]
[1.02537799 195.37274170]
[-11.45914268 203.68759155]
[-14.68615246 218.92649841]
[-27.46568108 227.18109131]
[-41.97375870 224.01071167]
[-54.45827866 232.32556152]
[-66.94280243 240.64041138]
[-79.42732239 248.95526123]
[-91.91184235 257.27011108]
[-104.39636230 265.58496094]
[-109.87294769 273.02239990]
[-117.28144836 273.94531250]
[-129.96176147 281.95840454]
[-137.49449158 295.87130737]
[-152.38685608 296.12951660]
[-165.06716919 304.14260864]
[-169.98532104 319.41320801]
[-185.04113770 324.95413208]
[-198.68510437 316.51483154]
[-200.45072937 300.56921387]
[-188.98356628 289.34942627]
[-173.08026123 291.46231079]
[-160.39994812 283.44921875]
[-153.77420044 270.10946655]
[-137.97485352 269.27810669]
[-125.29453278 261.26501465]
[-112.71121216 253.10044861]
[-100.22669220 244.78559875]
[-87.74217224 236.47074890]
[-75.25765228 228.15589905]
[-62.77312851 219.84104919]
[-50.28860855 211.52619934]
[-47.62184525 196.91716003]
[-35.07921219 188.30686951]
[-19.77399254 191.20306396]
[-7.28947258 182.88821411]
[5.19504833 174.57336426]
[17.67956924 166.25851440]
[25.05556297 143.66079712]
[49.35764694 140.94117737]
[60.27738953 130.65725708]
[71.19713593 120.37332153]
[82.11687469 110.08939362]
[67.79444122 114.54673767]
[54.84349442 106.97885132]
[51.69580841 92.31282806]
[60.40069580 80.09706879]
[75.29080200 78.28468323]
[86.67166138 88.05524445]
[80.72434998 74.28463745]
[74.77703857 60.51403809]
[68.82972717 46.74343491]
[54.50781631 39.51416016]
[51.37150955 23.78065491]
[61.82671356 11.61232281]
[77.85308838 12.34366608]
[87.15657043 25.41366005]
[82.60032654 40.79612350]
[88.54763794 54.56672668]
[94.49494934 68.33732605]
[100.44226837 82.10792542]
[114.21286774 88.05524445]
[128.31507874 82.94372559]
[142.41729736 77.83220673]
[156.51950073 72.72068787]
[170.62171936 67.60916901]
[184.72392273 62.49765015]
[190.93016052 51.11683655]
[202.85859680 47.18138504]
[213.88867188 52.29724121]
[228.10939026 47.52535629]
[242.33012390 42.75346756]
[256.55084229 37.98158264]
[267.17263794 26.25605583]
[281.70016479 29.54251862]
[295.92086792 24.77063179]
[306.54266357 13.04510403]
[321.07019043 16.33156776]
[335.29092407 11.55967999]
[341.76828003 0.33096024]
[353.78762817 -3.31732559]
[364.69186401 2.06155586]
[379.02291870 -2.36795545]
[393.35400391 -6.79746675]
[407.68505859 -11.22697830]
[422.01611328 -15.65648937]
[436.34719849 -20.08600044]
[445.07699585 -33.54594421]
[461.05676270 -34.96937943]
[472.02819824 -23.26437378]
[469.57495117 -7.41000319]
[455.57894897 0.43161637]
[440.77670288 -5.75493526]
[426.44564819 -1.32542396]
[412.11456299 3.10408735]
[397.78350830 7.53359842]
[383.45245361 11.96310997]
[369.12136841 16.39262009]
[357.96636963 29.88499832]
[340.06280518 25.78040886]
[325.84207153 30.55229568]
[316.23742676 41.93650436]
[300.69277954 38.99135971]
[286.47204590 43.76324463]
[276.86740112 55.14745331]
[261.32272339 52.20230865]
[247.10200500 56.97419739]
[232.88128662 61.74608231]
[218.66055298 66.51796722]
[207.83230591 80.27395630]
[189.83544922 76.59986115]
[175.73323059 81.71138000]
[161.63102722 86.82289886]
[147.52880859 91.93441772]
[133.42658997 97.04593658]
[119.32438660 102.15745544]
[111.03193665 117.74282074]
[92.40080261 121.00914001]
[81.48106384 131.29306030]
[70.56131744 141.57699585]
[59.64157486 151.86093140]
[61.31673813 158.27871704]
[61.07840347 164.86650085]
[58.97005463 171.06936646]
[55.19170380 176.37153625]
[50.08116150 180.33924866]
[44.08393097 182.65626526]
[37.71441269 183.14889526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[14 28]
[15 27]
[17 25]
[18 24]
[42 123]
[43 122]
[44 121]
[45 120]
[51 63]
[52 62]
[53 61]
[54 60]
[64 118]
[65 117]
[66 116]
[67 115]
[68 114]
[69 113]
[72 111]
[73 110]
[74 109]
[75 108]
[77 106]
[78 105]
[80 103]
[81 102]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
