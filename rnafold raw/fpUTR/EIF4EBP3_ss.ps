%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCUCAGACUCAGAGCUGCGCUCCUCGACCUCAACGCCAGGCGGUUACUUUGCUGCUCCUCCCGCUCGCU\
) } def
/len { sequence length } bind def

/coor [
[186.38302612 150.26423645]
[172.88856506 143.71446228]
[159.39410400 137.16470337]
[145.89964294 130.61492920]
[132.40518188 124.06516266]
[118.91071320 117.51539612]
[100.79103851 125.76390076]
[82.19945526 118.64255524]
[74.22705841 100.39970398]
[59.81011200 96.25825500]
[42.22293472 101.20553589]
[30.37277985 88.44292450]
[15.79100609 84.92555237]
[-2.96551633 91.71544647]
[-16.78737640 78.46358490]
[-31.61754036 76.21275330]
[-46.44770432 73.96192169]
[-61.27787018 71.71109772]
[-77.84494781 75.31222534]
[-85.89157104 60.38948822]
[-73.77954865 48.52630234]
[-59.02703857 56.88093185]
[-44.19687271 59.13175964]
[-29.36671066 61.38259125]
[-14.53654575 63.63342285]
[-6.57067680 56.65086365]
[4.16691542 55.34733582]
[13.96905899 60.42639923]
[19.30837631 70.34378052]
[33.89014816 73.86115265]
[44.56457520 67.77337646]
[56.88938141 70.80989075]
[63.95156860 81.84130096]
[78.36851501 85.98275757]
[85.30163574 78.82543182]
[94.43143463 74.83265686]
[104.39345551 74.60114288]
[113.69886780 78.16550446]
[120.95698547 84.99304199]
[125.08307648 94.06336975]
[125.46048737 104.02092743]
[138.95494080 110.57070160]
[152.44941711 117.12046814]
[165.94387817 123.67023468]
[179.43833923 130.22000122]
[192.93280029 136.76977539]
[200.64179993 130.78736877]
[209.89425659 127.83060455]
[219.55487061 128.23016357]
[228.44924927 131.90682983]
[235.50663757 138.38490295]
[239.88888550 146.85348511]
[241.08984375 156.26791382]
[238.99369812 165.47856140]
[250.77845764 174.75863647]
[268.93148804 176.82064819]
[275.08331299 193.11375427]
[287.25637817 201.87823486]
[302.36749268 197.85478210]
[316.50750732 204.53266907]
[322.99993896 218.75878906]
[318.77923584 233.81600952]
[305.83831787 242.59475708]
[290.28747559 240.94999695]
[279.46936035 229.65832520]
[278.49191284 214.05131531]
[266.31881714 205.28684998]
[254.13571167 206.89184570]
[243.87078857 199.42509460]
[241.49838257 186.54338074]
[229.71363831 177.26330566]
[209.36129761 182.28083801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[9 34]
[10 33]
[12 30]
[13 29]
[15 25]
[16 24]
[17 23]
[18 22]
[54 71]
[55 70]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
