%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAGUCCGCAACACCUCGCUCCCCAGGAGGUCUGCCAGCCUGGACUGGAAGCGUGCAACACUCCAGAGUCGUAGGAGUGAACACUGCACAGGAAUCUCUGCCCAUCUCAGGAGAAACCAAACUUGGGGAAA\
) } def
/len { sequence length } bind def

/coor [
[101.35782623 233.15917969]
[105.69683838 247.51791382]
[103.51001740 262.35763550]
[95.21351624 274.85437012]
[82.38617706 282.62994385]
[67.46906281 284.20465088]
[53.30092239 279.27880859]
[42.57797241 268.78985596]
[37.34080505 254.73382568]
[38.58683777 239.78314209]
[28.61976624 250.99284363]
[32.07219696 266.12097168]
[25.94223404 280.37591553]
[12.58697796 288.27633667]
[-2.85820556 286.78436279]
[-14.45432758 276.47372437]
[-17.74244308 261.30902100]
[-11.45820332 247.12142944]
[1.98197234 239.36634827]
[17.41006279 241.02577209]
[27.37713432 229.81607056]
[35.67410278 217.31965637]
[42.13705826 203.78340149]
[48.60001373 190.24714661]
[55.06296921 176.71089172]
[61.52592468 163.17463684]
[67.98888397 149.63838196]
[74.45183563 136.10212708]
[80.91479492 122.56586456]
[70.90944672 111.82965088]
[66.90088654 96.80196381]
[70.61615753 80.79616547]
[61.42918015 79.90364838]
[56.84104538 74.01975250]
[43.46001816 67.24124146]
[27.65283012 67.90714264]
[19.79572105 55.25348282]
[6.41469479 48.47497940]
[-6.96633148 41.69647598]
[-20.34735870 34.91796875]
[-35.28674316 40.07455444]
[-49.45996857 33.08205032]
[-54.45832062 18.08898163]
[-47.31635666 3.99047446]
[-32.27128220 -0.84907883]
[-18.24907112 6.44154310]
[-13.56885338 21.53694344]
[-0.18782695 28.31544876]
[13.19320011 35.09395218]
[26.57422638 41.87245941]
[41.42431259 40.72171402]
[50.23852158 53.86021805]
[63.61954880 60.63872147]
[77.07911682 67.25991058]
[90.76316071 61.11605072]
[94.92775726 46.70577621]
[99.09236145 32.29549789]
[103.25695801 17.88521957]
[107.42155457 3.47494125]
[100.27175140 -17.71114159]
[116.07394409 -32.45080185]
[118.87084198 -47.18774033]
[121.66774750 -61.92467880]
[124.46464539 -76.66161346]
[127.26155090 -91.39855194]
[130.05845642 -106.13549042]
[118.79243469 -116.67496490]
[115.03507996 -131.63778687]
[119.98535919 -146.24935913]
[132.06364441 -155.84721375]
[147.41580200 -157.36868286]
[161.14300537 -150.32827759]
[168.86497498 -136.97257996]
[168.11763000 -121.56332397]
[159.13948059 -109.01756287]
[144.79537964 -103.33859253]
[141.99848938 -88.60165405]
[139.20158386 -73.86471558]
[136.40467834 -59.12777710]
[133.60778809 -44.39083862]
[130.81088257 -29.65390205]
[136.67636108 -24.09274292]
[139.85218811 -16.55724144]
[139.73393250 -8.28602314]
[136.26550293 -0.67206520]
[129.96144104 4.97189379]
[121.83183289 7.63954115]
[117.66723633 22.04981995]
[113.50263214 36.46009827]
[109.33803558 50.87037659]
[105.17343903 65.28065491]
[124.74584198 79.19668579]
[129.54534912 100.73174286]
[143.95562744 104.89633942]
[157.67582703 97.52110291]
[172.23057556 101.94988251]
[179.17716980 115.07543945]
[193.58744812 119.24003601]
[207.99772644 123.40464020]
[222.40800476 127.56923676]
[236.81828308 131.73384094]
[247.83299255 121.03001404]
[262.72784424 117.28314209]
[277.49618530 121.50111389]
[288.16543579 132.54931641]
[291.86560059 147.45584106]
[287.60134888 162.21089172]
[276.51977539 172.84545898]
[261.60171509 176.49888611]
[246.86010742 172.18841553]
[236.26033020 161.07354736]
[232.65368652 146.14411926]
[218.24340820 141.97952271]
[203.83312988 137.81491089]
[189.42285156 133.65031433]
[175.01257324 129.48571777]
[162.13508606 136.88206482]
[147.46170044 132.86386108]
[139.79103088 119.30661774]
[125.38075256 115.14202118]
[119.65260315 122.07347870]
[112.10520172 126.96159363]
[103.43721771 129.35385132]
[94.45104980 129.02882385]
[87.98809052 142.56507874]
[81.52513885 156.10133362]
[75.06217957 169.63758850]
[68.59922791 183.17384338]
[62.13626862 196.71009827]
[55.67331314 210.24635315]
[49.21035767 223.78260803]
[62.50314713 216.83267212]
[77.48993683 216.20318604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 21]
[11 20]
[22 131]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
[29 124]
[32 54]
[34 53]
[35 52]
[37 50]
[38 49]
[39 48]
[40 47]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[93 120]
[94 119]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
