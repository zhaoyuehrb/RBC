%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGUAGUCGUCGCCGGGCUCCGUUGCCCGCGCUGUUUUACCUUCCCAACGCUUGAGGCGGACGCUGGGGGGUCCUGCGCCUUUCCCUCCUGCCGCUGGGGACUGCAGGCUAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[117.15593719 248.80752563]
[114.42240143 234.05871582]
[111.68887329 219.30989075]
[101.85112762 212.13922119]
[99.51075745 199.78271484]
[106.47602081 188.83139038]
[104.12950897 174.01606750]
[101.78298950 159.20074463]
[99.43647003 144.38542175]
[97.08995819 129.57009888]
[94.74343872 114.75476837]
[88.45340729 110.66997528]
[75.08832550 117.47986603]
[75.87335205 102.50038910]
[69.58332062 98.41559601]
[55.09443283 102.29788208]
[40.65760422 106.36949158]
[26.27530861 110.62972260]
[11.89301300 114.88995361]
[-2.48928332 119.15018463]
[-16.87158012 123.41041565]
[-24.19152641 137.41734314]
[-39.29668427 142.06596375]
[-53.22543716 134.59832764]
[-57.71409607 119.44487000]
[-50.09962463 105.59584808]
[-34.89955139 101.26764679]
[-21.13180923 109.02811432]
[-6.74951363 104.76788330]
[7.63278246 100.50765991]
[22.01507759 96.24742889]
[36.39737320 91.98719788]
[41.98582077 87.00927734]
[51.21214676 87.80899811]
[65.70103455 83.92671204]
[51.12457275 80.38739777]
[43.59160995 67.41609955]
[42.26782990 52.47462845]
[47.40290451 38.38097763]
[58.02833939 27.79324341]
[72.14015961 22.70830345]
[87.07682800 24.08518791]
[100.02126312 31.66421318]
[108.53210449 44.01595688]
[111.00418854 58.81084824]
[106.97114563 73.25877380]
[103.12627411 87.75763702]
[113.45159149 76.87702179]
[123.77690887 65.99640656]
[134.10223389 55.11578751]
[137.98919678 39.77949142]
[152.36251831 35.87346268]
[162.68783569 24.99284554]
[172.86984253 13.97800827]
[172.22312927 -1.58539510]
[182.56082153 -12.74723244]
[197.40214539 -13.26786613]
[207.43910217 -24.41503906]
[217.47605896 -35.56221008]
[227.51301575 -46.70938110]
[230.47023010 -67.85018158]
[250.15138245 -73.83297729]
[259.28280640 -85.73327637]
[262.07470703 -94.56333160]
[268.81231689 -97.82141113]
[278.25213623 -109.47859955]
[287.69192505 -121.13579559]
[290.71405029 -129.88973999]
[297.53460693 -132.97033691]
[307.27633667 -144.37641907]
[317.01806641 -155.78251648]
[319.47290039 -171.99688721]
[334.83898926 -177.72534180]
[347.30902100 -167.07495117]
[344.05487061 -151.00190735]
[328.42413330 -146.04078674]
[318.68243408 -134.63470459]
[308.94070435 -123.22861481]
[299.34912109 -111.69598389]
[289.90930176 -100.03879547]
[280.46951294 -88.38160706]
[271.18310547 -76.60185242]
[262.05166626 -64.70155334]
[264.67730713 -55.99539948]
[262.90447998 -46.93492889]
[257.01678467 -39.64434433]
[248.27749634 -35.89420319]
[238.66018677 -36.67242432]
[228.62322998 -25.52525139]
[218.58627319 -14.37807941]
[208.54931641 -3.23090672]
[209.58287048 11.58352375]
[199.56275940 23.03132248]
[184.01701355 24.01496696]
[181.85304260 31.17929268]
[173.56845093 35.31816483]
[163.24313354 46.19878006]
[160.09469604 60.75682449]
[144.98284912 65.44110870]
[134.65751648 76.32172394]
[124.33220673 87.20233917]
[114.00688934 98.08295441]
[109.55876160 112.40825653]
[111.90528107 127.22357941]
[114.25180054 142.03890991]
[116.59831238 156.85423279]
[118.94483185 171.66955566]
[121.29135132 186.48487854]
[133.21173096 200.44474792]
[126.43769836 216.57635498]
[129.17123413 231.32518005]
[131.90475464 246.07400513]
[145.96769714 252.63247681]
[153.46040344 266.22067261]
[151.50180054 281.61361694]
[140.84498596 292.89245605]
[125.58775330 295.72024536]
[111.59679413 289.00958252]
[104.25193024 275.34091187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[3 110]
[6 108]
[7 107]
[8 106]
[9 105]
[10 104]
[11 103]
[15 35]
[16 34]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[47 102]
[48 101]
[49 100]
[50 99]
[52 97]
[53 96]
[54 94]
[57 91]
[58 90]
[59 89]
[60 88]
[62 83]
[63 82]
[65 81]
[66 80]
[67 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
