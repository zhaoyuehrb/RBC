%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUAGUGGGAGGAUACCUCCAGAGAGGCUGCUGCUCAUUGAGCUGCACUCACAUGAGGAUACAGACUUUGUGAAGAAGGAAUUGGCAACACUGAAACCUCCAGAACAAAGGCUGUCACUAAGGUCCCGCUGCCUUG\
) } def
/len { sequence length } bind def

/coor [
[84.60945129 317.07061768]
[79.54572296 302.40304565]
[84.10266876 287.57019043]
[96.52804565 278.27557373]
[96.18905640 263.27941895]
[95.85005951 248.28323364]
[95.51107025 233.28706360]
[95.17208099 218.29089355]
[94.83308411 203.29473877]
[94.49409485 188.29856873]
[94.15510559 173.30239868]
[93.81610870 158.30622864]
[85.85096741 156.90045166]
[78.15506744 154.41191101]
[70.87486267 150.88793945]
[64.14888763 146.39562988]
[58.10512924 141.02043152]
[52.85859680 134.86465454]
[39.75668716 142.16807556]
[26.65477753 149.47149658]
[13.55286884 156.77491760]
[5.60928726 171.12174988]
[-10.78984356 171.14524841]
[-18.77450371 156.82124329]
[-10.13075924 142.88504028]
[6.24944639 143.67301941]
[19.35135651 136.36959839]
[32.45326614 129.06617737]
[45.55517578 121.76274872]
[39.64109421 105.13444519]
[38.86006927 86.93370819]
[24.28047562 83.40731049]
[9.70088291 79.88091278]
[-5.53149652 84.15702820]
[-16.08307076 73.64448547]
[-30.66266251 70.11808777]
[-45.24225616 66.59169006]
[-59.82184601 63.06528854]
[-76.63850403 65.21849060]
[-83.36287689 49.65510178]
[-70.26920319 38.88514709]
[-56.29544830 48.48569870]
[-41.71585464 52.01209641]
[-27.13626480 55.53849792]
[-12.55667210 59.06489563]
[1.63287795 54.53654861]
[13.22728252 65.30132294]
[27.80687523 68.82772064]
[42.38646698 72.35411835]
[50.41814423 59.68556976]
[41.00910950 48.00352859]
[31.60007286 36.32148743]
[16.11878777 30.91206551]
[13.32909966 14.75193977]
[26.10079956 4.46526289]
[41.29545593 10.63408661]
[43.28211212 26.91245270]
[52.69114685 38.59449387]
[62.10018158 50.27653503]
[82.46752930 41.00120544]
[104.45203400 39.58692551]
[125.17093658 45.97049332]
[141.99514771 59.08223343]
[153.98941040 50.07457352]
[165.98365784 41.06691742]
[177.97790527 32.05925751]
[184.36642456 17.58523178]
[199.18969727 16.12924576]
[211.18394470 7.12158728]
[223.17820740 -1.88607156]
[235.17245483 -10.89373016]
[247.16670227 -19.90139008]
[259.16094971 -28.90904808]
[259.04870605 -44.31338501]
[267.92477417 -56.68547440]
[282.21499634 -61.40287399]
[296.37335205 -56.85548401]
[302.76187134 -71.32950592]
[317.58514404 -72.78549194]
[329.57940674 -81.79315186]
[341.57363892 -90.80081177]
[343.93359375 -106.19783783]
[356.22576904 -115.16202545]
[370.88995361 -112.81729889]
[382.88421631 -121.82495117]
[394.87844849 -130.83261108]
[406.87271118 -139.84027100]
[410.54586792 -155.45716858]
[425.10687256 -162.19186401]
[439.38580322 -154.87805176]
[442.42907715 -139.12629700]
[431.90213013 -127.01996613]
[415.88037109 -127.84601593]
[403.88610840 -118.83836365]
[391.89187622 -109.83070374]
[379.89761353 -100.82304382]
[378.06140137 -86.08656311]
[366.02584839 -76.78065491]
[350.58129883 -78.80655670]
[338.58706665 -69.79890442]
[326.59280396 -60.79124069]
[321.06219482 -46.96150589]
[305.38101196 -44.86122894]
[305.80114746 -29.99645805]
[297.28701782 -17.58784676]
[282.93096924 -12.51266098]
[268.16860962 -16.91479683]
[256.17437744 -7.90713739]
[244.18011475 1.10052156]
[232.18586731 10.10818005]
[220.19160461 19.11583900]
[208.19735718 28.12349892]
[202.66674805 41.95323563]
[186.98556519 44.05350876]
[174.99131775 53.06116867]
[162.99705505 62.06882858]
[151.00280762 71.07648468]
[156.00085449 82.62873077]
[158.41807556 94.98153687]
[158.14308167 107.56562042]
[155.18853760 119.80104065]
[149.69062805 131.12391663]
[141.90269470 141.01245117]
[132.18367004 149.01089478]
[120.98143768 154.75067139]
[108.81227875 157.96723938]
[109.15126801 172.96339417]
[109.49026489 187.95956421]
[109.82925415 202.95573425]
[110.16824341 217.95190430]
[110.50724030 232.94807434]
[110.84622955 247.94424438]
[111.18521881 262.94042969]
[111.52421570 277.93658447]
[124.35690308 286.66021729]
[129.57945251 301.27200317]
[125.18367767 316.15344238]
[112.85986328 325.58227539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 134]
[5 133]
[6 132]
[7 131]
[8 130]
[9 129]
[10 128]
[11 127]
[12 126]
[18 29]
[19 28]
[20 27]
[21 26]
[31 49]
[32 48]
[33 47]
[35 45]
[36 44]
[37 43]
[38 42]
[50 59]
[51 58]
[52 57]
[63 117]
[64 116]
[65 115]
[66 114]
[68 112]
[69 111]
[70 110]
[71 109]
[72 108]
[73 107]
[77 103]
[79 101]
[80 100]
[81 99]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
