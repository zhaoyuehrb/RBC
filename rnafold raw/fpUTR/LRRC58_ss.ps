%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGUUCAGGUUCCGGGGCGCCGCAGAGCUCCCGGCCUCUGGACCGCGCGCGGCGCUCUGGGGAAUCCGGCGCCACGCGCCGUGCGGUGGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[73.43489075 129.82009888]
[80.16948700 116.41692352]
[91.93831635 107.11690521]
[76.95601654 106.38847351]
[61.97371674 105.66003418]
[46.99141312 104.93160248]
[32.00910950 104.20317078]
[17.02680779 103.47473907]
[2.04450536 102.74630737]
[-12.93779659 102.01786804]
[-27.92009926 101.28943634]
[-39.56915283 111.63048553]
[-54.75296021 110.67832184]
[-64.53977966 99.50900269]
[-79.52208710 98.78057098]
[-94.50438690 98.05213928]
[-109.48668671 97.32369995]
[-124.46899414 96.59526825]
[-139.46112061 96.10954285]
[-154.45915222 95.86664581]
[-163.67395020 108.35132599]
[-178.47731018 113.00321960]
[-193.17704773 108.03357697]
[-202.12081909 95.35332489]
[-201.86953735 79.83828735]
[-192.51986694 67.45430756]
[-177.66690063 62.96327209]
[-163.02194214 68.09208679]
[-154.21626282 80.86861420]
[-139.21823120 81.11151123]
[-132.34890747 78.01325989]
[-123.74055481 81.61296844]
[-108.75825500 82.34140015]
[-93.77595520 83.06983185]
[-78.79364777 83.79827118]
[-63.81134796 84.52670288]
[-52.98715210 74.35948181]
[-37.78259277 74.88478851]
[-27.19166565 86.30713654]
[-12.20936394 87.03556824]
[2.77293873 87.76399994]
[17.75524139 88.49243164]
[32.73754501 89.22087097]
[47.71984482 89.94930267]
[62.70214844 90.67773438]
[77.68444824 91.40616608]
[92.66675568 92.13459778]
[107.50772858 89.95616913]
[121.64869690 84.95288849]
[135.78967285 79.94960022]
[149.93064880 74.94631195]
[164.07162476 69.94302368]
[178.21258545 64.93974304]
[192.35356140 59.93645477]
[206.49453735 54.93316650]
[220.63551331 49.92988205]
[234.77648926 44.92659378]
[241.10978699 33.54751205]
[253.13919067 29.73398590]
[264.14431763 35.03668213]
[278.43988037 30.49393082]
[292.73547363 25.95117950]
[303.54431152 14.39785385]
[318.01712036 17.91734123]
[323.80114746 3.38877964]
[337.59518433 -3.97728491]
[352.88607788 -0.70282239]
[362.45397949 11.66606617]
[361.78118896 27.28916931]
[351.18539429 38.78973770]
[335.66958618 40.73755264]
[322.55987549 32.21291351]
[312.77355957 43.44131088]
[297.27819824 40.24675369]
[282.98263550 44.78950500]
[268.68707275 49.33225632]
[257.69763184 62.90875244]
[239.77976990 59.06756592]
[225.63879395 64.07085419]
[211.49781799 69.07414246]
[197.35685730 74.07743073]
[183.21588135 79.08071136]
[169.07490540 84.08399963]
[154.93392944 89.08728790]
[140.79295349 94.09057617]
[126.65198517 99.09385681]
[112.51100922 104.09714508]
[126.45613861 109.62284851]
[136.75837708 120.52531433]
[141.48640442 134.76068115]
[139.75384521 149.66029358]
[131.88551331 162.43093872]
[119.35646820 170.67854309]
[104.51548767 172.85693359]
[90.14479065 168.55775452]
[78.93840790 158.58694458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 30]
[20 29]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[60 76]
[61 75]
[62 74]
[64 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
