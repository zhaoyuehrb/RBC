%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGGACCAACUUCGCGAAGCGGGAAGCCCGGCGGGGGGGUGGGGGGAGCUAAAGACCUGCGGCCUCAGCCCCUCCAAAGAACAGGGAG\
) } def
/len { sequence length } bind def

/coor [
[86.10524750 123.56014252]
[93.50872040 110.51719666]
[79.48347473 115.83626556]
[65.45823669 121.15534210]
[51.43299103 126.47441101]
[37.40774536 131.79348755]
[34.94234848 135.31901550]
[31.82412910 137.71958923]
[28.46093178 138.92773438]
[25.24295044 139.00744629]
[22.50365067 138.13835144]
[20.48819160 136.58894348]
[5.75777864 139.42001343]
[-8.97263432 142.25108337]
[-23.70304871 145.08213806]
[-35.79487991 155.28498840]
[-49.75373077 150.08886719]
[-64.48414612 152.91993713]
[-78.89743805 161.84704590]
[-91.46566772 150.46829224]
[-84.01084137 135.24128723]
[-67.31520844 138.18951416]
[-52.58479309 135.35845947]
[-41.54658127 125.35810089]
[-26.53411293 130.35173035]
[-11.80369854 127.52066803]
[2.92671466 124.68959808]
[17.65712738 121.85853577]
[32.08867264 117.76824188]
[46.11391830 112.44917297]
[60.13916016 107.13009644]
[74.16440582 101.81101990]
[88.18965149 96.49195099]
[92.98205566 89.92446899]
[100.79819489 87.78889465]
[110.74503326 76.56123352]
[120.69187927 65.33357239]
[130.63871765 54.10591507]
[140.58555603 42.87825394]
[150.53239441 31.65059090]
[160.47923279 20.42292976]
[170.42607117 9.19526863]
[173.78582764 -6.26508808]
[188.01702881 -10.66080856]
[197.96386719 -21.88846970]
[207.91070557 -33.11613083]
[217.85754395 -44.34379196]
[217.08547974 -59.90148163]
[227.33293152 -71.14623260]
[242.16957092 -71.78639984]
[252.11640930 -83.01406097]
[247.83399963 -97.83513641]
[252.26617432 -112.61212921]
[263.99865723 -122.62973785]
[279.28762817 -124.69138336]
[293.25448608 -118.13920593]
[301.44238281 -105.06398773]
[301.23864746 -89.63796234]
[292.70828247 -76.78353882]
[278.57327271 -70.60250854]
[263.34408569 -73.06721497]
[253.39723206 -61.83955765]
[254.55009460 -47.03393173]
[244.62252808 -35.50579071]
[229.08520508 -34.39695358]
[219.13836670 -23.16929054]
[209.19152832 -11.94163036]
[199.24468994 -0.71396869]
[196.59638977 13.94331074]
[181.65373230 19.14210892]
[171.70689392 30.36977005]
[161.76005554 41.59743118]
[151.81321716 52.82509232]
[141.86637878 64.05274963]
[131.91954041 75.28041077]
[121.97269440 86.50807953]
[112.02585602 97.73574066]
[126.84890747 95.43852234]
[141.53459167 98.49315643]
[154.21218872 106.51053619]
[163.26681519 118.46937561]
[167.54504395 132.84632874]
[166.50190735 147.81001282]
[160.27029419 161.45431519]
[149.64398193 172.04116821]
[135.97660828 178.22201538]
[121.00914764 179.20950317]
[106.64820099 174.87783813]
[94.72311401 165.77880859]
[86.75293732 153.07148743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[12 28]
[13 27]
[14 26]
[15 25]
[17 23]
[18 22]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[44 68]
[45 67]
[46 66]
[47 65]
[50 62]
[51 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
