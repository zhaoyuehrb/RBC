%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCAAACAGCACAUCCGGUGUGGUCGACGGGUCCUCCAAGAGUUUGGGGCGCGGACUGGAGUACCUUGCGUGCAGUU\
) } def
/len { sequence length } bind def

/coor [
[106.58815002 191.57063293]
[115.88466644 178.49568176]
[114.72227478 163.54078674]
[113.55989075 148.58589172]
[112.39750671 133.63099670]
[111.23511505 118.67610168]
[100.97756195 120.15473175]
[92.01580811 116.75687408]
[86.33819580 110.02464294]
[71.56607819 112.62936401]
[59.31912613 122.64549255]
[45.44164276 117.23580933]
[30.66952705 119.84053040]
[15.89741135 122.44525146]
[1.12529457 125.04998016]
[-9.21742439 137.31405640]
[-25.24985313 136.73031616]
[-34.67328644 123.74653625]
[-30.25886917 108.32276917]
[-15.39296818 102.29080963]
[-1.47942805 110.27786255]
[13.29268837 107.67314148]
[28.06480408 105.06841278]
[42.83692169 102.46369171]
[54.02726746 92.63387299]
[68.96135712 97.85725403]
[83.73346710 95.25252533]
[99.54370117 80.63526154]
[120.61136627 92.91506958]
[120.62902832 77.33824158]
[131.43338013 66.62747192]
[146.28340149 66.74030304]
[156.78665161 56.03136063]
[167.28991699 45.32241440]
[177.79318237 34.61346817]
[181.93240356 19.34332275]
[196.36814880 15.67473698]
[206.87141418 4.96579075]
[217.37467957 -5.74315548]
[227.87792969 -16.45210075]
[238.38119507 -27.16104698]
[239.78530884 -32.74496460]
[242.99804688 -36.68348694]
[247.00605774 -38.54773331]
[250.78111267 -38.41337967]
[262.45660400 -47.83056259]
[274.13204956 -57.24774170]
[285.80752563 -66.66492462]
[297.48300171 -76.08210754]
[300.61373901 -91.81671906]
[314.93307495 -99.05108643]
[329.45645142 -92.23561096]
[333.04278564 -76.59854889]
[322.94094849 -64.13531494]
[306.90020752 -64.40663147]
[295.22473145 -54.98945236]
[283.54925537 -45.57226944]
[271.87377930 -36.15508652]
[260.19830322 -26.73790550]
[249.09013367 -16.65778732]
[238.58688354 -5.94884109]
[228.08361816 4.76010466]
[217.58035278 15.46905041]
[207.07710266 26.17799759]
[203.68913269 40.68216705]
[188.50212097 45.11672974]
[177.99885559 55.82567596]
[167.49560547 66.53462219]
[156.99234009 77.24356842]
[157.39311218 92.08860016]
[146.89385986 103.09861755]
[131.32031250 103.41832733]
[126.19001007 117.51371765]
[127.35240173 132.46861267]
[128.51478577 147.42350769]
[129.67716980 162.37840271]
[130.83955383 177.33329773]
[142.04473877 188.81472778]
[139.91162109 204.71533203]
[126.07654572 212.83753967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[9 27]
[10 26]
[12 24]
[13 23]
[14 22]
[15 21]
[29 72]
[32 69]
[33 68]
[34 67]
[35 66]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
