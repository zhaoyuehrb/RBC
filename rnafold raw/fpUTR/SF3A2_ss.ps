%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGCUUUCUUUGCCCGCCGUUCGCCAAACGAAGUCGUGGAGGUGGCGAAACGAGGAGGAGAUAACGCGGCCUUGGGCUCUGGUGUCUCCCAGUCUGCUAAAGCCCUAAGGCCAUCACC\
) } def
/len { sequence length } bind def

/coor [
[62.98555374 148.47952271]
[60.61380768 133.66821289]
[65.24775696 119.40193939]
[75.87046814 108.81147003]
[90.14981842 104.22098541]
[76.16681671 98.79185486]
[62.18380356 93.36272430]
[49.16154480 101.59236145]
[33.96798325 100.58782196]
[22.41592216 90.94345093]
[18.80125046 76.51874542]
[4.81824160 71.08961487]
[-9.16476727 65.66048431]
[-23.14777565 60.23134995]
[-37.13078690 54.80221939]
[-52.79576874 57.02007294]
[-61.85968399 45.20082092]
[-75.84268951 39.77169037]
[-89.89389038 34.52157211]
[-104.01099396 29.45131683]
[-113.69913483 34.71022034]
[-124.45625305 33.72240829]
[-132.68078613 27.06494904]
[-135.75599670 17.17157745]
[-149.59579468 11.38711166]
[-163.43559265 5.60264444]
[-177.27539062 -0.18182246]
[-191.11518860 -5.96628952]
[-204.95497131 -11.75075626]
[-218.79476929 -17.53522301]
[-240.63510132 -12.80341244]
[-253.56677246 -30.10458183]
[-267.92434692 -34.44739151]
[-282.28192139 -38.79020309]
[-298.11770630 -34.52878571]
[-309.53341675 -46.30223083]
[-304.78552246 -61.99903107]
[-288.75827026 -65.47166443]
[-277.93911743 -53.14778137]
[-263.58154297 -48.80496979]
[-249.22395325 -44.46215820]
[-243.03346252 -49.73706055]
[-235.15115356 -52.09672928]
[-226.89222717 -51.06768799]
[-219.66706848 -46.74866867]
[-214.74044800 -39.80669403]
[-213.01029968 -31.37501907]
[-199.17051697 -25.59055138]
[-185.33071899 -19.80608559]
[-171.49092102 -14.02161789]
[-157.65112305 -8.23715115]
[-143.81132507 -2.45268440]
[-129.97152710 3.33178258]
[-111.11662292 -0.63449669]
[-98.94074249 15.33421707]
[-84.82363892 20.40447044]
[-77.37857056 19.69600868]
[-70.41355896 25.78868294]
[-56.43055344 31.21781349]
[-41.76572800 28.61163139]
[-31.70165443 40.81921005]
[-17.71864510 46.24834061]
[-3.73563647 51.67747116]
[10.24737263 57.10660172]
[24.23038101 62.53573227]
[36.63186264 54.32955933]
[51.66530609 55.00744629]
[63.55596542 64.51879120]
[67.61293793 79.37971497]
[81.59594727 84.80884552]
[95.57894897 90.23797607]
[110.18438721 93.65577698]
[125.12448883 94.99491882]
[140.06459045 96.33406067]
[155.00469971 97.67319489]
[169.94479370 99.01233673]
[184.88490295 100.35147095]
[199.84089661 101.49971008]
[214.81031799 102.45686340]
[229.77975464 103.41401672]
[244.74919128 104.37117004]
[259.71862793 105.32831573]
[273.98437500 98.48738098]
[286.19198608 107.02104187]
[301.16143799 107.97818756]
[316.13085938 108.93534088]
[331.10028076 109.89249420]
[346.08071899 110.65840149]
[360.16711426 103.45536804]
[372.58871460 111.67447662]
[387.57769775 112.24901581]
[403.63677979 106.81379700]
[413.30520630 120.74068451]
[402.59906006 133.88659668]
[387.00314331 127.23801422]
[372.01416016 126.66346741]
[358.99987793 133.90760803]
[345.50619507 125.64739227]
[338.62182617 128.56916809]
[330.14312744 124.86192322]
[315.17370605 123.90476990]
[300.20428467 122.94762421]
[285.23483276 121.99047089]
[272.03979492 128.89987183]
[258.76147461 120.29775238]
[243.79203796 119.34059906]
[228.82260132 118.38344574]
[213.85316467 117.42629242]
[198.88374329 116.46913910]
[191.92701721 119.21414948]
[183.54576111 115.29158020]
[168.60566711 113.95243835]
[153.66555786 112.61329651]
[138.72544861 111.27416229]
[123.78534698 109.93502045]
[108.84524536 108.59588623]
[119.60552216 119.04654694]
[124.42561340 133.25100708]
[122.24773407 148.09205627]
[113.54982758 160.31280518]
[100.24066925 167.23135376]
[85.24098969 167.32942200]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[17 59]
[18 58]
[19 56]
[20 55]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[32 41]
[33 40]
[34 39]
[72 116]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[78 109]
[79 108]
[80 107]
[81 106]
[82 105]
[84 103]
[85 102]
[86 101]
[87 100]
[88 98]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
