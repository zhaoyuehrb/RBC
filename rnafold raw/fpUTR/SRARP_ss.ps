%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCCUGGAAGAGUGGCCUAGGACAGCUCCUCUCCUGCCAGAGCUAGGCAGGCGCCGAAGUAGCCGC\
) } def
/len { sequence length } bind def

/coor [
[41.70600510 162.07218933]
[32.17312622 160.85906982]
[23.68440819 156.45077515]
[17.26897621 149.41644287]
[2.92108083 153.79113770]
[-11.42681408 158.16583252]
[-25.77470970 162.54051208]
[-40.12260437 166.91520691]
[-54.47050095 171.28990173]
[-58.56443787 186.16413879]
[-70.06534576 196.44677734]
[-85.30332184 198.85665894]
[-99.41599274 192.62480164]
[-107.90004730 179.73974609]
[-108.04825592 164.31309509]
[-99.81333160 151.26742554]
[-85.82300568 144.76556396]
[-70.54153442 146.88223267]
[-58.84518814 156.94200134]
[-44.49729538 152.56730652]
[-30.14939880 148.19262695]
[-15.80150318 143.81793213]
[-1.45360827 139.44323730]
[12.89428711 135.06855774]
[20.33495140 115.50522614]
[39.68992233 106.87666321]
[59.70069885 114.60655975]
[72.69107819 107.10655975]
[85.68145752 99.60655975]
[92.83802795 87.59510040]
[106.81854248 87.40306091]
[119.80892181 79.90306091]
[132.06347656 71.25285339]
[137.54911804 56.41310501]
[152.25469971 54.04763031]
[163.67185974 44.31889725]
[175.08903503 34.59016800]
[186.50621033 24.86143494]
[197.92337036 15.13270473]
[209.34054565 5.40397310]
[209.04096985 -10.23074055]
[218.90144348 -22.36766243]
[234.26617432 -25.27610779]
[247.88040161 -17.58279991]
[253.31590271 -2.92028093]
[248.00617981 11.78825378]
[234.45835876 19.59788513]
[219.06927490 16.82114410]
[207.65211487 26.54987526]
[196.23493958 36.27860641]
[184.81776428 46.00733948]
[173.40058899 55.73606873]
[161.98342896 65.46479797]
[157.31440735 79.60868835]
[141.79220581 82.67002869]
[141.61958313 85.79704285]
[139.98159790 89.02007294]
[136.84564209 91.68711090]
[132.45407104 93.15376282]
[127.30892181 92.89344025]
[114.31854248 100.39344025]
[107.16197205 112.40489960]
[93.18145752 112.59693909]
[80.19107819 120.09693909]
[67.20069885 127.59693909]
[67.83577728 137.40934753]
[65.05773163 146.79516602]
[59.23754883 154.60954285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[27 65]
[28 64]
[29 63]
[31 61]
[32 60]
[33 55]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
