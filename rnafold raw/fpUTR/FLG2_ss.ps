%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUGCAAGCUGCAUCAGGCUUUAUCCUACUUGUUCCUUUGGUGAACCAGGUUCACUUAAACUUGCAAAAAG\
) } def
/len { sequence length } bind def

/coor [
[85.97015381 263.88317871]
[77.76021576 250.90270996]
[77.15646362 235.55567932]
[84.32131195 221.97038269]
[97.32745361 213.80117798]
[96.69083405 198.81468201]
[96.05421448 183.82820129]
[95.41759491 168.84172058]
[94.78097534 153.85523987]
[94.14436340 138.86874390]
[74.23076630 129.68190002]
[62.33863449 111.25564575]
[62.16974258 89.32573700]
[48.77585602 82.57268524]
[35.38196945 75.81962585]
[19.03631973 81.62995148]
[3.77758956 74.10368347]
[-1.35511100 58.23279190]
[-15.02353859 52.05427170]
[-28.69196510 45.87575531]
[-43.38801193 51.68968582]
[-57.85734940 45.33250046]
[-63.51557922 30.57580948]
[-57.00577545 16.17449188]
[-42.19008255 10.67259407]
[-27.85839653 17.33429527]
[-22.51344681 32.20732880]
[-8.84501934 38.38584518]
[4.82340765 44.56436539]
[16.29635429 38.32643127]
[29.45165253 39.95357513]
[39.34811401 49.06488419]
[42.13502502 62.42573929]
[55.52891159 69.17879486]
[68.92279816 75.93185425]
[76.17102814 68.73902893]
[85.02742004 63.65595245]
[94.89427948 61.02565384]
[105.10572052 61.02565384]
[114.97257996 63.65595245]
[123.82897186 68.73902893]
[131.07719421 75.93185425]
[144.47108459 69.17879486]
[157.86497498 62.42573929]
[171.25886536 55.67268372]
[184.65275574 48.91962814]
[198.04664612 42.16657257]
[211.44052124 35.41351318]
[222.86161804 22.88374519]
[238.06338501 30.38990593]
[235.05883789 47.07550049]
[218.19358826 48.80740356]
[204.79969788 55.56045914]
[191.40580750 62.31351471]
[178.01191711 69.06657410]
[164.61802673 75.81962585]
[151.22413635 82.57268524]
[137.83026123 89.32573700]
[139.26345825 101.85706329]
[136.65390015 114.19718170]
[130.27026367 125.07547760]
[120.76983643 133.37187195]
[109.13084412 138.23213196]
[109.76746368 153.21861267]
[110.40408325 168.20509338]
[111.04069519 183.19158936]
[111.67731476 198.17807007]
[112.31393433 213.16455078]
[125.96601105 220.20133972]
[134.25717163 233.13008118]
[134.95710754 248.47300720]
[127.87757111 262.10296631]
[114.92290497 270.35354614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 68]
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[13 35]
[14 34]
[15 33]
[18 29]
[19 28]
[20 27]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
