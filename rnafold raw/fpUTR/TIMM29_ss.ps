%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUUGCGCAGAAGAGACUCCCGGGCUCUUAACGUCGGGUAUCAGGAGUUUCUUCCCGGAGCAAGGACCCCCAAGACGGAAGAGG\
) } def
/len { sequence length } bind def

/coor [
[160.65785217 208.25788879]
[152.54823303 195.63908386]
[137.98475647 192.73381042]
[129.58070374 180.05207825]
[132.72676086 164.79624939]
[124.61714172 152.17744446]
[116.50753021 139.55865479]
[108.39791870 126.93984985]
[100.28830719 114.32104492]
[87.94992828 107.74411011]
[87.09288788 93.78856659]
[68.82315826 85.63981628]
[68.18449402 66.45114899]
[59.19533157 54.44302750]
[50.20616913 42.43490982]
[41.21700287 30.42679024]
[32.22783661 18.41867256]
[23.23867226 6.41055346]
[14.24950790 -5.59756517]
[5.26034260 -17.60568428]
[-3.72882247 -29.61380196]
[-12.71798706 -41.62192154]
[-21.70715332 -53.63003922]
[-36.17131424 -60.04085541]
[-37.60445786 -74.86635590]
[-46.59362411 -86.87447357]
[-55.79568863 -98.72023010]
[-65.20772552 -110.39984894]
[-74.61975861 -122.07947540]
[-84.03179169 -133.75909424]
[-99.52217865 -132.84941101]
[-112.57067871 -141.24681091]
[-118.15987396 -155.72232056]
[-114.14060974 -170.70982361]
[-102.05836487 -180.44630432]
[-86.55902100 -181.18789673]
[-73.60238647 -172.64944458]
[-68.17055511 -158.11415100]
[-72.35217285 -143.17112732]
[-62.94013596 -131.49151611]
[-53.52809906 -119.81188965]
[-44.11606598 -108.13226318]
[-37.31386185 -104.82549286]
[-34.58550262 -95.86363983]
[-25.59633827 -83.85551453]
[-11.77514076 -78.30360413]
[-9.69903374 -62.61920547]
[-0.70986879 -50.61108398]
[8.27929592 -38.60296631]
[17.26846123 -26.59484863]
[26.25762558 -14.58673000]
[35.24679184 -2.57861137]
[44.23595810 9.42950726]
[53.22512054 21.43762589]
[62.21428680 33.44574356]
[71.20345306 45.45386124]
[80.19261932 57.46198273]
[90.67136383 58.05481720]
[99.19564056 64.55181885]
[102.68738556 74.92003632]
[99.71169281 85.67895508]
[112.05007172 92.25588989]
[112.90711212 106.21143341]
[121.01672363 118.83023071]
[129.12634277 131.44903564]
[137.23594666 144.06784058]
[145.34556580 156.68664551]
[160.52966309 160.16238403]
[168.57420349 173.07516479]
[165.16703796 187.52946472]
[173.27665710 200.14826965]
[195.70651245 208.22790527]
[198.16647339 231.26451111]
[208.77307129 241.87112427]
[224.75155640 243.30899048]
[233.46920776 256.77682495]
[228.23857117 271.94323730]
[213.07215881 277.17385864]
[199.60433960 268.45620728]
[198.16647339 252.47772217]
[187.55987549 241.87112427]
[180.68638611 243.88279724]
[173.48043823 243.53309631]
[166.73641968 240.82612610]
[161.20898438 236.02777100]
[157.52873230 229.63987732]
[156.13027954 222.34796143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[11 61]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[25 45]
[26 44]
[27 42]
[28 41]
[29 40]
[30 39]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
