%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUCCGGGUUUGGUGCGGCCUUUGUCUCUCGCUGCAGUCAGAGCUCCAGGUCUGGUUCUUCUCCUAAAGGCCCAGGCUGUGUGGCCCCGUGUCCUGCAGGUAUUGGGAGAUCCACAGCUAAGACACCGGGACCUCCUGGAAGCCAAAA\
) } def
/len { sequence length } bind def

/coor [
[176.24795532 569.72808838]
[175.00108337 554.78002930]
[173.75419617 539.83197021]
[172.50732422 524.88385010]
[171.26045227 509.93576050]
[170.01358032 494.98767090]
[168.76670837 480.03958130]
[167.51982117 465.09149170]
[166.27294922 450.14343262]
[165.02607727 435.19534302]
[163.15846252 420.31204224]
[160.67335510 405.51934814]
[158.18823242 390.72662354]
[155.70310974 375.93392944]
[153.21798706 361.14123535]
[150.73287964 346.34851074]
[148.24775696 331.55581665]
[145.60888672 316.78976440]
[142.51057434 302.11322021]
[139.10758972 287.50433350]
[135.70462036 272.89544678]
[120.15812683 268.59912109]
[108.82107544 256.99511719]
[104.84201813 241.17115784]
[109.39378357 225.40483093]
[121.32990265 214.00714111]
[117.62374878 199.47219849]
[113.91758728 184.93727112]
[110.21142578 170.40232849]
[106.50526428 155.86738586]
[102.79910278 141.33245850]
[99.09294128 126.79751587]
[95.38677979 112.26258087]
[91.07919312 97.89440155]
[86.17764282 83.71784210]
[81.27609253 69.54128265]
[76.37454224 55.36472321]
[71.47299194 41.18816757]
[66.57144165 27.01160812]
[52.38800430 15.31502438]
[56.30665970 -1.76256585]
[51.11124420 -15.83408546]
[33.64503098 -23.04037285]
[27.04202843 -40.40406418]
[35.02888107 -56.82379913]
[29.25260735 -70.66701508]
[23.47633553 -84.51023102]
[11.02148914 -94.26663971]
[13.26101875 -108.99191284]
[7.48474598 -122.83512878]
[1.56478310 -136.61750793]
[-4.49822998 -150.33757019]
[-10.56124306 -164.05761719]
[-16.62425613 -177.77767944]
[-22.68726921 -191.49772644]
[-28.75028229 -205.21777344]
[-34.81329727 -218.93783569]
[-47.46841431 -228.43301392]
[-45.53571320 -243.20169067]
[-51.59872437 -256.92175293]
[-57.66173935 -270.64181519]
[-63.72475052 -284.36184692]
[-78.55216980 -289.83206177]
[-85.09275818 -304.21942139]
[-79.46609497 -318.98818970]
[-65.01038361 -325.37628174]
[-50.30193710 -319.59381104]
[-44.06702042 -305.07135010]
[-50.00469589 -290.42486572]
[-43.94168472 -276.70480347]
[-37.87866974 -262.98477173]
[-31.81565857 -249.26470947]
[-19.59420586 -240.75088501]
[-21.09324265 -225.00085449]
[-15.03022861 -211.28079224]
[-8.96721554 -197.56074524]
[-2.90420270 -183.84068298]
[3.15881038 -170.12063599]
[9.22182369 -156.40057373]
[15.28483677 -142.68052673]
[20.90152550 -137.80215454]
[21.32796478 -128.61140442]
[27.10423660 -114.76818848]
[39.14592361 -106.00194550]
[37.31955338 -90.28650665]
[43.09582520 -76.44329071]
[48.87209702 -62.60007095]
[60.18597412 -60.62860870]
[69.21792603 -53.34221649]
[73.62841797 -42.47845078]
[72.20270538 -30.71935844]
[65.18276215 -21.02950096]
[70.37818146 -6.95798159]
[81.26127625 -1.58530867]
[85.68328857 10.14775276]
[80.74799347 22.11005783]
[85.64955139 36.28661728]
[90.55110168 50.46317291]
[95.45265198 64.63973236]
[100.35420227 78.81629181]
[105.25575256 92.99285126]
[107.94888306 94.56795502]
[110.11112213 97.18317413]
[111.34677887 100.63703156]
[111.34286499 104.58139038]
[109.92171478 108.55641937]
[113.62787628 123.09135437]
[117.33403778 137.62629700]
[121.04019928 152.16122437]
[124.74636078 166.69616699]
[128.45251465 181.23110962]
[132.15867615 195.76603699]
[135.86483765 210.30097961]
[149.54243469 213.39439392]
[160.49185181 222.04895020]
[166.60224915 234.52325439]
[166.72726440 248.34684753]
[160.89961243 260.80950928]
[150.31350708 269.49246216]
[153.71647644 284.10134888]
[157.11946106 298.71026611]
[161.41902161 303.86984253]
[162.28657532 309.56884766]
[160.34669495 313.99743652]
[165.04690552 321.90692139]
[163.04046631 329.07067871]
[165.52557373 343.86340332]
[168.01069641 358.65609741]
[170.49581909 373.44882202]
[172.98094177 388.24151611]
[175.46604919 403.03424072]
[177.95117188 417.82693481]
[180.94006348 421.17776489]
[182.50779724 424.93450928]
[182.70501709 428.58734131]
[181.74688721 431.69793701]
[179.97416687 433.94845581]
[181.22103882 448.89654541]
[182.46791077 463.84463501]
[183.71478271 478.79272461]
[184.96166992 493.74081421]
[186.20854187 508.68890381]
[187.45541382 523.63696289]
[188.70228577 538.58508301]
[189.94915771 553.53314209]
[191.19602966 568.48126221]
[202.46592712 579.89916992]
[200.42268372 595.81158447]
[186.63372803 604.01184082]
[171.67674255 598.20941162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 140]
[8 139]
[9 138]
[10 137]
[11 132]
[12 131]
[13 130]
[14 129]
[15 128]
[16 127]
[17 126]
[18 124]
[19 121]
[20 120]
[21 119]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[31 108]
[32 107]
[33 106]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[41 93]
[42 92]
[45 87]
[46 86]
[47 85]
[49 83]
[50 82]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
