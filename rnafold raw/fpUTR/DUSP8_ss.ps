%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGGCGAGCGCGAGCGAGGUCCAGCACCAUGUGCUAGGUCACUCCCAGCGCGAGGCCACACCUGGGCCGUCGGAGCAGCCCCUCCUCACUUCAGGGGUCACCCUCCCCAGCACCCAUUGCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[83.69338226 232.03350830]
[83.47559357 216.23071289]
[94.55558777 204.96087646]
[86.51065826 192.42579651]
[93.90961456 178.44129944]
[93.54434967 163.44573975]
[93.17908478 148.45019531]
[92.81381989 133.45463562]
[92.44855499 118.45909119]
[81.52403259 108.18023682]
[66.53404236 108.72806549]
[51.54404449 109.27589417]
[36.55405426 109.82373047]
[25.82624626 121.11761475]
[10.61645889 121.45965576]
[-0.08442663 111.16273499]
[-8.64836788 114.63323212]
[-15.44516277 111.53689575]
[-30.44404984 111.71954346]
[-45.44293976 111.90218353]
[-60.43849182 112.26744843]
[-73.94687653 120.50360107]
[-86.94823456 113.23628998]
[-101.93823242 113.78411865]
[-116.92044067 114.51443481]
[-131.89265442 115.42712402]
[-146.86485291 116.33981323]
[-161.83706665 117.25250244]
[-176.80926514 118.16519165]
[-192.25115967 125.16407776]
[-203.25126648 112.26314545]
[-193.89964294 98.12158966]
[-177.72195435 103.19298553]
[-162.74975586 102.28029633]
[-147.77754211 101.36760712]
[-132.80534363 100.45491028]
[-117.83312988 99.54222107]
[-111.28048706 95.95801544]
[-102.48606110 98.79412842]
[-87.49607086 98.24629211]
[-75.05986786 90.04933167]
[-60.98632050 97.27745819]
[-54.34833908 93.85387421]
[-45.62558365 96.90329742]
[-30.62669754 96.72064972]
[-15.62780857 96.53800201]
[-0.63225698 96.17273712]
[9.28845406 85.12216949]
[24.48263359 84.35305786]
[36.00622177 94.83373260]
[50.99621582 94.28590393]
[65.98620605 93.73807526]
[80.97620392 93.19024658]
[91.12126923 82.14137268]
[90.39095306 67.15916443]
[89.47826385 52.18695450]
[88.38333893 37.22697067]
[87.28840637 22.26698685]
[86.19348145 7.30700207]
[73.40760040 -1.69607723]
[69.45011902 -16.82460403]
[76.18961334 -30.93534851]
[90.44392395 -37.36565018]
[105.48258209 -33.07931900]
[114.20481110 -20.10022354]
[112.49222565 -4.55670261]
[101.15346527 6.21207237]
[102.24839020 21.17205620]
[103.34332275 36.13204193]
[104.43824768 51.09202576]
[108.10198212 57.60054016]
[105.37316895 66.42884827]
[106.10348511 81.41105652]
[118.30282593 90.13894653]
[132.71839905 85.99267578]
[147.13395691 81.84641266]
[161.54951477 77.70014954]
[169.98469543 60.82749939]
[187.73995972 55.46591187]
[203.55459595 64.53518677]
[217.75119019 59.69197845]
[231.94778442 54.84877396]
[246.14439392 50.00556564]
[260.34097290 45.16236115]
[274.53756714 40.31915665]
[278.14117432 25.31856346]
[289.29843140 14.66402340]
[304.44909668 11.75535774]
[318.75869751 17.52071190]
[327.66104126 30.12038231]
[328.31546021 45.53385925]
[320.51309204 58.84276199]
[306.74368286 65.80026245]
[291.40097046 64.18624878]
[279.38079834 54.51575089]
[265.18420410 59.35895920]
[250.98759460 64.20216370]
[236.79100037 69.04537201]
[222.59440613 73.88857269]
[208.39779663 78.73178101]
[205.66183472 89.93189240]
[197.74256897 98.47631836]
[186.55303955 102.12862396]
[174.88128662 99.85551453]
[165.69578552 92.11571503]
[151.28022766 96.26197815]
[136.86465454 100.40824127]
[122.44908905 104.55450439]
[137.08776855 107.82701111]
[152.01376343 109.31517792]
[163.88722229 118.48147583]
[169.10539246 132.54457092]
[166.08493042 147.23731995]
[155.74234009 158.10151672]
[141.21585083 161.84065247]
[126.91322327 157.32015991]
[117.17429352 145.91168213]
[114.95390320 131.07853699]
[107.44410706 118.09382629]
[107.80937195 133.08937073]
[108.17463684 148.08493042]
[108.53990173 163.08047485]
[108.90516663 178.07603455]
[116.97621918 191.68370056]
[109.55113983 204.59561157]
[121.16668701 215.31262207]
[121.71855927 231.10728455]
[110.87933350 242.60887146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 125]
[5 123]
[6 122]
[7 121]
[8 120]
[9 119]
[10 53]
[11 52]
[12 51]
[13 50]
[16 47]
[18 46]
[19 45]
[20 44]
[21 42]
[23 40]
[24 39]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[54 73]
[55 72]
[56 70]
[57 69]
[58 68]
[59 67]
[74 108]
[75 107]
[76 106]
[77 105]
[80 100]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
