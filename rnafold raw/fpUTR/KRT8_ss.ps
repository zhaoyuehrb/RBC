%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCCUUUCCUUACCUCCCUCCAUGCUGUCCACUUCCUCUGUAAAGCUCUCAACCCUGUCCCCUUCCCCCUCUCUCCUGGGAAAGAGCCCUCCCAUGCCUAGCUGCUGCUCUUAGGGACCCUGUGGCUAGGUGCGCGGAUGGAAAUCCAGGAUCUCCGCCUGGUUCGGCCCGCCUGCCUCCACUCCUGCCUCUACC\
) } def
/len { sequence length } bind def

/coor [
[50.75996399 209.24319458]
[54.94829559 194.30206299]
[67.13976288 184.70269775]
[66.42961884 169.71952820]
[65.71947479 154.73634338]
[65.00933075 139.75315857]
[58.72037506 135.66671753]
[52.16026688 149.15615845]
[45.60015869 162.64559937]
[39.04005051 176.13504028]
[32.47994232 189.62446594]
[25.91983223 203.11390686]
[19.35972404 216.60334778]
[16.04137421 231.23170471]
[4.63078880 240.96815491]
[-10.33747101 241.94345093]
[-22.91502571 233.77001953]
[-28.10356522 219.69595337]
[-23.84116364 205.31430054]
[-11.82364750 196.34097290]
[-2.16262865 184.86643982]
[7.49839067 173.39192200]
[17.15941048 161.91738892]
[26.82042885 150.44287109]
[36.48144913 138.96833801]
[46.14246750 127.49382019]
[39.85351181 123.40737152]
[25.87399101 128.84547424]
[11.89446926 134.28358459]
[9.31364250 145.90055847]
[1.52176166 154.73579407]
[-9.45566750 158.66766357]
[-20.84833145 156.82691956]
[-29.84008408 149.78591919]
[-43.98431396 154.77999878]
[-49.30441284 169.48477173]
[-62.85775757 177.28483582]
[-78.24487305 174.49722290]
[-88.20042419 162.43815613]
[-88.02371979 146.80157471]
[-77.79817963 134.97058105]
[-62.35200119 132.53141785]
[-48.97839355 140.63577271]
[-34.83416367 135.64169312]
[-27.95520020 118.68479156]
[-10.57173920 112.01737976]
[6.45636559 120.30405426]
[20.43588829 114.86595154]
[34.41540909 109.42784882]
[19.54006004 107.49809265]
[4.84582329 110.51130676]
[-9.21651840 105.29109955]
[-18.38524055 93.41951752]
[-19.88167191 78.49434662]
[-13.25230789 65.03881073]
[-0.50623763 57.13072968]
[14.49371910 57.16672897]
[27.20168304 65.13590240]
[33.76676178 78.62525940]
[44.36026764 89.24494171]
[40.15493774 74.84649658]
[35.94961166 60.44805145]
[31.74428177 46.04960632]
[27.53895378 31.65116310]
[19.48451042 29.81427956]
[12.57312679 25.41282272]
[7.58495998 18.99728203]
[5.06490421 11.34219837]
[5.26331663 3.35278702]
[8.11186218 -4.04207659]
[-1.84860528 -15.25765038]
[-11.80907249 -26.47322464]
[-27.23813629 -24.82289124]
[-40.67374039 -32.58589172]
[-46.94962311 -46.77718735]
[-43.65257645 -61.93994141]
[-32.05038071 -72.24376678]
[-16.60432243 -73.72662354]
[-3.25372171 -65.81832886]
[2.86784148 -51.55978775]
[-0.59349871 -36.43369293]
[9.36696815 -25.21811676]
[19.32743645 -14.00254345]
[20.20632553 -14.34913349]
[21.09863472 -14.65954971]
[21.33542824 -29.65768051]
[21.57222176 -44.65581131]
[21.80901527 -59.65394211]
[22.04580879 -74.65207672]
[22.28260231 -89.65020752]
[13.16837215 -95.22872162]
[7.24156857 -104.02312469]
[5.51839018 -114.40539551]
[8.24424362 -124.48687744]
[14.86133003 -132.46179199]
[24.12122726 -136.93069458]
[25.06781197 -151.90080261]
[22.48434448 -160.67274475]
[26.14933968 -167.09916687]
[27.33212852 -182.05245972]
[22.55357170 -198.31904602]
[36.86161423 -207.41389465]
[49.56188965 -196.18272400]
[42.28542328 -180.86967468]
[41.10263443 -165.91638184]
[40.03791428 -150.95422363]
[39.09133148 -135.98411560]
[53.00958633 -122.36517334]
[52.43125534 -102.59584045]
[37.28073502 -89.41341400]
[37.04394150 -74.41528320]
[36.80714798 -59.41714859]
[36.57035446 -44.41901779]
[36.33356094 -29.42088699]
[36.09676743 -14.42275620]
[51.79199982 4.36300564]
[41.93739700 27.44583511]
[46.14272690 41.84428024]
[50.34805679 56.24272537]
[54.55338287 70.64116669]
[58.75871277 85.03961182]
[78.97717285 64.64884186]
[105.72917938 62.04114914]
[126.45191193 76.10324097]
[132.86811829 98.40830231]
[147.62159729 101.11660004]
[162.37507629 103.82490540]
[177.12854004 106.53321075]
[183.48986816 104.67450714]
[189.00392151 106.10022736]
[192.30183411 109.56693268]
[206.96244812 112.73963165]
[221.62307739 115.91233063]
[236.28370667 119.08503723]
[250.94433594 122.25773621]
[266.06881714 117.61441040]
[276.87158203 127.86864471]
[291.53222656 131.04135132]
[306.19284058 134.21405029]
[320.85348511 137.38674927]
[335.97796631 132.74342346]
[346.78073120 142.99765015]
[361.90521240 138.35433960]
[372.70800781 148.60856628]
[387.36862183 151.78126526]
[402.02926636 154.95396423]
[408.44607544 153.29701233]
[413.91238403 154.89608765]
[417.09921265 158.46517944]
[431.65237427 162.09910583]
[446.20553589 165.73304749]
[460.75869751 169.36697388]
[475.31185913 173.00091553]
[487.85900879 163.66801453]
[503.46664429 164.63534546]
[514.76531982 175.44618225]
[516.42010498 190.99595642]
[507.64974976 203.94255066]
[492.59527588 208.17297363]
[478.36495972 201.68975830]
[471.67791748 187.55407715]
[457.12475586 183.92013550]
[442.57159424 180.28620911]
[428.01843262 176.65226746]
[413.46527100 173.01834106]
[398.85656738 169.61459351]
[384.19592285 166.44189453]
[369.53530884 163.26919556]
[355.45944214 168.13945007]
[343.60803223 157.65827942]
[329.53216553 162.52853394]
[317.68078613 152.04737854]
[303.02014160 148.87467957]
[288.35952759 145.70196533]
[273.69888306 142.52926636]
[259.62304688 147.39952087]
[247.77163696 136.91836548]
[233.11100769 133.74566650]
[218.45037842 130.57296753]
[203.78974915 127.40026093]
[189.12911987 124.22756195]
[174.42024231 121.28668976]
[159.66676331 118.57838440]
[144.91328430 115.87007904]
[130.15980530 113.16177368]
[125.96572113 123.61685181]
[118.08025360 132.61630249]
[107.05308533 138.85015869]
[93.89607239 141.22865295]
[79.99250793 139.04301453]
[80.70265198 154.02619934]
[81.41280365 169.00938416]
[82.12294769 183.99255371]
[95.16766357 192.39582825]
[100.75035095 206.87385559]
[96.72434998 221.85954285]
[84.63773346 231.59059143]
[69.13806152 232.32521057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 193]
[4 192]
[5 191]
[6 190]
[27 49]
[28 48]
[29 47]
[34 44]
[35 43]
[60 121]
[61 120]
[62 119]
[63 118]
[64 117]
[70 83]
[71 82]
[72 81]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[96 107]
[97 106]
[99 105]
[100 104]
[125 185]
[126 184]
[127 183]
[128 182]
[131 181]
[132 180]
[133 179]
[134 178]
[135 177]
[137 175]
[138 174]
[139 173]
[140 172]
[142 170]
[144 168]
[145 167]
[146 166]
[149 165]
[150 164]
[151 163]
[152 162]
[153 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
