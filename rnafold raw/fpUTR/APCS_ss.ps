%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAUGAAUAUCAGACGCUAGGGGGACAGCCACUGUGUUGUCUGCUACCCUCAUCCUGGUCACUGCUUCUGCUAUAACAGCCCUAGGCCAGGAAU\
) } def
/len { sequence length } bind def

/coor [
[170.97694397 122.52245331]
[156.07321167 120.82574463]
[141.16947937 119.12903595]
[148.56120300 132.18133545]
[144.84664917 146.71412659]
[132.09840393 154.61869812]
[117.42947388 151.48458862]
[109.02455902 139.06053162]
[111.57325745 124.27864075]
[123.65460205 115.38636780]
[109.35902405 110.84362030]
[95.66199493 113.65126801]
[86.09822083 103.45195770]
[71.80265045 98.90920258]
[57.50707626 94.36645508]
[43.21150208 89.82369995]
[28.91592979 85.28095245]
[14.62035751 80.73819733]
[-0.87497610 83.93276215]
[-10.66131020 72.70436096]
[-24.95688438 68.16161346]
[-40.45221710 71.35617065]
[-50.23855209 60.12777328]
[-64.53412628 55.58502197]
[-78.90138245 51.27435303]
[-93.33656311 47.19690323]
[-109.09112549 51.74946976]
[-120.72187042 40.18842316]
[-116.26409149 24.40678215]
[-100.30356598 20.63934326]
[-89.25910950 32.76172638]
[-74.82393646 36.83917618]
[-67.39010620 35.60433960]
[-59.99137497 41.28944778]
[-45.69580078 45.83219910]
[-31.22298241 42.31270981]
[-20.41413307 53.86603928]
[-6.11855936 58.40878677]
[8.35425854 54.88930130]
[19.16310883 66.44262695]
[33.45868301 70.98537445]
[47.75425339 75.52812958]
[62.04982758 80.07087708]
[76.34539795 84.61363220]
[90.64097595 89.15637970]
[104.33800507 86.34873199]
[113.90177917 96.54804230]
[128.19735718 101.09079742]
[142.86619568 104.22531128]
[157.76991272 105.92201233]
[172.67364502 107.61872101]
[183.17646790 96.34943390]
[198.12638855 93.45917511]
[211.75041199 99.85057068]
[218.91276550 112.88278961]
[233.81648254 114.57949829]
[248.72021484 116.27620697]
[263.62396240 117.97291565]
[278.52767944 119.66961670]
[293.43142700 121.36632538]
[308.33514404 123.06303406]
[323.23886108 124.75974274]
[334.40402222 112.17651367]
[350.69317627 108.69266510]
[365.72778320 115.47248077]
[373.73855591 129.69987488]
[388.68942261 130.91308594]
[403.64028931 132.12628174]
[411.77197266 119.15962219]
[425.00393677 111.46721649]
[440.29562378 110.81671906]
[454.13308716 117.35762024]
[463.33657837 129.58685303]
[465.79119873 144.69425964]
[460.93289185 159.20823669]
[449.87808228 169.79359436]
[435.16708374 174.01788330]
[420.18035889 170.91041565]
[408.36172485 161.18524170]
[402.42706299 147.07714844]
[387.47622681 145.86393738]
[372.52536011 144.65072632]
[364.72888184 155.61787415]
[352.41229248 161.30180359]
[338.79153442 160.09921265]
[327.48272705 152.22065735]
[321.54217529 139.66346741]
[306.63842773 137.96676636]
[291.73471069 136.27006531]
[276.83096313 134.57334900]
[261.92724609 132.87664795]
[247.02351379 131.17993164]
[232.11978149 129.48323059]
[217.21604919 127.78652191]
[207.30766296 138.87533569]
[192.59562683 142.04081726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[10 48]
[11 47]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[20 38]
[21 37]
[23 35]
[24 34]
[25 32]
[26 31]
[55 94]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[66 82]
[67 81]
[68 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
