%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCGAGCGGACUGCGCGGAGGCUGCGGAGCCGGCGGCCGCGGGAGCUGACCCUGCGGGGUCCCGGGGGGGGAGGGGGAGCCGCGAAGCCCCCACUGAGGCCGCCGCUGCCGGGCCUCCCCUCCCCCCCGGGCGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[110.36041260 111.60790253]
[106.39573669 117.68991089]
[99.23184967 122.04884338]
[89.75727844 123.14903259]
[77.41252136 131.66999817]
[65.06776428 140.19097900]
[52.72300339 148.71194458]
[49.61241150 161.28146362]
[39.09043503 168.11599731]
[27.13343239 165.98750305]
[14.60446930 174.23522949]
[2.07550645 182.48297119]
[-3.42556977 189.87419128]
[-10.82051563 190.77073669]
[-23.52763557 198.74125671]
[-31.10698318 212.62879944]
[-46.00013351 212.83708191]
[-58.70725250 220.80758667]
[-71.41437531 228.77810669]
[-84.12149048 236.74861145]
[-96.82861328 244.71913147]
[-107.03376770 258.25762939]
[-122.86825562 252.19912720]
[-121.42993927 235.30630493]
[-104.79912567 232.01200867]
[-92.09201050 224.04148865]
[-79.38488770 216.07098389]
[-66.67776489 208.10046387]
[-53.97064590 200.12995911]
[-47.30019760 186.81251526]
[-31.49814987 186.03413391]
[-18.79102898 178.06361389]
[-6.17222643 169.95401001]
[6.35673666 161.70626831]
[18.88569832 153.45854187]
[25.85206413 137.38748169]
[44.20203400 136.36718750]
[56.54679108 127.84621429]
[68.89154816 119.32524109]
[81.23630524 110.80426788]
[81.40106964 95.80517578]
[69.24647522 87.01507568]
[57.09188080 78.22498322]
[44.93728638 69.43488312]
[32.78269196 60.64478683]
[20.62809563 51.85469055]
[5.50853491 55.84629440]
[-8.61737633 49.13863754]
[-15.07981491 34.89887238]
[-10.82741451 19.85058022]
[2.13197064 11.09910393]
[17.67931557 12.77662277]
[28.47364044 24.09106445]
[29.41819382 39.70009232]
[41.57278824 48.49019241]
[53.72738266 57.28028870]
[65.88198090 66.07038879]
[78.03657532 74.86048126]
[90.19116974 83.65058136]
[104.96009827 86.27333069]
[119.39804077 82.20568848]
[127.15966034 68.70031738]
[141.85974121 64.78083038]
[154.68721008 72.26357269]
[169.12515259 68.19593048]
[183.56311035 64.12828827]
[198.00105286 60.06064987]
[212.29713440 55.51951599]
[226.43583679 50.50982666]
[240.57455444 45.50013351]
[254.71325684 40.49044418]
[268.85195923 35.48075104]
[282.99066162 30.47105980]
[297.12936401 25.46136856]
[311.26806641 20.45167732]
[325.40676880 15.44198513]
[339.54550171 10.43229389]
[353.68420410 5.42260218]
[367.82290649 0.41291088]
[381.96160889 -4.59678078]
[392.38528442 -16.49878120]
[406.96585083 -13.45640087]
[421.10455322 -18.46609306]
[435.24325562 -23.47578430]
[449.08563232 -29.25407028]
[462.58993530 -35.78352737]
[476.09423828 -42.31298065]
[481.51040649 -58.90783691]
[496.93252563 -66.34012604]
[512.65618896 -60.47236252]
[526.01379395 -67.29689789]
[539.37139893 -74.12142944]
[541.64886475 -89.47046661]
[552.53729248 -100.52584839]
[567.84991455 -103.03655243]
[581.69866943 -96.03717041]
[588.75848389 -82.21910095]
[586.31463623 -66.89567566]
[575.30688477 -55.95906448]
[559.96795654 -53.61461639]
[546.19592285 -60.76382065]
[532.83831787 -53.93928528]
[519.48071289 -47.11475372]
[517.24841309 -34.37882233]
[507.93234253 -25.13326645]
[494.79504395 -22.93321419]
[482.62368774 -28.80867767]
[469.11938477 -22.27922249]
[455.61508179 -15.74976730]
[468.48321533 -8.04188347]
[470.70303345 6.79295254]
[460.65478516 17.92994881]
[445.67056274 17.24257851]
[436.68411255 5.23240852]
[440.25296021 -9.33707905]
[426.11425781 -4.32738733]
[411.97555542 0.68230420]
[402.56317139 12.22597885]
[386.97128296 9.54192448]
[372.83258057 14.55161667]
[358.69387817 19.56130791]
[344.55517578 24.57099915]
[330.41647339 29.58069038]
[316.27777100 34.59038162]
[302.13906860 39.60007477]
[288.00036621 44.60976410]
[273.86166382 49.61945724]
[259.72293091 54.62914658]
[245.58424377 59.63883972]
[231.44554138 64.64852905]
[217.30682373 69.65821838]
[215.45848083 72.74661255]
[211.98335266 75.06243134]
[207.27595520 75.83304596]
[202.06869507 74.49859619]
[187.63075256 78.56623840]
[173.19279480 82.63388062]
[158.75485229 86.70152283]
[151.72016907 99.78009033]
[137.13598633 104.11093140]
[123.46568298 96.64363861]
[109.02774048 100.71128082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 40]
[5 39]
[6 38]
[7 37]
[10 35]
[11 34]
[12 33]
[14 32]
[15 31]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[60 142]
[61 141]
[64 138]
[65 137]
[66 136]
[67 135]
[68 131]
[69 130]
[70 129]
[71 128]
[72 127]
[73 126]
[74 125]
[75 124]
[76 123]
[77 122]
[78 121]
[79 120]
[80 119]
[82 117]
[83 116]
[84 115]
[85 109]
[86 108]
[87 107]
[90 103]
[91 102]
[92 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
