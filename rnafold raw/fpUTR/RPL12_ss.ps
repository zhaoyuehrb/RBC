%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGGCUUGUCCGCGCGAUUUCCGGCCUCUCGGCUUUCGGCUCGGAGGAGGCCAAGGUGCAACUUCCUUCGGUCGUCCCGAAUCCGGGUUCAUCCGACACCAGCCGCCUCCACC\
) } def
/len { sequence length } bind def

/coor [
[86.07982635 186.74838257]
[83.30228424 201.48898315]
[76.00159454 214.59240723]
[64.92856598 224.71112061]
[51.22196198 230.80447388]
[36.29137421 232.24583435]
[21.67227364 228.88697815]
[8.86809826 221.07333374]
[-0.80436277 209.60845947]
[-6.35038757 195.67140198]
[-7.19961977 180.69544983]
[-3.26472282 166.22076416]
[5.04963541 153.73591614]
[16.88783073 144.52517700]
[1.90982914 145.33724976]
[-6.62100506 148.96731567]
[-13.48368835 145.96295166]
[-28.47818756 146.36914062]
[-43.47268677 146.77532959]
[-52.29465485 159.40382385]
[-66.69280243 164.35829163]
[-81.07735443 159.93688965]
[-89.99340820 148.03553772]
[-104.98790741 148.44172668]
[-119.98240662 148.84793091]
[-130.66767883 160.49269104]
[-146.46076965 161.08766174]
[-157.99191284 150.27986145]
[-158.41987610 134.48136902]
[-147.49076843 123.06514740]
[-131.68864441 122.80422974]
[-120.38859558 133.85342407]
[-105.39409637 133.44723511]
[-90.39959717 133.04104614]
[-82.14094543 120.67445374]
[-68.01686096 115.48076630]
[-53.37160110 119.64846039]
[-43.87887573 131.78082275]
[-28.88437843 131.37463379]
[-13.88987923 130.96844482]
[1.09774542 130.35925293]
[16.07574654 129.54716492]
[19.97886658 125.91699219]
[25.62815666 124.25415039]
[31.98254967 125.36181641]
[45.42063522 118.69714355]
[58.85871887 112.03246307]
[72.29679871 105.36779022]
[85.73488617 98.70311737]
[93.63570404 87.16757202]
[107.60044098 87.85880280]
[121.03852081 81.19412231]
[134.47660828 74.52944946]
[137.40585327 63.88037491]
[145.59548950 56.80404282]
[156.11772156 55.50529861]
[165.38691711 60.17898941]
[179.16610718 54.25161362]
[192.94531250 48.32423401]
[206.72450256 42.39685822]
[192.60577393 37.33112717]
[183.31541443 25.55449486]
[181.67558289 10.64439869]
[188.18441772 -2.86985278]
[200.86471558 -10.88297558]
[215.86451721 -10.96078873]
[228.62725830 -3.07965279]
[235.27595520 10.36634350]
[233.79089355 25.29265022]
[224.62274170 37.16538620]
[239.42514038 34.73865509]
[254.22753906 32.31192398]
[269.02993774 29.88519478]
[278.25384521 17.33302307]
[293.30017090 15.08283901]
[305.20989990 23.95379257]
[319.09875488 11.95780754]
[335.26712036 18.63242149]
[349.99838257 15.80574226]
[364.72964478 12.97906208]
[379.46090698 10.15238190]
[391.50259399 -0.97997445]
[407.08200073 4.14002085]
[410.17233276 20.24535561]
[397.59454346 30.76824188]
[382.28756714 24.88363647]
[367.55633545 27.71031761]
[352.82507324 30.53699684]
[338.09381104 33.36367798]
[330.98043823 43.25051498]
[318.63165283 45.66431427]
[307.63662720 38.75619125]
[299.18283081 50.96557236]
[284.20565796 53.63748932]
[271.45666504 44.68759155]
[256.65426636 47.11432266]
[241.85186768 49.54105377]
[227.04946899 51.96778488]
[212.65188599 56.17605209]
[198.87268066 62.10342789]
[185.09349060 68.03080750]
[171.31430054 73.95818329]
[161.07847595 90.26998138]
[141.14128113 87.96753693]
[127.70320129 94.63220978]
[114.26511383 101.29688263]
[106.36429596 112.83242798]
[92.39955902 112.14119720]
[78.96147919 118.80587769]
[65.52339172 125.47055054]
[52.08530807 132.13522339]
[38.64722443 138.79989624]
[53.48621750 140.99179077]
[66.86837006 147.76806641]
[77.41744995 158.43188477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 42]
[15 41]
[17 40]
[18 39]
[19 38]
[23 34]
[24 33]
[25 32]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[51 106]
[52 105]
[53 104]
[57 102]
[58 101]
[59 100]
[60 99]
[70 98]
[71 97]
[72 96]
[73 95]
[76 92]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
