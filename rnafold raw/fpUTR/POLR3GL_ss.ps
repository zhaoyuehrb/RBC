%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCUUAGAACGCCACCGACUUGAGGAAGCCCAGUACAUUUCAAGUUGGUCGCGGCUUGGGCUCCGCUUUGGGGAGGGGCAGCAGGUUUAUUCACUGGAUCUCUGAAUACCCAGGCCCCCUCCACC\
) } def
/len { sequence length } bind def

/coor [
[79.36266327 104.78688812]
[64.49701691 102.78373718]
[49.63137436 100.78057861]
[34.76572800 98.77742004]
[19.87679672 96.95542145]
[4.96678209 95.31485748]
[-9.94323254 93.67428589]
[-24.85324669 92.03372192]
[-39.76326370 90.39315033]
[-54.67327499 88.75258636]
[-66.93116760 98.36413574]
[-82.02867126 96.48796844]
[-91.11627197 84.74271393]
[-106.02629089 83.10214996]
[-120.93630219 81.46157837]
[-135.49992371 87.64311981]
[-147.30461121 78.56024170]
[-162.21463013 76.91967010]
[-177.12463379 75.27910614]
[-192.03465271 73.63853455]
[-206.94467163 71.99797058]
[-221.85467529 70.35739899]
[-236.76469421 68.71682739]
[-251.67471313 67.07626343]
[-266.58471680 65.43569183]
[-281.49475098 63.79512787]
[-296.40475464 62.15456009]
[-303.69229126 75.49472809]
[-315.53332520 85.02671814]
[-330.12213135 89.29696655]
[-345.23403931 87.65429688]
[-358.56460571 80.34921265]
[-368.08102417 68.49566650]
[-372.33209229 53.90125275]
[-370.66952515 38.79150772]
[-363.34692383 25.47055817]
[-351.48086548 15.96975422]
[-336.88085938 11.73789883]
[-321.77331543 13.42031860]
[-308.46200562 20.76045609]
[-298.97683716 32.63899612]
[-294.76419067 47.24454498]
[-279.85418701 48.88511276]
[-264.94415283 50.52568054]
[-250.03414917 52.16624832]
[-235.12413025 53.80681610]
[-220.21411133 55.44738388]
[-205.30409241 57.08795166]
[-190.39408875 58.72851944]
[-175.48406982 60.36908722]
[-160.57405090 62.00965881]
[-145.66404724 63.65022659]
[-132.16688538 57.35133743]
[-119.29573822 66.55156708]
[-104.38571930 68.19213104]
[-89.47570801 69.83270264]
[-78.05174255 60.34436035]
[-62.90749359 61.79573059]
[-53.03270721 73.84256744]
[-38.12269211 75.48313904]
[-23.21267891 77.12370300]
[-8.30266476 78.76427460]
[6.60734987 80.40484619]
[21.51736450 82.04541016]
[28.58308411 79.62480927]
[36.76888657 83.91178131]
[51.63452911 85.91493225]
[66.50017548 87.91809082]
[81.36581421 89.92124939]
[94.20337677 79.62321472]
[110.53910828 81.62226105]
[120.51465607 94.71199036]
[135.42466736 96.35255432]
[150.33468628 97.99312592]
[165.24468994 99.63369751]
[180.15470886 101.27426147]
[189.13270569 99.08766937]
[195.40623474 103.14063263]
[210.27188110 105.14378357]
[225.13752747 107.14694214]
[240.00315857 109.15010071]
[254.86880493 111.15325165]
[263.66421509 100.46472931]
[276.50042725 95.58191681]
[289.96142578 97.68904114]
[300.52178955 106.12527466]
[305.46987915 118.58660126]
[320.28231812 120.95115662]
[335.09478760 123.31571198]
[341.55603027 121.26303864]
[347.20254517 122.64818573]
[350.56365967 126.17295837]
[365.24340820 129.25588989]
[379.92318726 132.33882141]
[394.60293579 135.42175293]
[409.28271484 138.50469971]
[420.03924561 127.44574738]
[435.07229614 123.98006439]
[449.58486938 129.21353149]
[458.94604492 141.47616577]
[460.16870117 156.85499573]
[452.86270142 170.44270325]
[439.35937500 177.90350342]
[423.96755981 176.85668945]
[411.59875488 167.63626099]
[406.19976807 153.18446350]
[391.52001953 150.10153198]
[376.84024048 147.01858521]
[362.16049194 143.93565369]
[347.48071289 140.85272217]
[332.73022461 138.12817383]
[317.91778564 135.76361084]
[303.10531616 133.39906311]
[291.90951538 145.33950806]
[275.64663696 148.32044983]
[260.64627075 140.98173523]
[252.86564636 126.01889801]
[238.00001526 124.01573944]
[223.13436890 122.01258850]
[208.26872253 120.00942993]
[193.40307617 118.00627136]
[178.51414490 116.18428040]
[163.60412598 114.54370880]
[148.69412231 112.90313721]
[133.78410339 111.26257324]
[118.87408447 109.62200165]
[109.94762421 118.70451355]
[97.42670441 121.02836609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[13 56]
[14 55]
[15 54]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[72 126]
[73 125]
[74 124]
[75 123]
[76 122]
[78 121]
[79 120]
[80 119]
[81 118]
[82 117]
[87 113]
[88 112]
[89 111]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
