%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUCCCACAAGGGCGCCGGCGUGCGCGGCCGCAGGGCGCGCAGUGUUGACCCGCGUCCUAGCAACAGGCGGGCGCCGACUGCGGGGGGCAGGGUGCUGCAGUGCGUGUGCUAAGCUCAGGUCUGAGCACGGUGGAUCCC\
) } def
/len { sequence length } bind def

/coor [
[72.09253693 116.60395813]
[69.10339355 104.25859833]
[71.12236786 92.23229980]
[58.07741165 84.82762909]
[45.03245926 77.42295837]
[31.98750305 70.01828766]
[18.94254684 62.61361313]
[5.89759207 55.20894241]
[-7.14736319 47.80427551]
[-22.96834946 47.72074127]
[-30.21731758 34.70914078]
[-43.26227188 27.30447197]
[-59.99629974 32.27401733]
[-74.87371063 23.80387688]
[-78.97670746 7.53028202]
[-92.18117523 0.41396254]
[-105.38564301 -6.70235729]
[-118.59011078 -13.81867695]
[-131.79458618 -20.93499565]
[-144.99905396 -28.05131531]
[-160.81805420 -27.78728294]
[-168.35110474 -40.63650131]
[-181.55557251 -47.75281906]
[-197.37457275 -47.48878860]
[-204.90762329 -60.33800507]
[-218.11209106 -67.45432281]
[-228.70426941 -61.85603714]
[-240.56201172 -62.10030746]
[-250.70660400 -68.00894165]
[-256.64642334 -77.99552917]
[-256.98849487 -89.48959351]
[-269.86761475 -97.17903900]
[-280.33795166 -93.89135742]
[-290.66519165 -96.89000702]
[-297.46160889 -104.93724060]
[-298.63909912 -115.18248749]
[-311.16806030 -123.43022156]
[-323.69702148 -131.67794800]
[-336.22598267 -139.92568970]
[-348.75494385 -148.17341614]
[-361.28390503 -156.42115784]
[-373.81286621 -164.66888428]
[-386.34182739 -172.91661072]
[-399.16043091 -171.08583069]
[-409.44241333 -178.27635193]
[-411.95388794 -190.15881348]
[-424.29864502 -198.67977905]
[-440.67926025 -199.45932007]
[-447.95294189 -214.15711975]
[-438.63717651 -227.65336609]
[-422.31518555 -226.06425476]
[-415.77767944 -211.02455139]
[-403.43292236 -202.50357056]
[-385.92224121 -202.07334900]
[-378.09408569 -185.44558716]
[-365.56512451 -177.19784546]
[-353.03616333 -168.95011902]
[-340.50720215 -160.70237732]
[-327.97824097 -152.45465088]
[-315.44927979 -144.20690918]
[-302.92031860 -135.95918274]
[-290.39135742 -127.71144867]
[-271.10388184 -128.07592773]
[-262.17819214 -110.05818939]
[-249.29904175 -102.36874390]
[-231.92048645 -107.94033051]
[-215.67242432 -98.95492554]
[-210.99577332 -80.65879059]
[-197.79130554 -73.54247284]
[-182.91677856 -74.31551361]
[-174.43925476 -60.95729065]
[-161.23478699 -53.84096909]
[-146.36024475 -54.61400986]
[-137.88272095 -41.25578308]
[-124.67826080 -34.13946533]
[-111.47379303 -27.02314568]
[-98.26932526 -19.90682602]
[-85.06484985 -12.79050636]
[-71.86038208 -5.67418671]
[-60.11081696 -11.07185364]
[-47.20973969 -8.65694809]
[-37.93630600 0.90504414]
[-35.85760117 14.25951576]
[-22.81264687 21.66418648]
[-7.92472410 21.21808815]
[0.25730711 34.75931931]
[13.30226231 42.16399002]
[26.34721756 49.56866074]
[39.39217377 56.97333145]
[52.43712616 64.37799835]
[65.48208618 71.78266907]
[78.52703857 79.18733978]
[95.02532959 68.88529968]
[115.40750885 70.68694305]
[131.34901428 85.07295227]
[135.61686707 107.14875031]
[149.96197510 111.53257751]
[164.30708313 115.91640472]
[178.65219116 120.30022430]
[192.99729919 124.68405151]
[202.19844055 124.20327759]
[207.60745239 129.32495117]
[221.85279846 134.02284241]
[236.09814453 138.72073364]
[245.30761719 138.44219971]
[250.60281372 143.68145752]
[264.74151611 148.69114685]
[280.33340454 146.00709534]
[289.74578857 157.55076599]
[303.88449097 162.56045532]
[319.47634888 159.87640381]
[328.88873291 171.42007446]
[343.02743530 176.42976379]
[359.97644043 176.02055359]
[365.06161499 192.19390869]
[350.92803955 201.55758667]
[338.01773071 190.56848145]
[323.87902832 185.55877686]
[309.29846191 188.60116577]
[298.87478638 176.69915771]
[284.73608398 171.68946838]
[270.15551758 174.73185730]
[259.73184204 162.82984924]
[245.59312439 157.82015991]
[231.40025330 152.96607971]
[217.15490723 148.26818848]
[202.90956116 143.57029724]
[188.61347961 139.02915955]
[174.26837158 134.64533997]
[159.92326355 130.26150513]
[145.57815552 125.87768555]
[131.23304749 121.49385834]
[120.45313263 131.92427063]
[124.36193085 146.40602112]
[137.49766541 155.61647034]
[138.34278870 171.63723755]
[126.24900055 182.17858887]
[110.49362183 179.15408325]
[103.16282654 164.88386536]
[109.88018036 150.31481934]
[105.97137451 135.83306885]
[91.85382843 134.08259583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[8 87]
[9 86]
[11 84]
[12 83]
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[22 72]
[23 71]
[25 69]
[26 68]
[31 65]
[32 64]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[46 53]
[47 52]
[96 132]
[97 131]
[98 130]
[99 129]
[100 128]
[102 127]
[103 126]
[104 125]
[106 124]
[107 123]
[109 121]
[110 120]
[112 118]
[113 117]
[133 141]
[134 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
