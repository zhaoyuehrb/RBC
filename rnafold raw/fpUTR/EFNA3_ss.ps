%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUGGGAAGCGGAGAAGCCGGGAGCGCGGGGCUCAGUCGGGGGGCGGCGGCGGCGGCGGCUCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[138.84172058 367.81777954]
[136.20068359 353.05212402]
[133.55966187 338.28643799]
[130.91864014 323.52078247]
[128.27760315 308.75509644]
[125.63658142 293.98944092]
[122.99555206 279.22375488]
[112.11918640 274.69647217]
[104.82233429 265.29248047]
[103.10358429 253.39108276]
[107.53043365 242.07969666]
[117.06022644 234.35279846]
[115.73452759 219.41149902]
[106.90266418 207.41786194]
[113.39002228 192.98786926]
[102.95634460 187.51704407]
[96.51917267 177.50492859]
[95.85900116 165.49821472]
[101.26822662 154.62232971]
[111.44362640 147.76792908]
[111.44362640 132.76792908]
[111.44362640 117.76792908]
[92.69158173 118.31628418]
[82.21483612 104.33911133]
[87.21695709 88.95593262]
[81.40014648 75.12969971]
[75.58333588 61.30347061]
[69.76652527 47.47723770]
[55.51362228 40.11283493]
[52.52625656 24.35037231]
[63.09607315 12.28146458]
[79.11481476 13.16434288]
[88.29427338 26.32173920]
[83.59275818 41.66042328]
[89.40956879 55.48665619]
[95.22637939 69.31288910]
[101.04319000 83.13912201]
[111.82171631 85.10816193]
[120.24785614 93.94359589]
[130.00219727 82.54829407]
[139.75651550 71.15298462]
[142.22930908 54.94134140]
[157.60173035 49.22988129]
[170.05995178 59.89406586]
[166.78802490 75.96349335]
[151.15182495 80.90731812]
[141.39749146 92.30262756]
[131.64315796 103.69792938]
[126.44362640 117.76792908]
[126.44362640 132.76792908]
[126.44362640 147.76792908]
[140.29046631 160.31489563]
[140.89350891 178.68032837]
[128.33132935 191.66217041]
[137.25801086 204.72451782]
[130.67582703 218.08580017]
[132.00152588 233.02709961]
[146.90309143 244.30119324]
[149.12690735 262.54147339]
[137.76121521 276.58273315]
[140.40225220 291.34841919]
[143.04327393 306.11407471]
[145.68429565 320.87976074]
[148.32533264 335.64541626]
[150.96635437 350.41107178]
[153.60739136 365.17675781]
[165.89685059 375.48928833]
[165.35252380 391.52310181]
[152.39195251 400.97842407]
[136.95738220 396.60192871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[12 57]
[13 56]
[15 54]
[20 51]
[21 50]
[22 49]
[25 37]
[26 36]
[27 35]
[28 34]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
