%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUUCCCGCCCGCCCGCAGACGACCGCCGUUCUGUUGCCGCGUCCUAGGAGGGCCAGAUUGGUGGCUGUGGGGACUUUUGG\
) } def
/len { sequence length } bind def

/coor [
[41.03916168 333.09317017]
[33.53916168 346.08355713]
[26.03915977 359.07394409]
[18.53915977 372.06430054]
[21.28582001 387.87048340]
[10.53319645 399.77682495]
[-5.47022009 398.64978027]
[-14.44797611 385.35394287]
[-9.51310730 370.08871460]
[5.54877901 364.56430054]
[13.04877853 351.57394409]
[20.54877853 338.58355713]
[28.04877853 325.59317017]
[23.03134918 301.07211304]
[42.92480850 284.91821289]
[45.71348190 270.17971802]
[48.50215530 255.44122314]
[51.29082870 240.70272827]
[54.07950592 225.96423340]
[56.86817932 211.22573853]
[59.65685272 196.48722839]
[57.93267822 193.98104858]
[57.22809982 190.55947876]
[57.93086624 186.66134644]
[60.24038315 182.86961365]
[64.11938477 179.83283997]
[69.07357025 165.67459106]
[74.02775574 151.51634216]
[78.98194122 137.35809326]
[83.93612671 123.19983673]
[88.89031219 109.04158783]
[86.47986603 95.26910400]
[96.95143890 86.00422668]
[101.90562439 71.84597778]
[106.85980988 57.68772888]
[111.81399536 43.52947617]
[110.90835571 36.57349014]
[113.43769836 31.13553238]
[117.70392609 28.52217674]
[123.70230865 14.77374268]
[129.70068359 1.02530921]
[130.30609131 -8.34227180]
[136.18899536 -13.11843395]
[137.14424133 -22.45682716]
[143.20162964 -27.00967979]
[150.21064758 -40.27141190]
[149.05709839 -56.62993622]
[162.79679871 -65.58272552]
[177.29554749 -57.91991806]
[177.63825989 -41.52435303]
[163.47238159 -33.26238251]
[156.46334839 -20.00065041]
[149.70353699 -6.61017752]
[143.44911194 7.02368975]
[137.45074463 20.77212334]
[131.45236206 34.52055740]
[125.97224426 48.48366165]
[121.01805878 62.64191437]
[116.06387329 76.80016327]
[111.10968781 90.95841217]
[113.52013397 104.73089600]
[103.04856110 113.99577332]
[98.09437561 128.15402222]
[93.14019012 142.31227112]
[88.18600464 156.47052002]
[83.23181915 170.62876892]
[78.27763367 184.78701782]
[74.39534760 199.27590942]
[71.60667419 214.01440430]
[68.81800079 228.75289917]
[66.02932739 243.49139404]
[63.24065399 258.22988892]
[60.45198059 272.96838379]
[57.66330338 287.70687866]
[62.84897995 291.54800415]
[66.85863495 296.56988525]
[69.43469238 302.42761230]
[70.41738129 308.72348022]
[69.75465393 315.03375244]
[67.50467682 320.93746948]
[63.83109283 326.04428101]
[58.99112320 330.02035522]
[53.31763458 332.61029053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[21 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[33 60]
[34 59]
[35 58]
[36 57]
[39 56]
[40 55]
[41 54]
[43 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
