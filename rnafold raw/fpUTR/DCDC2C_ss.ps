%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCAGCCCCCGUCCCGUCCCCGUCCCGUCCCCGUCCUGCGCCAGCGGCUGGAGCGGACCUCCCGUCGGCGGUGCCCGGGCCUGGGCGCGGCUCUGCAGGCGUCGCUGCCCGCGCUGCCGCAGCCUCUCGGCCCCGGCGAGCGAGGAGCGGGGCGCGGCU\
) } def
/len { sequence length } bind def

/coor [
[86.18463135 418.98318481]
[71.25785065 424.86285400]
[57.42668152 416.73397827]
[55.30122375 400.83236694]
[66.51194000 389.35632324]
[67.68153381 374.40197754]
[68.85112000 359.44766235]
[70.02071381 344.49331665]
[62.38810730 335.06802368]
[63.27251434 322.56961060]
[72.74377441 313.76559448]
[74.20492554 298.83691406]
[75.66607666 283.90826416]
[77.12723541 268.97958374]
[78.58838654 254.05093384]
[80.04954529 239.12226868]
[81.51069641 224.19360352]
[82.97184753 209.26493835]
[76.51111603 195.84449768]
[85.55589294 182.86364746]
[87.01705170 167.93498230]
[88.33248138 152.99276733]
[89.50207520 138.03843689]
[90.67166901 123.08410645]
[72.74890900 111.98001862]
[67.56218719 87.84996033]
[52.58003235 87.11850739]
[37.59787750 86.38706207]
[22.61572075 85.65561676]
[8.45466995 92.71076965]
[-3.88016629 84.36205292]
[-18.86232185 83.63060760]
[-33.02337265 90.68576050]
[-45.35820770 82.33704376]
[-60.34036255 81.60559845]
[-75.32251740 80.87415314]
[-90.31109619 80.28890991]
[-105.30467224 79.84992981]
[-120.29824829 79.41094971]
[-136.30754089 84.99116516]
[-146.10150146 71.15227509]
[-135.51466370 57.91008759]
[-119.85926819 64.41737366]
[-104.86569214 64.85635376]
[-89.87211609 65.29533386]
[-83.05966187 62.33268356]
[-74.59107208 65.89199066]
[-59.60891724 66.62344360]
[-44.62676239 67.35488892]
[-31.53733444 60.24741364]
[-18.13087463 68.64845276]
[-3.14871907 69.37989807]
[9.94070721 62.27242279]
[23.34716797 70.67346191]
[38.32932281 71.40490723]
[53.31147766 72.13635254]
[68.29363251 72.86779785]
[75.70898438 59.82891464]
[67.42111206 47.32646179]
[59.13324738 34.82401276]
[45.05930328 27.59666061]
[44.47618866 12.71347427]
[36.18832016 0.21102405]
[21.27391243 -6.60751247]
[19.99131012 -22.95642662]
[33.65994644 -32.01735687]
[48.21869659 -24.46919441]
[48.69077301 -8.07684231]
[56.97863770 4.42560816]
[70.45977783 10.75869942]
[71.63569641 26.53614616]
[79.92356873 39.03859711]
[88.21143341 51.54104614]
[102.89769745 54.59288788]
[115.48040771 46.42739105]
[128.06312561 38.26189804]
[135.42744446 24.25913429]
[150.31561279 23.82125282]
[162.89831543 15.65575981]
[175.48103333 7.49026537]
[188.06375122 -0.67522830]
[200.64646912 -8.84072208]
[208.92428589 -27.18474770]
[228.22885132 -27.47550201]
[240.48339844 -36.12570572]
[252.73794556 -44.77590942]
[264.99249268 -53.42611694]
[277.16207886 -62.19546890]
[289.24551392 -71.08313751]
[301.32894897 -79.97080231]
[313.41238403 -88.85846710]
[325.49581909 -97.74613190]
[328.00909424 -113.11887360]
[340.39001465 -121.96009827]
[355.03009033 -119.46932983]
[367.11352539 -128.35699463]
[379.19696045 -137.24465942]
[385.72943115 -151.65429688]
[400.56646729 -152.96246338]
[412.64990234 -161.85012817]
[424.73333740 -170.73779297]
[426.86618042 -186.39750671]
[439.49780273 -195.89579773]
[455.13409424 -193.59751892]
[464.49832153 -180.86618042]
[462.03482056 -165.25506592]
[449.20520020 -156.02597046]
[433.62100220 -158.65435791]
[421.53756714 -149.76669312]
[409.45413208 -140.87902832]
[403.78594971 -127.10510254]
[388.08462524 -125.16122437]
[376.00119019 -116.27355957]
[363.91775513 -107.38589478]
[361.93475342 -92.66844940]
[349.80703735 -83.48295593]
[334.38348389 -85.66269684]
[322.30004883 -76.77503204]
[310.21661377 -67.88736725]
[298.13317871 -58.99969864]
[286.04974365 -50.11203384]
[282.50683594 -43.58250046]
[273.64270020 -41.17156601]
[261.38815308 -32.52136230]
[249.13360596 -23.87115860]
[236.87905884 -15.22095299]
[236.04211426 -4.97513294]
[229.54634094 3.27460361]
[219.36454773 6.62979078]
[208.81196594 3.74199271]
[196.22924805 11.90748692]
[183.64653015 20.07298088]
[171.06381226 28.23847389]
[158.48109436 36.40396881]
[152.01678467 49.82268143]
[136.22862244 50.84461212]
[123.64590454 59.01010895]
[111.06318665 67.17559814]
[129.11897278 88.27304840]
[124.96411133 112.99672699]
[105.62599945 124.25370026]
[104.45640564 139.20802307]
[103.28681946 154.16236877]
[105.74630737 163.01316833]
[101.94571686 169.39613342]
[100.48455811 184.32479858]
[106.84078217 198.81303406]
[97.90051270 210.72608948]
[96.43936157 225.65475464]
[94.97820282 240.58341980]
[93.51705170 255.51208496]
[92.05590057 270.44073486]
[90.59474182 285.36941528]
[89.13359070 300.29806519]
[87.67243195 315.22674561]
[95.67871857 331.78332520]
[84.97504425 345.66290283]
[83.80545807 360.61724854]
[82.63586426 375.57159424]
[81.46627045 390.52590942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 160]
[6 159]
[7 158]
[8 157]
[11 155]
[12 154]
[13 153]
[14 152]
[15 151]
[16 150]
[17 149]
[18 148]
[20 146]
[21 145]
[22 143]
[23 142]
[24 141]
[26 57]
[27 56]
[28 55]
[29 54]
[31 52]
[32 51]
[34 49]
[35 48]
[36 47]
[37 45]
[38 44]
[39 43]
[58 73]
[59 72]
[60 71]
[62 69]
[63 68]
[74 138]
[75 137]
[76 136]
[78 134]
[79 133]
[80 132]
[81 131]
[82 130]
[84 126]
[85 125]
[86 124]
[87 123]
[88 121]
[89 120]
[90 119]
[91 118]
[92 117]
[95 114]
[96 113]
[97 112]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
