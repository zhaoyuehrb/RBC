%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGCGGCCUCGGCCCAGUGCACAGCGGGACCAGGCAGAGUUCGGGGAAAGCGUCGGAGUUCGGGAGACCAGGGUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[89.99535370 101.43796539]
[75.17115021 99.14822388]
[60.34694290 96.85848999]
[47.68124771 105.92589569]
[32.68001175 103.39260101]
[24.11367798 91.26191711]
[9.29414368 96.80194855]
[-2.10287642 87.21251678]
[-16.92708206 84.92278290]
[-31.75128937 82.63304138]
[-46.57549667 80.34329987]
[-55.79752350 82.15036011]
[-61.91925049 77.67144775]
[-76.64487457 74.81558228]
[-91.42250061 72.24230194]
[-106.24670410 69.95256805]
[-121.07091522 67.66282654]
[-130.29293823 69.46988678]
[-136.41467285 64.99096680]
[-151.14028931 62.13510132]
[-165.18780518 69.88409424]
[-179.94885254 63.59988785]
[-184.10000610 48.10319901]
[-174.45687866 35.28175354]
[-158.41682434 34.97106934]
[-148.28442383 47.40947723]
[-133.55880737 50.26534271]
[-118.78117371 52.83861923]
[-103.95697021 55.12835693]
[-89.13275909 57.41809845]
[-81.85740662 55.27205658]
[-73.78900909 60.08995438]
[-59.06338501 62.94581985]
[-44.28575516 65.51909637]
[-29.46154976 67.80883789]
[-14.63734341 70.09857178]
[0.18686274 72.38831329]
[13.94606972 66.68450165]
[26.40341568 76.43770599]
[38.23060608 67.45700073]
[53.29707718 69.56794739]
[62.63668060 82.03427887]
[77.46089172 84.32402039]
[92.28509521 86.61376190]
[106.40219879 81.54350281]
[116.38208008 70.34520721]
[119.78738403 54.89482117]
[134.03147888 50.54105759]
[136.82742310 34.38201523]
[152.31080627 28.97859001]
[164.55363464 39.88936234]
[160.96154785 55.89027023]
[145.22976685 60.52094269]
[142.53829956 75.17035675]
[127.58037567 80.32509613]
[117.60049438 91.52339172]
[120.45635986 106.24901581]
[133.89884949 112.90481567]
[147.34132385 119.56061554]
[163.14175415 118.75012207]
[171.11430359 131.33135986]
[184.55679321 137.98716736]
[200.35722351 137.17666626]
[208.32977295 149.75791931]
[221.77226257 156.41371155]
[238.09454346 154.82786560]
[247.40762329 168.32595825]
[240.13099670 183.02230835]
[223.75022888 183.79856873]
[215.11645508 169.85620117]
[201.67398071 163.20039368]
[186.83503723 164.48695374]
[177.90100098 151.42964172]
[164.45851135 144.77384949]
[149.61956787 146.06040955]
[140.68553162 133.00309753]
[127.24304962 126.34729767]
[113.80056000 119.69149780]
[104.29464722 120.81997681]
[96.25003815 118.08592224]
[90.98610687 112.83364105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[6 39]
[8 37]
[9 36]
[10 35]
[11 34]
[13 33]
[14 32]
[15 30]
[16 29]
[17 28]
[19 27]
[20 26]
[45 56]
[46 55]
[48 53]
[57 78]
[58 77]
[59 76]
[61 74]
[62 73]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
