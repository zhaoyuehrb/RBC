%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCUUUGUCUCUCGUGCCCGCACGUGCGUGUCUCGGUCAGUAGCCCUGCGCUUCUCCUUCACUCUCGGCGGUUCAGGAGGCUCUGCCGCAGCCGGGGCCCUCCUGUGACCUGCAUGUACUGGGGGAUUCGCAGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[-22.14452744 216.06036377]
[-35.27674103 208.98855591]
[-47.35279083 217.88624573]
[-59.42884064 226.78395081]
[-71.50489044 235.68164062]
[-68.36130524 251.60691833]
[-72.44373322 267.25781250]
[-82.89032745 279.53021240]
[-97.58223724 286.01278687]
[-113.57321167 285.46078491]
[-127.68042755 278.03454590]
[-133.87815857 292.59127808]
[-148.68099976 294.24197388]
[-154.87873840 308.79870605]
[-169.68157959 310.44940186]
[-181.55641174 319.61392212]
[-193.43122864 328.77847290]
[-205.30604553 337.94299316]
[-211.03564453 353.30865479]
[-227.25019836 355.76232910]
[-237.26956177 342.77984619]
[-230.78668213 327.71652222]
[-214.47058105 326.06817627]
[-202.59576416 316.90365601]
[-190.72093201 307.73910522]
[-178.84611511 298.57458496]
[-173.49775696 284.67333984]
[-157.84553528 282.36715698]
[-152.49717712 268.46591187]
[-136.84495544 266.15969849]
[-140.38453674 252.70219421]
[-138.50682068 238.87042236]
[-131.46397400 226.76852417]
[-120.29642487 218.25022888]
[-106.67926025 214.63502502]
[-92.67104340 216.50373840]
[-80.40258789 223.60559082]
[-68.32653809 214.70790100]
[-56.25048828 205.81019592]
[-44.17443466 196.91250610]
[-47.03798294 182.27468872]
[-43.24652863 167.78558350]
[-33.50026703 156.33256531]
[-19.69152832 150.22201538]
[-4.53751707 150.71488953]
[8.95431805 157.76696777]
[21.03036880 148.86926270]
[33.10641861 139.97157288]
[45.18246841 131.07388306]
[57.25852203 122.17617798]
[69.33457184 113.27848816]
[81.41062164 104.38079071]
[83.68528748 90.07093048]
[95.35037231 81.47603607]
[109.69168091 83.54315948]
[121.76773071 74.64546204]
[133.84378052 65.74776459]
[145.91983032 56.85007095]
[157.99588013 47.95237732]
[170.07192993 39.05467987]
[165.62977600 26.09189224]
[165.03955078 12.41871166]
[168.33999634 -0.84587997]
[175.25183105 -12.61905003]
[185.20138550 -21.94250488]
[197.36816406 -28.06049156]
[210.75253296 -30.48105240]
[224.25787354 -29.01557541]
[236.78034973 -23.79344940]
[247.29922485 -15.25070572]
[259.75964355 -23.60161781]
[272.12628174 -32.09082413]
[284.39755249 -40.71726990]
[296.66885376 -49.34371567]
[308.94012451 -57.97016144]
[321.11456299 -66.73278046]
[333.19061279 -75.63047028]
[345.26666260 -84.52816772]
[357.34271240 -93.42586517]
[369.41876221 -102.32356262]
[381.49481201 -111.22126007]
[393.57086182 -120.11895752]
[405.54702759 -129.15063477]
[417.42187500 -138.31515503]
[429.29669189 -147.47969055]
[441.17150879 -156.64421082]
[453.04632568 -165.80874634]
[464.81832886 -175.10499573]
[470.20416260 -190.59449768]
[486.36001587 -193.40879822]
[496.66613770 -180.65277100]
[490.52044678 -165.44873047]
[474.24514771 -163.43730164]
[470.99279785 -156.73283386]
[462.21084595 -153.93392944]
[450.33602905 -144.76939392]
[438.46121216 -135.60485840]
[426.58639526 -126.44033813]
[414.71157837 -117.27580261]
[411.31066895 -110.64546967]
[402.46856689 -108.04290009]
[390.39251709 -99.14521027]
[378.31646729 -90.24751282]
[366.24041748 -81.34981537]
[354.16436768 -72.45211792]
[342.08831787 -63.55442429]
[330.01226807 -54.65672684]
[326.46447754 -48.10380173]
[317.56658936 -45.69887924]
[305.29528809 -37.07243347]
[293.02401733 -28.44598579]
[280.75271606 -19.81954002]
[277.05984497 -13.34728336]
[268.11056519 -11.14119148]
[255.65014648 -2.79027820]
[259.89505005 13.03921700]
[258.49148560 29.39340210]
[251.58998108 44.31443405]
[240.00036621 56.01009369]
[225.09667969 63.06906509]
[208.65434265 64.63120270]
[192.63858032 60.49233246]
[178.96963501 51.13072968]
[166.89358521 60.02842712]
[154.81753540 68.92612457]
[142.74148560 77.82382202]
[130.66542053 86.72151184]
[118.58937836 95.61920929]
[116.31471252 109.92906952]
[104.64962769 118.52396393]
[90.30831909 116.45684052]
[78.23226929 125.35453796]
[66.15621948 134.25222778]
[54.08016586 143.14993286]
[42.00411606 152.04762268]
[29.92806435 160.94532776]
[17.85201454 169.84301758]
[20.59016800 184.81846619]
[16.57114792 199.43812561]
[6.64374971 210.81646729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[5 37]
[11 30]
[13 28]
[15 26]
[16 25]
[17 24]
[18 23]
[46 137]
[47 136]
[48 135]
[49 134]
[50 133]
[51 132]
[52 131]
[55 128]
[56 127]
[57 126]
[58 125]
[59 124]
[60 123]
[70 115]
[71 114]
[72 112]
[73 111]
[74 110]
[75 109]
[76 107]
[77 106]
[78 105]
[79 104]
[80 103]
[81 102]
[82 101]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
