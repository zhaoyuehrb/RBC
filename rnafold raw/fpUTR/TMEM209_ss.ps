%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGAGACUACCUAGUUCUUCCGGUAACUUUAGAGCCGCUUGCCGGUGGCCUCCCGCUUGAGCUUGGCUUUGCGCAUGCCCAGAGAGAGUGGCGCGAGCCUGCGUUUUCCGGCCAGAGGAC\
) } def
/len { sequence length } bind def

/coor [
[-71.26153564 260.85571289]
[-73.86281586 269.73391724]
[-80.52091980 273.13613892]
[-89.70251465 284.99777222]
[-98.88410187 296.85940552]
[-108.06568909 308.72103882]
[-117.24727631 320.58267212]
[-126.42887115 332.44430542]
[-129.25422668 341.25378418]
[-135.99638367 344.48623657]
[-145.47550964 356.11148071]
[-147.56004333 372.37759399]
[-162.79153442 378.45489502]
[-175.50112915 368.09158325]
[-172.61428833 351.94854736]
[-157.10073853 346.63232422]
[-147.62161255 335.00711060]
[-138.29051208 323.26272583]
[-129.10891724 311.40109253]
[-119.92733002 299.53945923]
[-110.74573517 287.67782593]
[-101.56414795 275.81619263]
[-92.38256073 263.95452881]
[-83.35195923 251.97755432]
[-88.08933258 245.54843140]
[-91.35845184 238.24975586]
[-93.00587463 230.41229248]
[-92.95175934 222.39237976]
[-91.19375610 214.55569458]
[-87.80731201 207.26055908]
[-82.94243622 200.84162903]
[-76.81708527 195.59443665]
[-69.70737457 191.76187134]
[-61.93516922 189.52293396]
[-53.85346603 188.98432922]
[-45.83040237 190.17541504]
[-38.23247147 193.04667664]
[-31.40777397 197.47171021]
[-19.78253937 187.99256897]
[-14.80822945 173.95314026]
[0.77664495 171.22875977]
[12.40187931 161.74963379]
[17.37619019 147.71020508]
[32.96106339 144.98582458]
[44.58629990 135.50669861]
[56.21153259 126.02756500]
[67.83676910 116.54843903]
[79.46200562 107.06930542]
[84.83700562 84.44789124]
[107.58731842 79.64768219]
[117.35791016 68.26630402]
[127.12849426 56.88493729]
[136.75411987 45.38071060]
[139.47850037 29.79583359]
[153.51792908 24.82152557]
[162.84904480 13.07714653]
[172.03063965 1.21551096]
[181.21221924 -10.64612484]
[190.39381409 -22.50776100]
[199.57540894 -34.36939621]
[208.75698853 -46.23103333]
[204.57057190 -61.05601501]
[209.85455322 -75.33652496]
[222.38598633 -83.66882324]
[237.24305725 -83.03199005]
[246.42463684 -94.89362335]
[248.75334167 -110.54251099]
[262.66226196 -115.87088013]
[271.84384155 -127.73252106]
[281.02542114 -139.59414673]
[275.77105713 -154.09915161]
[279.21505737 -169.13719177]
[290.25851440 -179.90965271]
[305.37744141 -182.97912598]
[319.74746704 -177.36611938]
[328.78317261 -164.86174011]
[329.60128784 -149.45606995]
[321.94076538 -136.06503296]
[308.24603271 -128.96163940]
[292.88705444 -130.41256714]
[283.70547485 -118.55092621]
[274.52389526 -106.68929291]
[272.85189819 -91.88882446]
[258.28628540 -85.71203613]
[249.10469055 -73.85039520]
[253.44514465 -59.62723541]
[248.51988220 -45.40732574]
[236.01968384 -36.71258926]
[220.61862183 -37.04944229]
[211.43704224 -25.18780708]
[202.25544739 -13.32617188]
[193.07385254 -1.46453536]
[183.89227295 10.39710045]
[174.71067810 22.25873756]
[173.08593750 29.55707169]
[165.14317322 34.30065536]
[163.09680176 49.05401611]
[148.37936401 54.85984039]
[146.57025146 62.11467361]
[138.50987244 66.65552521]
[128.73927307 78.03689575]
[118.96869659 89.41826630]
[121.20451355 95.29329681]
[121.66432190 101.56253815]
[120.30961609 107.70091248]
[117.25384521 113.19428253]
[112.75296783 117.58255768]
[107.18394470 120.49817657]
[101.01322174 121.69695282]
[94.75763702 121.07847595]
[88.94113159 118.69454193]
[77.31590271 128.17367554]
[65.69066620 137.65280151]
[54.06542969 147.13192749]
[42.44019318 156.61106873]
[36.63436890 171.32850647]
[21.88101006 173.37487793]
[10.25577545 182.85400391]
[4.44995117 197.57144165]
[-10.30340862 199.61781311]
[-21.92864418 209.09693909]
[-18.05085373 232.04753113]
[-28.22332764 252.85601807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[10 17]
[11 16]
[38 121]
[39 120]
[41 118]
[42 117]
[44 115]
[45 114]
[46 113]
[47 112]
[48 111]
[50 102]
[51 101]
[52 100]
[53 98]
[55 96]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[65 85]
[66 84]
[68 82]
[69 81]
[70 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
