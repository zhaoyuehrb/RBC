%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUGCCAUUGGUCCACGGGACGGCCCUUCCAGGAGCCAGUGGCUGGGAGCAGUGCUGGAGGAUCAAGGAAGCAGAG\
) } def
/len { sequence length } bind def

/coor [
[102.88088989 379.73815918]
[99.52200317 364.05065918]
[109.80377197 351.73544312]
[109.80377197 336.73544312]
[109.80377197 321.73544312]
[109.80377197 306.73544312]
[96.13671112 294.87069702]
[95.18630981 276.48489380]
[107.98316956 262.81896973]
[106.77616882 247.86761475]
[105.56917572 232.91624451]
[104.36217499 217.96488953]
[103.15517426 203.01353455]
[101.94817352 188.06216431]
[100.74118042 173.11080933]
[89.97947693 159.40100098]
[97.64175415 142.79981995]
[95.83370209 127.90917969]
[94.02565002 113.01854706]
[85.78049469 101.72656250]
[91.08371735 88.78950500]
[89.27566528 73.89887238]
[79.93135071 61.13194656]
[86.07813263 47.56484222]
[84.27008057 32.67420578]
[82.16254425 17.82300186]
[79.75637817 3.01724863]
[77.35020447 -11.78850555]
[65.37171173 -25.60246849]
[71.89421082 -41.76508331]
[68.89382935 -56.46194077]
[65.89344025 -71.15879822]
[51.71395874 -77.46132660]
[43.97621155 -90.91149139]
[45.65552139 -106.33742523]
[56.10616302 -117.80754852]
[71.30964661 -120.91136932]
[85.41992950 -114.45539093]
[93.01130676 -100.92208099]
[91.16475677 -85.51526642]
[80.59030151 -74.15918732]
[83.59069061 -59.46232605]
[86.59107208 -44.76546860]
[96.61988068 -37.69668579]
[99.11245728 -25.26997948]
[92.15596008 -14.19467449]
[94.56213379 0.61107939]
[96.96829987 15.41683292]
[101.26845551 21.68543816]
[99.16071320 30.86615753]
[100.96876526 45.75679016]
[110.18375397 57.45863724]
[104.16629791 72.09082031]
[105.97434998 86.98145294]
[114.21950531 98.27343750]
[108.91628265 111.21049500]
[110.72433472 126.10112762]
[112.53238678 140.99176025]
[122.29557037 149.69438171]
[123.35872650 162.32392883]
[115.69253540 171.90380859]
[116.89953613 186.85517883]
[118.10653687 201.80653381]
[119.31352997 216.75788879]
[120.52053070 231.70924377]
[121.72753143 246.66061401]
[122.93453217 261.61196899]
[133.58665466 267.59539795]
[139.84976196 277.94357300]
[140.20317078 289.91262817]
[134.67494202 300.39703369]
[124.80377197 306.73544312]
[124.80377197 321.73544312]
[124.80377197 336.73544312]
[124.80377197 351.73544312]
[135.08554077 364.05065918]
[131.72665405 379.73815918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 72]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[17 58]
[18 57]
[19 56]
[21 54]
[22 53]
[24 51]
[25 50]
[26 48]
[27 47]
[28 46]
[30 43]
[31 42]
[32 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
