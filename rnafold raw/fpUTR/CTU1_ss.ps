%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGGUGGGCAGUGUGGGCAUCCCAGCACUGAGUUCUGCCCGGGAGAAGCCGACCCCUCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[94.88427734 222.42903137]
[94.17054749 207.44602966]
[93.45681763 192.46301270]
[89.86391449 185.69398499]
[93.08286285 176.75354004]
[93.08286285 161.75354004]
[85.34556580 149.02626038]
[93.08286285 135.22608948]
[93.08286285 120.22608948]
[93.08286285 105.22608948]
[90.72913361 102.68929291]
[89.39939117 99.12487030]
[89.52175140 94.97628784]
[91.32574463 90.85580444]
[94.77977753 87.45524597]
[97.61854553 72.72631073]
[92.63276672 57.71123505]
[102.63889313 46.67825317]
[105.47766113 31.94932365]
[108.31642914 17.22039223]
[100.63435364 -1.14953196]
[113.11862183 -15.62555885]
[114.54446411 -30.55763817]
[115.97029877 -45.48971558]
[117.39614105 -60.42179489]
[109.29756927 -76.77188873]
[119.61084747 -90.77825165]
[120.32457733 -105.76126099]
[121.03830719 -120.74427795]
[108.84913635 -130.34655762]
[104.66437531 -145.28868103]
[110.09315491 -159.82511902]
[123.04798889 -168.36630249]
[138.54748535 -167.62797546]
[150.63177490 -157.89402771]
[154.65420532 -142.90737915]
[149.06805420 -128.43069458]
[136.02131653 -120.03054810]
[135.30758667 -105.04753876]
[134.59385681 -90.06452942]
[142.59288025 -80.69536591]
[141.89529419 -67.98953247]
[132.32821655 -58.99595642]
[130.90237427 -44.06387711]
[129.47654724 -29.13179779]
[128.05070496 -14.19971848]
[135.49980164 -6.58335304]
[137.37011719 4.13227320]
[132.75558472 14.22949600]
[123.04536438 20.05916214]
[120.20659637 34.78809357]
[117.36782837 49.51702118]
[122.55664825 63.47858810]
[112.34747314 75.56507874]
[109.50870514 90.29401398]
[108.08286285 105.22608948]
[108.08286285 120.22608948]
[108.08286285 135.22608948]
[115.82016754 149.02626038]
[108.08286285 161.75354004]
[108.08286285 176.75354004]
[108.43982697 191.74928284]
[109.15355682 206.73229980]
[109.86728668 221.71530151]
[112.97196198 240.84672546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[5 61]
[6 60]
[8 58]
[9 57]
[10 56]
[15 55]
[16 54]
[18 52]
[19 51]
[20 50]
[22 46]
[23 45]
[24 44]
[25 43]
[27 40]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
