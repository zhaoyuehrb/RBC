%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUAUGAGCCUGAUGUGGGCAGAAUCCAGAUGAGCUGGCCAGUGCUGUGAAGGAGCUGAGAGCACCCCCGAGAGCCGUGAG\
) } def
/len { sequence length } bind def

/coor [
[-11.19065189 168.88842773]
[-24.70518494 175.39668274]
[-38.21971893 181.90493774]
[-37.98113632 195.08677673]
[-42.81042480 207.30357361]
[-51.93169403 216.69149780]
[-63.91730499 221.83340454]
[-76.91123962 221.97262573]
[-88.91649628 217.12414551]
[-98.10199738 208.06671143]
[-112.06510925 213.54682922]
[-126.02821350 219.02694702]
[-139.99131775 224.50706482]
[-147.69888306 238.57734680]
[-163.52909851 241.18193054]
[-175.33837891 230.32281494]
[-174.06764221 214.33015442]
[-160.69171143 205.47218323]
[-145.47143555 210.54394531]
[-131.50833130 205.06384277]
[-117.54521942 199.58372498]
[-103.58211517 194.10360718]
[-101.74953461 177.19192505]
[-91.67099762 163.38018799]
[-75.96504974 156.40466309]
[-58.78663254 158.20606995]
[-44.72797394 168.39041138]
[-31.21343994 161.88215637]
[-17.69890785 155.37390137]
[-12.91246223 137.89447021]
[3.28801847 129.09602356]
[21.15134048 134.78755188]
[34.14171982 127.28755951]
[47.13210297 119.78755951]
[51.45528030 113.56417847]
[60.75142288 112.26042175]
[74.01315308 105.25139618]
[87.27488708 98.24236298]
[100.12275696 90.50077057]
[112.51633453 82.05097198]
[113.51962280 68.47231293]
[122.09753418 58.15221405]
[134.88468933 54.78338242]
[147.06713867 59.39861679]
[159.76800537 51.41813660]
[172.46887207 43.43765640]
[185.16972351 35.45717621]
[197.87059021 27.47669411]
[205.43904114 13.58319950]
[220.33201599 13.36324215]
[227.90046692 -0.53025138]
[242.79344177 -0.75020891]
[246.06544495 -16.21208382]
[259.35766602 -24.76148415]
[274.78408813 -21.32620049]
[283.19247437 -7.94432735]
[279.59429932 7.44490862]
[266.12426758 15.71134567]
[250.77392578 11.95065403]
[244.11393738 25.27333069]
[228.31250000 26.06410599]
[221.65251160 39.38677979]
[205.85107422 40.17755508]
[193.15020752 48.15803909]
[180.44934082 56.13851929]
[167.74848938 64.11900330]
[155.04762268 72.09947968]
[152.10113525 88.54334259]
[137.96179199 98.05373383]
[120.96613312 94.44454956]
[108.57255554 102.89434814]
[107.30006409 106.83069611]
[104.18235016 110.11650848]
[99.58892059 111.88933563]
[94.28391266 111.50409698]
[81.02218628 118.51312256]
[67.76045227 125.52215576]
[54.63210297 132.77793884]
[41.64171982 140.27793884]
[28.65134048 147.77793884]
[27.81865311 159.92990112]
[21.19074440 170.00415039]
[10.57685089 175.46769714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[10 22]
[11 21]
[12 20]
[13 19]
[32 80]
[33 79]
[34 78]
[36 77]
[37 76]
[38 75]
[39 71]
[40 70]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[50 61]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
