%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUAUUUCCGGUAGGAAUCAGUGGACUUGGCGGCAGAGGCAGUGCGGAUCCGGCGUUCUCCACUGAUCUUUUCCAAGGCUGUACAGAC\
) } def
/len { sequence length } bind def

/coor [
[116.89616394 198.04182434]
[128.05622864 187.48962402]
[124.50475311 172.91612244]
[120.95329285 158.34262085]
[117.40182495 143.76910400]
[113.85035706 129.19560242]
[106.87326813 126.44419861]
[95.13062286 135.77748108]
[92.91909027 120.94138336]
[85.94200134 118.18997955]
[73.39926910 126.41675568]
[60.85654068 134.64353943]
[53.96532822 149.52450562]
[37.61035156 150.72734070]
[28.61621094 137.01466370]
[36.23530197 122.49290466]
[52.62976074 122.10079956]
[65.17249298 113.87402344]
[77.71522522 105.64724731]
[84.38780975 92.21308899]
[83.36417389 77.24805450]
[82.34053802 62.28302383]
[81.31690216 47.31799316]
[80.29326630 32.35296249]
[79.26963043 17.38792992]
[78.24599457 2.42289901]
[77.22235870 -12.54213238]
[76.19872284 -27.50716400]
[62.84542084 -38.65032578]
[61.60160065 -55.66195679]
[72.74588013 -68.12927246]
[71.21192169 -83.05063629]
[62.10391998 -95.98720551]
[68.49911499 -109.43900299]
[66.96514893 -124.36035919]
[65.43119049 -139.28172302]
[52.28654480 -144.38864136]
[42.70405579 -154.64361572]
[38.53876114 -167.97683716]
[40.56021881 -181.73117065]
[48.31104660 -193.19181824]
[60.20878983 -200.12197876]
[59.18515396 -215.08700562]
[52.07201004 -230.47659302]
[64.89105225 -241.57202148]
[79.10153198 -232.32546997]
[74.15018463 -216.11064148]
[75.17382050 -201.14561462]
[89.78202820 -194.46931458]
[99.13309479 -181.29617310]
[100.63401794 -165.11779785]
[93.78786469 -150.28004456]
[80.35254669 -140.81568909]
[81.88651276 -125.89432526]
[83.42047119 -110.97296143]
[92.41875458 -99.10366821]
[86.13327789 -84.58459473]
[87.66723633 -69.66323853]
[98.79091644 -62.92202759]
[104.01825714 -50.79813004]
[101.20164490 -37.69884109]
[91.16375732 -28.53079987]
[92.18739319 -13.56576920]
[93.21102905 1.39926267]
[94.23466492 16.36429405]
[95.25830078 31.32932663]
[96.28193665 46.29435730]
[97.30557251 61.25938797]
[98.32920837 76.22441864]
[99.35284424 91.18945312]
[102.29729462 88.11367798]
[106.76034546 86.18733215]
[112.28924561 85.97116089]
[118.25067902 87.85502625]
[123.89206696 92.00482941]
[128.41732788 98.33042908]
[131.07017517 106.47810364]
[131.21739197 115.84923553]
[128.42385864 125.64413452]
[131.97532654 140.21765137]
[135.52679443 154.79115295]
[139.07826233 169.36465454]
[142.62973022 183.93815613]
[157.39328003 188.17294312]
[168.04994202 199.23327637]
[171.73313904 214.14399719]
[167.45210266 228.89419556]
[156.35841370 239.51614380]
[141.43621826 243.15258789]
[126.69950867 238.82533264]
[116.11238861 227.69841003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[10 19]
[11 18]
[12 17]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[31 58]
[32 57]
[34 55]
[35 54]
[36 53]
[42 48]
[43 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
