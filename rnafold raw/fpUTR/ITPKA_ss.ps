%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCCGAGCCGCUCCAGUCCCCGGCGCGCCGCGGGCUGGUGGGCUCAGCGGCGGCGCCGGCACUGGGAA\
) } def
/len { sequence length } bind def

/coor [
[44.64004898 218.75488281]
[37.04445267 231.68960571]
[29.44886017 244.62432861]
[32.07888031 260.45031738]
[21.23874474 272.27703857]
[5.24407578 271.03201294]
[-3.63538551 257.67031860]
[1.41192412 242.44190979]
[16.51414108 237.02873230]
[24.10973549 224.09400940]
[31.70532990 211.15928650]
[26.73343086 195.24682617]
[34.83164978 180.29443359]
[51.51709747 175.58253479]
[58.53311157 162.32449341]
[65.54912567 149.06645203]
[72.56513977 135.80841064]
[79.58115387 122.55038452]
[86.59716797 109.29234314]
[83.84416199 97.77008820]
[89.61549377 87.42440796]
[100.86602783 83.71401215]
[108.46161652 70.77928925]
[116.05721283 57.84457016]
[123.65280914 44.90985107]
[131.24839783 31.97513390]
[138.84399414 19.04041672]
[146.43959045 6.10569715]
[153.74717712 -6.99388647]
[160.76319885 -20.25192261]
[167.77920532 -33.50996017]
[174.79522705 -46.76799774]
[181.81123352 -60.02603531]
[188.53224182 -73.43603516]
[194.95494080 -86.99143982]
[201.37763977 -100.54683685]
[207.80033875 -114.10224152]
[214.22303772 -127.65764618]
[212.35560608 -143.95011902]
[225.69088745 -153.49487305]
[240.51068115 -146.47308350]
[241.56967163 -130.10816956]
[227.77844238 -121.23494720]
[221.35574341 -107.67954254]
[214.93304443 -94.12413788]
[208.51034546 -80.56874084]
[202.08764648 -67.01333618]
[202.07078552 -59.37817764]
[195.06927490 -53.01002121]
[188.05326843 -39.75198364]
[181.03724670 -26.49394608]
[174.02124023 -13.23590946]
[167.00521851 0.02212782]
[166.65065002 7.64906645]
[159.37431335 13.70129204]
[151.77871704 26.63601112]
[144.18312073 39.57072830]
[136.58752441 52.50544739]
[128.99192810 65.44016266]
[121.39633942 78.37488556]
[113.80074310 91.30960083]
[114.24274445 107.94530487]
[99.85520935 116.30835724]
[92.83919525 129.56639099]
[85.82318115 142.82443237]
[78.80716705 156.08247375]
[71.79115295 169.34049988]
[64.77513885 182.59854126]
[70.23601532 195.11953735]
[67.42617798 208.28652954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
