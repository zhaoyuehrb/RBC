%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCGCGGAGGCCGAGCGAGCCCCCAGCCCAGCCUGGCGACUGGGGACCCCGGCACAUGAGGUGGACGCCCCCGGGGAAGACUUGGGUGCACAGCCAGGCGAGAAGGUCUUGAGUCAGACAGAGCACCAGCCUUGGGGACCCUGGACCACUAUC\
) } def
/len { sequence length } bind def

/coor [
[71.93890381 120.74055481]
[67.95251465 113.80415344]
[53.22272110 116.63845825]
[38.49293137 119.47276306]
[23.76314163 122.30706024]
[9.03335190 125.14136505]
[-3.05623460 135.34687805]
[-17.01622772 130.15382385]
[-31.74601936 132.98812866]
[-38.40151978 146.88095093]
[-51.80471420 154.10643005]
[-66.71611786 152.07815552]
[-77.44547272 141.78160095]
[-92.17527008 144.61590576]
[-106.90505981 147.45021057]
[-121.63484955 150.28451538]
[-129.52278137 155.00346375]
[-136.68754578 153.02507019]
[-144.66833496 157.58523560]
[-151.79206848 155.46388245]
[-159.86250305 159.86344910]
[-166.94236755 157.59999084]
[-179.62245178 167.06181335]
[-193.24574280 161.04058838]
[-208.11904907 162.98608398]
[-222.99235535 164.93156433]
[-237.86564636 166.87705994]
[-252.73895264 168.82255554]
[-267.61224365 170.76805115]
[-282.46533203 172.86224365]
[-297.27355957 175.25321960]
[-312.05709839 177.79223633]
[-326.84066772 180.33123779]
[-341.42779541 188.97138977]
[-353.76840210 177.34616089]
[-346.01370239 162.26965332]
[-329.37966919 165.54769897]
[-314.59613037 163.00868225]
[-299.81256104 160.46966553]
[-293.71844482 156.21412659]
[-284.70803833 158.03085327]
[-278.52999878 153.89810181]
[-269.55773926 155.89474487]
[-254.68444824 153.94924927]
[-239.81114197 152.00376892]
[-224.93785095 150.05827332]
[-210.06454468 148.11277771]
[-195.19123840 146.16728210]
[-183.57499695 136.84461975]
[-168.88786316 142.72668457]
[-154.03477478 140.63249207]
[-139.22656250 138.24151611]
[-124.46914673 135.55471802]
[-109.73935699 132.72041321]
[-95.00956726 129.88610840]
[-80.27977753 127.05181122]
[-74.13761902 113.50885010]
[-61.04368210 106.09178162]
[-45.91619110 107.82740784]
[-34.58032227 118.25833130]
[-19.85053062 115.42402649]
[-8.81451797 105.42124176]
[6.19904852 110.41157532]
[20.92883873 107.57727051]
[35.65863037 104.74296570]
[50.38842010 101.90866852]
[65.11820984 99.07436371]
[76.72058105 74.00645447]
[102.91116333 65.22757721]
[107.34614563 50.89820862]
[111.78112793 36.56883621]
[116.21611023 22.23946190]
[119.19763947 7.53876591]
[120.69589996 -7.38622093]
[122.19416046 -22.31120682]
[123.69242096 -37.23619461]
[125.19067383 -52.16117859]
[126.68893433 -67.08616638]
[117.68867493 -80.36679077]
[122.59768677 -95.64033508]
[137.65019226 -101.19024658]
[151.29920959 -92.75910187]
[153.07437134 -76.81455994]
[141.61392212 -65.58790588]
[140.11566162 -50.66292191]
[138.61740112 -35.73793411]
[137.11914062 -20.81294823]
[135.62089539 -5.88796234]
[134.12263489 9.03702450]
[144.54139709 -1.75413632]
[158.92280579 -6.01738453]
[173.53942871 -2.64776087]
[184.60289001 7.48138666]
[189.24575806 21.74476051]
[186.26466370 36.44554520]
[176.43225098 47.77355576]
[162.29692078 52.79276657]
[147.52230835 50.20228958]
[135.93771362 40.67353058]
[130.54548645 26.67444611]
[126.11050415 41.00381851]
[121.67551422 55.33319092]
[117.24053192 69.66256714]
[124.39855194 75.05392456]
[129.94740295 82.09054565]
[133.52114868 90.30834198]
[134.88407898 99.16533661]
[133.94630432 108.07737732]
[147.45152283 114.60494232]
[160.95674133 121.13251495]
[174.46195984 127.66007996]
[187.96717834 134.18763733]
[203.75918579 133.22682190]
[211.85110474 145.73161316]
[227.64311218 144.77079773]
[235.73503113 157.27558899]
[249.24024963 163.80316162]
[262.74545288 170.33071899]
[274.90341187 164.45687866]
[288.03002930 166.64382935]
[297.34973145 175.86795044]
[299.60369873 188.58747864]
[312.97558594 195.38395691]
[326.34750366 202.18043518]
[342.15557861 201.53578186]
[349.99566650 214.19999695]
[363.36755371 220.99647522]
[379.70559692 219.58198547]
[388.87652588 233.17706299]
[381.44610596 247.79624939]
[365.05807495 248.40058899]
[356.57107544 234.36837769]
[343.19918823 227.57189941]
[328.34756470 228.70268250]
[319.55102539 215.55233765]
[306.17910767 208.75585938]
[292.80722046 201.95938110]
[277.08456421 207.85757446]
[261.64526367 200.43795776]
[256.21789551 183.83593750]
[242.71267700 177.30838013]
[229.20745850 170.78080750]
[214.38143921 172.20852661]
[205.32353210 159.23683167]
[190.49751282 160.66455078]
[181.43960571 147.69285583]
[167.93440247 141.16529846]
[154.42918396 134.63772583]
[140.92396545 128.11016846]
[127.41874695 121.58259583]
[121.78237915 127.26029968]
[115.00098419 131.50502014]
[107.43103027 134.09362793]
[99.47045898 134.89004517]
[91.53772736 133.85241699]
[84.04981995 131.03526306]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[8 61]
[9 60]
[13 56]
[14 55]
[15 54]
[16 53]
[18 52]
[20 51]
[22 50]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 41]
[31 39]
[32 38]
[33 37]
[69 103]
[70 102]
[71 101]
[72 100]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[108 150]
[109 149]
[110 148]
[111 147]
[112 146]
[114 144]
[116 142]
[117 141]
[118 140]
[122 137]
[123 136]
[124 135]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
