%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGGAGCCAGACAGCGGGGUGGACAAGUGGCGUGUGUGCUGCGACCCCGAGGGAAGAUGAACGGGACGCGGAACUGGUGUACCCUGGUGGACGUGCACCCAGAGGACCAGGCGGCGGAGCAGAAAUUCUGGAUUGAGG\
) } def
/len { sequence length } bind def

/coor [
[49.70675659 147.52973938]
[58.07408524 135.08033752]
[44.76249695 141.99421692]
[31.45091057 148.90808105]
[18.13932228 155.82196045]
[9.45882511 169.04917908]
[-5.40216875 168.04911804]
[-18.71375465 174.96299744]
[-32.02534103 181.87686157]
[-45.25908279 188.93859863]
[-58.41333008 196.14733887]
[-66.79698181 209.56466675]
[-81.67656708 208.89593506]
[-94.83081818 216.10466003]
[-100.91353607 223.02975464]
[-108.35941315 223.32374573]
[-121.67099762 230.23760986]
[-130.35150146 243.46484375]
[-145.21249390 242.46476746]
[-145.81651306 257.81179810]
[-154.02668762 270.79211426]
[-167.63450623 277.91409302]
[-182.97955322 277.26196289]
[-195.93406677 269.01113892]
[-203.01336670 255.38105774]
[-202.31314087 240.03814697]
[-194.02175903 227.10954285]
[-180.36955261 220.07301331]
[-165.02890015 220.82131958]
[-152.12635803 229.15318298]
[-144.39799500 216.42048645]
[-128.58486938 216.92602539]
[-115.27328491 210.01214600]
[-102.03954315 202.95040894]
[-88.88529968 195.74168396]
[-81.44252014 182.83996582]
[-65.62205505 182.99308777]
[-52.46780777 175.78436279]
[-48.07827759 169.76277161]
[-38.93921661 168.56527710]
[-25.62763023 161.65141296]
[-12.31604290 154.73753357]
[-4.58767843 142.00483704]
[11.22544861 142.51037598]
[24.53703499 135.59649658]
[37.84862137 128.68261719]
[51.16020966 121.76874542]
[54.96173096 107.25846100]
[46.75014496 94.70578003]
[38.53856277 82.15309143]
[30.32697868 69.60041046]
[15.20043755 71.63769531]
[0.69061232 66.90190125]
[-10.32156086 56.33332443]
[-15.64960766 42.03036499]
[-14.23564053 26.83288193]
[-6.36040306 13.75835037]
[6.41247034 5.40272522]
[21.54691696 3.42502356]
[36.03797913 8.21791840]
[47.00844955 18.82977867]
[52.28012848 33.15361023]
[50.80632401 48.34540558]
[42.87966156 61.38882446]
[51.09124756 73.94150543]
[59.30282974 86.49419403]
[67.51441193 99.04687500]
[88.51271057 73.47344208]
[116.77041626 81.03749847]
[129.59048462 73.24994659]
[142.41055298 65.46240234]
[150.18818665 51.68491745]
[165.08277893 51.69014359]
[168.92124939 39.32113266]
[179.82621765 33.11154556]
[191.64028931 35.93639374]
[204.63067627 28.43639565]
[217.62104797 20.93639565]
[230.61143494 13.43639565]
[243.60182190 5.93639517]
[246.28393555 1.26980770]
[250.12713623 -1.56522226]
[254.21618652 -2.43482041]
[257.71997070 -1.59727883]
[271.18228149 -8.21286869]
[284.57006836 -14.97802067]
[297.88165283 -21.89189529]
[311.19323730 -28.80576897]
[324.50482178 -35.71964264]
[337.73855591 -42.78137970]
[350.89282227 -49.99010849]
[355.08120728 -65.22929382]
[368.85971069 -72.97065735]
[384.05377197 -68.62137604]
[391.64901733 -54.76180649]
[387.13934326 -39.61458206]
[373.20022583 -32.16628647]
[358.10153198 -36.83585739]
[344.94729614 -29.62713242]
[340.55776978 -23.60554695]
[331.41870117 -22.40805626]
[318.10711670 -15.49418163]
[304.79553223 -8.58030796]
[291.48394775 -1.66643357]
[286.96133423 4.25586224]
[277.79788208 5.24944830]
[264.33554077 11.86503792]
[251.10182190 18.92677689]
[238.11143494 26.42677689]
[225.12104797 33.92677689]
[212.13067627 41.42677689]
[199.14028931 48.92677689]
[191.24699402 64.56179047]
[172.87033081 64.51020813]
[166.00967407 77.73067474]
[150.19810486 78.28246307]
[137.37803650 86.07001495]
[124.55796814 93.85756683]
[126.12867737 107.23085785]
[120.44730377 120.43340302]
[108.20915985 129.58551025]
[92.13557434 131.53367615]
[100.89819336 143.70809937]
[109.66080475 155.88252258]
[118.42342377 168.05694580]
[132.58361816 177.38031006]
[127.54454041 193.56808472]
[110.59442902 193.20716858]
[106.24900055 176.81956482]
[97.48638153 164.64514160]
[88.72377014 152.47071838]
[79.96115112 140.29629517]
[81.81433868 155.18136597]
[87.83802795 168.91873169]
[85.72624207 183.76933289]
[76.11180878 195.28292847]
[61.87587357 200.00924683]
[47.28448868 196.53196716]
[36.71022034 185.89314270]
[33.32184219 171.28085327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[5 44]
[7 42]
[8 41]
[9 40]
[10 38]
[11 37]
[13 35]
[14 34]
[16 33]
[17 32]
[19 30]
[48 67]
[49 66]
[50 65]
[51 64]
[69 118]
[70 117]
[71 116]
[73 114]
[76 112]
[77 111]
[78 110]
[79 109]
[80 108]
[84 107]
[85 106]
[86 104]
[87 103]
[88 102]
[89 101]
[90 99]
[91 98]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
