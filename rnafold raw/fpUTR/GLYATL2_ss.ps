%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGUAGAGUAUUAGCUACAGAAACCUUUCCAUUGCCAUACUGAGAAACUGCAGCAGGCAGUGUGCCUACAGGUCUACAAAGAAACUUCAGAUCAUCUUCUUGAGGGAAAGAAGCUGAAGUGCUACAUAAG\
) } def
/len { sequence length } bind def

/coor [
[86.20044708 137.04971313]
[78.39342499 149.85792542]
[77.81761932 165.66865540]
[64.58674622 172.50921631]
[56.77972794 185.31744385]
[48.97270966 198.12565613]
[41.16569519 210.93388367]
[47.26198959 225.20324707]
[43.77386475 240.32318115]
[32.04256821 250.47976685]
[16.57902336 251.76759338]
[3.32928371 243.69145203]
[-2.61185908 229.35679626]
[1.04008627 214.27558899]
[12.88087177 204.24685669]
[28.35747528 203.12686157]
[36.16449356 190.31864929]
[43.97150803 177.51042175]
[51.77852631 164.70220947]
[51.79592514 149.80760193]
[65.58520508 142.05091858]
[73.39222717 129.24269104]
[60.80206299 105.16050720]
[66.73029327 78.64031982]
[55.87428665 68.28913879]
[45.01827240 57.93795395]
[34.16226196 47.58676910]
[14.22996712 49.22763443]
[-0.36664397 35.99993134]
[-0.68032402 16.60507011]
[-12.35994720 7.19303560]
[-24.15074348 -2.07934928]
[-35.94153976 -11.35173416]
[-47.73233795 -20.62411880]
[-59.52313232 -29.89650345]
[-71.31392670 -39.16888809]
[-83.10472870 -48.44127274]
[-96.26475525 -45.31085587]
[-108.63279724 -50.28828812]
[-115.74431610 -61.33378601]
[-115.17336273 -74.26284790]
[-126.74015808 -83.81320190]
[-138.30696106 -93.36354828]
[-153.29867554 -89.36004639]
[-167.76829529 -94.96446228]
[-176.15197754 -108.02178955]
[-175.22599792 -123.51120758]
[-165.34642029 -135.47673035]
[-150.31216431 -139.31736755]
[-135.90417480 -133.55632019]
[-127.66265106 -120.40881348]
[-128.75660706 -104.93035126]
[-117.18980408 -95.37999725]
[-105.62300873 -85.82964325]
[-89.01257324 -88.16478729]
[-75.55890656 -77.59314728]
[-73.83234406 -60.23207092]
[-62.04154587 -50.95968628]
[-50.25074768 -41.68730164]
[-38.45995331 -32.41491699]
[-26.66915512 -23.14253044]
[-14.87835884 -13.87014580]
[-3.08756232 -4.59776115]
[4.18558979 -2.91953659]
[8.87002850 5.03827477]
[18.60856438 1.29831207]
[29.09873962 1.99506533]
[38.39985657 7.06798840]
[44.76255417 15.64065552]
[46.95772934 26.17148209]
[44.51345062 36.73075867]
[55.36946106 47.08194351]
[66.22547150 57.43312836]
[77.08148193 67.78430939]
[87.97405243 62.33721161]
[100.00773621 60.46382523]
[112.04068756 62.34192276]
[122.93112946 67.79328918]
[131.64570618 76.30065918]
[137.35749817 87.05679321]
[139.52453613 99.04107666]
[154.31686401 101.52852631]
[165.31773376 94.67378998]
[177.63790894 97.11443329]
[184.72494507 106.99260712]
[199.45387268 109.83137512]
[214.18280029 112.67014313]
[228.91172791 115.50891113]
[243.64067078 118.34768677]
[258.36959839 121.18645477]
[273.09851074 124.02522278]
[267.49746704 110.11018372]
[274.67129517 96.93686676]
[289.39910889 94.09235382]
[300.96252441 103.64679718]
[300.94607544 118.64678192]
[289.36111450 128.17599487]
[303.64886475 132.74330139]
[317.93661499 137.31059265]
[332.22436523 141.87788391]
[346.51211548 146.44519043]
[360.79986572 151.01248169]
[374.73065186 143.54867554]
[389.83453369 148.20144653]
[397.15063477 162.21037292]
[392.33847046 177.26422119]
[378.25296021 184.43180847]
[363.25082397 179.46072388]
[356.23257446 165.30023193]
[341.94482422 160.73294067]
[327.65707397 156.16563416]
[313.36932373 151.59834290]
[299.08157349 147.03105164]
[284.79382324 142.46374512]
[270.25976562 138.75415039]
[255.53082275 135.91539001]
[240.80189514 133.07661438]
[226.07296753 130.23783875]
[211.34403992 127.39907837]
[196.61509705 124.56031036]
[181.88616943 121.72154236]
[165.69161987 128.37318420]
[151.82940674 116.32084656]
[137.03709412 113.83339691]
[134.07431030 120.05120087]
[130.07739258 125.66046143]
[125.16764832 130.49095154]
[119.49408722 134.39607239]
[113.22889709 137.25727844]
[106.56221771 138.98777771]
[99.69638062 139.53500366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[4 19]
[5 18]
[6 17]
[7 16]
[24 74]
[25 73]
[26 72]
[27 71]
[30 65]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[41 54]
[42 53]
[43 52]
[81 124]
[82 123]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
