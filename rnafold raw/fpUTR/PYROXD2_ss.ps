%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUGCUCCACCCCGUGCCUAGGGCAGCACAAAAGCCAAUCGCUAGCAAACUCCCUGCCUAGCAAGGCCCAGCCUGGGGCAGAA\
) } def
/len { sequence length } bind def

/coor [
[77.78440857 407.07278442]
[63.52470398 400.65444946]
[56.77335739 386.54937744]
[60.71813965 371.41754150]
[73.49644470 362.40371704]
[74.57881165 347.44284058]
[75.66117859 332.48193359]
[76.74354553 317.52102661]
[77.82591248 302.56011963]
[78.90827942 287.59924316]
[79.99064636 272.63833618]
[81.07301331 257.67742920]
[71.16448212 246.61593628]
[72.04903412 231.42803955]
[83.71852875 221.11006165]
[76.91976929 207.85766602]
[85.63269043 194.65177917]
[78.83393097 181.39936829]
[87.54685211 168.19348145]
[88.62921906 153.23258972]
[89.71157837 138.27168274]
[90.79394531 123.31078339]
[80.06301880 115.18752289]
[75.08139038 102.68457794]
[77.28562927 89.40747070]
[66.21123505 79.29026794]
[55.13684464 69.17306519]
[40.25206757 73.22856140]
[25.54451561 68.57115936]
[15.70731068 56.68701172]
[13.87946892 41.36831284]
[20.64424896 27.50320244]
[33.84303284 19.51598549]
[49.26414108 19.95535660]
[61.98674774 28.68111229]
[67.95111847 42.90889359]
[65.25404358 58.09867096]
[76.32843781 68.21587372]
[87.40283203 78.33307648]
[92.03997040 76.23485565]
[97.00539398 75.11674500]
[102.09431458 75.02484894]
[107.09686279 75.96297455]
[111.80672455 77.89241028]
[122.50864410 67.38199615]
[133.21057129 56.87157440]
[143.91249084 46.36115646]
[154.61441040 35.85073853]
[165.12481689 25.14881706]
[175.44032288 14.25888443]
[173.47644043 -1.25488949]
[181.98748779 -14.37342358]
[196.95481873 -18.90254593]
[211.31132507 -12.70374489]
[218.27827454 1.29609632]
[214.56610107 16.48668098]
[201.92759705 25.69547844]
[186.33024597 24.57437706]
[176.01475525 35.46430969]
[173.64672852 42.65103912]
[165.12481689 46.55265808]
[154.42289734 57.06307602]
[143.72097778 67.57349396]
[133.01905823 78.08391571]
[122.31714630 88.59432983]
[122.74638367 110.52359772]
[105.75484467 124.39315033]
[104.67247772 139.35404968]
[103.59011078 154.31495667]
[102.50774384 169.27584839]
[109.22908783 183.59835815]
[100.59358978 195.73414612]
[107.31492615 210.05664062]
[98.67942810 222.19242859]
[108.74224091 234.08265686]
[107.43144226 249.23973083]
[96.03391266 258.75979614]
[94.95154572 273.72070312]
[93.86917877 288.68161011]
[92.78681183 303.64248657]
[91.70444489 318.60339355]
[90.62207794 333.56430054]
[89.53971100 348.52520752]
[88.45734406 363.48608398]
[99.80514526 374.24533081]
[101.53078461 389.78741455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[15 74]
[17 72]
[19 70]
[20 69]
[21 68]
[22 67]
[25 39]
[26 38]
[27 37]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
