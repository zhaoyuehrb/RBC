%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACUUCAGAGCUGGGCCUGCGCCUGCGGGGCCGUACGAGUUGGCCCGGAGCAAGGCGGCCCAGGACAGGCAGGGGCUGCACGCGGUGAAGAAACCAAGACGCAGAGAGGCCAAGCCCCUUGCCUUGGGUCACACAGCCAAAGGAGGCAGAGCCAGAACUCACAACCAGAUCCAGAGGCAACAGGGAC\
) } def
/len { sequence length } bind def

/coor [
[306.71606445 302.84280396]
[296.42050171 313.75161743]
[282.91427612 320.27703857]
[267.96948242 321.56289673]
[253.54708862 317.44046021]
[241.53945923 308.45062256]
[233.52214050 295.77297974]
[230.54710388 281.07095337]
[233.00468445 266.27365112]
[240.57243347 253.32263184]
[252.25737000 243.91720581]
[266.52630615 239.29145813]
[281.50817871 240.05265808]
[268.99346924 231.78332520]
[256.47875977 223.51397705]
[241.59471130 222.95291138]
[234.34652710 208.88969421]
[221.83180237 200.62034607]
[209.31709290 192.35101318]
[196.80238342 184.08168030]
[184.28767395 175.81234741]
[176.96134949 174.74606323]
[171.63667297 167.30265808]
[159.68191528 169.21804810]
[149.29768372 162.24494934]
[146.36326599 149.67356873]
[134.12730408 140.99710083]
[121.89134216 132.32061768]
[109.65538025 123.64414215]
[97.41941833 114.96766663]
[82.66426086 112.26850891]
[68.14910889 116.05140686]
[53.63395691 119.83430481]
[39.11880112 123.61720276]
[24.60364914 127.40010071]
[10.08849525 131.18299866]
[3.54669380 145.38647461]
[-10.61642933 152.01519775]
[-25.71348000 147.93928528]
[-34.61609268 135.08325195]
[-33.12072754 119.51733398]
[-21.93344688 108.59127808]
[-6.33654547 107.46402740]
[6.30559778 116.66784668]
[20.82075119 112.88494873]
[35.33590698 109.10205078]
[49.85105896 105.31915283]
[64.36621094 101.53625488]
[78.88136292 97.75335693]
[80.59320068 90.45132446]
[69.65732574 80.18454742]
[84.01686096 75.84726715]
[85.72869110 68.54523468]
[74.40715027 58.70538712]
[61.15824890 61.18654251]
[49.07799149 55.65970612]
[42.48896027 44.34917068]
[43.60601807 31.50251579]
[32.44784546 21.47778511]
[21.28967476 11.45305634]
[10.13150311 1.42832649]
[-1.02666807 -8.59640312]
[-12.18483925 -18.62113380]
[-23.34301186 -28.64586258]
[-38.90569687 -27.98208046]
[-50.07886124 -38.30753326]
[-50.61576843 -53.14826584]
[-66.64826202 -53.73033905]
[-76.07305145 -66.71312714]
[-71.66024780 -82.13735199]
[-56.79497910 -88.17086792]
[-42.88060379 -80.18527222]
[-40.59104156 -64.30643463]
[-25.77775192 -65.35623932]
[-14.31897259 -55.34869003]
[-13.31828117 -39.80403519]
[-2.16011000 -29.77930450]
[8.99806118 -19.75457573]
[20.15623283 -9.72984505]
[31.31440544 0.29488456]
[42.47257614 10.31961441]
[53.63074875 20.34434319]
[70.36267853 18.72467613]
[83.35008240 29.92159462]
[84.24699402 47.38384628]
[95.56854248 57.22369385]
[108.89421082 50.33700943]
[107.41628265 35.40999603]
[105.93835449 20.48298454]
[93.55895996 10.65821362]
[91.83559418 -5.05183268]
[101.79069519 -17.32666206]
[117.51808167 -18.88383865]
[129.68698120 -8.79951382]
[131.07778931 6.94345903]
[120.86536407 19.00505447]
[122.34329987 33.93206787]
[123.82122803 48.85908127]
[131.57818604 65.90865326]
[131.83125305 82.09388733]
[126.03870392 94.68972778]
[116.52672577 101.82624817]
[106.09589386 102.73170471]
[118.33185577 111.40818024]
[130.56781006 120.08465576]
[142.80377197 128.76113892]
[155.03973389 137.43760681]
[173.40147400 138.71766663]
[180.11071777 154.92564392]
[192.55700684 163.29762268]
[205.07171631 171.56697083]
[217.58642578 179.83630371]
[230.10115051 188.10563660]
[242.61585999 196.37496948]
[258.39501953 197.52752686]
[264.74807739 210.99926758]
[277.26278687 219.26860046]
[289.77752686 227.53794861]
[303.21466064 234.20452881]
[317.36999512 239.16702271]
[331.52532959 244.12953186]
[345.68066406 249.09202576]
[359.91571045 253.82104492]
[374.22659302 258.31527710]
[388.53750610 262.80953979]
[402.84838867 267.30377197]
[417.15930176 271.79800415]
[431.50665283 276.17440796]
[445.88955688 280.43267822]
[460.27243042 284.69091797]
[474.65530396 288.94918823]
[489.03817749 293.20745850]
[503.42108154 297.46569824]
[514.86682129 283.30343628]
[531.08496094 275.12548828]
[549.18566895 274.34674072]
[565.96105957 281.06738281]
[578.45373535 294.06195068]
[584.47796631 311.00247192]
[599.46527100 311.61911011]
[614.45257568 312.23571777]
[625.90661621 301.34625244]
[641.70355225 301.82894897]
[652.47131348 313.39746094]
[651.82159424 329.18838501]
[640.13989258 339.83325195]
[624.35675049 339.01666260]
[613.83599854 327.22305298]
[598.84863281 326.60641479]
[583.86132812 325.98977661]
[583.49041748 327.52966309]
[583.06256104 329.05471802]
[596.44439697 335.83157349]
[609.82629395 342.60842896]
[624.76501465 337.45001221]
[638.93908691 344.44076538]
[643.93933105 359.43322754]
[636.79907227 373.53262329]
[621.75457764 378.37402344]
[607.73150635 371.08511353]
[603.04943848 355.99029541]
[589.66754150 349.21343994]
[576.28570557 342.43655396]
[566.30804443 352.07330322]
[553.74414062 358.01522827]
[539.91223145 359.62005615]
[526.26965332 356.70156860]
[514.25927734 349.55099487]
[505.15695190 338.90817261]
[499.93591309 325.88479614]
[499.16281128 311.84860229]
[484.77993774 307.59033203]
[470.39703369 303.33206177]
[456.01416016 299.07382202]
[441.63128662 294.81555176]
[427.24841309 290.55728149]
[419.92974854 291.67492676]
[412.66503906 286.10891724]
[398.35415649 281.61465454]
[384.04324341 277.12042236]
[369.73236084 272.62619019]
[355.42144775 268.13192749]
[350.83471680 269.51724243]
[345.32919312 268.02380371]
[340.71817017 263.24737549]
[326.56283569 258.28485107]
[312.40750122 253.32235718]
[298.25213623 248.35986328]
[307.92092896 259.82785034]
[312.86999512 273.98788452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 118]
[14 117]
[15 116]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[23 109]
[26 107]
[27 106]
[28 105]
[29 104]
[30 103]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[53 86]
[54 85]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[67 73]
[87 98]
[88 97]
[89 96]
[119 188]
[120 187]
[121 186]
[122 185]
[123 182]
[124 181]
[125 180]
[126 179]
[127 178]
[128 176]
[129 175]
[130 174]
[131 173]
[132 172]
[133 171]
[139 150]
[140 149]
[141 148]
[152 163]
[153 162]
[154 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
