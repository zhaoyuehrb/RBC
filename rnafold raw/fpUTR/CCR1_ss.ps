%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAAACCCAGAAAGCCCCAGAAACAAAGACUUCACGGACAAAGUCCCUUGGAACCAGAGAGAAGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[77.59765625 254.26622009]
[68.64174652 266.93789673]
[53.93725586 271.89346313]
[39.13835526 267.22738647]
[29.93553162 254.73387146]
[29.86745453 239.21694946]
[38.96030045 226.64317322]
[53.71768570 221.84742737]
[58.22827148 207.54167175]
[62.73885727 193.23591614]
[59.18682861 178.77105713]
[70.71581268 167.93624878]
[57.39199448 160.47689819]
[45.88343430 150.44099426]
[36.68044662 138.25611877]
[30.17510986 124.44139862]
[26.64457893 109.58537292]
[26.23926735 94.32096863]
[28.97644234 79.29852295]
[34.73949051 65.15803528]
[43.28288269 52.50194168]
[54.24263763 41.86944962]
[67.15183258 33.71353912]
[81.46047974 28.38168335]
[96.55898285 26.10103989]
[111.80408478 26.96877098]
[115.68637085 12.47988319]
[119.56865692 -2.00900459]
[114.30507660 -19.50086784]
[126.84597778 -31.58126068]
[130.09257507 -46.22570038]
[133.33915710 -60.87014008]
[136.58575439 -75.51457977]
[139.83235168 -90.15901947]
[129.44995117 -101.69095612]
[127.86220551 -117.12658691]
[135.67962646 -130.53059387]
[149.89625549 -136.74887085]
[165.04551697 -133.39036560]
[175.30220032 -121.74648285]
[176.72241211 -106.29454041]
[168.76004028 -92.97612000]
[154.47679138 -86.91242981]
[151.23019409 -72.26799011]
[147.98359680 -57.62354660]
[144.73701477 -42.97910690]
[141.49041748 -28.33466721]
[147.77598572 -17.77078629]
[144.96357727 -5.38867140]
[134.05754089 1.87328124]
[130.17526245 16.36216927]
[126.29297638 30.85105515]
[139.43203735 37.40598297]
[151.01770020 46.42677307]
[160.59355164 57.55805206]
[167.78233337 70.36131287]
[172.30087280 84.33217621]
[173.97114563 98.92026520]
[172.72737122 113.55088806]
[168.61853027 127.64768219]
[161.80648804 140.65530396]
[152.55961609 152.06134033]
[141.24218750 161.41644287]
[128.30003357 168.35206604]
[114.24301910 172.59500122]
[99.62490845 173.97807312]
[85.02156830 172.44683838]
[88.25096893 187.93493652]
[77.04461670 197.74650574]
[72.53402710 212.05226135]
[68.02343750 226.35801697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 71]
[9 70]
[10 69]
[12 67]
[26 52]
[27 51]
[28 50]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
