%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUUCUCCUUGGCAUGGUCACGGAAUGGAUACCUGUUUGAUCUUCCUGCACUGCUGAGAAAUCUUCCUUUUGGGGGAGAGGAUUAAGUCUGGGUUGAGGUAGGCCACCUGUUGAGACCUGGUGAAAGAUCAGGUAUAAUA\
) } def
/len { sequence length } bind def

/coor [
[-6.81912279 290.06442261]
[-12.59437752 297.45834351]
[-19.87722206 303.35424805]
[-28.29012489 307.45333862]
[-37.39850998 309.54986572]
[-46.73321152 309.54125977]
[-55.81464005 307.43334961]
[-64.17741394 303.33956909]
[-74.36849976 314.34600830]
[-84.55957794 325.35244751]
[-88.25814819 340.73529053]
[-102.58247375 344.81732178]
[-112.77355194 355.82376099]
[-122.96463776 366.83020020]
[-133.15571594 377.83663940]
[-139.48033142 393.56674194]
[-156.34651184 391.84381104]
[-159.35993958 375.15982056]
[-144.16217041 367.64556885]
[-133.97108459 356.63912964]
[-123.77999878 345.63269043]
[-113.58892059 334.62622070]
[-110.61928558 320.03067017]
[-95.56602478 315.16137695]
[-85.37494659 304.15493774]
[-75.18386078 293.14849854]
[-83.15174866 273.55227661]
[-80.31375885 252.51878357]
[-67.35211945 235.62411499]
[-47.64214706 227.38197327]
[-26.37352753 230.03785706]
[-18.26391411 217.41905212]
[-10.15430164 204.80024719]
[-2.04468989 192.18144226]
[6.06492233 179.56263733]
[14.17453480 166.94383240]
[13.65419960 164.11422729]
[14.26779366 160.90113831]
[16.16992950 157.75231934]
[19.34413910 155.16386414]
[23.59101295 153.61723328]
[32.77680588 141.75886536]
[41.96259689 129.90048218]
[51.14838791 118.04209137]
[60.33418274 106.18371582]
[69.51997375 94.32533264]
[75.75119781 80.68084717]
[78.69775391 65.97310638]
[81.64430237 51.26535797]
[84.59085846 36.55760956]
[87.53740692 21.84986115]
[75.91880035 9.60836697]
[73.87770081 -6.97820616]
[82.01879883 -21.38279152]
[96.97869110 -28.05476379]
[99.60144806 -42.82369232]
[102.22419739 -57.59261703]
[97.01905060 -72.53306580]
[106.86251831 -83.71141052]
[109.48526764 -98.48033142]
[112.10801697 -113.24925995]
[99.80604553 -122.21713257]
[92.64684296 -135.58248901]
[92.00318146 -150.66909790]
[97.94921112 -164.48234558]
[109.25637817 -174.30361938]
[123.64684296 -178.22535706]
[126.26959229 -192.99427795]
[128.89234924 -207.76321411]
[131.51509094 -222.53213501]
[134.13784790 -237.30105591]
[136.76058960 -252.06999207]
[139.38334656 -266.83892822]
[133.28768921 -282.06307983]
[143.63568115 -294.78515625]
[159.78219604 -291.91775513]
[165.11709595 -276.41061401]
[154.15226746 -264.21615601]
[151.52952576 -249.44723511]
[148.90676880 -234.67831421]
[146.28402710 -219.90937805]
[143.66127014 -205.14045715]
[141.03852844 -190.37153625]
[138.41577148 -175.60260010]
[150.57601929 -166.96583557]
[157.81022644 -153.85188293]
[158.63661194 -138.83595276]
[152.83778381 -124.89344025]
[141.51446533 -114.81031036]
[126.87694550 -110.62651062]
[124.25419617 -95.85758209]
[121.63144684 -81.08866119]
[127.02419281 -67.20458221]
[116.99311829 -54.96986771]
[114.37036896 -40.20093918]
[111.74761963 -25.43201447]
[121.88887024 -16.68337059]
[126.40061188 -3.95757127]
[123.99652863 9.43884277]
[115.20227814 19.96831894]
[102.24515533 24.79641533]
[99.29860687 39.50416183]
[96.35205078 54.21191025]
[93.40549469 68.91965485]
[90.45894623 83.62740326]
[107.65679169 84.58148956]
[115.36649323 98.12658691]
[129.27149963 103.75247192]
[143.17651367 109.37836456]
[157.08152771 115.00424957]
[168.71672058 105.06036377]
[183.64289856 101.67394257]
[198.43013000 105.62316132]
[209.68041992 116.00051117]
[214.80854797 130.42137146]
[212.63607788 145.57191467]
[203.66226196 157.97065735]
[189.94918823 164.76847839]
[174.64804077 164.40327454]
[161.27490234 156.95896912]
[152.90281677 144.14619446]
[151.45564270 128.90927124]
[137.55062866 123.28337860]
[123.64561462 117.65748596]
[109.74060822 112.03160095]
[94.06568146 116.15985107]
[81.37835693 103.51112366]
[72.19256592 115.36950684]
[63.00677109 127.22789001]
[53.82098007 139.08627319]
[44.63518524 150.94465637]
[35.44939423 162.80303955]
[26.79333687 175.05345154]
[18.68372536 187.67225647]
[10.57411289 200.29106140]
[2.46450090 212.90985107]
[-5.64511156 225.52865601]
[-13.75472355 238.14746094]
[-7.66605043 245.37867737]
[-3.36769724 253.78480530]
[-1.07575369 262.93148804]
[-0.90279865 272.34753418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 26]
[9 25]
[10 24]
[12 22]
[13 21]
[14 20]
[15 19]
[31 138]
[32 137]
[33 136]
[34 135]
[35 134]
[36 133]
[41 132]
[42 131]
[43 130]
[44 129]
[45 128]
[46 127]
[47 105]
[48 104]
[49 103]
[50 102]
[51 101]
[55 96]
[56 95]
[57 94]
[59 92]
[60 91]
[61 90]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[107 125]
[108 124]
[109 123]
[110 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
