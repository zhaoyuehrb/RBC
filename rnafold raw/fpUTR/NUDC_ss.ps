%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGUGUUUCCGGCUCCGCUGCGGAAGGCGGACGACUAGAGUCGUUGGGCCCGGCGCGACCCGCAGGAGCGUAGAGAGCGCGGGACUAGAGUGCAGAGCUCCGGGACGUGGAUCGGAGCCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[60.79928970 396.38177490]
[53.18936920 381.85522461]
[62.19216919 368.14822388]
[62.56028748 353.15274048]
[62.92840576 338.15725708]
[50.10470963 345.93881226]
[35.94064713 341.00128174]
[30.73332405 326.93417358]
[38.26840591 313.96408081]
[53.06797409 311.52017212]
[64.37319946 321.37973022]
[66.57415771 306.54208374]
[68.77511597 291.70443726]
[70.97607422 276.86679077]
[73.17702484 262.02914429]
[75.37798309 247.19148254]
[77.57894135 232.35383606]
[79.77989960 217.51618958]
[81.98085785 202.67854309]
[83.81701660 187.79135132]
[85.28727722 172.86358643]
[86.75753021 157.93580627]
[88.22779083 143.00804138]
[89.69804382 128.08027649]
[77.87880707 122.10487366]
[69.35382080 111.21766663]
[66.12086487 97.17308807]
[69.26895142 82.51104736]
[53.60887146 84.76328278]
[44.51903534 72.96395111]
[28.85895729 75.21618652]
[19.76911926 63.41685867]
[5.77422810 58.01843262]
[-8.22066402 52.62000656]
[-22.21555519 47.22158051]
[-36.21044922 41.82315445]
[-50.20534134 36.42472839]
[-66.31417084 39.49679565]
[-76.82277679 26.90706825]
[-70.92080688 11.60678101]
[-54.67969894 9.33555794]
[-44.80691528 22.42983818]
[-30.81202316 27.82826233]
[-16.81713104 33.22668839]
[-2.82223845 38.62511444]
[11.17265320 44.02354050]
[25.16754532 49.42196655]
[39.82661438 46.78359985]
[49.91746140 58.96905899]
[64.57653046 56.33069611]
[74.66737366 68.51615906]
[87.89619446 61.44520569]
[91.18270874 46.80967331]
[86.65704346 31.64956284]
[96.99491119 20.92679024]
[100.28142548 6.29125738]
[103.56794739 -8.34427452]
[106.85446167 -22.97980690]
[93.69741058 -34.49303436]
[88.15057373 -50.97984695]
[91.63705444 -67.93161011]
[103.12234497 -80.75959778]
[119.41909027 -86.03707123]
[121.98352051 -100.81623840]
[124.54795074 -115.59539795]
[118.39223480 -130.79537964]
[128.68992615 -143.55819702]
[144.84764099 -140.75456238]
[150.24371338 -125.26862335]
[139.32711792 -113.03097534]
[136.76268005 -98.25180817]
[134.19825745 -83.47264099]
[144.80076599 -76.39353943]
[151.93418884 -65.77086639]
[154.49356079 -53.18592072]
[152.05801392 -40.52857971]
[144.95953369 -29.71353531]
[134.23823547 -22.39064598]
[121.48999786 -19.69328880]
[118.20347595 -5.05775595]
[114.91696167 9.57777596]
[111.63043976 24.21330833]
[116.39118195 38.32658768]
[105.81824493 50.09619141]
[102.53172302 64.73172760]
[120.88631439 74.92438507]
[128.95481873 92.50000000]
[143.95481873 92.50000000]
[157.75498962 84.76270294]
[170.48226929 92.50000000]
[185.48226929 92.50000000]
[200.48226929 92.50000000]
[215.48226929 92.50000000]
[227.79748535 82.21823120]
[243.48498535 85.57711029]
[250.51065063 100.00000000]
[243.48498535 114.42288971]
[227.79748535 117.78176880]
[215.48226929 107.50000000]
[200.48226929 107.50000000]
[185.48226929 107.50000000]
[170.48226929 107.50000000]
[157.75498962 115.23729706]
[143.95481873 107.50000000]
[128.95481873 107.50000000]
[123.97655487 117.88173676]
[115.44551849 125.61381531]
[104.62581635 129.55052185]
[103.15555573 144.47830200]
[101.68530273 159.40606689]
[100.21504211 174.33383179]
[98.74478912 189.26161194]
[101.18321991 195.59100342]
[100.13800812 201.31291199]
[96.81850433 204.87950134]
[94.61754608 219.71714783]
[92.41658783 234.55479431]
[90.21562958 249.39244080]
[88.01467896 264.23010254]
[85.81372070 279.06774902]
[83.61276245 293.90539551]
[81.41180420 308.74304199]
[79.21084595 323.58068848]
[77.92388916 338.52536011]
[77.55577087 353.52084351]
[77.18765259 368.51632690]
[85.50703430 382.64855957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 126]
[4 125]
[5 124]
[11 123]
[12 122]
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[18 116]
[19 115]
[20 112]
[21 111]
[22 110]
[23 109]
[24 108]
[28 51]
[30 49]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[52 85]
[53 84]
[55 82]
[56 81]
[57 80]
[58 79]
[63 72]
[64 71]
[65 70]
[87 105]
[88 104]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
