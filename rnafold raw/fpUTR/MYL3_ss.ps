%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCGGGCAGGAUAAAGGCCUGGGUGAGGCGGCUCACCUACCCUGCUUUCUGCAUUCUUCUCUCCACAUCCCUCUCUGUACUUACAGCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[207.29881287 244.68156433]
[196.05987549 231.34599304]
[187.55751038 216.11421204]
[182.10289001 199.54039001]
[179.89625549 182.22793579]
[181.01960754 164.80738831]
[185.43360901 147.91358948]
[171.82725525 141.59956360]
[158.22088623 135.28553772]
[144.61451721 128.97152710]
[131.00816345 122.65750122]
[117.40179443 116.34347534]
[104.53533173 123.43848419]
[89.95092010 121.65519714]
[79.17301941 111.66912079]
[76.28418732 97.26288605]
[62.67782211 90.94886780]
[49.07145691 84.63484192]
[36.57889557 88.33907318]
[25.31025124 82.64267731]
[21.16071320 71.14552307]
[7.77292967 64.38037109]
[-5.61485291 57.61521912]
[-19.00263596 50.85006714]
[-32.39041901 44.08491516]
[-45.77820206 37.31976318]
[-59.16598129 30.55461121]
[-72.55376434 23.78946114]
[-88.88844299 25.24220276]
[-98.09117889 11.66864109]
[-90.69499969 -2.96790719]
[-74.30845642 -3.61061621]
[-65.78861237 10.40167809]
[-52.40082932 17.16683006]
[-39.01305008 23.93198204]
[-25.62526512 30.69713402]
[-12.23748398 37.46228409]
[1.15029895 44.22743607]
[14.53808117 50.99258804]
[27.92586327 57.75774002]
[45.27230072 55.75322723]
[55.38547897 71.02848053]
[68.99184418 77.34249878]
[82.59820557 83.65652466]
[95.46466827 76.56151581]
[110.04907990 78.34480286]
[120.82698059 88.33087921]
[123.71581268 102.73711395]
[137.32217407 109.05113220]
[150.92854309 115.36515808]
[164.53491211 121.67917633]
[178.14126587 127.99320221]
[191.74763489 134.30722046]
[198.98258972 123.47426605]
[207.68159485 113.78019714]
[217.66789246 105.42124176]
[228.73860168 98.56647491]
[240.66896057 93.35443115]
[253.21682739 89.89030457]
[266.12762451 88.24382782]
[279.13946533 88.44783783]
[291.98852539 90.49765778]
[304.41436768 94.35119629]
[316.16513062 99.92978668]
[327.00277710 107.11982727]
[336.70788574 115.77505493]
[345.08395386 125.71957397]
[351.96163940 136.75137329]
[357.20184326 148.64646912]
[360.69885254 161.16343689]
[362.38229370 174.04830933]
[362.21853638 187.03976440]
[360.21142578 199.87434387]
[356.40225220 212.29188538]
[350.86871338 224.04077148]
[343.72357178 234.88296509]
[354.84835815 244.94473267]
[365.97314453 255.00650024]
[377.09790039 265.06826782]
[393.23602295 267.98269653]
[398.52569580 283.50531006]
[387.52539062 295.66775513]
[371.55126953 291.95837402]
[367.03613281 276.19305420]
[355.91134644 266.13128662]
[344.78659058 256.06951904]
[333.66180420 246.00773621]
[319.89871216 256.66409302]
[304.35778809 264.51312256]
[287.60458374 269.26739502]
[270.24902344 270.75216675]
[252.92337036 268.91177368]
[236.25901794 263.81161499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 53]
[8 52]
[9 51]
[10 50]
[11 49]
[12 48]
[16 44]
[17 43]
[18 42]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
