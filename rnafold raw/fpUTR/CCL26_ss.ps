%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGAAUUGAGGCUGAGCCAAAGACCCCAGGGCCGUCUCAGUCUCAUAAAAGGGGAUCAGGCAGGAGGAGUUUGGGAGAAACCUGAGAAGGGCCUGAUUUGCAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[101.99687195 148.60118103]
[92.00904846 147.98132324]
[82.35943604 145.33070374]
[73.45643616 140.76152039]
[65.67686462 134.46716309]
[59.34997940 126.71401215]
[54.74355698 117.83022308]
[52.05255890 108.19179535]
[37.05411530 108.40795135]
[22.05567360 108.62410736]
[7.05723190 108.84027100]
[-7.94121075 109.05642700]
[-22.93965340 109.27258301]
[-37.93809509 109.48873901]
[-52.93653870 109.70489502]
[-67.93498230 109.92105103]
[-82.93342590 110.13720703]
[-96.62066650 118.07257080]
[-109.45811462 110.51948547]
[-116.71155548 118.88004303]
[-127.17867279 121.72544098]
[-137.24670410 118.32904053]
[-143.58128357 110.07579803]
[-152.44393921 112.86302185]
[-158.98797607 109.18670654]
[-173.94905090 108.10681915]
[-188.46044922 115.74563599]
[-202.18531799 106.77012634]
[-201.00469971 90.41352844]
[-186.13311768 83.50211334]
[-172.86915588 93.14574432]
[-157.90808105 94.22563171]
[-142.93299866 95.08981323]
[-126.64700317 84.83466339]
[-109.67427063 95.52104187]
[-97.05981445 87.60113525]
[-83.14958191 95.13877106]
[-68.15113831 94.92260742]
[-53.15269470 94.70645142]
[-38.15425110 94.49029541]
[-23.15580940 94.27413940]
[-8.15736771 94.05798340]
[6.84107494 93.84182739]
[21.83951759 93.62567139]
[36.83795929 93.40950775]
[51.83640289 93.19335175]
[59.02600479 73.78560638]
[73.63352966 59.12370300]
[93.01442719 51.86203003]
[113.65998840 53.31523514]
[131.83255005 63.22023392]
[144.24215698 79.78382874]
[155.43608093 68.60318756]
[169.78140259 72.61080170]
[184.22262573 68.55480194]
[198.66384888 64.49880219]
[213.10507202 60.44280243]
[227.54629517 56.38679886]
[241.98751831 52.33079910]
[256.42874146 48.27479935]
[270.86996460 44.21879959]
[285.31118774 40.16279602]
[286.42391968 28.62191582]
[291.05636597 18.02253914]
[298.73474121 9.40703678]
[308.68658447 3.61699057]
[319.91848755 1.21100926]
[331.31527710 2.41086602]
[341.75073242 7.08116913]
[350.19882202 14.74440765]
[355.83462524 24.62972450]
[370.64657593 22.26185989]
[385.45849609 19.89399529]
[400.27041626 17.52613068]
[415.08233643 15.15826511]
[429.89428711 12.79040051]
[440.43203735 0.69349241]
[456.45306396 1.53386962]
[465.66738892 14.66686630]
[461.00659180 30.01797104]
[446.04602051 35.81113052]
[432.26214600 27.60232735]
[417.45022583 29.97019386]
[402.63827515 32.33805847]
[387.82635498 34.70592117]
[373.01443481 37.07378769]
[358.20251465 39.44165421]
[352.60589600 57.28776550]
[338.79101562 70.01323700]
[320.39102173 74.16341400]
[302.29907227 68.55320740]
[289.36718750 54.60401917]
[274.92596436 58.66001892]
[260.48474121 62.71601868]
[246.04351807 66.77201843]
[231.60229492 70.82801819]
[217.16107178 74.88402557]
[202.71984863 78.94002533]
[188.27862549 82.99602509]
[173.83740234 87.05202484]
[163.67642212 97.94255066]
[148.29815674 94.22504425]
[148.45783997 104.23081207]
[146.56660461 114.05751038]
[142.70449829 123.28923798]
[137.03495789 131.53527832]
[129.79797363 138.44662476]
[121.29981995 143.73077393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[19 35]
[23 33]
[25 32]
[26 31]
[52 102]
[54 100]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[61 93]
[62 92]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
