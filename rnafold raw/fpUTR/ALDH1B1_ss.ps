%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGAGCCUCAUUGGCCGCUGAGCCCCGGGCUGCGCGGAGGCGGGACCUGCGGCCAGCCCUGGGCGGCCAUGUGGACAGAGCUGGGAGGGCCGGAACCAGAACCCAAGCGUGAUCCUGAACCGGAGCCCGAGCCUGCUGCAGAGUGUCAGC\
) } def
/len { sequence length } bind def

/coor [
[65.82987213 192.27882385]
[61.69276047 194.77294922]
[55.46153259 208.41741943]
[49.23030853 222.06190491]
[50.53560638 237.82917786]
[38.21041107 246.19212341]
[31.97918510 259.83660889]
[37.73635483 274.55496216]
[31.32337379 288.99966431]
[16.54495430 294.60089111]
[2.16886735 288.03555298]
[-3.27580857 273.19876099]
[3.44115591 258.89288330]
[18.33470535 253.60537720]
[24.56592941 239.96089172]
[22.81493378 225.16957092]
[35.58583069 215.83067322]
[41.81705475 202.18620300]
[48.04827881 188.54171753]
[53.99988174 174.77296448]
[59.66938019 160.88568115]
[65.33888245 146.99839783]
[71.00838470 133.11111450]
[76.67787933 119.22382355]
[70.30780792 105.64360809]
[56.00461578 101.12491608]
[41.70141983 96.60622406]
[27.39822197 92.08753204]
[11.90828609 95.30815125]
[2.10307384 84.09623718]
[-12.20012188 79.57754517]
[-26.50331879 75.05885315]
[-40.80651474 70.54016113]
[-55.10971069 66.02146912]
[-69.41290283 61.50277328]
[-83.31079865 68.53742218]
[-97.75190735 63.75107193]
[-104.37271881 50.45820236]
[-118.67591858 45.93951035]
[-134.16584778 49.16013336]
[-143.97106934 37.94821930]
[-158.27426147 33.42952347]
[-172.57745361 28.91083145]
[-187.41793823 35.00506210]
[-201.36483765 27.07641220]
[-203.71929932 11.20706844]
[-192.67515564 -0.42937031]
[-176.70455933 1.09357727]
[-168.05876160 14.60763550]
[-153.75556946 19.12632942]
[-139.45237732 23.64502144]
[-124.98549652 20.10118866]
[-114.15722656 31.63631248]
[-99.85402679 36.15500641]
[-86.79806519 29.07846069]
[-72.22821808 33.45730209]
[-64.89421082 47.19957733]
[-50.59101868 51.71826935]
[-36.28782272 56.23696136]
[-21.98462486 60.75565720]
[-7.68142939 65.27434540]
[6.62176657 69.79303741]
[21.08864403 66.24920654]
[31.91691589 77.78433228]
[46.22011185 82.30302429]
[60.52330780 86.82171631]
[74.82649994 91.34040833]
[95.70467377 77.53974152]
[114.50430298 87.55239868]
[128.80749512 83.03370667]
[136.14151001 69.29143524]
[150.71134949 64.91259003]
[163.76731873 71.98913574]
[178.07051086 67.47044373]
[192.37370300 62.95174789]
[206.67689514 58.43305588]
[220.98010254 53.91436386]
[228.27313232 48.31258392]
[235.62133789 49.45259476]
[250.01373291 45.22660828]
[264.40612793 41.00062180]
[271.81192017 35.54877472]
[279.13534546 36.83843994]
[293.61096191 32.90691757]
[308.08654785 28.97539139]
[319.37631226 17.89153671]
[333.68661499 22.02250290]
[348.16220093 18.09097862]
[355.67767334 12.79133415]
[362.97326660 14.23012066]
[371.13403320 0.96213430]
[385.94442749 -2.51739478]
[398.54312134 5.34442663]
[413.09591675 1.70900047]
[427.64871216 -1.92642558]
[442.20150757 -5.56185150]
[447.77908325 -17.86131287]
[459.26443481 -24.58771706]
[472.33169556 -23.46828270]
[482.20751953 -15.13769531]
[496.83145142 -18.47550964]
[511.45535278 -21.81332207]
[513.62237549 -36.83558655]
[521.07318115 -50.05868530]
[532.80004883 -59.69430161]
[547.21704102 -64.43930054]
[562.37432861 -63.65196228]
[576.22210693 -57.43876266]
[586.88751221 -46.63998795]
[592.92816162 -32.71608353]
[593.52709961 -17.55014229]
[588.60333252 -3.19323611]
[578.82269287 8.41298294]
[565.50805664 15.69886971]
[550.46002197 17.67906761]
[535.71374512 14.08577061]
[523.26354980 5.40494347]
[514.79315186 -7.18940449]
[500.16925049 -3.85159039]
[485.54534912 -0.51377630]
[477.24340820 14.08084774]
[460.63500977 18.26608086]
[445.83691406 8.99093723]
[431.28411865 12.62636375]
[416.73135376 16.26178932]
[402.17855835 19.89721489]
[394.75711060 32.76025772]
[380.05032349 36.65440750]
[366.60867310 28.78290939]
[352.09371948 32.56658173]
[337.61813354 36.49810791]
[327.36376953 47.30075455]
[312.01806641 43.45099640]
[297.54248047 47.38251877]
[283.06686401 51.31404495]
[268.63211060 55.39301300]
[254.23973083 59.61900330]
[239.84733582 63.84498978]
[225.49879456 68.21755981]
[211.19558716 72.73625183]
[196.89239502 77.25494385]
[182.58920288 81.77363586]
[168.28601074 86.29232788]
[161.66519165 99.58519745]
[147.22409058 104.37155151]
[133.32618713 97.33689880]
[119.02299500 101.85559082]
[112.06217194 119.42722321]
[90.56517029 124.89331818]
[84.89566803 138.78060913]
[79.22616577 152.66789246]
[73.55667114 166.55519104]
[67.88716888 180.44247437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[6 15]
[7 14]
[20 153]
[21 152]
[22 151]
[23 150]
[24 149]
[25 67]
[26 66]
[27 65]
[28 64]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[38 54]
[39 53]
[41 51]
[42 50]
[43 49]
[69 147]
[70 146]
[73 143]
[74 142]
[75 141]
[76 140]
[77 139]
[79 138]
[80 137]
[81 136]
[83 135]
[84 134]
[85 133]
[87 131]
[88 130]
[90 129]
[93 126]
[94 125]
[95 124]
[96 123]
[100 120]
[101 119]
[102 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
