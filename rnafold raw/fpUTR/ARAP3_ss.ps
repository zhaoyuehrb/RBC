%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACCCAGAACCUCGGACGAGCGGCGGGCACCCGCGAGCGGACGGCGGCCGCGUAGUGAGCAAUGGCCUGAGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.96775055 250.03799438]
[98.77599335 235.08540344]
[97.58424377 220.13282776]
[93.81140137 213.53833008]
[96.65445709 204.56410217]
[88.41728210 192.15449524]
[95.59982300 178.05763245]
[95.00347137 163.06948853]
[94.40712738 148.08134460]
[83.32450104 138.19645691]
[82.50621033 123.00484467]
[92.94953156 111.44738770]
[91.16426086 96.55400848]
[88.20134735 81.84954834]
[85.23844147 67.14508820]
[82.27552795 52.44062805]
[68.67009735 48.60821533]
[58.13299942 39.28709030]
[52.72082901 26.37392426]
[53.45616913 12.45857048]
[60.13491821 0.30466133]
[71.37835693 -7.69924402]
[69.00238800 -22.50987434]
[66.62641144 -37.32050323]
[64.25044250 -52.13113403]
[61.87447357 -66.94176483]
[52.04893494 -79.34214020]
[57.67258072 -93.13430786]
[47.84703827 -105.53468323]
[53.47068405 -119.32685089]
[40.95020676 -128.59375000]
[38.75161743 -143.64767456]
[47.66334534 -155.52693176]
[45.28737640 -170.33757019]
[42.91140747 -185.14819336]
[32.15157700 -197.52389526]
[37.74445724 -212.93986511]
[53.93656921 -215.53744507]
[64.07086182 -202.64450073]
[57.72203445 -187.52416992]
[60.09800720 -172.71353149]
[62.47397614 -157.90290833]
[74.65430450 -149.40731812]
[77.27486420 -134.42106628]
[68.28131104 -121.70281982]
[77.93690491 -110.36180115]
[72.48320770 -95.51027679]
[82.13880157 -84.16925812]
[76.68510437 -69.31773376]
[79.06107330 -54.50710297]
[81.43704224 -39.69647598]
[83.81301117 -24.88584518]
[86.18898773 -10.07521439]
[101.31848145 -4.76969957]
[111.82752991 7.46137333]
[114.82861328 23.39997482]
[109.42593384 38.79088211]
[96.97998810 49.47771835]
[99.94290161 64.18217468]
[102.90580750 78.88663483]
[105.86872101 93.59109497]
[108.57070160 95.58531189]
[110.51312256 98.71177673]
[111.23394012 102.65160370]
[110.41246033 106.90425110]
[107.93767548 110.85104370]
[119.26622772 121.54223633]
[119.65750122 136.75083923]
[109.39526367 147.48500061]
[109.99161530 162.47314453]
[110.58795929 177.46127319]
[118.86779022 190.94293213]
[111.64260101 203.96774292]
[112.53682709 218.94107056]
[113.72857666 233.89366150]
[114.92033386 248.84623718]
[122.20597839 264.15490723]
[109.51243591 275.39370728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[5 73]
[7 71]
[8 70]
[9 69]
[12 66]
[13 61]
[14 60]
[15 59]
[16 58]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[28 47]
[30 45]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
