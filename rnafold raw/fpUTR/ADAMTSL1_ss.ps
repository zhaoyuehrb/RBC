%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCACCCCUCGGUCAGGAAAUGUGAGAGGGGCUGAUGGAAGCUGAUAGGCAGGACUGGAGUGUUAGCACCAGUACUGGAUGUGACAGCAGGCAGAGGAGCACUUAGCAGCUUAUUCAGUGUCCGAUUCUGAUUCCGGCAAGGAUCCAAGC\
) } def
/len { sequence length } bind def

/coor [
[14.78876972 378.75488281]
[14.46725273 363.75833130]
[24.27113724 352.40362549]
[29.29980278 338.27166748]
[21.82508659 337.65637207]
[10.63678932 347.64746094]
[-0.44834423 357.75289917]
[-11.42914677 367.97161865]
[-22.40994835 378.19030762]
[-33.39075089 388.40902710]
[-44.37155533 398.62771606]
[-55.35235596 408.84643555]
[-53.62125397 424.15359497]
[-61.14745712 437.39028931]
[-74.86253357 443.58389282]
[-89.42050934 440.55017090]
[-100.40130615 450.76889038]
[-102.41228485 466.68539429]
[-116.18460083 474.91357422]
[-131.15330505 469.14144897]
[-135.83570862 453.79693604]
[-126.63984680 440.65097046]
[-110.62001801 439.78808594]
[-99.63921356 429.56936646]
[-101.61976624 414.83114624]
[-94.45734406 401.59619141]
[-80.71442413 395.03985596]
[-65.57106018 397.86563110]
[-54.59025955 387.64691162]
[-43.60945892 377.42822266]
[-32.62865829 367.20950317]
[-21.64785385 356.99081421]
[-10.66705132 346.77209473]
[-7.89591646 339.87042236]
[0.64569253 336.45916748]
[11.83398914 326.46807861]
[22.23221016 315.20916748]
[34.60120392 310.84103394]
[45.43189621 312.73547363]
[48.79115677 298.11645508]
[52.15041351 283.49746704]
[47.45991898 269.36068726]
[58.09125137 257.64379883]
[61.45051193 243.02478027]
[64.80976868 228.40577698]
[68.16902924 213.78677368]
[71.52828979 199.16775513]
[74.73728180 184.51504517]
[77.79567719 169.83013916]
[80.85407257 155.14524841]
[83.91246796 140.46034241]
[86.97086334 125.77544403]
[76.37694550 116.61576080]
[71.33756256 103.54917908]
[73.03762817 89.64807129]
[81.07740021 78.18103790]
[74.52952576 64.68565369]
[67.98165894 51.19026566]
[61.43378830 37.69488144]
[54.88591766 24.19949913]
[41.90061188 15.16111279]
[43.30603409 0.33296189]
[36.75816345 -13.16242218]
[22.88541222 -21.90764046]
[23.79290581 -38.28165817]
[38.54709244 -45.44029236]
[51.97012711 -36.01935196]
[50.25354767 -19.71029282]
[56.80141830 -6.21490860]
[69.31837463 1.85819674]
[68.38130188 17.65162849]
[74.92916870 31.14701271]
[81.47704315 44.64239502]
[88.02490997 58.13777924]
[94.57278442 71.63316345]
[96.78235626 65.26839447]
[100.17493439 59.12105942]
[106.16323090 45.36822891]
[112.15152740 31.61540222]
[106.60736084 17.05861664]
[112.87625885 3.19659758]
[126.78810120 -1.99920762]
[132.77639771 -15.75203609]
[138.76469421 -29.50486565]
[136.37998962 -45.72969818]
[149.40493774 -55.69377899]
[164.44058228 -49.14691544]
[166.01954651 -32.82395935]
[152.51751709 -23.51656914]
[146.52922058 -9.76373959]
[140.54092407 3.98908901]
[146.21472168 17.71292496]
[140.33764648 31.74555588]
[125.90435791 37.60369873]
[119.91606140 51.35652542]
[113.92776489 65.10935211]
[119.20377350 70.43981171]
[129.86483765 59.88795853]
[140.41653442 70.54919434]
[129.75578308 81.10071564]
[135.03179932 86.43117523]
[148.84538269 80.58438873]
[156.17884827 66.31554413]
[171.93479919 63.29399490]
[184.02659607 73.83760834]
[183.17846680 89.85823059]
[170.04101562 99.06620789]
[154.69216919 94.39796448]
[140.87858582 100.24475861]
[125.28945923 124.02250671]
[101.65576172 128.83384705]
[98.59736633 143.51873779]
[95.53897095 158.20364380]
[92.48057556 172.88853455]
[89.42218018 187.57344055]
[90.73874664 196.67631531]
[86.14729309 202.52702332]
[82.78803253 217.14602661]
[79.42877960 231.76502991]
[76.06951904 246.38404846]
[72.71025848 261.00305176]
[77.16047668 276.18548584]
[66.76942444 286.85671997]
[63.41016388 301.47570801]
[60.05090332 316.09472656]
[63.41016388 330.71374512]
[72.81401825 342.39993286]
[82.21788025 354.08615112]
[91.62173462 365.77236938]
[101.02558899 377.45855713]
[110.42945099 389.14477539]
[125.59406281 386.70959473]
[139.93885803 392.19796753]
[149.60517883 404.13354492]
[151.99281311 419.30569458]
[146.45951843 433.63323975]
[134.49369812 443.26208496]
[119.31411743 445.60217285]
[105.00399780 440.02398682]
[95.41269684 428.02804565]
[93.12022400 412.84118652]
[98.74324036 398.54864502]
[89.33938599 386.86242676]
[79.93552399 375.17620850]
[70.53166962 363.49002075]
[61.12781143 351.80380249]
[51.72395706 340.11758423]
[44.24923706 339.50228882]
[46.89923096 354.26635742]
[54.71403885 367.06982422]
[51.94561386 381.81213379]
[40.01833344 390.90829468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 36]
[6 35]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[16 24]
[17 23]
[39 125]
[40 124]
[41 123]
[43 121]
[44 120]
[45 119]
[46 118]
[47 117]
[48 115]
[49 114]
[50 113]
[51 112]
[52 111]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[62 69]
[63 68]
[77 96]
[78 95]
[79 94]
[82 91]
[83 90]
[84 89]
[101 109]
[102 108]
[126 147]
[127 146]
[128 145]
[129 144]
[130 143]
[131 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
