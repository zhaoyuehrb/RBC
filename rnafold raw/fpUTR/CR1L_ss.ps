%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUGUGAGUUUGGGGAUUGUUGUGUCCACUAACCGGACUCAGAAGGGACUUCCCUGCUCGGCUGGCUUUCGGUUUCUCUGCUCACCUCCGGAUAAAUCACGGGGUCUCCCGCGCCGCUC\
) } def
/len { sequence length } bind def

/coor [
[104.08657074 169.08110046]
[90.98691559 161.77365112]
[82.58092499 149.35031128]
[80.66947174 134.47259521]
[85.66215515 120.32767487]
[74.57437897 131.61358643]
[60.19182968 127.74171448]
[45.78958130 131.93399048]
[31.38733292 136.12628174]
[16.98508453 140.31855774]
[2.58283710 144.51084900]
[-11.81941128 148.70314026]
[-26.22165871 152.89541626]
[-40.62390900 157.08770752]
[-55.02615356 161.27998352]
[-69.12886810 166.39012146]
[-82.87362671 172.39692688]
[-96.61837769 178.40373230]
[-110.36312866 184.41055298]
[-115.89397430 199.21545410]
[-130.30798340 205.69709778]
[-145.05358887 200.01004028]
[-151.38249207 185.52830505]
[-145.53984070 170.84364319]
[-130.99200439 164.66821289]
[-116.36994171 170.66578674]
[-102.62518311 164.65898132]
[-88.88043213 158.65217590]
[-75.13568115 152.64537048]
[-87.56726074 144.25157166]
[-89.01834869 129.32192993]
[-78.43585205 118.69126892]
[-63.49977493 120.07455444]
[-55.04961395 132.46789551]
[-59.21844101 146.87774658]
[-44.81619263 142.68545532]
[-30.41394424 138.49316406]
[-16.01169586 134.30088806]
[-1.60944736 130.10859680]
[12.79280090 125.91632080]
[27.19504929 121.72402954]
[41.59729767 117.53174591]
[55.99954605 113.33946228]
[66.05716705 102.35340881]
[81.46986389 105.92542267]
[87.29921722 92.10446930]
[80.24956512 78.86428833]
[73.19991302 65.62410736]
[66.15026093 52.38392639]
[51.95912933 44.16542053]
[52.25157547 27.76887894]
[66.72675323 20.06166077]
[80.49384308 28.97229004]
[79.39044189 45.33427429]
[86.44009399 58.57445526]
[93.48974609 71.81463623]
[100.53939819 85.05481720]
[114.20567322 91.23809814]
[128.80464172 87.79277802]
[140.45869446 77.09261322]
[154.62284851 81.69975281]
[169.22181702 78.25443268]
[183.82078552 74.80912018]
[192.15391541 61.64869690]
[207.00842285 58.36262131]
[219.50352478 66.38809204]
[234.10247803 62.94277573]
[248.70144653 59.49745941]
[263.30041504 56.05214310]
[277.89938354 52.60682678]
[292.49835205 49.16151047]
[305.53292847 36.23270798]
[322.12518311 41.78999710]
[336.63061523 37.96992874]
[351.13601685 34.14986420]
[365.64144897 30.32979584]
[380.14685059 26.50972939]
[391.52154541 15.51304054]
[405.79962158 19.75395584]
[420.30505371 15.93388844]
[434.81045532 12.11382198]
[449.31588745 8.29375553]
[454.81311035 -6.21693754]
[467.80804443 -14.69697571]
[483.30389404 -13.88561153]
[495.34216309 -4.09483051]
[499.29391479 10.91061211]
[493.63961792 25.36081696]
[480.55343628 33.69938660]
[465.06732178 32.71996689]
[453.13595581 22.79917145]
[438.63052368 26.61923790]
[424.12512207 30.43930435]
[409.61968994 34.25937271]
[399.28253174 44.98282242]
[383.96691895 41.01514435]
[369.46151733 44.83521271]
[354.95608521 48.65527725]
[340.45068359 52.47534561]
[325.94525146 56.29541397]
[319.52636719 66.63591766]
[307.38113403 69.88839722]
[295.94366455 63.76047516]
[281.34469604 67.20579529]
[266.74572754 70.65110779]
[252.14675903 74.09642029]
[237.54780579 77.54174042]
[222.94883728 80.98705292]
[215.36027527 93.75221252]
[200.60392761 97.45422363]
[187.26609802 89.40808105]
[172.66712952 92.85340118]
[158.06817627 96.29871368]
[147.45832825 106.75245667]
[132.24995422 102.39174652]
[117.65098572 105.83705902]
[131.57647705 111.41206360]
[141.49993896 122.66039276]
[145.29542542 137.17225647]
[142.14981079 151.83871460]
[132.73698425 163.51770020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 45]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[16 29]
[17 28]
[18 27]
[19 26]
[46 57]
[47 56]
[48 55]
[49 54]
[58 116]
[59 115]
[61 113]
[62 112]
[63 111]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[71 103]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[79 94]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
