%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCAGUUGGAGCCCCUCGAGGGAAGGGAGCCAUUUUCUUUCCUGGUUUGGGAAAGAGUUGCUCAUCAGUUUGCGGGAGAAGCUGUUUGCCUUCAGCUGAUACACAGUGUAAGGAAAGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[86.97774506 226.16949463]
[95.29162598 212.03402710]
[94.91766357 197.03869629]
[94.54370117 182.04335022]
[94.16973877 167.04801941]
[79.77914429 164.19146729]
[66.34948730 158.28439331]
[54.51898575 149.60751343]
[44.84984589 138.57316589]
[31.67652321 145.74696350]
[18.50319862 152.92077637]
[13.93621254 167.81306458]
[0.47439536 174.90068054]
[-13.69498539 170.45497131]
[-26.86830902 177.62878418]
[-40.04163361 184.80259705]
[-48.46084595 198.19764709]
[-63.33860779 197.48945618]
[-76.51193237 204.66325378]
[-84.59666443 218.93103027]
[-100.99523163 218.79273987]
[-108.83818817 204.39065552]
[-100.05737305 190.54040527]
[-83.68573761 191.48992920]
[-70.51241302 184.31613159]
[-63.03544617 171.43418884]
[-47.21544266 171.62927246]
[-34.04211807 164.45545959]
[-20.86879539 157.28164673]
[-16.91575432 142.96701050]
[-3.65832400 135.50408936]
[11.32938957 139.74745178]
[24.50271416 132.57363892]
[37.67603683 125.39983368]
[32.71374893 101.41011047]
[36.66662216 77.23354340]
[49.01091766 56.07345200]
[38.80832672 45.07767487]
[28.60573769 34.08189392]
[18.40314674 23.08611679]
[8.20055485 12.09033871]
[-2.00203586 1.09456098]
[-12.20462704 -9.90121746]
[-22.40721703 -20.89699554]
[-32.60980988 -31.89277267]
[-48.52336121 -33.92709351]
[-56.73133087 -47.71146011]
[-50.93726730 -62.67168808]
[-35.58588028 -67.33156586]
[-22.45344162 -58.11644363]
[-21.61403084 -42.09536362]
[-11.41143990 -31.09958649]
[-1.20884871 -20.10380745]
[8.99374199 -9.10803032]
[19.19633293 1.88774800]
[29.39892387 12.88352585]
[39.60151672 23.87930489]
[49.80410767 34.87508392]
[60.00669861 45.87086105]
[67.70691681 40.95269012]
[76.00232697 37.12281799]
[84.74004364 34.45183563]
[93.75901031 32.98897171]
[102.89300537 32.76118469]
[111.97367859 33.77267075]
[120.83367157 36.00479507]
[129.30967712 39.41641235]
[137.24546814 43.94464493]
[146.88728333 32.45397949]
[156.52909851 20.96331215]
[166.17091370 9.47264576]
[175.81272888 -2.01802111]
[185.45454407 -13.50868797]
[182.56111145 -28.87625122]
[190.26770020 -42.48295212]
[204.93553162 -47.90412140]
[219.63887024 -42.58005142]
[227.43525696 -29.02460098]
[224.64349365 -13.63824177]
[212.58174133 -3.68594241]
[196.94520569 -3.86687350]
[187.30339050 7.62379313]
[177.66157532 19.11445999]
[168.01976013 30.60512543]
[158.37796021 42.09579468]
[148.73614502 53.58646011]
[157.50358582 65.03194427]
[163.63204956 78.08220673]
[166.84027100 92.13833618]
[166.98101807 106.55525208]
[164.04782104 120.67133331]
[177.72041321 126.84064484]
[191.39300537 133.00994873]
[205.06558228 139.17926025]
[219.69429016 133.82771301]
[233.47235107 140.27903748]
[238.48406982 154.25825500]
[252.15666199 160.42755127]
[265.82925415 166.59686279]
[279.50183105 172.76617432]
[294.95599365 168.45936584]
[307.87377930 177.97306824]
[308.34576416 194.00918579]
[296.00988770 204.26617432]
[280.32916260 200.87574768]
[273.33251953 186.43875122]
[259.65994263 180.26945496]
[245.98735046 174.10014343]
[232.31475830 167.93083191]
[218.51722717 173.42298889]
[204.56340027 167.36120605]
[198.89628601 152.85183716]
[185.22369385 146.68254089]
[171.55110168 140.51322937]
[157.87852478 134.34391785]
[150.80671692 144.13734436]
[142.09811401 152.50881958]
[132.03326416 159.18865967]
[120.93641663 163.96166992]
[109.16507721 166.67405701]
[109.53903961 181.66938782]
[109.91300201 196.66473389]
[110.28695679 211.66006470]
[119.29509735 225.36355591]
[111.69084167 239.89308167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 123]
[3 122]
[4 121]
[5 120]
[9 34]
[10 33]
[11 32]
[14 29]
[15 28]
[16 27]
[18 25]
[19 24]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[91 115]
[92 114]
[93 113]
[94 112]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
