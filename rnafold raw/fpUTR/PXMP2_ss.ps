%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUCCGCGCCCGGCCAGCCUGAGGUGGGGUCGGUGCCCCCGGCGGCACGGCGCUGGGGAGGCG\
) } def
/len { sequence length } bind def

/coor [
[123.48265839 130.28820801]
[136.39291382 122.64821625]
[122.46738434 117.07328033]
[108.54187012 111.49834442]
[94.67633057 113.29788971]
[85.88319397 102.42717743]
[71.95767212 96.85224152]
[58.03215790 91.27730560]
[48.53577042 90.94284821]
[43.58696365 85.09151459]
[29.94248390 78.86028290]
[16.29800415 72.62905884]
[2.65352345 66.39783478]
[-13.11374569 67.70313263]
[-21.47668839 55.37793732]
[-35.12117004 49.14671326]
[-48.76564789 42.91548538]
[-62.80653000 49.79935837]
[-77.97484589 45.99724197]
[-87.10858917 33.30437851]
[-85.89508057 17.71395111]
[-74.90730286 6.58728266]
[-59.33334732 5.17804623]
[-46.52676010 14.15163994]
[-42.53442383 29.27100563]
[-28.88994408 35.50223160]
[-15.24546337 41.73345566]
[-0.45413899 39.98246002]
[8.88474846 52.75335693]
[22.52922821 58.98458099]
[36.17370987 65.21580505]
[49.81818771 71.44702911]
[63.60709381 77.35178375]
[77.53261566 82.92671967]
[91.45812988 88.50165558]
[105.32366943 86.70211029]
[114.11680603 97.57282257]
[128.04232788 103.14775848]
[141.96784973 108.72269440]
[156.69677734 111.56146240]
[171.69677734 111.56146240]
[186.69677734 111.56146240]
[201.69677734 111.56146240]
[216.69677734 111.56146240]
[231.69677734 111.56146240]
[246.69677734 111.56146240]
[257.69345093 100.21032715]
[273.49685669 100.04323578]
[284.73110962 111.15932465]
[284.73110962 126.96360779]
[273.49685669 138.07969666]
[257.69345093 137.91259766]
[246.69677734 126.56146240]
[231.69677734 126.56146240]
[216.69677734 126.56146240]
[201.69677734 126.56146240]
[186.69677734 126.56146240]
[171.69677734 126.56146240]
[156.69677734 126.56146240]
[165.84220886 138.45100403]
[166.61386108 153.43113708]
[158.73847961 166.19744873]
[145.00473022 172.22938538]
[130.27572632 169.39106750]
[119.76694489 158.68753052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[6 35]
[7 34]
[8 33]
[10 32]
[11 31]
[12 30]
[13 29]
[15 27]
[16 26]
[17 25]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
