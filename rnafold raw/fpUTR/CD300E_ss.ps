%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGAGGAAAUAGAUGAGUGAGAACACAAAGGAAACUUGGACAAGUAGAAAGUGGAUGACCCAGGCUCCGUUACAUAUACUUGGAUUCCAGCUGGGACCUAGAUUUGCUGAGGACGGAAGCCAAGGAGACAGGAAC\
) } def
/len { sequence length } bind def

/coor [
[161.39579773 164.95794678]
[154.82725525 170.59002686]
[147.74491882 175.56059265]
[140.21514893 179.82305908]
[132.30851746 183.33750916]
[124.09912109 186.07096863]
[115.66388702 187.99784851]
[107.08186340 189.10009766]
[98.43347168 189.36737061]
[89.79976654 188.79714966]
[81.26164246 187.39482117]
[72.89912415 185.17347717]
[64.79056549 182.15397644]
[57.01197052 178.36459351]
[49.63621521 173.84083557]
[42.73243332 168.62510681]
[36.36531067 162.76628113]
[30.59452248 156.31925964]
[25.47414398 149.34446716]
[12.31640434 156.54681396]
[-0.84133476 163.74917603]
[-8.89511585 178.03443909]
[-25.29394150 177.93170166]
[-33.16810608 163.54664612]
[-24.41734314 149.67739868]
[-8.04368877 150.59143066]
[5.11405039 143.38908386]
[18.27178955 136.18672180]
[15.02963924 127.73116302]
[12.65972328 118.99093628]
[11.18636799 110.05576324]
[10.62469769 101.01736450]
[10.98047924 91.96852875]
[12.25006008 83.00212860]
[14.42040634 74.21022034]
[17.46924019 65.68304443]
[4.15096235 58.78207016]
[-9.16731548 51.88109589]
[-22.48559380 44.98011780]
[-34.99931335 53.79291534]
[-50.17667770 55.76934433]
[-64.53002930 50.45523834]
[-74.76108551 39.07173920]
[-78.51882172 24.23468971]
[-74.93973541 9.35353756]
[-64.84626770 -2.15213895]
[-50.55783463 -7.63841867]
[-35.35781097 -5.84459496]
[-22.73904610 2.81712508]
[-15.60124397 16.35634041]
[-15.58461857 31.66184044]
[-2.26634026 38.56281662]
[11.05193806 45.46379089]
[24.37021637 52.36476517]
[41.46710968 32.45090485]
[63.61111450 18.36159706]
[88.89282227 11.31172371]
[115.13227844 11.90917301]
[140.06690979 20.10242653]
[161.54670715 35.18500900]
[177.71949768 55.85639191]
[191.33807373 49.56874466]
[196.87915039 35.01078415]
[210.77989197 28.82821655]
[224.62452698 34.20050049]
[238.24310303 27.91285324]
[251.86167908 21.62520599]
[265.48025513 15.33755684]
[279.02636719 8.89530563]
[292.49829102 2.29928470]
[305.97021484 -4.29673624]
[319.44210815 -10.89275646]
[332.91403198 -17.48877716]
[342.77801514 -32.99088287]
[360.19967651 -31.21203995]
[373.51794434 -38.11301422]
[386.75680542 -45.16513443]
[399.91455078 -52.36748886]
[402.00341797 -67.62995148]
[412.55545044 -78.60757446]
[427.37289429 -81.23574829]
[440.73669434 -74.71292877]
[453.89443970 -81.91528320]
[467.05215454 -89.11763763]
[480.20989990 -96.31999207]
[488.60006714 -109.73326874]
[503.47930908 -109.05732727]
[516.63708496 -116.25968170]
[529.79479980 -123.46203613]
[542.95251465 -130.66439819]
[551.00628662 -144.94964600]
[567.40515137 -144.84690857]
[575.27929688 -130.46186829]
[566.52856445 -116.59261322]
[550.15490723 -117.50665283]
[536.99713135 -110.30429840]
[523.83941650 -103.10194397]
[510.68167114 -95.89958954]
[503.23263550 -83.00148010]
[487.41226196 -83.16225433]
[474.25451660 -75.95989990]
[461.09677124 -68.75754547]
[447.93905640 -61.55519104]
[446.23193359 -46.78279114]
[436.03295898 -35.71733093]
[421.09924316 -32.74444199]
[407.11691284 -39.20975113]
[393.95916748 -32.00739670]
[389.56445312 -25.98463058]
[380.41891479 -24.79473686]
[367.10064697 -17.89376068]
[363.11166382 -6.41680527]
[351.99972534 -0.57835281]
[339.51004028 -4.01686192]
[326.03814697 2.57915878]
[312.56622314 9.17517948]
[299.09429932 15.77120018]
[285.62237549 22.36722183]
[280.95809937 28.18372345]
[271.76788330 28.95612907]
[258.14932251 35.24377823]
[244.53074646 41.53142548]
[230.91218567 47.81907272]
[226.02188110 61.84121704]
[212.30027771 68.41178894]
[197.62571716 63.18731689]
[184.00715637 69.47496033]
[186.56503296 77.74075317]
[188.31170654 86.21514130]
[189.23078918 94.81870270]
[189.31367493 103.47082520]
[188.55958557 112.09042358]
[186.97560120 120.59671783]
[184.57653809 128.90998840]
[181.38490295 136.95234680]
[177.43060303 144.64842224]
[172.75067139 151.92608643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 28]
[20 27]
[21 26]
[36 54]
[37 53]
[38 52]
[39 51]
[61 127]
[62 126]
[65 123]
[66 122]
[67 121]
[68 120]
[69 118]
[70 117]
[71 116]
[72 115]
[73 114]
[75 111]
[76 110]
[77 108]
[78 107]
[82 103]
[83 102]
[84 101]
[85 100]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
