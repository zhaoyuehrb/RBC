%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCCUCGCAGGGGCUGCGCGCAGCGGCAAGAAGUGUCUGGGCUGGGACGGACAGGAGAGGCUGUCGCCAUCGGCGUCCUGUGCCCCUCUGCUCCGGCACGGCCCUGUCGCAGUGCCCGCGCUUUCCCCGGCGCCUGCACGCGGCGCGCCUGGGUAAC\
) } def
/len { sequence length } bind def

/coor [
[107.41366577 116.84259796]
[100.00485992 118.00862885]
[93.76153564 131.64756775]
[95.05284882 147.41600037]
[82.72023773 155.76800537]
[76.47691345 169.40695190]
[70.23358917 183.04589844]
[63.99026489 196.68484497]
[57.74694061 210.32379150]
[56.65206528 227.24235535]
[40.09159851 230.87377930]
[32.01768875 215.96578979]
[44.10799408 204.08047485]
[50.35131836 190.44151306]
[56.59464264 176.80256653]
[62.83796692 163.16362000]
[69.08129120 149.52467346]
[67.34341431 134.73181152]
[80.12258911 125.40425110]
[86.36591339 111.76529694]
[87.24349976 96.79099274]
[82.63608551 82.51612854]
[78.02867889 68.24126434]
[73.42127228 53.96639633]
[67.77960968 46.71675110]
[68.86617279 39.36785507]
[63.36703873 32.00951004]
[64.59677887 24.68321419]
[60.54982758 10.23945522]
[56.50287628 -4.20430374]
[52.45592499 -18.64806366]
[41.10193634 -22.37071419]
[33.05451584 -31.03975868]
[30.24317741 -42.40553284]
[33.25880051 -53.59438324]
[41.23393250 -61.83516312]
[37.75360107 -76.42581940]
[34.27326965 -91.01647949]
[23.54517174 -102.64482880]
[28.11831665 -116.82000732]
[17.39021873 -128.44834900]
[21.96336365 -142.62353516]
[18.48303223 -157.21418762]
[15.00270176 -171.80484009]
[11.52237129 -186.39550781]
[8.04203987 -200.98616028]
[4.56170845 -215.57681274]
[-9.61077499 -221.61393738]
[-17.41960335 -234.68588257]
[-16.05006409 -249.67214966]
[-6.23608541 -260.84460449]
[-9.71641636 -275.43527222]
[-13.19674778 -290.02593994]
[-16.67707825 -304.61657715]
[-29.85745621 -312.91812134]
[-33.17915726 -327.76470947]
[-25.18369102 -340.27902222]
[-28.66402054 -354.86965942]
[-32.14435196 -369.46032715]
[-35.62468338 -384.05099487]
[-46.35278320 -395.67932129]
[-41.77963638 -409.85452271]
[-45.25996780 -424.44515991]
[-48.74029922 -439.03582764]
[-66.67188263 -445.57287598]
[-77.01045227 -461.43847656]
[-75.76818848 -480.18505859]
[-63.62089539 -494.32147217]
[-67.94889832 -508.68350220]
[-72.27690125 -523.04553223]
[-76.60490417 -537.40759277]
[-86.96421814 -550.82849121]
[-76.93553925 -564.49822998]
[-61.02379608 -558.64569092]
[-62.24285889 -541.73559570]
[-57.91485596 -527.37353516]
[-53.58685303 -513.01153564]
[-49.25884628 -498.64947510]
[-38.13832855 -497.01165771]
[-28.39997292 -491.29562378]
[-21.48577118 -482.30297852]
[-18.43626213 -471.32366943]
[-19.73408890 -459.95104980]
[-25.22806168 -449.85061646]
[-34.14963913 -442.51614380]
[-30.66930962 -427.92550659]
[-27.18897820 -413.33483887]
[-16.70981789 -402.75012207]
[-21.03402519 -387.53131104]
[-17.55369377 -372.94067383]
[-14.07336330 -358.35000610]
[-10.59303188 -343.75933838]
[2.19029450 -336.20141602]
[5.92769480 -321.45401001]
[-2.08642101 -308.09692383]
[1.39391005 -293.50625610]
[4.87424135 -278.91558838]
[8.35457230 -264.32495117]
[22.15492630 -258.78524780]
[30.14152145 -246.03070068]
[29.07387733 -230.84144592]
[19.15236664 -219.05714417]
[22.63269806 -204.46649170]
[26.11302948 -189.87583923]
[29.59335899 -175.28517151]
[33.07369232 -160.69451904]
[36.55402374 -146.10386658]
[47.03318405 -135.51913452]
[42.70897293 -120.30033875]
[53.18813705 -109.71560669]
[48.86392593 -94.49681091]
[52.34425735 -79.90615082]
[55.82458878 -65.31549835]
[71.95175934 -56.73124695]
[76.81565857 -38.79138565]
[66.89968109 -22.69501495]
[70.94663239 -8.25125504]
[74.99358368 6.19250393]
[79.04053497 20.63626289]
[83.22821808 35.03985214]
[87.69613647 49.35898972]
[92.30354309 63.63385391]
[96.91094971 77.90872192]
[101.51836395 92.18358612]
[108.54324341 86.26046753]
[119.41989136 85.23475647]
[131.29074097 90.81085968]
[140.70198059 103.21364594]
[150.83283997 114.27555084]
[160.96369934 125.33745575]
[175.99014282 130.28884888]
[178.88008118 144.90040588]
[189.01092529 155.96231079]
[199.14178467 167.02421570]
[209.27264404 178.08612061]
[219.40350342 189.14802551]
[229.64179993 200.11056519]
[239.98655701 210.97268677]
[250.33131409 221.83482361]
[266.20764160 225.94270325]
[270.32693481 241.81605530]
[258.45159912 253.12574768]
[242.79800415 248.23731995]
[239.46919250 232.17958069]
[229.12443542 221.31745911]
[218.77966309 210.45532227]
[211.85443115 207.76684570]
[208.34158325 199.27888489]
[198.21073914 188.21697998]
[188.07987976 177.15505981]
[177.94902039 166.09315491]
[167.81816101 155.03125000]
[153.51634216 150.87109375]
[149.90179443 135.46830750]
[139.77093506 124.40641022]
[129.64007568 113.34450531]
[122.23126984 114.51053619]
[131.65962219 126.17699432]
[126.27023315 140.17536926]
[111.45257568 142.50711060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[21 124]
[22 123]
[23 122]
[24 121]
[26 120]
[28 119]
[29 118]
[30 117]
[31 116]
[36 113]
[37 112]
[38 111]
[40 109]
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[47 102]
[51 98]
[52 97]
[53 96]
[54 95]
[57 92]
[58 91]
[59 90]
[60 89]
[62 87]
[63 86]
[64 85]
[68 78]
[69 77]
[70 76]
[71 75]
[128 156]
[129 155]
[130 154]
[132 152]
[133 151]
[134 150]
[135 149]
[136 148]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
