%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGAUUCUCACCCACUCAACAAGGACACCAGGCACAGAGAUCCAAACUAUUAUAUCAAAUCCAGUCCCUAAA\
) } def
/len { sequence length } bind def

/coor [
[90.21453094 195.97064209]
[99.42972565 182.83824158]
[98.17456055 167.89085388]
[96.91938782 152.94346619]
[95.66422272 137.99606323]
[94.40905762 123.04867554]
[93.15388489 108.10128021]
[85.11648560 95.43636322]
[72.12610626 87.93636322]
[59.13572311 80.43636322]
[46.14534378 72.93636322]
[28.33034134 78.64548492]
[12.12571239 69.93744659]
[7.22430754 52.52935791]
[-6.34809828 46.14266968]
[-16.87933922 57.02254486]
[-30.37378883 63.89120865]
[-45.36767197 66.00359344]
[-60.23456573 63.13057709]
[-73.36181641 55.58378983]
[-83.32547760 44.18185425]
[-89.04477692 30.16156769]
[-89.89930725 15.04374790]
[-85.79639435 0.46826109]
[-77.18108368 -11.98385334]
[-64.98790741 -20.96188164]
[-50.53947449 -25.49195671]
[-35.40305328 -25.08268738]
[-21.22052765 -19.77847099]
[-9.53031445 -10.15466595]
[-1.60047674 2.74480677]
[1.70881402 17.52070999]
[0.03859126 32.57026291]
[13.61099720 38.95695496]
[23.56785774 32.71570969]
[35.42915726 32.18797302]
[46.11799240 37.63076782]
[52.80239487 47.73670959]
[53.64534378 59.94598007]
[66.63572693 67.44598389]
[79.62610626 74.94598389]
[92.61648560 82.44598389]
[89.49754333 67.77382660]
[89.98892975 52.78187561]
[94.06197357 38.34545135]
[101.47884369 25.30743027]
[111.80651855 14.42904949]
[124.44200134 6.34545088]
[138.64756775 1.52860105]
[153.59379578 0.25973499]
[168.40806580 2.61293650]
[182.22541809 8.45081234]
[194.23912048 17.43251419]
[203.74774170 29.03363800]
[210.19612122 42.57684326]
[213.20776367 57.27140045]
[212.60682678 72.25936127]
[208.42839050 86.66563416]
[200.91644287 99.64910126]
[190.50953674 110.45172119]
[177.81532288 118.44276428]
[163.57493591 123.15567017]
[148.61982727 124.31527710]
[133.82315063 121.85388184]
[120.04883575 115.91518402]
[108.10128021 106.84611511]
[109.35644531 121.79350281]
[110.61161804 136.74090576]
[111.86678314 151.68829346]
[113.12194824 166.63568115]
[114.37712097 181.58308411]
[125.65334320 192.99475098]
[123.61893463 208.90829468]
[109.83451843 217.11619568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 42]
[9 41]
[10 40]
[11 39]
[14 34]
[15 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
