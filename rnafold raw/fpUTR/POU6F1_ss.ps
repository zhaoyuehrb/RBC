%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCGUGGCCCCGGCCCCGGCCCCGGCCCCCUGGCCCGGGCUGUGAGAUGAAUCUCUAAUCGGUGGCCGCCAGACACCCGCGGCGAAGGCGGCUCGGGCUCGGGCUCCGGAUGUGCUAGGUGUGGGCCGGCCCCCACCCGACCCUGACAAGUGACC\
) } def
/len { sequence length } bind def

/coor [
[263.27215576 91.65427399]
[248.34262085 93.10643768]
[233.41308594 94.55860138]
[218.48353577 96.01076508]
[203.55400085 97.46292877]
[188.62445068 98.91509247]
[173.69491577 100.36725616]
[158.76538086 101.81941986]
[143.83583069 103.27158356]
[128.90629578 104.72374725]
[114.39822388 125.50643921]
[89.10845184 127.18936157]
[80.15107727 139.22120667]
[71.19369507 151.25306702]
[69.82833099 167.59527588]
[54.87959290 174.33821106]
[41.72545624 164.54531860]
[43.89776993 148.29067993]
[59.16184616 142.29568481]
[68.11922455 130.26383972]
[77.07660675 118.23198700]
[75.22129822 115.61740875]
[73.66286469 112.81571960]
[58.94403458 115.70639801]
[44.22520447 118.59708405]
[29.50637436 121.48777008]
[14.78754425 124.37844849]
[0.06871480 127.26913452]
[-11.98170471 137.52085876]
[-25.96148109 132.38130188]
[-40.68030930 135.27198792]
[-55.39913940 138.16267395]
[-70.11797333 141.05334473]
[-82.11117554 152.23794556]
[-97.71267700 147.18571472]
[-100.87299347 131.09396362]
[-88.34106445 120.51650238]
[-73.00865173 126.33451843]
[-58.28982544 123.44384003]
[-43.57099533 120.55315399]
[-28.85216522 117.66246796]
[-17.85453415 107.61750031]
[-2.82196903 112.55030823]
[11.89686012 109.65962219]
[26.61569023 106.76893616]
[41.33451843 103.87825775]
[56.05334854 100.98757172]
[70.77217865 98.09688568]
[71.25931549 94.35551453]
[72.22335052 90.70780182]
[59.69103241 82.46516418]
[47.15871429 74.22253418]
[34.62639618 65.97989655]
[18.23244667 65.56706238]
[10.63172626 51.03567505]
[19.64320564 37.33438873]
[35.99664688 38.55790710]
[42.86903000 53.44757843]
[55.40134811 61.69021225]
[67.93366241 69.93284607]
[80.46598053 78.17548370]
[90.20240784 72.39756012]
[101.40275574 70.74389648]
[112.39350891 73.46157074]
[121.53247070 80.14452362]
[127.45412445 89.79420471]
[142.38366699 88.34204102]
[157.31321716 86.88987732]
[172.24275208 85.43771362]
[187.17228699 83.98554993]
[202.10183716 82.53338623]
[217.03137207 81.08122253]
[231.96092224 79.62905884]
[246.89045715 78.17689514]
[261.82000732 76.72473907]
[276.51010132 73.69147491]
[290.79382324 69.11157990]
[305.07754517 64.53169250]
[305.12387085 56.33121109]
[307.55548096 48.26949692]
[312.29150391 41.04275513]
[319.04754639 35.31035614]
[327.35092163 31.63548470]
[336.57296753 30.43160439]
[345.97625732 31.91967773]
[351.91744995 18.14643478]
[350.27890015 2.41030717]
[362.42443848 -6.21149063]
[368.36563110 -19.98473167]
[365.92541504 -36.20130920]
[378.91619873 -46.20990753]
[393.97415161 -39.71453476]
[395.60897827 -23.39707947]
[382.13888550 -14.04353619]
[376.19769287 -0.27029437]
[378.26116943 14.48067951]
[365.69070435 24.08763313]
[359.74951172 37.86087418]
[367.74755859 50.55067062]
[382.73629761 51.13230133]
[397.72500610 51.71393204]
[412.71371460 52.29556274]
[427.70245361 52.87719345]
[435.29238892 44.99982452]
[445.75601196 42.67524719]
[455.55621338 46.44026184]
[461.51632690 54.81409454]
[476.47122192 55.97648239]
[491.42611694 57.13886642]
[503.37002563 47.13980865]
[518.51983643 48.53166962]
[527.97882080 59.97996521]
[542.93371582 61.14235306]
[557.88861084 62.30474091]
[572.84350586 63.46712494]
[581.69177246 61.00360489]
[588.07617188 64.79981232]
[602.56060791 58.43486404]
[614.47906494 67.36795807]
[629.40856934 68.82012177]
[644.33813477 70.27228546]
[657.59088135 61.23106003]
[672.87951660 66.09288788]
[678.47589111 81.12818146]
[670.08691406 94.80316162]
[654.14794922 96.62754822]
[642.88598633 85.20182800]
[627.95642090 83.74966431]
[613.02685547 82.29750061]
[599.61035156 88.76631927]
[586.62402344 79.72935486]
[571.68109131 78.42201996]
[556.72619629 77.25963593]
[541.77130127 76.09724426]
[526.81640625 74.93486023]
[515.70208740 84.78407288]
[500.51913452 83.81828308]
[490.26373291 72.09375763]
[475.30883789 70.93137360]
[460.35394287 69.76898956]
[443.61730957 79.39527893]
[427.12081909 67.86591339]
[412.13211060 67.28427887]
[397.14337158 66.70265198]
[382.15466309 66.12101746]
[367.16592407 65.53939056]
[353.35540771 88.35450745]
[328.60513306 93.11843872]
[309.65744019 78.81540680]
[295.37371826 83.39530182]
[281.08999634 87.97518921]
[295.31124878 92.74549866]
[305.77285767 103.49514008]
[310.15527344 117.84068298]
[307.48678589 132.60140991]
[298.35906982 144.50456238]
[284.79592896 150.91094971]
[269.80465698 150.40013123]
[256.70904541 143.08537292]
[248.41276550 130.58850098]
[246.75521851 115.68036652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[12 21]
[13 20]
[14 19]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[30 41]
[31 40]
[32 39]
[33 38]
[50 61]
[51 60]
[52 59]
[53 58]
[76 151]
[77 150]
[78 149]
[85 98]
[86 97]
[88 95]
[89 94]
[99 146]
[100 145]
[101 144]
[102 143]
[103 142]
[107 140]
[108 139]
[109 138]
[112 135]
[113 134]
[114 133]
[115 132]
[117 131]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
