%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUCCGGGCCGGCGUAGCUAUUUCAAGGCGCGCGCCUCGUGGUGGACUCACCGCUAGCCCGCAGCGCUCGGCUUCCUGGUAAUUCUUCACCUCUUUUCUCAGCUCCCUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[173.83053589 190.66072083]
[158.85760498 191.56158447]
[145.11358643 185.55311584]
[135.60681152 173.95046997]
[132.41818237 159.29328918]
[136.24565125 144.78982544]
[146.25143433 133.61465454]
[160.24653625 128.21371460]
[146.03173828 123.42418671]
[131.81694031 118.63465881]
[117.60214233 113.84513855]
[98.48488617 122.34339905]
[80.68990326 111.34210968]
[65.95864868 114.16878510]
[51.22739410 116.99546814]
[36.49613953 119.82214355]
[21.76488304 122.64882660]
[8.20596027 135.01651001]
[-8.13723564 128.78218079]
[-22.78654480 132.00672913]
[-37.43585205 135.23129272]
[-44.51649857 149.17398071]
[-58.92295837 155.25573730]
[-73.85294342 150.60498047]
[-82.25696564 137.41761780]
[-80.16690826 121.92034149]
[-68.56963348 111.43048096]
[-52.94101334 110.90103149]
[-40.66040802 120.58197784]
[-26.01110077 117.35742188]
[-11.36179256 114.13286591]
[-4.51876974 104.05702972]
[7.76012373 101.30971527]
[18.93820381 107.91757202]
[33.66946030 105.09088898]
[48.40071487 102.26421356]
[63.13196945 99.43753052]
[77.86322784 96.61084747]
[78.88371277 92.54174042]
[80.64520264 88.73434448]
[83.08587646 85.32228088]
[75.70345306 72.26472473]
[68.32102203 59.20716476]
[60.93860245 46.14960480]
[53.55617523 33.09204865]
[46.17375183 20.03449059]
[31.77920341 12.17770863]
[31.65665817 -4.22098064]
[45.93217850 -12.29201221]
[59.92033386 -3.73259974]
[59.23130798 12.65206623]
[66.61373138 25.70962334]
[73.99615479 38.76718140]
[81.37858582 51.82473755]
[88.76100922 64.88229370]
[96.14343262 77.93985748]
[108.77688599 79.39685822]
[118.58004761 87.49779510]
[122.39166260 99.63034058]
[136.60646057 104.41986084]
[150.82125854 109.20938873]
[165.03605652 113.99890900]
[179.80422974 116.62585449]
[194.79873657 117.03204346]
[209.79322815 117.43824005]
[224.78773499 117.84442902]
[241.91546631 107.38336945]
[258.05438232 117.88964844]
[273.04888916 117.48345947]
[288.04339600 117.07726288]
[301.62896729 108.96910095]
[314.56109619 116.35891724]
[329.55560303 115.95272827]
[335.04260254 101.80464172]
[345.50015259 90.86465454]
[359.31210327 84.77834320]
[374.36123657 84.44466400]
[388.35357666 89.88332367]
[399.16821289 100.23654175]
[405.17868042 113.90415192]
[420.17318726 113.49796295]
[435.16769409 113.09176636]
[443.83374023 100.22011566]
[458.42196655 94.93214417]
[473.32293701 99.26117706]
[482.80691528 111.54262543]
[483.22711182 127.05400848]
[474.42196655 139.83088684]
[459.77719116 144.96029663]
[444.92407227 140.46986389]
[435.57388306 128.08627319]
[420.57937622 128.49246216]
[405.58486938 128.89865112]
[400.32318115 142.87161255]
[390.08489990 153.79513550]
[376.40753174 159.98335266]
[361.36239624 160.46490479]
[347.24118042 155.13528442]
[336.20672607 144.77751160]
[329.96179199 130.94723511]
[314.96728516 131.35342407]
[302.45422363 139.43252563]
[288.44958496 132.07176208]
[273.45507812 132.47795105]
[258.46057129 132.88414001]
[252.01051331 141.01791382]
[241.91546631 144.25737000]
[231.51147461 141.27380371]
[224.38154602 132.83892822]
[209.38703918 132.43273926]
[194.39254761 132.02655029]
[179.39804077 131.62036133]
[190.67152405 141.51524353]
[196.21031189 155.45516968]
[194.80206299 170.38891602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 62]
[9 61]
[10 60]
[11 59]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[19 31]
[20 30]
[21 29]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[63 112]
[64 111]
[65 110]
[66 109]
[68 105]
[69 104]
[70 103]
[72 101]
[73 100]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
