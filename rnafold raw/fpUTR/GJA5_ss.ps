%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAACAACUGACAGGCUCAAGAGCAAAAAGCGUGGGCAGUUGGAGAAGAAGCAGCCAGAGUGUGAAGAAGCCCACGGAAGGAAAGUCCAGGGAGGAGGAAAAGAAGCAGAAGUUUUGGCAUCUGUUCCCUGGCUGUGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[-18.01869774 230.05259705]
[-27.83251762 235.62101746]
[-38.74291229 238.43685913]
[-49.99449539 238.31356812]
[-60.81045151 235.26782227]
[-70.44615173 229.51774597]
[-78.24044800 221.46739197]
[-91.64223480 228.20475769]
[-105.04402161 234.94212341]
[-118.44581604 241.67948914]
[-131.84759521 248.41685486]
[-145.24938965 255.15422058]
[-154.95707703 270.76126099]
[-172.40036011 269.15176392]
[-185.65303040 276.17788696]
[-194.22143555 289.47799683]
[-209.09034729 288.60354614]
[-222.34303284 295.62969971]
[-235.59571838 302.65582275]
[-235.46817017 317.96078491]
[-242.47810364 331.56665039]
[-255.01472473 340.34683228]
[-270.19717407 342.28378296]
[-284.53665161 336.93234253]
[-294.73803711 325.52224731]
[-298.45715332 310.67547607]
[-294.83935547 295.80368042]
[-284.71600342 284.32431030]
[-270.41333008 278.87524414]
[-255.21801758 280.70858765]
[-242.62184143 289.40313721]
[-229.36915588 282.37701416]
[-216.11648560 275.35089111]
[-208.49600220 262.55331421]
[-192.67916870 262.92520142]
[-179.42648315 255.89907837]
[-175.55018616 244.39149475]
[-164.50393677 238.44590759]
[-151.98675537 241.75242615]
[-138.58496094 235.01506042]
[-125.18317413 228.27769470]
[-111.78138733 221.54032898]
[-98.37960052 214.80296326]
[-84.97781372 208.06559753]
[-86.32002258 189.19779968]
[-79.35613251 171.55885315]
[-65.41587830 158.63076782]
[-47.21053696 152.98504639]
[-28.30569839 155.77122498]
[-12.42291546 166.48312378]
[-9.56068516 151.91111755]
[3.09616613 143.46961975]
[18.36121559 146.57060242]
[30.95600319 138.42373657]
[43.55079269 130.27688599]
[56.14558029 122.13002014]
[68.74037170 113.98316193]
[81.33515930 105.83630371]
[66.35433197 106.59449768]
[55.69039917 96.04553223]
[56.28616714 81.05736542]
[67.75375366 71.38811493]
[82.62713623 73.33298492]
[91.22283936 85.62532806]
[89.92449951 70.68161774]
[88.62615967 55.73791504]
[75.26131439 47.85371780]
[69.11403656 33.60623932]
[72.54808807 18.47392464]
[84.24300385 8.27545929]
[99.70183563 6.93236065]
[112.98036957 14.96107769]
[118.97272491 29.27440453]
[115.37471771 44.36857605]
[103.56986237 54.43957138]
[104.86820221 69.38327789]
[106.16654968 84.32698059]
[120.84992981 87.39265442]
[128.01921082 74.21686554]
[135.18849182 61.04107666]
[129.30241394 46.55355835]
[134.15498352 31.68794250]
[147.45495605 23.46331406]
[162.92251587 25.76309395]
[173.25431824 37.50139236]
[173.57202148 53.13574982]
[163.72561646 65.28409576]
[148.36427307 68.21035767]
[141.19499207 81.38614655]
[134.02571106 94.56193542]
[140.90786743 107.88995361]
[155.80149841 109.67317963]
[170.69511414 111.45641327]
[185.58874512 113.23963928]
[200.48237610 115.02287292]
[215.37599182 116.80610657]
[229.99812317 110.76426697]
[241.71531677 119.95973969]
[256.60894775 121.74297333]
[271.50256348 123.52619934]
[280.75271606 111.34497833]
[294.76553345 105.46813965]
[309.73901367 107.38162231]
[321.66448975 116.47220612]
[327.39993286 130.21885681]
[342.29357910 132.00209045]
[357.18719482 133.78532410]
[372.08081055 135.56854248]
[386.97445679 137.35177612]
[401.82946777 130.40480042]
[415.11645508 140.01667786]
[413.16687012 156.29953003]
[397.98632812 162.50296021]
[385.19122314 152.24540710]
[370.29757690 150.46217346]
[355.40396118 148.67893982]
[340.51034546 146.89570618]
[325.61669922 145.11248779]
[316.79809570 157.11656189]
[303.06362915 163.13485718]
[288.06164551 161.45933533]
[275.83230591 152.44049072]
[269.71932983 138.41983032]
[254.82571411 136.63659668]
[239.93208313 134.85336304]
[226.37524414 141.02275085]
[213.59275818 131.69972229]
[198.69914246 129.91650391]
[183.80551147 128.13327026]
[168.91188049 126.35003662]
[154.01826477 124.56680298]
[139.12463379 122.78357697]
[89.48201752 118.43109131]
[76.88722992 126.57794952]
[64.29244232 134.72480774]
[51.69765091 142.87167358]
[39.10286331 151.01852417]
[26.50807381 159.16539001]
[23.07720947 174.35969543]
[10.18824863 182.44235229]
[-4.27605677 179.07791138]
[-1.32246578 190.04905701]
[-1.32875061 201.39518738]
[-4.28632641 212.33287048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[14 36]
[15 35]
[17 33]
[18 32]
[19 31]
[50 141]
[53 138]
[54 137]
[55 136]
[56 135]
[57 134]
[58 133]
[64 77]
[65 76]
[66 75]
[78 90]
[79 89]
[80 88]
[91 132]
[92 131]
[93 130]
[94 129]
[95 128]
[96 127]
[98 125]
[99 124]
[100 123]
[105 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
