%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUUCGAAUACCAGGGCAGGCCGAGCCAGCCGUGCGCCGCGCUCCAGGGCCCAGGGCGCCGCACACGCACCCACCCACCCACCCAGCCUCGCAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[91.83682251 155.37240601]
[97.56199646 169.23683167]
[98.34181213 184.21653748]
[94.08718872 198.60049438]
[85.28411102 210.74569702]
[72.93810272 219.26486206]
[58.45938492 223.18489075]
[43.50177383 222.05801392]
[29.77379227 216.01296997]
[18.84351540 205.74024963]
[11.95944500 192.41322327]
[9.90791035 177.55416870]
[12.92324734 162.86036682]
[20.66102982 150.01020813]
[32.23847961 140.47087097]
[18.56030464 148.42185974]
[5.71424294 140.88342285]
[-9.28394318 141.11669922]
[-24.28212929 141.34997559]
[-37.96030426 149.30096436]
[-50.80636597 141.76252747]
[-65.80455017 141.99580383]
[-80.80273438 142.22908020]
[-96.54592133 148.52101135]
[-106.95011139 135.13485718]
[-96.96726227 121.43161011]
[-81.03601074 127.23089600]
[-66.03782654 126.99761963]
[-51.03964233 126.76434326]
[-38.43423843 118.83004761]
[-24.51540565 126.35179138]
[-9.51722050 126.11851501]
[5.48096609 125.88523865]
[18.08637047 117.95094299]
[32.00520325 125.47268677]
[46.48397827 121.55285645]
[59.55142212 114.18795013]
[72.61886597 106.82303619]
[85.68630981 99.45812225]
[92.96702576 87.52150726]
[106.94878387 87.47443390]
[120.01622772 80.10951996]
[132.72595215 72.14315033]
[145.05027771 63.59267044]
[157.37461853 55.04218674]
[157.47598267 38.21317291]
[167.43679810 24.85354424]
[183.22099304 20.04914093]
[198.62451172 25.48380852]
[210.67695618 16.55417633]
[222.72941589 7.62454319]
[220.66098022 -8.69503689]
[227.02046204 -23.76501083]
[240.00616455 -33.55661392]
[256.05886841 -35.50325012]
[270.83706665 -29.17268562]
[282.60598755 -38.47282791]
[294.37490845 -47.77297211]
[300.40524292 -62.39985275]
[315.18817139 -64.22023773]
[326.95709229 -73.52038574]
[327.23553467 -89.15548706]
[337.53781128 -100.91970825]
[352.99954224 -103.25833130]
[366.32012939 -95.06714630]
[371.21005249 -80.21376038]
[365.36038208 -65.71150970]
[351.53320312 -58.40789413]
[336.25723267 -61.75146866]
[324.48834229 -52.45132828]
[319.29977417 -38.48965454]
[303.67504883 -36.00405884]
[291.90612793 -26.70391464]
[280.13720703 -17.40377045]
[283.00186157 -3.95412421]
[279.73953247 9.47309494]
[270.93865967 20.21182442]
[258.29318237 26.10416985]
[244.27682495 25.93389511]
[231.65905762 19.67699814]
[219.60659790 28.60663033]
[207.55413818 37.53626251]
[208.90660095 50.91637802]
[203.38563538 63.29840088]
[192.35289001 71.36293030]
[178.66293335 72.88939667]
[165.92509460 67.36652374]
[153.60076904 75.91700745]
[141.27642822 84.46749115]
[140.32379150 88.03785706]
[137.48609924 91.27856445]
[132.96154785 93.25688934]
[127.38113403 93.17696381]
[114.31369019 100.54187775]
[107.03297424 112.47849274]
[93.05121613 112.52556610]
[79.98377228 119.89048004]
[66.91633606 127.25539398]
[53.84888840 134.62030029]
[68.65637970 137.01574707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 35]
[17 33]
[18 32]
[19 31]
[21 29]
[22 28]
[23 27]
[36 99]
[37 98]
[38 97]
[39 96]
[41 94]
[42 93]
[43 89]
[44 88]
[45 87]
[49 82]
[50 81]
[51 80]
[56 74]
[57 73]
[58 72]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
