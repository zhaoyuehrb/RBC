%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUCUUUGCAGCCUCGCUACGGGGCGGAGUCUUGCCUGUCAGCAGGGGCAGAGUAGCGAUCGUCGCCAAAGCGCGCGGUUUUAUUUCUCUCCGCUUUGGACGGGGCAAACUAGCUUUUGGGAGUGAAGCGGGUACGCAGUUAUCCAACA\
) } def
/len { sequence length } bind def

/coor [
[340.96920776 440.13308716]
[331.75604248 428.29598999]
[322.54284668 416.45889282]
[313.32965088 404.62176514]
[306.69747925 401.25381470]
[304.05139160 392.44348145]
[295.08480835 380.41848755]
[280.46359253 383.36569214]
[265.95306396 379.65710449]
[254.44451904 369.97650146]
[248.25512695 356.20291138]
[248.66134644 341.04632568]
[255.63618469 327.51440430]
[246.66960144 315.48941040]
[237.70300293 303.46441650]
[228.73641968 291.43942261]
[219.76983643 279.41445923]
[210.80325317 267.38946533]
[197.88154602 267.32510376]
[187.20849609 259.70034790]
[182.83015442 247.12915039]
[186.56509399 234.14903259]
[177.84893799 221.94129944]
[169.13279724 209.73356628]
[160.41664124 197.52583313]
[151.70048523 185.31811523]
[142.98432922 173.11038208]
[134.26818848 160.90264893]
[125.55203247 148.69491577]
[116.83587646 136.48718262]
[108.11972809 124.27945709]
[95.10633087 126.91612244]
[81.63865662 122.59334564]
[71.39910889 111.61582184]
[67.59642029 96.19800568]
[52.98242188 92.81702423]
[38.36842346 89.43604279]
[23.75442314 86.05506897]
[9.14042377 82.67408752]
[-2.48639297 92.95011902]
[-17.93595695 94.39601135]
[-31.26759529 86.45579529]
[-37.35501862 72.18264008]
[-33.85749435 57.06487274]
[-22.11988640 46.91557693]
[-6.65554619 45.63736725]
[6.58917141 53.72174072]
[12.52140236 68.06008911]
[27.13540268 71.44107056]
[41.74940109 74.82204437]
[56.36339951 78.20302582]
[70.97740173 81.58399963]
[81.58399963 70.97740173]
[78.20302582 56.36339951]
[74.82204437 41.74940109]
[71.44107056 27.13540268]
[68.06008911 12.52140236]
[64.67910767 -2.09259748]
[59.66625595 -9.80589199]
[61.38257980 -17.04350471]
[58.30435181 -31.72425652]
[55.22612000 -46.40501022]
[52.14789200 -61.08576202]
[49.06966019 -75.76651764]
[45.99143219 -90.44726562]
[42.76165390 -105.09542847]
[39.38067627 -119.70942688]
[35.99969864 -134.32342529]
[24.42053604 -145.93614197]
[28.94853401 -161.69776917]
[44.92567825 -165.39411926]
[55.91604996 -153.22268677]
[50.61369705 -137.70440674]
[53.99467468 -123.09040070]
[57.37565231 -108.47640228]
[61.97650909 -102.63166809]
[60.67218399 -93.52549744]
[63.75041199 -78.84474182]
[66.82864380 -64.16399384]
[69.90687561 -49.48323822]
[72.98510742 -34.80248642]
[76.06333160 -20.12173462]
[79.29311371 -5.47357559]
[82.67408752 9.14042377]
[86.05506897 23.75442314]
[89.43604279 38.36842346]
[92.81702423 52.98242188]
[96.19800568 67.59642029]
[118.65246582 76.14156342]
[127.71803284 96.46323395]
[120.32745361 115.56330109]
[129.04360962 127.77103424]
[137.75976562 139.97875977]
[146.47590637 152.18649292]
[155.19206238 164.39422607]
[163.90821838 176.60195923]
[172.62437439 188.80969238]
[181.34051514 201.01741028]
[190.05667114 213.22514343]
[198.77282715 225.43287659]
[216.05015564 227.97380066]
[225.97497559 241.93109131]
[222.82823181 258.42288208]
[231.79483032 270.44787598]
[240.76141357 282.47283936]
[249.72799683 294.49783325]
[258.69458008 306.52282715]
[267.66116333 318.54782104]
[282.62072754 315.72409058]
[297.26312256 319.65945435]
[308.69802856 329.52166748]
[314.69241333 343.31399536]
[314.10641479 358.27947998]
[307.10980225 371.45190430]
[316.07638550 383.47689819]
[325.16674805 395.40859985]
[334.37994385 407.24569702]
[343.59313965 419.08279419]
[352.80633545 430.91992188]
[372.79321289 432.27178955]
[385.23141479 447.58721924]
[382.53820801 466.82696533]
[392.46719360 478.07043457]
[402.39617920 489.31387329]
[417.07144165 485.26446533]
[431.98880005 487.97723389]
[444.19906616 496.86145020]
[451.31195068 510.11166382]
[451.96377563 525.07446289]
[446.07882690 538.77966309]
[456.00781250 550.02313232]
[465.93679810 561.26654053]
[481.64739990 565.96856689]
[485.16687012 581.98559570]
[472.87463379 592.84069824]
[457.41592407 587.36712646]
[454.69332886 571.19555664]
[444.76434326 559.95208740]
[434.83538818 548.70861816]
[420.50747681 552.85314941]
[405.74026489 550.35552979]
[393.47158813 541.65832520]
[386.16592407 528.44293213]
[385.31915283 513.30456543]
[391.15270996 499.24285889]
[381.22372437 487.99938965]
[371.29473877 476.75592041]
[361.14910889 478.91748047]
[350.94970703 476.62231445]
[342.57910156 470.22460938]
[337.61123657 460.84194946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[4 116]
[6 115]
[7 114]
[13 108]
[14 107]
[15 106]
[16 105]
[17 104]
[18 103]
[22 100]
[23 99]
[24 98]
[25 97]
[26 96]
[27 95]
[28 94]
[29 93]
[30 92]
[31 91]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 75]
[67 74]
[68 73]
[122 147]
[123 146]
[124 145]
[130 139]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
