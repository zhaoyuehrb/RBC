%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCACGCGCCGGCCCCGUUGCCCCCGCGCGCGCGCACACUCGCGAGCCCCGGCGACAUGCAAAUGAGCUGGCUCCAGUGCCCAGACCCAAGCCCCCCACUGCUCA\
) } def
/len { sequence length } bind def

/coor [
[97.64345551 175.31143188]
[83.21132660 171.22322083]
[72.14288330 161.09950256]
[66.78668976 147.08839417]
[68.27924347 132.16284180]
[76.30385590 119.48980713]
[89.15762329 111.75839233]
[75.56301117 118.09766388]
[61.96839142 124.43694305]
[48.37377548 130.77621460]
[34.77915955 137.11549377]
[24.16047859 154.12829590]
[5.03454971 151.99948120]
[-8.16847134 159.11848450]
[-21.37149239 166.23750305]
[-25.66353989 181.44781494]
[-39.49441528 189.09519958]
[-54.65851212 184.64257812]
[-62.15923309 170.73161316]
[-57.54653549 155.61544800]
[-43.55705261 148.26222229]
[-28.49049759 153.03446960]
[-15.28747654 145.91546631]
[-2.08445597 138.79646301]
[0.01782856 128.60345459]
[7.60079193 121.15525055]
[18.26525307 119.15402985]
[28.43988419 123.52087402]
[42.03450012 117.18159485]
[55.62911987 110.84232330]
[69.22373199 104.50305176]
[82.81835175 98.16377258]
[79.32957458 96.33593750]
[76.02841949 94.02158356]
[64.82304382 84.04964447]
[53.61766815 74.07770538]
[37.85667419 75.24673462]
[25.94005203 64.86551666]
[24.93772125 49.09304810]
[35.44434738 37.28684616]
[51.22653580 36.45132828]
[62.92099380 47.08219147]
[63.58960724 62.87232971]
[74.79498291 72.84426880]
[86.00035858 82.81620789]
[100.64479828 79.56961060]
[106.58599091 65.79637146]
[112.52719116 52.02312851]
[118.46838379 38.24988556]
[124.40958405 24.47664452]
[124.00678253 17.62412453]
[126.80254364 12.45115280]
[131.11761475 10.09123707]
[137.84959412 -3.31325269]
[144.58158875 -16.71774292]
[141.26722717 -29.28750801]
[147.27220154 -40.36050034]
[158.85032654 -44.18537903]
[165.96932983 -57.38840103]
[173.08833313 -70.59142303]
[172.07077026 -86.95896912]
[185.88441467 -95.79726410]
[200.31896973 -88.01422119]
[200.52540588 -71.61637115]
[186.29135132 -63.47241592]
[179.17234802 -50.26939392]
[172.05334473 -37.06637573]
[173.57527161 -19.65031433]
[157.98606873 -9.98575497]
[151.25408936 3.41873503]
[144.52209473 16.82322502]
[138.18283081 30.41784096]
[132.24162292 44.19108200]
[126.30043030 57.96432495]
[120.35923767 71.73756409]
[114.41803741 85.51081085]
[119.13620758 99.74945068]
[132.12658691 107.24945068]
[145.11697388 114.74945068]
[158.10736084 122.24945068]
[171.09773254 129.74945068]
[182.50244141 119.78896332]
[196.52432251 114.07357025]
[211.64237976 113.22325134]
[226.21672058 117.33022308]
[238.66644287 125.94900513]
[247.64106750 138.14468384]
[252.16711426 152.59437561]
[251.75363159 167.73068237]
[246.44546509 181.91172791]
[236.81840515 193.59925842]
[223.91671753 201.52551270]
[209.13989258 204.83067322]
[194.09080505 203.15626526]
[180.40187073 196.68388367]
[169.55795288 186.11561584]
[162.73532104 172.59783936]
[160.67405701 157.59684753]
[163.59773254 142.73982239]
[150.60736084 135.23982239]
[137.61697388 127.73983002]
[124.62659454 120.23983002]
[111.63620758 112.73983002]
[123.76736450 121.56225586]
[130.65682983 134.88648987]
[130.84275818 149.88533020]
[124.28572083 163.37626648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[13 24]
[14 23]
[15 22]
[34 45]
[35 44]
[36 43]
[46 76]
[47 75]
[48 74]
[49 73]
[50 72]
[53 71]
[54 70]
[55 69]
[58 67]
[59 66]
[60 65]
[77 103]
[78 102]
[79 101]
[80 100]
[81 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
