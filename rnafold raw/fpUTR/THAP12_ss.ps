%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCCCGCGCGUCGGCCCUGCCGAGCCGGCCGGCCGGCCUGGCUCCCCUCCCCGGCCCCGACGGGCGGGCGGACUGCCCUGAGGAGGCGGGGAGGGGAGGGCUGGGCCGGCCGGCGGGCGGGCGACG\
) } def
/len { sequence length } bind def

/coor [
[102.82126617 248.24130249]
[99.46238708 232.55380249]
[109.74415588 220.23858643]
[109.74415588 205.23858643]
[102.00685120 192.51130676]
[109.74415588 178.71113586]
[109.74415588 163.71113586]
[109.74415588 148.71113586]
[109.74415588 133.71113586]
[109.74415588 118.71113586]
[96.37905884 111.90127563]
[84.24380493 120.71805573]
[79.07356262 128.37411499]
[71.70709229 129.59706116]
[59.36233521 138.11804199]
[47.01757812 146.63900757]
[34.67282104 155.15998840]
[22.32806206 163.68095398]
[12.72742462 177.65464783]
[-3.35789204 172.29750061]
[-2.66297150 155.35780334]
[13.80709171 151.33619690]
[26.15184975 142.81523132]
[38.49660873 134.29425049]
[50.84136581 125.77328491]
[63.18612289 117.25231171]
[75.42702484 108.58280182]
[87.56227875 99.76602173]
[97.09568024 88.18524933]
[95.89432526 72.40972137]
[108.27437592 64.12819672]
[114.59539032 50.52507782]
[120.91640472 36.92196274]
[127.23742676 23.31884766]
[133.55844116 9.71573257]
[139.87945557 -3.88738298]
[146.20046997 -17.49049759]
[152.52148438 -31.09361458]
[158.84251404 -44.69672775]
[165.16352844 -58.29984283]
[171.48454285 -71.90296173]
[177.80555725 -85.50607300]
[184.12657166 -99.10919189]
[190.44758606 -112.71230316]
[196.76860046 -126.31542206]
[202.75907898 -140.06730652]
[208.41549683 -153.95993042]
[214.07191467 -167.85253906]
[219.72834778 -181.74516296]
[225.38476562 -195.63778687]
[231.04118347 -209.53041077]
[236.69761658 -223.42301941]
[242.35403442 -237.31564331]
[248.01045227 -251.20826721]
[253.66688538 -265.10089111]
[259.32330322 -278.99349976]
[259.67559814 -288.22509766]
[265.28790283 -293.15081787]
[271.27838135 -306.90267944]
[277.10223389 -320.72595215]
[282.75866699 -334.61856079]
[274.74246216 -347.77328491]
[275.99462891 -362.94845581]
[285.82611084 -374.34170532]
[300.30783081 -377.72070312]
[305.96426392 -391.61331177]
[311.62066650 -405.50592041]
[317.27709961 -419.39855957]
[322.93353271 -433.29116821]
[328.58993530 -447.18377686]
[323.71124268 -462.46704102]
[332.73782349 -475.72979736]
[348.74526978 -476.79797363]
[359.45404053 -464.85220337]
[356.64929199 -449.05621338]
[342.48257446 -441.52737427]
[336.82614136 -427.63473511]
[331.16970825 -413.74212646]
[325.51330566 -399.84951782]
[319.85687256 -385.95687866]
[314.20043945 -372.06427002]
[322.20330811 -359.53060913]
[321.28036499 -344.51022339]
[311.57638550 -332.77624512]
[296.65130615 -328.96215820]
[290.99487305 -315.06951904]
[291.39028931 -307.61270142]
[285.03027344 -300.91223145]
[279.03979492 -287.16033936]
[273.21591187 -273.33706665]
[267.55950928 -259.44445801]
[261.90307617 -245.55183411]
[256.24664307 -231.65922546]
[250.59022522 -217.76660156]
[244.93380737 -203.87397766]
[239.27738953 -189.98135376]
[233.62095642 -176.08874512]
[227.96453857 -162.19612122]
[222.30812073 -148.30349731]
[216.65170288 -134.41088867]
[217.69226074 -129.65484619]
[215.68338013 -124.20176697]
[210.37171936 -119.99440765]
[204.05070496 -106.39128876]
[197.72969055 -92.78817749]
[191.40867615 -79.18505859]
[185.08766174 -65.58194733]
[178.76663208 -51.97882843]
[172.44561768 -38.37571335]
[166.12460327 -24.77259636]
[159.80358887 -11.16948223]
[153.48257446 2.43363357]
[147.16156006 16.03674889]
[140.84054565 29.63986397]
[134.51951599 43.24298096]
[128.19850159 56.84609604]
[121.87748718 70.44921112]
[123.53096008 85.25175476]
[110.69879150 94.50627136]
[124.74415588 118.71113586]
[124.74415588 133.71113586]
[124.74415588 148.71113586]
[124.74415588 163.71113586]
[124.74415588 178.71113586]
[132.48146057 192.51130676]
[124.74415588 205.23858643]
[124.74415588 220.23858643]
[135.02592468 232.55380249]
[131.66703796 248.24130249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[6 124]
[7 123]
[8 122]
[9 121]
[10 120]
[11 28]
[12 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[29 119]
[31 117]
[32 116]
[33 115]
[34 114]
[35 113]
[36 112]
[37 111]
[38 110]
[39 109]
[40 108]
[41 107]
[42 106]
[43 105]
[44 104]
[45 103]
[46 100]
[47 99]
[48 98]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[54 92]
[55 91]
[56 90]
[58 89]
[59 88]
[60 86]
[61 85]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
