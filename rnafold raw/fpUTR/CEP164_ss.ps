%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCGCGCUGCAGGGCAACACCCCGGCGUCCCUGGAAGCUGGGGGAGCGGGAGAAAUAACUUUAUUUGGACUGAGAGCUGGAGAAUGAGAAUAGGACCUGAGAGUAUAUUGGGCUAAGGAGGAGAGGUGUUUGAGCCCAGAUGAGUC\
) } def
/len { sequence length } bind def

/coor [
[103.08673859 286.24255371]
[97.93021393 272.15661621]
[93.53787231 286.49911499]
[89.14553070 300.84164429]
[95.37043762 315.62777710]
[87.56512451 329.64407349]
[71.71717072 332.13842773]
[59.98375702 321.19738770]
[61.36576080 305.21395874]
[74.80302429 296.44927979]
[79.19536591 282.10678101]
[83.58770752 267.76428223]
[86.27948761 253.00778198]
[87.23405457 238.03819275]
[88.18862915 223.06858826]
[89.14319611 208.09899902]
[89.62071991 193.10659790]
[89.62071991 178.10659790]
[89.62071991 163.10659790]
[89.62071991 148.10659790]
[89.62071991 133.10659790]
[89.62071991 118.10660553]
[79.01412201 107.50000000]
[64.01412201 107.50000000]
[50.21394730 115.23729706]
[37.48667526 107.50000000]
[22.48667526 107.50000000]
[8.68650246 115.23729706]
[-4.04077005 107.50000000]
[-19.04076958 107.50000000]
[-34.04077148 107.50000000]
[-49.04077148 107.50000000]
[-64.04077148 107.50000000]
[-79.04077148 107.50000000]
[-94.04077148 107.50000000]
[-109.87990570 113.54634094]
[-120.07465363 100.00000000]
[-109.87990570 86.45365906]
[-94.04077148 92.50000000]
[-79.04077148 92.50000000]
[-64.04077148 92.50000000]
[-49.04077148 92.50000000]
[-34.04077148 92.50000000]
[-19.04076958 92.50000000]
[-4.04077005 92.50000000]
[8.68650246 84.76270294]
[22.48667526 92.50000000]
[37.48667526 92.50000000]
[50.21394730 84.76270294]
[64.01412201 92.50000000]
[79.01412201 92.50000000]
[65.85037994 85.30861664]
[51.24758530 81.87956238]
[41.28047562 70.66989136]
[39.58272171 55.76628113]
[46.77327347 42.60208511]
[60.23069000 35.97653580]
[75.04885101 38.30508423]
[85.82554626 48.73881912]
[88.63191223 63.47428894]
[95.25813293 76.93137360]
[95.89475250 61.94488907]
[96.53136444 46.95840836]
[97.16798401 31.97192192]
[97.80460358 16.98543739]
[98.44122314 1.99895298]
[99.07784271 -12.98753166]
[88.85917664 -21.82557678]
[85.66494751 -34.75218964]
[90.44890594 -46.96934128]
[101.24572754 -54.07528687]
[89.21253967 -63.87232971]
[85.26859283 -78.87982941]
[90.93041992 -93.32708740]
[104.02092743 -101.65884399]
[119.50655365 -100.67137146]
[131.43275452 -90.74436951]
[135.21365356 -75.69496918]
[129.39544678 -61.30998230]
[116.21531677 -53.12071991]
[127.84893799 -41.01919556]
[127.15042877 -23.91006088]
[114.06432343 -12.35091305]
[113.42770386 2.63557100]
[112.79108429 17.62205505]
[112.15447235 32.60853958]
[111.51785278 47.59502411]
[110.88123322 62.58150864]
[110.24461365 77.56799316]
[116.12956238 82.21744537]
[125.42866516 70.44770813]
[137.19824219 79.74700928]
[127.89945221 91.51634979]
[133.78439331 96.16580963]
[148.21690369 92.07888031]
[155.68301392 86.69409180]
[162.99922180 88.06186676]
[177.51521301 84.28219604]
[192.03120422 80.50252533]
[206.54719543 76.72285461]
[221.06318665 72.94317627]
[227.60815430 58.74115372]
[241.77275085 52.11557770]
[256.86889648 56.19485092]
[265.76864624 69.05285645]
[264.26980591 84.61844635]
[253.08010864 95.54201508]
[237.48295593 96.66580200]
[224.84286499 87.45917511]
[210.32687378 91.23884583]
[195.81086731 95.01851654]
[181.29487610 98.79818726]
[166.77888489 102.57785797]
[152.30381775 106.51137543]
[137.87132263 110.59830475]
[152.49641418 113.93099976]
[167.12149048 117.26369476]
[174.67614746 130.22236633]
[174.67045593 145.22236633]
[167.10598755 158.17530823]
[154.04449463 165.55076599]
[139.04598999 165.33850098]
[126.19845581 157.59634399]
[119.00348663 144.43408203]
[111.81210327 131.27033997]
[104.62071991 118.10660553]
[104.62071991 133.10659790]
[104.62071991 148.10659790]
[104.62071991 163.10659790]
[104.62071991 178.10659790]
[104.62071991 193.10659790]
[107.30822754 197.74307251]
[107.84584045 202.46917725]
[106.57048035 206.43464661]
[104.11279297 209.05357361]
[103.15821838 224.02316284]
[102.20365143 238.99275208]
[101.24908447 253.96235657]
[111.04683685 242.60435486]
[124.95204926 236.97895813]
[139.89111328 238.32955933]
[152.56193542 246.35765076]
[160.16377258 259.28872681]
[161.01631165 274.26446533]
[154.93112183 287.97470093]
[143.25326538 297.38891602]
[128.56398010 300.42620850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[13 138]
[14 137]
[15 136]
[16 135]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 51]
[24 50]
[26 48]
[27 47]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[71 80]
[94 115]
[95 114]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
