%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUGCUACCCCGCCGCGCUCGCGGCCGCCUGCGUCCUCCUCAGCAGCCCUGCGACAAGUCCCGGCUCCUGCUGCGAUUAUAUUAUUUUUAUUUUUAAUUCACAAUUUCCCCUGGCCCUCAAAGCGUUUUUUUGUUUGCGGGCAAGAGGGAGUUAGAGGAGGGUAAAAAAGACUUUGAAUGUGAGGCAAAG\
) } def
/len { sequence length } bind def

/coor [
[128.11517334 340.48400879]
[133.81987000 354.35687256]
[135.07466125 369.30429077]
[131.76269531 383.93408203]
[124.19241333 396.88366699]
[113.06893158 406.94686890]
[99.42827606 413.18643188]
[84.54091644 415.02124023]
[69.79344940 412.28039551]
[56.55944824 405.21914673]
[46.07150650 394.49520874]
[39.30646896 381.10736084]
[36.89442444 366.30255127]
[39.06024933 351.45898438]
[29.77623558 363.24063110]
[20.49222374 375.02227783]
[11.20821190 386.80389404]
[1.92419922 398.58554077]
[0.11112566 414.88415527]
[-15.01693249 421.21456909]
[-27.89752579 411.06457520]
[-25.28020477 394.87564087]
[-9.85744381 389.30154419]
[-0.57343173 377.51989746]
[8.71058083 365.73825073]
[17.99459267 353.95660400]
[27.27860451 342.17495728]
[28.30311012 332.88186646]
[36.54596329 326.32269287]
[42.25800705 312.45285034]
[47.97005081 298.58300781]
[53.68209076 284.71316528]
[59.28105927 270.79727173]
[64.76658630 256.83630371]
[70.25211334 242.87532043]
[75.73764038 228.91433716]
[79.36383820 214.35925293]
[81.06929779 199.45651245]
[82.77475739 184.55378723]
[84.48021698 169.65106201]
[86.18567657 154.74832153]
[87.89113617 139.84559631]
[89.59660339 124.94286346]
[70.99075317 118.28692627]
[58.49474716 97.89289093]
[43.50716400 97.28264618]
[28.51958275 96.67240143]
[14.25484180 104.76247406]
[0.25527993 96.22172546]
[0.92244601 79.83615875]
[15.57001686 72.46183014]
[29.12982750 81.68482208]
[44.11740875 82.29506683]
[59.10499191 82.90531158]
[61.79085159 75.90272522]
[47.78577423 70.53077698]
[53.15795898 56.52579117]
[67.16256714 61.89756393]
[69.84842682 54.89498138]
[58.29695892 45.32609940]
[46.74548721 35.75721741]
[35.19401932 26.18833351]
[19.63071060 23.34333038]
[14.76528549 9.26579857]
[3.21381450 -0.30308443]
[-8.33765602 -9.87196732]
[-19.88912773 -19.44085121]
[-36.13861847 -21.65130043]
[-42.09778595 -36.92940140]
[-31.63635254 -49.55834961]
[-15.51613998 -46.54656982]
[-10.32024384 -30.99232101]
[1.23122680 -21.42343903]
[12.78269768 -11.85455513]
[24.33416748 -2.28567195]
[39.07123566 -0.12510006]
[44.76290131 14.63686180]
[56.31437302 24.20574570]
[67.86584473 33.77462769]
[79.41731262 43.34350967]
[73.86750793 29.40795708]
[68.31771088 15.47240162]
[62.76790619 1.53684640]
[52.00159836 -8.90760803]
[43.98468399 -21.58550453]
[39.16423035 -35.78984451]
[37.80906296 -50.72850037]
[39.99474716 -65.56840515]
[45.59940338 -79.48199463]
[54.31047440 -91.69335175]
[65.64218140 -101.52149200]
[78.96259308 -108.41835022]
[93.52887726 -111.99930573]
[108.52873993 -112.06466675]
[123.12567902 -108.61077881]
[136.50569153 -101.83026123]
[147.92260742 -92.10123444]
[156.73976135 -79.96625519]
[162.46545410 -66.10203552]
[164.78036499 -51.28174210]
[163.55543518 -36.33184052]
[158.85894775 -22.08603477]
[150.95280457 -9.33875847]
[140.27792358 1.19911993]
[127.43533325 8.93735218]
[118.88069153 21.25880241]
[110.32604980 33.58025360]
[101.77140808 45.90170288]
[115.18603516 39.18992615]
[128.60064697 32.47814941]
[142.01527405 25.76637268]
[155.42990112 19.05459404]
[168.78944397 12.23386192]
[182.09304810 5.30462503]
[190.75827026 -7.93261385]
[205.62040710 -6.94970512]
[218.92399597 -13.87894249]
[232.22760010 -20.80817986]
[245.53118896 -27.73741531]
[254.19641113 -40.97465515]
[269.05856323 -39.99174500]
[282.36215210 -46.92098236]
[295.66574097 -53.85021973]
[308.96932983 -60.77945709]
[315.14648438 -67.52960968]
[322.54635620 -67.71121216]
[335.96096802 -74.42298889]
[340.71630859 -89.49489594]
[354.77465820 -96.71559143]
[369.79544067 -91.80116272]
[376.86709595 -77.66725922]
[371.79412842 -62.69927597]
[357.58627319 -55.77744293]
[342.67276001 -61.00836945]
[329.25811768 -54.29659271]
[315.89859009 -47.47586060]
[302.59497070 -40.54662323]
[289.29138184 -33.61738586]
[275.98779297 -26.68815041]
[268.27413940 -13.94653606]
[252.46043396 -14.43381977]
[239.15682983 -7.50458288]
[225.85324097 -0.57534575]
[212.54963684 6.35389137]
[204.83598328 19.09550476]
[189.02227783 18.60822105]
[175.71868896 25.53745842]
[171.23181152 31.42464256]
[162.14167786 32.46921539]
[148.72705078 39.18099213]
[135.31242371 45.89276886]
[121.89781189 52.60454559]
[108.48318481 59.31632233]
[129.65510559 76.35870361]
[134.28581238 100.65676880]
[123.22360229 120.01564789]
[104.49932861 126.64832306]
[102.79386902 141.55105591]
[101.08840942 156.45378113]
[99.38294983 171.35652161]
[97.67749023 186.25924683]
[95.97203064 201.16197205]
[94.26657104 216.06471252]
[103.14619446 203.97537231]
[115.58303833 195.58937073]
[130.11956787 191.88949585]
[145.05223083 193.30934143]
[158.63098145 199.68251038]
[169.26451111 210.26211548]
[175.70661926 223.80830383]
[177.20236206 238.73355103]
[173.57641602 253.28871155]
[165.25373840 265.76800537]
[153.20970154 274.70898438]
[138.85575867 279.06378174]
[123.87409973 278.32208252]
[110.02049255 272.57077026]
[98.91847229 262.48388672]
[91.86911774 249.24354553]
[89.69862366 234.39987183]
[84.21309662 248.36085510]
[78.72756958 262.32183838]
[73.24204254 276.28280640]
[73.01438141 285.42993164]
[67.55193329 290.42520142]
[61.83989334 304.29504395]
[56.12784958 318.16488647]
[50.41580963 332.03472900]
[62.28734207 322.86593628]
[76.37145233 317.70474243]
[91.35635376 317.03186035]
[105.84635925 320.90994263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[29 188]
[30 187]
[31 186]
[32 185]
[33 183]
[34 182]
[35 181]
[36 180]
[37 163]
[38 162]
[39 161]
[40 160]
[41 159]
[42 158]
[43 157]
[45 54]
[46 53]
[47 52]
[59 80]
[60 79]
[61 78]
[62 77]
[64 75]
[65 74]
[66 73]
[67 72]
[108 153]
[109 152]
[110 151]
[111 150]
[112 149]
[113 147]
[114 146]
[116 144]
[117 143]
[118 142]
[119 141]
[121 139]
[122 138]
[123 137]
[124 136]
[126 135]
[127 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
