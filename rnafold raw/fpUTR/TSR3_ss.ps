%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCCAUUGGGAGGCCGAGGGGCGCGGCCGUGGGGUGGGGAGUCCCCGGCACCCCAGGUCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[47.37420654 185.44531250]
[33.75537109 191.73239136]
[19.54129219 186.94073486]
[12.50817585 173.69175720]
[16.50265312 159.23504639]
[2.15475750 163.60974121]
[-12.19313812 167.98443604]
[-19.78591728 173.65882874]
[-27.29446983 172.21562195]
[-41.82660675 175.93273926]
[-56.35874557 179.64985657]
[-70.89088440 183.36697388]
[-82.23345947 195.21087646]
[-98.09533691 191.04759216]
[-102.15917206 175.15994263]
[-90.24444580 163.89178467]
[-74.60800171 168.83483887]
[-60.07586288 165.11772156]
[-45.54372406 161.40060425]
[-31.01158524 157.68348694]
[-16.56782722 153.63653564]
[-2.21993160 149.26184082]
[12.12796307 144.88716125]
[25.74653435 138.59950256]
[38.38209534 130.51602173]
[51.01765442 122.43254852]
[63.65321350 114.34906769]
[76.28877258 106.26558685]
[88.92433167 98.18211365]
[101.37261200 89.81310272]
[113.62715912 81.16289520]
[119.05952454 73.39510345]
[126.64216614 72.41287231]
[139.27772522 64.32939148]
[151.91328430 56.24591446]
[164.54884338 48.16243362]
[177.18440247 40.07895279]
[189.81996155 31.99547577]
[202.45552063 23.91199493]
[214.71006775 15.26179028]
[226.55821228 6.06278944]
[238.40634155 -3.13621187]
[244.09126282 -18.51846695]
[260.29861450 -21.01923943]
[270.35565186 -8.06594849]
[263.91659546 7.01617050]
[247.60534668 8.71192646]
[235.75720215 17.91092682]
[223.90907288 27.10992813]
[222.42509460 31.97580338]
[217.66448975 35.81147003]
[210.53900146 36.54755402]
[197.90344238 44.63103485]
[185.26788330 52.71451569]
[172.63232422 60.79799271]
[159.99676514 68.88146973]
[147.36120605 76.96495056]
[134.72564697 85.04843140]
[122.27736664 93.41744232]
[110.02281189 102.06764984]
[105.59640503 109.15361786]
[97.00781250 110.81767273]
[84.37225342 118.90114594]
[71.73669434 126.98462677]
[59.10113144 135.06811523]
[46.46557236 143.15158081]
[33.83001328 151.23506165]
[47.42558289 157.57229614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[6 22]
[7 21]
[9 20]
[10 19]
[11 18]
[12 17]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[30 60]
[31 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
