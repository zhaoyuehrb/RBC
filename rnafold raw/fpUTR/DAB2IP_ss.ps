%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUACAAAAGGAGGAACCCAGACGCUCAUGGAGACAGCCUCGGUUCAUAAAUCAGGUGGGGCCAGGGGCUGGGGGCCCACACGCC\
) } def
/len { sequence length } bind def

/coor [
[73.51942444 352.29943848]
[58.97594070 356.51437378]
[43.85199356 355.77618408]
[29.78811264 350.16494751]
[18.30984688 340.28930664]
[10.66227055 327.22052002]
[7.67493629 312.37619019]
[9.67188644 297.36648560]
[16.43650818 283.81958008]
[27.23502541 273.20492554]
[40.89609528 266.67395020]
[55.93787003 264.93502808]
[47.69426727 252.58276367]
[50.71904373 237.67285156]
[63.73113632 229.10995483]
[66.91961670 214.45275879]
[58.67601776 202.10047913]
[61.70079041 187.19058228]
[74.71288300 178.62768555]
[77.90136719 163.97047424]
[81.08984375 149.31327820]
[84.27832031 134.65606689]
[87.46680450 119.99887085]
[85.77341461 112.62749481]
[91.03953552 104.87979889]
[89.81296539 96.71160126]
[95.14962006 89.89787292]
[99.37561035 75.50547791]
[103.60160065 61.11308289]
[103.02608490 51.76280975]
[108.24381256 46.28740692]
[112.98080444 32.05501938]
[117.71779633 17.82262993]
[107.83023834 7.75505209]
[103.31386566 -5.54332113]
[105.00917816 -19.41788292]
[112.52272034 -31.12541389]
[124.31648254 -38.37646484]
[138.02239990 -39.78297806]
[143.26435852 -53.83722305]
[148.50631714 -67.89146423]
[153.74827576 -81.94571686]
[153.84127808 -91.31322479]
[159.43632507 -96.40244293]
[165.17657471 -110.26063538]
[170.91682434 -124.11883545]
[176.65707397 -137.97702026]
[173.98126221 -154.15640259]
[186.82508850 -164.35287476]
[201.97592163 -158.07719421]
[203.84788513 -141.78523254]
[190.51525879 -132.23677063]
[184.77500916 -118.37857819]
[179.03475952 -104.52038574]
[173.29450989 -90.66219330]
[167.80253601 -76.70375061]
[162.56056213 -62.64950562]
[157.31860352 -48.59526062]
[152.07664490 -34.54101181]
[162.62583923 -22.44008636]
[165.71485901 -6.59161472]
[160.42167664 8.76134968]
[148.08123779 19.46075821]
[131.95019531 22.55962372]
[127.21319580 36.79201126]
[122.47619629 51.02439880]
[117.99399567 65.33907318]
[113.76800537 79.73146820]
[109.54201508 94.12386322]
[105.57359314 108.58939362]
[102.12400818 123.18734741]
[98.93552399 137.84455872]
[95.74704742 152.50175476]
[92.55857086 167.15896606]
[89.37008667 181.81616211]
[97.64914703 195.01066589]
[94.20677948 209.82972717]
[81.57682037 217.64123535]
[78.38834381 232.29844666]
[86.66740417 245.49295044]
[83.22503662 260.31201172]
[70.59506989 268.12350464]
[83.55518341 275.95385742]
[93.26865387 287.56967163]
[98.68184662 301.71096802]
[99.20758057 316.84378052]
[94.78881836 331.32666016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 82]
[15 79]
[16 78]
[19 75]
[20 74]
[21 73]
[22 72]
[23 71]
[25 70]
[27 69]
[28 68]
[29 67]
[31 66]
[32 65]
[33 64]
[39 59]
[40 58]
[41 57]
[42 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
