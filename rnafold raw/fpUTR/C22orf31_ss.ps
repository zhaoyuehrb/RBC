%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGACAGGUGACUAGAAAUAUUAAAACAAAAACAAAAAAAAAGAGAGAGAGAGAAAAAGGAAAGAGAAAAUACAUAUUUCUUCCCCUUACUAAGCUAGCGAAAAUAAAAUUUAAGGCAACUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[78.44739532 450.45797729]
[65.34703827 442.44073486]
[58.02453232 428.93975830]
[58.44958496 413.58673096]
[66.50785828 400.51159668]
[80.03172302 393.23141479]
[80.39984131 378.23596191]
[80.76795959 363.24047852]
[73.34533691 350.32714844]
[81.41897583 336.72100830]
[81.78709412 321.72552490]
[78.77437592 314.88952637]
[82.35275269 306.36779785]
[83.08876801 291.38586426]
[72.92702484 280.55651855]
[73.46002960 265.35223389]
[84.88773346 254.76708984]
[85.62374878 239.78515625]
[86.35976410 224.80322266]
[87.09577942 209.82128906]
[79.99230194 196.72969055]
[88.39742279 183.32580566]
[89.13343811 168.34387207]
[89.86945343 153.36193848]
[81.47650146 151.05883789]
[73.55915833 147.44476318]
[66.32068634 142.61253357]
[59.94695282 136.68620300]
[54.60160065 129.81794739]
[50.42187500 122.18408966]
[47.51509094 113.98064423]
[45.95587921 105.41824341]
[45.78427887 96.71672058]
[47.00469208 88.09950256]
[49.58578873 79.78784180]
[53.46129227 71.99512482]
[58.53170013 64.92145538]
[64.66682434 58.74844360]
[71.70914459 53.63458252]
[79.47785187 49.71117783]
[87.77346802 47.07896423]
[96.38301086 45.80551910]
[105.08541870 45.92354584]
[113.65725708 47.43001175]
[107.85247040 32.97518158]
[113.87131500 19.00277519]
[127.68756104 13.55787373]
[133.42781067 -0.30031919]
[125.34515381 -11.53895664]
[123.91000366 -25.19845581]
[129.39299011 -37.67272186]
[140.25253296 -45.72212982]
[153.56651306 -47.31474686]
[159.64514160 -61.02789307]
[155.10575867 -71.05825043]
[156.86007690 -81.70347595]
[164.07650757 -89.42382050]
[174.14927673 -91.79024506]
[180.89344788 -105.18861389]
[187.63760376 -118.58697510]
[194.38177490 -131.98533630]
[188.69725037 -144.26553345]
[191.12178040 -157.38014221]
[200.54125977 -166.54393005]
[213.33186340 -168.54615784]
[220.40280151 -181.77497864]
[227.47375488 -195.00379944]
[234.54470825 -208.23262024]
[241.61566162 -221.46144104]
[248.68661499 -234.69026184]
[242.69281006 -249.13352966]
[247.43452454 -264.03488159]
[260.67288208 -272.35833740]
[276.15713501 -270.17382812]
[286.57608032 -258.51278687]
[287.01022339 -242.88124084]
[277.25454712 -230.65989685]
[261.91543579 -227.61930847]
[254.84448242 -214.39048767]
[247.77352905 -201.16166687]
[240.70257568 -187.93284607]
[233.63162231 -174.70402527]
[226.56068420 -161.47521973]
[232.13961792 -145.66030884]
[224.44871521 -130.38024902]
[207.78015137 -125.24117279]
[201.03598022 -111.84280396]
[194.29180908 -98.44444275]
[187.54763794 -85.04607391]
[190.16650391 -65.95070648]
[173.35829163 -54.94927216]
[167.27966309 -41.23612595]
[175.95507812 -27.35714340]
[174.67362976 -10.87404251]
[163.74070740 1.74762714]
[147.28601074 5.43993235]
[141.54574585 19.29812622]
[147.46517944 32.91781235]
[141.84117126 47.05376434]
[127.51544952 53.17026520]
[144.22425842 68.46685028]
[153.24031067 89.24857330]
[152.99530029 111.90049744]
[143.53184509 132.48234558]
[126.49609375 147.41394043]
[104.85137939 154.09794617]
[104.11537170 169.07987976]
[103.37935638 184.06181335]
[110.43019104 198.22502136]
[102.07771301 210.55731201]
[101.34169769 225.53923035]
[100.60568237 240.52116394]
[99.86966705 255.50309753]
[110.20481873 267.15737915]
[109.24497223 282.34069824]
[98.07070160 292.12188721]
[97.33468628 307.10382080]
[96.78257751 322.09365845]
[96.41445923 337.08914185]
[103.81076050 351.07504272]
[95.76344299 363.60858154]
[95.39532471 378.60406494]
[95.02720642 393.59954834]
[108.17755890 401.53451538]
[115.58456421 414.98931885]
[115.25576782 430.34469604]
[107.27961731 443.47012329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 123]
[7 122]
[8 121]
[10 119]
[11 118]
[13 117]
[14 116]
[17 113]
[18 112]
[19 111]
[20 110]
[22 108]
[23 107]
[24 106]
[44 100]
[47 97]
[48 96]
[53 92]
[54 91]
[58 89]
[59 88]
[60 87]
[61 86]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
