%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGUCAUCGCUGCGCGACGACAGGAAGUAAGAUCCUGGCCUGUGCAGCUCGGGUUUCCGAGCUUCUGCCUCAGGCAUCUCCGCGAUCUCCUCUCCCCUCCAAUCCUAUCCGUG\
) } def
/len { sequence length } bind def

/coor [
[77.76305389 309.14993286]
[74.98964691 294.40853882]
[76.19680786 279.45846558]
[66.41619110 290.83120728]
[56.63558197 302.20397949]
[46.85496902 313.57672119]
[43.72298813 329.08483887]
[29.55798912 333.68939209]
[19.77737617 345.06216431]
[9.99676418 356.43490601]
[0.21615069 367.80767822]
[-5.52737427 383.75912476]
[-22.44538689 382.65585327]
[-26.06860542 366.09356689]
[-11.15660667 358.02706909]
[-1.37599349 346.65429688]
[8.40461922 335.28155518]
[18.18523216 323.90878296]
[20.61763763 309.21414185]
[35.48221207 303.79611206]
[45.26282501 292.42333984]
[55.04343796 281.05059814]
[64.82405090 269.67782593]
[70.98742676 256.00256348]
[73.02993011 241.14228821]
[75.07242584 226.28199768]
[63.22384644 217.25555420]
[57.44580841 203.41827393]
[59.38249588 188.44778442]
[68.61309052 176.37745667]
[82.73814392 170.50973511]
[84.78064728 155.64945984]
[86.82314301 140.78916931]
[88.86564636 125.92887115]
[90.90814209 111.06858826]
[85.80947113 98.04955292]
[94.23156738 86.88891602]
[96.27406311 72.02862549]
[97.29769897 57.06359482]
[97.29769897 42.06359482]
[97.29769897 27.06359482]
[97.29769897 12.06359386]
[97.29769897 -2.93640590]
[87.70640564 -18.58143425]
[96.90578461 -33.45757675]
[96.49606323 -48.45198059]
[96.08634186 -63.44638443]
[95.06270599 -78.41141510]
[93.42687225 -93.32195282]
[91.79104614 -108.23248291]
[90.15521240 -123.14302063]
[88.51937866 -138.05355835]
[86.88354492 -152.96409607]
[76.75305176 -165.86001587]
[83.10632324 -180.97848511]
[99.40766144 -182.76690674]
[108.88764191 -169.38549805]
[101.79408264 -154.59991455]
[103.42991638 -139.68939209]
[105.06574249 -124.77885437]
[106.70157623 -109.86831665]
[108.33740997 -94.95777893]
[109.97324371 -80.04724884]
[112.61448669 -77.52044678]
[114.09358215 -73.53327942]
[113.71222687 -68.68025208]
[111.08074188 -63.85610580]
[111.49047089 -48.86170197]
[111.90019226 -33.86729813]
[120.50881195 -25.24870110]
[120.89447021 -12.67048550]
[112.29769897 -2.93640590]
[112.29769897 12.06359386]
[112.29769897 27.06359482]
[112.29769897 42.06359482]
[112.29769897 57.06359482]
[125.01985931 49.11709976]
[139.25537109 53.84467697]
[144.69633484 67.82308960]
[137.40293884 80.93058014]
[122.65632629 83.67603302]
[111.13435364 74.07112885]
[109.09185791 88.93141174]
[114.19052887 101.95044708]
[105.76843262 113.11108398]
[103.72593689 127.97137451]
[101.68343353 142.83166504]
[99.64093781 157.69195557]
[97.59843445 172.55224609]
[109.61660767 182.01325989]
[115.24837494 196.12637329]
[113.07424927 211.06422424]
[103.77722168 222.82948303]
[89.93271637 228.32449341]
[87.89021301 243.18478394]
[85.84771729 258.04507446]
[96.24987793 247.23789978]
[109.13131714 239.55229187]
[123.58226013 235.53108215]
[138.58209229 235.45826721]
[153.07139587 239.33898926]
[166.02684021 246.89916992]
[176.53343201 257.60482788]
[183.84912109 270.69992065]
[187.45721436 285.25949097]
[187.10287476 300.25531006]
[182.81115723 314.62823486]
[174.88513184 327.36315918]
[163.88462830 337.56063843]
[150.58654785 344.50048828]
[135.93013000 347.69253540]
[120.95047760 346.91131592]
[106.70558929 342.21206665]
[94.20152283 333.92663574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[6 20]
[8 18]
[9 17]
[10 16]
[11 15]
[24 96]
[25 95]
[26 94]
[31 89]
[32 88]
[33 87]
[34 86]
[35 85]
[37 83]
[38 82]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[45 69]
[46 68]
[47 67]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
