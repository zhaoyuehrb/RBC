%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCCCGGGCUGGAAGCCGGAAGCGAGCAAAGUGGAGCCGACUCGAACUCCACCGCGGAAAAGAAAGCCUCAGAACGUUCGUUCGCUGCGUCCCCAGCCGGGGCCGAGCCCUCCGCGACGCCAGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[92.32081604 300.69046021]
[75.96221161 299.53799438]
[69.02521515 284.67831421]
[78.64601135 271.39779663]
[79.70015717 256.43487549]
[80.75429535 241.47196960]
[81.80844116 226.50904846]
[82.86257935 211.54614258]
[83.91672516 196.58322144]
[84.97087097 181.62031555]
[82.27775574 174.66197205]
[86.22915649 166.32029724]
[87.63378143 151.38621521]
[89.03840637 136.45211792]
[90.44302368 121.51803589]
[82.43813324 120.97345734]
[74.18289185 117.45742798]
[66.75000000 110.85076141]
[53.21374893 117.31372070]
[39.75418091 123.93490601]
[26.37315559 130.71340942]
[17.86730003 144.73419189]
[1.48011827 144.10783386]
[-5.93066168 129.47866821]
[3.25853491 115.89593506]
[19.59465027 117.33238220]
[32.97567749 110.55387878]
[37.56381226 104.66998291]
[46.75078964 103.77746582]
[60.28704453 97.31450653]
[60.55074310 89.81914520]
[47.83192825 81.86730957]
[61.07814026 74.82842255]
[61.34184265 67.33305359]
[48.29324341 59.93480301]
[35.24464798 52.53654861]
[22.19605446 45.13829422]
[9.14745808 37.74004364]
[-3.90113711 30.34178925]
[-22.26181602 30.95155144]
[-30.63206482 15.57281780]
[-43.85050964 8.48249054]
[-60.66645813 6.32372808]
[-63.24717712 -10.43265057]
[-47.86005783 -17.55114174]
[-36.76018143 -4.73595285]
[-23.54173851 2.35437441]
[-11.81346416 -0.83826005]
[-0.71613169 5.03800488]
[3.49711633 17.29319382]
[16.54571152 24.69144630]
[29.59430695 32.08969879]
[42.64290237 39.48795319]
[55.69149780 46.88620758]
[68.74009705 54.28446198]
[83.72360992 53.58137512]
[96.02208710 44.99374008]
[108.32055664 36.40610504]
[120.61903381 27.81847191]
[132.91751099 19.23083496]
[145.21598816 10.64320087]
[130.73844910 14.56758404]
[115.88584900 12.46987057]
[103.06143951 4.68948174]
[94.34027863 -7.51466942]
[91.13349915 -22.16787910]
[93.95997620 -36.89917374]
[102.36238098 -49.32493973]
[114.98114014 -57.43461609]
[129.77447510 -59.91601181]
[144.34872437 -56.36761856]
[156.34570312 -47.36359024]
[163.82421875 -34.36082840]
[165.57421875 -19.46326256]
[161.31129456 -5.07911158]
[170.18487549 -17.17289162]
[179.05845642 -29.26667213]
[187.93205261 -41.36045074]
[189.18385315 -57.71175385]
[204.08538818 -64.55836487]
[217.30723572 -54.85709000]
[215.24789429 -38.58775711]
[200.02583313 -32.48686981]
[191.15223694 -20.39308929]
[182.27865601 -8.29930878]
[173.40507507 3.79447150]
[180.64987183 16.92889404]
[195.61277771 15.87475109]
[210.57569885 14.82060814]
[219.00770569 11.06583977]
[225.90098572 13.92133427]
[240.88450623 13.21825027]
[254.30683899 4.84260893]
[267.38278198 11.97484875]
[282.36630249 11.27176476]
[297.34982300 10.56868172]
[312.33334351 9.86559772]
[325.83575439 0.55877686]
[340.52871704 7.84221792]
[341.29739380 24.22334099]
[327.35101318 32.85065079]
[313.03640747 24.84911156]
[298.05291748 25.55219460]
[283.06939697 26.25527763]
[268.08587646 26.95836258]
[255.73526001 35.28371429]
[241.58758545 28.20176315]
[226.60408020 28.90484810]
[211.62983704 29.78352165]
[196.66691589 30.83766365]
[181.70401001 31.89180756]
[169.95005798 32.93207550]
[160.15281677 29.39966011]
[153.80361938 22.94167709]
[141.50514221 31.52931213]
[129.20666504 40.11694717]
[116.90819550 48.70458221]
[104.60971832 57.29221725]
[92.31124115 65.87985229]
[117.10319519 72.81456757]
[128.51605225 93.44258118]
[122.40919495 113.96155548]
[105.37711334 122.92265320]
[103.97249603 137.85675049]
[102.56787109 152.79083252]
[101.16324615 167.72492981]
[99.93378448 182.67445374]
[98.87963867 197.63735962]
[97.82549286 212.60028076]
[96.77135468 227.56318665]
[95.71720886 242.52610779]
[94.66307068 257.48901367]
[93.60892487 272.45193481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 133]
[5 132]
[6 131]
[7 130]
[8 129]
[9 128]
[10 127]
[12 126]
[13 125]
[14 124]
[15 123]
[18 30]
[19 29]
[20 27]
[21 26]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[41 47]
[42 46]
[56 119]
[57 118]
[58 117]
[59 116]
[60 115]
[61 114]
[75 86]
[76 85]
[77 84]
[78 83]
[87 111]
[88 110]
[89 109]
[91 108]
[92 107]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
