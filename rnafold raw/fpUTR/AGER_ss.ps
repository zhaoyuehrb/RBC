%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAAAGAUGGGGGCUGGAGAGAGGGUGCAGGCCCCACCUAGGGCGGAGGCCACAGCAGGGAGAGGGGCAGACAGAGCCAGGACCCUGGAAGGAAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[94.99263763 180.22731018]
[94.52613831 165.23457336]
[94.05963898 150.24182129]
[75.48777771 144.25697327]
[60.56213379 131.68885803]
[51.50291061 114.40699005]
[36.64961243 116.49971771]
[24.06387901 126.08668518]
[10.38160992 120.20070648]
[-4.47168922 122.29343414]
[-19.32498741 124.38616180]
[-34.17828751 126.47889709]
[-49.03158569 128.57162476]
[-61.61731720 138.15858459]
[-75.29959106 132.27261353]
[-90.15288544 134.36534119]
[-105.00618744 136.45806885]
[-117.59191895 146.04502869]
[-131.27418518 140.15905762]
[-139.40223694 153.51828003]
[-154.23229980 158.47843933]
[-168.76208496 152.69747925]
[-176.13107300 138.90501404]
[-172.85983276 123.61341095]
[-160.49296570 114.04290771]
[-144.86972046 114.71238708]
[-133.36691284 125.30575562]
[-121.84358978 115.86847687]
[-107.09891510 121.60477448]
[-92.24562073 119.51203918]
[-77.39231873 117.41931152]
[-65.86899567 107.98203278]
[-51.12431335 113.71832275]
[-36.27101517 111.62559509]
[-21.41771698 109.53286743]
[-6.56441927 107.44013977]
[8.28887939 105.34740448]
[19.81220627 95.91012573]
[34.55688095 101.64642334]
[49.41018295 99.55368805]
[53.75730515 79.47824860]
[65.72721863 62.78568268]
[83.34676361 52.22763824]
[80.56355286 37.48810577]
[77.78033447 22.74857903]
[66.68354034 10.67408943]
[71.84947205 -4.89014006]
[87.96385193 -7.93296480]
[98.44959259 4.67581224]
[92.51985931 19.96536255]
[95.30307770 34.70489120]
[98.08629608 49.44441986]
[110.72915649 50.55898285]
[122.69677734 54.78512192]
[133.23597717 61.85686493]
[141.68345642 71.32914734]
[147.50759888 82.60583496]
[162.20205688 79.59372711]
[176.89651489 76.58161926]
[191.59098816 73.56951141]
[206.28544617 70.55741119]
[210.05047607 56.98605728]
[219.28085327 46.43676376]
[232.10984802 40.95549393]
[245.98052979 41.57201767]
[258.15539551 48.10696030]
[266.25668335 59.21860123]
[281.03768921 56.66494751]
[295.81872559 54.11129379]
[303.52737427 40.50575256]
[318.19601440 35.08678436]
[332.89855957 40.41306686]
[340.69290161 53.96968842]
[337.89883423 69.35562897]
[325.83560181 79.30611420]
[310.19906616 79.12283325]
[298.37237549 68.89232635]
[283.59136963 71.44597626]
[268.81033325 73.99963379]
[263.65786743 89.22866058]
[251.49194336 99.88085175]
[235.53268433 103.01235199]
[220.06712341 97.68664551]
[209.29754639 85.25186920]
[194.60308838 88.26397705]
[179.90863037 91.27608490]
[165.21417236 94.28819275]
[150.51969910 97.30029297]
[150.30197144 105.40744019]
[148.79161072 113.37562561]
[146.02743530 121.00009155]
[142.08047485 128.08491516]
[137.05215454 134.44802856]
[131.07170105 139.92591858]
[124.29277039 144.37780762]
[116.88958740 147.68931580]
[109.05238342 149.77532959]
[109.51888275 164.76806641]
[109.98538208 179.76081848]
[112.77407074 198.94084167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[6 40]
[7 39]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[15 31]
[16 30]
[17 29]
[19 27]
[43 52]
[44 51]
[45 50]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
