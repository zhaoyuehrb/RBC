%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACGGCCCGCAGCUGGAACGCGAGCGCGCGCCCCGCCGCGCUCCCGCCCGCCGGGGCCUGGGCGCUGCGGCGCGUGCGCGAGCGGUGCCGCACCGGCCGCGGGCGCAGGGAGUAUUAUGGGCUGUGGGUGCCGCUGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[146.53213501 358.16131592]
[143.94520569 343.38607788]
[141.35826111 328.61083984]
[129.84651184 322.72720337]
[123.75501251 311.10342407]
[125.51962280 297.90258789]
[134.71566772 288.00094604]
[132.44943237 273.17312622]
[130.18319702 258.34530640]
[127.91696930 243.51750183]
[125.65073395 228.68968201]
[123.38449860 213.86186218]
[121.11826324 199.03404236]
[118.85202789 184.20622253]
[116.58579254 169.37840271]
[114.31955719 154.55059814]
[104.74820709 143.13838196]
[110.31172943 128.32765198]
[88.60977936 125.09308624]
[76.71659851 109.01669312]
[79.43753052 91.16685486]
[68.43649292 80.96994019]
[57.43545151 70.77301788]
[41.86433029 71.19487762]
[30.85297203 60.69703674]
[30.54675484 45.84975433]
[19.54571533 35.65283585]
[8.54467583 25.45591927]
[-2.45636392 15.25900269]
[-13.45740318 5.06208515]
[-24.45844269 -5.13483238]
[-35.45948410 -15.33174992]
[-46.46052170 -25.52866745]
[-61.84138107 -29.23539162]
[-65.91581726 -43.56187820]
[-76.91686249 -53.75879669]
[-87.91790009 -63.95571136]
[-98.91893768 -74.15263367]
[-114.29979706 -77.85935211]
[-118.37423706 -92.18584442]
[-129.37527466 -102.38275909]
[-140.37631226 -112.57967377]
[-151.37734985 -122.77659607]
[-162.37840271 -132.97351074]
[-173.37944031 -143.17042542]
[-188.95056152 -142.74856567]
[-199.96191406 -153.24641418]
[-200.26812744 -168.09368896]
[-211.26918030 -178.29060364]
[-222.27021790 -188.48753357]
[-233.27125549 -198.68444824]
[-249.37254333 -201.79579163]
[-254.47221375 -217.38185120]
[-243.32417297 -229.40902710]
[-227.39654541 -225.50479126]
[-223.07434082 -209.68548584]
[-212.07328796 -199.48857117]
[-201.07225037 -189.29165649]
[-190.07121277 -179.09472656]
[-175.24340820 -179.91421509]
[-163.94152832 -169.72979736]
[-163.18252563 -154.17146301]
[-152.18147278 -143.97454834]
[-141.18043518 -133.77763367]
[-130.17939758 -123.58071899]
[-119.17835999 -113.38379669]
[-108.17732239 -103.18688202]
[-93.58332825 -100.20951080]
[-88.72202301 -85.15367126]
[-77.72098541 -74.95674896]
[-66.71994019 -64.75983429]
[-55.71890259 -54.56291580]
[-41.12491608 -51.58554459]
[-36.26360703 -36.52970886]
[-25.26256561 -26.33279037]
[-14.26152611 -16.13587189]
[-3.26048613 -5.93895483]
[7.74055338 4.25796270]
[18.74159241 14.45487976]
[29.74263382 24.65179825]
[40.74367142 34.84871674]
[55.57148743 34.02923965]
[66.87336731 44.21364975]
[67.63237000 59.77198029]
[78.63340759 69.96889496]
[89.63445282 80.16581726]
[110.73902893 76.03321838]
[129.23329163 92.63779449]
[142.77789307 86.19235229]
[156.32249451 79.74691010]
[162.78558350 73.18504333]
[170.23107910 73.31211090]
[183.91213989 67.16162109]
[190.51585388 60.74131393]
[197.95686340 61.02965927]
[211.76795959 55.17700195]
[225.57905579 49.32434845]
[235.01887512 35.91458130]
[251.32550049 37.65411377]
[257.72409058 52.75346375]
[247.63229370 65.67971039]
[231.43171692 63.13544464]
[217.62062073 68.98809814]
[203.80952454 74.84075928]
[190.06263733 80.84268188]
[176.38157654 86.99317169]
[162.76794434 93.29151154]
[149.22334290 99.73695374]
[135.67874146 106.18239594]
[150.65534973 107.01961517]
[165.53315735 105.10884857]
[179.23698425 111.20842743]
[187.77485657 123.54151154]
[188.65960693 138.51539612]
[181.63352966 151.76809692]
[168.74334717 159.43904114]
[153.74404907 159.29360962]
[141.00502014 151.37419128]
[134.23718262 137.98756409]
[125.13954163 126.06141663]
[134.87298584 138.53421021]
[129.14736938 152.28436279]
[131.41360474 167.11216736]
[133.67984009 181.93998718]
[135.94607544 196.76780701]
[138.21231079 211.59562683]
[140.47854614 226.42344666]
[142.74478149 241.25126648]
[145.01101685 256.07907104]
[147.27725220 270.90689087]
[149.54348755 285.73471069]
[163.81037903 295.79629517]
[166.37280273 312.72460938]
[156.13349915 326.02389526]
[158.72044373 340.79916382]
[161.30738831 355.57440186]
[175.56921387 361.45687866]
[184.36796570 374.12911987]
[184.89598083 389.54742432]
[176.98477173 402.79190063]
[163.15878296 409.63629150]
[147.82983398 407.89654541]
[135.88932800 398.12780762]
[131.14744568 383.44729614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[7 131]
[8 130]
[9 129]
[10 128]
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[16 122]
[18 120]
[21 86]
[22 85]
[23 84]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[35 72]
[36 71]
[37 70]
[38 69]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[48 59]
[49 58]
[50 57]
[51 56]
[88 109]
[89 108]
[90 107]
[92 106]
[93 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
