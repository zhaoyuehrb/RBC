%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCGCUACCGCUGCCACUGAGAGGAGCCACCGGCGACGCCAGAGCCAGGAAUACGGGUGGACAAAA\
) } def
/len { sequence length } bind def

/coor [
[120.73120117 278.55541992]
[118.01445770 263.80349731]
[113.55674744 257.59140015]
[115.52585602 248.31930542]
[113.48335266 233.45901489]
[111.44084930 218.59873962]
[109.39835358 203.73844910]
[105.92636871 200.02035522]
[104.98488617 193.97970581]
[107.91016388 187.44081116]
[107.22744751 172.45635986]
[106.54472351 157.47189331]
[104.16448975 142.66195679]
[100.11753845 128.21820068]
[96.07058716 113.77443695]
[86.20722961 103.86455536]
[89.48565674 90.27251434]
[78.31203461 79.07158661]
[82.32863617 64.72878265]
[78.28168488 50.28502274]
[74.23473358 35.84126282]
[68.73463440 28.12128258]
[70.34838867 20.64752769]
[59.69615173 8.94964695]
[64.36140442 -5.19548416]
[51.23529816 -13.58256817]
[48.01023483 -28.45043945]
[56.08692932 -40.91248703]
[52.70157242 -55.52547073]
[49.31621552 -70.13845825]
[39.85113907 -84.20432281]
[50.74711227 -97.19332886]
[66.24480438 -90.31888580]
[63.92920303 -73.52381134]
[67.31455994 -58.91082764]
[70.69991302 -44.29784012]
[83.43381500 -36.65693665]
[87.07521057 -21.88551521]
[78.97438812 -8.58084011]
[89.38448334 2.07182264]
[84.96138000 17.26217270]
[88.67848969 31.79430962]
[92.72544098 46.23807144]
[96.77239990 60.68182755]
[107.65655518 70.84963989]
[103.92941284 86.22556305]
[113.79277039 96.13544464]
[110.51434326 109.72748566]
[114.56129456 124.17124176]
[118.60824585 138.61500549]
[122.19116974 141.57560730]
[124.42739868 145.17105103]
[125.28247070 148.90052795]
[124.88830566 152.30404663]
[123.51515198 155.01322937]
[121.52918243 156.78918457]
[122.21189880 171.77363586]
[122.89462280 186.75808716]
[124.25864410 201.69593811]
[126.30113983 216.55622864]
[128.34364319 231.41651917]
[130.38613892 246.27680969]
[132.76637268 261.08676147]
[135.48312378 275.83868408]
[147.82533264 286.08804321]
[147.36326599 302.12445068]
[134.45137024 311.64611816]
[118.99455261 307.34887695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[4 62]
[5 61]
[6 60]
[7 59]
[10 58]
[11 57]
[12 56]
[13 50]
[14 49]
[15 48]
[17 46]
[19 44]
[20 43]
[21 42]
[23 41]
[25 39]
[28 36]
[29 35]
[30 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
