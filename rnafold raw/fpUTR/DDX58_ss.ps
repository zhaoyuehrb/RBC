%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUUAUUAAAGUUCCUAUGCAGCUCCGCCUCGCGUCCGGCCUCAUUUCCUCGGAAAAUCCCUGCUUUCCCCGCUCGCCACGCCCUCCUCCUACCCGGCUUUAAAGCUAGUGAGGCACAGCCUGCGGGGAACGUAGCUAGCUGCAAGCAGAGGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[57.95447922 213.17340088]
[70.82321930 220.88024902]
[80.90747070 231.98466492]
[87.34236908 245.53427124]
[89.57604980 260.36703491]
[87.41692352 275.21081543]
[81.05018616 288.79260254]
[71.02185822 299.94754028]
[58.19200516 307.71896362]
[43.66096115 311.44033813]
[28.67495346 310.79254150]
[14.51923943 305.83111572]
[2.40785718 296.98156738]
[-6.62047815 285.00286865]
[-11.79146671 270.92236328]
[-12.66162586 255.94763184]
[-9.15632915 241.36294556]
[-1.57420444 228.41667175]
[-14.71022892 235.65855408]
[-27.84625244 242.90043640]
[-40.98227692 250.14231873]
[-54.04611588 257.51361084]
[-67.03649902 265.01361084]
[-70.88433838 280.34234619]
[-84.48694611 288.38876343]
[-99.77412415 284.37905884]
[-107.67626953 270.69213867]
[-103.50518036 255.44821167]
[-89.73548126 247.69120789]
[-74.53649902 252.02323914]
[-61.54611588 244.52323914]
[-57.30323792 238.42283630]
[-48.22415924 237.00630188]
[-35.08813477 229.76441956]
[-21.95211220 222.52253723]
[-8.81608772 215.28065491]
[2.73783183 205.71472168]
[12.30375862 194.16079712]
[21.86968422 182.60688782]
[31.43561172 171.05296326]
[41.00153732 159.49903870]
[50.56746292 147.94512939]
[60.13338852 136.39120483]
[69.69931793 124.83728790]
[61.66078186 108.07011414]
[62.25796890 89.48518372]
[48.84609985 82.76791382]
[35.43422699 76.05064392]
[22.02235603 69.33337402]
[5.69297743 70.84447479]
[-3.55820918 57.30388260]
[3.78562403 42.64099884]
[20.16977119 41.93973923]
[28.73962593 55.92150116]
[42.15149689 62.63877106]
[55.56336975 69.35604095]
[68.97524261 76.07331085]
[77.37937164 68.01048279]
[87.78231812 62.77433014]
[99.26485443 60.82753754]
[110.81234741 62.34212494]
[121.40443420 67.18426514]
[131.85269165 56.42165375]
[142.30096436 45.65904617]
[152.74922180 34.89643860]
[156.81018066 19.60528946]
[171.22694397 15.86280346]
[181.67521667 5.10019445]
[192.12347412 -5.66241455]
[202.57174683 -16.42502403]
[213.02000427 -27.18763161]
[223.46827698 -37.95024109]
[233.91653442 -48.71284866]
[244.36480713 -59.47546005]
[244.30267334 -75.05216980]
[255.05201721 -85.81814575]
[269.90240479 -85.78138733]
[280.35067749 -96.54399109]
[277.84527588 -111.74363708]
[284.69027710 -125.34507751]
[298.07348633 -132.22647095]
[312.76663208 -129.93519592]
[323.21487427 -140.69779968]
[333.66314697 -151.46040344]
[337.42272949 -159.84503174]
[344.42575073 -162.32987976]
[355.08462524 -172.88395691]
[365.63870239 -183.54281616]
[376.08697510 -194.30543518]
[361.08721924 -194.39372253]
[349.54660034 -203.97567749]
[346.70172119 -218.70341492]
[353.84344482 -231.89416504]
[367.73120117 -237.56250000]
[382.06332397 -233.13641357]
[390.33651733 -220.62425232]
[388.79721069 -205.70439148]
[400.62954712 -214.92373657]
[412.46185303 -224.14308167]
[424.29415894 -233.36242676]
[429.95263672 -248.75442505]
[446.15567017 -251.28303528]
[456.23495483 -238.34704590]
[449.82180786 -223.25389099]
[433.51351929 -221.53010559]
[421.68118286 -212.31076050]
[409.84887695 -203.09141541]
[398.01657104 -193.87207031]
[386.84957886 -183.85716248]
[376.40130615 -173.09455872]
[373.98577881 -166.06730652]
[365.63870239 -162.22509766]
[354.97982788 -151.67100525]
[344.42575073 -141.01214600]
[333.97750854 -130.24954224]
[323.52923584 -119.48693085]
[326.25491333 -104.86814880]
[319.77313232 -91.28689575]
[306.38049316 -84.04183197]
[291.11328125 -86.09572601]
[280.66500854 -75.33312225]
[281.14184570 -60.49033356]
[270.69912720 -49.42667770]
[255.12741089 -49.02719498]
[244.67915344 -38.26458359]
[234.23088074 -27.50197601]
[223.78262329 -16.73936653]
[213.33435059 -5.97675800]
[202.88609314 4.78585100]
[192.43782043 15.54846001]
[181.98956299 26.31106949]
[178.67593384 40.83240128]
[163.51184082 45.34470367]
[153.06356812 56.10731125]
[142.61531067 66.86991882]
[132.16703796 77.63253021]
[137.86914062 89.95259094]
[139.02459717 103.47896576]
[135.49467468 116.58764648]
[127.70319366 127.70478821]
[136.08290100 140.14587402]
[144.46260071 152.58695984]
[158.32594299 162.34625244]
[152.78579712 178.36946106]
[135.85513306 177.48149109]
[132.02151489 160.96665955]
[123.64181519 148.52557373]
[115.26210785 136.08448792]
[98.06547546 139.13157654]
[81.25323486 134.40321350]
[71.68730927 145.95713806]
[62.12138367 157.51104736]
[52.55545807 169.06497192]
[42.98952866 180.61889648]
[33.42360306 192.17280579]
[23.85767746 203.72673035]
[14.29175091 215.28065491]
[28.42235947 210.24815369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 36]
[19 35]
[20 34]
[21 33]
[22 31]
[23 30]
[37 157]
[38 156]
[39 155]
[40 154]
[41 153]
[42 152]
[43 151]
[44 150]
[46 57]
[47 56]
[48 55]
[49 54]
[62 136]
[63 135]
[64 134]
[65 133]
[67 131]
[68 130]
[69 129]
[70 128]
[71 127]
[72 126]
[73 125]
[74 124]
[77 121]
[78 120]
[82 116]
[83 115]
[84 114]
[86 113]
[87 112]
[88 110]
[89 109]
[97 108]
[98 107]
[99 106]
[100 105]
[140 148]
[141 147]
[142 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
