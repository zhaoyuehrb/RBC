%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAGGGGGCGGCCGCGGAGCACUGGUUGGAGCGCCGCGAAGCGCCCGAGCCUCUUGCCUUCGCGGGCGGCGCCCUGGCCGCCGGCAGCCUUGUGGCCGGUGCCCCGAUCCGCCGCGCUCCGGACCCGGGCAGGCGGGGCGCGCCCGCUGCGCGCGGG\
) } def
/len { sequence length } bind def

/coor [
[423.81930542 493.95932007]
[414.30340576 482.36416626]
[404.78750610 470.76901245]
[395.27160645 459.17385864]
[385.75570679 447.57870483]
[376.23980713 435.98355103]
[366.61053467 424.48236084]
[352.46133423 419.82943726]
[349.38235474 404.31072998]
[339.64062500 392.90466309]
[329.89889526 381.49856567]
[320.15716553 370.09246826]
[310.41546631 358.68637085]
[297.52438354 359.47732544]
[286.37365723 352.58248901]
[281.16851807 340.33776855]
[284.02365112 327.14306641]
[274.50775146 315.54791260]
[264.99185181 303.95275879]
[250.93673706 299.02294922]
[248.16300964 283.44677734]
[238.64710999 271.85162354]
[229.13121033 260.25646973]
[219.61531067 248.66130066]
[210.09941101 237.06614685]
[200.58351135 225.47099304]
[191.06761169 213.87583923]
[181.55171204 202.28067017]
[172.03581238 190.68551636]
[162.18258667 179.37561035]
[152.00057983 168.36077881]
[145.11515808 165.56921387]
[141.72940063 157.02828979]
[131.76560974 145.81565857]
[121.69223022 134.70140076]
[111.51022339 123.68656158]
[101.32820892 112.67172241]
[60.43257141 123.29824829]
[46.93634415 116.75210571]
[33.44012070 110.20597076]
[19.94389725 103.65982819]
[6.44767284 97.11369324]
[-7.04855108 90.56755066]
[-16.18784332 89.62727356]
[-20.74357796 83.75811005]
[-34.10867691 76.94824982]
[-48.97438812 81.60103607]
[-62.43148804 74.50447845]
[-66.77559662 60.30362320]
[-80.14069366 53.49376678]
[-96.99844360 51.69028091]
[-99.93212891 34.99208069]
[-84.69862366 27.55052567]
[-73.33083344 40.12866974]
[-59.96573639 46.93852615]
[-45.92359924 42.10593033]
[-32.27248383 48.82170105]
[-27.29881859 63.58315277]
[-13.93372059 70.39301300]
[-0.50241268 77.07132721]
[12.99381161 83.61746979]
[26.49003601 90.16360474]
[39.98625946 96.70974731]
[53.48248291 103.25588226]
[66.97870636 109.80202484]
[72.95861053 105.27535248]
[90.89833069 91.69534302]
[88.26138306 76.92894745]
[85.62444305 62.16254807]
[82.98749542 47.39614868]
[80.35054779 32.62974930]
[77.71360779 17.86335182]
[64.60606384 9.03340626]
[61.66339874 -6.49451208]
[70.63143158 -19.50796318]
[86.18959045 -22.28629875]
[99.10749817 -13.18118095]
[101.72119141 2.40548611]
[92.48000336 15.22640800]
[95.11695099 29.99280739]
[97.75389099 44.75920486]
[100.39083862 59.52560425]
[103.02778625 74.29199982]
[105.66472626 89.05840302]
[112.34304810 102.48970795]
[122.52505493 113.50454712]
[132.70706177 124.51938629]
[140.87501526 128.72599792]
[142.97824097 135.85188293]
[152.94203186 147.06449890]
[163.01541138 158.17877197]
[173.19741821 169.19360352]
[178.28398132 170.76539612]
[181.87104797 173.84510803]
[183.63313293 177.59465027]
[183.63096619 181.16961670]
[193.14686584 192.76477051]
[202.66276550 204.35993958]
[212.17866516 215.95509338]
[221.69456482 227.55024719]
[231.21046448 239.14540100]
[240.72636414 250.74055481]
[250.24226379 262.33572388]
[259.75817871 273.93087769]
[274.49392700 279.69006348]
[276.58700562 294.43685913]
[286.10290527 306.03201294]
[295.61880493 317.62716675]
[313.03286743 319.00628662]
[323.86874390 332.27548218]
[321.82156372 348.94467163]
[331.56326294 360.35073853]
[341.30499268 371.75683594]
[351.04672241 383.16293335]
[360.78842163 394.56903076]
[375.63442993 400.03778076]
[378.01663208 414.74066162]
[386.01312256 419.26467896]
[387.83496094 426.46765137]
[397.35086060 438.06280518]
[406.86676025 449.65795898]
[416.38265991 461.25311279]
[425.89855957 472.84826660]
[435.41445923 484.44342041]
[450.15020752 490.20260620]
[452.24328613 504.94943237]
[461.75918579 516.54455566]
[471.27508545 528.13970947]
[480.79098511 539.73486328]
[495.52673340 545.49407959]
[497.61984253 560.24090576]
[507.13574219 571.83605957]
[524.50018311 577.89184570]
[526.73675537 595.27545166]
[536.47845459 606.68157959]
[546.22021484 618.08764648]
[555.96191406 629.49371338]
[565.70361328 640.89984131]
[575.44537354 652.30590820]
[591.26177979 654.99298096]
[598.89587402 669.10327148]
[592.49145508 683.81256104]
[576.96136475 687.83709717]
[564.21905518 678.08966064]
[564.03924561 662.04760742]
[554.29754639 650.64154053]
[544.55584717 639.23547363]
[534.81408691 627.82934570]
[525.07238770 616.42327881]
[515.33068848 605.01721191]
[503.26870728 603.74334717]
[495.06103516 594.27508545]
[495.54055786 581.35192871]
[486.02465820 569.75677490]
[471.96957397 564.82696533]
[469.19583130 549.25079346]
[459.67993164 537.65563965]
[450.16403198 526.06048584]
[440.64813232 514.46533203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[3 122]
[4 121]
[5 120]
[6 119]
[7 117]
[9 115]
[10 114]
[11 113]
[12 112]
[13 111]
[17 108]
[18 107]
[19 106]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[26 99]
[27 98]
[28 97]
[29 96]
[30 92]
[31 91]
[33 90]
[34 89]
[35 87]
[36 86]
[37 85]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[45 59]
[46 58]
[49 55]
[50 54]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[126 159]
[127 158]
[128 157]
[129 156]
[131 154]
[132 153]
[134 150]
[135 149]
[136 148]
[137 147]
[138 146]
[139 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
