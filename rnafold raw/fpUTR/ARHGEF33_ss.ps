%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAGGGAAGAGGAGGUGGCCUGAGCCAGGACGAUGAGGAUGCAAUGUUGAAGAAUAAGCUGGAGAAGAGAAGUAACCGGCACU\
) } def
/len { sequence length } bind def

/coor [
[55.00481033 120.32850647]
[50.62676239 100.31455231]
[35.78661346 98.13053131]
[20.94646263 95.94651794]
[6.10631227 93.76249695]
[0.62961191 107.79145813]
[-7.82768726 120.24386597]
[-18.83876991 130.49700928]
[-31.84921265 138.03901672]
[-46.20489502 142.49443054]
[-61.18488693 143.64286804]
[-76.03765869 141.42991638]
[-90.01879120 135.96977234]
[-102.42825317 127.53926849]
[-112.64548492 116.56385803]
[-120.16042328 103.59618378]
[-124.59896851 89.28822327]
[-125.74156952 74.35851288]
[-140.58172607 72.17449188]
[-155.42187500 69.99047852]
[-170.26202393 67.80645752]
[-185.29888916 74.35051727]
[-198.32197571 64.38400269]
[-195.93423462 48.15961075]
[-180.59197998 42.36761093]
[-168.07800293 52.96630859]
[-153.23785400 55.15032578]
[-138.39770508 57.33434296]
[-123.55754852 59.51836014]
[-118.16215515 45.55084229]
[-109.78969574 33.12826920]
[-98.85741425 22.87546921]
[-85.91137695 15.30898571]
[-71.59924316 10.81107616]
[-56.63784790 9.61039066]
[-41.77727509 11.77034950]
[-27.76328659 17.18581009]
[-15.29987717 25.58817291]
[-5.01391745 36.55870438]
[2.57638121 49.54940414]
[7.08756876 63.91037750]
[8.29032993 78.92234802]
[23.13047981 81.10636902]
[37.97063065 83.29038239]
[52.81077957 85.47440338]
[56.90016937 75.91224670]
[62.90175247 67.41878510]
[70.54926300 60.37084961]
[79.50341034 55.08112717]
[89.36692047 51.78430939]
[99.70218658 50.62665939]
[110.05065918 51.65954590]
[119.95322418 54.83713531]
[128.97053528 60.01845551]
[136.70251465 66.97362518]
[142.80612183 75.39406586]
[147.01055908 84.90619659]
[149.12928772 95.08798218]
[149.06832886 105.48770142]
[146.83035278 115.64394379]
[160.17048645 122.50257874]
[173.51062012 129.36122131]
[186.85075378 136.21984863]
[200.19088745 143.07849121]
[212.03442383 133.50506592]
[226.74957275 129.58277893]
[241.78683472 131.99119568]
[254.54092407 140.31303406]
[262.80212402 153.10649109]
[265.13909912 168.15502930]
[261.14700317 182.85137939]
[251.51744080 194.64933777]
[237.91883850 201.50480652]
[222.70719910 202.23005676]
[208.51805115 196.69941711]
[197.80973816 185.87112427]
[192.43754578 171.62123108]
[193.33224487 156.41862488]
[179.99211121 149.55998230]
[166.65199280 142.70135498]
[153.31185913 135.84271240]
[139.97172546 128.98408508]
[124.76580048 142.71382141]
[105.29588318 149.08940125]
[84.91416168 147.01310730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[18 29]
[19 28]
[20 27]
[21 26]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
