%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAUAAAGCUCCUACAGCUACCUGGCCUGAGAAGCCAACUCAGACUCAGCCAACAGAGAUUGUUGAUUUGCCUCUUAAGCAAGAGAUUCAUUGCAGCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[140.51116943 145.26304626]
[130.32046509 152.63618469]
[118.82968903 157.75241089]
[106.53153992 160.39236450]
[93.95333862 160.44282532]
[81.63439941 157.90165710]
[70.10293579 152.87782288]
[59.85338211 145.58670044]
[48.62572098 155.53353882]
[37.39805984 165.48037720]
[26.17039680 175.42721558]
[23.77039337 191.28973389]
[9.80078411 199.17831421]
[-5.02214050 193.04150391]
[-9.32750130 177.58694458]
[0.18740502 164.67004395]
[16.22355843 164.19955444]
[27.45121956 154.25271606]
[38.67887878 144.30587769]
[49.90653992 134.35903931]
[41.84513474 117.54734802]
[39.26239777 99.08255768]
[42.40164948 80.70420074]
[50.96714020 64.14366913]
[40.04502869 53.86225510]
[29.12291336 43.58084106]
[18.20079803 33.29943085]
[6.53411007 23.87136841]
[-5.81064796 15.35039711]
[-18.15540504 6.82942581]
[-30.50016403 -1.69154537]
[-42.84492111 -10.21251678]
[-57.87314987 -5.88973856]
[-72.14299774 -12.28546619]
[-78.91669464 -26.37983131]
[-74.99588776 -41.51790619]
[-62.23188019 -50.55195618]
[-46.65143585 -49.21637726]
[-35.61116409 -38.14178848]
[-34.32395172 -22.55727386]
[-21.97919273 -14.03630352]
[-9.63443470 -5.51533222]
[2.71032333 3.00563908]
[15.05508137 11.52661037]
[17.48741341 10.96821880]
[20.28137779 11.28621387]
[23.12721825 12.61532497]
[25.67465019 14.98441315]
[27.56777573 18.30606651]
[28.48221016 22.37731743]
[39.40432358 32.65872955]
[50.32643890 42.94013977]
[61.24855423 53.22154999]
[73.70240021 45.24295044]
[87.71530914 40.51063538]
[102.45652008 39.30516052]
[117.05209351 41.69799423]
[130.63673401 47.54727173]
[142.40505981 56.50622177]
[151.65939331 68.04370880]
[157.85110474 81.47573853]
[160.61308289 96.00597382]
[159.78160095 110.77300262]
[174.10241699 115.23554993]
[188.42323303 119.69809723]
[202.74404907 124.16063690]
[217.06484985 128.62318420]
[232.54203796 125.34181976]
[242.39115906 136.51518250]
[256.71197510 140.97772217]
[271.03277588 145.44027710]
[285.35360718 149.90281677]
[300.06536865 152.82917786]
[315.00381470 154.18666077]
[329.94229126 155.54414368]
[344.88073730 156.90162659]
[359.81918335 158.25910950]
[374.46990967 150.89103699]
[388.02575684 160.11982727]
[386.54165649 176.45169067]
[371.54431152 183.08580017]
[358.46170044 173.19755554]
[343.52325439 171.84007263]
[328.58480835 170.48258972]
[313.64633179 169.12510681]
[298.70788574 167.76762390]
[307.39025879 179.99940491]
[306.43130493 194.96873474]
[296.25918579 205.99269104]
[281.41506958 208.14976501]
[268.52603149 200.47695923]
[263.34616089 186.39970398]
[268.18798828 172.20263672]
[280.89105225 164.22363281]
[266.57025146 159.76109314]
[252.24943542 155.29853821]
[237.92861938 150.83599854]
[223.47575378 154.43655396]
[212.60231018 142.94400024]
[198.28149414 138.48144531]
[183.96067810 134.01890564]
[169.63987732 129.55636597]
[155.31906128 125.09381866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 20]
[9 19]
[10 18]
[11 17]
[24 53]
[25 52]
[26 51]
[27 50]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[63 103]
[64 102]
[65 101]
[66 100]
[67 99]
[69 97]
[70 96]
[71 95]
[72 94]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
