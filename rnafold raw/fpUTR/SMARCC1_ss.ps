%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCGGGGCCGGGAAGCGGCAGUGGCGGCUACGCGCGCGGGGGUGCGCGCGGGAACGACCGGGAAACACCGCGAGGGCCGGGGUGGGCCAGGCUGUGGGGACGACGGGCUGCGACG\
) } def
/len { sequence length } bind def

/coor [
[114.23943329 523.10717773]
[99.69079590 517.97485352]
[90.24449158 505.77770996]
[88.91481018 490.40774536]
[96.12604523 476.76950073]
[109.57711792 469.21490479]
[110.36875153 454.23580933]
[103.31391907 441.11791992]
[111.76874542 427.74533081]
[112.56037903 412.76623535]
[113.35200500 397.78713989]
[114.14363861 382.80804443]
[107.08880615 369.69015503]
[115.54363251 356.31756592]
[100.84238434 347.55819702]
[92.49361420 332.51904297]
[92.83760071 315.23318481]
[101.86972046 300.38745117]
[117.21768951 292.05154419]
[109.48039246 279.32427979]
[117.21768951 265.52410889]
[117.21768951 250.52409363]
[117.21768951 235.52409363]
[117.21768951 220.52409363]
[117.21768951 205.52409363]
[106.87358093 197.71952820]
[102.89135742 185.18338013]
[106.95410919 172.46784973]
[117.77960968 164.32824707]
[118.17556763 149.33348083]
[118.57151794 134.33869934]
[118.96747589 119.34393311]
[89.44479370 127.54464722]
[68.15994263 102.01936340]
[56.43246841 92.66701508]
[44.70499802 83.31466675]
[32.97752380 73.96231842]
[21.25005150 64.60997009]
[9.52258015 55.25762558]
[-2.20489240 45.90527725]
[-18.49269104 43.99748230]
[-24.73503113 28.83288002]
[-14.51033020 16.01151085]
[1.66311717 18.72290039]
[7.14745474 34.17780685]
[18.87492752 43.53015137]
[30.60239983 52.88249969]
[42.32987213 62.23484802]
[54.05734253 71.58719635]
[65.78481293 80.93953705]
[77.51229095 90.29188538]
[90.66451263 83.07946777]
[89.08345795 68.16302490]
[87.50240326 53.24658203]
[75.05540466 43.50759888]
[73.22351074 27.80983734]
[83.09354401 15.46650219]
[98.80979156 13.80067253]
[111.04808807 23.80065727]
[112.54766083 39.53364182]
[102.41884613 51.66552734]
[103.99990082 66.58197021]
[105.58095551 81.49841309]
[112.38058472 84.66306305]
[114.19773102 69.77353668]
[128.92004395 66.90065765]
[136.20175171 80.01464844]
[125.97985077 90.99237061]
[132.77947998 94.15702057]
[145.21011353 85.76183319]
[157.64076233 77.36664581]
[170.07139587 68.97145844]
[177.17732239 54.83581543]
[192.05494690 54.12459946]
[204.48558044 45.72941208]
[208.93682861 30.31623650]
[223.81710815 24.31981087]
[237.71151733 32.34007645]
[239.96148682 48.22457504]
[228.84100342 59.78807449]
[212.88076782 58.16004944]
[200.45013428 66.55523682]
[194.23332214 80.09040070]
[178.46658325 81.40209961]
[166.03594971 89.79728699]
[153.60530090 98.19247437]
[141.17466736 106.58766174]
[133.96224976 119.73988342]
[133.56629944 134.73464966]
[133.17033386 149.72943115]
[132.77438354 164.72419739]
[145.02633667 177.12580872]
[144.59022522 194.21717834]
[132.21768188 205.52409363]
[132.21768188 220.52409363]
[132.21768188 235.52409363]
[132.21768188 250.52409363]
[132.21768188 265.52410889]
[139.95498657 279.32427979]
[132.21768188 292.05154419]
[144.08439636 297.48797607]
[152.94888306 307.00476074]
[157.49745178 319.13891602]
[157.07615662 332.04367065]
[151.78451538 343.76956177]
[142.45510864 352.55889893]
[130.52272034 357.10919189]
[137.52093506 371.29846191]
[129.12272644 383.59967041]
[128.33110046 398.57876587]
[127.53947449 413.55786133]
[126.74784088 428.53695679]
[133.74604797 442.72622681]
[125.34784698 455.02743530]
[124.55621338 470.00653076]
[137.13607788 478.93685913]
[142.86961365 493.25921631]
[139.92729187 508.40338135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 115]
[7 114]
[9 112]
[10 111]
[11 110]
[12 109]
[14 107]
[19 100]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[29 91]
[30 90]
[31 89]
[32 88]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[52 63]
[53 62]
[54 61]
[69 87]
[70 86]
[71 85]
[72 84]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
