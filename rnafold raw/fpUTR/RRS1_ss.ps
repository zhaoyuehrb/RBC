%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUCCCGGCAUCUGCACGUGGUUAUGCUGCCGGAGUUUGGGCCGCCACUGUAGGAAAAGUAACUUCAGCUGCAGCCCCAAAGCGAGUGAGCCGAGCCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[-96.79196930 232.57875061]
[-102.65162659 236.72906494]
[-109.48560333 238.75611877]
[-116.55600739 238.47616577]
[-123.11065674 235.95268250]
[-128.46308899 231.48606873]
[-142.42619324 236.96618652]
[-156.38931274 242.44630432]
[-170.35241699 247.92642212]
[-184.31552124 253.40652466]
[-198.27862549 258.88665771]
[-201.72550964 263.24166870]
[-206.09397888 265.49661255]
[-210.38102722 265.66348267]
[-213.74723816 264.16979980]
[-228.14537048 268.37622070]
[-242.54350281 272.58264160]
[-247.65090942 287.23507690]
[-260.41455078 296.05941772]
[-275.92654419 295.66253662]
[-288.22222900 286.19702148]
[-292.57363892 271.30255127]
[-287.30758667 256.70639038]
[-274.44894409 248.02101135]
[-258.94216919 248.58616638]
[-246.74990845 258.18450928]
[-232.35177612 253.97808838]
[-217.95365906 249.77168274]
[-203.75874329 244.92353821]
[-189.79563904 239.44342041]
[-175.83253479 233.96330261]
[-161.86941528 228.48320007]
[-147.90631104 223.00308228]
[-133.94320679 217.52296448]
[-122.26161957 197.51998901]
[-98.50631714 199.66273499]
[-85.74611664 191.77746582]
[-72.98591614 183.89221191]
[-60.22571182 176.00695801]
[-53.46625137 162.73446655]
[-37.65934372 162.06190491]
[-24.89914322 154.17665100]
[-12.13894272 146.29139709]
[0.50187135 138.21614075]
[13.02047062 129.95268250]
[25.41405106 121.50288391]
[37.54930496 112.68610382]
[49.55131149 103.68877411]
[61.55331421 94.69144440]
[73.55531311 85.69412231]
[83.75790405 74.69834137]
[91.83316803 62.05752563]
[99.90842438 49.41671371]
[107.98368835 36.77589798]
[102.47827911 22.38851929]
[106.45378876 7.68992376]
[118.18332672 -1.73779559]
[133.03733826 -2.44247127]
[141.11259460 -15.08328533]
[149.18785095 -27.72410011]
[152.61947632 -44.32711792]
[169.52362061 -45.62577438]
[175.45104980 -29.74175835]
[161.82865906 -19.64883995]
[153.75340271 -7.00802660]
[145.67814636 5.63278770]
[151.28274536 19.40691376]
[147.65901184 34.01282120]
[135.99325562 43.79869843]
[120.62449646 44.85115814]
[112.54924011 57.49197006]
[104.47398376 70.13278198]
[96.39871979 82.77359772]
[106.66016388 85.47645569]
[112.56626892 93.05679321]
[127.55116272 93.72976685]
[139.04605103 82.88342285]
[154.84103394 83.42551422]
[165.56524658 95.03443146]
[164.85618591 110.82280731]
[153.13453674 121.42367554]
[137.35453796 120.54773712]
[126.87818909 108.71466064]
[111.89329529 108.04168701]
[94.32785797 114.93713379]
[82.55264282 97.69612122]
[70.55064392 106.69345093]
[58.54863739 115.69078064]
[46.54663467 124.68811035]
[41.45055008 132.47106934]
[34.04830933 133.76867676]
[28.72167206 141.39570618]
[21.28392410 142.47128296]
[8.76532650 150.73474121]
[3.21290827 158.19900513]
[-4.25368643 159.05160522]
[-17.01388741 166.93685913]
[-29.77408791 174.82211304]
[-37.44624710 188.65859985]
[-52.34045792 188.76716614]
[-65.10065460 196.65242004]
[-77.86085510 204.53767395]
[-90.62106323 212.42292786]
[-90.40671539 219.75732422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[15 28]
[16 27]
[17 26]
[36 103]
[37 102]
[38 101]
[39 100]
[41 98]
[42 97]
[43 96]
[44 94]
[45 93]
[46 91]
[47 89]
[48 88]
[49 87]
[50 86]
[51 73]
[52 72]
[53 71]
[54 70]
[58 66]
[59 65]
[60 64]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
