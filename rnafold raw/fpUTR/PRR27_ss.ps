%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUAAGGUAUACAGACAGUAGUUAAAUAGCAGGGCCAACUAUUCUGUUAAGGGUCUUCCUAGACAGACUAAAAAAGCCAUGUAUUCUUUCGUUUCUCUCUAAAAGAAGAAAAAUAUAAUUUAAAAAUACAUUGCGUAUUUUCUAAAACAAUAAAUUUAUAGUGUUAAUAUUCAUAGGGUCAAUCAAA\
) } def
/len { sequence length } bind def

/coor [
[31.16894913 229.64900208]
[22.96472549 242.20649719]
[14.76050377 254.76399231]
[6.55628157 267.32150269]
[-1.64794099 279.87899780]
[-9.85216331 292.43649292]
[-1.33183992 306.28793335]
[0.29351863 322.41024780]
[-5.25067234 337.57440186]
[-16.80814934 348.76547241]
[-32.03253174 353.78201294]
[-47.86357117 351.66903687]
[-55.85904694 364.36047363]
[-63.85452271 377.05187988]
[-61.71957397 392.95223999]
[-72.92343903 404.43496704]
[-88.87147522 402.69149780]
[-97.32971191 389.05926514]
[-91.80971527 373.99575806]
[-76.54595184 369.05642700]
[-68.55047607 356.36499023]
[-60.55500031 343.67355347]
[-68.49553680 332.28604126]
[-71.50233459 318.68853760]
[-69.08859253 304.92932129]
[-61.58663177 293.09402466]
[-50.10253143 284.98928833]
[-36.35319138 281.86734009]
[-22.40966034 284.23226929]
[-14.20543861 271.67477417]
[-6.00121593 259.11727905]
[2.20300651 246.55976868]
[10.40722847 234.00227356]
[18.61145210 221.44477844]
[25.96780396 208.37251282]
[32.44411850 194.84265137]
[38.92043304 181.31277466]
[45.39675140 167.78291321]
[44.67485046 163.04536438]
[46.93397903 157.80598450]
[52.31740952 153.91816711]
[59.23752594 140.60981750]
[66.15764618 127.30148315]
[73.07775879 113.99314117]
[67.39484406 100.11133575]
[53.12899399 95.47608185]
[38.86314774 90.84082794]
[24.59729958 86.20557404]
[10.33145237 81.57031250]
[-3.93439579 76.93505859]
[-19.45009613 80.02918243]
[-29.16349411 68.73763275]
[-43.42934036 64.10237122]
[-57.69519043 59.46712112]
[-72.58490753 65.44004822]
[-86.46665192 57.39786148]
[-88.69152832 41.50983047]
[-77.55281067 29.96389961]
[-61.59516907 31.61711502]
[-53.05993652 45.20127106]
[-38.79408646 49.83652878]
[-24.52824020 54.47178268]
[-10.03292751 51.04611588]
[0.70085913 62.66921234]
[14.96670723 67.30446625]
[29.23255539 71.93972015]
[43.49840164 76.57497406]
[57.76425171 81.21023560]
[72.03009796 85.84548950]
[78.47299957 82.00634766]
[68.17580414 71.09912109]
[57.87860489 60.19188690]
[44.76642609 52.90691757]
[39.41717148 38.89315796]
[44.33999634 24.72397041]
[57.22576523 17.04563141]
[72.03022003 19.45977974]
[81.80910492 30.83402252]
[81.97541809 45.83330536]
[86.66711426 60.08068848]
[91.35881042 74.32807159]
[97.80171967 70.48893738]
[100.51492310 55.73635864]
[103.22813416 40.98378372]
[105.94133759 26.23120689]
[108.65454865 11.47863197]
[111.36775970 -3.27394462]
[109.84101105 -12.29854488]
[114.24971008 -18.24713326]
[117.20646667 -32.95283127]
[120.16322327 -47.65853119]
[123.11997986 -62.36423111]
[121.36529541 -68.76873016]
[122.89173126 -74.26643372]
[126.42527008 -77.50363922]
[129.86663818 -92.10353851]
[133.30798340 -106.70343781]
[136.74934387 -121.30333710]
[127.25150299 -133.72608948]
[128.01257324 -149.34515381]
[138.67318726 -160.78565979]
[154.19975281 -162.64575195]
[167.26107788 -154.04716492]
[171.69001770 -139.04988098]
[165.39535522 -124.73516083]
[151.34924316 -117.86197662]
[147.90788269 -103.26207733]
[144.46653748 -88.66217804]
[141.02517700 -74.06227875]
[137.82568359 -59.40747452]
[134.86892700 -44.70177841]
[131.91217041 -29.99607658]
[128.95541382 -15.29037762]
[126.12033081 -0.56073654]
[123.40712738 14.19183922]
[120.69391632 28.94441605]
[117.98070526 43.69699097]
[115.26750183 58.44956970]
[112.55429077 73.20214081]
[118.11402893 78.23596191]
[124.25283813 64.54965973]
[139.16629028 66.15873718]
[142.24444580 80.83950806]
[129.23350525 88.30360413]
[134.79322815 93.33742523]
[149.20454407 89.17638397]
[163.61584473 85.01533508]
[178.02714539 80.85429382]
[192.43846130 76.69325256]
[206.84976196 72.53220367]
[221.26106262 68.37116241]
[230.24076843 55.07663727]
[246.24435425 53.95193863]
[256.99523926 65.85984039]
[254.24624634 81.66561890]
[240.10620117 89.24443817]
[225.42210388 82.78247070]
[211.01080322 86.94351196]
[196.59950256 91.10455322]
[182.18818665 95.26560211]
[167.77688599 99.42664337]
[153.36558533 103.58768463]
[138.95428467 107.74872589]
[138.14976501 115.20545197]
[153.06318665 116.81472015]
[151.45368958 131.72811890]
[136.54072571 130.11891174]
[135.73622131 137.57563782]
[148.92831421 144.71484375]
[162.12042236 151.85404968]
[175.31253052 158.99327087]
[191.13197327 158.75666809]
[198.64273071 171.61892700]
[211.83482361 178.75814819]
[226.90867615 174.00895691]
[240.88688660 181.38359070]
[245.47642517 196.50680542]
[237.95442200 210.40626526]
[222.78352356 214.83566284]
[208.96437073 207.16712952]
[204.69561768 191.95025635]
[191.50350952 184.81103516]
[176.62767029 185.55827332]
[168.17332458 172.18536377]
[154.98121643 165.04615784]
[141.78910828 157.90695190]
[128.59700012 150.76773071]
[122.47374725 146.43695068]
[130.62818909 159.02682495]
[118.40941620 167.72749329]
[103.48604584 166.21319580]
[93.26407623 155.23542786]
[92.81674194 140.24089050]
[92.50935364 125.24404907]
[86.38610077 120.91325378]
[79.46598816 134.22160339]
[72.54586792 147.52993774]
[65.62574768 160.83828735]
[58.92661667 174.25921631]
[52.45030212 187.78909302]
[45.97398758 201.31895447]
[39.49767303 214.84883118]
[53.33799362 209.06561279]
[67.96327972 212.39743042]
[77.93293762 223.60484314]
[79.53825378 238.51869202]
[72.18206024 251.59104919]
[58.60085678 257.95898438]
[43.84683228 255.25367737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[12 22]
[13 21]
[14 20]
[35 182]
[36 181]
[37 180]
[38 179]
[41 178]
[42 177]
[43 176]
[44 175]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[52 62]
[53 61]
[54 60]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[89 113]
[90 112]
[91 111]
[92 110]
[95 109]
[96 108]
[97 107]
[98 106]
[125 143]
[126 142]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
[148 167]
[149 166]
[150 165]
[151 164]
[153 162]
[154 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
