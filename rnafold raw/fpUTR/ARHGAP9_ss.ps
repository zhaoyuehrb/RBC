%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGAAGCAACAGAUGGGGACUGCAGAGGAGGUGGUGGUAUUGGGAUAGUGCUGCAGCCAAGAACUUAACGACUGAAAGUAACUGGGAUAUCUUCAUAAUUAUCUGAAGGUCACAGUGGGAGAACAAAAUUAAAAGAACUGAGAAGACUUACAAGAGAACCUCCUAAGAGUCACCCAAACAAUCGGCUGAGA\
) } def
/len { sequence length } bind def

/coor [
[109.91194916 426.36801147]
[105.84787750 411.92974854]
[102.00471497 426.42904663]
[98.16154480 440.92837524]
[107.31275940 453.60864258]
[106.12072754 469.20071411]
[95.14828491 480.34249878]
[79.57628632 481.77319336]
[66.75735474 472.81726074]
[62.74419403 457.70339966]
[69.43170166 443.56793213]
[83.66223145 437.08520508]
[87.50540161 422.58587646]
[91.34856415 408.08657837]
[88.57177734 398.99444580]
[93.75461578 389.61828613]
[93.75461578 374.61828613]
[93.75461578 359.61828613]
[93.75461578 344.61828613]
[93.63316345 329.61877441]
[93.39026642 314.62075806]
[93.14736938 299.62271118]
[92.90447235 284.62466431]
[81.30712128 277.99490356]
[74.44820404 266.40557861]
[74.21324921 252.83241272]
[80.77071381 240.82252502]
[92.50000000 233.56738281]
[92.50000000 218.56738281]
[92.50000000 203.56738281]
[92.50000000 188.56738281]
[92.50000000 173.56738281]
[92.50000000 158.56738281]
[92.50000000 143.56738281]
[70.03087616 132.49951172]
[57.18196106 110.99917603]
[42.23110199 112.21238708]
[27.28024483 113.42559052]
[12.32938862 114.63879395]
[-2.62146878 115.85200500]
[-17.57232666 117.06520844]
[-32.52318192 118.27841949]
[-47.47404099 119.49162292]
[-62.42489624 120.70483398]
[-77.72310638 128.01243591]
[-88.98009491 115.33503723]
[-79.91437531 101.00852203]
[-63.63810349 105.75397491]
[-48.68724823 104.54076385]
[-33.73638916 103.32756042]
[-18.78553200 102.11435699]
[-3.83467555 100.90114594]
[11.11618137 99.68794250]
[26.06703949 98.47473145]
[41.01789474 97.26152802]
[55.96875381 96.04831696]
[57.36224365 88.32146454]
[60.10065079 80.96297455]
[64.09758759 74.20497131]
[53.57721710 63.51283646]
[43.05684280 52.82070541]
[27.80378342 54.97718048]
[14.36275768 47.82230377]
[7.78982925 34.28492355]
[10.41717815 19.64815521]
[-0.10319658 8.95602131]
[-10.62357140 -1.73611188]
[-21.14394569 -12.42824554]
[-36.22342300 -9.17050648]
[-50.66232300 -14.60389709]
[-59.85324478 -26.99464226]
[-60.86339569 -42.38889694]
[-53.37044144 -55.87441635]
[-39.76535797 -63.14801407]
[-24.38947678 -61.88871765]
[-12.14918518 -52.49835968]
[-6.95031738 -37.97336960]
[-10.45181179 -22.94861984]
[0.06856248 -12.25648594]
[10.58893681 -1.56435287]
[21.10931206 9.12778091]
[35.78670883 6.73779058]
[49.21587372 13.52906895]
[56.15216064 27.08419037]
[53.74897385 42.30033112]
[64.26934814 52.99246216]
[74.78972626 63.68459702]
[80.32229614 60.41270065]
[86.27084351 57.97766495]
[92.50962067 56.43096542]
[98.90674591 55.80530167]
[101.08516693 40.96433258]
[103.26359558 26.12335968]
[105.44202423 11.28238678]
[107.62045288 -3.55858517]
[109.79888153 -18.39955711]
[111.97731018 -33.24052811]
[100.78769684 -43.99097443]
[98.08720398 -59.27125549]
[104.91423035 -73.20578766]
[118.64365387 -80.43647003]
[133.99621582 -78.18294525]
[145.06855774 -67.31174469]
[147.60311890 -52.00307083]
[140.62533569 -38.14341736]
[126.81828308 -31.06210136]
[124.63985443 -16.22112846]
[122.46142578 -1.38015652]
[120.28299713 13.46081543]
[118.10456848 28.30178833]
[115.92613983 43.14276123]
[113.74771118 57.98373032]
[122.28857422 58.55615234]
[131.01594543 60.90238953]
[139.55876160 65.09745026]
[152.34202576 57.24961853]
[165.12527466 49.40178680]
[177.90852356 41.55395508]
[173.93910217 26.97930908]
[174.23799133 11.87674713]
[178.78097534 -2.52943063]
[187.19976807 -15.07138157]
[198.81190491 -24.73238564]
[212.67604065 -30.72926903]
[227.66825867 -32.57588959]
[242.57321167 -30.12255478]
[256.18264771 -23.56814003]
[267.39324951 -13.44398308]
[275.29629517 -0.57080656]
[279.25106812 14.00782013]
[278.93701172 29.11007309]
[274.37954712 43.51168060]
[265.94818115 56.04516602]
[254.32633972 65.69450378]
[240.45619202 71.67745209]
[225.46212769 73.50901031]
[210.55963135 71.04070282]
[196.95680237 64.47261810]
[185.75634766 54.33720779]
[172.97309875 62.18503952]
[160.18984985 70.03286743]
[147.40660095 77.88069916]
[148.49581909 85.30118561]
[163.33677673 83.12275696]
[178.17779541 80.94458008]
[180.35572815 95.78562164]
[165.51521301 97.96372986]
[150.67424011 100.14215851]
[151.76345825 107.56264496]
[166.26277161 111.40581512]
[180.76208496 115.24897766]
[196.44085693 110.44189453]
[208.25729370 121.81308746]
[204.05564880 137.66484070]
[188.15821838 141.69024658]
[176.91891479 129.74829102]
[162.41960144 125.90512848]
[147.92028809 122.06195831]
[129.52940369 138.45097351]
[107.50000000 143.56738281]
[107.50000000 158.56738281]
[107.50000000 173.56738281]
[107.50000000 188.56738281]
[107.50000000 203.56738281]
[107.50000000 218.56738281]
[107.50000000 233.56738281]
[121.31414032 243.31599426]
[126.54872894 259.21807861]
[121.33075714 274.95068359]
[107.90250397 284.38177490]
[108.14540100 299.37982178]
[108.38829803 314.37783813]
[108.63119507 329.37588501]
[111.90297699 337.91989136]
[108.75461578 344.61828613]
[108.75461578 359.61828613]
[108.75461578 374.61828613]
[108.75461578 389.61828613]
[116.38269043 376.70269775]
[127.70681000 366.86581421]
[141.56239319 361.11926270]
[156.52452087 360.05401611]
[171.05447388 363.77963257]
[183.65800476 371.91299438]
[193.03892517 383.61761475]
[198.23252869 397.68978882]
[198.70466614 412.68237305]
[194.40681458 427.05346680]
[185.78096008 439.32516479]
[173.71417236 448.23541260]
[159.44743347 452.86791992]
[144.44793701 452.74624634]
[130.25822449 447.88290405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[16 178]
[17 177]
[18 176]
[19 175]
[20 173]
[21 172]
[22 171]
[23 170]
[28 166]
[29 165]
[30 164]
[31 163]
[32 162]
[33 161]
[34 160]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[59 87]
[60 86]
[61 85]
[65 81]
[66 80]
[67 79]
[68 78]
[91 112]
[92 111]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[115 142]
[116 141]
[117 140]
[118 139]
[149 158]
[150 157]
[151 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
