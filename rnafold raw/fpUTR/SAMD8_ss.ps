%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGAGGCGGGGAGGGCCCCGGACUCCGACGGCGGCUCGGACGCCGACUCGGAGGUGGGUCCGGGGAGCCCGACUCGGACCGCGGAGGUGAGCGGGAGCUGAGGCUGAGGAGAGGGGAGCUUGGGGGGCGCCUGCUGCCAAGGGCAGCGGAGGAGGAA\
) } def
/len { sequence length } bind def

/coor [
[59.34498978 101.94813538]
[44.61485672 107.72167206]
[33.06771851 98.31354523]
[18.20917702 96.25836182]
[3.35063720 94.20317841]
[-7.42057180 105.21622467]
[-22.43575859 107.74556732]
[-35.90188980 101.02787781]
[-42.74826813 87.82692719]
[-57.60680771 85.77174377]
[-72.46534729 83.71655273]
[-87.32389069 81.66136932]
[-99.84471130 90.92780304]
[-114.88410187 88.63188934]
[-123.64107513 76.63809204]
[-138.49961853 74.58290863]
[-153.35815430 72.52772522]
[-168.21669006 70.47254181]
[-183.11271667 68.70948029]
[-198.04049683 67.23921967]
[-212.96826172 65.76896667]
[-227.89602661 64.29870605]
[-242.82380676 62.82844925]
[-257.75158691 61.35819244]
[-272.67935181 59.88793564]
[-287.66128540 59.15192032]
[-302.66128540 59.15192032]
[-317.66128540 59.15192032]
[-332.66128540 59.15192032]
[-347.66128540 59.15192032]
[-362.65838623 59.44642639]
[-377.64682007 60.03532410]
[-392.63525391 60.62422180]
[-407.62368774 61.21311951]
[-422.61212158 61.80201340]
[-432.04202271 74.27642822]
[-447.29562378 77.72055817]
[-461.17062378 70.50818634]
[-467.11569214 56.04477692]
[-462.32373047 41.15950775]
[-449.05737305 32.88075256]
[-433.58059692 35.11748123]
[-423.20101929 46.81357956]
[-408.21258545 46.22468185]
[-393.22415161 45.63578415]
[-378.23571777 45.04688644]
[-363.24728394 44.45798874]
[-359.37493896 41.58266449]
[-353.64321899 41.14440918]
[-347.66128540 44.15192032]
[-332.66128540 44.15192032]
[-317.66128540 44.15192032]
[-302.66128540 44.15192032]
[-287.66128540 44.15192032]
[-296.01367188 31.69248772]
[-291.67269897 17.33436012]
[-277.81643677 11.58941174]
[-264.58935547 18.66363525]
[-261.67529297 33.37784958]
[-271.20907593 44.96016312]
[-256.28131104 46.43042374]
[-241.35354614 47.90068054]
[-226.42578125 49.37093735]
[-211.49800110 50.84119415]
[-196.57023621 52.31145096]
[-181.64245605 53.78170776]
[-177.41268921 51.46405792]
[-171.67495728 51.81525040]
[-166.16151428 55.61399841]
[-151.30296326 57.66918564]
[-136.44442749 59.72436905]
[-121.58588409 61.77955627]
[-109.90209961 52.61306000]
[-94.80414581 54.48564529]
[-85.26870728 66.80283356]
[-70.41016388 68.85801697]
[-55.55162430 70.91320038]
[-40.69308472 72.96838379]
[-30.52047729 62.12144470]
[-15.73647785 59.31122589]
[-1.97159719 65.82132721]
[5.40582228 79.34463501]
[20.26436234 81.39981842]
[35.12290192 83.45500946]
[48.79025269 77.53446960]
[61.40017700 87.08959198]
[68.37879181 73.32605743]
[80.13879395 62.95140457]
[95.13662720 57.57394409]
[111.31037140 58.12941742]
[126.36304474 64.72396851]
[138.08877563 76.59310913]
[144.69564819 92.18612671]
[159.04975891 87.83186340]
[173.40386963 83.47759247]
[176.95086670 70.12773895]
[186.56451416 60.36074448]
[199.64790344 56.66194534]
[212.74177551 59.89781189]
[222.43898010 69.11581421]
[236.87580872 65.04420471]
[248.05763245 53.85147858]
[262.40728760 57.84358597]
[276.84411621 53.77198029]
[291.28094482 49.70037079]
[305.71777344 45.62876511]
[320.15460205 41.55715942]
[323.25927734 26.56984711]
[332.98226929 14.74942780]
[347.08926392 8.81214428]
[362.33859253 10.12234211]
[375.22604370 18.37894630]
[382.79022217 31.68465042]
[383.29293823 46.98190308]
[376.61862183 60.75550461]
[364.30099487 69.84038544]
[349.17059326 72.14890289]
[334.70422363 67.15057373]
[324.22619629 55.99398804]
[309.78936768 60.06559372]
[295.35253906 64.13719940]
[280.91571045 68.20880890]
[266.47888184 72.28041077]
[256.32968140 83.18191528]
[240.94740295 79.48103333]
[226.51057434 83.55264282]
[221.34310913 99.10883331]
[207.79672241 108.63032532]
[191.07810974 108.21616364]
[177.75813293 97.83169556]
[163.40403748 102.18596649]
[149.04992676 106.54023743]
[144.83677673 120.93639374]
[154.57850647 132.34248352]
[164.32022095 143.74858093]
[174.06195068 155.15466309]
[183.80366516 166.56076050]
[193.54537964 177.96684265]
[203.28710938 189.37294006]
[213.02882385 200.77902222]
[227.91319275 208.89640808]
[224.23344421 225.44621277]
[207.31176758 226.49169922]
[201.62274170 210.52073669]
[191.88101196 199.11465454]
[182.13929749 187.70855713]
[172.39758301 176.30247498]
[162.65585327 164.89637756]
[152.91413879 153.49029541]
[143.17240906 142.08421326]
[133.43069458 130.67811584]
[125.10289001 137.23474121]
[115.57419586 141.62071228]
[105.39235687 143.64009094]
[95.12982178 143.23132324]
[85.35157776 140.46800232]
[76.58409882 135.55186462]
[69.28693390 128.79911804]
[63.82875443 120.62038422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[3 84]
[4 83]
[5 82]
[9 78]
[10 77]
[11 76]
[12 75]
[15 72]
[16 71]
[17 70]
[18 69]
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[93 132]
[94 131]
[95 130]
[100 126]
[101 125]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
[133 151]
[134 150]
[135 149]
[136 148]
[137 147]
[138 146]
[139 145]
[140 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
