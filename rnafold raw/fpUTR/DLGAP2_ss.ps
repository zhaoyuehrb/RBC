%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACCCGCGAGCCCCGGGAGCCGUCGGUCUGAGGAGGGGCCGCUUCGCCAUGUCGCCCCGCACCUGCUGAGCCCGGAGCGUCCGAGG\
) } def
/len { sequence length } bind def

/coor [
[83.04168701 337.24813843]
[70.14367676 346.38140869]
[54.57949066 343.63702393]
[45.58308792 330.64318848]
[48.49187469 315.10888672]
[61.58012009 306.25036621]
[64.18483734 291.47824097]
[66.53135681 276.66290283]
[68.61895752 261.80889893]
[66.38322449 254.59045410]
[71.04737854 246.47644043]
[73.65209961 231.70433044]
[75.99861908 216.88899231]
[78.08621216 202.03497314]
[72.19550323 188.35473633]
[81.77812195 175.76570129]
[83.86571503 160.91168213]
[85.95330811 146.05764771]
[88.04090881 131.20362854]
[90.12850189 116.34960938]
[81.49254608 104.71490479]
[83.50909424 90.36639404]
[95.01747131 81.56278992]
[89.27608490 66.82009888]
[98.70938110 55.29351044]
[100.79697418 40.43948746]
[95.05558777 25.69679451]
[104.48888397 14.17020702]
[106.57647705 -0.68381357]
[108.66407776 -15.53783417]
[106.75392914 -19.40557480]
[106.15026855 -23.30443382]
[106.71489716 -26.84180832]
[108.20198822 -29.70459938]
[110.29115295 -31.68612671]
[112.62651825 -32.70104218]
[109.53239441 -48.21674347]
[120.82394409 -57.93014145]
[125.45920563 -72.19599152]
[130.09445190 -86.46183777]
[134.72970581 -100.72768402]
[139.36495972 -114.99353027]
[136.27084351 -130.50923157]
[147.56239319 -140.22262573]
[152.19764709 -154.48847961]
[142.96833801 -166.96243286]
[142.86734009 -182.47917175]
[151.93348694 -195.07221985]
[166.68066406 -199.89926147]
[181.43827820 -195.10421753]
[190.53173828 -182.53088379]
[190.46440125 -167.01396179]
[181.26217651 -154.52000427]
[166.46350098 -149.85322571]
[161.82824707 -135.58737183]
[165.25390625 -121.09206390]
[153.63081360 -110.35827637]
[148.99555969 -96.09243011]
[144.36030579 -81.82658386]
[139.72505188 -67.56073761]
[135.08979797 -53.29488754]
[138.51545715 -38.79957581]
[126.89236450 -28.06578827]
[123.51809692 -13.45023823]
[121.43050385 1.40378296]
[119.34290314 16.25780487]
[125.23361206 29.93803978]
[115.65100098 42.52708435]
[113.56340027 57.38110733]
[119.45410919 71.06134033]
[109.87149811 83.65039062]
[118.50745392 95.28509521]
[116.49090576 109.63360596]
[104.98252869 118.43721008]
[102.89492798 133.29122925]
[100.80733490 148.14524841]
[98.71973419 162.99926758]
[96.63214111 177.85328674]
[102.37352753 192.59599304]
[92.94023132 204.12257385]
[90.85263824 218.97659302]
[92.78114319 228.13478088]
[88.42421722 234.30905151]
[85.81949615 249.08116150]
[83.47297668 263.89648438]
[81.38537598 278.75051880]
[83.31388092 287.90869141]
[78.95695496 294.08294678]
[76.35223389 308.85507202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 89]
[7 88]
[8 86]
[9 85]
[11 84]
[12 83]
[13 81]
[14 80]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[23 71]
[25 69]
[26 68]
[28 66]
[29 65]
[30 64]
[36 63]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[44 55]
[45 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
