%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCAUGUAAGCAGCUUCGCUUCCUGCCGCAACCGUCCGCGGCCUGAGGAGCCCACCGCCGCUCUCGGGGGCCGACUUCCGGGGGCUGAGCCGUUGAAGCGGAGGCUGGGGCGGGGGGCAGCCGGCGCGGCCGGGGCAGGAGGCGCAGACUCAUGAA\
) } def
/len { sequence length } bind def

/coor [
[-15.37850189 785.35986328]
[-29.84044266 779.41119385]
[-37.04938889 765.53442383]
[-33.60149384 750.28167725]
[-21.12474823 740.85485840]
[-20.53214836 725.86657715]
[-19.93955040 710.87829590]
[-19.34695053 695.89001465]
[-32.13080597 703.73687744]
[-46.30396652 698.82550049]
[-51.49154282 684.75109863]
[-43.89617538 671.81622314]
[-29.07774925 669.48937988]
[-17.88348007 679.47381592]
[-15.81545162 664.61706543]
[-13.89429474 649.74060059]
[-12.12019730 634.84588623]
[-18.29789543 621.29284668]
[-8.98271275 608.50463867]
[-7.20861483 593.60992432]
[-5.43451738 578.71520996]
[-3.66041970 563.82049561]
[-1.88632226 548.92578125]
[-0.11222466 534.03106689]
[1.66187286 519.13635254]
[3.43597054 504.24160767]
[5.21006823 489.34689331]
[6.98416567 474.45217896]
[8.75826359 459.55746460]
[7.07804251 457.25061035]
[6.23553944 454.12185669]
[6.55511236 450.49624634]
[8.23400879 446.81250000]
[11.30597782 443.57403564]
[14.25049782 428.86590576]
[17.19501877 414.15774536]
[12.10663795 400.15924072]
[22.40239143 388.14642334]
[25.34691048 373.43826294]
[28.29143143 358.73010254]
[31.23595238 344.02197266]
[34.18047333 329.31381226]
[32.40037918 322.09936523]
[37.33119583 314.34542847]
[40.56573486 299.69833374]
[38.92852402 292.45013428]
[44.01157761 284.79513550]
[42.51789093 277.51599121]
[47.75119400 269.96295166]
[40.04188538 257.27032471]
[43.69977570 242.50299072]
[57.06521606 234.50282288]
[60.87588501 219.99493408]
[64.68655396 205.48704529]
[68.49722290 190.97915649]
[64.24705505 176.70381165]
[75.23637390 165.32200623]
[79.04704285 150.81411743]
[82.85771179 136.30622864]
[86.66838074 121.79834747]
[90.47904968 107.29045868]
[72.49888611 86.29463196]
[69.55436707 71.58647919]
[66.60984802 56.87832260]
[63.66532516 42.17016983]
[60.72080231 27.46201515]
[57.77628326 12.75386047]
[54.83176422 -1.95429337]
[51.88724518 -16.66244698]
[48.94272232 -31.37060165]
[45.99820328 -46.07875443]
[43.05368423 -60.78691101]
[31.82528305 -72.73911285]
[36.82039261 -88.35900116]
[52.90047455 -91.57817078]
[63.52371216 -79.08502197]
[57.76183701 -63.73143005]
[60.70635605 -49.02327728]
[63.65087891 -34.31512070]
[66.59539795 -19.60696793]
[69.53991699 -4.89881372]
[72.48443604 9.80934048]
[75.42895508 24.51749420]
[78.37348175 39.22565079]
[81.31800079 53.93380356]
[84.26251984 68.64196014]
[87.20703888 83.35011292]
[101.59563446 87.58902740]
[105.65658569 72.29787445]
[120.07334900 68.55538940]
[130.52162170 57.79278183]
[140.96987915 47.03017426]
[151.41815186 36.26756287]
[155.47909546 20.97641563]
[169.89585876 17.23393059]
[180.34413147 6.47132158]
[190.79240417 -4.29128742]
[197.48686218 -19.86756325]
[214.30763245 -17.74665833]
[216.92605591 -0.99613029]
[201.55500793 6.15697813]
[191.10673523 16.91958618]
[180.65847778 27.68219566]
[177.34484863 42.20352936]
[162.18075562 46.71582794]
[151.73249817 57.47843933]
[141.28422546 68.24105072]
[130.83595276 79.00365448]
[127.52233124 93.52499390]
[112.35823822 98.03729248]
[104.98693848 111.10112762]
[101.17626953 125.60901642]
[97.36560059 140.11689758]
[93.55493164 154.62478638]
[89.74426270 169.13267517]
[93.72186279 184.44572449]
[83.00511169 194.78982544]
[79.19444275 209.29771423]
[75.38377380 223.80560303]
[71.57310486 238.31349182]
[79.28192139 251.84906006]
[75.21069336 266.50784302]
[62.25907898 273.77362061]
[58.59192276 288.31842041]
[55.21284103 302.93286133]
[51.97830582 317.57998657]
[48.88862610 332.25833130]
[45.94410706 346.96649170]
[42.99958420 361.67462158]
[40.05506516 376.38278198]
[37.11054611 391.09094238]
[41.98831177 406.14144897]
[31.90317154 417.10226440]
[28.95865250 431.81042480]
[26.01413155 446.51855469]
[23.65297890 461.33157349]
[21.87888145 476.22628784]
[20.10478401 491.12100220]
[18.33068657 506.01571655]
[16.55658913 520.91046143]
[14.78249168 535.80517578]
[13.00839424 550.69989014]
[11.23429680 565.59460449]
[9.46019936 580.48931885]
[7.68610144 595.38403320]
[5.91200399 610.27874756]
[11.96280670 624.89715576]
[2.77451897 636.61999512]
[1.00042140 651.51470947]
[3.09989619 660.46057129]
[-0.95869380 666.68511963]
[-3.02672243 681.54187012]
[-4.35866070 696.48260498]
[-4.95126009 711.47088623]
[-5.54385900 726.45916748]
[-6.13645792 741.44744873]
[5.55707836 751.82989502]
[7.78998375 767.30725098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 156]
[6 155]
[7 154]
[8 153]
[14 152]
[15 151]
[16 149]
[17 148]
[19 146]
[20 145]
[21 144]
[22 143]
[23 142]
[24 141]
[25 140]
[26 139]
[27 138]
[28 137]
[29 136]
[34 135]
[35 134]
[36 133]
[38 131]
[39 130]
[40 129]
[41 128]
[42 127]
[44 126]
[45 125]
[47 124]
[49 123]
[52 120]
[53 119]
[54 118]
[55 117]
[57 115]
[58 114]
[59 113]
[60 112]
[61 111]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[88 110]
[90 108]
[91 107]
[92 106]
[93 105]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
