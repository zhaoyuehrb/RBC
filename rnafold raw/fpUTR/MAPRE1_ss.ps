%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUACGUCGGCGCGUAACGAGGGGGUGCGUGUGAGGUCAUCGCGCGGGCGGGCGGGCGGGGUCUGGCGGUUUGAACGAGACGAAGACGGAACCGGAGCCGGUUGCGGGCAGUGGACGCGGUUCUGCCGAGAGCCGAAG\
) } def
/len { sequence length } bind def

/coor [
[182.14550781 428.34063721]
[179.46394348 413.58227539]
[185.03909302 399.65682983]
[197.16455078 390.82656860]
[212.12898254 389.79421997]
[225.35191345 396.87554932]
[220.08129883 382.83203125]
[214.81066895 368.78851318]
[209.54005432 354.74496460]
[192.47366333 343.21899414]
[195.97448730 322.13281250]
[189.77110291 308.47564697]
[177.46299744 300.08758545]
[178.80046082 284.32299805]
[172.59707642 270.66583252]
[166.39370728 257.00866699]
[160.19032288 243.35151672]
[153.98695374 229.69435120]
[147.78356934 216.03718567]
[133.79191589 211.06033325]
[127.30625153 197.29840088]
[132.62130737 182.65640259]
[115.16744995 177.33840942]
[106.92758179 160.70422363]
[113.49334717 143.00234985]
[106.68348694 129.63725281]
[99.87363434 116.27215576]
[85.58476257 107.54983521]
[86.55229187 90.83713531]
[79.44425964 77.62820435]
[72.33622742 64.41927338]
[58.98332596 55.93336487]
[59.76570511 41.05932236]
[46.45869064 38.67827225]
[37.10813522 29.18741989]
[34.98863983 16.23148155]
[40.65654755 4.60655308]
[33.84668732 -8.75854492]
[27.03683090 -22.12364197]
[20.29662323 -28.41322899]
[20.22792053 -35.86590576]
[13.71966362 -49.38043976]
[7.21140766 -62.89496994]
[-7.43472719 -68.19860077]
[-13.84250450 -81.99697113]
[-8.69604588 -95.92713928]
[-15.20430183 -109.44167328]
[-21.71255684 -122.95620728]
[-28.22081375 -136.47073364]
[-34.72906876 -149.98527527]
[-47.68780518 -159.06170654]
[-46.23889542 -173.88566589]
[-59.19763184 -182.96211243]
[-57.74872208 -197.78607178]
[-64.25698090 -211.30061340]
[-70.76523590 -224.81513977]
[-77.27349091 -238.32966614]
[-83.78174591 -251.84420776]
[-96.10165405 -263.49136353]
[-88.32015991 -278.55404663]
[-71.69199371 -275.24642944]
[-70.26721191 -258.35244751]
[-63.75895691 -244.83792114]
[-57.25070190 -231.32339478]
[-50.74244690 -217.80886841]
[-44.23419189 -204.29432678]
[-31.74096680 -196.18453979]
[-32.72436523 -180.39392090]
[-20.23114014 -172.28413391]
[-21.21453667 -156.49353027]
[-14.70628071 -142.97898865]
[-8.19802475 -129.46446228]
[-1.68976855 -115.94992828]
[4.81848764 -102.43539429]
[18.91829491 -97.77374268]
[25.71111298 -84.16079712]
[20.72594070 -69.40322876]
[27.23419762 -55.88869476]
[33.74245453 -42.37416077]
[40.40192795 -28.93350029]
[47.21178818 -15.56840229]
[54.02164459 -2.20330453]
[70.19442749 2.27185726]
[78.32163239 17.33662033]
[72.97463989 33.95129013]
[85.81912231 41.49240494]
[85.54515839 57.31124115]
[92.65319061 70.52017212]
[99.76122284 83.72910309]
[110.73809052 87.77329254]
[116.16555786 98.13619232]
[113.23873138 109.46229553]
[120.04858398 122.82739258]
[126.85844421 136.19248962]
[138.76026917 137.61665344]
[148.37574768 144.57023621]
[153.35409546 155.20898438]
[152.54856873 166.80657959]
[146.27845764 176.45303345]
[160.80191040 182.08395386]
[166.89846802 196.02262878]
[161.44073486 209.83381653]
[167.64411926 223.49098206]
[173.84748840 237.14813232]
[180.05087280 250.80529785]
[186.25424194 264.46246338]
[192.45762634 278.11962891]
[205.20944214 287.48455811]
[203.42826843 302.27227783]
[209.63165283 315.92944336]
[218.96449280 318.07330322]
[226.12614441 324.21963501]
[229.55876160 332.86199951]
[228.59497070 341.97186279]
[223.58357239 349.47436523]
[228.85420227 363.51788330]
[234.12481689 377.56140137]
[239.39544678 391.60491943]
[246.05491638 405.04559326]
[254.03540039 417.74645996]
[262.01586914 430.44732666]
[269.99636841 443.14816284]
[277.97683716 455.84902954]
[285.95733643 468.54989624]
[293.93780518 481.25076294]
[308.68148804 488.43103027]
[309.56497192 504.80633545]
[295.67941284 513.53125000]
[281.30908203 505.63021851]
[281.23693848 489.23123169]
[273.25646973 476.53039551]
[265.27597046 463.82952881]
[257.29550171 451.12866211]
[249.31501770 438.42779541]
[241.33453369 425.72692871]
[233.35404968 413.02606201]
[230.97767639 427.83663940]
[221.09086609 439.11718750]
[206.71977234 443.41506958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 118]
[7 117]
[8 116]
[9 115]
[11 110]
[12 109]
[14 107]
[15 106]
[16 105]
[17 104]
[18 103]
[19 102]
[22 99]
[25 94]
[26 93]
[27 92]
[29 89]
[30 88]
[31 87]
[33 85]
[37 82]
[38 81]
[39 80]
[41 79]
[42 78]
[43 77]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[52 68]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
