%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCGCCCAAAGCGGGGUUGCGCCGGGGCCUCCGGGGCCGAGGUGGGCCUGCUCAUUGGAAGAUCGCAUCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[20.29994202 224.59565735]
[17.38952637 227.36219788]
[14.09725666 228.65257263]
[11.02526569 228.55589294]
[0.20722909 238.94676208]
[-10.61080742 249.33763123]
[-21.42884445 259.72848511]
[-23.18818283 275.67480469]
[-36.82882309 284.11947632]
[-51.88682938 278.58450317]
[-56.81099319 263.31582642]
[-47.82391357 250.02627563]
[-31.81970978 248.91046143]
[-21.00167274 238.51959229]
[-10.18363667 228.12872314]
[0.63440049 217.73786926]
[10.58124065 206.51020813]
[19.59237480 194.51855469]
[28.60350800 182.52691650]
[37.61464310 170.53527832]
[46.62577438 158.54364014]
[55.63690948 146.55200195]
[64.64804077 134.56034851]
[62.30756378 119.89550781]
[71.27531433 107.60591125]
[86.67301941 105.25043488]
[88.54882812 91.39500427]
[101.33533478 85.73843384]
[110.34647369 73.74679565]
[119.11430359 61.57612610]
[120.58602142 45.82351685]
[134.18360901 39.74446487]
[142.70457458 27.39970779]
[151.22555542 15.05494976]
[159.74652100 2.71019220]
[166.71736145 -10.57164860]
[172.03643799 -24.59689140]
[177.35551453 -38.62213516]
[182.67459106 -52.64738083]
[187.99366760 -66.67262268]
[181.27964783 -80.97987366]
[186.72737122 -95.81556702]
[201.10481262 -102.37794495]
[215.88208008 -96.77366638]
[222.29208374 -82.32765198]
[216.53189087 -67.61046600]
[202.01890564 -61.35354996]
[196.69982910 -47.32830429]
[191.38075256 -33.30306244]
[186.06169128 -19.27781868]
[180.74261475 -5.25257492]
[195.35366821 -8.64622498]
[208.27644348 -1.03032184]
[212.38555908 13.39587498]
[205.41534424 26.67804337]
[191.20901489 31.49265289]
[177.59968567 25.18502235]
[172.09127808 11.23116302]
[163.57031250 23.57592201]
[155.04933167 35.92068100]
[146.52836609 48.26543808]
[145.66612244 63.13506317]
[131.45906067 70.09709930]
[130.21792603 77.59684753]
[122.33811188 82.75792694]
[113.32698059 94.74956512]
[111.45117188 108.60499573]
[98.66466522 114.26156616]
[100.68609619 129.70668030]
[91.37670135 141.73954773]
[76.63968658 143.57148743]
[67.62855530 155.56312561]
[58.61741638 167.55476379]
[49.60628510 179.54641724]
[40.59514999 191.53805542]
[31.58401489 203.52969360]
[22.57288170 215.52133179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[17 77]
[18 76]
[19 75]
[20 74]
[21 73]
[22 72]
[23 71]
[26 68]
[28 66]
[29 65]
[30 63]
[32 61]
[33 60]
[34 59]
[35 58]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
