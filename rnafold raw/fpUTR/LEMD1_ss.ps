%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAGGGACUGGUUGCUAGUGGAAACCUCAGAGUGAAACUCACCCAGCUUUAGUAACCAACUCGAUUGCAUAGACUUUAGAUAACCAUGUGAAGGGGAUUCUACCAUCAGAAAAGAGGCCAAACUUCUAUCAUC\
) } def
/len { sequence length } bind def

/coor [
[49.32629776 157.35209656]
[40.88307953 148.60325623]
[33.93194199 138.62770081]
[28.64833450 127.67719269]
[25.16560745 116.02812195]
[23.57166481 103.97451782]
[8.58767033 103.28176117]
[-6.39632416 102.58901215]
[-16.48971176 110.71311188]
[-29.00928879 109.77445984]
[-37.23350525 100.82736969]
[-52.19750214 99.78870392]
[-67.16149902 98.75003815]
[-82.12549591 97.71137238]
[-97.08949280 96.67270660]
[-112.05348206 95.63404083]
[-127.01747894 94.59537506]
[-141.98147583 93.55670929]
[-156.94548035 92.51804352]
[-171.90946960 91.47937775]
[-186.90046692 90.95973969]
[-201.90046692 90.95973969]
[-216.90046692 90.95973969]
[-205.33134460 100.50727081]
[-199.94326782 114.50614929]
[-202.12561035 129.34654236]
[-211.31564331 141.20164490]
[-225.14358521 147.01441956]
[-240.04365540 145.28596497]
[-252.17369080 136.46199036]
[-258.40573120 122.81788635]
[-257.13278198 107.87199402]
[-248.68310547 95.47834015]
[-235.23478699 88.83265686]
[-249.83634949 85.39839935]
[-264.43792725 81.96414185]
[-279.03948975 78.52988434]
[-295.84222412 80.78924561]
[-302.66473389 65.26863098]
[-289.63934326 54.41619873]
[-275.60522461 63.92831421]
[-261.00366211 67.36257172]
[-246.40209961 70.79682922]
[-231.80052185 74.23108673]
[-216.90046692 75.95973969]
[-201.90046692 75.95973969]
[-186.90046692 75.95973969]
[-184.12123108 73.65421295]
[-180.05628967 72.62922668]
[-175.34326172 73.48810577]
[-170.87080383 76.51538849]
[-155.90681458 77.55405426]
[-140.94281006 78.59272003]
[-125.97881317 79.63138580]
[-111.01481628 80.67005157]
[-96.05082703 81.70871735]
[-81.08683014 82.74738312]
[-66.12283325 83.78604889]
[-51.15883636 84.82471466]
[-36.19483948 85.86338043]
[-20.91780853 77.30560303]
[-5.70357227 87.60501862]
[9.28042221 88.29776764]
[24.26441765 88.99052429]
[27.55358887 74.57120514]
[33.57034302 61.00834274]
[42.10744476 48.81439972]
[52.86205673 38.45395279]
[65.44647980 30.32599258]
[79.40210724 24.74859428]
[94.21612549 21.94648552]
[109.34035492 22.04204750]
[124.21154785 25.05009270]
[138.27235413 30.87662315]
[150.99218750 39.32166290]
[161.88728333 50.08607864]
[172.73603821 39.72729492]
[183.58480835 29.36851311]
[194.43356323 19.00973129]
[205.28233337 8.65094948]
[209.92004395 -6.47525692]
[224.46832275 -9.66851711]
[235.31709290 -20.02729988]
[239.40446472 -35.90890503]
[255.27249146 -40.04868317]
[266.59750366 -28.18798828]
[261.72930908 -12.52808285]
[245.67587280 -9.17853737]
[234.82710266 1.18024480]
[230.96536255 15.56552219]
[215.64111328 19.49971199]
[204.79234314 29.85849380]
[193.94358826 40.21727371]
[183.09481812 50.57605743]
[172.24606323 60.93483734]
[178.14598083 74.72580719]
[193.12998962 74.03305817]
[202.47320557 61.49359131]
[217.70256042 57.94384003]
[231.62721252 65.05988312]
[237.67236328 79.48175049]
[232.98368835 94.39987183]
[219.77502441 102.77036285]
[204.28309631 100.64094543]
[193.82273865 89.01705170]
[178.83874512 89.70980072]
[179.15473938 98.13102722]
[178.57749939 106.50323486]
[177.12095642 114.73234558]
[174.80888367 122.72666931]
[171.67456055 130.39794922]
[167.76025391 137.66230774]
[163.11677551 144.44117737]
[157.80268860 150.66217041]
[151.88372803 156.25981140]
[160.92324829 168.23007202]
[169.96276855 180.20031738]
[179.00228882 192.17057800]
[188.04180908 204.14083862]
[203.66841125 207.77244568]
[210.44180298 222.31552124]
[203.16598511 236.61384583]
[187.42237854 239.69898987]
[175.28810120 229.20426941]
[176.07154846 213.18035889]
[167.03202820 201.21009827]
[157.99250793 189.23983765]
[148.95298767 177.26959229]
[139.91346741 165.29933167]
[129.06848145 170.79626465]
[117.48981476 174.50633240]
[105.46971130 176.33589172]
[93.31156158 176.23878479]
[81.32221985 174.21743774]
[69.80429840 170.32287598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 64]
[7 63]
[8 62]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 47]
[22 46]
[23 45]
[34 44]
[35 43]
[36 42]
[37 41]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[82 89]
[83 88]
[96 106]
[97 105]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
