%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGAUAUAAGAUUGCGUGGGUUCUGCCUAAAGCUGAAUUCCCAGCGCUUUGGCUUCUCUGAGUUGGGGUUGUGUAUAGGGGUCUUCGAACAGUUCCGGAACCAGCCAGCAGCCUUUAAUUCUUGGGCGGACCACGGCCGGUUCUGUGUUCUUGGCUAAG\
) } def
/len { sequence length } bind def

/coor [
[141.55607605 506.70849609]
[149.39579773 493.61264038]
[162.14595032 485.22238159]
[160.10345459 470.36209106]
[158.06095886 455.50180054]
[156.01846313 440.64151001]
[153.97595215 425.78121948]
[151.93345642 410.92095947]
[149.89096069 396.06066895]
[140.49269104 384.50549316]
[146.27880859 369.78030396]
[144.23629761 354.92001343]
[142.19380188 340.05972290]
[140.15130615 325.19943237]
[138.10881042 310.33914185]
[135.77674866 295.52151489]
[133.15600586 280.75222778]
[130.53527832 265.98297119]
[127.91453552 251.21366882]
[125.29380035 236.44439697]
[121.91990662 232.99945068]
[120.70648193 227.38224792]
[122.87073517 221.04855347]
[120.82823944 206.18826294]
[118.78573608 191.32797241]
[116.74324036 176.46768188]
[114.70073700 161.60739136]
[112.65824127 146.74710083]
[110.61573792 131.88681030]
[108.57324219 117.02651978]
[106.53073883 102.16623688]
[107.31629181 120.28489685]
[80.80095673 130.74517822]
[65.80738068 131.18415833]
[50.81380463 131.62313843]
[35.82023239 132.06211853]
[25.16044426 143.73020935]
[9.36869812 144.35972595]
[-2.18604612 133.57717896]
[-2.64856362 117.77965546]
[8.25554943 106.33955383]
[24.05707550 106.04408264]
[35.38125229 117.06854248]
[50.37482452 116.62956238]
[65.36840057 116.19058228]
[80.36197662 115.75160217]
[83.12667847 101.00859070]
[69.31085968 95.16708374]
[53.11234283 97.72443390]
[43.01012421 84.80633545]
[49.39649963 69.70182800]
[65.70172119 67.94912720]
[75.15236664 81.35126495]
[88.96818542 87.19277191]
[76.30641174 79.15041351]
[72.30622101 64.69363403]
[79.03292847 51.28649521]
[93.01351929 45.85113144]
[107.02977753 51.19383621]
[113.84508514 64.55615234]
[109.93946838 79.04075623]
[116.18279266 65.40180969]
[122.42611694 51.76285934]
[128.66943359 38.12391281]
[134.91276550 24.48496437]
[141.15608215 10.84601593]
[147.39941406 -2.79293180]
[153.50936890 -16.49214172]
[159.48539734 -30.25031281]
[165.46141052 -44.00848007]
[171.43742371 -57.76665115]
[177.41343689 -71.52481842]
[183.38945007 -85.28298950]
[174.02551270 -94.68268585]
[168.44097900 -106.68277740]
[167.28527832 -119.83598328]
[170.67517090 -132.56416321]
[178.18331909 -143.34762573]
[188.89204407 -150.90658569]
[201.50546265 -154.35305786]
[214.50627136 -153.29507446]
[221.01452637 -166.80960083]
[227.52278137 -180.32414246]
[228.43714905 -189.46469116]
[234.29214478 -194.03698730]
[241.06285095 -207.42195129]
[247.83355713 -220.80693054]
[254.60426331 -234.19189453]
[247.39968872 -247.93502808]
[249.68237305 -263.28329468]
[260.57458496 -274.33496094]
[275.88803101 -276.84042358]
[289.73440552 -269.83633423]
[296.78948975 -256.01583862]
[294.34045410 -240.69326782]
[283.32897949 -229.76040649]
[267.98922729 -227.42118835]
[261.21853638 -214.03622437]
[254.44781494 -200.65124512]
[247.67710876 -187.26626587]
[241.03730774 -173.81588745]
[234.52905273 -160.30134583]
[228.02079773 -146.78681946]
[238.91722107 -133.93034363]
[243.13589478 -117.55704498]
[239.78706360 -100.92770386]
[229.49298096 -87.37574768]
[214.27301025 -79.63908386]
[197.14762878 -79.30697632]
[191.17161560 -65.54880524]
[185.19558716 -51.79063416]
[179.21957397 -38.03246689]
[173.24356079 -24.27429581]
[167.26754761 -10.51612568]
[167.48823547 -3.09062004]
[161.03836060 3.45039296]
[154.79504395 17.08934021]
[148.55171204 30.72828865]
[142.30838013 44.36723709]
[136.06506348 58.00618362]
[129.82173157 71.64513397]
[123.57841492 85.28408051]
[121.39102936 100.12373352]
[123.43352509 114.98402405]
[125.47602844 129.84431458]
[127.51852417 144.70460510]
[129.56101990 159.56489563]
[131.60353088 174.42518616]
[133.64602661 189.28547668]
[135.68852234 204.14575195]
[137.73103333 219.00604248]
[140.06309509 233.82365417]
[142.68382263 248.59294128]
[145.30455017 263.36221313]
[147.92529297 278.13150024]
[150.54602051 292.90078735]
[154.55111694 298.26351929]
[155.12173462 303.98190308]
[152.96910095 308.29663086]
[155.01159668 323.15692139]
[157.05409241 338.01721191]
[159.09658813 352.87750244]
[161.13909912 367.73779297]
[170.68345642 380.35586548]
[164.75125122 394.01815796]
[166.79374695 408.87844849]
[168.83624268 423.73873901]
[170.87873840 438.59902954]
[172.92124939 453.45932007]
[174.96374512 468.31961060]
[177.00624084 483.17990112]
[191.54725647 487.81906128]
[202.62947083 498.31414795]
[208.05255127 512.58135986]
[206.73970032 527.78790283]
[198.95159912 540.91455078]
[186.23458862 549.35491943]
[171.11363220 551.43328857]
[156.59101868 546.73687744]
[145.55020142 536.19824219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[11 143]
[12 142]
[13 141]
[14 140]
[15 139]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[23 131]
[24 130]
[25 129]
[26 128]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[33 46]
[34 45]
[35 44]
[36 43]
[47 54]
[48 53]
[61 122]
[62 121]
[63 120]
[64 119]
[65 118]
[66 117]
[67 116]
[68 114]
[69 113]
[70 112]
[71 111]
[72 110]
[73 109]
[81 103]
[82 102]
[83 101]
[85 100]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
