%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCGGUAAAGUCUCGCGGUGCUGCCGGGCUCAGCCCCGUCUCCUCCUCUUGCUCCCUCGGCCGGGCGGCGGUGACUGUGCACCGACGUCGGCGCGGGCUGCACCGCCGCGUCCGCCCGCCCGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[159.16874695 182.08337402]
[153.10852051 176.90557861]
[148.68765259 170.24035645]
[146.25823975 162.59165955]
[146.02120972 154.54275513]
[148.00967407 146.71173096]
[136.15515137 137.52096558]
[124.30061340 128.33020020]
[112.44608307 119.13943481]
[94.76222992 122.22135925]
[80.31632996 111.56616974]
[78.03875732 93.76084900]
[65.75720978 85.14901733]
[53.47566605 76.53718567]
[41.19411850 67.92535400]
[28.81019592 59.46140671]
[16.32567596 51.14655685]
[3.84115434 42.83170700]
[-8.64336681 34.51685715]
[-24.41823578 33.30686569]
[-30.72219467 19.81207466]
[-43.20671463 11.49722385]
[-58.98158646 10.28723145]
[-65.28554535 -3.20755816]
[-81.06041718 -4.41755009]
[-87.36437225 -17.91234016]
[-99.84889221 -26.22719002]
[-112.33341217 -34.54204178]
[-124.81793976 -42.85689163]
[-137.30245972 -51.17174149]
[-149.78697205 -59.48659134]
[-162.66075134 -55.32918167]
[-175.38327026 -59.31813049]
[-183.34225464 -69.77098083]
[-183.78941345 -82.70606232]
[-196.07096863 -91.31789398]
[-208.35250854 -99.92971802]
[-220.76104736 -91.22317505]
[-235.39988708 -87.28867340]
[-250.50131226 -88.60131836]
[-264.24172974 -95.00260162]
[-274.96194458 -105.71954346]
[-281.36743164 -119.45801544]
[-282.68469238 -134.55902100]
[-278.75466919 -149.19906616]
[-270.05191040 -161.61027527]
[-257.62734985 -170.29393005]
[-242.98129272 -174.20144653]
[-227.88232422 -172.86097717]
[-214.15371704 -166.43438721]
[-203.45327759 -155.69770813]
[-197.07312012 -141.94744873]
[-195.78367615 -126.84403992]
[-199.74067688 -112.21126556]
[-187.45913696 -103.59943390]
[-175.17758179 -94.98760986]
[-158.80303955 -98.62125397]
[-144.56010437 -89.14141083]
[-141.47212219 -71.97111511]
[-128.98760986 -63.65626144]
[-116.50308990 -55.34141159]
[-104.01856232 -47.02656174]
[-91.53404236 -38.71171188]
[-79.04952240 -30.39686203]
[-64.16763306 -29.78160286]
[-56.97069550 -15.69207954]
[-42.08880234 -15.07682037]
[-34.89186478 -0.98729712]
[-22.40734482 7.32755327]
[-7.52545261 7.94281149]
[-0.32851622 22.03233528]
[12.15600491 30.34718513]
[24.64052582 38.66203690]
[37.12504578 46.97688675]
[44.50928497 48.07719040]
[49.80595016 55.64381027]
[62.08749771 64.25563812]
[74.36904144 72.86746979]
[86.65058899 81.47930145]
[97.25519562 77.33528900]
[108.54244232 78.82808685]
[117.70514679 85.58643341]
[122.46450806 95.92949677]
[121.63684845 107.28490448]
[133.49137878 116.47566986]
[145.34590149 125.66643524]
[157.20043945 134.85719299]
[179.60328674 129.58805847]
[198.58578491 142.13676453]
[202.42639160 164.30300903]
[218.24462891 163.99653625]
[225.81213379 176.82550049]
[239.03564453 183.90635681]
[252.25915527 190.98722839]
[261.40103149 192.30430603]
[265.71188354 198.39973450]
[278.76181030 205.79565430]
[291.81170654 213.19155884]
[304.86163330 220.58747864]
[317.91156006 227.98339844]
[330.96148682 235.37931824]
[344.26895142 242.30111694]
[357.81674194 248.73983765]
[371.36453247 255.17855835]
[386.16906738 249.64666748]
[400.51422119 256.27932739]
[405.88928223 271.14151001]
[399.10531616 285.41574097]
[384.18713379 290.63336182]
[369.98544312 283.69885254]
[364.92581177 268.72634888]
[351.37802124 262.28762817]
[337.83023071 255.84892273]
[334.32257080 256.74472046]
[330.19900513 255.92222595]
[326.30224609 253.10797119]
[323.56555176 248.42924500]
[310.51562500 241.03332520]
[297.46572876 233.63740540]
[284.41580200 226.24148560]
[271.36587524 218.84556580]
[258.31594849 211.44964600]
[245.17829895 204.21073914]
[231.95478821 197.12988281]
[218.73126221 190.04901123]
[203.85885620 190.86196899]
[195.34552002 177.52653503]
[189.27037048 182.47450256]
[182.04530334 185.57522583]
[174.21965027 186.57669067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 87]
[7 86]
[8 85]
[9 84]
[12 79]
[13 78]
[14 77]
[15 76]
[16 74]
[17 73]
[18 72]
[19 71]
[21 69]
[22 68]
[24 66]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[35 56]
[36 55]
[37 54]
[90 127]
[92 125]
[93 124]
[94 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
