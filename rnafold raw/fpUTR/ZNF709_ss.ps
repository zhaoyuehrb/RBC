%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAAACGGCGAGGGCGUGGCUACCAGCCGCUGCGCUCCGCUCUGGGGUCUCCUCACCCCAGAAGGCCCUCAGGUGGAGGAAGGGCCUCAGGUGGAGGUAGGACCUGUGCUGGCCGCGGGAGAGGUAAACAGAACACCAGGACAUCCCAGAGUCUGGGAA\
) } def
/len { sequence length } bind def

/coor [
[47.30461884 170.89295959]
[48.90809631 185.80702209]
[39.29172134 197.31898499]
[24.33042526 198.39585876]
[13.16451263 188.37974548]
[12.61557102 173.38980103]
[23.01951408 162.58357239]
[30.32138062 149.48080444]
[37.62324905 136.37802124]
[30.52713776 133.95002747]
[17.83734131 141.94808960]
[5.14754438 149.94615173]
[-0.47874895 157.20602417]
[-7.86678171 157.97351074]
[-20.70928574 165.72399902]
[-33.55178833 173.47448730]
[-46.39429092 181.22497559]
[-59.23679733 188.97547913]
[-72.07929993 196.72596741]
[-84.92180634 204.47645569]
[-97.76430511 212.22694397]
[-110.60681152 219.97743225]
[-111.79500580 235.44894409]
[-121.87582397 247.24542236]
[-136.97299194 250.83085632]
[-151.28132629 244.82659912]
[-159.29898071 231.54139709]
[-157.94302368 216.08367920]
[-147.73483276 204.39726257]
[-132.59965515 200.97579956]
[-118.35729980 207.13493347]
[-105.51479340 199.38444519]
[-92.67229462 191.63395691]
[-79.82978821 183.88345337]
[-66.98728943 176.13296509]
[-54.14478302 168.38247681]
[-41.30228043 160.63198853]
[-28.45977592 152.88150024]
[-15.61727238 145.13101196]
[-2.85052228 137.25636292]
[9.83927441 129.25828552]
[22.52906990 121.26022339]
[22.09280014 106.26657104]
[8.95942593 99.01988220]
[-4.17394733 91.77319336]
[-17.30732155 84.52650452]
[-30.44069481 77.27981567]
[-43.57406616 70.03312683]
[-56.70743942 62.78643799]
[-69.84081268 55.53974533]
[-84.95293427 60.16569138]
[-98.87046051 52.67716599]
[-103.33637238 37.51697922]
[-95.70111847 23.67940521]
[-80.49456787 19.37402725]
[-66.73848724 27.15515137]
[-62.59412384 42.40637207]
[-49.46075058 49.65306091]
[-36.32737732 56.89974976]
[-23.19400597 64.14643860]
[-10.06063175 71.39312744]
[3.07274175 78.63981628]
[16.20611572 85.88650513]
[29.33948898 93.13319397]
[41.62677002 84.52954865]
[39.30898666 69.70970154]
[36.99120712 54.88985443]
[34.67342377 40.07000732]
[32.35564041 25.25015831]
[30.03786087 10.43031120]
[27.72007751 -4.38953638]
[25.25871086 -19.18621445]
[11.25354671 -25.86715889]
[3.87969828 -39.52021790]
[5.97255945 -54.89550781]
[16.72738266 -66.08091736]
[32.00872040 -68.77542877]
[45.94058228 -61.94294739]
[53.16588593 -48.21070099]
[50.90635681 -32.85902023]
[40.03082657 -21.79093742]
[44.31036758 -15.71989059]
[42.53992462 -6.70731831]
[44.85770798 8.11252975]
[47.17549133 22.93237686]
[49.49327087 37.75222397]
[51.81105423 52.57207108]
[54.12883377 67.39192200]
[56.44661713 82.21176910]
[82.56696320 60.01570511]
[114.18724060 62.39421844]
[133.29353333 84.40151978]
[147.88920593 80.94228363]
[162.48487854 77.48304749]
[177.08056641 74.02381134]
[178.35565186 58.96287918]
[184.21556091 45.05230713]
[194.07479858 33.64951324]
[206.95831299 25.86297417]
[221.59785461 22.44448471]
[236.55690002 23.71657372]
[250.37149048 29.54211998]
[261.69363403 39.33901596]
[269.42276001 52.13830566]
[284.01843262 48.67906952]
[298.61410522 45.21982956]
[313.20977783 41.76059341]
[324.85360718 31.04931450]
[339.02215576 35.64294434]
[350.66601562 24.93166351]
[364.83456421 29.52529335]
[379.43023682 26.06605530]
[394.02590942 22.60681725]
[405.57638550 10.96559620]
[421.36206055 15.40907192]
[425.14398193 31.36617851]
[413.03161621 42.42161179]
[397.48513794 37.20249176]
[382.88946533 40.66172791]
[368.29379272 44.12096786]
[357.69393921 54.58481979]
[342.48141479 50.23861694]
[331.88153076 60.70246887]
[316.66900635 56.35626602]
[302.07333374 59.81550217]
[287.47766113 63.27474213]
[272.88198853 66.73397827]
[271.71929932 81.64066315]
[265.99832153 95.47686005]
[256.26763916 106.88273621]
[243.47067261 114.73311615]
[228.85406494 118.24846649]
[213.84635925 117.07227325]
[199.91824341 111.30718231]
[188.43859863 101.50615692]
[180.53979492 88.61948395]
[165.94412231 92.07872009]
[151.34844971 95.53795624]
[136.75277710 98.99719238]
[136.65676880 110.87166595]
[132.68074036 122.54624176]
[124.95897675 132.74412537]
[114.04687500 140.26029968]
[100.88657379 144.10002136]
[86.72730255 143.60203552]
[73.00697327 138.53173828]
[78.13727570 152.62712097]
[83.26757812 166.72251892]
[88.39788055 180.81790161]
[93.52818298 194.91329956]
[98.65848541 209.00868225]
[109.75748444 221.82463074]
[100.51490021 236.03768921]
[84.29869080 231.09086609]
[84.56309509 214.13899231]
[79.43279266 200.04359436]
[74.30249023 185.94821167]
[69.17218781 171.85281372]
[64.04188538 157.75743103]
[58.91158295 143.66203308]
[51.81547165 141.23403931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 42]
[11 41]
[12 40]
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[72 81]
[92 139]
[93 138]
[94 137]
[95 136]
[104 127]
[105 126]
[106 125]
[107 124]
[109 122]
[111 120]
[112 119]
[113 118]
[146 160]
[147 159]
[148 158]
[149 157]
[150 156]
[151 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
