%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGGAGCUGCCGCGGAAAGCUCAACCAGGAACCCGGAAAUGCACAAGCCUCUUGAUGCAUAAAAACAGCUGGGCUCCCUUGGAGACAGAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[18.07299042 256.91760254]
[9.41415977 269.16607666]
[0.75532866 281.41452026]
[-7.90350199 293.66296387]
[-16.36285782 306.05004883]
[-24.62051964 318.57244873]
[-22.81667519 334.51376343]
[-34.25689697 345.76104736]
[-50.16522980 343.68630981]
[-58.33815765 329.88113403]
[-52.50611496 314.93566895]
[-37.14294052 310.31478882]
[-28.88527870 297.79235840]
[-27.81078911 290.33367920]
[-20.15195656 285.00415039]
[-11.49312592 272.75567627]
[-2.83429551 260.50723267]
[5.82453537 248.25877380]
[1.55375242 230.60321045]
[11.55220127 215.06294250]
[30.00683403 211.51290894]
[37.85466385 198.72966003]
[45.70249557 185.94641113]
[53.55032730 173.16314697]
[47.49021149 154.82609558]
[56.74560547 137.53799438]
[75.93898773 132.25605774]
[82.50970459 118.77177429]
[89.08042145 105.28749847]
[95.21104431 91.59752655]
[100.89514160 77.71620941]
[106.57923889 63.83488846]
[104.64841461 48.13194275]
[116.63155365 39.28582764]
[122.31565094 25.40450859]
[127.99975586 11.52319050]
[133.68385315 -2.35812831]
[139.36795044 -16.23944664]
[128.61459351 -35.79726410]
[135.14373779 -56.86835098]
[154.60810852 -66.68522644]
[157.50468445 -81.40290070]
[160.40124512 -96.12057495]
[163.29782104 -110.83824921]
[166.19438171 -125.55592346]
[168.85224915 -140.31857300]
[171.27072144 -155.12231445]
[173.68917847 -169.92607117]
[176.10765076 -184.72981262]
[172.69416809 -201.33657837]
[187.70698547 -209.21386719]
[199.43238831 -196.96839905]
[190.91139221 -182.31135559]
[188.49293518 -167.50759888]
[186.07446289 -152.70385742]
[183.65600586 -137.90010071]
[185.72378540 -130.65365601]
[180.91206360 -122.65935516]
[178.01548767 -107.94168091]
[175.11892700 -93.22400665]
[172.22235107 -78.50633240]
[169.32579041 -63.78866196]
[176.37040710 -58.85458374]
[181.58854675 -51.97462845]
[184.46313477 -43.79582596]
[184.69871521 -35.09547424]
[182.25177002 -26.70727158]
[177.33677673 -19.44141388]
[170.40766907 -14.00635910]
[162.11589050 -10.93976402]
[153.24926758 -10.55534649]
[147.56517029 3.32597232]
[141.88107300 17.20729065]
[136.19697571 31.08860970]
[130.51286316 44.96992874]
[132.85026550 59.67998886]
[120.46056366 69.51898956]
[114.77645874 83.40030670]
[109.09236145 97.28162384]
[110.02511597 102.65533447]
[107.77131653 108.13665771]
[102.56469727 111.85821533]
[95.99398041 125.34249115]
[89.42326355 138.82676697]
[95.47541046 148.01425171]
[97.05062866 158.81994629]
[93.92049408 169.19619751]
[86.74167633 177.20631409]
[76.91957092 181.38603210]
[66.33358002 181.01098633]
[58.48574829 193.79423523]
[50.63791656 206.57748413]
[42.79008484 219.36074829]
[47.82714081 230.37971497]
[46.83795547 242.33345032]
[40.19364166 252.17381287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 13]
[6 12]
[21 93]
[22 92]
[23 91]
[24 90]
[27 84]
[28 83]
[29 82]
[30 79]
[31 78]
[32 77]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
