%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAGUAGCUUUGCAACUGGCUUUGGGGACUUCCGAAAGCUACCAGCACUGCACUGUGAGACUCUCAUCCCUGAGCUGAAUUCAUCUGAUUCGACGGCAAGCUUUGGUGAGAACAUAGAUAUAUUUCUGAGGAAA\
) } def
/len { sequence length } bind def

/coor [
[70.40700531 120.67242432]
[66.49378967 113.43236542]
[51.71508789 115.99944305]
[39.44265747 125.98433685]
[25.57900238 120.53930664]
[10.80029678 123.10638428]
[-3.97840810 125.67346191]
[-11.98058987 130.26214600]
[-19.12511444 128.12590027]
[-33.95879745 130.35343933]
[-43.35060883 142.78048706]
[-58.42580414 144.82821655]
[-70.21521759 135.79797363]
[-85.04889679 138.02549744]
[-99.88258362 140.25303650]
[-107.10251617 153.86108398]
[-120.79089355 160.53053284]
[-135.60652161 157.89212036]
[-145.90435791 147.16400146]
[-160.73803711 149.39154053]
[-175.57171631 151.61907959]
[-190.40539551 153.84661865]
[-205.23908997 156.07414246]
[-220.07276917 158.30168152]
[-234.90644836 160.52922058]
[-247.40458679 170.23008728]
[-261.13973999 164.46861267]
[-275.97341919 166.69613647]
[-286.62524414 178.69274902]
[-302.63760376 177.70074463]
[-311.72717285 164.48109436]
[-306.92126465 149.17480469]
[-291.90652466 143.52354431]
[-278.20095825 151.86245728]
[-263.36727905 149.63493347]
[-251.93014526 140.09338379]
[-237.13397217 145.69554138]
[-222.30029297 143.46800232]
[-207.46661377 141.24046326]
[-192.63293457 139.01293945]
[-177.79925537 136.78540039]
[-162.96557617 134.55786133]
[-148.13189697 132.33032227]
[-141.43922424 119.05078888]
[-128.05198669 112.17723083]
[-113.00844574 114.53208923]
[-102.11011505 125.41935730]
[-87.27643585 123.19181824]
[-72.44275665 120.96428680]
[-63.82560730 108.86964417]
[-48.81388092 106.39929199]
[-36.18633270 115.51975250]
[-21.35264969 113.29221344]
[-6.54548407 110.89475250]
[8.23322105 108.32767487]
[23.01192665 105.76060486]
[34.22728348 95.95932770]
[49.14801025 101.22074127]
[63.92671585 98.65366364]
[68.07468414 83.15159607]
[78.53178406 70.97914124]
[93.23147583 64.54183197]
[109.26876831 65.11183167]
[123.47434998 72.57648468]
[135.38337708 63.45643616]
[147.29238892 54.33639145]
[159.20141602 45.21634293]
[171.11042786 36.09629440]
[183.01945496 26.97624969]
[194.92846680 17.85620308]
[195.75019836 6.89940166]
[202.37068176 -1.59146869]
[212.37777710 -4.92018414]
[222.33924866 -2.20257831]
[234.65386963 -10.76704788]
[246.96849060 -19.33151627]
[259.28311157 -27.89598656]
[271.59774780 -36.46045303]
[271.39031982 -48.45177078]
[276.97720337 -58.92781448]
[286.84829712 -65.30563354]
[298.45446777 -66.07744598]
[308.86532593 -61.16559601]
[321.55963135 -69.15647888]
[329.11669922 -83.05616760]
[344.00949097 -83.28831482]
[356.70382690 -91.27919769]
[359.96316528 -106.74375153]
[373.24838257 -115.30403137]
[388.67761230 -111.88138580]
[397.09695435 -98.50640106]
[393.51135254 -83.11421967]
[380.04812622 -74.83675385]
[364.69470215 -78.58487701]
[352.00039673 -70.59399414]
[345.35128784 -57.26586914]
[329.55050659 -56.46215439]
[316.85620117 -48.47127533]
[313.94818115 -30.46246910]
[298.58770752 -20.04638290]
[280.16220093 -24.14583397]
[267.84759521 -15.58136559]
[255.53295898 -7.01689625]
[243.21833801 1.54757261]
[230.90371704 10.11204147]
[224.08390808 28.15055275]
[204.04852295 29.76522255]
[192.13949585 38.88526917]
[180.23048401 48.00531387]
[168.32145691 57.12536240]
[156.41244507 66.24540710]
[144.50341797 75.36545563]
[132.59440613 84.48550415]
[135.69813538 105.36069489]
[126.60000610 124.40356445]
[140.90985107 131.15180969]
[141.99493408 146.00683594]
[150.70004272 158.22245789]
[159.40513611 170.43806458]
[168.11022949 182.65368652]
[183.73612976 185.02159119]
[193.04354858 197.79450989]
[190.51057434 213.39448547]
[177.63996887 222.56634521]
[162.06762695 219.86857605]
[153.03236389 206.90171814]
[155.89462280 191.35877991]
[147.18952942 179.14317322]
[138.48442078 166.92755127]
[129.77932739 154.71192932]
[116.09212494 148.83743286]
[114.38439178 133.10867310]
[106.51145935 135.50627136]
[98.30007172 136.05834961]
[90.17704773 134.73620605]
[82.56459045 131.60855103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[5 56]
[6 55]
[7 54]
[9 53]
[10 52]
[13 49]
[14 48]
[15 47]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[27 35]
[28 34]
[64 113]
[65 112]
[66 111]
[67 110]
[68 109]
[69 108]
[70 107]
[74 105]
[75 104]
[76 103]
[77 102]
[78 101]
[83 98]
[84 97]
[86 95]
[87 94]
[115 132]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
