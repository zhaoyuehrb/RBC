%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAAAGAGCGCGGGUCCUCGGCCGUGGAGGGUCAAGUGGCUUCUUCUGAGCGCUGAGGGAGGGGAGCGUGCGUAGGGG\
) } def
/len { sequence length } bind def

/coor [
[113.82415771 409.24047852]
[123.10799408 396.15652466]
[121.93110657 381.20275879]
[120.75421906 366.24899292]
[108.65491486 360.26739502]
[101.08711243 348.95989990]
[100.15577698 335.27615356]
[106.21734619 322.85140991]
[117.75599670 315.04074097]
[117.16709900 300.05230713]
[116.57820129 285.06387329]
[115.98930359 270.07543945]
[100.01174164 260.93209839]
[92.42804718 243.99909973]
[96.30522156 225.70695496]
[110.32184601 213.11297607]
[107.97532654 198.29765320]
[105.62881470 183.48233032]
[103.28229523 168.66700745]
[100.93577576 153.85168457]
[98.58926392 139.03634644]
[96.24274445 124.22102356]
[93.89622498 109.40570068]
[91.25928497 94.63930511]
[80.97837067 82.61376953]
[86.08403778 68.62157440]
[83.15768433 53.90979767]
[80.23132324 39.19801712]
[77.30496979 24.48623848]
[74.37861633 9.77445984]
[71.45226288 -4.93731928]
[67.95058441 -19.52286911]
[63.87897491 -33.95969772]
[59.80736923 -48.39652634]
[47.68946075 -59.44588470]
[51.46335983 -75.40488434]
[67.24680328 -79.85627747]
[78.80313873 -68.22084808]
[74.24419403 -52.46813202]
[78.31580353 -38.03130341]
[82.38741302 -23.59447479]
[86.27669525 -20.41695213]
[88.04242706 -14.65754223]
[86.16403961 -7.86367416]
[89.09039307 6.84810495]
[92.01675415 21.55988503]
[94.94310760 36.27166367]
[97.86946106 50.98344421]
[100.79581451 65.69522095]
[110.86741638 76.66847229]
[105.97106171 91.71295166]
[110.61918640 98.58239746]
[108.71155548 107.05918884]
[111.05806732 121.87451172]
[113.40458679 136.68983459]
[115.75110626 151.50515747]
[118.09761810 166.32048035]
[120.44413757 181.13580322]
[122.79065704 195.95114136]
[125.13716888 210.76646423]
[136.52290344 214.27462769]
[145.65219116 221.84800720]
[151.15429688 232.29739380]
[152.22315979 244.00588989]
[148.73518372 255.17904663]
[141.26211548 264.11987305]
[130.97773743 269.48654175]
[131.56663513 284.47497559]
[132.15553284 299.46340942]
[132.74443054 314.45184326]
[146.85643005 323.54153442]
[152.80342102 339.06277466]
[148.46490479 354.93762207]
[135.70797729 365.07211304]
[136.88487244 380.02587891]
[138.06175232 394.97964478]
[149.27806091 406.45019531]
[147.16036987 422.35287476]
[133.33316040 430.48849487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[9 70]
[10 69]
[11 68]
[12 67]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 51]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
