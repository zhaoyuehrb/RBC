%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCCGGCGCGCGGUAGCGCGGGCCCCUCAGUGCACAAUGGCUAGAGCAGGCGGCGGAGCCCCAACCCCACCCAGUGCGGAGCGCGCCGCGAGCCCCGCCGCAAGCUGAGCGCCUCCGCCCGCCAGGCGCGCCGGCGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[107.69052887 594.41589355]
[110.29521179 575.21002197]
[110.61795044 560.21350098]
[110.94068909 545.21697998]
[111.26343536 530.22045898]
[111.58617401 515.22387695]
[111.90892029 500.22738647]
[112.23165894 485.23083496]
[112.55439758 470.23431396]
[112.87714386 455.23779297]
[113.19988251 440.24127197]
[110.17733765 433.43704224]
[113.69436646 424.92648315]
[114.33969879 409.94036865]
[114.98503113 394.95425415]
[115.63036346 379.96813965]
[106.67754364 364.91058350]
[116.59646606 349.43603516]
[116.91920471 334.43951416]
[116.75782776 319.44039917]
[116.11249542 304.45428467]
[115.46715546 289.46817017]
[114.82182312 274.48205566]
[114.17649078 259.49594116]
[113.53115845 244.50982666]
[112.08097839 229.58009338]
[102.52148438 218.15794373]
[108.10039520 203.35299683]
[105.84956360 188.52284241]
[103.59873199 173.69267273]
[101.34790039 158.86251831]
[99.09706879 144.03234863]
[96.84623718 129.20217896]
[86.12941742 125.89054871]
[77.43546295 118.80307007]
[72.03229523 108.97337341]
[70.70790863 97.83500671]
[73.65544128 87.01238251]
[80.44503784 78.08385468]
[90.08650970 72.35155487]
[88.79703522 57.40708160]
[87.50756836 42.46260834]
[86.21809387 27.51813698]
[74.40681458 17.36277390]
[73.31199646 2.18858361]
[83.06636810 -9.00908279]
[79.18646240 -17.36043739]
[81.91347504 -24.28840828]
[80.94584656 -39.25716782]
[69.35580444 -49.66431046]
[68.58773041 -64.85854340]
[78.58077240 -75.84374237]
[77.61315155 -90.81250000]
[76.64552307 -105.78125763]
[75.67789459 -120.75001526]
[74.71026611 -135.71876526]
[73.74264526 -150.68753052]
[64.55907440 -159.81153870]
[64.09914398 -172.34677124]
[72.06312561 -181.51196289]
[71.41779327 -196.49806213]
[63.09394073 -209.95259094]
[70.27651978 -223.00094604]
[69.63118744 -237.98706055]
[59.38160706 -253.24461365]
[68.00837708 -268.49130249]
[67.04075623 -283.46008301]
[53.85349274 -291.63781738]
[48.02272797 -306.01773071]
[51.79050446 -321.07043457]
[63.70804214 -331.00784302]
[79.19279480 -332.00881958]
[92.29056549 -323.68847656]
[97.96499634 -309.24615479]
[94.03414917 -294.23522949]
[82.00951385 -284.42770386]
[82.97713470 -269.45895386]
[91.87923431 -261.20193481]
[92.76802063 -248.68978882]
[84.61730194 -238.63240051]
[85.26263428 -223.64628601]
[93.54032135 -211.26367188]
[86.40390015 -197.14340210]
[87.04923248 -182.15728760]
[97.26333618 -167.92509460]
[88.71139526 -151.65515137]
[89.67902374 -136.68640137]
[90.64665222 -121.71764374]
[91.61428070 -106.74888611]
[92.58190918 -91.78012848]
[93.54953003 -76.81137085]
[104.87373352 -67.20418549]
[106.06828308 -52.03752136]
[95.91460419 -40.22479248]
[96.88222504 -25.25603485]
[98.01084137 -10.29855442]
[109.53913116 -0.93724656]
[111.05973053 14.20020485]
[101.16256714 26.22866440]
[102.45203400 41.17313766]
[103.74150848 56.11761093]
[105.03098297 71.06208038]
[121.32009888 79.79685211]
[129.16653442 96.53200531]
[125.46311951 114.64046478]
[111.67639923 126.95135498]
[113.92723083 141.78152466]
[116.17806244 156.61167908]
[118.42889404 171.44184875]
[120.67972565 186.27200317]
[122.93055725 201.10217285]
[132.65104675 213.58506775]
[126.91114044 227.32926941]
[138.05615234 217.28990173]
[152.88850403 219.52633667]
[160.57781982 232.40556335]
[155.50950623 246.52336121]
[141.38435364 251.57113647]
[128.51727295 243.86450195]
[129.16259766 258.85061646]
[129.80793762 273.83673096]
[130.45327759 288.82284546]
[131.09860229 303.80892944]
[131.74394226 318.79504395]
[134.63218689 323.31686401]
[135.37176514 328.02093506]
[134.26390076 332.04071045]
[131.91574097 334.76226807]
[131.59298706 349.75878906]
[139.95822144 359.63848877]
[139.33885193 372.16683960]
[130.61647034 380.61349487]
[129.97114563 395.59960938]
[129.32580566 410.58572388]
[128.68048096 425.57180786]
[128.19641113 440.56399536]
[127.87367249 455.56054688]
[127.55092621 470.55706787]
[127.22818756 485.55358887]
[126.90544128 500.55010986]
[126.58270264 515.54663086]
[126.25996399 530.54315186]
[125.93721771 545.53967285]
[125.61447906 560.53625488]
[125.29174042 575.53277588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 140]
[8 139]
[9 138]
[10 137]
[11 136]
[13 135]
[14 134]
[15 133]
[16 132]
[18 129]
[19 128]
[20 124]
[21 123]
[22 122]
[23 121]
[24 120]
[25 119]
[26 113]
[28 111]
[29 110]
[30 109]
[31 108]
[32 107]
[33 106]
[40 102]
[41 101]
[42 100]
[43 99]
[46 96]
[48 95]
[49 94]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[60 84]
[61 83]
[63 81]
[64 80]
[66 77]
[67 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
