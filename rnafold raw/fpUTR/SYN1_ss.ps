%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUGCGGUGGGCAGCGGAGGAGUCGUGUCGUGCCUGAGAGCGCAGCUGUGCUCCUGGGCACCGCGCAGUCCGCCCCCGCGGCUCCUGGCCAGACCACCCCUAGGACCCCCUGCCCCAAGUCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[81.91978455 365.77423096]
[87.96612549 349.93508911]
[84.78795624 343.17788696]
[88.15174103 334.57373047]
[88.51419830 319.57809448]
[88.87665558 304.58248901]
[89.23911285 289.58685303]
[89.60157013 274.59124756]
[89.96402740 259.59561157]
[78.42397308 242.55172729]
[89.48040771 224.27369690]
[88.75570679 209.29121399]
[88.03100586 194.30873108]
[87.30630493 179.32624817]
[86.58160400 164.34376526]
[85.85690308 149.36128235]
[82.35598755 142.76551819]
[85.30014801 134.00889587]
[84.93769073 119.01327515]
[86.20806885 93.03280640]
[78.60366821 80.10326385]
[70.99927521 67.17371368]
[63.39487457 54.24417114]
[55.79047775 41.31462479]
[48.18608093 28.38508034]
[40.58168411 15.45553589]
[32.97728348 2.52599096]
[25.37288666 -10.40355396]
[17.76848984 -23.33309937]
[-2.59998250 -26.08666801]
[-15.33993244 -41.89249039]
[-13.74547100 -61.87722015]
[-24.97313309 -71.82405853]
[-36.20079422 -81.77089691]
[-47.42845535 -91.71774292]
[-58.65611649 -101.66458130]
[-69.88377380 -111.61141968]
[-81.11143494 -121.55825806]
[-96.57179260 -124.91801453]
[-100.96751404 -139.14921570]
[-112.19517517 -149.09605408]
[-123.42283630 -159.04289246]
[-134.65049744 -168.98973083]
[-145.87815857 -178.93656921]
[-157.10581970 -188.88340759]
[-173.27304077 -191.63172913]
[-178.72206116 -207.09910583]
[-167.84742737 -219.37405396]
[-151.83599854 -215.82913208]
[-147.15898132 -200.11106873]
[-135.93132019 -190.16423035]
[-124.70365906 -180.21739197]
[-113.47599792 -170.27055359]
[-102.24833679 -160.32371521]
[-91.02067566 -150.37687683]
[-76.36339569 -147.72857666]
[-71.16459656 -132.78591919]
[-59.93693542 -122.83908081]
[-48.70927429 -112.89224243]
[-37.48161316 -102.94540405]
[-26.25395393 -92.99855804]
[-15.02629280 -83.05171967]
[-3.79863119 -73.10488129]
[2.57345915 -76.04887390]
[9.48996544 -77.24577332]
[13.07970047 -91.80990601]
[16.66943550 -106.37403107]
[9.63366222 -120.79198456]
[16.64920425 -135.21980286]
[32.33433914 -138.58967590]
[44.65677261 -128.31654358]
[44.16378784 -112.28107452]
[31.23356247 -102.78429413]
[27.64382744 -88.22016907]
[24.05409241 -73.65603638]
[33.11974335 -65.53946686]
[37.75343704 -54.16357040]
[36.92381668 -41.79272842]
[30.69803429 -30.93749619]
[38.30243301 -18.00795174]
[45.90682983 -5.07840681]
[53.51122665 7.85113811]
[61.11562347 20.78068352]
[68.72002411 33.71022797]
[76.32441711 46.63977432]
[83.92881775 59.56931686]
[91.53321838 72.49886322]
[99.13761139 85.42840576]
[111.87963104 93.34300995]
[126.84023285 94.42953491]
[141.81286621 95.33521271]
[156.79534912 96.05991364]
[171.78549194 96.60353088]
[186.78111267 96.96598816]
[196.98283386 85.11445618]
[212.42408752 82.64423370]
[225.81396484 90.72167969]
[230.83018494 105.53287506]
[225.10424805 120.08442688]
[211.33975220 127.50553131]
[196.03588867 124.29217529]
[186.41865540 111.96160889]
[171.42303467 111.59915161]
[164.59101868 114.61310577]
[156.07064819 111.04239655]
[141.08816528 110.31769562]
[134.18530273 113.16567993]
[125.75370789 109.39012909]
[110.79311371 108.30361176]
[99.93331146 118.65081787]
[100.29576874 133.64643860]
[100.83938599 148.63658142]
[101.56408691 163.61906433]
[102.28878784 178.60154724]
[103.01348877 193.58403015]
[103.73818970 208.56651306]
[104.46289062 223.54899597]
[112.37282562 229.00573730]
[116.76508331 237.39659119]
[116.74223328 246.72888184]
[112.43859100 254.85311890]
[104.95964050 259.95806885]
[104.59719086 274.95370483]
[104.23473358 289.94931030]
[103.87227631 304.94494629]
[103.50981903 319.94055176]
[103.14736176 334.93618774]
[102.96612549 349.93508911]
[109.01245880 365.77423096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 128]
[4 127]
[5 126]
[6 125]
[7 124]
[8 123]
[9 122]
[11 117]
[12 116]
[13 115]
[14 114]
[15 113]
[16 112]
[18 111]
[19 110]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[65 75]
[66 74]
[67 73]
[89 109]
[90 108]
[91 106]
[92 105]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
