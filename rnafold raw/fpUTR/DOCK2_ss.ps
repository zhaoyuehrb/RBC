%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAGGAAGUGGGGCCCUGCGGCGCCCAGCCACCCCCUGACGGCUUCCCCACGGGAGGACGCGAGGCCCCGGCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[66.20296478 382.64370728]
[69.13887787 363.48565674]
[69.72050476 348.49694824]
[59.44773865 337.77288818]
[59.82407761 322.56390381]
[71.14212799 311.86157227]
[71.72375488 296.87286377]
[61.64166260 288.60903931]
[58.18767929 275.83551025]
[62.86791229 263.24905396]
[74.15334320 255.61555481]
[75.31572723 240.66065979]
[76.47811127 225.70576477]
[77.64050293 210.75086975]
[78.80288696 195.79597473]
[79.96527100 180.84107971]
[81.12766266 165.88618469]
[74.39989471 152.59761047]
[83.18333435 139.43852234]
[84.34571838 124.48361969]
[85.50811005 109.52872467]
[78.51745605 96.25730133]
[65.52707672 88.75730133]
[52.53669357 81.25730133]
[36.73051071 84.00395966]
[24.82418442 73.25133514]
[25.95122719 57.24792099]
[39.24707031 48.27016449]
[54.51227951 53.20503235]
[60.03669357 68.26692200]
[73.02707672 75.76692200]
[86.01745605 83.26692200]
[92.51264954 79.51692200]
[85.01284790 66.52642059]
[98.00345612 59.02682495]
[105.50302887 72.01692200]
[111.99821472 68.26692200]
[111.99821472 53.26692200]
[103.33451843 39.34311676]
[111.29864502 25.00768280]
[127.69779205 25.00768280]
[135.66192627 39.34311676]
[126.99821472 53.26692200]
[126.99821472 68.26692200]
[140.53073120 74.73770905]
[152.20620728 65.32052612]
[163.88168335 55.90334702]
[175.55714417 46.48616409]
[187.23262024 37.06898499]
[198.90809631 27.65180206]
[207.44075012 13.00154400]
[223.88055420 17.14514923]
[224.44987488 34.08953476]
[208.32528687 39.32727432]
[196.64981079 48.74445724]
[184.97433472 58.16164017]
[173.29885864 67.57881927]
[161.62338257 76.99600220]
[149.94790649 86.41318512]
[135.99504089 112.41411591]
[114.58386230 119.54748535]
[100.46300507 110.69111633]
[99.30061340 125.64601135]
[98.13822937 140.60090637]
[104.78285217 154.95915222]
[96.08255768 167.04858398]
[94.92016602 182.00347900]
[93.75778198 196.95835876]
[92.59539795 211.91325378]
[91.43300629 226.86814880]
[90.27062225 241.82304382]
[89.10823822 256.77795410]
[100.69407654 269.71588135]
[99.49246979 286.70645142]
[86.71247864 297.45449829]
[86.13084412 312.44320679]
[96.58551788 323.99041748]
[95.78214264 339.18280029]
[84.70922852 349.07858276]
[84.12759399 364.06729126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[6 76]
[7 75]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[19 64]
[20 63]
[21 62]
[22 32]
[23 31]
[24 30]
[37 44]
[38 43]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
