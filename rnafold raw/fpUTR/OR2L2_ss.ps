%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGAGUCUUGUAAUGCAGCCACUGUGGAUAAAAGUGAAUUACUGUUCUUAAUUUACCCUUUUGUCUCCCUUCAGGAUGGAUUGUAGGAAUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.84049988 364.72772217]
[97.88684082 348.88861084]
[97.88684082 333.88861084]
[97.88684082 318.88861084]
[97.88684082 303.88861084]
[97.88684082 288.88861084]
[97.88684082 273.88861084]
[97.64394379 258.89056396]
[97.15821075 243.89843750]
[96.67248535 228.90629578]
[96.18675995 213.91416931]
[95.70102692 198.92202759]
[95.21530151 183.92990112]
[94.72956848 168.93775940]
[94.24384308 153.94563293]
[86.09846497 141.47558594]
[93.38483429 127.43209839]
[92.89910889 112.43996429]
[85.68356323 100.46383667]
[92.10876465 88.04576111]
[91.62303162 73.05363464]
[75.92358398 66.52005005]
[64.62378693 53.88584137]
[59.90634537 37.66213608]
[62.65189743 21.04633522]
[72.27509308 7.29194832]
[86.84857178 -0.92844844]
[85.39342499 -15.85769939]
[83.93827057 -30.78695107]
[82.48312378 -45.71620178]
[81.02797699 -60.64545441]
[79.57283020 -75.57470703]
[78.11768341 -90.50395966]
[76.66253662 -105.43320465]
[74.72471619 -120.30751038]
[72.30625153 -135.11126709]
[69.88778687 -149.91500854]
[67.46932220 -164.71876526]
[65.05085754 -179.52250671]
[62.63239288 -194.32626343]
[60.21393204 -209.13002014]
[57.79546738 -223.93376160]
[44.26094055 -231.76643372]
[38.97625732 -246.48397827]
[44.43667984 -261.13723755]
[58.06396866 -268.80737305]
[73.42372894 -265.87280273]
[83.26355743 -253.71911621]
[82.93738556 -238.08493042]
[72.59922028 -226.35223389]
[75.01767731 -211.54847717]
[77.43614197 -196.74472046]
[79.85460663 -181.94097900]
[82.27307129 -167.13722229]
[84.69153595 -152.33348083]
[87.11000061 -137.52972412]
[89.52846527 -122.72597504]
[92.97121429 -119.16685486]
[94.08802795 -113.34652710]
[91.59178925 -106.88835907]
[93.04693604 -91.95910645]
[94.50208282 -77.02985382]
[95.95722961 -62.10060120]
[97.41237640 -47.17134857]
[98.86752319 -32.24209976]
[100.32266998 -17.31284714]
[101.77782440 -2.38359618]
[114.48567200 1.15797234]
[125.22534943 8.87444496]
[132.67250061 19.84161377]
[135.89939880 32.73278427]
[134.49052429 45.97924423]
[128.59579468 57.96116638]
[118.91509247 67.20567322]
[106.61516571 72.56790161]
[107.10089111 87.56003571]
[114.31643677 99.53616333]
[107.89123535 111.95423889]
[108.37696838 126.94636536]
[116.55708313 140.48875427]
[109.23597717 153.45989990]
[109.72170258 168.45204163]
[110.20743561 183.44416809]
[110.69316101 198.43629456]
[111.17888641 213.42843628]
[111.66461945 228.42056274]
[112.15034485 243.41270447]
[112.63607788 258.40484619]
[116.09591675 267.07034302]
[112.88684082 273.88861084]
[112.88684082 288.88861084]
[112.88684082 303.88861084]
[112.88684082 318.88861084]
[112.88684082 333.88861084]
[112.88684082 348.88861084]
[118.93317413 364.72772217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[17 79]
[18 78]
[20 76]
[21 75]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
