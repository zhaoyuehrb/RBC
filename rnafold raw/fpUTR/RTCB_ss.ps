%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCUCAUCUGCUGCGGCGCUGGUCGCGCCUGCGCUUUGGUUCUUGGAAGGCGGUGCUCUGAGAAGCCGGACUACGCGGCAGCGGCUCUUCAAAGCGGAGCCGGGAGUUUUUGCUACAGUUUUCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[187.19432068 291.37167358]
[193.68966675 277.77911377]
[203.04721069 265.97299194]
[214.79757690 256.54556274]
[208.24340820 243.05322266]
[201.68923950 229.56089783]
[195.13507080 216.06857300]
[179.57472229 210.52465820]
[173.98104858 193.53160095]
[184.72322083 177.54283142]
[172.71510315 168.55366516]
[160.70698547 159.56449890]
[148.69886780 150.57533264]
[136.69075012 141.58616638]
[124.68263245 132.59700012]
[112.67451477 123.60783386]
[100.66639709 114.61867523]
[85.90472412 111.95537567]
[71.51232910 116.18136597]
[57.11993790 120.40734863]
[42.72754288 124.63333893]
[31.66622353 135.94517517]
[17.27464676 132.10697937]
[2.88225174 136.33297729]
[-11.51014233 140.55895996]
[-25.00422859 150.82278442]
[-38.60247040 140.69735718]
[-32.63711929 124.82754517]
[-15.73613071 126.16656494]
[-1.34373653 121.94057465]
[13.04865837 117.71459198]
[23.08053589 106.70501709]
[38.50155258 110.24094391]
[52.89394760 106.01495361]
[67.28634644 101.78897095]
[81.67874146 97.56298065]
[87.08757019 83.57210541]
[79.28055573 70.76388550]
[71.47353363 57.95566940]
[63.66651917 45.14744949]
[55.85950089 32.33922958]
[48.05248642 19.53100967]
[40.24546814 6.72279024]
[32.28659058 -5.99162149]
[24.17697716 -18.61042404]
[16.06736565 -31.22922707]
[7.95775318 -43.84803009]
[-0.15185900 -56.46683502]
[-8.26147079 -69.08563995]
[-15.60687160 -74.68168640]
[-16.40976524 -82.10264587]
[-31.82571411 -85.58460999]
[-40.19355392 -98.99187469]
[-36.54879761 -114.37014771]
[-23.05381012 -122.59577179]
[-7.71493149 -118.78862762]
[0.36755523 -105.20742798]
[-3.60154653 -89.90966034]
[4.35733175 -77.19525146]
[12.46694374 -64.57644653]
[20.57655716 -51.95764160]
[28.68616867 -39.33884048]
[36.79578018 -26.72003746]
[44.90539169 -14.10123348]
[51.22963333 -10.13649559]
[53.05368805 -1.08422697]
[60.86070633 11.72399235]
[68.66772461 24.53221130]
[76.47473907 37.34043121]
[84.28175354 50.14865112]
[92.08877563 62.95687103]
[99.89579010 75.76509094]
[109.09577942 81.43116760]
[113.57051086 89.56492615]
[113.30152893 97.36268616]
[109.65556335 102.61054993]
[121.66368103 111.59971619]
[133.67179871 120.58888245]
[145.67991638 129.57804871]
[157.68803406 138.56721497]
[169.69615173 147.55638123]
[181.70426941 156.54554749]
[193.71238708 165.53471375]
[208.40649414 168.54853821]
[222.98367310 165.01216125]
[237.56083679 161.47578430]
[252.13801575 157.93939209]
[266.71517944 154.40301514]
[281.29235840 150.86662292]
[295.86953735 147.33024597]
[302.65109253 133.23965454]
[316.92449951 126.85189056]
[331.95031738 131.18304443]
[340.63378906 144.18809509]
[338.87487793 159.72644043]
[327.50405884 170.46134949]
[311.89028931 171.32414246]
[299.40591431 161.90740967]
[284.82873535 165.44380188]
[270.25158691 168.98017883]
[255.67440796 172.51657104]
[241.09722900 176.05294800]
[226.52005005 179.58934021]
[211.94288635 183.12571716]
[215.12158203 197.79103088]
[208.62739563 209.51440430]
[215.18156433 223.00672913]
[221.73573303 236.49905396]
[228.28990173 249.99139404]
[242.96397400 246.58264160]
[258.02865601 246.52516174]
[272.72830200 249.82183838]
[286.32559204 256.30731201]
[298.13848877 265.65628052]
[307.57446289 277.39978027]
[314.16021729 290.94879150]
[317.56542969 305.62368774]
[317.61926270 320.68835449]
[314.31900024 335.38720703]
[307.83023071 348.98294067]
[298.47842407 360.79357910]
[286.73263550 370.22671509]
[273.18203735 376.80917358]
[258.50631714 380.21081543]
[243.44161987 380.26098633]
[228.74356079 376.95718384]
[215.14941406 370.46514893]
[203.34104919 361.11044312]
[193.91075134 349.36236572]
[187.33155823 335.81018066]
[183.93348694 321.13363647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 109]
[5 108]
[6 107]
[7 106]
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[15 78]
[16 77]
[17 76]
[18 36]
[19 35]
[20 34]
[21 33]
[23 31]
[24 30]
[25 29]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[51 58]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
