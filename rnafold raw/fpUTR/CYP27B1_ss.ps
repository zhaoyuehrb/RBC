%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUAAUCCCCAGCACAGACCACUCAGGAGGAGGGAUUGGCUGAGGAGCUUGGAGAGGGGGCGUCAUCACCUCACCCAAAGGUUAAAUAGGGGUUGAGAUAUGAUGCUCAGGAGAAGCGCUUUCUUUCGCGAGCACCCUGAACCAGACC\
) } def
/len { sequence length } bind def

/coor [
[121.16381836 225.59138489]
[117.80455780 210.97238159]
[114.44529724 196.35337830]
[111.08603668 181.73435974]
[107.72678375 167.11535645]
[104.36752319 152.49635315]
[101.00826263 137.87734985]
[87.84708405 135.88894653]
[76.18560791 129.47175598]
[67.46288300 119.41767120]
[53.31557083 124.40299988]
[39.16825485 129.38832092]
[28.72408867 141.27233887]
[14.14877701 138.20484924]
[0.00146019 143.19017029]
[-14.14585590 148.17549133]
[-28.29317284 153.16081238]
[-35.39983368 158.99957275]
[-42.78244781 158.10000610]
[-57.02914047 162.79380798]
[-71.27583313 167.48759460]
[-81.96179199 179.15467834]
[-96.47105408 175.78857422]
[-110.71774292 180.48237610]
[-117.94278717 186.17399597]
[-125.30537415 185.12303162]
[-139.64543152 189.52333069]
[-153.98550415 193.92362976]
[-162.74270630 207.36575317]
[-178.72535706 208.75663757]
[-189.67292786 197.02929688]
[-187.18736267 181.17994690]
[-173.17539978 173.36686707]
[-158.38580322 179.58357239]
[-144.04573059 175.18327332]
[-129.70567322 170.78297424]
[-115.41154480 166.23567200]
[-101.16485596 161.54188538]
[-91.49790955 150.21052551]
[-75.96963501 153.24090576]
[-61.72293854 148.54710388]
[-47.47624588 143.85330200]
[-33.27849579 139.01348877]
[-19.13117790 134.02816772]
[-4.98386192 129.04284668]
[9.16345501 124.05752563]
[18.59570885 112.53008270]
[34.18292999 115.24100494]
[48.33024979 110.25567627]
[62.47756577 105.27035522]
[63.09547424 91.41129303]
[68.66040039 78.70353699]
[78.42636871 68.85054779]
[91.08425903 63.17311478]
[104.93729401 62.43228912]
[118.12849426 66.72737122]
[127.77030945 55.23670959]
[137.41212463 43.74604034]
[147.05393982 32.25537491]
[156.69575500 20.76470757]
[166.33757019 9.27404118]
[175.97938538 -2.21662521]
[185.62118530 -13.70729160]
[195.26300049 -25.19795799]
[204.90481567 -36.68862534]
[214.54663086 -48.17929077]
[224.18844604 -59.66996002]
[232.60185242 -72.08827209]
[239.69825745 -85.30345917]
[246.79466248 -98.51863861]
[253.89106750 -111.73381805]
[260.98745728 -124.94900513]
[259.39935303 -145.00407410]
[276.15945435 -154.57469177]
[282.70730591 -168.07008362]
[289.25518799 -181.56546021]
[295.80307007 -195.06085205]
[302.21203613 -208.62274170]
[308.48144531 -222.24972534]
[314.75085449 -235.87669373]
[304.66925049 -247.29077148]
[300.10794067 -261.82055664]
[301.85726929 -276.94866943]
[309.61407471 -290.05407715]
[322.03448486 -298.86618042]
[336.96658325 -301.85824585]
[351.82327271 -298.51187134]
[364.03057861 -289.40682983]
[371.47348022 -276.12063599]
[372.86245728 -260.95520020]
[367.95687866 -246.53802490]
[357.60665894 -235.36695862]
[343.60501099 -229.37748718]
[328.37780762 -229.60729980]
[322.10842896 -215.98031616]
[315.83901978 -202.35333252]
[315.90087891 -194.91638184]
[309.29843140 -188.51296997]
[302.75057983 -175.01759338]
[296.20269775 -161.52220154]
[289.65481567 -148.02682495]
[293.87762451 -138.63932800]
[292.16760254 -128.26541138]
[284.85528564 -120.40705109]
[274.20266724 -117.85260010]
[267.10626221 -104.63742065]
[260.00985718 -91.42223358]
[252.91345215 -78.20705414]
[245.81704712 -64.99186707]
[259.59503174 -70.92203522]
[274.50747681 -69.30367279]
[286.69256592 -60.55587769]
[292.99475098 -46.94403076]
[291.78201294 -31.99313545]
[283.36837769 -19.57496262]
[269.93273926 -12.90539360]
[254.95440674 -13.71161842]
[242.31230164 -21.78485298]
[235.28027344 -35.03440475]
[235.67910767 -50.02814484]
[226.03730774 -38.53747940]
[216.39549255 -27.04681015]
[206.75367737 -15.55614471]
[197.11186218 -4.06547785]
[187.47004700 7.42518902]
[177.82823181 18.91585541]
[168.18641663 30.40652275]
[158.54460144 41.89719009]
[148.90278625 53.38785553]
[139.26097107 64.87852478]
[129.61915588 76.36918640]
[136.98870850 91.78143311]
[136.83929443 108.86433411]
[129.20126343 124.14530945]
[115.62727356 134.51808167]
[118.98652649 149.13710022]
[122.34578705 163.75610352]
[125.70504761 178.37510681]
[129.06430054 192.99411011]
[132.42356873 207.61312866]
[135.78282166 222.23213196]
[150.67953491 225.55639648]
[162.65333557 235.02165222]
[169.32682800 248.74853516]
[169.37496948 264.01156616]
[162.78820801 277.78027344]
[150.87435913 287.32086182]
[135.99891663 290.73907471]
[121.11541748 287.35614014]
[109.17897797 277.84384155]
[102.55960083 264.09075928]
[102.57156372 248.82765198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[3 139]
[4 138]
[5 137]
[6 136]
[7 135]
[10 50]
[11 49]
[12 48]
[14 46]
[15 45]
[16 44]
[17 43]
[19 42]
[20 41]
[21 40]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[56 131]
[57 130]
[58 129]
[59 128]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
[65 122]
[66 121]
[67 120]
[68 109]
[69 108]
[70 107]
[71 106]
[72 105]
[74 101]
[75 100]
[76 99]
[77 98]
[78 96]
[79 95]
[80 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
