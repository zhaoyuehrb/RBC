%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUGGAGAGGGGAGGGGGGAGCGGAGCCGAGCGGAGACAGCCGCGGCGCUGCAGAGCGGCUGGGGCGGCGGCGCGGCUCCCGGUGCUCCCCCCGGCGCGCGCCCCGAGUCGGUGAGGGCCCGGCUCUGCGGCCCCCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[109.19824219 269.51541138]
[96.93267822 279.48193359]
[81.22103882 277.77316284]
[71.38475037 265.40292358]
[73.25951385 249.71023560]
[85.73306274 240.00527954]
[87.35484314 225.09321594]
[74.86387634 214.49418640]
[71.08789825 198.38323975]
[77.69957733 183.03337097]
[92.28713226 174.54200745]
[93.58547211 159.59831238]
[94.88381958 144.65460205]
[96.18215942 129.71089172]
[76.46741486 111.99704742]
[79.92762756 89.03248596]
[69.85047913 77.92163086]
[59.77333450 66.81077576]
[49.69618607 55.69991684]
[39.61904144 44.58906174]
[29.54189491 33.47820282]
[19.46474838 22.36734772]
[9.38760185 11.25649166]
[-0.68954432 0.14563605]
[-11.23853970 -10.51826096]
[-22.23958015 -20.71517754]
[-33.24061966 -30.91209602]
[-44.24165726 -41.10901260]
[-55.24269867 -51.30593109]
[-66.24373627 -61.50284958]
[-77.24478149 -71.69976807]
[-92.62563324 -75.40648651]
[-96.70007324 -89.73297882]
[-107.70111847 -99.92989349]
[-123.08197021 -103.63661957]
[-127.15641022 -117.96310425]
[-137.50535583 -114.88192749]
[-148.11355591 -116.40315247]
[-157.04324341 -122.18028259]
[-162.69206238 -131.09574890]
[-164.08038330 -141.47653198]
[-161.02066040 -151.40791321]
[-171.33615112 -162.29785156]
[-181.65164185 -173.18777466]
[-196.75924683 -177.88571167]
[-199.89454651 -192.44657898]
[-210.21003723 -203.33651733]
[-220.52552795 -214.22645569]
[-230.84101868 -225.11637878]
[-241.27388000 -235.89393616]
[-251.82287598 -246.55783081]
[-262.37185669 -257.22171021]
[-278.32327271 -261.02764893]
[-282.74298096 -276.81997681]
[-271.08441162 -288.35293579]
[-255.34086609 -283.76242065]
[-251.70797729 -267.77072144]
[-241.15898132 -257.10681152]
[-230.60998535 -246.44293213]
[-223.61808777 -243.88070679]
[-219.95109558 -235.43186951]
[-209.63560486 -224.54194641]
[-199.32009888 -213.65200806]
[-189.00460815 -202.76208496]
[-174.63482666 -198.84307861]
[-170.76170349 -183.50328064]
[-160.44621277 -172.61334229]
[-150.13072205 -161.72340393]
[-130.73773193 -162.70578003]
[-116.57604218 -148.98263550]
[-116.95949554 -128.96414185]
[-102.36550903 -125.98677063]
[-97.50419617 -110.93093109]
[-86.50315857 -100.73401642]
[-71.90917206 -97.75664520]
[-67.04785919 -82.70080566]
[-56.04682159 -72.50389099]
[-45.04578018 -62.30696869]
[-34.04474258 -52.11005402]
[-23.04370117 -41.91313553]
[-12.04266167 -31.71621895]
[-1.04162228 -21.51930046]
[1.83221257 -21.53334045]
[4.88377714 -20.36689758]
[7.64711666 -17.94664383]
[9.63875294 -14.37514496]
[10.42131138 -9.93150997]
[20.49845886 1.17934585]
[30.57560349 12.29020214]
[40.65275192 23.40105820]
[50.72989655 34.51191330]
[60.80704498 45.62276840]
[70.88418579 56.73362732]
[80.96133423 67.84448242]
[91.03848267 78.95533752]
[104.03417206 75.68868256]
[117.64347839 80.34244537]
[127.14604950 92.41911316]
[128.66387939 108.70030212]
[142.82595825 113.64353180]
[152.03547668 113.52379608]
[157.23931885 118.85030365]
[171.29096985 124.09918976]
[185.34263611 129.34806824]
[195.04750061 124.23332214]
[205.74169922 125.32398224]
[213.87341309 132.01264954]
[216.87777710 141.87379456]
[230.68887329 147.72644043]
[244.49996948 153.57910156]
[258.31106567 159.43176270]
[272.12216187 165.28440857]
[285.93325806 171.13706970]
[299.74435425 176.98973083]
[308.94219971 177.46841431]
[313.78909302 183.12168884]
[330.04098511 180.92900085]
[339.85034180 194.07084656]
[333.12615967 209.02803040]
[316.78567505 210.41387939]
[307.63858032 196.80274963]
[293.89169312 190.80082703]
[280.08059692 184.94816589]
[266.26950073 179.09550476]
[252.45840454 173.24285889]
[238.64730835 167.39019775]
[224.83621216 161.53753662]
[211.02511597 155.68489075]
[192.11709595 159.51913452]
[180.09375000 143.39973450]
[166.04209900 138.15084839]
[151.99043274 132.90196228]
[137.88273621 127.80561066]
[123.72064972 122.86238098]
[111.12586212 131.00924683]
[109.82752228 145.95294189]
[108.52918243 160.89665222]
[107.23083496 175.84036255]
[118.31160736 184.10850525]
[123.79872894 196.68028259]
[122.34983826 210.21150208]
[114.45223999 221.16047668]
[102.26691437 226.71499634]
[100.64512634 241.62705994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 144]
[7 143]
[11 138]
[12 137]
[13 136]
[14 135]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[24 87]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[33 74]
[34 73]
[36 71]
[42 68]
[43 67]
[44 66]
[46 64]
[47 63]
[48 62]
[49 61]
[50 59]
[51 58]
[52 57]
[99 134]
[100 133]
[102 132]
[103 131]
[104 130]
[108 128]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
[114 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
