%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGACAAAAUCAGGAAGUGUGUUGUUAACUUCCUGACUUCUUAUAUUUCAGAGAACGAAGAGUUGAACCAUUUAAC\
) } def
/len { sequence length } bind def

/coor [
[103.78476715 140.87724304]
[96.23412323 140.87898254]
[88.81087494 139.49780273]
[81.76615906 136.78044128]
[75.33827972 132.81878662]
[69.74469757 127.74689484]
[65.17465210 121.73633575]
[61.78272629 114.99044037]
[59.68368149 107.73742676]
[58.94852066 100.22265625]
[59.60211945 92.70035553]
[45.57687759 87.38128662]
[31.55163383 82.06221008]
[17.52639008 76.74313354]
[3.50114632 71.42406464]
[-10.52409744 66.10498810]
[-24.54934120 60.78591537]
[-38.57458496 55.46684265]
[-52.59982681 50.14776993]
[-64.93921661 59.40752411]
[-80.32761383 60.50336075]
[-93.85462952 53.08559418]
[-101.20385742 39.52121353]
[-100.03017426 24.13856125]
[-90.70809937 11.84618473]
[-76.21228027 6.56653738]
[-61.16827011 9.98433590]
[-50.37656403 21.00897217]
[-47.28075409 36.12252808]
[-33.25551224 41.44160080]
[-19.23026848 46.76067352]
[-5.20502424 52.07974625]
[8.82021999 57.39881897]
[22.84546280 62.71789169]
[36.87070847 68.03696442]
[50.89595032 73.35604095]
[64.92119598 78.67510986]
[89.37493896 60.34673309]
[119.71669006 63.99270248]
[129.20336914 52.37362671]
[138.69004822 40.75455475]
[148.17674255 29.13547897]
[157.66342163 17.51640511]
[153.57763672 2.54690218]
[159.10249329 -11.95328903]
[172.11357117 -20.40854836]
[187.60784912 -19.56765747]
[199.62745667 -9.75395489]
[203.55059814 5.25898981]
[197.86877441 19.69839287]
[184.76672363 28.01201057]
[169.28248596 27.00308609]
[159.79580688 38.62216187]
[150.30912781 50.24123383]
[140.82244873 61.86030960]
[131.33576965 73.47938538]
[136.10630798 80.46520996]
[139.34370422 88.28052521]
[140.91050720 96.59347534]
[140.74015808 105.05106354]
[138.83990479 113.29418182]
[135.29043579 120.97280121]
[130.24247742 127.76087189]
[139.25361633 139.75251770]
[148.26473999 151.74415588]
[157.27587891 163.73579407]
[166.28701782 175.72743225]
[175.29814148 187.71908569]
[189.64707947 196.74926758]
[184.94198608 213.03724670]
[167.98803711 213.02497864]
[163.30650330 196.73020935]
[154.29536438 184.73857117]
[145.28424072 172.74693298]
[136.27310181 160.75529480]
[127.26197052 148.76364136]
[118.25083923 136.77200317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
