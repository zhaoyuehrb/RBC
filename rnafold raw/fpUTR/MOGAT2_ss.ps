%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAACCUGUGGGUGCCUCAGACCACAGCAGAGCUCACAGAACCUGCGGGAGCCAGGCUGACCCGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[102.77928162 132.58036804]
[92.31893158 131.78373718]
[82.64920044 127.71559143]
[74.76538086 120.79467773]
[69.47898102 111.73336029]
[67.33411407 101.46432495]
[68.55155182 91.04457092]
[55.45196915 83.73697662]
[42.35238647 76.42938232]
[29.25280380 69.12178802]
[16.15321922 61.81419754]
[3.05363607 54.50660324]
[-10.04594707 47.19901276]
[-23.14553070 39.89141846]
[-35.95728302 42.65736771]
[-46.80175781 36.04435730]
[-49.99732208 24.17023277]
[-62.76084518 16.29035378]
[-75.69556427 8.69475937]
[-89.71938324 15.33646297]
[-104.96251678 12.43364429]
[-115.56368256 1.10249424]
[-117.44651031 -14.29992771]
[-109.88700867 -27.85107613]
[-95.79196930 -34.34025574]
[-80.58122253 -31.27224922]
[-70.10359955 -19.82676506]
[-68.38796997 -4.40482473]
[-60.77074432 -3.88162231]
[-54.88096619 3.52683067]
[-42.11744308 11.40670967]
[-24.71697426 10.83201122]
[-15.83793831 26.79183578]
[-2.73835492 34.09942627]
[10.36122894 41.40702057]
[23.46081161 48.71461487]
[36.56039429 56.02220535]
[49.65998077 63.32979965]
[62.75956345 70.63739014]
[75.85914612 77.94498444]
[92.98725128 68.06215668]
[112.68014526 69.86001587]
[127.73550415 82.68103790]
[132.64709473 101.83615875]
[147.03096008 106.09107971]
[161.41482544 110.34600830]
[175.88929749 114.28169250]
[190.44729614 117.89620972]
[205.00529480 121.51072693]
[219.56329346 125.12523651]
[234.26692200 128.09226990]
[249.08740234 130.40600586]
[263.90789795 132.71974182]
[280.49011230 129.18893433]
[288.47332764 144.14567566]
[276.31106567 155.95736694]
[261.59414673 147.54022217]
[246.77366638 145.22648621]
[231.95318604 142.91275024]
[227.40447998 145.16053772]
[221.36553955 144.33470154]
[215.94877625 139.68324280]
[201.39077759 136.06872559]
[186.83277893 132.45420837]
[172.27479553 128.83969116]
[164.78715515 130.33341980]
[157.15989685 124.72987366]
[142.77603149 120.47494507]
[128.39216614 116.22002411]
[121.79452515 124.37628174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[17 31]
[18 30]
[19 28]
[44 69]
[45 68]
[46 67]
[47 65]
[48 64]
[49 63]
[50 62]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
