%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGACUCUCGCGCUGGCCUCUGGAGCGCGGGGUGGGCGUCCCGUCACCCUGCGCCCAGCUUCCCCGGCCCGUUCCCGCAGGGCCGGCCUCCCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[66.23672485 239.14317322]
[63.74473953 241.45812988]
[60.96245956 242.50848389]
[54.63493347 256.10858154]
[48.30740738 269.70864868]
[47.10795593 286.62011719]
[30.52535820 290.14910889]
[22.54376793 275.19149780]
[34.70731735 263.38113403]
[41.03484344 249.78105164]
[47.36236954 236.18095398]
[52.83214188 222.21379089]
[57.42300034 207.93359375]
[62.01385880 193.65339661]
[66.60472107 179.37319946]
[71.19557953 165.09300232]
[75.78643799 150.81280518]
[80.37729645 136.53260803]
[65.98458099 123.71990204]
[58.93651581 105.78556824]
[60.75492096 86.60200500]
[71.04716492 70.31135559]
[62.68938065 57.85553360]
[54.33159637 45.39971161]
[45.97381210 32.94389343]
[38.45788193 27.43903732]
[37.55685043 19.96818542]
[29.59048080 7.25846386]
[21.62411499 -5.45125675]
[13.65774727 -18.16097641]
[5.69138050 -30.87069702]
[-2.27498627 -43.58041763]
[-10.24135303 -56.29013824]
[-18.20771980 -68.99986267]
[-26.17408752 -81.70957947]
[-34.14045334 -94.41930389]
[-42.10682297 -107.12902069]
[-49.44791412 -112.86495972]
[-50.11616898 -120.36022186]
[-57.68341446 -133.31153870]
[-70.89452362 -143.93711853]
[-64.34140015 -159.57339478]
[-47.50211716 -157.60491943]
[-44.73208618 -140.87878418]
[-37.16484451 -127.92745972]
[-29.39710045 -115.09539032]
[-21.43073463 -102.38566589]
[-13.46436691 -89.67594910]
[-5.49799967 -76.96622467]
[2.46836734 -64.25650787]
[10.43473434 -51.54678345]
[18.40110207 -38.83706284]
[26.36746788 -26.12734413]
[34.33383560 -13.41762352]
[42.30020142 -0.70790303]
[50.26657104 12.00181770]
[58.42963028 24.58610916]
[66.78741455 37.04193115]
[75.14520264 49.49774933]
[83.50298309 61.95356750]
[96.00464630 58.72386169]
[108.89365387 59.49586105]
[120.92042542 64.19471741]
[130.91897583 72.36488342]
[137.91993713 83.21426392]
[141.24458313 95.69101715]
[156.19924927 96.85626984]
[171.15391541 98.02153015]
[186.10858154 99.18679047]
[201.06326294 100.35204315]
[216.01792908 101.51730347]
[230.97259521 102.68256378]
[240.21412659 90.32952118]
[254.67514038 84.95524597]
[269.74114990 88.27464294]
[280.60470581 99.22851562]
[283.79922485 114.32151031]
[278.30538940 128.73751831]
[265.87622070 137.87643433]
[250.47787476 138.82206726]
[237.02386475 131.27267456]
[229.80734253 117.63722992]
[214.85267639 116.47197723]
[199.89799500 115.30671692]
[184.94332886 114.14145660]
[169.98866272 112.97620392]
[155.03399658 111.81094360]
[140.07931519 110.64568329]
[135.40327454 121.59375763]
[127.80951691 130.76220703]
[117.92386627 137.39541626]
[106.56103516 140.94673157]
[94.65749359 141.12347412]
[90.06663513 155.40367126]
[85.47577667 169.68386841]
[80.88491821 183.96406555]
[76.29405975 198.24426270]
[71.70320129 212.52445984]
[67.11234283 226.80465698]
[68.31601715 231.40701294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[12 99]
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[22 60]
[23 59]
[24 58]
[25 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[39 45]
[40 44]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
