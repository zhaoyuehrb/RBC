%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGAAGGAGUGGAGCCGUGCUCUCACCCUGUCUUAGAGGACCCGGAAGCGCCAAGUGACUGAGGGCCGAAGACACUCACCUGUGGAGCCUGUGCACGUAGGUAGAGGCGGCGGCUCUGAGUCCAGGAGCUCCAGUGGGCAGCUCCCCAGCACCAGCC\
) } def
/len { sequence length } bind def

/coor [
[96.10803986 162.33444214]
[94.04001617 147.47769165]
[87.87380981 148.43536377]
[81.39846039 148.56994629]
[74.72586823 147.82212830]
[67.97756195 146.14794922]
[58.18523026 157.51062012]
[48.39289856 168.87329102]
[45.13663864 177.46589661]
[38.29310608 180.36125183]
[28.27819061 191.52822876]
[18.26327515 202.69522095]
[8.35916901 213.96058655]
[-1.43316281 225.32325745]
[-11.22549438 236.68592834]
[-21.01782608 248.04859924]
[-26.77779198 263.99411011]
[-43.69465637 262.87338257]
[-47.30080032 246.30740356]
[-32.38049316 238.25625610]
[-22.58816338 226.89360046]
[-12.79583168 215.53092957]
[-3.00349975 204.16825867]
[-1.00849950 197.01025391]
[7.09629345 192.68029785]
[17.11120796 181.51332092]
[27.12612152 170.34632874]
[37.03022766 159.08096313]
[46.82255936 147.71829224]
[56.61489105 136.35562134]
[49.50313568 123.14869690]
[34.62667084 125.06985474]
[19.75020790 126.99101257]
[4.87374449 128.91217041]
[-7.82576275 139.28784180]
[-23.06315613 133.22534180]
[-25.16351318 116.96125031]
[-11.96616364 107.22667694]
[2.95258784 114.03570557]
[17.82905006 112.11454773]
[32.70551300 110.19338989]
[47.58197784 108.27223206]
[48.46902466 100.82487488]
[50.24312210 85.93016052]
[51.13017273 78.48280334]
[37.12116241 73.12111664]
[21.94438171 78.32159424]
[8.49391556 69.57719421]
[7.08780909 53.59587860]
[18.80470657 42.63714218]
[34.65640640 45.10759354]
[42.48284531 59.11210632]
[56.49185562 64.47379303]
[75.14779663 56.43062210]
[93.37212372 56.35242081]
[108.21006012 62.75731277]
[108.81481934 53.58831787]
[114.51437378 48.82050705]
[120.83125305 35.21547318]
[127.14813995 21.61043549]
[133.46501160 8.00539875]
[132.25886536 -7.76976442]
[144.63639832 -16.05505753]
[150.95327759 -29.66009331]
[157.27015686 -43.26512909]
[163.58703613 -56.87016678]
[169.90393066 -70.47520447]
[176.22080994 -84.08023834]
[182.53768921 -97.68527222]
[177.34474182 -112.37101746]
[183.94476318 -126.07847595]
[197.97738647 -130.93864441]
[198.76318359 -140.09390259]
[204.55581665 -144.74818420]
[205.52233887 -153.88612366]
[211.40580750 -158.42504883]
[218.25524902 -171.76989746]
[225.10469055 -185.11476135]
[231.82196045 -198.52662659]
[238.40640259 -212.00421143]
[244.99084473 -225.48178101]
[251.57528687 -238.95936584]
[258.15972900 -252.43693542]
[264.74417114 -265.91452026]
[271.32861328 -279.39208984]
[267.88082886 -291.85696411]
[273.68402100 -302.96365356]
[285.12802124 -306.98471069]
[291.97744751 -320.32955933]
[290.62774658 -336.67306519]
[304.25906372 -345.79003906]
[318.84869385 -338.30169678]
[319.38806152 -321.91143799]
[305.32229614 -313.48013306]
[298.47286987 -300.13525391]
[300.30517578 -282.70498657]
[284.80621338 -272.80764771]
[278.22177124 -259.33007812]
[271.63732910 -245.85249329]
[265.05285645 -232.37490845]
[258.46841431 -218.89733887]
[251.88397217 -205.41975403]
[245.29953003 -191.94218445]
[245.18843079 -184.51220703]
[238.44953918 -178.26531982]
[231.60011292 -164.92045593]
[224.75067139 -151.57560730]
[218.03340149 -138.16374207]
[211.58241272 -124.62176514]
[216.92495728 -110.76561737]
[210.71255493 -96.87818909]
[196.14273071 -91.36839294]
[189.82583618 -77.76335907]
[183.50895691 -64.15831757]
[177.19207764 -50.55328369]
[170.87519836 -36.94824982]
[164.55831909 -23.34321213]
[158.24143982 -9.73817539]
[159.89941406 5.06386471]
[147.07005310 14.32227993]
[140.75317383 27.92731667]
[134.43629456 41.53235245]
[128.11941528 55.13739014]
[121.93724060 68.80416870]
[141.32398987 88.13501740]
[144.09687805 118.57734680]
[155.92919922 127.79669189]
[167.76150513 137.01603699]
[179.59382629 146.23538208]
[191.42614746 155.45472717]
[203.25845337 164.67407227]
[215.18127441 173.77607727]
[227.19342041 182.75984192]
[243.53260803 184.16107178]
[250.24270630 199.12458801]
[240.42095947 212.25718689]
[224.17112732 210.04919434]
[218.20965576 194.77200317]
[206.19749451 185.78822327]
[198.91876221 184.29260254]
[194.03910828 176.50637817]
[182.20680237 167.28703308]
[170.37448120 158.06768799]
[158.54216003 148.84835815]
[146.70985413 139.62901306]
[134.87753296 130.40966797]
[128.38233948 134.15966797]
[128.38237000 149.15966797]
[115.39196014 141.65966797]
[108.89677429 145.40966797]
[110.96479797 160.26641846]
[124.71881866 167.45019531]
[131.59336853 181.36134338]
[128.94505310 196.65075684]
[117.79219818 207.43933105]
[102.42330170 209.57864380]
[88.74802399 202.24609375]
[82.02478027 188.26118469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[6 30]
[7 29]
[8 28]
[10 27]
[11 26]
[12 25]
[13 23]
[14 22]
[15 21]
[16 20]
[31 42]
[32 41]
[33 40]
[34 39]
[45 53]
[46 52]
[56 124]
[58 123]
[59 122]
[60 121]
[61 120]
[63 118]
[64 117]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[72 109]
[74 108]
[76 107]
[77 106]
[78 105]
[79 103]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[88 95]
[89 94]
[126 146]
[127 145]
[128 144]
[129 143]
[130 142]
[131 141]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
