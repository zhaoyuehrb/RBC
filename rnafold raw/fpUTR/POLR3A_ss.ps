%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUACGGUGGCCGAGAGGAUGCCGCAGAUGUGUUAGCGGCGAGUCCAGAAGCAGCCCCAGGAGGUGCUGGGGGCAUCGUUUCUCUAAUCUGGCCUCCCGAGUGCCAAGGAGGCGUCCCGGCAGCGGUCAUC\
) } def
/len { sequence length } bind def

/coor [
[72.02650452 512.42401123]
[64.94467163 526.23077393]
[51.08475876 533.20806885]
[35.77617645 530.67291260]
[24.90538979 519.60015869]
[22.65243530 504.24752808]
[29.88362312 490.51837158]
[43.81841278 483.69186401]
[46.26907349 468.89340210]
[48.71973419 454.09497070]
[51.17039490 439.29650879]
[53.62105560 424.49804688]
[56.07171631 409.69958496]
[58.52237701 394.90115356]
[60.97303772 380.10269165]
[47.12329483 367.69555664]
[43.41218948 349.32391357]
[51.48669815 332.24548340]
[68.30187988 323.31552124]
[69.70649719 308.38143921]
[71.11112213 293.44735718]
[72.51574707 278.51324463]
[73.92036438 263.57916260]
[75.32498932 248.64508057]
[76.72961426 233.71098328]
[70.21810913 220.31510925]
[79.21367645 207.30010986]
[69.65661621 198.57708740]
[66.85539246 185.74468994]
[72.06020355 173.47309875]
[83.56494141 166.36224365]
[85.31927490 151.46519470]
[82.95527649 144.38827515]
[87.29332733 136.24098206]
[89.39640045 121.38913727]
[78.87932587 111.12873077]
[76.36256409 96.65285492]
[82.79946136 83.44484711]
[95.75176239 76.50778961]
[97.85483551 61.65594864]
[99.95790863 46.80411148]
[98.05242157 37.77270508]
[102.28831482 31.63035774]
[104.73897552 16.83190346]
[107.18963623 2.03344870]
[101.81092834 -12.84539986]
[111.52362061 -24.13756371]
[113.97428131 -38.93601990]
[116.42494202 -53.73447418]
[118.87560272 -68.53292847]
[121.32626343 -83.33138275]
[122.55572510 -98.28091431]
[122.55572510 -113.28091431]
[122.55572510 -128.28091431]
[111.65341949 -145.16322327]
[121.81481934 -161.54963684]
[121.11173248 -176.53314209]
[120.40865326 -191.51666260]
[119.70556641 -206.50016785]
[119.00248718 -221.48368835]
[118.12380981 -236.45793152]
[117.06966400 -251.42083740]
[104.97378540 -261.59262085]
[103.69650269 -277.34521484]
[113.99560547 -289.33288574]
[129.76081848 -290.44354248]
[141.63893127 -280.01828003]
[142.58285522 -264.24221802]
[132.03257751 -252.47499084]
[133.08673096 -237.51206970]
[136.72882080 -231.00006104]
[133.98599243 -222.18676758]
[134.68908691 -207.20326233]
[135.39216614 -192.21974182]
[136.09524536 -177.23623657]
[136.79833984 -162.25271606]
[145.02381897 -155.99980164]
[148.47402954 -146.02662659]
[145.75996399 -135.60021973]
[137.55572510 -128.28091431]
[137.55572510 -113.28091431]
[137.55572510 -98.28091431]
[148.58576965 -108.44644165]
[163.55911255 -109.34040070]
[175.72033691 -100.55947113]
[179.58274841 -86.06527710]
[173.40377808 -72.39704895]
[159.97116089 -65.72138214]
[145.34516907 -69.05008698]
[136.12471008 -80.88072205]
[133.67405701 -66.08226776]
[131.22338867 -51.28381348]
[128.77273560 -36.48535919]
[126.32207489 -21.68690300]
[131.87606812 -7.86653948]
[121.98809052 4.48410892]
[119.53742981 19.28256416]
[117.08676910 34.08102036]
[114.80974579 48.90718460]
[112.70667267 63.75902176]
[110.60359955 78.61086273]
[121.12067413 88.87126923]
[123.63743591 103.34714508]
[117.20053864 116.55515289]
[104.24823761 123.49221039]
[102.14516449 138.34405518]
[100.21633148 153.21952820]
[98.46200562 168.11657715]
[109.54157257 181.59605408]
[107.53067780 198.58955383]
[94.14776611 208.70472717]
[100.55880737 223.16879272]
[91.66370392 235.11561584]
[90.25907898 250.04969788]
[88.85445404 264.98379517]
[87.44983673 279.91787720]
[86.04521179 294.85195923]
[84.64058685 309.78607178]
[83.23596954 324.72015381]
[93.15578461 330.77600098]
[100.03175354 340.08190918]
[102.88147736 351.24279785]
[101.32254028 362.60363770]
[95.62332153 372.49487305]
[86.65774536 379.47769165]
[75.77149200 382.55334473]
[73.32083130 397.35180664]
[70.87017059 412.15026855]
[68.41950989 426.94869995]
[65.96884918 441.74716187]
[63.51818848 456.54562378]
[61.06752777 471.34408569]
[58.61686707 486.14251709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 133]
[9 132]
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[15 126]
[19 119]
[20 118]
[21 117]
[22 116]
[23 115]
[24 114]
[25 113]
[27 111]
[31 108]
[32 107]
[34 106]
[35 105]
[39 101]
[40 100]
[41 99]
[43 98]
[44 97]
[45 96]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 82]
[53 81]
[54 80]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
