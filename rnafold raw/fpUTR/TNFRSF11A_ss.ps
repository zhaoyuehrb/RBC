%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCCGCGCCCGCUGGGCCACAGAGGCCGCUGAGGCCGCGGCGCCCGCCAGCCUGUCCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[195.49061584 192.56687927]
[183.82604980 183.13618469]
[172.16148376 173.70549011]
[164.72267151 171.88867188]
[160.18482971 163.54908752]
[148.97512817 153.58201599]
[137.76541138 143.61494446]
[126.55571747 133.64787292]
[115.34600830 123.68080139]
[104.13630676 113.71372986]
[90.48214722 110.70448303]
[85.89662170 97.49597168]
[74.68692017 87.52890015]
[59.23264694 84.14127350]
[54.86259842 69.90217590]
[39.40832520 66.51454163]
[35.03827667 52.27544403]
[23.59799957 42.57389450]
[11.93343639 33.14319992]
[0.26887318 23.71250916]
[-11.39568996 14.28181553]
[-27.43675232 14.53456402]
[-37.52416229 2.05964184]
[-33.91972351 -13.57325840]
[-19.38845444 -20.37191391]
[-5.07749796 -13.12097836]
[-1.96499681 2.61725235]
[9.69956589 12.04794502]
[21.36413002 21.47863770]
[33.02869034 30.90933037]
[40.46750641 32.72615814]
[45.00534821 41.06573868]
[59.65782928 43.74045944]
[64.82966614 58.69246674]
[79.48214722 61.36718750]
[84.65399170 76.31919861]
[95.86369324 86.28627014]
[109.51785278 89.29551697]
[114.10337830 102.50402832]
[125.31307983 112.47109985]
[136.52278137 122.43817139]
[147.73249817 132.40524292]
[158.94219971 142.37231445]
[170.15190125 152.33938599]
[181.59217834 162.04093933]
[193.25674438 171.47163391]
[204.92131042 180.90231323]
[217.21977234 189.48995972]
[230.09135437 197.19206238]
[242.96293640 204.89418030]
[255.99191284 196.86273193]
[271.26168823 195.81765747]
[285.26339722 201.99914551]
[294.77954102 213.98669434]
[297.62338257 229.02568054]
[293.14141846 243.66024780]
[282.36358643 254.52748108]
[267.76654053 259.13015747]
[252.70457458 256.41064453]
[240.63882446 246.99383545]
[234.34190369 233.04365540]
[235.26081848 217.76576233]
[222.38923645 210.06364441]
[209.51766968 202.36152649]
[205.71905518 203.07917786]
[201.37663269 201.74798584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[12 37]
[13 36]
[15 34]
[17 32]
[18 30]
[19 29]
[20 28]
[21 27]
[48 64]
[49 63]
[50 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
