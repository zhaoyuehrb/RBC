%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUAUGCCGUCGGCGAGCGUGAUAGCCAACAGGAACCGGGAGCGGGGUCCCGGGACUGGGAAGAAACGGCGGCCGGGAGGGGGCUCCGGGGACC\
) } def
/len { sequence length } bind def

/coor [
[94.71556091 131.44265747]
[88.52495575 145.10560608]
[82.33435059 158.76856995]
[88.13528442 173.46975708]
[81.76530457 187.93345642]
[67.00361633 193.57864380]
[52.60805893 187.05609131]
[47.11926651 172.23554993]
[53.79364395 157.90975952]
[68.67139435 152.57797241]
[74.86199951 138.91500854]
[81.05260468 125.25205231]
[71.53670502 113.65689087]
[56.92855453 117.06303406]
[42.32040024 120.46918488]
[37.93878937 135.18981934]
[26.77286530 145.73579407]
[11.82619858 149.27030945]
[-2.88062954 144.84257507]
[-13.39155674 133.64364624]
[-16.87919617 118.68597412]
[-12.40539169 103.99309540]
[-1.17357230 93.51732635]
[13.79495811 90.07659149]
[28.47373962 94.59642792]
[38.91425323 105.86102295]
[53.52240753 102.45487976]
[68.13056183 99.04873657]
[73.16838074 85.89469147]
[83.00476837 76.81985474]
[95.17551422 73.25910950]
[106.96841431 75.36430359]
[116.02278137 82.08898926]
[129.01316833 74.58898926]
[133.20745850 59.58746719]
[146.48838806 52.16645432]
[160.76420593 56.25751877]
[173.75457764 48.75751877]
[181.83723450 35.15673447]
[196.72802734 35.49379730]
[209.71839905 27.99379730]
[222.70878601 20.49379730]
[235.69915771 12.99379730]
[248.68954468 5.49379683]
[248.79222107 -9.80119228]
[256.48605347 -22.90468979]
[269.61843872 -30.34829330]
[284.61306763 -30.22003937]
[297.44384766 -22.65450668]
[310.43420410 -30.15450668]
[323.42459106 -37.65450668]
[336.41497803 -45.15450668]
[349.40536499 -52.65450668]
[362.39575195 -60.15450668]
[366.53781128 -77.05383301]
[381.28182983 -85.64495850]
[397.38125610 -81.09786224]
[410.11929321 -89.01888275]
[422.85733032 -96.93989563]
[423.83914185 -112.42588043]
[433.76181030 -124.35569763]
[448.80981445 -128.14210510]
[463.19692993 -122.32912445]
[471.39099121 -109.15199280]
[470.24124146 -93.67757416]
[460.18975830 -81.85609436]
[445.10153198 -78.23316193]
[430.77835083 -84.20186615]
[418.04031372 -76.28084564]
[405.30227661 -68.35983276]
[404.12380981 -55.41539764]
[395.53070068 -45.40372849]
[382.53454590 -42.18200684]
[369.89575195 -47.16412735]
[356.90536499 -39.66412735]
[343.91497803 -32.16412735]
[330.92459106 -24.66412544]
[317.93420410 -17.16412544]
[304.94384766 -9.66412544]
[305.08041382 5.23040152]
[297.69415283 18.28027534]
[284.68161011 25.93144035]
[269.48672485 26.04275131]
[256.18954468 18.48417854]
[243.19915771 25.98417854]
[230.20878601 33.48417664]
[217.21839905 40.98417664]
[204.22802734 48.48417664]
[197.07452393 61.54851151]
[181.25457764 61.74790192]
[168.26420593 69.24790192]
[164.66926575 83.65664673]
[151.60200500 91.44776917]
[136.51316833 87.57936859]
[123.52278137 95.07936859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[13 28]
[14 27]
[15 26]
[33 95]
[34 94]
[37 91]
[38 90]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[57 70]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
