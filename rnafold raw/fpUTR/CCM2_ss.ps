%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGCCGGGGCGGAGACUUCGGGCCCGGCUGGCGGGCGGCGCCGGGAGCGCGGGGGCGGCGGGCCCGGGUCGAGCAUGUAGCGGCUGCUGGCGGCGGGGCUCCCGGGGCGGGCCGGGCGGGCCGCGGGAGCCGCACGCGGCGAU\
) } def
/len { sequence length } bind def

/coor [
[452.82974243 251.23924255]
[449.56710815 248.78453064]
[447.05398560 245.04621887]
[433.33779907 238.97447205]
[419.62161255 232.90272522]
[405.90542603 226.83096313]
[392.18923950 220.75921631]
[378.47305298 214.68746948]
[364.75686646 208.61572266]
[346.48074341 217.63221741]
[327.16806030 210.26795959]
[319.31820679 190.83454895]
[305.13369751 185.95608521]
[294.41979980 193.18807983]
[281.30157471 192.90248108]
[270.59902954 184.97908020]
[266.37432861 172.14515686]
[252.29731750 166.96467590]
[238.22029114 161.78419495]
[224.14326477 156.60372925]
[216.72721863 157.24993896]
[209.82275391 151.15921021]
[195.85964966 145.67909241]
[181.89654541 140.19897461]
[167.93344116 134.71885681]
[153.97033691 129.23873901]
[140.00723267 123.75862885]
[126.04412079 118.27851105]
[112.08101654 112.79839325]
[96.95670319 125.61398315]
[71.52716064 118.56126404]
[56.59647369 117.12091827]
[41.66578674 115.68057251]
[26.73509979 114.24023438]
[11.80441189 112.79988861]
[-3.12627435 111.35954285]
[-16.37187958 120.41125488]
[-31.66435242 115.56153107]
[-37.27261734 100.53066254]
[-28.89449501 86.84905243]
[-12.95696068 85.01204681]
[-1.68592906 96.42885590]
[13.24475765 97.86920166]
[28.17544365 99.30954742]
[43.10613251 100.74989319]
[58.03681946 102.19023132]
[72.96750641 103.63057709]
[76.22163391 96.87331390]
[67.77157593 84.47990417]
[82.72988892 83.35877991]
[85.98401642 76.60151672]
[75.54877472 65.82627106]
[65.11354065 55.05103302]
[49.20342636 51.07606506]
[44.95154190 35.23770905]
[56.73186111 23.82910919]
[72.42579651 28.58645439]
[75.88877869 44.61579514]
[86.32402039 55.39103699]
[96.75925446 66.16627502]
[116.70641327 80.34716797]
[117.56112671 98.83528900]
[131.52423096 104.31540680]
[145.48733521 109.79551697]
[159.45045471 115.27563477]
[173.41355896 120.75575256]
[187.37666321 126.23586273]
[201.33976746 131.71598816]
[215.30287170 137.19609070]
[229.32374573 142.52670288]
[243.40077209 147.70716858]
[257.47778320 152.88764954]
[271.55480957 158.06813049]
[287.25927734 150.43896484]
[303.31896973 156.37789917]
[310.01217651 171.77156067]
[324.19668579 176.65003967]
[331.42877197 169.94604492]
[340.56655884 166.39599609]
[350.31127930 166.45846558]
[359.29479980 170.08183289]
[366.27157593 176.71752930]
[370.29138184 185.40264893]
[370.82861328 194.89953613]
[384.54479980 200.97128296]
[398.26098633 207.04302979]
[411.97717285 213.11477661]
[425.69335938 219.18652344]
[439.40954590 225.25828552]
[453.12573242 231.33003235]
[467.08886719 236.81015015]
[482.65518188 233.98173523]
[492.17413330 245.43769836]
[506.35864258 250.31617737]
[521.92498779 247.48776245]
[531.44390869 258.94372559]
[545.62841797 263.82220459]
[559.81292725 268.70068359]
[574.04876709 273.42730713]
[588.38238525 277.84863281]
[602.76239014 282.11654663]
[617.14239502 286.38446045]
[631.52239990 290.65237427]
[645.90246582 294.92028809]
[660.28247070 299.18820190]
[674.66247559 303.45611572]
[689.04248047 307.72402954]
[704.47375488 304.23303223]
[714.47351074 315.27182007]
[728.85351562 319.53973389]
[743.23352051 323.80764771]
[757.00628662 316.53106689]
[771.52886963 321.06417847]
[778.38110352 334.23925781]
[792.76110840 338.50717163]
[809.66595459 337.21740723]
[815.58502197 353.10452271]
[801.95733643 363.19027710]
[788.49322510 352.88717651]
[774.11322021 348.61926270]
[761.18298340 355.92300415]
[746.53875732 351.79959106]
[738.96563721 338.18765259]
[724.58557129 333.91973877]
[710.20556641 329.65182495]
[695.80285645 333.44805908]
[684.77459717 322.10403442]
[670.39453125 317.83612061]
[656.01452637 313.56820679]
[641.63452148 309.30029297]
[627.25451660 305.03237915]
[612.87451172 300.76446533]
[598.49444580 296.49655151]
[584.11444092 292.22863770]
[576.75506592 293.34866333]
[569.47454834 287.71282959]
[562.09289551 288.67532349]
[554.93444824 282.88519287]
[540.74993896 278.00671387]
[526.56542969 273.12823486]
[512.01367188 276.30560303]
[501.48016357 264.50070190]
[487.29565430 259.62222290]
[472.74389648 262.79956055]
[462.21038818 250.99465942]
[459.58963013 252.16641235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[12 77]
[13 76]
[17 73]
[18 72]
[19 71]
[20 70]
[22 69]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[51 60]
[52 59]
[53 58]
[91 145]
[93 143]
[94 142]
[96 140]
[97 139]
[98 138]
[99 136]
[100 134]
[101 133]
[102 132]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[109 125]
[110 124]
[111 123]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
