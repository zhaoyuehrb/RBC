%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGAUGCCCGAGACCGCGGCUCCGCGGGUAGUGCCCCGACAAGGUGGAGCCCGGCGGGCCCGCGAGUCCGAGACCUGUCCCAGGAGCUCCAGCUCACGUGACCUGUCACUGCCUCCCGCCGCCUCCUGCCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[5.30840445 358.37768555]
[-6.61734962 367.47586060]
[-21.60880089 366.96951294]
[-32.89348221 357.08740234]
[-35.37363815 342.29473877]
[-44.51626205 354.18643188]
[-47.30041885 362.97683716]
[-54.00233841 366.24044800]
[-63.41137314 377.92251587]
[-72.82041168 389.60455322]
[-82.09683228 401.39215088]
[-91.23945618 413.28384399]
[-92.85771942 429.60296631]
[-107.90908813 436.11361694]
[-120.90999603 426.11819458]
[-118.48622894 409.89913940]
[-103.13114929 404.14123535]
[-93.98852539 392.24954224]
[-92.39194489 384.96820068]
[-84.50244904 380.19549561]
[-75.09341431 368.51345825]
[-65.68437958 356.83142090]
[-56.40795517 345.04379272]
[-47.26533127 333.15209961]
[-39.09100723 320.57513428]
[-31.93611145 307.39154053]
[-24.78121185 294.20791626]
[-17.62631416 281.02432251]
[-10.47141552 267.84069824]
[-3.31651664 254.65710449]
[3.83838177 241.47351074]
[10.99328041 228.28990173]
[18.14817810 215.10629272]
[16.14159584 195.92416382]
[33.32344818 185.48838806]
[39.87530518 171.99494934]
[25.80319977 177.18876648]
[11.31948566 173.28723145]
[1.76029468 161.72773743]
[0.64745104 146.76907349]
[8.39095211 133.92236328]
[22.13791466 127.92060852]
[36.82364273 130.97500610]
[47.03758240 141.96025085]
[49.01679993 156.82843018]
[57.88834381 144.73315430]
[66.75988770 132.63787842]
[75.63143158 120.54260254]
[84.50297546 108.44732666]
[85.53578186 89.88557434]
[102.61568451 82.54510498]
[110.93161011 70.06130219]
[107.16667175 53.01919937]
[116.66979980 38.78330231]
[133.18994141 35.84318161]
[141.22161865 23.17463112]
[149.25329590 10.50608063]
[157.28497314 -2.16247034]
[165.31665039 -14.83102131]
[173.34831238 -27.49957085]
[181.23632812 -40.25807571]
[181.73361206 -56.07146454]
[194.93035889 -62.97764206]
[202.67367554 -75.82447052]
[203.17097473 -91.63785553]
[216.36772156 -98.54402924]
[224.11103821 -111.39086151]
[231.85437012 -124.23768616]
[239.59768677 -137.08451843]
[236.01414490 -152.24353027]
[244.04998779 -165.16174316]
[258.52389526 -168.48468018]
[266.26721191 -181.33149719]
[274.01052856 -194.17832947]
[273.89413452 -212.55305481]
[289.49871826 -220.50305176]
[296.94970703 -233.52159119]
[304.40072632 -246.54013062]
[311.85174561 -259.55865479]
[314.47195435 -276.30892944]
[331.29293823 -278.42803955]
[337.98574829 -262.85104370]
[324.87030029 -252.10765076]
[317.41928101 -239.08911133]
[309.96826172 -226.07057190]
[302.51724243 -213.05203247]
[305.38650513 -201.24641418]
[299.21508789 -190.31721497]
[286.85736084 -186.43501282]
[279.11404419 -173.58818054]
[271.37069702 -160.74134827]
[275.19219971 -146.39102173]
[267.52236938 -133.25221252]
[252.44451904 -129.34118652]
[244.70118713 -116.49436188]
[236.95787048 -103.64753723]
[229.21453857 -90.80071259]
[229.27110291 -75.90621185]
[215.52050781 -68.08114624]
[207.77719116 -55.23431778]
[207.83374023 -40.33982086]
[194.08314514 -32.51475143]
[193.31784058 -25.09981346]
[186.01687622 -19.46789551]
[177.98519897 -6.79934454]
[169.95352173 5.86920595]
[161.92184448 18.53775597]
[153.89016724 31.20630646]
[145.85848999 43.87485886]
[150.41284180 55.98057556]
[147.08819580 68.68185425]
[136.88815308 77.25484467]
[123.41541290 78.37722778]
[115.09948730 90.86103058]
[117.64019012 100.58203888]
[114.46421814 110.11442566]
[106.60079956 116.36901093]
[96.59825134 117.31887054]
[87.72670746 129.41415405]
[78.85516357 141.50942993]
[69.98361969 153.60470581]
[61.11207581 165.69998169]
[53.36875534 178.54679871]
[46.81689835 192.04025269]
[50.99661255 202.19688416]
[48.89219284 212.75152588]
[41.44820404 220.21580505]
[31.33178329 222.26119995]
[24.17688560 235.44479370]
[17.02198601 248.62840271]
[9.86708736 261.81201172]
[2.71218944 274.99560547]
[-4.44270897 288.17922974]
[-11.59760761 301.36282349]
[-18.75250626 314.54641724]
[-25.90740395 327.73004150]
[-11.38112736 323.99008179]
[2.23151493 330.29055786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 24]
[6 23]
[8 22]
[9 21]
[10 20]
[11 18]
[12 17]
[25 136]
[26 135]
[27 134]
[28 133]
[29 132]
[30 131]
[31 130]
[32 129]
[33 128]
[35 124]
[36 123]
[45 122]
[46 121]
[47 120]
[48 119]
[49 118]
[51 114]
[52 113]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[61 102]
[63 100]
[64 99]
[66 97]
[67 96]
[68 95]
[69 94]
[72 91]
[73 90]
[74 89]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
