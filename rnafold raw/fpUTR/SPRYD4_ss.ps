%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGCUAGGGGAGCGGGCGGGCAGAUGGCUGUGUCUGUAAGCGGGAGGCGUGCCCGGUUCAUCCAAGGCGCAAG\
) } def
/len { sequence length } bind def

/coor [
[97.18417358 316.28115845]
[96.69805145 300.48434448]
[107.58505249 289.02795410]
[106.96517944 274.04077148]
[106.34530640 259.05358887]
[105.72542572 244.06639099]
[105.10555267 229.07920837]
[94.88825989 214.96530151]
[103.18011475 198.67564392]
[101.94142914 183.72686768]
[100.70273590 168.77810669]
[99.15536499 153.85812378]
[97.29998016 138.97332764]
[95.44458771 124.08851624]
[93.58920288 109.20370483]
[91.42658234 94.36042023]
[88.95766449 79.56500244]
[86.48874664 64.76958466]
[84.01982880 49.97416306]
[81.55091095 35.17874146]
[71.64769745 22.84030342]
[77.18463135 9.01309776]
[74.71571350 -5.78232193]
[60.99185181 -12.77958679]
[54.10025787 -26.35748672]
[56.49693298 -41.21413422]
[67.05584717 -51.68539429]
[57.15264130 -64.02383423]
[62.68957138 -77.85103607]
[60.22065353 -92.64646149]
[57.75173569 -107.44187927]
[43.53730774 -113.43801117]
[34.83999252 -126.18007660]
[34.43506622 -141.60212708]
[42.45174026 -154.78303528]
[56.33192444 -161.51683044]
[71.64650726 -159.65478516]
[83.50865173 -149.79106140]
[88.13319397 -135.07313538]
[84.04446411 -120.19746399]
[72.54715729 -109.91079712]
[75.01607513 -95.11537933]
[77.48499298 -80.31996155]
[87.21160889 -69.03978729]
[81.85126495 -54.15431213]
[95.23808289 -47.67888641]
[102.32884216 -34.40541458]
[100.21939087 -19.32550621]
[89.51113129 -8.25124073]
[91.98005676 6.54417849]
[101.70666504 17.82435036]
[96.34632874 32.70982361]
[98.81524658 47.50524139]
[101.28416443 62.30066299]
[103.75308228 77.09608459]
[106.22200012 91.89150238]
[110.66390991 98.91972351]
[108.47400665 107.34831238]
[110.32939911 122.23312378]
[112.18478394 137.11793518]
[114.04017639 152.00274658]
[118.31478882 160.40995789]
[115.65150452 167.53941345]
[116.89019775 182.48818970]
[118.12888336 197.43695068]
[127.55726624 206.51203918]
[128.13177490 219.18058777]
[120.09274292 228.45933533]
[120.71261597 243.44651794]
[121.33248901 258.43371582]
[121.95236206 273.42089844]
[122.57224274 288.40808105]
[134.36811829 298.92630005]
[135.18814087 314.70928955]
[124.54580688 326.39331055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[5 70]
[6 69]
[7 68]
[9 65]
[10 64]
[11 63]
[12 61]
[13 60]
[14 59]
[15 58]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[22 50]
[23 49]
[27 45]
[29 43]
[30 42]
[31 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
