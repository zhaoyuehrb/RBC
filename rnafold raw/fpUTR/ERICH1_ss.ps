%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGGCGGAACCCGGAAGGCACGGCGCUCAGCUCAGGACCGCGCGCCGUGGUCUGAGGUCCGCGGCAGGGUCCCGC\
) } def
/len { sequence length } bind def

/coor [
[98.36656189 122.43199158]
[91.71734619 120.91076660]
[85.82992554 117.46629333]
[81.24578094 112.41538239]
[78.38653564 106.22257996]
[63.41321182 105.32835388]
[48.43989182 104.43412781]
[33.46656799 103.53989410]
[19.22968102 110.44073486]
[6.98630619 101.95845795]
[-7.98701572 101.06423187]
[-22.22390366 107.96507263]
[-34.46727753 99.48279572]
[-49.45542145 98.88645172]
[-64.45245361 98.58821869]
[-79.44949341 98.28998566]
[-89.60036469 110.18509674]
[-105.03089142 112.72142029]
[-118.45523834 104.70139313]
[-123.53484344 89.91181183]
[-117.87126923 75.33587646]
[-104.13868713 67.85588837]
[-88.82120514 71.00367737]
[-79.15126038 83.29294586]
[-64.15422058 83.59117889]
[-49.15718842 83.88941193]
[-42.22079086 80.78973389]
[-33.57305145 84.50947571]
[-20.40715599 77.54467010]
[-7.09278870 86.09091187]
[7.88053274 86.98513794]
[21.04642868 80.02033997]
[34.36079788 88.56657410]
[49.33411789 89.46080017]
[64.30744171 90.35502625]
[79.28076172 91.24925995]
[98.21305847 77.57971191]
[119.07156372 88.07784271]
[133.71420288 84.82316589]
[148.35685730 81.56848145]
[162.99949646 78.31379700]
[177.64215088 75.05912018]
[185.59150696 70.01654816]
[192.93132019 71.97838593]
[201.04925537 61.72852325]
[213.59179688 59.93097305]
[223.60102844 67.02144623]
[238.45597839 64.94041443]
[253.31091309 62.85937881]
[268.16586304 60.77834702]
[283.02081299 58.69731522]
[297.87573242 56.61627960]
[312.73068237 54.53524780]
[319.90240479 40.77494431]
[333.80755615 33.88821793]
[349.09927368 36.52315140]
[359.89761353 47.66656113]
[362.05035400 63.03357697]
[354.72979736 76.71527100]
[340.75076294 83.45075226]
[325.48852539 80.65008545]
[314.81170654 69.39019012]
[299.95678711 71.47122192]
[285.10183716 73.55225372]
[270.24688721 75.63328552]
[255.39195251 77.71432495]
[240.53700256 79.79535675]
[225.68206787 81.87638855]
[212.62286377 93.42262268]
[195.60128784 86.73885345]
[180.89682007 89.70175934]
[166.25418091 92.95644379]
[151.61154175 96.21112823]
[136.96888733 99.46580505]
[122.32624817 102.72048950]
[120.48402405 109.28800964]
[116.75780487 115.00127411]
[111.49031067 119.33481598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 36]
[6 35]
[7 34]
[8 33]
[10 31]
[11 30]
[13 28]
[14 26]
[15 25]
[16 24]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[44 70]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
