%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUCCGGAGCCCGAGCCCGGGGCGGGUGGACGCGGACUCGAACGCAGUUGCUUCGGGACCCAGGACCCCCUCGGGCCCGACCCGCCAGGAAAGACUGAGGCCGCGGCCUGCCCCGCCCGGCUCCCUGCGCCGCCGCCGCCUCCCGGGACAGAAG\
) } def
/len { sequence length } bind def

/coor [
[30.43696213 483.01824951]
[19.66755486 472.57699585]
[15.43341255 458.18460083]
[9.83299065 472.09988403]
[4.23256874 486.01516724]
[3.92362761 495.20315552]
[-1.62328041 500.15243530]
[-7.50277948 513.95214844]
[-8.14868259 530.89379883]
[-24.60704041 534.96301270]
[-33.07339096 520.27435303]
[-21.30247116 508.07263184]
[-15.42297173 494.27294922]
[-9.68272018 480.41476440]
[-4.08229876 466.49948120]
[1.51812315 452.58416748]
[5.69138527 438.17642212]
[8.39521027 423.42211914]
[11.09903622 408.66781616]
[13.80286217 393.91351318]
[16.50668716 379.15921021]
[19.21051216 364.40490723]
[17.24849892 359.99337769]
[18.07769585 354.29800415]
[22.33173561 349.11614990]
[25.62746429 334.48269653]
[28.92319298 319.84924316]
[32.21892166 305.21575928]
[35.51464844 290.58230591]
[38.81037903 275.94885254]
[30.65745544 263.53652954]
[33.79133224 248.64918518]
[46.86578369 240.18180847]
[50.16151428 225.54833984]
[53.45724106 210.91488647]
[56.75297165 196.28141785]
[43.89590454 204.00772095]
[29.05487823 201.82965088]
[18.95999527 190.73490906]
[18.18907547 175.75473022]
[27.09171295 163.68232727]
[41.63074875 159.99227905]
[55.21302795 166.35794067]
[61.67930984 179.89305115]
[66.99838257 165.86781311]
[72.31745911 151.84255981]
[77.63652802 137.81732178]
[82.95560455 123.79208374]
[69.76169586 108.74182129]
[68.79655457 87.30822754]
[82.26542664 68.79191589]
[76.66500854 54.87662888]
[60.24906921 43.24219131]
[63.64915466 24.24127197]
[57.49296188 10.56277370]
[51.33676910 -3.11572409]
[45.18057632 -16.79422188]
[39.02438354 -30.47271919]
[32.61199951 -37.06026840]
[32.88504028 -44.48920441]
[27.00554085 -58.28889465]
[21.12604141 -72.08858490]
[15.10789108 -85.82837677]
[8.95169830 -99.50687408]
[2.79550672 -113.18537140]
[-10.81942940 -122.32678986]
[-9.44038773 -138.66784668]
[5.51399231 -145.39826965]
[18.65992546 -135.59437561]
[16.47400475 -119.34156799]
[22.63019562 -105.66307068]
[28.78638840 -91.98457336]
[34.43183517 -87.14797974]
[34.92573166 -77.96808624]
[40.80523300 -64.16839600]
[46.68473053 -50.36870193]
[52.70288086 -36.62891006]
[58.85907364 -22.95041466]
[65.01526642 -9.27191639]
[71.17145538 4.40658140]
[77.32765198 18.08507919]
[87.23389435 20.86270714]
[94.09622192 28.82126808]
[95.44172668 39.46544266]
[90.58029938 49.27620697]
[96.18071747 63.19149399]
[111.10474396 64.69932556]
[119.37539673 52.18548203]
[127.64605713 39.67164230]
[124.23962402 24.23882675]
[132.81385803 10.96260738]
[148.28182983 7.71952868]
[161.46664429 16.43365097]
[164.54600525 31.93504143]
[155.69297791 45.02700043]
[140.15989685 47.94229889]
[131.88923645 60.45613861]
[123.61858368 72.96997833]
[125.60524750 79.85289001]
[125.95085144 86.46752167]
[140.58430481 83.17179871]
[155.21777344 79.87606812]
[169.85122681 76.58033752]
[184.48469543 73.28460693]
[192.22175598 68.31949615]
[199.44593811 70.07299805]
[214.14280701 67.07260895]
[228.83966064 64.07222748]
[236.13247681 50.23933792]
[250.63017273 44.37836075]
[265.48736572 49.25666809]
[273.68893433 62.57087326]
[271.36236572 78.03441620]
[259.60620117 88.34587860]
[243.97131348 88.63651276]
[231.84004211 78.76908112]
[217.14318848 81.76947021]
[202.44631958 84.76985168]
[187.78042603 87.91806793]
[173.14695740 91.21379852]
[158.51350403 94.50952911]
[143.88003540 97.80525970]
[129.24658203 101.10098267]
[124.43066406 116.11574554]
[112.52331543 126.45262146]
[96.98085022 129.11116028]
[91.66177368 143.13639832]
[86.34269714 157.16163635]
[81.02362823 171.18688965]
[75.70455170 185.21212769]
[71.38642883 199.57714844]
[68.09070587 214.21060181]
[64.79497528 228.84407043]
[61.49924469 243.47752380]
[69.68146515 256.73229980]
[66.13066864 271.52575684]
[53.44384003 279.24456787]
[50.14810944 293.87805176]
[46.85238266 308.51150513]
[43.55665207 323.14495850]
[40.26092529 337.77841187]
[36.96519852 352.41186523]
[33.96481323 367.10873413]
[31.26098633 381.86303711]
[28.55715942 396.61734009]
[25.85333443 411.37164307]
[23.14950943 426.12594604]
[20.44568443 440.88021851]
[31.71445847 430.97998047]
[46.39690399 427.90985107]
[60.68841934 432.46536255]
[70.88570404 443.46603394]
[74.34638214 458.06137085]
[70.17369843 472.46932983]
[59.44890594 482.95639038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[7 13]
[8 12]
[17 148]
[18 147]
[19 146]
[20 145]
[21 144]
[22 143]
[25 142]
[26 141]
[27 140]
[28 139]
[29 138]
[30 137]
[33 134]
[34 133]
[35 132]
[36 131]
[44 130]
[45 129]
[46 128]
[47 127]
[48 126]
[51 86]
[52 85]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[60 76]
[61 75]
[62 74]
[63 72]
[64 71]
[65 70]
[87 98]
[88 97]
[89 96]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
