%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUUUUGCUCCAAGUGCCAGAAUUGAUUGUGGUUAGGACAUCUUACGCUGAGAAAUAAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[59.40230179 191.89746094]
[55.17364502 177.50584412]
[55.40771103 162.50767517]
[60.08339310 148.25502014]
[68.77917480 136.03277588]
[80.71114349 126.94276428]
[94.80361176 121.80445862]
[109.78175354 121.08062744]
[99.43057251 110.22461700]
[91.75529480 106.87341309]
[88.86043549 98.59706879]
[79.03752136 87.26082611]
[69.21460724 75.92458344]
[56.99250031 77.40827179]
[45.75137711 72.69393158]
[38.39286041 63.12959671]
[36.75117874 51.29762650]
[41.13715744 40.31809616]
[32.43630219 28.09945869]
[23.73544884 15.88081932]
[15.03459454 3.66217971]
[0.72709084 -3.09103417]
[-0.35283244 -17.94643784]
[-9.05368614 -30.16507721]
[-24.18752861 -36.48163223]
[-26.01550865 -52.77857971]
[-12.65715694 -62.29101944]
[2.14559889 -55.23336792]
[3.16495323 -38.86593246]
[11.86580658 -26.64729118]
[25.55096817 -20.76803780]
[27.25323486 -5.03867388]
[35.95408630 7.17996550]
[44.65494156 19.39860535]
[53.35579681 31.61724472]
[71.31346130 33.29553604]
[82.81852722 47.58501434]
[80.55084991 66.10166931]
[90.37376404 77.43791199]
[100.19667816 88.77416229]
[110.28658295 99.87342834]
[120.63776398 110.72943878]
[134.56327820 116.30437469]
[149.54629517 115.59064484]
[164.52931213 114.87692261]
[179.51231384 114.16319275]
[194.49533081 113.44946289]
[210.02882385 106.65631104]
[220.85658264 119.70222473]
[211.31794739 133.71830750]
[195.20906067 128.43246460]
[180.22604370 129.14619446]
[165.24302673 129.85992432]
[150.26002502 130.57365417]
[135.27700806 131.28738403]
[145.62023926 142.15098572]
[152.27241516 155.59526062]
[154.63385010 170.40821838]
[152.49165344 185.25445557]
[146.03894043 198.79560852]
[135.85743713 209.81091309]
[122.86500549 217.30735779]
[108.23291016 220.60913086]
[93.28023529 219.41856384]
[79.35495758 213.84301758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 42]
[9 41]
[11 40]
[12 39]
[13 38]
[18 35]
[19 34]
[20 33]
[21 32]
[23 30]
[24 29]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
