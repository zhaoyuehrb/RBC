%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCUGCCCCGGGCUCCCCUGCUCUUAACCCGCGCGCGGGGGCGCCCAGGCCACUGGGCUCCGCGGAGCCAGCGAGAGGUCUGCGCGGAGUCUGAGCGGCGCUCGUCCCGUCCCAAGGCCGACGCCAGCACGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[106.87142181 142.53573608]
[97.43267059 143.01062012]
[88.11742401 141.41629028]
[79.37384796 137.82943726]
[71.62258911 132.42263794]
[65.23654938 125.45598602]
[60.52296448 117.26466370]
[45.94337463 120.79106903]
[31.36378098 124.31746674]
[23.94854546 134.93818665]
[11.67022419 137.54133606]
[1.27182662 131.25811768]
[-13.38373661 134.45413208]
[-28.03929901 137.65013123]
[-42.69486237 140.84614563]
[-54.52958298 151.34614563]
[-68.61317444 146.49827576]
[-83.26873779 149.69427490]
[-97.92430115 152.89028931]
[-112.57986450 156.08630371]
[-127.23542786 159.28230286]
[-141.89099121 162.47831726]
[-156.54655457 165.67431641]
[-168.38127136 176.17431641]
[-182.46485901 171.32644653]
[-187.75225830 185.81944275]
[-200.04962158 195.13493347]
[-215.43290710 196.30038452]
[-228.99334717 188.94390869]
[-236.40386963 175.41291809]
[-235.29980469 160.02511597]
[-226.03344727 147.69068909]
[-211.56166077 142.34550476]
[-196.50234985 145.69519043]
[-185.66087341 156.67088318]
[-174.87440491 146.39949036]
[-159.74255371 151.01875305]
[-145.08699036 147.82275391]
[-130.43142700 144.62673950]
[-115.77587128 141.43074036]
[-101.12030792 138.23472595]
[-86.46474457 135.03871155]
[-71.80918121 131.84271240]
[-61.02272415 121.57131195]
[-45.89086914 126.19058228]
[-31.23530769 122.99457550]
[-16.57974434 119.79856873]
[-1.92418122 116.60256195]
[10.34632492 104.10696411]
[27.83738136 109.73786926]
[42.41697311 106.21147156]
[56.99656677 102.68507385]
[58.63306427 87.94671631]
[65.16934967 74.63603210]
[75.83121490 64.32963562]
[89.35579681 58.24828339]
[104.14115906 57.11228943]
[108.15971375 42.66060257]
[112.17826843 28.20891762]
[116.19683075 13.75723362]
[120.21538544 -0.69445151]
[124.23394012 -15.14613628]
[128.25250244 -29.59782219]
[132.27105713 -44.04950714]
[136.28961182 -58.50119019]
[140.30816650 -72.95287323]
[136.55082703 -88.32144165]
[147.41497803 -98.51062775]
[151.43353271 -112.96231079]
[155.28851318 -127.45848846]
[158.97944641 -141.99729919]
[149.69578552 -154.58091736]
[150.72427368 -170.18464661]
[161.57928467 -181.44087219]
[177.13543701 -183.03474426]
[190.04756165 -174.21369934]
[194.21896362 -159.14276123]
[187.68003845 -144.93795776]
[173.51826477 -138.30636597]
[169.82733154 -123.76755524]
[171.24224854 -116.44874573]
[165.88520813 -108.94375610]
[161.86665344 -94.49207306]
[165.91143799 -80.15718079]
[154.75985718 -68.93431854]
[150.74130249 -54.48263550]
[146.72274780 -40.03094864]
[142.70417786 -25.57926559]
[138.68562317 -11.12757969]
[134.66706848 3.32410526]
[130.64851379 17.77579117]
[126.62995911 32.22747421]
[122.61139679 46.67916107]
[118.59284210 61.13084412]
[135.16868591 75.10686493]
[142.83943176 95.38610077]
[139.66275024 116.83362579]
[152.23973083 125.00794983]
[164.81671143 133.18226624]
[177.39369202 141.35659790]
[189.97067261 149.53091431]
[202.72917175 157.41893005]
[215.66268921 165.01657104]
[228.59619141 172.61422729]
[241.69810486 179.91764832]
[254.96171570 186.92311096]
[268.22534180 193.92857361]
[281.48895264 200.93403625]
[294.07687378 197.87963867]
[305.00430298 204.05419922]
[308.64123535 215.64634705]
[321.74313354 222.94976807]
[334.84506226 230.25318909]
[351.22525024 229.46522522]
[359.86898804 243.40142822]
[351.88433838 257.72543335]
[335.48519897 257.70193481]
[327.54162598 243.35510254]
[314.43972778 236.05168152]
[301.33779907 228.74826050]
[283.86923218 229.99487305]
[274.48348999 214.19764709]
[261.21987915 207.19218445]
[247.95626831 200.18673706]
[234.69264221 193.18127441]
[229.87199402 193.73915100]
[224.66151428 191.21525574]
[220.99855042 185.54774475]
[208.06503296 177.95008850]
[195.13153076 170.35243225]
[190.29058838 170.69190979]
[185.19947815 167.93513489]
[181.79635620 162.10789490]
[169.21937561 153.93357849]
[156.64239502 145.75924683]
[144.06541443 137.58493042]
[131.48843384 129.41061401]
[124.31900024 135.56811523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 52]
[8 51]
[9 50]
[12 48]
[13 47]
[14 46]
[15 45]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[25 35]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[66 85]
[68 83]
[69 82]
[70 80]
[71 79]
[97 137]
[98 136]
[99 135]
[100 134]
[101 133]
[102 130]
[103 129]
[104 128]
[105 125]
[106 124]
[107 123]
[108 122]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
