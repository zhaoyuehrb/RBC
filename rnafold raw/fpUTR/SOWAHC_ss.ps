%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAGGCGGUGGCCGAGUCCUCUGGCCUCAGACGCGUAGGCUGGCAGCCCGCUGAGCCCGCCAGACUCCGCCGCCGUCGGGAGCCGGCCGCUGGGAGCCCGUCGCUAUGGGACCGCGCUGAGCCGCCCGCUGGCGGGGGAGCAGCGCGGUCGAGG\
) } def
/len { sequence length } bind def

/coor [
[150.82850647 144.53944397]
[138.36689758 136.19029236]
[125.90528870 127.84114838]
[113.44367218 119.49200439]
[100.98206329 111.14286041]
[86.94457245 105.85618591]
[72.07127380 103.91069031]
[57.19797516 101.96519470]
[42.32467651 100.01970673]
[27.45137405 98.07421112]
[12.57807446 96.12871552]
[-2.29522562 94.18322754]
[-17.16852570 92.23773193]
[-32.04182434 90.29223633]
[-46.72895813 96.17430878]
[-58.34520340 86.85164642]
[-73.21850586 84.90615082]
[-88.09180450 82.96065521]
[-102.96510315 81.01516724]
[-117.83840179 79.06967163]
[-122.75999451 81.12144470]
[-127.49398041 81.04900360]
[-131.25082397 79.28997803]
[-133.53543091 76.53518677]
[-148.26521301 73.70088196]
[-162.99501038 70.86658478]
[-177.72479248 68.03227997]
[-192.53302002 65.64130402]
[-207.40631104 63.69581223]
[-222.27961731 61.75031662]
[-237.15290833 59.80482483]
[-252.02621460 57.85933304]
[-260.99847412 59.85598373]
[-267.17651367 55.72322464]
[-282.00790405 53.48052597]
[-286.10482788 55.26839066]
[-290.14566040 55.59110260]
[-293.66687012 54.65278244]
[-296.32223511 52.78975296]
[-297.91635132 50.41942215]
[-312.52096558 46.99805832]
[-327.12554932 43.57669067]
[-341.73016357 40.15532303]
[-358.53088379 42.42951584]
[-365.36709595 26.91492653]
[-352.35128784 16.05100441]
[-338.30877686 25.55072784]
[-323.70419312 28.97209358]
[-309.09960938 32.39345932]
[-294.49499512 35.81482697]
[-279.76519775 38.64913177]
[-264.93380737 40.89183044]
[-250.08071899 42.98603058]
[-235.20742798 44.93152618]
[-220.33412170 46.87701797]
[-205.46081543 48.82250977]
[-190.58752441 50.76800156]
[-187.55201721 48.87221527]
[-183.43247986 48.38492584]
[-178.91625977 49.80604935]
[-174.89050293 53.30248642]
[-160.16070557 56.13679123]
[-145.43090820 58.97109222]
[-130.70112610 61.80539703]
[-115.89290619 64.19637299]
[-101.01960754 66.14186096]
[-86.14630890 68.08735657]
[-71.27301025 70.03285217]
[-56.39970779 71.97834015]
[-42.77641678 65.95711517]
[-30.09633255 75.41893768]
[-15.22303295 77.36443329]
[-0.34973279 79.30992889]
[14.52356720 81.25541687]
[29.39686775 83.20091248]
[44.27016830 85.14640045]
[59.14346695 87.09189606]
[74.01676941 89.03739166]
[88.89006805 90.98287964]
[102.19330597 84.05295563]
[109.12322998 70.74971771]
[116.05316162 57.44648361]
[111.53441620 42.53947830]
[118.75186157 29.14682388]
[132.99125671 24.93076324]
[139.92118835 11.62752628]
[132.88108826 -2.20058417]
[135.34672546 -17.52051353]
[146.37002563 -28.44143486]
[161.71229553 -30.76403236]
[175.47412109 -23.59521866]
[182.36380005 -9.69155121]
[179.73210144 5.60072899]
[168.59098816 16.40142632]
[153.22442627 18.55745316]
[146.29449463 31.86069107]
[151.00045776 45.94577026]
[144.16203308 59.53586578]
[129.35639954 64.37641144]
[122.42646790 77.67964935]
[115.49654388 90.98287964]
[112.92208862 95.52046967]
[109.33120728 98.68124390]
[121.79281616 107.03039551]
[134.25442505 115.37953949]
[146.71604919 123.72868347]
[159.17765808 132.07781982]
[173.91249084 124.63472748]
[190.29745483 125.61598206]
[203.88265991 134.66059875]
[211.02615356 149.23056030]
[209.87010193 165.32231140]
[222.49627686 173.42044067]
[235.12245178 181.51856995]
[247.74862671 189.61669922]
[260.37478638 197.71484375]
[273.00097656 205.81297302]
[285.62713623 213.91110229]
[298.25332642 222.00923157]
[310.87948608 230.10736084]
[323.50567627 238.20549011]
[338.75863647 235.04556274]
[351.44799805 243.43807983]
[354.36651611 257.99890137]
[366.99267578 266.09704590]
[375.96035767 268.11419678]
[379.78820801 274.48565674]
[392.24984741 282.83480835]
[404.71145630 291.18395996]
[417.17306519 299.53308105]
[433.56289673 300.08563232]
[441.03948975 314.68127441]
[431.91156006 328.30526733]
[415.56915283 326.94241333]
[408.82391357 311.99468994]
[396.36230469 303.64556885]
[383.90069580 295.29641724]
[371.43908691 286.94726562]
[358.89456177 278.72320557]
[346.26837158 270.62509155]
[331.81716919 274.04541016]
[318.89709473 266.01260376]
[315.40753174 250.83166504]
[302.78137207 242.73353577]
[290.15518188 234.63540649]
[277.52902222 226.53727722]
[264.90283203 218.43914795]
[252.27667236 210.34100342]
[239.65049744 202.24287415]
[227.02432251 194.14474487]
[214.39814758 186.04661560]
[201.77197266 177.94848633]
[190.05001831 185.01449585]
[176.36032104 186.33506775]
[163.37931824 181.59455872]
[153.66967773 171.66793823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 107]
[2 106]
[3 105]
[4 104]
[5 103]
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[24 64]
[25 63]
[26 62]
[27 61]
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[34 52]
[35 51]
[40 50]
[41 49]
[42 48]
[43 47]
[80 101]
[81 100]
[82 99]
[85 96]
[86 95]
[112 152]
[113 151]
[114 150]
[115 149]
[116 148]
[117 147]
[118 146]
[119 145]
[120 144]
[121 143]
[124 140]
[125 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
