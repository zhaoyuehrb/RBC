%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGGCGGUGCGGGGCGGAAGUGGGCGGCUGCGGGACGCGCGCGGAGUCGCGCGGCGGGCGGGAC\
) } def
/len { sequence length } bind def

/coor [
[109.42530823 280.30352783]
[108.02068329 265.36944580]
[106.61606598 250.43536377]
[105.21144104 235.50126648]
[93.61133575 226.22909546]
[91.97410583 211.10382080]
[101.77826691 198.99943542]
[100.37364197 184.06533813]
[91.47853851 172.11853027]
[97.88957977 157.65446472]
[96.48495483 142.72036743]
[95.08032990 127.78627777]
[93.67571259 112.85218811]
[85.73899841 101.34131622]
[91.39019775 88.55243683]
[89.98558044 73.61834717]
[88.58095551 58.68425369]
[76.07033539 52.44488144]
[68.41376495 40.87874603]
[67.57025909 27.14324760]
[73.65653992 14.92303658]
[84.94499207 7.44159174]
[84.24190521 -7.54192162]
[83.53881836 -22.52543449]
[75.16317749 -35.94777298]
[82.29541779 -49.02372360]
[81.59233856 -64.00723267]
[80.88925171 -78.99075317]
[67.48306274 -86.62473297]
[60.35256577 -100.30535889]
[61.77306366 -115.66718292]
[71.29129028 -127.80831146]
[85.87001038 -132.85455322]
[100.85720825 -129.19566345]
[111.47052002 -117.99918365]
[114.32328033 -102.83787537]
[108.50518799 -88.54965210]
[95.87276459 -79.69383240]
[96.57585144 -64.71031952]
[97.27893066 -49.72680664]
[105.60428619 -37.37619019]
[98.52233124 -23.22851944]
[99.22541809 -8.24500561]
[99.92850494 6.73850775]
[113.82878113 15.16210461]
[120.14843750 30.31444168]
[116.27638245 46.43737793]
[103.51504517 57.27963257]
[104.91967010 72.21372223]
[106.32428741 87.14781189]
[114.26100159 98.65868378]
[108.60980225 111.44756317]
[110.01441956 126.38165283]
[111.41904449 141.31575012]
[112.82366943 156.24983215]
[121.81923676 169.26483154]
[115.30773163 182.66072083]
[116.71235657 197.59480286]
[128.60156250 207.65882874]
[129.81330872 222.82412720]
[120.14553070 234.09664917]
[121.55015564 249.03073120]
[122.95477295 263.96481323]
[124.35939789 278.89892578]
[131.86236572 294.10226440]
[119.33020020 305.52072144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[7 58]
[8 57]
[10 55]
[11 54]
[12 53]
[13 52]
[15 50]
[16 49]
[17 48]
[22 44]
[23 43]
[24 42]
[26 40]
[27 39]
[28 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
