%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUUGUCUCUCGCUGCAGCCGGAGUUCCUGGUCUCGUCUUCGCCCUUCUGUGUCCUCUGCUCGUAGAGGCCCAGCCUCUGUGGCCCUGUGACCUGCAGGUAUUGGGAAUCCACAGCUAAG\
) } def
/len { sequence length } bind def

/coor [
[197.40847778 205.65454102]
[187.40290833 198.65771484]
[179.24729919 189.55931091]
[173.37338257 178.83459473]
[170.09349060 167.04505920]
[169.58410645 154.80908203]
[171.87619019 142.76942444]
[158.34980774 136.28584290]
[144.82342529 129.80224609]
[131.29704285 123.31865692]
[117.77065277 116.83506775]
[104.24427032 110.35147858]
[90.63619232 104.04116058]
[76.94863892 97.90512848]
[64.56244659 101.76656342]
[53.24901962 96.28431702]
[48.89337158 84.92114258]
[35.36698532 78.43754578]
[21.84060287 71.95395660]
[8.31421757 65.47036743]
[-4.16654682 69.01422119]
[-15.33627605 63.24483109]
[-19.40030479 51.77412415]
[-32.75669479 44.94720459]
[-46.11308670 38.12028503]
[-58.23532867 48.59918594]
[-73.40673828 53.63465881]
[-89.31240845 52.48929214]
[-103.53718567 45.36642456]
[-113.93241119 33.37479782]
[-118.94045258 18.35605621]
[-117.82805634 2.60194731]
[-131.35444641 -3.88164234]
[-141.52841187 0.36176541]
[-152.12869263 -1.71799207]
[-159.63136292 -9.17954063]
[-161.68153381 -19.33495903]
[-174.85920715 -26.50075722]
[-191.23027039 -25.54126358]
[-200.01950073 -39.38616943]
[-192.18530273 -53.79302216]
[-175.78681946 -53.94128799]
[-167.69342041 -39.67844009]
[-154.51573181 -32.51264191]
[-135.35462952 -34.53526688]
[-124.87084961 -17.40802574]
[-111.34446716 -10.92443657]
[-101.21320343 -20.72040558]
[-88.31153870 -26.46463585]
[-74.19277954 -27.44306564]
[-60.56449890 -23.51677513]
[-49.08199310 -15.14128304]
[-41.14724350 -3.31379700]
[-37.73775482 10.54548454]
[-39.28616714 24.76389313]
[-25.92977524 31.59081268]
[-12.57338524 38.41773224]
[4.82361317 36.52941895]
[14.79780769 51.94398499]
[28.32419205 58.42757416]
[41.85057449 64.91116333]
[55.37696075 71.39475250]
[72.72006226 69.06275940]
[83.08466339 84.21757507]
[96.77222443 90.35359955]
[104.93254089 90.52733612]
[110.72785950 96.82509613]
[124.25424194 103.30868530]
[137.78062439 109.79227448]
[151.30700684 116.27586365]
[164.83338928 122.75945282]
[178.35978699 129.24304199]
[190.89602661 116.10439301]
[207.08757019 107.93121338]
[225.05879211 105.65344238]
[242.73356628 109.51907349]
[258.07507324 119.06726074]
[269.32049561 133.18318176]
[275.18365479 150.22819519]
[275.00201416 168.23008728]
[289.24398804 172.93815613]
[303.48596191 177.64622498]
[317.72796631 182.35427856]
[331.96994019 187.06234741]
[346.21191406 191.77041626]
[360.62377930 195.92953491]
[375.18438721 199.53356934]
[389.74496460 203.13760376]
[399.65417480 193.46217346]
[412.95254517 190.00340271]
[426.11041260 193.56802368]
[435.69039917 203.11314392]
[439.24536133 216.04843140]
[453.70916748 220.02316284]
[468.17297363 223.99787903]
[483.89477539 219.33343506]
[495.60742188 230.81149292]
[491.26193237 246.62442017]
[475.32861328 250.50523376]
[464.19824219 238.46168518]
[449.73443604 234.48696899]
[435.27066040 230.51223755]
[422.83926392 241.15109253]
[406.35418701 242.33766174]
[392.24765015 233.41195679]
[386.14093018 217.69819641]
[371.58032227 214.09416199]
[357.01974487 210.49012756]
[353.75024414 212.08233643]
[349.52316284 212.09817505]
[345.12243652 210.09475708]
[341.50384521 206.01240540]
[327.26187134 201.30433655]
[313.01989746 196.59626770]
[298.77789307 191.88819885]
[284.53591919 187.18013000]
[270.29394531 182.47206116]
[263.71090698 192.67707825]
[254.97023010 201.12136841]
[244.52830505 207.35815430]
[232.93159485 211.05610657]
[220.78817749 212.01683044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 65]
[14 64]
[17 62]
[18 61]
[19 60]
[20 59]
[23 57]
[24 56]
[25 55]
[32 47]
[33 46]
[37 44]
[38 43]
[80 117]
[81 116]
[82 115]
[83 114]
[84 113]
[85 112]
[86 108]
[87 107]
[88 106]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
