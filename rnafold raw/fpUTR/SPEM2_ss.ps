%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCAGUGUGGGUUGGGGCCGGGGGUGGGGGGCAGAGGGGGGUGGCCCAGGUGGCCCUAGGACCCCCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[80.26982117 157.62351990]
[88.54911804 170.13165283]
[90.81976318 184.95880127]
[86.66313171 199.37136841]
[76.84556580 210.71224976]
[63.17704773 216.89056396]
[48.17755127 216.76728821]
[34.61243439 210.36512756]
[24.98259926 198.86442566]
[21.06343269 184.38546753]
[23.57748413 169.59765625]
[32.06051636 157.22798157]
[17.27627945 159.76300049]
[2.49203992 162.29801941]
[-9.76730919 173.19023132]
[-25.24248505 167.76335144]
[-28.01395607 151.60009766]
[-15.23066711 141.32781982]
[-0.04297242 147.51377869]
[14.74126625 144.97875977]
[29.52550507 142.44375610]
[43.19393158 136.26522827]
[54.86446762 126.84192657]
[66.53500366 117.41863251]
[78.20554352 107.99533081]
[89.87607574 98.57202911]
[93.81893921 91.23989105]
[102.24780273 89.00914764]
[114.30775452 80.08964539]
[126.36771393 71.17015076]
[138.42767334 62.25065231]
[150.48762512 53.33115387]
[147.52883911 41.17220688]
[148.97439575 28.77779388]
[154.61984253 17.68909454]
[163.74000549 9.27633190]
[175.18211365 4.56947279]
[187.51141357 4.13216162]
[199.19113159 7.99433613]
[208.77397156 15.65155411]
[221.86918640 8.33612919]
[234.96438599 1.02070546]
[248.05960083 -6.29471874]
[261.15481567 -13.61014271]
[269.42910767 -27.09519005]
[284.31365967 -26.54744339]
[297.40887451 -33.86286926]
[305.33929443 -48.21697235]
[321.73840332 -48.25549316]
[329.73617554 -33.93880463]
[321.10519409 -19.99468994]
[304.72427368 -20.76765633]
[291.62905884 -13.45223141]
[284.29141235 -0.49043310]
[268.47024536 -0.51493120]
[255.37503052 6.80049276]
[242.27981567 14.11591721]
[229.18460083 21.43134117]
[216.08938599 28.74676514]
[216.83535767 46.50630951]
[208.67219543 62.38831329]
[193.65975952 72.20830536]
[175.67413330 73.33415222]
[159.40711975 65.39111328]
[147.34716797 74.31060791]
[135.28721619 83.23010254]
[123.22725677 92.14960480]
[111.16729736 101.06909943]
[99.29937744 110.24256897]
[87.62883759 119.66586304]
[75.95830536 129.08917236]
[64.28776550 138.51246643]
[52.61723328 147.93576050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 21]
[13 20]
[14 19]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[28 68]
[29 67]
[30 66]
[31 65]
[32 64]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
