%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAACGUGGGCUCGCGCGCCCCGCCUUUGUCUCCCGGGCGCGAGCCGCCGCAGCCCCGCGCCCGCUGCUCGCUGCGGAGCCGUUUUGUGCCGCGGCGCGGGGGAACGGGGACGCGGGGCGGGGGGCGCGGAGCCGGCGGGCGCAGCCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[158.13462830 472.72668457]
[155.41355896 457.97555542]
[152.69247437 443.22442627]
[141.13471985 437.45147705]
[134.93592834 425.89468384]
[136.56755066 412.68585205]
[145.65446472 402.69628906]
[143.23291016 387.89306641]
[140.81134033 373.08981323]
[131.12088013 361.77856445]
[136.52883911 346.91033936]
[134.10726929 332.10708618]
[131.68571472 317.30383301]
[129.26416016 302.50057983]
[126.84260559 287.69735718]
[124.27115631 272.91940308]
[121.55007935 258.16827393]
[118.82900238 243.41714478]
[116.10792542 228.66601562]
[106.19020844 217.55349731]
[111.29571533 202.57870483]
[108.57463837 187.82757568]
[105.85356140 173.07644653]
[103.13248444 158.32533264]
[100.41140747 143.57420349]
[97.69033051 128.82307434]
[94.96925354 114.07194519]
[90.28515625 128.32182312]
[88.64581299 143.23197937]
[80.05414581 155.52763367]
[66.61684418 162.19389343]
[51.62876129 161.59619141]
[38.76498413 153.88105774]
[31.17972946 140.94027710]
[30.73291397 125.94692993]
[37.53409576 112.57741547]
[49.91561890 104.10994720]
[64.84355164 102.62107849]
[79.14017487 98.08162689]
[64.41738129 95.21120453]
[49.69458389 92.34078217]
[34.37019730 98.17989349]
[21.82371712 87.61968994]
[24.96188545 71.52360535]
[40.55642319 66.44991302]
[52.56501007 77.61798859]
[67.28780365 80.48841095]
[82.01059723 83.35883331]
[89.79737091 86.95764923]
[95.84595490 92.45643616]
[99.75270844 77.97412872]
[103.65946198 63.49182129]
[107.56621552 49.00951004]
[99.94728088 35.42313385]
[104.11559296 20.79166412]
[117.11508179 13.61190796]
[121.02183533 -0.87040108]
[124.92858887 -15.35271072]
[128.83534241 -29.83502007]
[132.74209595 -44.31732941]
[125.12316132 -57.90370941]
[129.29147339 -72.53517914]
[142.29095459 -79.71493530]
[146.19770813 -94.19724274]
[150.10446167 -108.67955017]
[149.31915283 -117.84058380]
[154.23992920 -123.41423798]
[158.43939209 -137.81439209]
[162.63885498 -152.21455383]
[166.83831787 -166.61470032]
[165.62371826 -173.21047974]
[167.65652466 -178.59687805]
[171.51077271 -181.50691223]
[176.29035950 -195.72506714]
[181.06994629 -209.94320679]
[185.84953308 -224.16134644]
[190.62911987 -238.37948608]
[195.40870667 -252.59762573]
[200.18829346 -266.81576538]
[197.25157166 -282.36203003]
[208.64097595 -291.96051025]
[213.42056274 -306.17864990]
[206.16506958 -320.21905518]
[211.04226685 -335.25198364]
[225.15861511 -342.35861206]
[240.13911438 -337.32275391]
[247.09613037 -323.13208008]
[241.90216064 -308.20562744]
[227.63871765 -301.39904785]
[222.85913086 -287.18090820]
[226.13772583 -272.65164185]
[214.40644836 -262.03619385]
[209.62686157 -247.81803894]
[204.84727478 -233.59989929]
[200.06768799 -219.38175964]
[195.28810120 -205.16362000]
[190.50851440 -190.94548035]
[185.72892761 -176.72732544]
[181.23847961 -162.41523743]
[177.03901672 -148.01509094]
[172.83955383 -133.61492920]
[168.64009094 -119.21477509]
[164.58677673 -104.77279663]
[160.68002319 -90.29048920]
[156.77326965 -75.80818176]
[164.39826965 -63.06475449]
[160.64257812 -48.32197952]
[147.22439575 -40.41057587]
[143.31764221 -25.92826843]
[139.41088867 -11.44595814]
[135.50413513 3.03635120]
[131.59739685 17.51866150]
[139.22239685 30.26208687]
[135.46670532 45.00485992]
[122.04852295 52.91626358]
[118.14176941 67.39857483]
[114.23501587 81.88088226]
[110.32826233 96.36318970]
[109.72038269 111.35086823]
[112.44145966 126.10199738]
[115.16253662 140.85311890]
[117.88361359 155.60424805]
[120.60469055 170.35537720]
[123.32575989 185.10650635]
[126.04683685 199.85763550]
[136.15919495 212.02525330]
[130.85905457 225.94494629]
[133.58012390 240.69607544]
[136.30120850 255.44718933]
[139.02227783 270.19833374]
[143.68170166 278.12490845]
[141.64584351 285.27578735]
[144.06739807 300.07904053]
[146.48896790 314.88226318]
[148.91052246 329.68551636]
[151.33207703 344.48876953]
[161.19573975 356.85882568]
[155.61459351 370.66824341]
[158.03614807 385.47149658]
[160.45770264 400.27474976]
[174.83290100 410.19387817]
[177.56219482 427.10330200]
[167.44360352 440.50335693]
[170.16467285 455.25448608]
[172.88575745 470.00561523]
[187.38600159 475.06906128]
[197.39968872 486.71472168]
[200.23320007 501.80999756]
[195.12432861 516.29431152]
[183.44734192 526.27142334]
[168.34327698 529.05761719]
[153.87506104 523.90338135]
[143.93457031 512.19512939]
[141.19573975 497.08242798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[7 140]
[8 139]
[9 138]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 130]
[17 129]
[18 128]
[19 127]
[21 125]
[22 124]
[23 123]
[24 122]
[25 121]
[26 120]
[27 119]
[39 48]
[40 47]
[41 46]
[50 118]
[51 117]
[52 116]
[53 115]
[56 112]
[57 111]
[58 110]
[59 109]
[60 108]
[63 105]
[64 104]
[65 103]
[67 102]
[68 101]
[69 100]
[70 99]
[73 98]
[74 97]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
