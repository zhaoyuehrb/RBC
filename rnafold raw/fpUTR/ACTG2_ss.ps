%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCUGGGGUUUUAUAUUGCUCUGGUAUUCAUGCCAAAGACACACCAGCCCUCAGUCACUGGGAGAAGAACCUCUCAUACCCUCGGUGCUCCAGUCCCCAGCUCACUCAGCCACACACACC\
) } def
/len { sequence length } bind def

/coor [
[111.27154541 267.42144775]
[114.73163605 252.75433350]
[121.48146820 239.28077698]
[131.15704346 227.72741699]
[143.23655701 218.71731567]
[137.27581787 204.95251465]
[131.31507874 191.18771362]
[125.35434723 177.42291260]
[119.39361572 163.65812683]
[113.43287659 149.89332581]
[103.82047272 151.52853394]
[94.07201385 151.32879639]
[84.53465271 149.30120850]
[75.54801941 145.51799011]
[67.43213654 140.11384583]
[60.47600937 133.28123474]
[54.92734909 125.26345825]
[50.98374557 116.34603882]
[48.78563690 106.84653473]
[33.78686142 106.65497589]
[18.78685951 106.65497589]
[3.78808260 106.84653473]
[-9.91215611 114.75943756]
[-22.73719788 107.18529510]
[-37.73597336 107.37685394]
[-52.73475266 107.56840515]
[-67.73352814 107.75996399]
[-82.73230743 107.95151520]
[-96.54433441 116.79232788]
[-110.98030853 109.01191711]
[-111.18972778 92.61410522]
[-96.95716858 84.46755981]
[-82.92385864 92.95274353]
[-67.92508698 92.76118469]
[-52.92630768 92.56963348]
[-37.92753220 92.37807465]
[-22.92875290 92.18652344]
[-10.30132771 84.28732300]
[3.59652734 91.84775543]
[18.59530449 91.65620422]
[25.32148552 88.38671875]
[33.97841644 91.65620422]
[48.97719193 91.84775543]
[54.49547577 75.52297974]
[65.07505035 61.92068863]
[79.53919220 52.55380630]
[96.27910614 48.46417618]
[113.43287659 50.10667419]
[119.39361572 36.34187698]
[125.35434723 22.57708168]
[131.13880920 8.73728466]
[136.74606323 -5.17525148]
[132.41304016 -17.40444756]
[137.45793152 -28.91955948]
[148.64593506 -33.70725250]
[154.60667419 -47.47204971]
[145.57299805 -59.81466293]
[143.94097900 -74.92205811]
[150.04933167 -88.72619629]
[162.16603088 -97.56031799]
[176.97795105 -99.13281250]
[182.93867493 -112.89760590]
[188.89941406 -126.66240692]
[194.86015320 -140.42720032]
[200.82087708 -154.19200134]
[206.78161621 -167.95680237]
[200.73509216 -182.55868530]
[206.86175537 -197.12713623]
[221.52676392 -203.01893616]
[236.02961731 -196.73858643]
[241.76603699 -182.01211548]
[235.33271790 -167.57647705]
[220.54641724 -161.99606323]
[214.58567810 -148.23126221]
[208.62493896 -134.46646118]
[202.66421509 -120.70166779]
[196.70347595 -106.93687439]
[190.74273682 -93.17207336]
[199.72982788 -81.29361725]
[201.57687378 -66.41261292]
[195.68846130 -52.51322937]
[183.55377197 -43.36740112]
[168.37147522 -41.51131821]
[162.41073608 -27.74651909]
[165.40530396 -10.50546837]
[150.65859985 0.43200442]
[145.05134583 14.34454155]
[145.47412109 21.81128693]
[139.11914062 28.53781509]
[133.15841675 42.30261230]
[127.19767761 56.06740952]
[140.25357056 67.60499573]
[148.73236084 82.82610321]
[151.66996765 100.00000000]
[148.73236084 117.17389679]
[140.25357056 132.39500427]
[127.19767761 143.93258667]
[133.15841675 157.69738770]
[139.11914062 171.46218872]
[145.07987976 185.22698975]
[151.04061890 198.99177551]
[157.00134277 212.75657654]
[171.83708191 210.11126709]
[186.88293457 210.95921326]
[201.32749939 215.25468445]
[214.39181519 222.76605225]
[225.37130737 233.08822632]
[233.67390442 245.66453552]
[238.85182190 259.81677246]
[240.62585449 274.78173828]
[238.90029907 289.75231934]
[233.76823425 303.92126465]
[225.50642395 316.52441406]
[214.56040955 326.88208008]
[201.52049255 334.43572998]
[187.08990479 338.77795410]
[172.04689026 339.67462158]
[157.20266724 337.07736206]
[143.35777283 331.12625122]
[131.25885010 322.14221191]
[121.55838776 310.60974121]
[114.77951050 297.15078735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[10 97]
[19 43]
[20 42]
[21 40]
[22 39]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[48 91]
[49 90]
[50 89]
[51 87]
[52 86]
[55 84]
[56 83]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
