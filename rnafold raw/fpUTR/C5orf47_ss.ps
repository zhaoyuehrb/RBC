%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUGGCCCUAACCGCUCCCGCAUCCCUCGCCUGCACAGUGGGCAGUCUGGCGCCUGUGGCGUCGUGUUUGCUGAGGGCCCGGCUGCCGUUGACUGAGGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[13.25770855 217.05769348]
[4.51301670 229.24501038]
[6.87431479 244.64181519]
[-2.16765952 256.87692261]
[-16.86072540 259.03317261]
[-25.60541725 271.22045898]
[-34.35010910 283.40777588]
[-31.53830338 298.95993042]
[-40.61560440 311.89739990]
[-56.19660950 314.54461670]
[-69.03738403 305.33102417]
[-71.51972961 289.72290039]
[-62.17090988 276.98025513]
[-46.53741074 274.66308594]
[-37.79272079 262.47576904]
[-29.04802895 250.28846741]
[-31.71109962 235.67875671]
[-23.01635170 223.19453430]
[-7.67428684 220.50030518]
[1.07040548 208.31300354]
[9.63354301 195.99746704]
[18.01324463 183.55638123]
[26.39294624 171.11529541]
[34.77264786 158.67420959]
[19.79074287 159.41078186]
[8.49462032 149.54174805]
[7.21330070 134.59657288]
[16.66468430 122.94877625]
[31.55332756 121.12439728]
[43.53738022 130.14562988]
[45.90244293 144.95777893]
[56.35070801 134.19517517]
[66.79897308 123.43256378]
[77.24723816 112.66996002]
[74.15684509 96.78324127]
[81.04750824 82.13889313]
[95.25792694 74.39279938]
[111.29981995 76.53662109]
[121.42456055 65.46912384]
[131.54930115 54.40162277]
[131.78042603 41.40038681]
[140.57632446 32.37824249]
[152.76229858 31.85288811]
[163.21057129 21.09027863]
[173.65882874 10.32767010]
[184.10710144 -0.43493855]
[194.55535889 -11.19754696]
[198.37078857 -19.67859459]
[205.47630310 -22.11849213]
[216.23892212 -32.56675720]
[227.00152588 -43.01502228]
[237.76412964 -53.46328735]
[241.82919312 -61.82754898]
[249.00390625 -64.05581665]
[260.07141113 -74.18055725]
[271.13891602 -84.30530548]
[282.20642090 -94.43004608]
[283.06716919 -109.98308563]
[294.43539429 -120.09335327]
[309.25753784 -119.17691040]
[320.32504272 -129.30165100]
[331.39254761 -139.42640686]
[342.46005249 -149.55114746]
[341.61007690 -165.16561890]
[351.03704834 -177.64224243]
[366.28982544 -181.08993530]
[380.16653442 -173.88081360]
[386.11499023 -159.41879272]
[381.32650757 -144.53240967]
[368.06210327 -136.25054932]
[352.58477783 -138.48364258]
[341.51727295 -128.35890198]
[330.44979858 -118.23415375]
[319.38229370 -108.10941315]
[318.97897339 -93.26445007]
[307.89916992 -82.83885956]
[292.33114624 -83.36254883]
[281.26364136 -73.23780823]
[270.19616699 -63.11306000]
[259.12866211 -52.98831558]
[248.21240234 -42.70067978]
[237.44979858 -32.25241470]
[226.68717957 -21.80414963]
[215.92457581 -11.35588360]
[205.31797791 -0.74928200]
[194.86970520 10.01332664]
[184.42144775 20.77593613]
[173.97317505 31.53854370]
[163.52491760 42.30115509]
[160.24525452 59.47055817]
[142.61680603 64.52636719]
[132.49206543 75.59386444]
[122.36731720 86.66136932]
[126.03720093 99.47052765]
[122.89109039 112.41829681]
[113.75257111 122.11521912]
[101.01392365 126.02283478]
[88.00984955 123.11822510]
[77.56158447 133.88082886]
[67.11331177 144.64344788]
[56.66505051 155.40605164]
[47.21373367 167.05390930]
[38.83403015 179.49499512]
[30.45432854 191.93608093]
[22.07462692 204.37716675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[5 16]
[6 15]
[7 14]
[21 105]
[22 104]
[23 103]
[24 102]
[31 101]
[32 100]
[33 99]
[34 98]
[38 93]
[39 92]
[40 91]
[43 89]
[44 88]
[45 87]
[46 86]
[47 85]
[49 84]
[50 83]
[51 82]
[52 81]
[54 80]
[55 79]
[56 78]
[57 77]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
