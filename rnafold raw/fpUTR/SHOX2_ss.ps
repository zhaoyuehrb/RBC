%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUCCCUCUCCUCCCCCACCUCCUGUCCCAUUGAUGUGUUAUUAUUGGGGGGGCUGGAGCAGUAAAAAAAGAAGAAGGAAAAAAAGAGCGGGGCUCUGCUGGCAGAGGUUGAGCGCCGGGCUGACGUGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[119.40779877 336.24557495]
[107.55231476 327.05603027]
[100.74229431 313.69100952]
[100.27590942 298.69827271]
[106.24207306 284.93582153]
[117.50346375 275.02719116]
[131.91334534 270.86120605]
[146.72479248 273.23205566]
[159.11491394 281.68841553]
[154.16073608 267.53015137]
[149.20654297 253.37191772]
[135.31166077 242.71058655]
[138.77647400 224.66427612]
[133.50585938 210.62075806]
[128.23522949 196.57722473]
[122.96460724 182.53370667]
[109.33943176 176.62692261]
[103.79421234 162.45988464]
[110.08217621 148.20858765]
[104.81155396 134.16506958]
[99.54093170 120.12153625]
[78.35604095 108.71691895]
[81.17444611 81.29259491]
[67.01619720 76.33840942]
[52.85794449 71.38421631]
[38.69969177 66.43003082]
[23.11847305 69.17523193]
[13.66088104 57.66857529]
[-0.49736881 52.71438980]
[-14.65561867 47.76020432]
[-28.81386948 42.80601501]
[-42.97211838 37.85182953]
[-58.55334091 40.59703064]
[-68.01093292 29.09037209]
[-82.16918182 24.13618469]
[-96.32743073 19.18199921]
[-110.48567963 14.22781372]
[-124.64392853 9.27362728]
[-138.80218506 4.31944180]
[-152.93081665 11.40161610]
[-167.90257263 6.33979750]
[-174.83497620 -7.86292601]
[-169.61515808 -22.78033066]
[-155.33993530 -29.56218529]
[-140.47854614 -24.18493462]
[-133.84799194 -9.83880806]
[-119.68974304 -4.88462210]
[-105.53149414 0.06956363]
[-91.37324524 5.02374935]
[-77.21499634 9.97793579]
[-63.05674362 14.93212128]
[-48.48821640 11.83256435]
[-38.01793289 23.69358063]
[-23.85968208 28.64776611]
[-9.70143318 33.60195160]
[4.45681715 38.55613708]
[18.61506653 43.51032639]
[33.18359375 40.41076660]
[43.65388107 52.27178574]
[57.81212997 57.22597122]
[71.97038269 62.18015671]
[86.12863159 67.13433838]
[76.07875824 55.99880981]
[62.05626678 50.67248154]
[49.65761948 42.23012161]
[39.56316757 31.13498497]
[32.32683182 17.99590302]
[28.34569550 3.53386426]
[27.83821869 -11.45754910]
[30.83224869 -26.15570450]
[37.16349030 -39.75406265]
[46.48452759 -51.50643539]
[58.28388214 -60.76792908]
[71.91407776 -67.03032684]
[86.62718964 -69.94999695]
[101.61584473 -69.36672974]
[116.05756378 -65.31251526]
[129.15989685 -58.00983429]
[140.20384216 -47.85940933]
[148.58340454 -35.41822815]
[153.83876038 -21.36898613]
[155.68151855 -6.48260880]
[154.01057434 8.42403316]
[148.91761780 22.53295898]
[140.68212891 35.06996536]
[129.75598145 45.34709549]
[116.74343109 52.79842758]
[108.55927277 65.36901093]
[121.76820374 58.26098251]
[134.97714233 51.15295410]
[148.18606567 44.04492188]
[161.39500427 36.93689346]
[172.47770691 24.10684395]
[187.87434387 31.20471573]
[185.31607056 47.96453476]
[168.50303650 50.14582443]
[155.29409790 57.25385666]
[142.08515930 64.36188507]
[128.87623596 71.46991730]
[115.66729736 78.57794189]
[122.92626190 91.64205933]
[121.62549591 105.29582214]
[113.58444977 114.85091400]
[118.85507202 128.89443970]
[124.12569427 142.93795776]
[138.23745728 149.53311157]
[143.38256836 163.85032654]
[137.00813293 177.26309204]
[142.27874756 191.30661011]
[147.54937744 205.35012817]
[152.81999207 219.39366150]
[164.26161194 225.46365356]
[168.33692932 237.33366394]
[163.36479187 248.41772461]
[168.31898499 262.57598877]
[173.27316284 276.73422241]
[180.08302307 290.09933472]
[188.62528992 302.42935181]
[197.16755676 314.75939941]
[205.70982361 327.08941650]
[214.25209045 339.41943359]
[228.47116089 346.35693359]
[229.35905457 361.22506714]
[237.90133667 373.55508423]
[252.95230103 380.06665039]
[254.56958008 396.38583374]
[241.08944702 405.72491455]
[226.37910461 398.47659302]
[225.57130432 382.09735107]
[217.02903748 369.76733398]
[203.42097473 363.71176147]
[201.92205811 347.96170044]
[193.37979126 335.63168335]
[184.83752441 323.30166626]
[176.29525757 310.97161865]
[167.75299072 298.64160156]
[167.31179810 313.63510132]
[160.52423096 327.01153564]
[148.68420410 336.22097778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 116]
[10 115]
[11 114]
[13 111]
[14 110]
[15 109]
[16 108]
[19 105]
[20 104]
[21 103]
[23 62]
[24 61]
[25 60]
[26 59]
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
