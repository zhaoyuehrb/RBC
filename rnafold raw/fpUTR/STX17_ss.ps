%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGUGAUGCCCCGCCCCGUCGCUCCUGCGCCUGCGCCGUGCCCACCGACCGGCCUCGAGCGCCCCGGCGGGAGGUUUUUCUAUAUGAGUGGAGAAGACAGCUGUUACCAGGGAGGUCAUACAACAUUUUUUUAGG\
) } def
/len { sequence length } bind def

/coor [
[164.20072937 359.22796631]
[170.31353760 345.41455078]
[180.07147217 333.88375854]
[192.68350220 325.57031250]
[188.27781677 311.23190308]
[183.87214661 296.89349365]
[179.46647644 282.55505371]
[175.06080627 268.21664429]
[161.82060242 261.49114990]
[157.14836121 247.01271057]
[164.29248047 233.17076111]
[159.88679504 218.83235168]
[155.48112488 204.49394226]
[149.78062439 190.61935425]
[142.83322144 177.32524109]
[132.74592590 175.12002563]
[125.41862488 167.53497314]
[123.48369598 156.94338989]
[127.83017731 146.85206604]
[121.49955750 133.25340271]
[115.16894531 119.65475464]
[88.12984467 118.23489380]
[81.84974670 95.54697418]
[69.94072723 86.42693329]
[58.03170776 77.30688477]
[46.12268829 68.18683624]
[34.21366882 59.06678772]
[22.30465126 49.94674301]
[10.39563179 40.82669449]
[-3.76888156 46.59850693]
[-18.82123375 44.51920319]
[-30.73263168 35.24639511]
[-36.36562347 21.34943962]
[-34.30019379 6.59818220]
[-46.20921326 -2.52186489]
[-58.11823273 -11.64191151]
[-70.02725220 -20.76195908]
[-82.04005432 -29.74486351]
[-94.15505981 -38.58944702]
[-112.46710205 -40.08998871]
[-119.01521301 -56.33108139]
[-131.32983398 -64.89555359]
[-143.64445496 -73.46002197]
[-158.25517273 -68.23445892]
[-173.13749695 -72.62715149]
[-182.56889343 -84.94902802]
[-182.92277527 -100.46206665]
[-174.06306458 -113.20118713]
[-159.39653015 -118.26795197]
[-144.56271362 -113.71406555]
[-135.26554871 -101.29060364]
[-135.07998657 -85.77464294]
[-122.76535797 -77.21017456]
[-110.45073700 -68.64570618]
[-98.43658447 -70.46781921]
[-88.09030151 -63.35826111]
[-85.31047821 -50.70445251]
[-73.19547272 -41.85987091]
[-65.87403870 -40.44410706]
[-60.90720749 -32.67097855]
[-48.99818802 -23.55093193]
[-37.08916855 -14.43088436]
[-25.18014717 -5.31083727]
[-11.47723389 -11.14999199]
[3.40761685 -9.33417606]
[15.46473598 -0.25165126]
[21.39577293 13.73833084]
[19.51567841 28.91767502]
[31.42469788 38.03772354]
[43.33371735 47.15776825]
[55.24273682 56.27781677]
[67.15175629 65.39786530]
[79.06077576 74.51790619]
[90.96979523 83.63795471]
[100.26623535 79.26684570]
[111.51628113 80.34400177]
[121.50032806 87.58459473]
[132.52392578 77.41206360]
[143.54751587 67.23952484]
[154.57110596 57.06698990]
[165.59468079 46.89445496]
[176.61827087 36.72192001]
[187.64186096 26.54938316]
[198.66545105 16.37684822]
[203.02268982 0.56714970]
[218.95890808 -3.30181241]
[230.08030701 8.75001907]
[224.94613647 24.32475281]
[208.83799744 27.40043831]
[197.81440735 37.57297516]
[186.79081726 47.74551010]
[175.76722717 57.91804504]
[164.74363708 68.09057617]
[153.72004700 78.26311493]
[142.69645691 88.43565369]
[131.67286682 98.60818481]
[128.76759338 113.32414246]
[135.09820557 126.92279816]
[141.42883301 140.52145386]
[158.43783569 151.23208618]
[156.12733459 170.37783813]
[163.07473755 183.67195129]
[167.30108643 169.27966309]
[179.07112122 159.98094177]
[194.05078125 159.19985962]
[206.72409058 167.22402954]
[212.42436218 181.09870911]
[209.05258179 195.71484375]
[197.85035706 205.69030762]
[182.94267273 207.35186768]
[169.81953430 200.08827209]
[174.22520447 214.42668152]
[178.63088989 228.76509094]
[192.31484985 236.20732117]
[196.57856750 250.81127930]
[189.39921570 263.81097412]
[193.80488586 278.14938354]
[198.21055603 292.48779297]
[202.61622620 306.82620239]
[207.02191162 321.16464233]
[222.12606812 320.96191406]
[236.67514038 325.02404785]
[249.48971558 333.02175903]
[259.53094482 344.30670166]
[265.98486328 357.96408081]
[268.32827759 372.88671875]
[266.37118530 387.86492920]
[260.27224731 401.68447876]
[250.52590942 413.22506714]
[237.92224121 421.55117798]
[223.48297119 425.98785400]
[208.37861633 426.17541504]
[193.83361816 422.09863281]
[181.02709961 414.08804321]
[170.99719238 402.79302979]
[164.55700684 389.12918091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 120]
[5 119]
[6 118]
[7 117]
[8 116]
[11 113]
[12 112]
[13 111]
[14 102]
[15 101]
[19 99]
[20 98]
[21 97]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[28 69]
[29 68]
[34 63]
[35 62]
[36 61]
[37 60]
[38 58]
[39 57]
[41 54]
[42 53]
[43 52]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
