%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGAACGGGUCCUGGCGGUGCUUUGCAAAGGGCCCGUGUUUCUGUUGCGGGAAGCUCCCGGGGGUCGCACGUGCGUCCGAGCCCAAGCCCCUCCCCUCCACUCCCCUUCCUGCGUGCCCCGGAGCCGCCAAGCGGCUACGUUCUUCUCGGCCCGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[183.08061218 132.70159912]
[168.71076965 128.39955139]
[154.34092712 124.09750366]
[139.97108459 119.79545593]
[125.60124969 115.49340820]
[99.39826202 138.13819885]
[59.59879303 122.74048615]
[47.92331696 132.15766907]
[36.24784470 141.57484436]
[24.57237053 150.99203491]
[12.89689636 160.40921021]
[1.22142291 169.82640076]
[-10.45405102 179.24357605]
[-22.12952423 188.66075134]
[-33.80499649 198.07794189]
[-40.00940704 215.39118958]
[-57.41284180 217.47732544]
[-68.90350342 227.11914062]
[-80.39417267 236.76095581]
[-91.88484192 246.40277100]
[-96.98217010 261.98959351]
[-113.08299255 265.10336304]
[-123.62416077 252.54087830]
[-117.76182556 237.22537231]
[-101.52665710 234.91209412]
[-90.03598785 225.27027893]
[-78.54531860 215.62847900]
[-67.05465698 205.98666382]
[-65.67626953 193.93788147]
[-56.13905716 185.81301880]
[-43.22217941 186.40246582]
[-31.54670715 176.98529053]
[-19.87123299 167.56809998]
[-8.19575882 158.15092468]
[3.47971463 148.73373413]
[15.15518856 139.31655884]
[26.83066177 129.89936829]
[38.50613403 120.48219299]
[50.18161011 111.06501007]
[49.89079285 103.57064819]
[35.12976456 106.23748779]
[20.36873436 108.90431976]
[6.29250145 114.08695221]
[-6.17485619 105.74638367]
[-6.75662184 90.75767517]
[5.02674818 81.47585297]
[19.46256065 85.55204010]
[34.38586044 87.06698608]
[49.30916214 88.58193207]
[49.01834869 81.08757019]
[36.64822388 72.60346985]
[24.27809906 64.11936951]
[11.90797329 55.63526154]
[-0.46215197 47.15116119]
[-16.94413948 43.17870331]
[-17.68959618 26.24115181]
[-1.62033415 20.83604813]
[8.02195072 34.78103638]
[20.39207649 43.26513672]
[32.76219940 51.74924088]
[45.13232803 60.23334503]
[57.50245285 68.71744537]
[69.78973389 60.11380005]
[66.04811859 45.58795166]
[62.30649948 31.06210136]
[51.37144470 19.62815475]
[55.68946075 5.37319136]
[51.94784546 -9.15265751]
[48.20622635 -23.67850685]
[37.27117157 -35.11245346]
[41.58919144 -49.36741638]
[37.84757233 -63.89326859]
[25.98456192 -75.21585083]
[30.12109756 -91.08472443]
[46.00186539 -95.17534637]
[57.29009628 -83.27964020]
[52.37342453 -67.63488770]
[56.11503983 -53.10903549]
[66.78247070 -42.71407318]
[62.73207855 -27.42012405]
[66.47369385 -12.89427471]
[70.21530914 1.63157439]
[80.88274384 12.02653599]
[76.83234406 27.32048416]
[80.57396698 41.84633636]
[84.31558228 56.37218475]
[101.96248627 56.97066116]
[116.81233215 63.94000626]
[126.85902405 75.28590393]
[131.16238403 88.51388550]
[129.90328979 101.12356567]
[144.27313232 105.42561340]
[158.64297485 109.72766113]
[173.01281738 114.02970886]
[187.38265991 118.33175659]
[191.20950317 112.42580414]
[196.01205444 107.29197693]
[201.63812256 103.08914948]
[207.91007996 99.94673157]
[214.63049316 97.96073151]
[221.58833313 97.19078827]
[228.56556702 97.65839386]
[235.34403992 99.34630585]
[241.71226501 102.19916534]
[247.47204590 106.12532806]
[252.44459534 110.99975586]
[256.47613525 116.66806030]
[259.44265747 122.95133972]
[261.25372314 129.65187073]
[261.85510254 136.55928040]
[261.23065186 143.45718384]
[259.40246582 150.12998962]
[275.21557617 150.63610840]
[282.11441040 163.83670044]
[294.95690918 171.58718872]
[307.79940796 179.33767700]
[323.61251831 179.84379578]
[330.51132202 193.04438782]
[343.35382080 200.79487610]
[356.19631958 208.54537964]
[380.52703857 206.31990051]
[392.02960205 227.08222961]
[405.80285645 233.02343750]
[421.53897095 231.38488770]
[430.16076660 243.53041077]
[443.93402100 249.47161865]
[457.70727539 255.41281128]
[471.48049927 261.35400391]
[485.25375366 267.29519653]
[499.02697754 273.23638916]
[515.96557617 273.95809937]
[519.96112061 290.43450928]
[505.23471069 298.83505249]
[493.08578491 287.00964355]
[479.31256104 281.06845093]
[465.53930664 275.12725830]
[451.76605225 269.18606567]
[437.99282837 263.24484253]
[424.21957397 257.30364990]
[409.46859741 259.36715698]
[399.86166382 246.79667664]
[386.08840942 240.85548401]
[381.33096313 244.74195862]
[375.63037109 247.13796997]
[369.44439697 247.82627869]
[363.27676392 246.72772217]
[357.63632202 243.90965271]
[352.99502563 239.58219910]
[349.74835205 234.08277893]
[348.18182373 227.84982300]
[348.44583130 221.38787842]
[335.60333252 213.63739014]
[322.76083374 205.88690186]
[307.86630249 205.93515015]
[300.04891968 192.18017578]
[287.20642090 184.42968750]
[274.36392212 176.67919922]
[259.46939087 176.72744751]
[251.65199280 162.97248840]
[230.79087830 175.15081787]
[206.64253235 172.76831055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[17 28]
[18 27]
[19 26]
[20 25]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[63 86]
[64 85]
[65 84]
[67 82]
[68 81]
[69 80]
[71 78]
[72 77]
[112 159]
[114 157]
[115 156]
[116 155]
[118 153]
[119 152]
[120 151]
[122 142]
[123 141]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
