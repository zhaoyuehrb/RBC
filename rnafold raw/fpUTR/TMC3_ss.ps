%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCUCGGAACAGACCUUUGCCUGCCAACUUCCUAGCUCUCUGGCCAGCUUCUGAUUGUUAGCAGUGGGUUAGCUCCC\
) } def
/len { sequence length } bind def

/coor [
[77.97624969 298.29608154]
[65.45080566 307.30255127]
[50.04328156 308.08471680]
[36.67016602 300.39294434]
[29.59876823 286.68167114]
[31.08555031 271.32611084]
[40.65608215 259.22616577]
[55.25643921 254.24290466]
[58.75812149 239.65734863]
[62.25980377 225.07180786]
[57.70740509 210.88995361]
[68.45250702 199.27731323]
[63.90011597 185.09545898]
[74.64521790 173.48283386]
[78.14689636 158.89727783]
[81.64858246 144.31173706]
[85.15026093 129.72618103]
[88.65193939 115.14063263]
[82.87086487 108.03804016]
[81.10239410 99.05248260]
[83.76080322 90.28888702]
[90.22334290 83.80017853]
[98.97612000 81.10637665]
[104.16787720 67.03350830]
[109.35963440 52.96063995]
[114.55138397 38.88776779]
[112.06879425 23.26255608]
[123.73298645 13.99995136]
[128.92474365 -0.07291888]
[134.11650085 -14.14578915]
[130.49078369 -32.07218170]
[144.13439941 -42.92544556]
[148.76965332 -57.19129181]
[140.53898621 -72.48141479]
[145.68489075 -88.71586609]
[160.62298584 -96.17378998]
[164.69458008 -110.61061859]
[168.76618958 -125.04744720]
[172.83779907 -139.48426819]
[163.12588501 -151.58625793]
[162.41577148 -167.08708191]
[170.98052979 -180.02635193]
[185.52682495 -185.42864990]
[200.46131897 -181.21669006]
[210.04138184 -169.01004028]
[210.58329773 -153.50244141]
[201.87867737 -140.65684509]
[187.27462769 -135.41265869]
[183.20301819 -120.97583771]
[179.13140869 -106.53900909]
[175.05981445 -92.10218048]
[182.93038940 -81.70637512]
[183.29826355 -68.47614288]
[175.79847717 -57.33341217]
[163.03550720 -52.55603790]
[158.40025330 -38.29018784]
[163.63945007 -27.20291710]
[159.69009399 -15.16707516]
[148.18937683 -8.95403290]
[142.99761963 5.11883688]
[137.80586243 19.19170761]
[140.65980530 33.81033325]
[128.62425232 44.07952499]
[123.43250275 58.15239716]
[118.24074554 72.22526550]
[113.04898834 86.29813385]
[118.10659790 105.49257660]
[103.23748779 118.64231110]
[99.73580933 133.22785950]
[96.23413086 147.81341553]
[92.73245239 162.39895630]
[89.23076630 176.98451233]
[93.53269958 192.20962524]
[83.03806305 202.77899170]
[87.33998871 218.00410461]
[76.84535217 228.57348633]
[73.34367371 243.15904236]
[69.84198761 257.74459839]
[80.58864594 268.81314087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 78]
[9 77]
[10 76]
[12 74]
[14 72]
[15 71]
[16 70]
[17 69]
[18 68]
[23 66]
[24 65]
[25 64]
[26 63]
[28 61]
[29 60]
[30 59]
[32 56]
[33 55]
[36 51]
[37 50]
[38 49]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
