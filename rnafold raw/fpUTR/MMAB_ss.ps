%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGUGGGUGGAGUCACCCCGCGGACUGGACGGGAACCUGGCGGGGUCAGGUCCCGUCAAGCAGCCUGGCUC\
) } def
/len { sequence length } bind def

/coor [
[82.77657318 114.03979492]
[68.63340759 119.03689575]
[54.59949875 124.33306122]
[40.68116379 129.92590332]
[26.76282883 135.51875305]
[12.84449387 141.11160278]
[-1.07384169 146.70445251]
[-14.99217701 152.29730225]
[-28.91051292 157.89013672]
[-35.95862198 164.17630005]
[-43.54017258 163.41113281]
[-50.12718964 177.77729797]
[-64.97219849 183.19960022]
[-79.26792145 176.46105957]
[-84.53295898 161.55955505]
[-77.64365387 147.33587646]
[-62.68731689 142.22868347]
[-48.53726959 149.26797485]
[-34.50336075 143.97180176]
[-20.58502388 138.37896729]
[-6.66668892 132.78611755]
[7.25164652 127.19326782]
[21.16998291 121.60041809]
[35.08831787 116.00757599]
[49.00665283 110.41472626]
[54.19238663 104.83139801]
[63.63631439 104.89373016]
[77.77947235 99.89663696]
[86.78679657 82.13456726]
[106.40784454 78.72320557]
[115.32733917 66.66324615]
[124.24684143 54.60329056]
[133.16633606 42.54333496]
[142.08583069 30.48337746]
[151.00532532 18.42342186]
[159.92483521 6.36346436]
[162.63061523 -2.68475699]
[169.48771667 -6.00825834]
[178.91101074 -17.67879486]
[188.33432007 -29.34933090]
[197.75761414 -41.01986694]
[207.18090820 -52.69040298]
[216.60421753 -64.36093903]
[221.85040283 -80.48278046]
[238.79449463 -79.90458679]
[242.92947388 -63.46261978]
[228.27474976 -54.93764114]
[218.85145569 -43.26710510]
[209.42814636 -31.59656715]
[200.00485229 -19.92603111]
[190.58155823 -8.25549507]
[181.15824890 3.41504169]
[171.98478699 15.28296185]
[163.06529236 27.34291840]
[154.14579773 39.40287399]
[145.22628784 51.46283340]
[136.30679321 63.52278900]
[127.38729858 75.58274841]
[118.46780396 87.64270020]
[122.22076416 100.00000000]
[118.46780396 112.35729980]
[127.38729858 124.41725159]
[136.30679321 136.47720337]
[151.97207642 138.56875610]
[161.50364685 151.17529297]
[159.24659729 166.81758118]
[146.53999329 176.21533203]
[130.92243958 173.79302979]
[121.65955353 160.98777771]
[124.24684143 145.39671326]
[115.32733917 133.33674622]
[106.40784454 121.27679443]
[97.76814270 122.10839844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[11 18]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
