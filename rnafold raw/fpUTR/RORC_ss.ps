%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGUGCUCCCGCCUUCCACCCUCCGCCCUCCUCCCUCCCCUGGGCCCUGCUCCCUGCCCUCCUGGGCAGCCAGGGCAGCCAGGACGGCACCAAGGGAGCUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.55930328 400.91223145]
[93.20756531 394.70242310]
[86.25133514 380.69726562]
[89.97513580 365.50952148]
[102.62069702 356.31039429]
[103.48487854 341.33532715]
[104.34906006 326.36022949]
[104.99735260 311.37423706]
[105.42961884 296.38046265]
[105.86189270 281.38671875]
[106.29415894 266.39294434]
[106.72643280 251.39916992]
[107.15869904 236.40539551]
[106.51040649 221.41941833]
[104.78491974 206.51898193]
[103.05943298 191.61856079]
[93.90943909 179.86581421]
[100.00791168 165.26721191]
[98.28241730 150.36679077]
[96.55693054 135.46635437]
[88.38661957 133.68748474]
[80.85581207 130.05357361]
[74.37920380 124.76473236]
[69.31342316 118.11219788]
[65.93743896 110.46228790]
[64.43714905 102.23625946]
[64.89515686 93.88709259]
[67.28626251 85.87454224]
[55.07522202 77.16301727]
[42.86418915 68.45149994]
[30.65315247 59.73997498]
[17.55232048 67.50451660]
[2.42524171 69.26274109]
[-12.10722733 64.71002960]
[-23.52724838 54.63515472]
[-29.85623550 40.78366470]
[-29.99764824 25.55540466]
[-23.92699242 11.58876514]
[-12.69604111 1.30355120]
[1.74937391 -3.51826215]
[16.90649605 -2.04126644]
[30.14926529 5.47863960]
[39.18328857 17.73858643]
[42.44336700 32.61446762]
[39.36467361 47.52893829]
[51.57571030 56.24046326]
[63.78674698 64.95198059]
[75.99777985 73.66350555]
[94.37504578 64.81367493]
[114.59541321 67.49320984]
[123.48199463 55.40898132]
[132.36857605 43.32474899]
[141.25517273 31.24052048]
[150.14175415 19.15629005]
[159.02833557 7.07205915]
[160.18611145 -12.95122337]
[177.99288940 -20.25328445]
[186.16851807 -32.82941818]
[194.34414673 -45.40554810]
[202.51977539 -57.98168182]
[210.69540405 -70.55781555]
[218.87103271 -83.13394928]
[219.19636536 -99.52986908]
[233.68696594 -107.20803833]
[247.43615723 -98.26982117]
[246.29994202 -81.91007996]
[231.44715881 -74.95832062]
[223.27153015 -62.38218689]
[215.09590149 -49.80605316]
[206.92027283 -37.22992325]
[198.74465942 -24.65378952]
[190.56903076 -12.07765579]
[193.60881042 -2.12764764]
[190.52651978 8.04094887]
[182.13119507 14.90938759]
[171.11256409 15.95864391]
[162.22598267 28.04287338]
[153.33940125 40.12710571]
[144.45280457 52.21133423]
[135.56622314 64.29556274]
[126.67964172 76.37979126]
[134.67329407 91.78538513]
[134.44097900 109.13983154]
[126.03780365 124.32592010]
[111.45735931 133.74087524]
[113.18284607 148.64129639]
[114.90833282 163.54171753]
[124.18173981 176.36024475]
[117.95985413 189.89306641]
[119.68534088 204.79350281]
[121.41083527 219.69392395]
[133.19317627 210.41079712]
[147.86163330 213.54708862]
[154.81765747 226.83670044]
[149.03521729 240.67735291]
[134.69238281 245.06860352]
[122.15246582 236.83766174]
[121.72019958 251.83143616]
[121.28793335 266.82519531]
[120.85565948 281.81896973]
[120.42339325 296.81274414]
[119.99111938 311.80651855]
[122.90576935 320.62808228]
[119.32414246 327.22439575]
[118.45996857 342.19949341]
[117.59578705 357.17459106]
[129.09921265 367.76727295]
[131.05120850 383.28256226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 106]
[6 105]
[7 104]
[8 102]
[9 101]
[10 100]
[11 99]
[12 98]
[13 97]
[14 91]
[15 90]
[16 89]
[18 87]
[19 86]
[20 85]
[28 48]
[29 47]
[30 46]
[31 45]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
