%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGCUGGGGAGCUGGGAGGGUUCAGCUGCCACGUGAGUUCUGCGGCCGCUGCUACACGCCUGGUGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[183.13015747 188.40567017]
[182.08068848 183.99803162]
[170.93351746 173.96107483]
[159.78634644 163.92411804]
[148.63917542 153.88716125]
[137.49200439 143.85020447]
[126.34483337 133.81323242]
[115.19766235 123.77628326]
[104.05049133 113.73931885]
[90.41541290 110.64476776]
[85.91255188 97.40785217]
[74.76538086 87.37089539]
[63.61820984 77.33393097]
[52.47103500 67.29697418]
[41.32386398 57.26001358]
[30.17669106 47.22305679]
[14.74390030 43.73887253]
[10.46295834 29.47273064]
[-4.63193989 32.54685593]
[-18.48070526 26.21715546]
[-25.85955429 13.10164642]
[-24.12135887 -1.66712725]
[-35.26853180 -11.70408630]
[-46.41570282 -21.74104500]
[-62.18323135 -20.66372681]
[-74.03925323 -31.11409569]
[-74.94981384 -46.89213181]
[-64.37467957 -58.63700867]
[-48.58789444 -59.38069534]
[-36.95548248 -48.68198013]
[-36.37874222 -32.88821793]
[-25.23157120 -22.85125923]
[-14.08439922 -12.81429958]
[0.42177889 -16.08673096]
[14.23674011 -10.11924934]
[21.97935295 2.99201846]
[20.49991798 18.32555771]
[35.13538742 21.09183121]
[40.21364975 36.07588196]
[51.36082077 46.11284256]
[62.50799561 56.14980316]
[73.65516663 66.18675995]
[84.80233765 76.22371674]
[95.94950867 86.26068115]
[109.58458710 89.35523224]
[114.08744812 102.59214783]
[125.23461914 112.62910461]
[136.38179016 122.66606903]
[147.52896118 132.70303345]
[158.67613220 142.73999023]
[169.82330322 152.77694702]
[180.97047424 162.81390381]
[192.11766052 172.85086060]
[204.25291443 181.66764832]
[217.24328613 189.16764832]
[230.23367310 196.66764832]
[239.52346802 198.33216858]
[243.60153198 204.76350403]
[256.26644897 212.80090332]
[268.93136597 220.83831787]
[284.83871460 218.75595093]
[296.28433228 229.99772644]
[294.48809814 245.93991089]
[280.82797241 254.35302734]
[265.78280640 248.78324890]
[260.89398193 233.50323486]
[248.22904968 225.46583557]
[235.56413269 217.42842102]
[222.73367310 209.65802002]
[209.74328613 202.15802002]
[196.75291443 194.65802002]
[194.28787231 195.55529785]
[191.30593872 195.51057434]
[188.16661072 194.32342529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[18 37]
[22 33]
[23 32]
[24 31]
[54 71]
[55 70]
[56 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
