%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCUAUCCGGGGCCUUGGCGCUUCUCUUUCCUUUCGCGCCGGUUGCCGCUGCGGAGCGCGGCGGGUCCAUGUGCGCAGUGAGUGGCGCUAUUCCUGGCCCAGUAGCACCCGAGCCCCGGGUUUGACCGAGUCCGCGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[37.13295746 107.42230988]
[24.18819046 115.00076294]
[9.25837898 116.45015717]
[-4.90237284 111.50312805]
[-15.68183422 101.07225037]
[-21.09151840 87.08171082]
[-20.13350105 72.11233521]
[-12.98450661 58.92552567]
[-0.96331155 49.95385742]
[13.71253681 46.85232544]
[28.33301926 50.19177246]
[18.88894463 38.53804016]
[9.44487190 26.88430595]
[0.00079842 15.23057365]
[-9.44327545 3.57684183]
[-30.91197777 -2.70497537]
[-33.88829041 -24.11488533]
[-44.31869888 -34.89480209]
[-54.74910355 -45.67472076]
[-65.17951202 -56.45463943]
[-75.60991669 -67.23455811]
[-86.04032135 -78.01447296]
[-96.47072601 -88.79438782]
[-111.62731934 -93.33182526]
[-114.91686249 -107.85863495]
[-125.34726715 -118.63855743]
[-135.77767944 -129.41847229]
[-146.30770874 -124.97085571]
[-157.66862488 -123.98033905]
[-168.75730896 -126.52656555]
[-178.50212097 -132.34658813]
[-185.96650696 -140.86187744]
[-190.43901062 -151.23580933]
[-191.50100708 -162.45590210]
[-189.06593323 -173.43251038]
[-183.38597107 -183.10476685]
[-192.83003235 -194.75849915]
[-202.27410889 -206.41223145]
[-211.71818542 -218.06596375]
[-221.16226196 -229.71969604]
[-238.48147583 -235.86845398]
[-240.63790894 -253.25117493]
[-250.33570862 -264.69461060]
[-263.84393311 -264.25787354]
[-274.96133423 -271.59484863]
[-279.72943115 -283.82330322]
[-276.60696411 -296.37072754]
[-286.05102539 -308.02444458]
[-295.49508667 -319.67819214]
[-304.93917847 -331.33190918]
[-314.38323975 -342.98565674]
[-323.82733154 -354.63937378]
[-333.27139282 -366.29312134]
[-342.71545410 -377.94683838]
[-357.38534546 -386.44570923]
[-353.27966309 -402.89501953]
[-336.33663940 -403.50338745]
[-331.06173706 -387.39093018]
[-321.61764526 -375.73718262]
[-312.17358398 -364.08346558]
[-302.72952271 -352.42971802]
[-293.28543091 -340.77600098]
[-283.84136963 -329.12225342]
[-274.39727783 -317.46853638]
[-264.95321655 -305.81478882]
[-248.20080566 -304.80441284]
[-237.11584473 -291.75814819]
[-238.89225769 -274.39242554]
[-229.19445801 -262.94897461]
[-217.12213135 -261.62255859]
[-208.95187378 -252.10049438]
[-209.50852966 -239.16377258]
[-200.06445312 -227.51004028]
[-190.62037659 -215.85630798]
[-181.17630005 -204.20257568]
[-171.73223877 -192.54884338]
[-153.36119080 -196.56376648]
[-135.39059448 -190.75752258]
[-122.73406219 -176.63233948]
[-118.89515686 -157.97656250]
[-124.99775696 -139.84887695]
[-114.56735229 -129.06895447]
[-104.13694763 -118.28903961]
[-89.72640991 -114.52265930]
[-85.69081116 -99.22480011]
[-75.26040649 -88.44487762]
[-64.82999420 -77.66496277]
[-54.39959335 -66.88504028]
[-43.96918488 -56.10512543]
[-33.53878021 -45.32520676]
[-23.10837364 -34.54529190]
[-15.21797371 -36.12675858]
[-7.26213169 -34.39625549]
[-0.58827549 -29.56943130]
[3.64247680 -22.39268303]
[4.65701103 -14.02847290]
[2.21045709 -5.86723185]
[11.65453053 5.78650045]
[21.09860420 17.44023323]
[30.54267693 29.09396553]
[39.98675156 40.74769592]
[49.10976028 43.93701553]
[53.55787659 53.87881470]
[65.51644135 62.93379593]
[77.47501373 71.98877716]
[89.43357849 81.04375458]
[101.39214325 90.09873962]
[114.59661102 97.21505737]
[128.73532104 102.22474670]
[142.87402344 107.23444366]
[157.01272583 112.24413300]
[171.15142822 117.25382233]
[186.19342041 111.67546082]
[199.85835266 120.08078003]
[201.66365051 136.02192688]
[190.22445679 147.27023315]
[174.31593323 145.19696045]
[166.14173889 131.39253235]
[152.00303650 126.38283539]
[137.86433411 121.37314606]
[123.72562408 116.36345673]
[109.58692169 111.35375977]
[105.05943298 117.33304596]
[96.00444794 129.29161072]
[91.47695923 135.27088928]
[100.13301849 147.52131653]
[108.78907013 159.77172852]
[122.86737823 169.21829224]
[117.68724823 185.36148071]
[100.74093628 184.85267639]
[96.53865814 168.42778015]
[87.88259888 156.17736816]
[79.22653961 143.92695618]
[76.48738861 130.39396667]
[78.30489349 118.11367798]
[83.93825531 108.34117889]
[92.33716583 102.05730438]
[80.37859344 93.00232697]
[68.42002869 83.94734192]
[56.46146393 74.89236450]
[44.50289536 65.83737946]
[48.32236481 80.34295654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 101]
[12 100]
[13 99]
[14 98]
[15 97]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[25 83]
[26 82]
[27 81]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[42 69]
[43 68]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[103 141]
[104 140]
[105 139]
[106 138]
[107 137]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
[125 133]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
