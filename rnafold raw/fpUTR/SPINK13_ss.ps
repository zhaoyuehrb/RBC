%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCCCAUAUUCAGCCACCUCAUCCAGGCCUUAUCAAAGAAGAGUCUUAUAUGAGAUCAA\
) } def
/len { sequence length } bind def

/coor [
[27.10941315 210.27015686]
[18.24236298 209.33413696]
[10.06946182 205.83978271]
[3.30884695 200.11192322]
[-10.03923035 206.95507812]
[-23.38730812 213.79823303]
[-24.78620529 229.16204834]
[-34.28734589 241.31654358]
[-48.85895538 246.38327026]
[-63.85128403 242.74546814]
[-74.48033142 231.56391907]
[-77.35440826 216.40663147]
[-71.55641174 202.11024475]
[-58.93645477 193.23667908]
[-43.52152634 192.61744690]
[-30.23046684 200.45016479]
[-16.88239098 193.60699463]
[-3.53431296 186.76383972]
[-0.20510620 164.76008606]
[17.59789848 151.02494812]
[40.18644333 153.43707275]
[50.38903427 142.44129944]
[60.59162521 131.44551086]
[70.79421234 120.44973755]
[80.99681091 109.45395660]
[79.90769196 93.15909576]
[90.71383667 80.91425323]
[107.01766205 79.96875000]
[116.65947723 68.47808075]
[126.30129242 56.98741150]
[135.94309998 45.49674606]
[145.29545593 33.76927567]
[154.35252380 21.81228638]
[163.40959167 9.85529900]
[159.75373840 -5.34893608]
[166.77252197 -19.32286453]
[181.15188599 -25.46842575]
[196.10232544 -20.88387299]
[204.56471252 -7.73389244]
[202.54336548 7.77249813]
[190.99269104 18.31365395]
[175.36657715 18.91236496]
[166.30950928 30.86935234]
[157.25244141 42.82633972]
[155.66725159 50.34367371]
[147.43377686 55.13856125]
[137.79196167 66.62922668]
[128.15014648 78.11989594]
[118.50833130 89.61055756]
[121.10632324 102.24097443]
[115.91407013 114.04425049]
[104.84801483 120.66386414]
[91.99258423 119.65655518]
[81.78999329 130.65232849]
[71.58740234 141.64810181]
[61.38481140 152.64389038]
[51.18222046 163.63966370]
[54.86409760 171.97305298]
[55.92594147 180.99354553]
[54.28984833 189.89953613]
[50.11692047 197.90444946]
[43.79159164 204.30616760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[21 57]
[22 56]
[23 55]
[24 54]
[25 53]
[28 49]
[29 48]
[30 47]
[31 46]
[32 44]
[33 43]
[34 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
