%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGACUGGCCUGGCGCCGGCGGCGGCGGAGGGGGCGCCGCGGGCGGGCGAUGUGAGCGCGGCGCUCUGGACAGAGUACGCUUCAUGUCAGUAGAA\
) } def
/len { sequence length } bind def

/coor [
[95.60381317 124.64154053]
[88.66574097 137.94052124]
[81.72766876 151.23951721]
[74.78958893 164.53851318]
[79.76711273 179.53849792]
[72.60557556 193.62707520]
[57.55379486 198.44572449]
[43.54172516 191.13563538]
[38.88247681 176.03375244]
[46.34030151 162.09974670]
[61.49060059 157.60043335]
[68.42867279 144.30143738]
[75.36675262 131.00245667]
[82.30482483 117.70346069]
[76.24454498 107.88735199]
[75.23021698 96.39587402]
[61.71568680 89.88761902]
[48.20115280 83.37936401]
[34.68661880 76.87110901]
[18.89600372 77.85449982]
[10.78621769 65.36128235]
[-2.72831535 58.85302353]
[-16.24284935 52.34476471]
[-29.75738144 45.83650970]
[-43.27191544 39.32825470]
[-56.78644562 32.81999969]
[-72.57706451 33.80339432]
[-80.68685150 21.31017113]
[-95.51959991 26.76590919]
[-109.83047485 20.05961418]
[-115.12908936 5.17001104]
[-108.27185822 -9.06916142]
[-93.32707214 -14.21005535]
[-79.16119385 -7.20266914]
[-74.17859650 7.79563856]
[-59.35462952 6.34672832]
[-50.27819061 19.30546570]
[-36.76365662 25.81372070]
[-23.24912453 32.32197571]
[-9.73459244 38.83023453]
[3.77994061 45.33848953]
[17.29447365 51.84674454]
[32.11843872 50.39783478]
[41.19487381 63.35657120]
[54.70940781 69.86483002]
[68.22393799 76.37308502]
[81.73847198 82.88134003]
[103.59832764 75.22937775]
[122.37747192 88.78479767]
[137.18519592 86.39080048]
[151.95265198 83.75977325]
[166.67604065 80.89239502]
[181.39942932 78.02501678]
[196.12281799 75.15763855]
[210.84619141 72.29025269]
[225.56958008 69.42287445]
[240.29296875 66.55549622]
[255.01635742 63.68811798]
[263.01681519 58.89383698]
[270.25720215 60.97275162]
[285.06491089 58.57875443]
[299.87265015 56.18475342]
[308.13677979 46.12307739]
[320.65167236 44.52039337]
[330.53140259 51.70145798]
[345.40823364 49.78329849]
[360.28509521 47.86514282]
[375.16195679 45.94698334]
[390.03878784 44.02882767]
[402.74038696 33.65571594]
[417.97656250 39.72128677]
[420.07363892 55.98579788]
[406.87432861 65.71771240]
[391.95693970 58.90567780]
[377.08010864 60.82383347]
[362.20324707 62.74199295]
[347.32641602 64.66014862]
[332.44955444 66.57830811]
[319.21102905 77.97500610]
[302.26666260 70.99248505]
[287.45892334 73.38648224]
[272.65118408 75.78047943]
[257.88372803 78.41150665]
[243.16035461 81.27888489]
[228.43696594 84.14626312]
[213.71357727 87.01364136]
[198.99018860 89.88101959]
[184.26679993 92.74840546]
[169.54341125 95.61578369]
[154.82002258 98.48316193]
[148.74313354 102.93473053]
[139.57919312 101.19852448]
[124.77146912 103.59252930]
[122.94367981 110.00596619]
[119.48728943 115.70915222]
[114.64763641 120.29725647]
[108.76824951 123.44460297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[16 47]
[17 46]
[18 45]
[19 44]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[28 35]
[49 93]
[50 92]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[60 82]
[61 81]
[62 80]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
