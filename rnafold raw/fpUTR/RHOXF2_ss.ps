%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCACAGCAAAUAGCGGGAAGCAGAAAAGCAAGAGAGGAGGUCUCUAAGUGGAUACACUGUUGCUGAGUCUAGACACCAGAAGAACGUUGCAGGCGGCGACUCACAGUUCUAGCACUGCCUAGGAGAGCGUGGUGGCCCCAGCUCAGAAUCUGCAGAAGUGCACAGCUCCAUCCACACCACUCAGGGU\
) } def
/len { sequence length } bind def

/coor [
[109.85955048 238.41191101]
[112.36683655 219.19308472]
[112.61354828 204.19511414]
[112.86026001 189.19712830]
[113.10697174 174.19915771]
[105.79110718 172.54743958]
[95.61460876 183.56738281]
[91.15938568 169.24400330]
[83.84352875 167.59228516]
[77.62250519 181.24140930]
[81.87076569 196.71176147]
[72.30822754 209.59342957]
[56.27045059 210.00471497]
[46.06023788 197.63009644]
[49.50999832 181.96232605]
[63.97336960 175.02038574]
[70.19438934 161.37126160]
[64.29783630 156.73654175]
[55.02839279 168.52964783]
[41.10427475 174.10807800]
[43.23528671 159.26019287]
[52.50473022 147.46708679]
[46.60817719 142.83236694]
[34.81507111 152.10180664]
[33.18397903 167.82170105]
[20.86248589 177.71899414]
[5.16071558 175.92179871]
[-4.60575151 163.49635315]
[-2.64264274 147.81445312]
[9.88536453 138.17990112]
[25.54562569 140.30870056]
[37.33873367 131.03926086]
[30.89376450 117.49369049]
[24.44938469 103.94931793]
[9.81766415 107.25276184]
[-4.81405735 110.55620575]
[-19.44577789 113.85964966]
[-34.07749939 117.16309357]
[-43.82601547 129.90460205]
[-59.86807632 130.08303833]
[-69.89758301 117.56151581]
[-66.22076416 101.94548035]
[-51.65815353 95.21421051]
[-37.38094330 102.53137207]
[-22.74922180 99.22792816]
[-8.11749935 95.92448425]
[6.51422167 92.62104034]
[21.14594269 89.31759644]
[51.70294571 54.09573364]
[90.10072327 47.23109818]
[117.35243225 63.13258362]
[126.12924194 50.96839142]
[134.90605164 38.80419540]
[143.68286133 26.64000320]
[152.45967102 14.47581005]
[161.23648071 2.31161714]
[155.73797607 -13.67549229]
[160.79571533 -29.63331413]
[174.23013306 -39.33982086]
[190.63682556 -39.13437653]
[199.21237183 -51.44128036]
[207.78793335 -63.74818420]
[216.36347961 -76.05508423]
[218.70828247 -84.90147400]
[225.18267822 -88.49230194]
[233.95948792 -100.65650177]
[228.69245911 -113.40463257]
[230.40312195 -126.98234558]
[238.53788757 -137.85218811]
[250.88363647 -143.23564148]
[264.16888428 -141.82295227]
[273.14456177 -153.84115601]
[282.12026978 -165.85934448]
[284.75476074 -174.62382507]
[291.34375000 -177.99977112]
[291.77239990 -182.35949707]
[293.40994263 -185.98480225]
[295.87399292 -188.58422852]
[298.72653198 -190.02169800]
[301.52999878 -190.32109070]
[311.46261597 -201.56132507]
[321.39526367 -212.80155945]
[331.32788086 -224.04179382]
[324.75570679 -235.78689575]
[322.13153076 -248.96420288]
[323.69754028 -262.28573608]
[329.28701782 -274.45382690]
[338.34197998 -284.28750610]
[349.96896362 -290.83724976]
[363.02697754 -293.47640991]
[376.23965454 -291.96142578]
[388.31991577 -286.45401001]
[398.61688232 -297.36148071]
[402.46389771 -312.70785522]
[416.82699585 -316.65127563]
[427.12393188 -327.55874634]
[430.74786377 -335.96255493]
[437.68106079 -338.55917358]
[448.15600586 -349.29580688]
[458.63098145 -360.03244019]
[462.72988892 -375.31347656]
[477.15588379 -379.02014160]
[487.63085938 -389.75680542]
[491.39251709 -398.09985352]
[498.36749268 -400.58209229]
[509.01760864 -411.14498901]
[519.66772461 -421.70788574]
[519.01208496 -440.62829590]
[532.15637207 -453.80648804]
[550.44079590 -453.21978760]
[560.73773193 -464.12725830]
[571.03466797 -475.03472900]
[581.33166504 -485.94219971]
[591.62860107 -496.84967041]
[601.92553711 -507.75714111]
[601.22021484 -523.54571533]
[611.94714355 -535.15203857]
[627.74230957 -535.69042969]
[639.23461914 -524.84136963]
[639.60595703 -509.04144287]
[628.63598633 -497.66445923]
[612.83300781 -497.46020508]
[602.53607178 -486.55273438]
[592.23913574 -475.64526367]
[581.94213867 -464.73779297]
[571.64520264 -453.83032227]
[561.34826660 -442.92285156]
[564.14288330 -431.84088135]
[561.20294189 -420.67245483]
[553.14868164 -412.22903442]
[541.90246582 -408.69375610]
[530.23065186 -411.05776978]
[519.58050537 -400.49487305]
[508.93038940 -389.93197632]
[498.36749268 -379.28182983]
[487.89251709 -368.54519653]
[484.54284668 -354.03213501]
[469.36761475 -349.55749512]
[458.89266968 -338.82086182]
[448.41769409 -328.08422852]
[438.03140259 -317.26181030]
[427.73446655 -306.35433960]
[424.62393188 -291.78814697]
[409.52435303 -287.06451416]
[399.22738647 -276.15704346]
[406.39355469 -261.14315796]
[407.25247192 -244.49211121]
[401.64453125 -228.75135803]
[390.40161133 -216.33982849]
[375.22384644 -209.17634583]
[358.42248535 -208.38291931]
[342.56811523 -214.10917664]
[332.63549805 -202.86894226]
[322.70288086 -191.62869263]
[312.77023315 -180.38845825]
[303.21267700 -168.82762146]
[294.13845825 -156.88365173]
[285.16275024 -144.86546326]
[276.18707275 -132.84725952]
[281.55453491 -117.34204102]
[276.57846069 -101.53260040]
[263.02899170 -91.70179749]
[246.12367249 -91.87968445]
[237.34686279 -79.71549225]
[228.67039490 -67.47953033]
[220.09483337 -55.17263031]
[211.51928711 -42.86572647]
[202.94372559 -30.55882263]
[208.47277832 -18.39646149]
[207.25607300 -4.98308420]
[199.50518799 6.16374350]
[187.15922546 12.06778145]
[173.40068054 11.08842754]
[164.62387085 23.25262070]
[155.84706116 35.41681290]
[147.07025146 47.58100891]
[138.29344177 59.74520111]
[129.51663208 71.90939331]
[138.60966492 76.76647186]
[146.82557678 84.33853149]
[153.40028381 94.43559265]
[157.61968994 106.66225433]
[158.87284851 120.43246460]
[156.70075989 134.99758911]
[150.83723450 149.48651123]
[141.23936462 162.95562744]
[128.10493469 174.44587708]
[127.85823059 189.44384766]
[127.61151886 204.44181824]
[127.36480713 219.43978882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 190]
[3 189]
[4 188]
[5 187]
[9 17]
[10 16]
[23 32]
[24 31]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[51 178]
[52 177]
[53 176]
[54 175]
[55 174]
[56 173]
[60 168]
[61 167]
[62 166]
[63 165]
[65 164]
[66 163]
[71 159]
[72 158]
[73 157]
[75 156]
[80 155]
[81 154]
[82 153]
[83 152]
[92 145]
[93 144]
[95 142]
[96 141]
[98 140]
[99 139]
[100 138]
[102 136]
[103 135]
[105 134]
[106 133]
[107 132]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
