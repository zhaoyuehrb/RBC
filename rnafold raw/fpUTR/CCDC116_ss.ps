%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCCUGUGCGGAGCAAGGCGGUGUUUCUGAGAGGAAUGCGCAGCUGAAGAGAGAGGUGGGCAGCAGGCCCGGUCACCUGCCAGGUGACCAC\
) } def
/len { sequence length } bind def

/coor [
[156.99880981 198.74084473]
[155.98638916 190.09475708]
[158.62515259 181.69897461]
[149.32891846 169.92698669]
[140.03266907 158.15499878]
[130.73641968 146.38301086]
[121.44017029 134.61100769]
[112.14392090 122.83901978]
[102.84767151 111.06703186]
[98.02227783 114.26266479]
[91.25721741 115.01020050]
[83.85198975 112.37143707]
[69.15256500 115.35922241]
[54.45314026 118.34701538]
[39.75371552 121.33480072]
[25.05429077 124.32259369]
[10.35486507 127.31037903]
[1.83951759 140.62445068]
[-13.61393261 143.93600464]
[-26.83722687 135.28038025]
[-29.98521996 119.79277802]
[-21.19026184 106.66173553]
[-5.67024755 103.67766571]
[7.36707544 112.61095428]
[22.06650162 109.62316895]
[36.76592636 106.63537598]
[51.46535110 103.64759064]
[66.16477966 100.65979767]
[80.86420441 97.67200470]
[65.88073730 98.37615204]
[52.70425415 91.20815277]
[45.15509415 78.24627686]
[45.42203522 63.24865341]
[53.42768478 50.56364059]
[66.85091400 43.86908722]
[81.79982758 45.10599899]
[93.94019318 53.91574097]
[99.75206757 67.74404907]
[97.55137634 82.57935333]
[101.99550629 68.25281525]
[106.43964386 53.92627716]
[103.13838196 38.45332336]
[114.29907990 28.58984756]
[118.74320984 14.26331043]
[115.44194794 -1.20964134]
[126.60264587 -11.07311726]
[131.04678345 -25.39965439]
[121.65154266 -37.74911118]
[121.34311676 -53.26312256]
[130.24011230 -65.97623444]
[144.92144775 -70.99999237]
[159.74183655 -66.40265656]
[169.00256348 -53.95200729]
[169.14266968 -38.43556595]
[160.10827637 -25.81971931]
[145.37332153 -20.95552063]
[140.92918396 -6.62898350]
[144.54832458 7.81923866]
[133.06974792 18.70744514]
[128.62561035 33.03398132]
[132.24475098 47.48220444]
[120.76618195 58.37041092]
[116.32204437 72.69694519]
[111.87791443 87.02348328]
[114.61965942 101.77078247]
[123.91590881 113.54277802]
[133.21215820 125.31476593]
[142.50840759 137.08676147]
[151.80465698 148.85874939]
[161.10090637 160.63073730]
[170.39715576 172.40272522]
[191.79853821 178.64915466]
[195.17367554 199.94374084]
[205.95603943 210.37162781]
[216.73838806 220.79951477]
[227.52073669 231.22740173]
[238.30310059 241.65528870]
[249.08544922 252.08317566]
[259.86779785 262.51104736]
[270.65017700 272.93893433]
[286.23907471 279.60394287]
[284.14999390 296.42868042]
[267.40444946 299.07879639]
[260.22229004 283.72131348]
[249.43992615 273.29342651]
[238.65756226 262.86553955]
[227.87521362 252.43763733]
[217.09284973 242.00975037]
[206.31050110 231.58186340]
[195.52815247 221.15397644]
[184.74578857 210.72608948]
[176.64225769 212.62503052]
[168.37664795 211.02740479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[39 64]
[40 63]
[41 62]
[43 60]
[44 59]
[46 57]
[47 56]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
