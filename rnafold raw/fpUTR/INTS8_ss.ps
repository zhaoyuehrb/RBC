%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUGGAUUGUGUGAGUUUCCGGGACGUUCGGAGGGUGGCCUCUCUCCCACCGGGUUCCGCAUACCCCAGGCACCGGCCCGCAUCCAAGUGUCAGGUUGGAGCCGGGAAGCGGCCCUGGUGGUAGCGGCGGCGGGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[25.92378426 214.32141113]
[32.68503952 227.71115112]
[33.98958969 242.65431213]
[29.65079689 257.01312256]
[20.28937721 268.73333740]
[7.24458790 276.13830566]
[-7.61736917 278.16864014]
[-22.17032433 274.53387451]
[-34.33231354 265.75399780]
[-42.36343002 253.08509827]
[-45.11472702 238.33958435]
[-42.19260788 223.62695312]
[-34.01388168 211.05076599]
[-47.91889191 216.67665100]
[-57.80971909 229.02502441]
[-72.50985718 226.62600708]
[-82.40068054 238.97438049]
[-97.10082245 236.57537842]
[-111.00583649 242.20126343]
[-124.91084290 247.82714844]
[-138.81585693 253.45303345]
[-152.72087097 259.07891846]
[-166.62588501 264.70480347]
[-180.53089905 270.33071899]
[-188.09085083 284.48086548]
[-203.89294434 287.25091553]
[-215.81518555 276.51589966]
[-214.71182251 260.51083374]
[-201.42927551 251.51342773]
[-186.15678406 256.42568970]
[-172.25177002 250.79980469]
[-158.34675598 245.17391968]
[-144.44174194 239.54801941]
[-130.53672791 233.92213440]
[-116.63172150 228.29624939]
[-102.72670746 222.67036438]
[-93.83045959 210.72439575]
[-78.13574219 212.72099304]
[-69.23950195 200.77503967]
[-53.54478073 202.77163696]
[-39.63976669 197.14575195]
[-36.81290817 191.77478027]
[-31.03210831 188.19465637]
[-23.50142860 187.98518372]
[-11.54286194 178.93020630]
[0.31552008 169.74441528]
[12.07228661 160.42892456]
[23.82905197 151.11343384]
[35.58581924 141.79792786]
[47.34258652 132.48243713]
[52.51290512 118.51400757]
[68.13438416 116.00801849]
[79.89115143 106.69252777]
[91.64791870 97.37702942]
[92.24109650 94.29945374]
[94.00289154 91.37923431]
[96.87324524 89.06295776]
[100.62305450 87.76699829]
[104.87026978 87.81473541]
[117.39923859 79.56700134]
[129.92819214 71.31927490]
[142.45716858 63.07153702]
[147.95823669 55.68031311]
[155.35317993 54.78376770]
[168.06030273 46.81325531]
[180.76742554 38.84274292]
[193.47454834 30.87222862]
[206.09335327 22.76261520]
[218.62231445 14.51488304]
[231.15127563 6.26715088]
[243.68023682 -1.98058188]
[256.20919800 -10.22831440]
[259.59515381 -22.72647095]
[270.26473999 -29.32821655]
[282.17208862 -26.93756866]
[294.87921143 -34.90808105]
[307.58633423 -42.87859726]
[316.11410522 -61.08805847]
[335.40490723 -61.14736938]
[347.74966431 -69.66834259]
[360.09442139 -78.18931580]
[372.43917847 -86.71028137]
[375.41275024 -102.00066376]
[388.05346680 -110.46627808]
[402.61218262 -107.53720856]
[414.95693970 -116.05818176]
[427.30169678 -124.57914734]
[439.64645386 -133.10011292]
[451.99121094 -141.62109375]
[458.95324707 -155.82815552]
[473.82287598 -156.69039917]
[480.36041260 -171.73010254]
[496.68237305 -173.31921387]
[505.99813843 -159.82298279]
[498.72445679 -145.12516785]
[482.34384155 -144.34564209]
[476.26480103 -130.74804688]
[460.51217651 -129.27633667]
[448.16741943 -120.75536346]
[435.82266235 -112.23439026]
[423.47790527 -103.71341705]
[411.13314819 -95.19245148]
[408.70928955 -80.54115295]
[396.31134033 -71.72382355]
[380.96014404 -74.36552429]
[368.61538696 -65.84455109]
[356.27062988 -57.32358170]
[343.92587280 -48.80261230]
[342.97375488 -38.53396606]
[336.35574341 -30.33938026]
[326.09686279 -27.11458588]
[315.55685425 -30.17147636]
[302.84973145 -22.20096207]
[290.14260864 -14.23044872]
[282.82489014 1.68369257]
[264.45693970 2.30064821]
[251.92796326 10.54838085]
[239.39900208 18.79611397]
[226.87004089 27.04384613]
[214.34107971 35.29158020]
[210.45358276 41.64582062]
[201.44505310 43.57934952]
[188.73794556 51.54986191]
[176.03082275 59.52037430]
[163.32369995 67.49089050]
[150.70489502 75.60050201]
[138.17593384 83.84823608]
[125.64696503 92.09597015]
[113.11800385 100.34369659]
[100.96340942 109.13379669]
[89.20664215 118.44929504]
[77.44987488 127.76478577]
[71.43863678 142.39952087]
[56.65808105 144.23921204]
[44.90131378 153.55470276]
[33.14454651 162.87019348]
[21.38778114 172.18568420]
[9.63101482 181.50119019]
[4.79984665 189.34667969]
[-2.48788071 190.88877869]
[-14.44644737 199.94375610]
[0.54250211 199.36808777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 41]
[14 40]
[16 38]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[44 141]
[45 140]
[46 138]
[47 137]
[48 136]
[49 135]
[50 134]
[52 132]
[53 131]
[54 130]
[59 129]
[60 128]
[61 127]
[62 126]
[64 125]
[65 124]
[66 123]
[67 122]
[68 120]
[69 119]
[70 118]
[71 117]
[72 116]
[75 114]
[76 113]
[77 112]
[79 108]
[80 107]
[81 106]
[82 105]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
