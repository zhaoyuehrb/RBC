%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAACAAUGCCGGGAGAGCAAAGCCGCUGAGAGUUUGUCCCGUUAGAUCCAGGCGUGAAGGACGGACUGUACUACAGGGAGCAGAUCCCCCUAGCUCAGUCGGAGGCGUUCCUAACGGAUCUUUUGGAGAAAGUCUGUGAGCGA\
) } def
/len { sequence length } bind def

/coor [
[139.18968201 431.34689331]
[126.24790955 423.76333618]
[116.03862000 412.77377319]
[109.42697906 399.30950928]
[106.97329712 384.51156616]
[108.88549805 369.63394165]
[115.00152588 355.93743896]
[124.80310822 344.58276367]
[137.45960999 336.53210449]
[151.89846802 332.46774292]
[166.89610291 332.73406982]
[181.18156433 337.30856323]
[193.54708862 345.80618286]
[187.58395386 332.04241943]
[181.62080383 318.27865601]
[175.65766907 304.51492310]
[169.69451904 290.75115967]
[157.53526306 282.14874268]
[159.14872742 266.41000366]
[153.18559265 252.64625549]
[141.83731079 250.82546997]
[132.70338440 243.65257263]
[128.15054321 232.83775330]
[129.43013000 221.05259705]
[136.33677673 211.27032471]
[130.97129822 197.26275635]
[125.60581970 183.25520325]
[120.08995819 169.30618286]
[114.42433929 155.41731262]
[108.75872040 141.52844238]
[103.09310150 127.63956451]
[97.42748260 113.75069427]
[60.68325043 105.46819305]
[48.51016617 96.70372009]
[36.33708191 87.93924713]
[24.16399384 79.17477417]
[11.99090862 70.41030121]
[-0.18217756 61.64582825]
[-12.35526371 52.88135529]
[-24.52834892 44.11688232]
[-36.70143509 35.35240936]
[-49.24031830 27.11976624]
[-62.12177658 19.43419456]
[-75.00323486 11.74862289]
[-87.88469696 4.06305218]
[-102.59400177 9.37062836]
[-117.25572968 3.93300915]
[-124.94706726 -9.68232727]
[-122.03639221 -25.04663658]
[-109.89804077 -34.90536118]
[-94.26336670 -34.60351181]
[-82.51459503 -24.28361320]
[-80.19912720 -8.81840706]
[-67.31766510 -1.13283610]
[-54.43620682 6.55273533]
[-41.55474472 14.23830605]
[-38.74800491 13.62806797]
[-35.52264786 14.13412571]
[-32.31827164 15.92474747]
[-29.62807655 19.00028419]
[-27.93696213 23.17932510]
[-15.76387691 31.94379616]
[-3.59079075 40.70827103]
[8.58229542 49.47274017]
[20.75538063 58.23721313]
[32.92846680 67.00168610]
[45.10155106 75.76615906]
[57.27463913 84.53063202]
[69.44772339 93.29510498]
[76.73860931 91.53642273]
[80.98307037 77.14945984]
[91.32038116 88.01905060]
[98.61126709 86.26036072]
[105.44986725 72.90995026]
[112.28846741 59.55953598]
[107.66768646 44.68384933]
[114.79318237 31.24204826]
[129.00335693 26.92850876]
[135.84194946 13.57809544]
[142.68055725 0.22768156]
[149.51914978 -13.12273216]
[145.98268127 -28.77115059]
[156.12422180 -41.20211411]
[172.16403198 -40.87965393]
[181.79776001 -28.05113411]
[177.63522339 -12.55749416]
[162.86956787 -6.28413153]
[156.03096008 7.06628180]
[149.19236755 20.41669655]
[142.35375977 33.76710892]
[147.15612793 47.81961060]
[140.41101074 61.45624924]
[125.63888550 66.39813995]
[118.80028534 79.74855042]
[111.96168518 93.09896088]
[111.31635284 108.08507538]
[116.98197174 121.97394562]
[122.64759064 135.86282349]
[128.31320190 149.75169373]
[133.97883606 163.64056396]
[140.16197205 170.46461487]
[139.61338806 177.88972473]
[144.97885132 191.89729309]
[150.34432983 205.90484619]
[167.89271545 212.89204407]
[174.71551514 230.16416931]
[166.94934082 246.68312073]
[172.91249084 260.44686890]
[185.49826050 270.03378296]
[183.45828247 284.78802490]
[189.42141724 298.55175781]
[195.38456726 312.31552124]
[201.34770203 326.07928467]
[207.31085205 339.84304810]
[214.90954590 345.43151855]
[216.78976440 353.62435913]
[227.50985718 364.11621094]
[238.22996521 374.60809326]
[248.95005798 385.09997559]
[259.67016602 395.59185791]
[268.05654907 399.39541626]
[270.50500488 406.42666626]
[280.99685669 417.14675903]
[291.48873901 427.86688232]
[301.98062134 438.58697510]
[312.47250366 449.30706787]
[327.87246704 456.39770508]
[325.32205200 473.15875244]
[308.51004028 475.34793091]
[301.75238037 459.79895020]
[291.26052856 449.07885742]
[280.76864624 438.35873413]
[270.27676392 427.63864136]
[259.78488159 416.91854858]
[249.17828369 406.31195068]
[238.45819092 395.82006836]
[227.73808289 385.32818604]
[217.01799011 374.83633423]
[206.29788208 364.34445190]
[209.80979919 378.92752075]
[208.97288513 393.90417480]
[203.85803223 408.00518799]
[194.89874268 420.03558350]
[182.85420227 428.97592163]
[168.74514771 434.06851196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 114]
[14 113]
[15 112]
[16 111]
[17 110]
[19 108]
[20 107]
[25 104]
[26 103]
[27 102]
[28 100]
[29 99]
[30 98]
[31 97]
[32 96]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[42 56]
[43 55]
[44 54]
[45 53]
[73 95]
[74 94]
[75 93]
[78 90]
[79 89]
[80 88]
[81 87]
[116 139]
[117 138]
[118 137]
[119 136]
[120 135]
[122 134]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
