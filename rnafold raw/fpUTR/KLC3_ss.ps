%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGGUCCCAGACGCCCGGCGCAGCGGGAGCGGCGGGGCGUGCCUGGCCUGCGGGACGCGACUGAUCGCAGUGGGGCGAAGCGGGGCCGGAGCCGCCCGCGGUCAGGAGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[138.65527344 105.41519165]
[123.67726135 106.22727203]
[108.69926453 107.03935242]
[93.73363495 108.05418396]
[78.78311157 109.27156067]
[63.83259583 110.48894501]
[48.88208008 111.70632172]
[33.93156052 112.92370605]
[27.29151344 126.70256805]
[14.72907448 135.25135803]
[-0.32562461 136.35699463]
[-13.82210732 129.82240295]
[-22.17933464 117.49266815]
[-37.12985229 118.71004486]
[-52.08037186 119.92742920]
[-67.03089142 121.14480591]
[-81.98140717 122.36219025]
[-96.93192291 123.57956696]
[-110.05862427 132.41134644]
[-123.37185669 125.73250580]
[-138.32237244 126.94988251]
[-146.75178528 130.80963135]
[-153.69331360 127.99219513]
[-162.22413635 131.62225342]
[-169.08682251 128.61788940]
[-184.08132935 129.02407837]
[-197.76541138 138.06164551]
[-212.31124878 130.48863220]
[-212.75532532 114.09549713]
[-198.64082336 105.74609375]
[-184.48751831 114.02957153]
[-169.49301147 113.62338257]
[-154.50538635 113.01419067]
[-139.53976440 111.99936676]
[-124.58924103 110.78198242]
[-112.53190613 102.03727722]
[-98.14930725 108.62905121]
[-83.19878387 107.41166687]
[-68.24826813 106.19429016]
[-53.29775238 104.97690582]
[-38.34723282 103.75952911]
[-23.39671516 102.54214478]
[-17.14431000 89.02278900]
[-4.88280344 80.39079285]
[10.15244389 79.04627991]
[23.93243408 85.45008087]
[32.71417999 97.97318268]
[47.66469574 96.75580597]
[62.61521530 95.53842163]
[77.56573486 94.32104492]
[92.51625061 93.10366058]
[99.76455688 89.31892395]
[107.88717651 92.06135559]
[122.86518097 91.24926758]
[137.84318542 90.43718719]
[147.12120056 74.98904419]
[163.63177490 68.16648865]
[180.80676270 72.48320770]
[191.93240356 86.06079102]
[206.84448242 84.43900299]
[216.73443604 72.40460968]
[231.88049316 70.97232056]
[243.29249573 80.47504425]
[258.20455933 78.85325623]
[273.11663818 77.23146820]
[288.02871704 75.60968781]
[302.94076538 73.98789978]
[317.85284424 72.36611176]
[332.76492310 70.74433136]
[347.67697144 69.12254333]
[351.31353760 66.22229004]
[355.29345703 64.85766602]
[359.06301880 64.93795776]
[362.16207886 66.19299316]
[364.27676392 68.22252655]
[379.27676392 68.22252655]
[394.27676392 68.22252655]
[409.27676392 68.22252655]
[424.27676392 68.22252655]
[433.97265625 54.44100952]
[449.79989624 49.15954971]
[465.51431274 54.25487900]
[475.03839111 67.55004883]
[490.03289795 67.14385986]
[503.71697998 58.10628891]
[518.26281738 65.67929840]
[518.70690918 82.07243347]
[504.59237671 90.42183685]
[490.43908691 82.13835907]
[475.44458008 82.54454803]
[468.89764404 94.26400757]
[457.30438232 101.24504089]
[443.66638184 101.55436707]
[431.57742310 95.00257874]
[424.27676392 83.22252655]
[409.27676392 83.22252655]
[394.27676392 83.22252655]
[379.27676392 83.22252655]
[364.27676392 83.22252655]
[349.29876709 84.03461456]
[334.38668823 85.65640259]
[319.47463989 87.27818298]
[304.56256104 88.89997101]
[289.65048218 90.52175140]
[274.73843384 92.14353943]
[259.82635498 93.76532745]
[244.91427612 95.38710785]
[235.81188965 107.12091064]
[220.71203613 108.97805786]
[208.46626282 99.35107422]
[193.55419922 100.97285461]
[189.07830811 112.41773987]
[180.07188416 120.88501740]
[168.23445129 124.69130707]
[155.83677673 123.04093170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[20 35]
[21 34]
[23 33]
[25 32]
[26 31]
[59 111]
[60 110]
[63 107]
[64 106]
[65 105]
[66 104]
[67 103]
[68 102]
[69 101]
[70 100]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
