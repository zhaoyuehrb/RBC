%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUCUCUGCCUUGGCUGCCAGGCAGGGAAGGGCCCCCUGUCCAGUGGACACGUGACCCACGUGACCUUACCUAUCAUUGGAG\
) } def
/len { sequence length } bind def

/coor [
[86.20014954 127.83773804]
[72.49872589 114.45876312]
[57.92951202 118.02778625]
[43.36029816 121.59681702]
[28.79108047 125.16584778]
[14.29030514 129.00349426]
[-0.13707969 133.10842896]
[-14.56446457 137.21337891]
[-28.99184990 141.31832886]
[-43.41923523 145.42326355]
[-57.84661865 149.52821350]
[-72.27400208 153.63316345]
[-86.70138550 157.73809814]
[-94.31483459 163.22084045]
[-101.73808289 161.71757507]
[-116.30729675 165.28660583]
[-130.25291443 174.92797852]
[-143.37803650 164.19636536]
[-136.69920349 148.61337280]
[-119.87632751 150.71739197]
[-105.30710602 147.14836121]
[-90.80633545 143.31071472]
[-76.37894440 139.20576477]
[-61.95156479 135.10083008]
[-47.52417755 130.99588013]
[-33.09679413 126.89093781]
[-18.66940880 122.78599548]
[-4.24202442 118.68104553]
[10.18535995 114.57610321]
[15.89322090 109.59767151]
[25.22205353 110.59662628]
[39.79126740 107.02760315]
[54.36048508 103.45857239]
[68.92970276 99.88954926]
[70.85375977 89.23558807]
[76.31654358 79.88856506]
[84.65480042 72.98332977]
[94.85615540 69.35825348]
[105.68204498 69.45347595]
[115.81805420 73.25743103]
[124.03355408 80.30827332]
[129.33108521 89.74994659]
[144.26708984 88.36592102]
[159.20310974 86.98189545]
[174.13911438 85.59786987]
[189.07513428 84.21384430]
[204.01113892 82.82981873]
[218.94715881 81.44579315]
[233.88316345 80.06176758]
[251.86326599 61.80773544]
[275.77536011 69.18255615]
[289.44070435 62.99720764]
[303.10601807 56.81186295]
[316.77136230 50.62651825]
[330.43670654 44.44117355]
[344.10205078 38.25582886]
[356.03860474 26.21611023]
[370.91217041 34.35326004]
[367.21044922 50.89815521]
[350.28738403 51.92116928]
[336.62207031 58.10651398]
[322.95672607 64.29185486]
[309.29138184 70.47720337]
[295.62603760 76.66254425]
[281.96069336 82.84789276]
[281.91116333 89.01042175]
[280.27758789 94.98078156]
[277.15560913 100.35692596]
[272.74157715 104.77317047]
[267.32019043 107.92504120]
[261.24621582 109.59024811]
[254.92127991 109.64431000]
[248.76728821 108.06974792]
[243.19827271 104.95819092]
[238.59259033 100.50514984]
[235.26719666 94.99777985]
[220.33117676 96.38180542]
[205.39517212 97.76583099]
[190.45915222 99.14985657]
[175.52314758 100.53388214]
[160.58712769 101.91790771]
[145.65112305 103.30193329]
[130.71510315 104.68595886]
[122.13349915 121.80559540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[5 31]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[15 21]
[16 20]
[42 83]
[43 82]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
