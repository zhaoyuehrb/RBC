%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAGAGAGACUCCUGCGGCCCAGAUUCUUCAGGAUUCUCCGUGAAGGGAUAACCAGGGGAAGCACCAAG\
) } def
/len { sequence length } bind def

/coor [
[80.23639679 338.14047241]
[65.84654236 333.60232544]
[53.12208939 325.49365234]
[42.93060303 314.36730957]
[35.96696091 300.98184204]
[32.70595551 286.24996948]
[33.36992645 271.17611694]
[37.91360092 256.78799438]
[46.02719116 244.06668091]
[57.15748978 233.87948608]
[70.54562378 226.92102051]
[85.27876282 223.66569519]
[85.93305206 208.67997742]
[86.58734131 193.69424438]
[87.24163055 178.70852661]
[87.89591980 163.72280884]
[88.55021667 148.73707581]
[85.60272980 141.69938660]
[89.57406616 133.11614990]
[78.72354126 127.43523407]
[70.52082062 118.34005737]
[65.98671722 106.96250916]
[65.68549347 94.71849060]
[69.65462494 83.13174438]
[77.40016937 73.64421082]
[87.95821381 67.43659973]
[100.01482391 65.28142548]
[103.26142120 50.63698578]
[106.50801849 35.99254227]
[109.75460815 21.34810448]
[113.00120544 6.70366383]
[116.24779510 -7.94077635]
[119.49439240 -22.58521652]
[122.42074585 -37.29699707]
[125.02546692 -52.06911087]
[127.63019562 -66.84122467]
[124.42614746 -83.48966217]
[139.53698730 -91.17723846]
[151.10722351 -78.78507233]
[142.40231323 -64.23650360]
[139.79759216 -49.46438980]
[137.19285583 -34.69227219]
[139.19651794 -27.33005905]
[134.13882446 -19.33862305]
[130.89224243 -4.69418192]
[127.64564514 9.95025826]
[124.39904785 24.59469795]
[121.15245819 39.23913956]
[117.90586090 53.88357925]
[114.65926361 68.52801514]
[128.25976562 79.83157349]
[134.52807617 96.36797333]
[131.83784485 113.84671783]
[120.88705444 127.73284149]
[104.51698303 134.42349243]
[103.53593445 149.39137268]
[102.88164520 164.37709045]
[102.22735596 179.36282349]
[101.57306671 194.34854126]
[100.91876984 209.33425903]
[100.26448059 224.31999207]
[114.65783691 228.84700012]
[127.38854980 236.94584656]
[137.58862305 248.06433105]
[144.56260681 261.44439697]
[147.83497620 276.17376709]
[147.18264771 291.24813843]
[142.65008545 305.63973999]
[134.54632568 318.36730957]
[123.42389679 328.56311035]
[110.04114532 335.53192139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[19 55]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 42]
[35 41]
[36 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
