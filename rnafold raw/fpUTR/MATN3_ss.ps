%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCCGAGCCUCGCGUGGGCUCCUGGCCCCCGACGGACACCACCAGGCCCACGGAGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[-14.74834538 318.35998535]
[-21.17455864 332.07064819]
[-31.70622253 342.95013428]
[-45.20093918 349.81826782]
[-60.19490433 351.93008423]
[-75.06168365 349.05645752]
[-88.18864441 341.50918579]
[-98.15186310 330.10684204]
[-103.87061310 316.08633423]
[-104.72456360 300.96847534]
[-100.62107849 286.39315796]
[-92.00528717 273.94137573]
[-79.81175232 264.96383667]
[-65.36315155 260.43432617]
[-50.22674561 260.84417725]
[-36.04442596 266.14895630]
[-26.52852631 254.55378723]
[-17.01262665 242.95863342]
[-7.49672794 231.36346436]
[2.01917124 219.76831055]
[11.53507042 208.17315674]
[21.05097008 196.57800293]
[30.56686974 184.98284912]
[40.08276749 173.38768005]
[41.41672516 154.32926941]
[59.78813553 146.68167114]
[68.12168884 134.20962524]
[76.45523834 121.73757935]
[84.78879547 109.26553345]
[82.20747375 99.18958282]
[85.69409180 89.39001465]
[94.05957794 83.20886230]
[104.45098114 82.75414276]
[103.09216309 67.23668671]
[112.90781403 55.61310959]
[127.70970917 54.41330719]
[137.22560120 42.81814957]
[142.59996033 26.73857689]
[159.53890991 27.45163155]
[163.54289246 43.92599106]
[148.82075500 52.33404922]
[139.30485535 63.92920685]
[141.01582336 78.68075562]
[131.53051758 90.57544708]
[116.04614258 92.27004242]
[114.30590820 110.60998535]
[97.26084137 117.59909058]
[88.92728424 130.07113647]
[80.59373474 142.54318237]
[72.26017761 155.01521301]
[75.07266998 166.00723267]
[71.24028778 176.44793701]
[62.35010529 182.75041199]
[51.67792511 182.90357971]
[42.16202545 194.49874878]
[32.64612579 206.09390259]
[23.13022804 217.68905640]
[13.61432838 229.28421021]
[4.09842873 240.87936401]
[-5.41747046 252.47453308]
[-14.93336964 264.06967163]
[-24.44926834 275.66485596]
[-16.47959709 288.53973389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[26 50]
[27 49]
[28 48]
[29 47]
[33 45]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
