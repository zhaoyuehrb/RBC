%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGUUCCGCCCGCGCGUCACGUGACCCCAGCGCCUACUUGGGCUGAGGAGCCGCCGCGUCCCCUCGCCGAGUCCCCUCGCCAGAUUCCCUCCGUCGCCGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[105.90916443 255.19488525]
[105.90916443 240.19488525]
[105.90916443 225.19488525]
[105.90916443 210.19488525]
[105.90916443 195.19488525]
[105.90916443 180.19488525]
[97.93257141 173.50411987]
[94.97660065 163.29055786]
[98.28132629 152.95156860]
[106.96037292 146.07049561]
[107.84068298 131.09634399]
[86.53107452 126.58663177]
[74.48801422 110.36676025]
[76.09123230 91.81214905]
[63.98191452 82.95977783]
[51.87260056 74.10740662]
[39.76328278 65.25503540]
[27.65396690 56.40266418]
[16.82248497 58.71654510]
[6.74490833 54.68439102]
[0.74910581 45.90343475]
[0.66603225 35.49260712]
[-10.90288734 25.94482613]
[-19.66077614 22.82600403]
[-22.66590881 15.94297028]
[-38.21899033 16.80286407]
[-49.52141953 6.61906528]
[-50.24534607 -8.21372032]
[-61.52899170 -18.09700775]
[-72.95650482 -27.81358719]
[-84.52542877 -37.36136627]
[-96.09434509 -46.90914536]
[-107.66326141 -56.45692444]
[-116.42115021 -59.57574844]
[-119.42628479 -66.45877838]
[-130.70993042 -76.34207153]
[-146.74848938 -76.72200775]
[-156.33616638 -89.58496857]
[-152.11813354 -105.06359100]
[-137.33009338 -111.28400421]
[-123.31617737 -103.47442627]
[-120.82664490 -87.62570953]
[-109.54299927 -77.74242401]
[-98.11548615 -68.02584839]
[-86.54656219 -58.47806549]
[-74.97764587 -48.93028641]
[-63.40872574 -39.38250732]
[-56.13206863 -37.52314758]
[-51.64570618 -29.38065147]
[-40.36206055 -19.49736404]
[-25.56318092 -20.73380280]
[-13.97916985 -10.87148285]
[-12.78262138 4.65932560]
[-1.35510802 14.37590599]
[10.21381187 23.92368507]
[29.38745117 25.54683304]
[36.50633621 44.29335022]
[48.61565399 53.14572144]
[60.72496796 61.99809265]
[72.83428955 70.85046387]
[84.94360352 79.70283508]
[97.66673279 73.12977600]
[112.85652924 74.37341309]
[125.82463837 84.01764679]
[132.06948853 99.91750336]
[146.36230469 95.36609650]
[157.16416931 83.80622864]
[171.63911438 87.31695557]
[185.93193054 82.76554871]
[193.29809570 77.09393311]
[200.71157837 78.29700470]
[215.13185120 74.16714478]
[229.55212402 70.03729248]
[240.55245972 57.87487030]
[256.52658081 61.58431244]
[261.04165649 77.34966278]
[249.45297241 88.95287323]
[233.68197632 84.45756531]
[219.26170349 88.58741760]
[204.84143066 92.71727753]
[190.48333740 97.05837250]
[176.19050598 101.60977936]
[166.41098022 112.84410095]
[150.91371155 109.65892029]
[136.62089539 114.21032715]
[151.34608459 117.06843567]
[166.28334045 115.69790649]
[180.25149536 121.16513824]
[190.28967285 132.31121826]
[194.27003479 146.77346802]
[191.34886169 161.48628235]
[182.14535522 173.33091736]
[168.61042786 179.79664612]
[153.61311340 179.51287842]
[140.33244324 172.53979492]
[131.58358765 160.35548401]
[129.22126770 145.53974915]
[122.81482697 131.97665405]
[121.93451691 146.95080566]
[131.86167908 164.37382507]
[120.90916443 180.19488525]
[120.90916443 195.19488525]
[120.90916443 210.19488525]
[120.90916443 225.19488525]
[120.90916443 240.19488525]
[120.90916443 255.19488525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 106]
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[10 99]
[11 98]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[22 55]
[23 54]
[25 53]
[28 50]
[29 49]
[30 47]
[31 46]
[32 45]
[33 44]
[35 43]
[36 42]
[65 85]
[66 84]
[68 82]
[69 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
