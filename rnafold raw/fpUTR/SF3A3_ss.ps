%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCUUAAGUCCCGGGGCACUUCCGGCACUCGCGGAACUUUGGUGCAGCCUGAUGCGCAACGUGGGGACUCAGGCGCGCUGGGCGGCAGGAGUUGCUUCCGGCCGUGUUGGUGGUCUGAAUUGAGAAGCCGCGACUAAGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 363.17617798]
[92.50000000 347.33706665]
[92.50000000 332.33706665]
[92.50000000 317.33706665]
[92.50000000 302.33706665]
[92.50000000 287.33706665]
[92.50000000 272.33706665]
[84.76270294 259.60977173]
[92.50000000 245.80961609]
[92.50000000 230.80961609]
[92.50000000 215.80961609]
[92.50000000 200.80961609]
[84.76270294 188.08233643]
[92.50000000 174.28216553]
[92.50000000 159.28216553]
[92.50000000 144.28216553]
[71.08949280 134.37066650]
[57.65701675 114.97438049]
[42.87871170 117.54377747]
[28.10041237 120.11317444]
[13.32211018 122.68257141]
[-1.45619130 125.25196838]
[-16.07496262 128.61225891]
[-30.49190903 132.75370789]
[-44.90885544 136.89517212]
[-59.32580185 141.03662109]
[-65.51360321 155.39785767]
[-79.50809479 162.37554932]
[-94.70152283 158.67501831]
[-103.92000580 146.04356384]
[-102.81085205 130.44537354]
[-91.89778137 119.24541473]
[-76.33361053 117.73198700]
[-63.46725845 126.61967468]
[-49.05031204 122.47821808]
[-34.63336563 118.33676910]
[-20.21641731 114.19531250]
[-31.60711861 104.43560028]
[-31.29893494 89.43876648]
[-19.51689339 80.15526581]
[-4.86405706 83.36375427]
[1.96030247 96.72145081]
[-4.02558851 110.47367096]
[10.75271320 107.90427399]
[25.53101540 105.33487701]
[40.30931473 102.76548004]
[55.08761978 100.19608307]
[56.64242554 88.28328705]
[61.29956055 77.20884705]
[68.72579193 67.76516724]
[60.22526932 55.40631866]
[51.72474289 43.04747391]
[37.52922058 36.06193542]
[36.69159317 21.19090271]
[28.19106674 8.83205795]
[19.69054031 -3.52678680]
[4.24009371 -7.84688759]
[-1.88257611 -22.67565918]
[6.01931858 -36.63773727]
[21.88412094 -39.02260971]
[33.54170990 -28.00080681]
[32.04938507 -12.02731323]
[40.54991150 0.33153200]
[49.05043793 12.69037724]
[62.63794327 18.79192734]
[64.08358765 34.54694748]
[72.58411407 46.90579224]
[81.08464050 59.26463699]
[98.96830750 55.09904099]
[117.02442932 58.43884659]
[132.23483276 68.72579193]
[144.59367371 60.22526932]
[156.95252991 51.72474289]
[169.31137085 43.22421646]
[181.67021179 34.72369003]
[194.02905273 26.22316360]
[199.37550354 18.72553825]
[206.74652100 17.67605591]
[219.28541565 9.44341183]
[231.82429504 1.21076715]
[244.36317444 -7.02187729]
[256.90206909 -15.25452137]
[264.75311279 -31.87402534]
[282.26654053 -32.27763748]
[294.62536621 -40.77816391]
[306.98422241 -49.27869034]
[319.34304810 -57.77921677]
[331.70190430 -66.27973938]
[338.68743896 -80.47526550]
[353.55847168 -81.31288910]
[365.91732788 -89.81341553]
[378.27615356 -98.31394196]
[390.63500977 -106.81446838]
[397.19741821 -121.84333801]
[413.52200317 -123.40542603]
[422.81542969 -109.89379120]
[415.51742554 -95.20804596]
[399.13552856 -94.45562744]
[386.77670288 -85.95510101]
[374.41784668 -77.45457458]
[362.05899048 -68.95404816]
[355.95745850 -55.36653900]
[340.20242310 -53.92089844]
[327.84359741 -45.42037201]
[315.48474121 -36.91984558]
[303.12588501 -28.41931915]
[290.76705933 -19.91879272]
[288.23742676 -8.04333591]
[277.94781494 -0.86921591]
[265.13470459 -2.71563935]
[252.59580994 5.51700497]
[240.05693054 13.74964905]
[227.51805115 21.98229408]
[214.97917175 30.21493721]
[202.52958679 38.58200836]
[190.17074585 47.08253479]
[177.81188965 55.58306122]
[165.45304871 64.08358765]
[153.09420776 72.58411407]
[140.73536682 81.08464050]
[143.50604248 88.84719086]
[144.81152344 96.98535156]
[144.60783386 105.22503662]
[142.90185547 113.28874969]
[139.75103760 120.90493011]
[135.26147461 127.81707001]
[129.58436584 133.79238892]
[122.91092682 138.62965393]
[115.46589661 142.16593933]
[107.50000000 144.28216553]
[107.50000000 159.28216553]
[107.50000000 174.28216553]
[115.23729706 188.08233643]
[107.50000000 200.80961609]
[107.50000000 215.80961609]
[107.50000000 230.80961609]
[107.50000000 245.80961609]
[115.23729706 259.60977173]
[107.50000000 272.33706665]
[107.50000000 287.33706665]
[107.50000000 302.33706665]
[107.50000000 317.33706665]
[107.50000000 332.33706665]
[107.50000000 347.33706665]
[113.54634094 363.17617798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 144]
[3 143]
[4 142]
[5 141]
[6 140]
[7 139]
[9 137]
[10 136]
[11 135]
[12 134]
[14 132]
[15 131]
[16 130]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 37]
[24 36]
[25 35]
[26 34]
[50 68]
[51 67]
[52 66]
[54 64]
[55 63]
[56 62]
[71 120]
[72 119]
[73 118]
[74 117]
[75 116]
[76 115]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
