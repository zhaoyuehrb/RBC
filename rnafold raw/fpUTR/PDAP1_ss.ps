%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCUUGCGGCCACUGCGGCCACUGAAGCGGCGGCGGCGGCUGGCCCAGGAGGAAGAAGUCGAGCCCAAGCUAUUUCCGGUUCCGGUGUCAGUUCGAGGCGCCGCCGCCGCCGCCGCAGCCGCCGGAGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[35.55651474 588.42230225]
[25.99028206 600.79248047]
[10.69981194 604.06903076]
[-3.09520125 596.70477295]
[-8.88117409 582.17700195]
[-3.92614722 567.34521484]
[9.43026638 559.21258545]
[11.51786327 544.35852051]
[13.60546017 529.50451660]
[15.69305611 514.65051270]
[17.78065300 499.79647827]
[19.86824989 484.94247437]
[10.72726631 473.23870850]
[12.63278484 458.14486694]
[24.97074509 448.63632202]
[19.08003616 434.95608521]
[28.66265106 422.36703491]
[30.75024796 407.51303101]
[32.83784485 392.65899658]
[34.92544174 377.80499268]
[37.01303864 362.95095825]
[35.11509705 359.87683105]
[34.66573334 355.70632935]
[36.17453384 351.15621948]
[39.79956818 347.14776611]
[42.91824341 332.47555542]
[34.61594009 320.16265869]
[37.56970978 305.23852539]
[50.54089737 296.61376953]
[53.65957260 281.94155884]
[56.77824783 267.26934814]
[59.89692307 252.59713745]
[63.01559830 237.92492676]
[66.13426971 223.25271606]
[69.25294495 208.58050537]
[72.37162018 193.90827942]
[75.49029541 179.23606873]
[78.60897064 164.56385803]
[81.72764587 149.89164734]
[84.84632111 135.21942139]
[87.96500397 120.54721832]
[91.08367920 105.87500000]
[92.65160370 90.95717621]
[92.65160370 75.95717621]
[92.65160370 60.95717239]
[92.65160370 45.95717239]
[92.47707367 30.95818710]
[92.12803650 15.96224880]
[88.77464294 7.36481142]
[91.94944763 0.61423022]
[91.94944763 -14.38576984]
[91.94944763 -29.38576889]
[91.94944763 -44.38576889]
[79.56446838 -53.54647446]
[75.00172424 -68.07350922]
[79.81102753 -82.33305359]
[91.94944763 -90.92356110]
[91.94944763 -105.92356110]
[91.94944763 -120.92356110]
[91.94944763 -135.92355347]
[91.94944763 -150.92355347]
[88.91265869 -156.96319580]
[89.38125610 -162.74311829]
[92.31472778 -166.61737061]
[93.01260376 -181.60113525]
[93.71048737 -196.58488464]
[85.70397186 -210.89669800]
[94.32643890 -224.84606934]
[110.70783234 -224.08309937]
[117.99637604 -209.39265442]
[108.69424438 -195.88700867]
[107.99636078 -180.90325928]
[107.29848480 -165.91949463]
[106.94944763 -150.92355347]
[106.94944763 -135.92355347]
[106.94944763 -120.92356110]
[106.94944763 -105.92356110]
[106.94944763 -90.92356110]
[119.08786774 -82.33305359]
[123.89717865 -68.07350922]
[119.33442688 -53.54647446]
[106.94944763 -44.38576889]
[106.94944763 -29.38576889]
[106.94944763 -14.38576984]
[106.94944763 0.61423022]
[107.12397766 15.61321449]
[107.47301483 30.60915375]
[110.80403900 37.28403091]
[107.65160370 45.95717239]
[107.65160370 60.95717239]
[107.65160370 75.95717621]
[107.65160370 90.95717621]
[117.60518646 79.73548889]
[131.99990845 75.51741791]
[146.43582153 79.59226990]
[156.50039673 90.71450806]
[159.11727905 105.48447418]
[153.48655701 119.38753510]
[141.32936096 128.17404175]
[126.36168671 129.15826416]
[113.15860748 122.03936768]
[105.75588989 108.99367523]
[102.63721466 123.66589355]
[99.51853943 138.33810425]
[96.39986420 153.01031494]
[93.28118896 167.68252563]
[90.16251373 182.35475159]
[87.04383850 197.02696228]
[83.92516327 211.69917297]
[80.80648804 226.37138367]
[77.68781281 241.04360962]
[74.56913757 255.71582031]
[71.45046234 270.38803101]
[68.33178711 285.06024170]
[65.21311188 299.73245239]
[73.55488586 312.88739014]
[70.18309021 327.72268677]
[57.59045792 335.59423828]
[54.47177887 350.26644897]
[51.86705780 365.03854370]
[49.77946091 379.89257812]
[47.69186401 394.74658203]
[45.60426712 409.60061646]
[43.51667023 424.45465088]
[49.25806046 439.19732666]
[39.82476425 450.72390747]
[49.06386185 463.26492310]
[46.73514175 478.29928589]
[34.72227097 487.03005981]
[32.63467407 501.88409424]
[30.54707718 516.73809814]
[28.45948029 531.59210205]
[26.37188339 546.44616699]
[24.28428841 561.30017090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 134]
[8 133]
[9 132]
[10 131]
[11 130]
[12 129]
[15 126]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[25 119]
[26 118]
[29 115]
[30 114]
[31 113]
[32 112]
[33 111]
[34 110]
[35 109]
[36 108]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[42 102]
[43 92]
[44 91]
[45 90]
[46 89]
[47 87]
[48 86]
[50 85]
[51 84]
[52 83]
[53 82]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
