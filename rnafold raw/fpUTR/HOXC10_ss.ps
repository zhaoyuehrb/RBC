%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCCUCCAACCGCGCCCCCCCUCCCGGAUGGGGAAAAAAAAAGAUGUCAGCUCCUCCGCUGUAGUAUUGCUCCUUAAAAACCCCUCUCUCUGAAA\
) } def
/len { sequence length } bind def

/coor [
[18.94366455 155.28472900]
[13.35074043 146.02647400]
[8.81090927 136.20883179]
[-5.51262474 140.66264343]
[-19.83615875 145.11645508]
[-34.15969086 149.57025146]
[-48.48322678 154.02406311]
[-62.73429108 158.70455933]
[-76.90930176 163.61058044]
[-91.08432007 168.51660156]
[-90.77805328 183.64146423]
[-95.16256714 198.12010193]
[-103.80828857 210.53407288]
[-115.86821747 219.66717529]
[-130.16082764 224.62461853]
[-145.28588867 224.92074585]
[-159.76159668 220.52653503]
[-172.16976929 211.87249756]
[-181.29478455 199.80644226]
[-186.24266052 185.51051331]
[-186.52864075 170.38525391]
[-182.12474060 155.91249084]
[-173.46238708 143.51013184]
[-161.39022827 134.39320374]
[-147.09098816 129.45491028]
[-131.96553040 129.17906189]
[-117.49572754 133.59266663]
[-105.09916687 142.26332092]
[-95.99033356 154.34158325]
[-81.81532288 149.43556213]
[-67.64031219 144.52954102]
[-62.25045013 139.27085876]
[-52.93703079 139.70053101]
[-38.61349869 135.24671936]
[-24.28996468 130.79290771]
[-9.96643066 126.33911133]
[4.35710335 121.88529968]
[1.88536668 100.22115326]
[4.25941610 78.54607391]
[11.36200047 57.93059158]
[22.84232903 39.39287186]
[38.13339996 23.84848022]
[56.47999954 12.06513882]
[76.97601318 4.62481356]
[98.60916138 1.89497602]
[120.31099701 4.01045036]
[141.00968933 10.86675453]
[148.30264282 -2.24098587]
[144.19532776 -17.26655579]
[151.77815247 -30.45577812]
[166.12803650 -34.27887344]
[173.42098999 -47.38661194]
[180.71394348 -60.49435425]
[188.00689697 -73.60209656]
[183.43426514 -88.73043060]
[190.97181702 -102.62146759]
[206.14765930 -107.03389740]
[219.95822144 -99.34990692]
[224.20996094 -84.12826538]
[216.38037109 -70.39971161]
[201.11463928 -66.30914307]
[193.82168579 -53.20140457]
[186.52873230 -40.09366226]
[179.23577881 -26.98592186]
[183.55284119 -12.77681637]
[176.34347534 0.62018710]
[161.41038513 5.05196524]
[154.11743164 18.15970612]
[162.79716492 24.61402130]
[170.71369934 31.98454094]
[177.77081299 40.18168640]
[183.88273621 49.10583115]
[188.97518921 58.64852142]
[192.98629761 68.69377136]
[195.86727905 79.11950684]
[197.58314514 89.79901123]
[198.11303711 100.60249329]
[197.45050049 111.39865875]
[195.60360718 122.05628204]
[192.59480286 132.44584656]
[188.46063232 142.44108582]
[183.25137329 151.92051697]
[177.03030396 160.76892090]
[169.87304688 168.87878418]
[161.86660767 176.15151978]
[153.10824585 182.49874878]
[143.70445251 187.84333801]
[133.76948547 192.12031555]
[123.42411041 195.27770996]
[112.79404449 197.27714539]
[102.00848389 198.09432983]
[91.19851685 197.71931458]
[80.49552155 196.15667725]
[70.02957153 193.42538452]
[59.92786407 189.55867004]
[50.31317902 184.60348511]
[41.30235672 178.62008667]
[33.00492096 171.68116760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[8 31]
[9 30]
[10 29]
[47 68]
[48 67]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
