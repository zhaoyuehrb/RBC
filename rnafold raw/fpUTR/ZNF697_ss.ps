%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGACCACCGAAGGGGGCAUCAGAGACCCUCGGAGAAACCAAGCCCAGGGAGGAGCUUGGAAGGCAAGGAGAAGGGAUUCCUGGUCACCUCCCUUGCUCUUUUCUUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[-94.36031342 190.65661621]
[-100.77259064 204.27359009]
[-110.25186920 215.95303345]
[-122.24375916 225.01878357]
[-136.04858398 230.94731140]
[-150.86218262 233.39801025]
[-165.82272339 232.23269653]
[-180.06094360 227.52343750]
[-192.75053406 219.54809570]
[-203.15618896 208.77394104]
[-210.67616272 195.83027649]
[-225.06329346 200.07412720]
[-239.45043945 204.31799316]
[-253.83757019 208.56184387]
[-261.30377197 214.06250000]
[-268.67590332 212.71934509]
[-283.17358398 216.56864929]
[-297.67126465 220.41793823]
[-301.00588989 235.35577393]
[-310.90933228 247.02539062]
[-325.10589600 252.74520874]
[-340.33331299 251.20085144]
[-353.09237671 242.74719238]
[-360.45120239 229.32682800]
[-360.71878052 214.02365112]
[-353.83361816 200.35423279]
[-341.37786865 191.45970154]
[-326.21377563 189.38394165]
[-311.82592773 194.60397339]
[-301.52056885 205.92024231]
[-287.02288818 202.07095337]
[-272.52517700 198.22166443]
[-258.08142090 194.17471313]
[-243.69429016 189.93084717]
[-229.30715942 185.68699646]
[-214.92001343 181.44314575]
[-215.62881470 166.49035645]
[-212.73646545 151.79360962]
[-206.40681458 138.20803833]
[-197.00387573 126.52521515]
[-185.07083130 117.42694092]
[-171.29872131 111.44554901]
[-156.48634338 108.93270111]
[-141.49401855 110.03875732]
[-127.19351959 114.70375061]
[-114.41748047 122.66063690]
[-103.91085052 133.45057678]
[-96.28746033 146.44941711]
[-81.90032196 142.20555115]
[-67.51319122 137.96170044]
[-53.12605286 133.71783447]
[-38.73891830 129.47398376]
[-24.35177994 125.23012543]
[-9.96464539 120.98626709]
[4.42249107 116.74241638]
[18.80962753 112.49855804]
[33.19676208 108.25469971]
[47.58390045 104.01084137]
[49.60442734 100.96480560]
[53.26763535 98.80467987]
[58.11171722 98.32282257]
[63.32482529 100.06080627]
[78.01108551 97.00896454]
[92.69734955 93.95712280]
[96.59005737 90.22459412]
[102.32130432 89.01509094]
[108.26805115 91.16283417]
[123.09905243 88.91754913]
[137.93005371 86.67227173]
[152.76106262 84.42698669]
[167.59207153 82.18170929]
[182.42308044 79.93642426]
[190.56875610 75.50366211]
[197.68931580 77.83812714]
[212.57611084 75.99879456]
[220.83982849 71.79017639]
[227.89396667 74.31827545]
[242.82545471 72.88625336]
[257.73599243 71.25041962]
[272.62277222 69.41108704]
[287.50958252 67.57174683]
[302.39639282 65.73240662]
[317.37457275 57.78946686]
[329.15347290 69.98346710]
[320.69674683 84.67768860]
[304.23571777 80.61920929]
[289.34893799 82.45854950]
[274.46212769 84.29788208]
[259.57531738 86.13722229]
[253.23710632 90.13459015]
[244.25747681 87.81774139]
[229.32598877 89.24976349]
[214.41545105 90.88559723]
[199.52864075 92.72492981]
[184.66835022 94.76743317]
[169.83735657 97.01271057]
[155.00634766 99.25799561]
[140.17533875 101.50327301]
[125.34433746 103.74855804]
[110.51332855 105.99383545]
[95.74919128 108.64338684]
[81.06292725 111.69522858]
[66.37667084 114.74706268]
[51.82775497 118.39797974]
[37.44062042 122.64183807]
[23.05348396 126.88568878]
[8.66634750 131.12954712]
[-5.72078848 135.37341309]
[-20.10792351 139.61726379]
[-34.49505997 143.86111450]
[-48.88219452 148.10498047]
[-63.26933289 152.34883118]
[-77.65647125 156.59268188]
[-92.04360199 160.83654785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 36]
[12 35]
[13 34]
[14 33]
[16 32]
[17 31]
[18 30]
[48 114]
[49 113]
[50 112]
[51 111]
[52 110]
[53 109]
[54 108]
[55 107]
[56 106]
[57 105]
[58 104]
[62 103]
[63 102]
[64 101]
[67 100]
[68 99]
[69 98]
[70 97]
[71 96]
[72 95]
[74 94]
[75 93]
[77 92]
[78 91]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
