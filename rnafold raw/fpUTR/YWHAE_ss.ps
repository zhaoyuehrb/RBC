%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGCUGAGCAGUUGUCCGCGUGCGCAGGCGGAAGUCCCGGAUUGAGGCGCCGCCAUUUUUGCUGCCCGGACGCGGAGCGAGAGGCUGAGAGAGUCGGAGACACUAUCCGCUUCCAUCCGUCGCGCAGACCCUGCCGGAGCCGCUGCCGCU\
) } def
/len { sequence length } bind def

/coor [
[67.32333374 318.75854492]
[50.95528793 317.74902344]
[43.88876724 302.95046997]
[53.39319992 289.58642578]
[54.31661224 274.61489868]
[55.24002457 259.64334106]
[52.49579239 252.73092651]
[56.33921051 244.37486267]
[53.73748016 237.40756226]
[57.75165558 229.13215637]
[59.28894806 214.21115112]
[60.82624054 199.29013062]
[62.36353302 184.36911011]
[63.90082550 169.44810486]
[57.50863266 155.99487305]
[66.61952209 143.06033325]
[68.15681458 128.13931274]
[60.39167786 115.30566406]
[46.46096039 109.74372864]
[32.53024292 104.18179321]
[18.59952927 98.61985016]
[4.66881227 93.05791473]
[-9.26190376 87.49597931]
[-24.94728088 89.56467438]
[-33.89832306 77.65971375]
[-47.82904053 72.09777832]
[-63.74049759 79.29587555]
[-79.63385010 72.91363525]
[-85.89635468 57.33531189]
[-99.93833160 52.06056976]
[-113.98030853 46.78582764]
[-128.02227783 41.51108551]
[-142.06425476 36.23634338]
[-156.10623169 30.96160316]
[-170.14820862 25.68686104]
[-184.19018555 20.41211891]
[-198.23216248 15.13737869]
[-212.48530579 21.42115784]
[-226.65071106 15.87178707]
[-232.55351257 2.24487615]
[-246.59547424 -3.02986526]
[-260.63745117 -8.30460739]
[-272.94754028 0.99408221]
[-288.33239746 2.13852215]
[-301.88278198 -5.23647404]
[-309.27481079 -18.77757072]
[-308.14971924 -34.16385651]
[-298.86654663 -46.48561859]
[-284.38745117 -51.81103134]
[-269.33273315 -48.44077301]
[-258.50625610 -37.45028305]
[-255.36271667 -22.34658241]
[-241.32073975 -17.07184219]
[-227.27876282 -11.79710007]
[-213.86413574 -18.16759682]
[-199.54843140 -13.01829243]
[-192.95742798 1.09540176]
[-178.91545105 6.37014341]
[-164.87347412 11.64488506]
[-150.83149719 16.91962624]
[-136.78952026 22.19436836]
[-122.74754333 27.46911049]
[-108.70556641 32.74385071]
[-94.66358948 38.01859283]
[-80.62161255 43.29333496]
[-69.71407318 36.36671829]
[-56.61418533 37.01602554]
[-46.13810349 45.22777557]
[-42.26710129 58.16706085]
[-28.33638573 63.72899628]
[-13.64742661 61.26247406]
[-3.69996667 73.56526184]
[10.23075008 79.12719727]
[24.16146660 84.68914032]
[38.09218216 90.25107574]
[52.02289963 95.81301117]
[65.95361328 101.37494659]
[84.99134064 74.19274139]
[113.56545258 78.24923706]
[126.55583191 70.74923706]
[139.54621887 63.24923706]
[152.53659058 55.74923706]
[156.64326477 43.47980499]
[167.66815186 37.51130295]
[179.40933228 40.57836151]
[192.55096436 33.34666061]
[200.91116333 19.91469383]
[215.79190063 20.55742073]
[228.93353271 13.32571888]
[234.98971558 6.40341139]
[242.42005920 6.08360529]
[255.70739746 -0.87675095]
[261.90444946 -7.67325401]
[269.33978271 -7.84043407]
[282.76724243 -14.52650928]
[289.10250854 -21.19434357]
[296.53970337 -21.20882797]
[310.10162354 -27.61780357]
[323.66351318 -34.02677917]
[337.22540283 -40.43575287]
[341.01983643 -55.60599518]
[353.70809937 -64.74615479]
[369.29913330 -63.54053497]
[380.43133545 -52.55838394]
[381.84844971 -36.98514557]
[372.88134766 -24.17402267]
[357.76400757 -20.17403603]
[343.63436890 -26.87385750]
[330.07247925 -20.46488190]
[316.51058960 -14.05590630]
[302.94869995 -7.64693069]
[289.45330811 -1.09906018]
[276.02584839 5.58701515]
[262.66775513 12.41059017]
[249.38041687 19.37094688]
[236.16523743 26.46735001]
[223.02360535 33.69905090]
[215.60337830 46.61375809]
[199.78266907 46.48829269]
[186.64103699 53.71999359]
[178.41662598 69.19265747]
[160.03659058 68.73961639]
[147.04621887 76.23961639]
[134.05583191 83.73961639]
[121.06545258 91.23961639]
[119.98838043 106.20089722]
[131.77052307 115.48428345]
[143.55265808 124.76766968]
[155.33479309 134.05105591]
[171.51808167 139.10452271]
[171.14208984 156.05429077]
[154.75062561 160.38516235]
[146.05140686 145.83319092]
[134.26927185 136.54980469]
[122.48712921 127.26641846]
[110.70499420 117.98303223]
[103.79820251 120.90643311]
[109.64477539 134.72010803]
[95.83101654 140.56646729]
[89.98461914 126.75321960]
[83.07782745 129.67660522]
[81.54053497 144.59762573]
[87.82276917 159.11810303]
[78.82183838 170.98539734]
[77.28454590 185.90640259]
[75.74725342 200.82742310]
[74.20996094 215.74844360]
[72.67266846 230.66944885]
[71.28864288 245.60546875]
[70.21157837 260.56674194]
[69.28816223 275.53829956]
[68.36474609 290.50985718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 152]
[5 151]
[6 150]
[8 149]
[10 148]
[11 147]
[12 146]
[13 145]
[14 144]
[16 142]
[17 141]
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[23 72]
[25 70]
[26 69]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[40 54]
[41 53]
[42 52]
[79 125]
[80 124]
[81 123]
[82 122]
[85 120]
[86 119]
[88 117]
[89 116]
[91 115]
[92 114]
[94 113]
[95 112]
[97 111]
[98 110]
[99 109]
[100 108]
[126 136]
[127 135]
[128 134]
[129 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
