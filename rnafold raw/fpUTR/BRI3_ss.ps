%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCCCGCGUCUGCCUCAGAGGGGCCCGAGCCACCCGGUCCGCCGCGUCCCCGCCGCCGCCGCCGCGUCCCCCGCCGGGGCCGACCGAGCCGAGCCGGGCCGGAGCGGCGGGCGCGGCCGGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[-137.19636536 369.73880005]
[-153.83178711 376.40176392]
[-171.71804810 376.26348877]
[-188.18687439 369.36987305]
[-198.40211487 380.35388184]
[-208.61735535 391.33792114]
[-218.83259583 402.32196045]
[-229.04783630 413.30599976]
[-230.24841309 418.59591675]
[-233.11909485 422.45550537]
[-236.80656433 424.48153687]
[-240.42321777 424.68136597]
[-251.40725708 434.89660645]
[-262.39129639 445.11184692]
[-273.37530518 455.32708740]
[-280.85617065 470.54135132]
[-297.54672241 467.56457520]
[-299.30670166 450.70220947]
[-283.59054565 444.34307861]
[-272.60653687 434.12783813]
[-261.62249756 423.91259766]
[-250.63845825 413.69735718]
[-240.03186035 403.09075928]
[-229.81661987 392.10671997]
[-219.60137939 381.12268066]
[-209.38615417 370.13867188]
[-199.17091370 359.15463257]
[-205.34671021 348.62683105]
[-208.55430603 336.83523560]
[-208.56251526 324.60064697]
[-205.36318970 312.77673340]
[-199.17218018 302.19046021]
[-190.41493225 293.58438110]
[-179.69714355 287.56442261]
[-167.76295471 284.55725098]
[-155.44319153 284.78005981]
[-143.59762573 288.22494507]
[-133.05493164 294.65881348]
[-121.82727051 284.71197510]
[-110.59960938 274.76513672]
[-99.37194824 264.81829834]
[-88.14428711 254.87144470]
[-76.91662598 244.92460632]
[-65.68896484 234.97776794]
[-54.58230972 224.89599609]
[-43.59827805 214.68075562]
[-32.61424637 204.46551514]
[-21.63021851 194.25028992]
[-10.64618778 184.03504944]
[-9.58564663 179.28341675]
[-5.46591949 175.18470764]
[1.12407780 173.60749817]
[12.58881378 163.93486023]
[24.05354881 154.26223755]
[35.51828384 144.58959961]
[46.98302078 134.91696167]
[58.44775772 125.24433136]
[69.91249084 115.57170105]
[81.37722778 105.89906311]
[78.21839142 84.64018250]
[98.79634094 66.25095367]
[103.77496338 52.10128021]
[108.75357819 37.95160294]
[106.03527832 22.36566734]
[117.55824280 12.92795086]
[114.83994293 -2.65798497]
[126.36291504 -12.09570026]
[131.34152222 -26.24537659]
[136.32014465 -40.39505386]
[130.70875549 -55.42475128]
[139.08403015 -69.10810852]
[155.02117920 -70.94843292]
[166.29458618 -59.53397369]
[164.25625610 -43.62093353]
[150.46981812 -35.41643524]
[145.49121094 -21.26675987]
[140.51258850 -7.11708260]
[143.58699036 7.45677423]
[131.70791626 17.90656853]
[134.78233337 32.48042679]
[122.90325165 42.93022156]
[117.92463684 57.07989883]
[112.94602203 71.22957611]
[117.49974060 77.18890381]
[132.37532043 75.26094055]
[126.60717773 89.10757446]
[131.16088867 95.06690216]
[146.12149048 93.98038483]
[161.08209229 92.89385986]
[169.51368713 89.11830902]
[176.41654968 91.96630096]
[191.39903259 91.24160004]
[206.38151550 90.51689911]
[216.81694031 78.64772797]
[232.59382629 77.71731567]
[244.35200500 88.27765656]
[245.11555481 104.06348419]
[234.43148804 115.70935822]
[218.63847351 116.30597687]
[207.10621643 105.49938202]
[192.12373352 106.22408295]
[177.14125061 106.94878387]
[162.16860962 107.85446167]
[147.20800781 108.94097900]
[132.24742126 110.02750397]
[110.29782867 124.58286285]
[91.04985809 117.36380005]
[79.58512878 127.03643799]
[68.12039185 136.70907593]
[56.65565491 146.38169861]
[45.19091797 156.05433655]
[33.72618103 165.72697449]
[22.26144600 175.39959717]
[10.79671097 185.07223511]
[-0.43095022 195.01907349]
[-11.41497993 205.23431396]
[-22.39900970 215.44955444]
[-33.38304138 225.66479492]
[-44.36706924 235.88002014]
[-48.57677460 244.10346985]
[-55.74212646 246.20542908]
[-66.96978760 256.15228271]
[-78.19744873 266.09912109]
[-89.42510986 276.04595947]
[-100.65277100 285.99279785]
[-111.88043213 295.93963623]
[-123.10809326 305.88647461]
[-116.66485596 322.75128174]
[-117.09287262 340.76654053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 27]
[5 26]
[6 25]
[7 24]
[8 23]
[12 22]
[13 21]
[14 20]
[15 19]
[38 127]
[39 126]
[40 125]
[41 124]
[42 123]
[43 122]
[44 121]
[45 119]
[46 118]
[47 117]
[48 116]
[49 115]
[52 114]
[53 113]
[54 112]
[55 111]
[56 110]
[57 109]
[58 108]
[59 107]
[61 83]
[62 82]
[63 81]
[65 79]
[67 77]
[68 76]
[69 75]
[87 105]
[88 104]
[89 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
