%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACGAAAACCUGAAUACGGAACUGAAGCAGCAGCUCAGUUUCUCACUCCGAAGUGGCAGCAGCCAGAGAGGGAGUCGGUGUGGACGCGAGGAGCCGGGCGCUUAGAACAGAGGCUUGCACAGGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[99.32745361 261.27056885]
[84.19564819 262.98760986]
[69.67562866 258.39535522]
[58.28308105 248.28941345]
[51.99183273 234.42074585]
[51.89188004 219.19215393]
[58.00054550 205.24209595]
[69.25946045 194.98750305]
[83.71794891 190.20503235]
[85.16565704 175.27505493]
[86.61336517 160.34507751]
[88.06107330 145.41511536]
[89.50878143 130.48513794]
[82.06938934 127.72606659]
[75.36594391 123.13980865]
[69.84911346 116.92544556]
[65.91504669 109.39338684]
[63.87794495 100.95033264]
[63.94671249 92.07749176]
[48.98611450 93.16401672]
[34.02551651 94.25053406]
[19.06492043 95.33705902]
[4.10432243 96.42358398]
[-10.85627460 97.51010132]
[-25.81687164 98.59662628]
[-40.77746964 99.68314362]
[-49.20906448 103.45870209]
[-56.11192322 100.61071014]
[-71.09440613 101.33541107]
[-84.58338165 110.66170502]
[-99.28684235 103.39946747]
[-100.07914734 87.01947021]
[-86.14522552 78.37204742]
[-71.81910706 86.35292816]
[-56.83662415 85.62822723]
[-41.86399078 84.72254944]
[-26.90339470 83.63602448]
[-11.94279671 82.54950714]
[3.01780033 81.46298218]
[17.97839737 80.37646484]
[32.93899536 79.28993988]
[47.89959335 78.20341492]
[62.86018753 77.11689758]
[72.80702972 65.88923645]
[72.08232880 50.90674973]
[71.35762787 35.92426682]
[70.63292694 20.94178391]
[62.23793030 7.53154182]
[69.35129547 -5.55468273]
[68.62659454 -20.53716660]
[67.90189362 -35.51964951]
[67.17719269 -50.50213242]
[48.60517120 -64.09136200]
[45.78287506 -86.66979980]
[60.10908508 -104.01364136]
[56.87232208 -118.66025543]
[53.63555908 -133.30686951]
[50.39879608 -147.95349121]
[38.93466568 -159.67976379]
[43.61780548 -175.39601135]
[59.63060760 -178.93469238]
[70.50047302 -166.65551758]
[65.04541016 -151.19024658]
[68.28217316 -136.54364014]
[71.51893616 -121.89701843]
[74.75569916 -107.25040436]
[82.47389221 -105.86054230]
[89.53781128 -102.39213562]
[95.39747620 -97.09862518]
[99.59211731 -90.37615967]
[101.78639221 -82.73397827]
[101.79714966 -74.75586700]
[99.60866547 -67.05554962]
[95.37493134 -60.22946548]
[89.40895844 -54.81059265]
[82.15967560 -51.22683334]
[82.88437653 -36.24435043]
[83.60907745 -21.26186752]
[84.33377838 -6.27938318]
[92.67694092 6.05921078]
[85.61540985 20.21708298]
[86.34011078 35.19956589]
[87.06481171 50.18204880]
[87.78951263 65.16453552]
[104.77755737 62.79927826]
[121.27877808 68.39701843]
[133.70474243 80.99886322]
[147.97059631 76.36360931]
[156.50582886 62.77945328]
[172.46347046 61.12623596]
[183.60218811 72.67216492]
[181.37730408 88.56019592]
[167.49557495 96.60238647]
[152.60585022 90.62945557]
[138.34001160 95.26470947]
[137.25347900 110.22531128]
[150.69989014 116.87318420]
[164.14628601 123.52105713]
[177.59269714 130.16893005]
[191.03909302 136.81680298]
[200.22093201 137.83686829]
[204.72717285 143.79122925]
[218.00901794 150.76206970]
[231.29084778 157.73292542]
[246.30307007 152.79240417]
[260.37393188 159.98866272]
[265.15545654 175.05227661]
[257.81085205 189.04627991]
[242.69752502 193.66827393]
[228.78195190 186.17610168]
[224.32000732 171.01475525]
[211.03816223 164.04391479]
[197.75631714 157.07305908]
[184.39122009 150.26319885]
[170.94482422 143.61532593]
[157.49841309 136.96745300]
[144.05201721 130.31958008]
[130.60560608 123.67171478]
[122.24040222 128.99343872]
[113.27283478 131.72599792]
[104.43875885 131.93284607]
[102.99105072 146.86282349]
[101.54334259 161.79280090]
[100.09563446 176.72276306]
[98.64791870 191.65274048]
[111.91821289 199.12397766]
[120.99719238 211.35066223]
[124.31187439 226.21447754]
[121.28796387 241.14015198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 125]
[10 124]
[11 123]
[12 122]
[13 121]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[28 35]
[29 34]
[44 84]
[45 83]
[46 82]
[47 81]
[49 79]
[50 78]
[51 77]
[52 76]
[55 66]
[56 65]
[57 64]
[58 63]
[87 95]
[88 94]
[96 118]
[97 117]
[98 116]
[99 115]
[100 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
