%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAUCGCCGGGAGGGCGGUUGAGGCGGUGGUGGCGGCGUCGGCGGCGGCCGGGCGCUGGCUGAGGGGCGCUGAGGCGGGAGCUGUGGCGGCGCUGGGCGCCCCUGGCUCCUCGGCCUCUGCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[104.15573883 129.62081909]
[95.27996063 141.71298218]
[86.40417480 153.80514526]
[84.47573853 169.50839233]
[70.70738983 175.19010925]
[61.83161163 187.28227234]
[52.95582962 199.37443542]
[44.08005142 211.46659851]
[35.20426941 223.55877686]
[26.32848740 235.65093994]
[27.32992935 251.66270447]
[15.33960152 262.32156372]
[-0.44454381 259.45098877]
[-7.91426039 245.25299072]
[-1.33942068 230.61909485]
[14.23632050 226.77516174]
[23.11210060 214.68298340]
[31.98788261 202.59082031]
[40.86366272 190.49865723]
[49.73944473 178.40649414]
[58.61522675 166.31431580]
[59.90880966 151.47599792]
[74.31201172 144.92936707]
[83.18778992 132.83720398]
[92.06357574 120.74503326]
[85.36788177 107.32237244]
[70.36899567 107.13973236]
[56.47563171 114.70841980]
[43.84351730 106.81671906]
[28.84462738 106.63407135]
[14.81636429 115.12759399]
[0.57896703 106.98950195]
[0.77864981 90.59156799]
[15.20999622 82.80258179]
[29.02727509 91.63518524]
[44.02616119 91.81783295]
[56.84670258 84.23607635]
[70.55164337 92.14083862]
[85.55052948 92.32348633]
[99.80504608 87.65350342]
[111.78823853 78.63114166]
[123.77143860 69.60877991]
[135.75463867 60.58641815]
[147.73782349 51.56405640]
[159.72102356 42.54169464]
[171.70422363 33.51933289]
[183.68740845 24.49696922]
[190.05818176 10.01511955]
[204.87965393 8.54095554]
[216.86285400 -0.48140711]
[228.84603882 -9.50376892]
[240.82923889 -18.52613068]
[252.81243896 -27.54849434]
[264.79562378 -36.57085419]
[276.77883911 -45.59321976]
[281.81912231 -53.33794403]
[289.16546631 -54.68515015]
[292.31939697 -60.68630219]
[297.30978394 -63.66923141]
[302.17803955 -63.52384949]
[314.78787231 -71.64743042]
[327.39767456 -79.77100372]
[340.00750732 -87.89457703]
[345.59967041 -95.25072479]
[353.02478027 -96.05809021]
[365.82867432 -103.87219238]
[378.63256836 -111.68630219]
[391.43646240 -119.50040436]
[404.24035645 -127.31450653]
[417.04425049 -135.12861633]
[429.84814453 -142.94271851]
[442.65203857 -150.75682068]
[455.45593262 -158.57092285]
[459.27603149 -170.96107483]
[470.18682861 -177.18963623]
[482.01562500 -174.36538696]
[495.00598145 -181.86538696]
[507.99636841 -189.36538696]
[520.98675537 -196.86538696]
[522.97290039 -210.24964905]
[532.19488525 -219.88258362]
[545.09661865 -222.37573242]
[556.88787842 -217.03323364]
[570.05706787 -224.21467590]
[578.13348389 -238.48712158]
[594.53216553 -238.35835266]
[602.38348389 -223.96081543]
[593.61065674 -210.10546875]
[577.23852539 -211.04551697]
[564.06933594 -203.86407471]
[560.05712891 -187.58004761]
[545.24267578 -179.02461243]
[528.48675537 -183.87500000]
[515.49639893 -176.37500000]
[502.50598145 -168.87500000]
[489.51562500 -161.37500000]
[481.63619995 -145.74388123]
[463.27005005 -145.76702881]
[450.46615601 -137.95292664]
[437.66226196 -130.13882446]
[424.85836792 -122.32471466]
[412.05444336 -114.51061249]
[399.25054932 -106.69651031]
[386.44665527 -98.88240051]
[373.64276123 -91.06829834]
[360.83886719 -83.25418854]
[348.13107300 -75.28475952]
[335.52124023 -67.16118622]
[322.91143799 -59.03760910]
[310.30160522 -50.91403198]
[297.89334106 -42.48580170]
[285.80117798 -33.61002350]
[273.81799316 -24.58765984]
[261.83480835 -15.56529808]
[249.85160828 -6.54293585]
[237.86840820 2.47942638]
[225.88520813 11.50178909]
[213.90200806 20.52415085]
[208.38836670 34.36066055]
[192.70977783 36.48016357]
[180.72657776 45.50252533]
[168.74339294 54.52489090]
[156.76019287 63.54725266]
[144.77699280 72.56961060]
[132.79379272 81.59197235]
[120.81060028 90.61434174]
[108.82740784 99.63670349]
[114.28326416 106.89456940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[26 39]
[27 38]
[29 36]
[30 35]
[40 127]
[41 126]
[42 125]
[43 124]
[44 123]
[45 122]
[46 121]
[47 120]
[49 118]
[50 117]
[51 116]
[52 115]
[53 114]
[54 113]
[55 112]
[57 111]
[60 110]
[61 109]
[62 108]
[63 107]
[65 106]
[66 105]
[67 104]
[68 103]
[69 102]
[70 101]
[71 100]
[72 99]
[73 98]
[76 96]
[77 95]
[78 94]
[79 93]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
