%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGUAAAUCCCAGAGUCUCAGCCGCCUAAGUGUCUUCCCCGGAGGUGAGAUUAUCUCCGCCUGUGCUGGACACCUCCCUUUCUCCUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[23.10221672 227.70060730]
[3.78670239 226.93827820]
[-4.54685116 239.41032410]
[-12.88040447 251.88237000]
[-21.21395874 264.35440063]
[-29.54751205 276.82644653]
[-27.84050560 292.77844238]
[-39.34881973 303.95602417]
[-55.24425888 301.78469849]
[-63.33320236 287.93017578]
[-57.41050720 273.02038574]
[-42.01955414 268.49288940]
[-33.68600082 256.02087402]
[-25.35244942 243.54881287]
[-17.01889610 231.07676697]
[-8.68534184 218.60472107]
[-14.52549267 209.55418396]
[-16.92894363 199.01467896]
[-15.58029938 188.24993896]
[-10.61568928 178.56001282]
[-2.60954356 171.12423706]
[7.49176311 166.85780334]
[18.48173714 166.29908752]
[29.03786278 169.54190063]
[38.92805099 158.26429749]
[41.50251389 143.59387207]
[56.41880798 138.31991577]
[66.30899811 127.04231262]
[57.47148514 107.59577942]
[59.03086472 86.29232025]
[70.60591888 68.33995056]
[89.36690521 58.12747955]
[110.72735596 58.15153122]
[116.91796112 44.48857117]
[123.10856628 30.82561493]
[129.29916382 17.16265869]
[135.48977661 3.49970055]
[141.68037415 -10.16325665]
[135.30523682 -20.47117233]
[134.79643250 -32.45930481]
[140.16577148 -43.05422592]
[149.93321228 -49.59767914]
[161.53268433 -50.51325989]
[168.60363770 -63.74208069]
[168.28530884 -79.56008148]
[181.10859680 -87.13719940]
[188.17953491 -100.36602020]
[195.25048828 -113.59483337]
[202.32144165 -126.82365417]
[209.39239502 -140.05247498]
[216.24595642 -153.39521790]
[222.88027954 -166.84831238]
[229.51461792 -180.30139160]
[231.09729004 -197.18130493]
[247.75564575 -200.33331299]
[255.39596558 -185.19853210]
[242.96769714 -173.66706848]
[236.33337402 -160.21397400]
[229.69905090 -146.76087952]
[229.56156921 -139.22363281]
[222.62121582 -132.98152161]
[215.55026245 -119.75270081]
[208.47930908 -106.52388763]
[201.40835571 -93.29506683]
[194.33740234 -80.06624603]
[195.16149902 -65.19445801]
[181.83245850 -56.67113113]
[174.76150513 -43.44231033]
[181.19282532 -26.45715904]
[173.20831299 -9.79555035]
[155.34333801 -3.97265124]
[149.15272522 9.69030571]
[142.96212769 23.35326385]
[136.77151489 37.01622009]
[130.58091736 50.67917633]
[124.39031219 64.34213257]
[131.59907532 70.54037476]
[137.27755737 78.16529083]
[141.15075684 86.84761047]
[143.03112793 96.16687012]
[142.82757568 105.67176056]
[140.54998779 114.90198517]
[136.30863953 123.41053772]
[130.30894470 130.78535461]
[122.84144592 136.66931152]
[114.26779175 140.77745056]
[105.00317383 142.91082764]
[95.49626160 142.96611023]
[86.20745087 140.94064331]
[77.58659363 136.93249512]
[67.69640350 148.21009827]
[64.41452789 163.68717957]
[50.20564651 168.15449524]
[40.31546021 179.43208313]
[45.89566803 198.37507629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[24 94]
[25 93]
[27 91]
[28 90]
[33 76]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[43 68]
[44 67]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
