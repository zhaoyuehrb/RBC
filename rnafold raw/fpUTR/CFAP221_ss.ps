%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGCGUCGUCAUGGCGACGCUCCGAGCGGGCGCCGGCGCUGGCGCCGGCCGAAUCCGGCCCGGGAACCACCUCCAGGGACAUGACCUUUGGCUCUAAAAAGAAGACUCCAUUUUUCAUGAUAAA\
) } def
/len { sequence length } bind def

/coor [
[147.15403748 153.27877808]
[133.86557007 146.32057190]
[120.57711029 139.36236572]
[107.28864288 132.40415955]
[92.61900330 135.53492737]
[83.32895660 147.31181335]
[74.03890228 159.08868408]
[64.74884796 170.86557007]
[55.45880127 182.64245605]
[46.16874695 194.41934204]
[36.87869644 206.19621277]
[35.05726624 222.49389648]
[19.92596626 228.81652832]
[7.05057812 218.65994263]
[9.67619896 202.47235107]
[25.10181618 196.90615845]
[34.39186859 185.12928772]
[43.68191910 173.35240173]
[52.97196960 161.57551575]
[62.26202011 149.79864502]
[71.55207062 138.02175903]
[80.84212494 126.24487305]
[78.91591644 118.99644470]
[65.11699677 124.87774658]
[53.40679169 134.25170898]
[39.15886688 129.56164551]
[35.30633926 115.06481171]
[45.34622192 103.92027283]
[60.16532135 106.24428558]
[75.06350708 104.49958801]
[73.13730621 97.25115204]
[59.22645950 91.63970184]
[45.31561279 86.02825165]
[31.40476990 80.41679382]
[17.49392509 74.80534363]
[3.58308029 69.19389343]
[-10.32776451 63.58243942]
[-26.48161888 66.40821838]
[-36.79679871 53.65952301]
[-30.66192818 38.45112228]
[-14.38803864 36.42811584]
[-4.71631145 49.67159271]
[9.19453335 55.28304672]
[23.10537720 60.89450073]
[37.01622391 66.50595093]
[50.92706680 72.11740112]
[64.83791351 77.72885895]
[78.74875641 83.34030914]
[89.28955841 72.66831970]
[83.50648499 58.82794189]
[77.72341156 44.98756409]
[71.94033813 31.14718628]
[66.15726471 17.30680847]
[52.79517365 7.79961967]
[54.61674881 -8.49804592]
[69.74810791 -14.82054615]
[82.62340546 -4.66383457]
[79.99763489 11.52373409]
[85.78071594 25.36411095]
[91.56378937 39.20448685]
[97.34686279 53.04486465]
[103.12993622 66.88524628]
[110.62764740 66.69973755]
[125.62305450 66.32872009]
[133.12075806 66.14321136]
[138.21229553 52.03377151]
[143.30384827 37.92433548]
[136.35929871 23.72754288]
[141.56637573 8.80568218]
[155.83580017 2.01162910]
[170.70176697 7.37617493]
[177.34458923 21.71662903]
[171.82316589 36.52505493]
[157.41328430 43.01587677]
[152.32173157 57.12531281]
[147.23019409 71.23474884]
[144.74707031 97.55478668]
[131.08889771 114.55487823]
[114.24684906 119.11568451]
[127.53531647 126.07389069]
[140.82377625 133.03210449]
[154.11224365 139.99031067]
[167.95262146 145.77339172]
[182.24122620 150.33799744]
[196.52983093 154.90261841]
[210.81845093 159.46723938]
[222.20314026 149.25276184]
[237.07385254 146.12882996]
[251.41625977 150.83644104]
[261.40975952 162.01614380]
[264.44509888 176.59875488]
[278.73370361 181.16337585]
[293.02230835 185.72799683]
[310.85974121 181.36102295]
[322.21453857 194.68101501]
[336.61169434 198.89082336]
[351.00881958 203.10063171]
[363.91720581 194.27407837]
[379.47402954 195.86132812]
[390.33383179 207.11291504]
[391.36895752 222.71620178]
[382.09066772 235.30378723]
[366.87985229 238.93218994]
[352.91860962 231.88819885]
[346.79901123 217.49775696]
[332.40188599 213.28796387]
[318.00476074 209.07815552]
[307.17880249 214.62423706]
[295.10134888 211.15399170]
[288.45770264 200.01660156]
[274.16909790 195.45198059]
[259.88049316 190.88735962]
[248.95301819 201.00941467]
[234.32893372 204.32481384]
[219.91358948 199.84552002]
[209.60813904 188.67884827]
[206.25382996 173.75584412]
[191.96522522 169.19122314]
[177.67660522 164.62661743]
[163.38800049 160.06199646]
[169.61938477 173.70640564]
[165.82321167 188.21809387]
[153.70866394 197.06330872]
[138.73020935 196.25958252]
[127.63175201 186.16877747]
[125.41025543 171.33419800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[65 76]
[66 75]
[67 74]
[83 120]
[84 119]
[85 118]
[86 117]
[91 112]
[92 111]
[93 110]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
