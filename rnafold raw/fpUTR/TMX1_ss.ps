%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCAUUGAGAGUCCUCUAGACAGGCGCUCCUCGCAGCACCGUAGUGCGCUUGCGCUGAGCAGCCCGCGAGGGCGGAAGUGGGAGCUGCGACCGCGCUCCCUGUGAGGUGGGCAAGCGGCGAA\
) } def
/len { sequence length } bind def

/coor [
[85.66355896 426.89630127]
[74.83100128 415.38842773]
[75.39203644 399.59411621]
[87.01380157 388.88381958]
[87.38776398 373.88848877]
[87.76171875 358.89315796]
[85.09936523 354.80783081]
[85.05165863 348.98599243]
[88.54669189 343.16479492]
[89.66764069 328.20675659]
[78.20513153 318.73315430]
[74.47489166 304.15408325]
[80.11048889 290.00863647]
[93.14541626 281.79907227]
[94.26636505 266.84103394]
[95.38731384 251.88296509]
[96.50827026 236.92491150]
[89.74371338 223.65502930]
[98.49066925 210.47164917]
[99.61161804 195.51359558]
[89.73165131 184.42657471]
[90.65537262 169.24101257]
[102.35144043 158.95317078]
[103.47239685 143.99511719]
[104.59334564 129.03704834]
[83.09937286 121.72607422]
[74.45482635 102.34839630]
[82.22150421 84.20674133]
[74.72150421 71.21636200]
[67.22150421 58.22597885]
[60.14180374 52.27757263]
[59.70108795 44.81692123]
[52.52727890 31.64359665]
[45.35346603 18.47027397]
[38.17965698 5.29695034]
[31.00584793 -7.87637329]
[23.83203888 -21.04969788]
[7.92143869 -30.21813583]
[8.91603661 -47.69189453]
[1.41603625 -60.68227768]
[-13.58548546 -64.87657166]
[-21.00650024 -78.15750122]
[-16.91543388 -92.43331146]
[-30.51621819 -100.51596069]
[-30.17915535 -115.40675354]
[-37.67915726 -128.39714050]
[-45.17915726 -141.38751221]
[-52.67915726 -154.37789917]
[-60.17915726 -167.36828613]
[-67.67915344 -180.35865784]
[-82.14404297 -188.08517456]
[-82.41461945 -204.48208618]
[-68.21254730 -212.68167114]
[-54.14768982 -204.24887085]
[-54.68877411 -187.85865784]
[-47.18877411 -174.86828613]
[-39.68877411 -161.87789917]
[-32.18877411 -148.88751221]
[-24.68877411 -135.89714050]
[-17.18877411 -122.90675354]
[-4.12444019 -115.75326538]
[-3.92505240 -99.93331146]
[10.48369503 -96.33837891]
[18.27481461 -83.27112579]
[14.40641689 -68.18227386]
[21.90641785 -55.19189453]
[33.56602859 -51.72117996]
[39.89953995 -40.86628342]
[37.00536346 -28.22350693]
[44.17917252 -15.05018330]
[51.35298157 -1.87685955]
[58.52679062 11.29646397]
[65.70059967 24.46978760]
[72.87441254 37.64311218]
[80.21188354 50.72597885]
[87.71188354 63.71636200]
[95.21188354 76.70674133]
[102.93440247 75.45821381]
[110.94373322 76.79858398]
[118.36553192 80.77259827]
[124.33076477 87.12882233]
[128.07597351 95.32936096]
[129.03704834 104.59334564]
[143.99511719 103.47239685]
[158.95317078 102.35144043]
[173.91122437 101.23049164]
[188.86927795 100.10954285]
[203.82733154 98.98858643]
[212.25843811 95.19091797]
[219.17146301 98.03089905]
[234.15281677 97.28321075]
[247.62747192 87.93623352]
[262.34207153 95.17590332]
[263.15948486 111.55466461]
[249.23886108 120.22345734]
[234.90051270 112.26456451]
[219.91915894 113.01225281]
[204.94828796 113.94664764]
[189.99023438 115.06759644]
[175.03218079 116.18854523]
[160.07411194 117.30950165]
[145.11605835 118.43045044]
[130.15800476 119.55140686]
[119.55140686 130.15800476]
[118.43045044 145.11605835]
[117.30950165 160.07411194]
[127.34161377 171.99026489]
[125.99172211 187.14389038]
[114.56967926 196.63453674]
[113.44872284 211.59260559]
[120.13310242 225.93238831]
[111.46632385 238.04586792]
[110.34537506 253.00392151]
[109.22442627 267.96197510]
[108.10346985 282.92004395]
[119.76923370 292.98065186]
[123.23361969 307.80804443]
[117.37214661 321.66830444]
[104.62570190 329.32769775]
[103.50474548 344.28576660]
[102.75705719 359.26712036]
[102.38309479 374.26245117]
[102.00914001 389.25778198]
[113.08259583 400.53405762]
[112.85564423 416.33670044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[9 120]
[10 119]
[14 115]
[15 114]
[16 113]
[17 112]
[19 110]
[20 109]
[23 106]
[24 105]
[25 104]
[28 77]
[29 76]
[30 75]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[37 69]
[39 66]
[40 65]
[43 62]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
