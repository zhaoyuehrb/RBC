%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUAGUGCAGCCCUGGUUACGCCUCCUCUGGCUCAGUCACACAGCGACGUAGAGGUGACUGGAGGUAUAUACUUGUCCUCACCUGGAUC\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 209.16844177]
[82.21823120 193.48094177]
[92.50000000 181.16571045]
[92.50000000 166.16571045]
[92.50000000 151.16571045]
[92.50000000 136.16571045]
[92.50000000 121.16571808]
[80.82747650 113.82426453]
[75.18628693 100.47569275]
[78.34342194 85.61314392]
[89.94621277 74.74639130]
[74.94621277 74.74639130]
[59.94621277 74.74639130]
[44.94621277 74.74639130]
[32.91776657 87.30812836]
[15.86091328 87.38813782]
[4.18317223 75.41903687]
[-10.80808353 75.93115234]
[-19.38296890 88.86370087]
[-33.93349075 94.25461578]
[-48.86468124 90.03096008]
[-58.43518829 77.81682587]
[-58.96495819 62.30879974]
[-50.25028229 49.47002792]
[-35.64213562 44.23728180]
[-20.75764275 48.62265778]
[-11.32019997 60.93989563]
[3.67105556 60.42777634]
[11.15565681 49.79006958]
[23.60801697 45.40227890]
[36.48455811 49.10625076]
[44.94621277 59.74639130]
[59.94621277 59.74639130]
[74.94621277 59.74639130]
[89.94621277 59.74639130]
[101.74180603 50.48011017]
[105.29327393 35.90660095]
[108.84474182 21.33309555]
[112.39620209 6.75958967]
[115.94766998 -7.81391668]
[119.49913788 -22.38742256]
[123.05060577 -36.96092987]
[114.86473846 -45.92382050]
[112.14814758 -57.62996292]
[115.48210907 -69.04922485]
[123.89727020 -77.28514862]
[135.15151978 -80.30957031]
[127.65890503 -94.22489166]
[132.28041077 -109.33837891]
[146.27416992 -116.68345642]
[161.33793640 -111.90242767]
[168.53465271 -97.83179474]
[163.59463501 -82.81940460]
[149.44869995 -75.77185059]
[158.87478638 -60.26132584]
[154.09429932 -42.42721176]
[137.62411499 -33.40946198]
[134.07264709 -18.83595657]
[130.52117920 -4.26245022]
[126.96971130 10.31105614]
[123.41824341 24.88456154]
[119.86677551 39.45806885]
[116.31531525 54.03157425]
[123.88912201 66.97906494]
[138.33288574 71.02601624]
[152.77664185 75.07296753]
[167.22039795 79.11991882]
[176.54524231 78.42782593]
[182.08372498 83.55946350]
[196.38090515 88.09718323]
[210.67807007 92.63490295]
[226.57037354 88.58929443]
[237.82484436 100.51693726]
[232.86386108 116.14769745]
[216.79086304 119.40198517]
[206.14035034 106.93207550]
[191.84318542 102.39435577]
[177.54600525 97.85663605]
[163.17344666 93.56367493]
[148.72969055 89.51672363]
[134.28593445 85.46977234]
[119.84217072 81.42282104]
[125.49866486 97.65850830]
[120.23991394 112.95435333]
[107.50000000 121.16571808]
[107.50000000 136.16571045]
[107.50000000 151.16571045]
[107.50000000 166.16571045]
[107.50000000 181.16571045]
[117.78176880 193.48094177]
[114.42288971 209.16844177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[6 86]
[7 85]
[11 35]
[12 34]
[13 33]
[14 32]
[17 28]
[18 27]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[47 54]
[64 82]
[65 81]
[66 80]
[67 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
