%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCUUUAAGGCGCGGUGACCCCCACGGCAUCCUCGGGCGGGGCGGGGACAGUGCCGGCGCCACCAGCGGAGGCGAAUGCGAGGGAGAUAGUGCACGGCGUCCGGCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[86.46907806 414.80374146]
[97.42105103 403.64184570]
[95.79926300 388.72976685]
[94.17748260 373.81768799]
[92.55569458 358.90560913]
[90.93390656 343.99356079]
[80.08751678 354.35482788]
[65.08780670 354.26147461]
[54.37119675 343.76605225]
[53.96511841 328.77154541]
[64.09796906 317.71145630]
[79.07064056 316.80642700]
[90.46178436 326.56518555]
[91.27387238 311.58718872]
[92.08595276 296.60919189]
[92.89803314 281.63119507]
[93.71012115 266.65316772]
[86.67321014 253.52568054]
[95.14628601 240.16464233]
[95.95837402 225.18664551]
[96.77045441 210.20863342]
[97.37964630 195.22100830]
[97.78583527 180.22651672]
[97.58272552 165.22789001]
[96.56790161 150.26225281]
[95.35051727 135.31173706]
[94.13314056 120.36122131]
[83.50997925 113.30709076]
[78.85894012 101.43358612]
[81.86447906 89.04087830]
[91.43807983 80.61720276]
[90.62599945 65.63919830]
[89.81391144 50.66119766]
[89.00183105 35.68319702]
[87.58211517 20.75053215]
[85.55711365 5.88784885]
[83.53211212 -8.97483540]
[81.50711823 -23.83751869]
[71.97762299 -36.46682358]
[77.92591095 -50.12211990]
[65.62812042 -59.68256378]
[63.78620529 -74.78428650]
[72.97640991 -86.44943237]
[70.95140839 -101.31211853]
[68.72534180 -116.14601898]
[66.29861450 -130.94841003]
[63.87188339 -145.75080872]
[61.44515228 -160.55320740]
[49.44916916 -174.44207764]
[56.12378311 -190.61045837]
[53.29710388 -205.34170532]
[40.07706070 -214.00230408]
[36.93488312 -229.49108887]
[45.73477173 -242.61882019]
[61.25590515 -245.59707642]
[74.28987122 -236.65887451]
[77.10385132 -221.10713196]
[68.02835846 -208.16838074]
[70.85504150 -193.43713379]
[80.74187469 -186.32377625]
[83.15567780 -173.97499084]
[76.24755096 -162.97993469]
[78.67427826 -148.17753601]
[81.10101318 -133.37515259]
[83.52774048 -118.57274628]
[87.77153015 -112.39917755]
[85.81409454 -103.33712006]
[87.83909607 -88.47443390]
[99.81507874 -79.69312286]
[102.08044434 -64.64909363]
[92.78859711 -52.14712143]
[102.17324829 -40.58089447]
[96.36979675 -25.86252022]
[98.39479828 -10.99983501]
[100.41979980 3.86284852]
[102.44480133 18.72553253]
[105.14855194 21.18164253]
[106.73033142 25.12554550]
[106.47817993 29.98265076]
[103.97982788 34.87111282]
[104.79191589 49.84911346]
[105.60399628 64.82711792]
[106.41608429 79.80511475]
[118.92835236 90.47545624]
[120.04088593 106.88202667]
[109.08365631 119.14384460]
[110.30103302 134.09436035]
[111.51841736 149.04487610]
[115.37815857 157.47428894]
[112.56072235 164.41580200]
[115.57296753 169.00549316]
[116.34877777 173.80686951]
[115.20269012 177.89866638]
[112.78033447 180.63270569]
[112.37414551 195.62719727]
[115.29988861 204.42451477]
[111.74845886 211.02072144]
[110.93637085 225.99871826]
[110.12429047 240.97673035]
[117.10311127 255.17555237]
[108.68811798 267.46527100]
[107.87603760 282.44326782]
[107.06395721 297.42126465]
[106.25186920 312.39926147]
[105.43978882 327.37725830]
[105.84597778 342.37176514]
[107.46776581 357.28384399]
[109.08954620 372.19589233]
[110.71133423 387.10797119]
[112.33312225 402.02005005]
[125.42852020 410.56665039]
[129.91702271 425.54620361]
[123.67930603 439.88583374]
[109.66061401 446.81478882]
[94.48015594 443.06143188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 110]
[3 109]
[4 108]
[5 107]
[6 106]
[13 105]
[14 104]
[15 103]
[16 102]
[17 101]
[19 99]
[20 98]
[21 97]
[22 95]
[23 94]
[24 90]
[25 88]
[26 87]
[27 86]
[31 83]
[32 82]
[33 81]
[34 80]
[35 76]
[36 75]
[37 74]
[38 73]
[40 71]
[43 68]
[44 67]
[45 65]
[46 64]
[47 63]
[48 62]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
