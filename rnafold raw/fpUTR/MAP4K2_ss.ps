%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCGCGGCCUCAGAGCCACGGGCGCCCGCCCCGCCCCGCGCCGCCCCGCGCCGGCUCCGCAGCUCGCGCCCGCCCGCCUGCCGGCCCGCCCGGCGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[14.71946621 167.06365967]
[3.35679722 176.85600281]
[-2.04590774 191.72615051]
[-16.73804092 194.17369080]
[-28.10070801 203.96603394]
[-39.46337891 213.75836182]
[-50.82604599 223.55068970]
[-56.22875214 238.42083740]
[-70.92088318 240.86839294]
[-82.28355408 250.66072083]
[-93.64621735 260.45306396]
[-94.56606293 276.23056030]
[-106.42823792 286.67395020]
[-122.19512939 285.58734131]
[-132.51251221 273.61541748]
[-131.25927734 257.86090088]
[-119.17893982 247.67065430]
[-103.43855286 249.09039307]
[-92.07588196 239.29806519]
[-80.71321869 229.50572205]
[-76.12324524 215.33598328]
[-60.61837769 212.18801880]
[-49.25571060 202.39569092]
[-37.89303970 192.60336304]
[-26.53037262 182.81103516]
[-21.94040108 168.64129639]
[-6.43553448 165.49333191]
[4.92713404 155.70098877]
[2.52311039 146.97772217]
[3.17962050 137.90895081]
[6.85035992 129.54225159]
[13.13914776 122.85395050]
[21.34248924 118.63521576]
[30.52820396 117.39856720]
[39.64132690 119.31575775]
[47.62527466 124.19459534]
[60.30921555 116.18724823]
[72.99315643 108.17989349]
[85.67709351 100.17254639]
[92.35354614 87.88772583]
[106.31555176 87.14351654]
[118.99949646 79.13616943]
[131.68344116 71.12881470]
[144.36737061 63.12146378]
[157.05131531 55.11411285]
[169.73526001 47.10676193]
[171.20150757 33.62098694]
[180.07717896 23.62247467]
[192.91291809 20.65589905]
[204.91406250 25.59699249]
[217.82971191 17.96902466]
[225.77760315 4.28905487]
[240.67100525 4.47899437]
[253.58665466 -3.14897251]
[266.50231934 -10.77693939]
[279.41796875 -18.40490532]
[292.33361816 -26.03287315]
[305.24926758 -33.66083908]
[307.11450195 -47.09724045]
[316.28259277 -56.82835007]
[329.20059204 -59.41325760]
[341.05004883 -54.11869812]
[354.18606567 -61.36058426]
[363.24108887 -77.30830383]
[380.70050049 -76.46334839]
[393.61614990 -84.09131622]
[394.95147705 -99.55082703]
[405.14407349 -111.25086212]
[420.27465820 -114.69252014]
[434.52520752 -108.55240631]
[442.41613770 -95.19152832]
[440.91317749 -79.74741364]
[430.59426880 -68.15863800]
[415.42724609 -64.88131714]
[401.24411011 -71.17565918]
[388.32846069 -63.54769135]
[384.95550537 -51.82604218]
[374.11972046 -45.39539719]
[361.42794800 -48.22455978]
[348.29193115 -40.98267365]
[344.37738037 -24.70196724]
[329.64904785 -16.05256271]
[312.87722778 -20.74518585]
[299.96157837 -13.11721897]
[287.04592896 -5.48925209]
[274.13027954 2.13871479]
[261.21463013 9.76668167]
[248.29896545 17.39464760]
[241.27488708 30.52901459]
[225.45768738 30.88467979]
[212.54202271 38.51264572]
[209.11166382 54.90220642]
[194.64608765 63.98426056]
[177.74259949 59.79070282]
[165.05867004 67.79805756]
[152.37472534 75.80540466]
[139.69078064 83.81275177]
[127.00684357 91.82010651]
[114.32290649 99.82745361]
[107.64645386 112.11227417]
[93.68444824 112.85648346]
[81.00050354 120.86383057]
[68.31656647 128.87118530]
[55.63262558 136.87854004]
[52.78400421 158.34753418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[4 25]
[5 24]
[6 23]
[7 22]
[9 20]
[10 19]
[11 18]
[36 104]
[37 103]
[38 102]
[39 101]
[41 99]
[42 98]
[43 97]
[44 96]
[45 95]
[46 94]
[50 91]
[51 90]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[62 80]
[63 79]
[65 76]
[66 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
