%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACUAAGGCUGUGGGUAAGGCGACAUUUCCUGCCCCCGGGGCCAGGGUGAGAGGAGAGAUGAUGAGUUGCUGAGUGUGCACACCUUUCCGGAACACAUACACACACCCUGCUCUGGGAUCCCUUGUGAGGCUGCCCUC\
) } def
/len { sequence length } bind def

/coor [
[112.04293823 229.44894409]
[106.86072540 243.67651367]
[97.33768463 255.44894409]
[84.50679779 263.48928833]
[69.75985718 266.92535400]
[54.69651794 265.38446045]
[40.95072174 259.03372192]
[30.01351738 248.56202698]
[23.07129097 235.10528564]
[20.87708092 220.12315369]
[23.66889954 205.24079895]
[31.14391327 192.07254028]
[42.49128723 182.04678345]
[56.48014069 176.25103760]
[71.59307098 175.31398010]
[75.55599976 160.84695435]
[79.51892853 146.37991333]
[83.48186493 131.91287231]
[87.44479370 117.44583130]
[77.91564941 108.44925690]
[74.80342865 94.46665955]
[60.47689438 98.91078949]
[46.15035629 103.35492706]
[31.82382011 107.79905701]
[26.95962143 122.53402710]
[14.34377670 131.56840515]
[-1.17266583 131.42829895]
[-13.62331772 122.16758728]
[-18.22064781 107.34718323]
[-13.19688988 92.66585541]
[-0.48378128 83.76885986]
[15.03022861 84.07728577]
[27.37968636 93.47251892]
[41.70622253 89.02838898]
[56.03276062 84.58425140]
[70.35929871 80.14012146]
[81.14165497 69.71223450]
[86.06202698 55.54219818]
[90.98239899 41.37216187]
[95.90277100 27.20212364]
[100.82314301 13.03208828]
[105.74351501 -1.13794816]
[110.66389465 -15.30798435]
[115.58426666 -29.47802162]
[115.45027161 -38.69422913]
[120.77532959 -43.90683746]
[126.01016998 -57.96373367]
[131.24501038 -72.02062988]
[136.47985840 -86.07752991]
[141.71470642 -100.13442993]
[146.94955444 -114.19132996]
[131.68719482 -132.35343933]
[129.95764160 -155.90040588]
[142.28388977 -175.90516663]
[163.88519287 -184.86119080]
[165.55279541 -199.76820374]
[167.22041321 -214.67521667]
[168.88801575 -229.58222961]
[170.55561829 -244.48925781]
[172.22322083 -259.39627075]
[166.06809998 -273.97106934]
[175.17237854 -285.75927734]
[176.83998108 -300.66629028]
[164.17898560 -292.62271118]
[149.49520874 -295.68646240]
[141.10716248 -308.12191772]
[143.76678467 -322.88424683]
[155.96734619 -331.61044312]
[170.79710388 -329.35699463]
[179.85482788 -317.40066528]
[183.49446106 -331.95239258]
[187.13409424 -346.50411987]
[177.80610657 -359.05493164]
[178.77957153 -374.66220093]
[189.59481812 -385.95663452]
[205.14524841 -387.60534668]
[218.08840942 -378.82989502]
[222.31292725 -363.77374268]
[215.82414246 -349.54598999]
[201.68583679 -342.86450195]
[198.04618835 -328.31274414]
[194.40655518 -313.76101685]
[191.74699402 -298.99868774]
[190.07939148 -284.09167480]
[196.35379028 -270.58309937]
[187.13023376 -257.72866821]
[185.46263123 -242.82164001]
[183.79502869 -227.91462708]
[182.12742615 -213.00761414]
[180.45982361 -198.10060120]
[178.79220581 -183.19358826]
[185.73893738 -180.22497559]
[191.96763611 -175.93307495]
[197.22908020 -170.48495483]
[201.31178284 -164.09400940]
[204.05056763 -157.01164246]
[205.33317566 -149.51737976]
[205.10494995 -141.90783691]
[203.37104797 -134.48490906]
[200.19650269 -127.54393768]
[195.70370483 -121.36181641]
[190.06771851 -116.18602753]
[183.50949097 -112.22470856]
[176.28712463 -109.63828278]
[168.68580627 -108.53298950]
[161.00645447 -108.95648193]
[155.77160645 -94.89958191]
[150.53675842 -80.84268951]
[145.30191040 -66.78578949]
[140.06706238 -52.72888947]
[134.83222961 -38.67199326]
[129.75430298 -24.55764771]
[124.83393097 -10.38761139]
[119.91355133 3.78242469]
[114.99317932 17.95246124]
[110.07280731 32.12249756]
[105.15243530 46.29253387]
[100.23206329 60.46257019]
[95.31169128 74.63260651]
[109.82754517 77.31610870]
[119.90223694 87.23247528]
[122.56465149 100.47838593]
[117.58318329 112.36212158]
[126.07238770 124.72874451]
[134.56159973 137.09536743]
[149.58444214 143.67153931]
[151.13159180 159.99754333]
[137.61145020 169.27857971]
[122.93238831 161.96713257]
[122.19496918 145.58457947]
[113.70576477 133.21795654]
[105.21656036 120.85132599]
[103.57507324 121.19455719]
[101.91183472 121.40876770]
[97.94889832 135.87580872]
[93.98596954 150.34283447]
[90.02304077 164.80987549]
[86.06010437 179.27691650]
[98.58576202 187.78495789]
[107.66818237 199.90057373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[21 36]
[22 35]
[23 34]
[24 33]
[37 119]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[44 112]
[46 111]
[47 110]
[48 109]
[49 108]
[50 107]
[51 106]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[62 84]
[63 83]
[70 82]
[71 81]
[72 80]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
