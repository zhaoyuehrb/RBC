%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUGAAUGCCCUGGAGUUGUGAGGGUGUGAGGGUCGCGUUCCUGCUGUCUGGACUUUUUCUGUCCCACUGAGACGCAGCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[13.40648556 194.96629333]
[3.52001500 200.33735657]
[-7.37782288 203.08221436]
[-18.60286713 203.03521729]
[-29.45207405 200.20578003]
[-39.24754715 194.77743530]
[-47.37889862 187.09580994]
[-53.34127808 177.64677429]
[-67.78503418 181.69372559]
[-82.22879791 185.74067688]
[-96.67255402 189.78762817]
[-111.11631775 193.83457947]
[-125.56007385 197.88153076]
[-140.00382996 201.92848206]
[-151.20475769 213.10209656]
[-165.54756165 209.08549500]
[-174.63212585 222.30859375]
[-190.64410400 223.30671692]
[-201.30047607 211.31416321]
[-198.42658997 195.53060913]
[-184.22705078 188.06385803]
[-169.59451294 194.64173889]
[-159.42671204 183.75758362]
[-144.05078125 187.48472595]
[-129.60702515 183.43777466]
[-115.16326904 179.39082336]
[-100.71950531 175.34387207]
[-86.27574921 171.29692078]
[-71.83198547 167.24996948]
[-57.38822937 163.20301819]
[-55.33257675 144.09768677]
[-45.41781998 127.58515930]
[-29.44633484 116.74043274]
[-10.35240555 113.60147095]
[8.33681965 118.78633881]
[23.15288353 131.37193298]
[36.47116089 124.47095490]
[49.78944016 117.56997681]
[63.10771942 110.66899872]
[76.42599487 103.76802826]
[78.68427277 89.24958038]
[89.01675415 78.80329895]
[103.50959015 76.38613892]
[116.67302704 82.91369629]
[129.99130249 76.01271820]
[143.30958557 69.11174774]
[156.62786865 62.21076965]
[162.97041321 55.34026337]
[170.52073669 55.31034088]
[184.06686401 48.86808777]
[197.61299133 42.42583847]
[211.15910339 35.98358536]
[224.10659790 28.40977478]
[236.36114502 19.75956917]
[248.61569214 11.10936546]
[260.87023926 2.45916033]
[261.99365234 -13.13801861]
[272.91693115 -24.32799339]
[288.48248291 -25.82719803]
[301.34072876 -16.92775726]
[305.42034912 -1.83171284]
[298.79513550 12.33304501]
[284.59326172 18.87834930]
[269.52044678 14.71370888]
[257.26589966 23.36391449]
[245.01135254 32.01411819]
[232.75680542 40.66432190]
[232.47256470 43.18647385]
[231.20016479 45.75725937]
[228.91648865 48.01613617]
[225.72265625 49.60062790]
[221.84135437 50.18714523]
[217.60136414 49.52970505]
[204.05523682 55.97195816]
[190.50910950 62.41420746]
[176.96299744 68.85646057]
[163.52883911 75.52904510]
[150.21055603 82.43002319]
[136.89228821 89.33100128]
[123.57400513 96.23197174]
[121.31572723 110.75041962]
[110.98324585 121.19670105]
[96.49040985 123.61386108]
[83.32697296 117.08630371]
[70.00869751 123.98728180]
[56.69041443 130.88825989]
[43.37213898 137.78923035]
[30.05385971 144.69020081]
[32.09653473 155.82084656]
[31.31239891 167.09709167]
[27.75702667 177.81309509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[16 22]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[44 80]
[45 79]
[46 78]
[47 77]
[49 76]
[50 75]
[51 74]
[52 73]
[53 67]
[54 66]
[55 65]
[56 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
