%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCUUUAUGUUCACAUCUGGAGGCCACACCCUACCUUCUAAGUCACCAGGCCAUCAAGUCCAGACAAAGGGAUCGAAAGAGUGAGACAGUGCCAGCCACCUCCCACCCAAGCCACUAGCAAGACUCCACA\
) } def
/len { sequence length } bind def

/coor [
[65.75741577 125.96196747]
[58.94582748 112.69384003]
[57.07967377 97.89659119]
[42.45575714 94.55877686]
[27.83183861 91.22096252]
[13.20791912 87.88314819]
[-1.41599917 84.54533386]
[-16.03991699 81.20751953]
[-8.02634239 93.88752747]
[-7.75002766 108.88498688]
[-15.29108715 121.85157013]
[-28.46309280 129.02780151]
[-43.44699097 128.33302307]
[-55.89840698 119.96868134]
[-62.20721054 106.35989380]
[-60.54425049 91.45236206]
[-51.39168167 79.56832123]
[-37.40560532 74.15362549]
[-51.14220428 68.12819672]
[-64.87880707 62.10276413]
[-78.61540222 56.07733154]
[-92.35200500 50.05189896]
[-106.08860016 44.02647018]
[-120.21735382 38.98876190]
[-134.66732788 34.96406555]
[-149.11730957 30.93936920]
[-163.56727600 26.91467285]
[-171.09158325 39.98508835]
[-181.63056946 50.77307510]
[-194.52172852 58.60049820]
[-208.95474243 62.97531509]
[-224.02232361 63.62252426]
[-238.77731323 60.50144196]
[-252.29219055 53.80825806]
[-263.71740723 43.96371078]
[-272.33477783 31.58664322]
[-277.60260010 17.45508385]
[-279.18972778 2.45735478]
[-276.99636841 -12.46377373]
[-271.16046143 -26.37034607]
[-262.04879761 -38.38818359]
[-250.23416138 -47.76184082]
[-236.45924377 -53.90207291]
[-221.58993530 -56.42290115]
[-206.56094360 -55.16587067]
[-192.31698608 -50.20999146]
[-179.75347900 -41.86680222]
[-169.66014099 -30.66075516]
[-162.67146301 -17.29627800]
[-159.22677612 -2.61346841]
[-159.54258728 12.46469688]
[-145.09260559 16.48939323]
[-130.64262390 20.51408958]
[-116.19265747 24.53878593]
[-122.02364349 10.71852589]
[-116.57692719 -3.25764370]
[-102.93198395 -9.48785496]
[-88.80341339 -4.44966078]
[-82.17924500 9.00843620]
[-86.80465698 23.27747726]
[-100.06317139 30.28986931]
[-86.32656860 36.31529999]
[-72.58997345 42.34073257]
[-58.85337067 48.36616516]
[-45.11677170 54.39159393]
[-31.38017273 60.41702652]
[-21.31645203 59.06352997]
[-12.70210361 66.58360291]
[1.92181480 69.92141724]
[16.54573441 73.25923157]
[31.16965294 76.59704590]
[45.79357147 79.93486023]
[60.41748810 83.27267456]
[68.51911926 70.75051117]
[80.41297150 61.75177383]
[94.66629791 57.36046219]
[109.56213379 58.10556030]
[123.30609894 63.89730835]
[134.24258423 74.03803253]
[141.05416870 87.30615997]
[142.92031860 102.10340881]
[157.54425049 105.44122314]
[172.16816711 108.77903748]
[186.79208374 112.11685181]
[201.37834167 102.54282379]
[218.05867004 106.35834503]
[226.68582153 120.74451447]
[239.76802063 112.28911591]
[254.63195801 115.53229523]
[262.61224365 128.05628967]
[277.31094360 131.04776001]
[292.00961304 134.03924561]
[306.70828247 137.03073120]
[311.83712769 135.30216980]
[316.61764526 135.73582458]
[320.26525879 137.81710815]
[322.32498169 140.78971863]
[336.77496338 144.81442261]
[346.11935425 132.82482910]
[359.34313965 125.32817841]
[374.42980957 123.46767426]
[389.07870483 127.52701569]
[401.05599976 136.88719177]
[408.53524780 150.12083435]
[410.37588501 165.20991516]
[406.29727173 179.85345459]
[396.92135620 191.81843567]
[383.67788696 199.28025818]
[368.58639526 201.10107422]
[353.94824219 197.00320435]
[341.99560547 187.61154175]
[334.55120850 174.35827637]
[332.75024414 159.26440430]
[318.30026245 155.23970032]
[303.71679688 151.72941589]
[289.01812744 148.73793030]
[274.31945801 145.74644470]
[259.62078857 142.75495911]
[247.38024902 151.16358948]
[232.43109131 148.33918762]
[223.69433594 135.44319153]
[213.99954224 144.01455688]
[200.94017029 145.42855835]
[189.29434204 138.94108582]
[183.45426941 126.74076843]
[168.83035278 123.40295410]
[154.20643616 120.06513977]
[139.58250427 116.72732544]
[131.48088074 129.24949646]
[119.58702850 138.24822998]
[105.33370209 142.63954163]
[90.43786621 141.89443970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[24 54]
[25 53]
[26 52]
[27 51]
[81 128]
[82 127]
[83 126]
[84 125]
[87 121]
[90 118]
[91 117]
[92 116]
[93 115]
[97 114]
[98 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
