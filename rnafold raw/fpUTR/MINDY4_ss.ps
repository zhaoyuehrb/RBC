%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUGCGCCGGACAGACCCAGUUGCCUGGUGCUGCGGCCCGGCGUGGGCCUCGUGGGCAGAGCCAGAGCCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[60.11850739 156.75482178]
[54.23672485 142.95611572]
[54.68572235 127.96282959]
[61.38267136 114.54080200]
[73.09218597 105.16597748]
[87.65116119 101.56782532]
[74.66077423 94.06782532]
[61.67039490 86.56782532]
[48.68001556 79.06782532]
[35.68963242 71.56782532]
[22.69925308 64.06782532]
[9.70887184 56.56782150]
[-11.45206738 58.31515121]
[-21.87223434 40.69105911]
[-35.67192459 34.81156158]
[-49.47161865 28.93206024]
[-63.98416519 34.59101105]
[-77.89525604 28.43178368]
[-83.20076752 14.56141281]
[-97.00045776 8.68191433]
[-110.80014801 2.80241466]
[-124.59984589 -3.07708430]
[-140.80534363 -0.56432199]
[-150.87196350 -13.51016903]
[-144.44404602 -28.59704781]
[-128.13407898 -30.30487061]
[-118.72034454 -16.87677574]
[-104.92065430 -10.99727726]
[-91.12096405 -5.11777782]
[-77.32126617 0.76172137]
[-63.64266968 -5.02027512]
[-49.56406403 0.74579138]
[-43.59211731 15.13236904]
[-29.79242706 21.01186943]
[-15.99273491 26.89136696]
[-7.97518110 22.05707359]
[1.51712692 21.61479759]
[10.20235825 25.80450630]
[15.92910576 33.73659897]
[17.20887184 43.57744217]
[30.19925308 51.07744217]
[43.18963242 58.57744217]
[56.18001556 66.07743835]
[69.17039490 73.57743835]
[82.16077423 81.07743835]
[95.15116119 88.57743835]
[103.62414551 88.18120575]
[110.33937836 93.31027985]
[125.29073334 94.51728058]
[140.24209595 95.72428131]
[149.33050537 93.24858093]
[155.76716614 97.29283142]
[170.65780640 99.10088348]
[179.83851624 96.99314880]
[186.10713196 101.29330444]
[200.91288757 103.69947052]
[215.71862793 106.10563660]
[228.39376831 96.66548920]
[244.01933289 99.03560638]
[253.32495117 111.80983734]
[250.78976440 127.40946960]
[237.91784668 136.57949829]
[222.34590149 133.87953186]
[213.31246948 120.91139221]
[198.50671387 118.50522614]
[183.70095825 116.09905243]
[168.84974670 113.99151611]
[153.95912170 112.18347168]
[139.03509521 110.67563629]
[124.08374023 109.46864319]
[109.13237762 108.26164246]
[119.07167816 119.49597931]
[123.38165283 133.86344910]
[121.26725769 148.71366882]
[113.11851501 161.30725098]
[100.43863678 169.32102966]
[85.56667328 171.27671814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[14 35]
[15 34]
[16 33]
[19 30]
[20 29]
[21 28]
[22 27]
[48 71]
[49 70]
[50 69]
[52 68]
[53 67]
[55 66]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
