%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAUGCUGAGACAGACUCCCAGAAGAUCUGAGCGAGUCGCGUAGCUGAGCCCGGCAGGGGCUGGGGUGGUGCUGCUGCU\
) } def
/len { sequence length } bind def

/coor [
[101.14810181 146.00730896]
[99.69249725 160.93650818]
[93.37709045 174.54223633]
[82.91395569 185.29039001]
[69.48284149 191.96910095]
[54.59814072 193.82531738]
[39.93813324 190.64976501]
[27.15577316 182.80047607]
[17.69230652 171.16249084]
[12.61475945 157.04801941]
[12.49563980 142.04847717]
[17.34837723 127.85514069]
[26.62581635 116.06832123]
[39.28189850 108.01701355]
[53.88962555 104.60902405]
[40.89924622 97.10902405]
[27.90886307 89.60902405]
[14.91848278 82.10902405]
[1.92810154 74.60902405]
[-11.20527172 67.36233521]
[-24.60976219 60.63034821]
[-38.14227295 54.15955734]
[-51.67478561 47.68876648]
[-65.20729828 41.21797562]
[-82.10514832 39.84000778]
[-85.45882416 23.22106552]
[-70.41774750 15.39787388]
[-58.73650360 27.68546486]
[-45.20399475 34.15625763]
[-31.67148209 40.62704849]
[-18.13897133 47.09783936]
[-10.54987049 47.14281082]
[-4.21461916 54.09091187]
[3.36702991 54.43011856]
[9.42810154 61.61864471]
[22.41848183 69.11864471]
[35.40886307 76.61864471]
[48.39924622 84.11864471]
[61.38962555 91.61864471]
[76.04963684 94.79420471]
[90.97917175 93.34204102]
[105.87775421 91.60064697]
[120.73975372 89.57067871]
[135.60176086 87.54071045]
[150.46377563 85.51073456]
[165.32577515 83.48076630]
[180.14562988 81.16298676]
[192.39257812 71.14685822]
[206.27005005 76.55654144]
[218.51699829 66.54041290]
[232.39448547 71.95010376]
[247.16661072 69.34538269]
[261.93872070 66.74065399]
[276.71084595 64.13593292]
[291.48294067 61.53121185]
[306.25506592 58.92648697]
[318.46289062 47.97656250]
[333.96350098 53.33037949]
[336.81118774 69.48038483]
[324.07650757 79.81284332]
[308.85980225 73.69860840]
[294.08767700 76.30332947]
[279.31555176 78.90805054]
[264.54345703 81.51277161]
[249.77133179 84.11749268]
[234.99920654 86.72222137]
[223.80886841 96.55204010]
[208.87477112 91.32865906]
[197.68443298 101.15847778]
[182.75035095 95.93510437]
[176.55006409 100.31151581]
[167.35574341 98.34277344]
[152.49374390 100.37274170]
[137.63172913 102.40270996]
[122.76972961 104.43268585]
[107.90772247 106.46265411]
[100.77365112 110.68422699]
[92.43133545 108.27158356]
[77.50179291 109.72374725]
[89.38986206 118.87108612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 33]
[21 31]
[22 30]
[23 29]
[24 28]
[40 79]
[41 78]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[47 70]
[49 68]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
