%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGCGGAGUCUGCGCGGGGUUGGGCGGAGCCUGCGCGGGGCCGGUAGGAUCGCGUCGGGAGCCGGUACCGAGGCCCGAGCCGCGGGAGUCGAGCGAAGGCAGCGCCGAGGCCGCGGUUUCCCCCUGGGCCUCCCCAGCAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[83.53858185 324.51544189]
[67.17266846 323.47183228]
[60.13696289 308.65863037]
[69.66918945 295.31439209]
[70.62375641 280.34478760]
[71.57832336 265.37518311]
[64.11159515 258.27618408]
[61.77241135 248.01623535]
[65.58013916 237.96994019]
[74.49030304 231.58076477]
[72.05449677 224.54766846]
[76.27464294 216.36665344]
[78.17990875 201.48814392]
[80.08517456 186.60963440]
[81.99044800 171.73112488]
[74.82743835 161.92967224]
[76.33939362 149.47949219]
[86.25508118 141.16018677]
[88.47572327 126.32547760]
[90.69635773 111.49076080]
[78.21083069 119.80409241]
[65.23759460 112.27447510]
[66.26267242 97.30953979]
[80.14262390 91.61946106]
[66.60841370 85.15221405]
[46.65615082 87.68836212]
[36.29475021 71.41059113]
[22.49825859 65.52358246]
[8.70176983 59.63656998]
[-5.81385517 65.28762054]
[-19.72159386 59.12082291]
[-25.01955414 45.24756622]
[-38.81604385 39.36055756]
[-52.61253357 33.47354889]
[-66.40901947 27.58653831]
[-80.26721954 21.84628677]
[-94.18555450 16.25344086]
[-108.10388947 10.66059303]
[-122.02222443 5.06774616]
[-135.94055176 -0.52510113]
[-148.13415527 3.81631351]
[-159.63722229 -1.18089581]
[-164.46534729 -12.31941319]
[-178.26184082 -18.20642281]
[-194.46868896 -15.70248032]
[-204.52827454 -28.65380478]
[-198.09214783 -43.73718262]
[-181.78125000 -45.43612671]
[-172.37483215 -32.00291061]
[-158.57833862 -26.11590195]
[-141.32971191 -29.18442345]
[-130.34771729 -14.44343662]
[-116.42937469 -8.85058975]
[-102.51103973 -3.25774217]
[-88.59270477 2.33510494]
[-74.67436981 7.92795229]
[-67.24369812 7.50054979]
[-60.52201462 13.79004955]
[-46.72552490 19.67705917]
[-32.92903519 25.56406784]
[-19.13254547 31.45107651]
[-5.45079994 25.67652702]
[8.62466526 31.45025444]
[14.58877850 45.84008026]
[28.38526917 51.72708893]
[42.18175888 57.61410141]
[51.36270142 52.93885040]
[61.81586456 54.15128708]
[70.01979065 61.08832932]
[73.07566071 71.61801147]
[86.60986328 78.08525085]
[110.08061218 87.99837494]
[124.22377014 83.00127411]
[138.36692810 78.00418091]
[152.51010132 73.00708008]
[166.65325928 68.00998688]
[180.79641724 63.01288986]
[194.93957520 58.01579285]
[208.73606873 52.12878036]
[222.12995911 45.37572479]
[235.52384949 38.62266922]
[248.91773987 31.86961365]
[262.31161499 25.11655807]
[275.70550537 18.36350060]
[289.09939575 11.61044502]
[302.49328613 4.85738897]
[315.88717651 -1.89566731]
[318.61932373 -15.12697029]
[328.34661865 -24.21982765]
[341.34548950 -26.00160599]
[352.81463623 -20.04136467]
[366.34884644 -26.50860786]
[379.88305664 -32.97585297]
[386.33172607 -39.54496002]
[393.77386475 -39.43331146]
[407.44229126 -45.61183167]
[421.11071777 -51.79034805]
[425.16137695 -66.89419556]
[438.00250244 -75.81829834]
[453.57089233 -74.34896088]
[464.51565552 -63.17996979]
[465.66897583 -47.58497620]
[456.48632812 -34.92745972]
[441.30343628 -31.18391037]
[427.28921509 -38.12192154]
[413.62078857 -31.94340324]
[399.95236206 -25.76488304]
[386.35028076 -19.44164658]
[372.81607056 -12.97440147]
[359.28186035 -6.50715733]
[354.39071655 9.55100346]
[339.11355591 17.28523827]
[322.64022827 11.49822044]
[309.24633789 18.25127602]
[295.85244751 25.00433350]
[282.45855713 31.75738907]
[269.06466675 38.51044464]
[255.67079163 45.26350021]
[242.27690125 52.01655579]
[228.88301086 58.76961517]
[215.48912048 65.52266693]
[229.17729187 71.65733337]
[234.70129395 85.60314178]
[228.92674255 99.44707489]
[215.13018799 105.33394623]
[201.13995361 99.92346954]
[194.89424133 86.28561401]
[199.93667603 72.15895081]
[185.79351807 77.15605164]
[171.65036011 82.15314484]
[157.50718689 87.15024567]
[143.36402893 92.14733887]
[129.22087097 97.14443970]
[115.07770538 102.14153290]
[105.53107452 113.71140289]
[103.31043243 128.54611206]
[101.08979797 143.38082886]
[108.24523163 160.31306458]
[96.86894989 173.63639832]
[94.96368408 188.51490784]
[93.05841827 203.39340210]
[91.15315247 218.27191162]
[89.40589905 233.16979980]
[98.44406128 251.13745117]
[86.54792023 266.32977295]
[85.59335327 281.29934692]
[84.63877869 296.26895142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 147]
[5 146]
[6 145]
[10 143]
[12 142]
[13 141]
[14 140]
[15 139]
[18 137]
[19 136]
[20 135]
[24 71]
[25 70]
[27 66]
[28 65]
[29 64]
[32 61]
[33 60]
[34 59]
[35 58]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[43 50]
[44 49]
[72 134]
[73 133]
[74 132]
[75 131]
[76 130]
[77 129]
[78 128]
[79 121]
[80 120]
[81 119]
[82 118]
[83 117]
[84 116]
[85 115]
[86 114]
[87 113]
[91 110]
[92 109]
[93 108]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
