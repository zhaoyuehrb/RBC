%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCCUGCGCCAAGGGGUAGUGAGACCGCGCGGCAACAGCUUGCGGCUGCGGGGAGCUCCCGUGGGCGCUCCGCUGGCUGUGCAGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[84.03630066 228.43266296]
[78.80891418 213.82260132]
[83.19976044 198.93971252]
[95.52046204 189.50679016]
[95.01384735 174.51535034]
[94.50723267 159.52391052]
[94.00062561 144.53247070]
[93.49401093 129.54103088]
[92.98739624 114.54958344]
[81.94251251 104.40017700]
[66.96176910 105.15991211]
[51.98101807 105.91964722]
[41.41398239 117.36410522]
[26.21055222 117.92118073]
[15.36513519 107.77659607]
[1.97456336 116.20293427]
[-11.12826061 109.12018585]
[-26.10900879 109.87992859]
[-41.08975601 110.63966370]
[-51.49740601 122.53320312]
[-67.27206421 123.50051117]
[-79.05490875 112.96769714]
[-79.85538483 97.18369293]
[-69.19857788 85.51287079]
[-53.40699387 84.87931824]
[-41.84949493 95.65891266]
[-26.86874580 94.89917755]
[-11.88799858 94.13944244]
[0.43105012 85.76744843]
[14.60539818 92.79584503]
[24.36886024 81.60610199]
[39.55064392 80.62221527]
[51.22127914 90.93890381]
[66.20202637 90.17916107]
[81.18277740 89.41942596]
[94.44850159 84.11092377]
[104.54917908 88.81570435]
[116.09394836 79.23873901]
[127.63871765 69.66177368]
[139.18348694 60.08480453]
[150.72825623 50.50783539]
[162.27302551 40.93086624]
[167.95434570 26.16492462]
[182.68989563 23.99403381]
[194.23466492 14.41706657]
[205.77943420 4.84009838]
[217.32420349 -4.73686981]
[228.02000427 -15.25352001]
[237.79058838 -26.63489151]
[247.56117249 -38.01626205]
[257.33175659 -49.39763641]
[267.10235596 -60.77900696]
[276.87292480 -72.16037750]
[286.64352417 -83.54174805]
[286.86395264 -99.58329010]
[299.63092041 -109.29841614]
[315.15072632 -105.23452759]
[321.51788330 -90.50907898]
[313.84808350 -76.41818237]
[298.02490234 -73.77116394]
[288.25430298 -62.38979340]
[278.48373413 -51.00841904]
[268.71313477 -39.62704849]
[258.94253540 -28.24567604]
[249.17196655 -16.86430550]
[239.40138245 -5.48293304]
[239.73789978 -2.97124624]
[239.13154602 -0.17305072]
[237.47271729 2.56975150]
[234.77076721 4.88334417]
[231.16140747 6.40178347]
[226.90116882 6.80789900]
[215.35639954 16.38486671]
[203.81163025 25.96183586]
[192.26687622 35.53880310]
[187.41130066 49.61973953]
[171.84999084 52.47563553]
[160.30522156 62.05260468]
[148.76045227 71.62957001]
[137.21568298 81.20654297]
[125.67091370 90.78350830]
[114.12614441 100.36047363]
[107.97884369 114.04296875]
[108.48545074 129.03440857]
[108.99206543 144.02584839]
[109.49868011 159.01730347]
[110.00528717 174.00874329]
[110.51190186 189.00018311]
[123.44130707 197.57981873]
[128.82687378 212.13232422]
[124.59774017 227.06195068]
[112.38009644 236.62797546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 88]
[5 87]
[6 86]
[7 85]
[8 84]
[9 83]
[10 35]
[11 34]
[12 33]
[15 30]
[17 28]
[18 27]
[19 26]
[37 82]
[38 81]
[39 80]
[40 79]
[41 78]
[42 77]
[44 75]
[45 74]
[46 73]
[47 72]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
