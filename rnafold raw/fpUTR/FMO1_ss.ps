%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUUUCCUUCUCACAUUCACACACCAGAGACCCGCUACAGAAGAUUCAAACUGAGCAAAUCGCCUAAUCUUCCAAAUUCUUUUUCCUGGCUUGUUAGAGCAGCCAAGGGUGGGGUGGAGCUUGUGAAUAAAAAGCCUGCUUCAUCUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[131.78341675 302.09939575]
[116.79044342 302.55862427]
[102.52349854 297.92672729]
[90.65952301 288.74816895]
[82.59300995 276.10177612]
[79.27210236 261.47399902]
[81.08713531 246.58421326]
[87.82477570 233.18257141]
[98.69454193 222.84330750]
[104.21929169 208.89781189]
[109.74404144 194.95230103]
[98.20978546 204.54193115]
[86.67552948 214.13154602]
[75.14127350 223.72117615]
[79.67992401 238.22872925]
[78.31630707 253.36837769]
[71.25836945 266.83145142]
[59.58240128 276.56488037]
[45.06888962 281.08444214]
[29.93104553 279.70092773]
[16.47728157 272.62527466]
[6.75919724 260.93652344]
[2.25873065 246.41706848]
[3.66216993 231.28106689]
[10.75550079 217.83662415]
[22.45704079 208.13392639]
[36.98239136 203.65255737]
[52.11654282 205.07591248]
[65.55164337 212.18692017]
[77.08590698 202.59729004]
[88.62016296 193.00765991]
[100.15441895 183.41804504]
[105.68197632 169.47364807]
[103.85056305 154.58587646]
[102.01914978 139.69808960]
[100.18773651 124.81031799]
[98.35631561 109.92253876]
[93.59941101 111.43990326]
[87.79522705 110.59149170]
[82.08103943 106.92541504]
[77.74415588 100.50878906]
[75.99704742 91.96334076]
[65.49918365 81.24909973]
[55.00131989 70.53486633]
[44.50345612 59.82063293]
[34.00558853 49.10639572]
[23.50772476 38.39216232]
[13.00986099 27.67792702]
[0.92482030 31.13357162]
[-11.40736866 29.11075592]
[-21.63598633 22.05770493]
[-27.83806992 11.37546444]
[-28.87981987 -0.86002958]
[-24.62340546 -12.30128956]
[-34.67551422 -23.43480110]
[-44.72762680 -34.56831360]
[-60.61203766 -36.81886292]
[-68.63179016 -50.71357727]
[-62.63481140 -65.59362793]
[-47.22146988 -70.04430389]
[-34.21556854 -60.65143585]
[-33.59411240 -44.62042236]
[-23.54200363 -33.48691177]
[-13.48989391 -22.35339928]
[3.91325974 -25.05937386]
[19.61629295 -16.74415779]
[27.29289818 -0.54592508]
[23.72409630 17.18006325]
[34.22196198 27.89429665]
[44.71982574 38.60853195]
[55.21768951 49.32276917]
[65.71555328 60.03700256]
[76.21341705 70.75123596]
[86.71128082 81.46547699]
[82.63521576 67.02989960]
[72.36553192 56.09676361]
[68.23553467 41.67653275]
[71.16034698 26.96444702]
[80.49189758 15.22041798]
[94.16249084 9.04669285]
[109.14299011 9.81124783]
[122.11402130 17.34467316]
[130.20144653 29.97770691]
[131.61325073 44.91111755]
[126.03661346 58.83595657]
[114.70677948 68.66696930]
[109.18202972 82.61247253]
[120.71628571 73.02285004]
[132.25054932 63.43322372]
[143.68638611 53.72645187]
[155.02262878 43.90354156]
[166.35887146 34.08063126]
[177.69512939 24.25771904]
[182.16688538 16.22207069]
[189.36425781 14.35293198]
[200.89851379 4.76330805]
[206.06645203 -10.80025387]
[222.18122864 -13.84099483]
[232.66532898 -1.23086166]
[226.73362732 14.05792141]
[210.48814392 16.29756546]
[198.95387268 25.88718987]
[187.51803589 35.59396362]
[176.18179321 45.41687393]
[164.84555054 55.23978424]
[153.50930786 65.06269836]
[150.49560547 71.86074066]
[141.84016418 74.96748352]
[130.30590820 84.55710602]
[118.77165222 94.14672852]
[113.24409485 108.09112549]
[115.07550812 122.97890472]
[116.90692902 137.86668396]
[118.73834229 152.75445557]
[120.56975555 167.64222717]
[141.09973145 182.16473389]
[153.19891357 191.03094482]
[165.29809570 199.89715576]
[177.39727783 208.76338196]
[189.49645996 217.62959290]
[201.59564209 226.49581909]
[213.69482422 235.36203003]
[229.11450195 233.15493774]
[241.25848389 242.31889343]
[243.26759338 257.03280640]
[255.36677551 265.89901733]
[269.72845459 260.26470947]
[284.85192871 263.31173706]
[295.91131592 274.06781006]
[299.37762451 289.10070801]
[294.14477539 303.61349487]
[281.88256836 312.97518921]
[266.50375366 314.19848633]
[252.91574097 306.89306641]
[245.45437622 293.39004517]
[246.50054932 277.99819946]
[234.40136719 269.13198853]
[219.76574707 271.64871216]
[207.36915588 262.82946777]
[204.82859802 247.46121216]
[192.72941589 238.59500122]
[180.63023376 229.72877502]
[168.53105164 220.86256409]
[156.43186951 211.99633789]
[144.33268738 203.13012695]
[132.23350525 194.26391602]
[138.60084534 207.84539795]
[144.96818542 221.42689514]
[156.44883728 231.08064270]
[163.99404907 244.04481506]
[166.71696472 258.79559326]
[164.29753113 273.59918213]
[157.02011108 286.71557617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 32]
[12 31]
[13 30]
[14 29]
[33 115]
[34 114]
[35 113]
[36 112]
[37 111]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[54 64]
[55 63]
[56 62]
[87 110]
[88 109]
[89 108]
[90 106]
[91 105]
[92 104]
[93 103]
[95 102]
[96 101]
[116 146]
[117 145]
[118 144]
[119 143]
[120 142]
[121 141]
[122 140]
[125 137]
[126 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
