%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCUGGCUAGAGAAGCCGCAGCCCGCAGUGUCCGACCCAGUCGUCCCGCGCCGGAGCCGGCCCCGUAGCGUGCC\
) } def
/len { sequence length } bind def

/coor [
[78.18641663 334.82223511]
[63.59886551 330.44921875]
[52.05537796 320.51605225]
[45.55592346 306.74371338]
[45.22658157 291.51837158]
[51.12440872 277.47787476]
[62.22756958 267.05484009]
[76.61237335 262.05511475]
[77.83501434 247.10502625]
[79.05765533 232.15493774]
[80.28029633 217.20484924]
[70.47594452 206.05090332]
[71.50290680 190.87197876]
[83.26866150 180.66389465]
[75.61108398 171.07258606]
[76.69120789 158.44082642]
[86.47027588 149.75050354]
[88.30168915 134.86271667]
[90.13311005 119.97494507]
[91.96452332 105.08716583]
[89.59894562 100.05951691]
[90.39072418 94.06942749]
[94.60047913 89.07907867]
[97.63928986 74.39011383]
[100.37783813 59.64222336]
[102.81497955 44.84153748]
[105.25212097 30.04084778]
[96.31119537 17.28555107]
[98.99365234 2.31026721]
[111.20897675 -6.13493109]
[113.64611816 -20.93561745]
[116.08325958 -35.73630524]
[105.64798737 -49.60543060]
[108.28005219 -66.42324829]
[121.90848541 -76.05522919]
[123.73989868 -90.94300842]
[125.57131195 -105.83078003]
[127.40272522 -120.71855927]
[123.33549500 -137.17741394]
[138.02520752 -145.64196777]
[150.22547913 -133.86955261]
[142.29051208 -118.88714600]
[140.45909119 -103.99936676]
[138.62767029 -89.11158752]
[136.79626465 -74.22381592]
[146.15988159 -65.13580322]
[148.52731323 -52.10404205]
[142.79100037 -39.94815826]
[130.88394165 -33.29916382]
[128.44680786 -18.49847603]
[126.00966644 -3.69778919]
[134.87223816 8.21818256]
[132.61146545 23.26290321]
[120.05281067 32.47798920]
[117.61566925 47.27867889]
[115.17852783 62.07936478]
[117.25833893 69.39564514]
[112.32825470 77.42893219]
[109.28944397 92.11788940]
[106.85230255 106.91857910]
[105.02088165 121.80635834]
[103.18946838 136.69413757]
[101.35805511 151.58190918]
[108.99533081 168.19161987]
[98.21875000 181.88653564]
[108.16960144 193.87062073]
[106.71669769 209.01472473]
[95.23038483 218.42749023]
[94.00774384 233.37757874]
[92.78510284 248.32766724]
[91.56246185 263.27774048]
[104.94379425 270.54821777]
[114.20592499 282.63677979]
[117.74414062 297.44894409]
[114.94541931 312.41848755]
[106.29465485 324.95181274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 71]
[9 70]
[10 69]
[11 68]
[14 65]
[17 63]
[18 62]
[19 61]
[20 60]
[23 59]
[24 58]
[25 56]
[26 55]
[27 54]
[30 51]
[31 50]
[32 49]
[35 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
