%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGCUGCCCAAGCCGCCCGCCGCCGCCGCCGCCGCCGCGGCCGAGGCGCCCGGCGCCGGCGCGGGC\
) } def
/len { sequence length } bind def

/coor [
[52.95121002 187.20854187]
[46.11869431 194.17440796]
[36.91741943 196.96928406]
[27.64101791 195.03770447]
[16.55588531 205.14312744]
[5.47075081 215.24856567]
[3.29647255 231.14360046]
[-10.55958939 239.22994995]
[-25.46825027 233.30447388]
[-29.99286079 217.91267395]
[-20.66252899 204.86183167]
[-4.63468361 204.16343689]
[6.45044994 194.05799866]
[17.53558350 183.95256042]
[21.43678856 163.89849854]
[41.86890030 158.31362915]
[51.45160294 146.77360535]
[61.03430557 135.23359680]
[70.61700439 123.69359589]
[80.19970703 112.15358734]
[89.78240967 100.61357117]
[92.21584320 92.61412811]
[100.08398438 88.77525330]
[110.18941498 77.69011688]
[120.29485321 66.60498047]
[130.40028381 55.51985168]
[133.97946167 40.10881424]
[148.27171326 35.91583252]
[158.37715149 24.83069801]
[168.48257446 13.74556446]
[178.58801270 2.66043091]
[188.69345093 -8.42470264]
[192.04125977 -26.36829376]
[208.70964050 -31.36258125]
[218.29234314 -42.90259171]
[227.87504578 -54.44260025]
[237.45774841 -65.98261261]
[233.49624634 -80.98548126]
[239.14115906 -95.43936157]
[252.22189331 -103.78643799]
[267.70867920 -102.81709290]
[279.64648438 -92.90406036]
[283.44500732 -77.85910034]
[277.64361572 -63.46730804]
[264.47311401 -55.26261902]
[248.99775696 -56.39990997]
[239.41505432 -44.85989761]
[229.83235168 -33.31988907]
[220.24966431 -21.77987862]
[221.00621033 -9.49331570]
[212.81951904 0.23582624]
[199.77857971 1.68073177]
[189.67314148 12.76586533]
[179.56771851 23.85099983]
[169.46228027 34.93613434]
[159.35684204 46.02126694]
[156.50047302 60.63941956]
[141.48542786 65.62528229]
[131.37998962 76.71041870]
[121.27455139 87.79555511]
[111.16912079 98.88068390]
[101.32241821 110.19627380]
[91.73972321 121.73628235]
[82.15702057 133.27629089]
[72.57431793 144.81629944]
[62.99161148 156.35630798]
[53.40891266 167.89633179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[23 61]
[24 60]
[25 59]
[26 58]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[34 49]
[35 48]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
