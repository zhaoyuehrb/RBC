%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGAGAGACACAGAGUCCGGCAUUGGUCCCAGGCAGCAGUUAGCCCGCCGCCCGCCUGUGUGUCCCCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[116.42996216 312.77301025]
[115.81008911 297.78582764]
[104.15302277 282.57968140]
[112.99845123 264.68557739]
[111.14306641 249.80075073]
[101.89091492 238.12826538]
[107.86181641 223.47703552]
[106.00642395 208.59222412]
[96.75427246 196.91973877]
[102.72517395 182.26849365]
[100.86978912 167.38368225]
[99.01439667 152.49887085]
[97.15900421 137.61405945]
[95.30361938 122.72925568]
[93.44822693 107.84444427]
[89.30056000 100.63867188]
[91.83689880 92.30777740]
[90.59821320 77.35900879]
[81.16982269 68.28392029]
[80.59531403 55.61536407]
[88.63435364 46.33662033]
[88.01448059 31.34943390]
[87.39460754 16.36224747]
[84.24904633 11.46874046]
[83.58596802 6.38040209]
[85.01176453 2.15620017]
[87.74302673 -0.49311373]
[88.98171997 -15.44188118]
[90.22040558 -30.39064789]
[82.84764862 -37.06400299]
[79.59288788 -46.31188965]
[81.11667633 -55.85443115]
[86.91852570 -63.40594101]
[95.48975372 -67.22235107]
[98.56798553 -81.90310669]
[101.64620972 -96.58385468]
[91.13208771 -107.99581909]
[89.36721039 -123.41220093]
[97.03020477 -136.90509033]
[111.17450714 -143.28619385]
[126.36132812 -140.10185242]
[136.75103760 -128.57650757]
[138.34857178 -113.14189148]
[130.53965759 -99.73291779]
[116.32696533 -93.50563049]
[113.24873352 -78.82487488]
[110.17050171 -64.14411926]
[118.67167664 -45.52687073]
[105.16917419 -29.15195847]
[103.93048859 -14.20319080]
[102.69179535 0.74557644]
[102.38179016 15.74237251]
[103.00166321 30.72955894]
[103.62154388 45.71674728]
[113.83883667 59.83065033]
[105.54697418 76.12031555]
[106.78566742 91.06908417]
[108.33303833 105.98905945]
[110.18843079 120.87387085]
[112.04381561 135.75868225]
[113.89920807 150.64347839]
[115.75459290 165.52828979]
[117.60998535 180.41310120]
[126.99485016 193.15025330]
[120.89123535 206.73683167]
[122.74662018 221.62164307]
[132.13148499 234.35877991]
[126.02787018 247.94537354]
[127.88326263 262.83016968]
[137.11946106 269.23580933]
[141.06773376 279.52084351]
[138.59260559 290.02685547]
[130.79727173 297.16595459]
[131.41714478 312.15313721]
[134.40193176 331.30361938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[4 69]
[5 68]
[7 66]
[8 65]
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[17 57]
[18 56]
[21 54]
[22 53]
[23 52]
[27 51]
[28 50]
[29 49]
[34 47]
[35 46]
[36 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
