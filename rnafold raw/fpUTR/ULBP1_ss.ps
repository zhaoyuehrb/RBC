%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUUAUAAACAGCCGUGGUGUGAGCCUCGAAGGGAACCAUCAGCGCCUCCUGUCCACGGAGCUCCAGGUCUACA\
) } def
/len { sequence length } bind def

/coor [
[126.46554565 325.35589600]
[119.95729065 311.84136963]
[113.44902802 298.32681274]
[106.94077301 284.81228638]
[101.55207062 298.81091309]
[90.05496216 308.44506836]
[75.32942200 311.30136108]
[61.06414032 306.66439819]
[50.83250046 295.69564819]
[47.19748306 281.14273071]
[51.06964874 266.65115356]
[61.47903061 255.85092163]
[75.81813049 251.44749451]
[90.49506378 254.54388428]
[101.83236694 264.36306763]
[101.22053528 249.37554932]
[100.60871124 234.38803101]
[99.99687958 219.40052795]
[99.38504791 204.41300964]
[98.77322388 189.42549133]
[84.90525818 180.88900757]
[78.70162201 165.65457153]
[82.74098969 149.53962708]
[95.64991760 138.82250977]
[94.42728424 123.87242126]
[93.20464325 108.92233276]
[91.67729950 94.00029755]
[89.54257202 79.15297699]
[87.10543060 64.35228729]
[82.50711823 56.12459564]
[84.88362122 48.89923859]
[83.05220795 34.01145935]
[73.68786621 21.25921440]
[79.81335449 7.68248129]
[77.98194122 -7.20529652]
[70.04696655 -22.18770409]
[82.24723816 -33.96011734]
[96.93695068 -25.49556732]
[92.86972046 -9.03671169]
[94.70113373 5.85106611]
[103.93447113 17.53843880]
[97.93997955 32.18004608]
[99.77140045 47.06782150]
[101.90612030 61.91514587]
[104.34326172 76.71583557]
[108.65911865 82.97897339]
[106.56507111 92.16888428]
[110.69901276 99.37655640]
[108.15473175 107.69969177]
[109.37737274 122.64978027]
[110.60000610 137.59986877]
[123.00379181 143.96804810]
[130.51922607 155.58239746]
[131.23474121 169.28837585]
[125.06841278 181.42744446]
[113.76073456 188.81365967]
[114.37256622 203.80117798]
[114.98439789 218.78869629]
[115.59622192 233.77621460]
[116.20805359 248.76373291]
[116.81988525 263.75125122]
[120.45530701 278.30404663]
[126.96356201 291.81857300]
[133.47181702 305.33309937]
[139.98007202 318.84762573]
[155.24310303 318.79611206]
[169.01327515 325.37982178]
[178.55650330 337.29156494]
[181.97796631 352.16625977]
[178.59835815 367.05050659]
[169.08866882 378.98904419]
[155.33708191 385.61145020]
[140.07395935 385.60287476]
[126.32982635 378.96499634]
[116.83358002 367.01574707]
[113.47071075 352.12771606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[24 51]
[25 50]
[26 49]
[27 47]
[28 45]
[29 44]
[31 43]
[32 42]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
