%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUCUGGGCAGAGGAACCAAAGGGAAAAGCCACCUUCCCAGGCACAGCCAUAACAUCCACCUCACUCAACUGCUUGUCAAGUUCACCACCAACACAGAGGGGGCUCAGAUAAUCAAGAAACA\
) } def
/len { sequence length } bind def

/coor [
[114.30533600 256.70974731]
[122.62208557 244.01344299]
[134.96592712 235.18202209]
[131.20614624 220.66087341]
[127.44635773 206.13970947]
[123.68656921 191.61856079]
[119.92678070 177.09739685]
[116.16699219 162.57623291]
[112.40720367 148.05508423]
[108.64741516 133.53392029]
[79.62465668 124.04595947]
[71.70425415 97.51825714]
[57.63796997 92.30867767]
[43.57168961 87.09909821]
[29.50540733 81.88951874]
[18.65993309 96.15196991]
[3.91356683 106.29486084]
[-13.24659634 111.31035614]
[-31.09472656 110.70691681]
[-47.83983231 104.55747223]
[-61.80547333 93.49085236]
[-71.59761047 78.62750244]
[-76.24372864 61.46605301]
[-91.23891449 61.08606339]
[-106.23410034 60.70606995]
[-121.22928619 60.32608032]
[-136.22447205 59.94609070]
[-145.55300903 72.34600830]
[-160.39826965 76.86238861]
[-175.05197144 71.75857544]
[-183.87944031 58.99709320]
[-183.48635864 43.48499680]
[-174.02384949 31.18700218]
[-159.13046265 26.83193779]
[-144.53300476 32.09441376]
[-135.84448242 44.95090485]
[-120.84929657 45.33089447]
[-105.85411072 45.71088409]
[-90.85892487 46.09087753]
[-75.86373901 46.47086716]
[-72.30579376 33.91246033]
[-65.94150543 22.51648140]
[-76.81340027 12.18197727]
[-87.68528748 1.84747350]
[-103.33110809 -4.68282127]
[-101.38721466 -21.52495956]
[-84.66514587 -24.31940079]
[-77.35078430 -9.02441788]
[-66.47889709 1.31008554]
[-55.60700226 11.64458942]
[-45.01141739 4.88350248]
[-33.16712189 0.64712352]
[-20.66689491 -0.84771752]
[-8.13743114 0.47848016]
[3.79210067 4.56367207]
[14.52164459 11.20715714]
[23.51044083 20.07942963]
[30.30427551 30.73852921]
[34.55844116 42.65203857]
[36.05521011 55.22370148]
[34.71498489 67.82323456]
[48.78126907 73.03281403]
[62.84754944 78.24239349]
[76.91383362 83.45197296]
[82.45925140 77.65877533]
[89.40288544 73.64644623]
[97.19125366 71.73484039]
[105.20350647 72.07631683]
[112.80097961 74.64366913]
[122.85675049 63.51346588]
[132.91252136 52.38326263]
[142.96829224 41.25305939]
[139.63610840 26.09799004]
[145.87907410 11.89218140]
[159.29664612 4.09805584]
[174.72949219 5.71261454]
[186.24337769 16.11502647]
[189.41096497 31.30535316]
[183.01425171 45.44260025]
[169.51292419 53.09071350]
[154.09849548 51.30883408]
[144.04272461 62.43903732]
[133.98695374 73.56923676]
[123.93118286 84.69944763]
[128.67578125 89.66930389]
[132.31060791 96.01506805]
[134.45668030 103.46972656]
[149.37973022 104.98725128]
[158.35032654 102.72508240]
[164.65989685 106.73692322]
[179.53970337 108.63200378]
[190.07485962 97.23945618]
[205.30087280 94.24812317]
[219.36303711 100.80823517]
[226.85415649 114.39730072]
[224.89375305 129.79003906]
[214.23564148 141.06764221]
[198.97807312 143.89361572]
[184.98789978 137.18133545]
[177.64462280 123.51181030]
[162.76481628 121.61672974]
[147.86219788 119.91029358]
[132.93916321 118.39276886]
[123.16857147 129.77413940]
[126.92835999 144.29528809]
[130.68814087 158.81645203]
[134.44793701 173.33761597]
[138.20771790 187.85876465]
[141.96751404 202.37992859]
[145.72729492 216.90107727]
[149.48709106 231.42224121]
[164.56579590 233.15345764]
[177.99905396 240.21830750]
[187.97013855 251.66128540]
[193.13052368 265.93484497]
[192.78233337 281.10861206]
[186.97264099 295.13046265]
[176.48715210 306.10403442]
[162.74397278 312.54525757]
[147.60173035 313.58297729]
[133.10829163 309.07690430]
[121.22378540 299.63641357]
[113.55548096 286.53826904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 111]
[4 110]
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[10 104]
[12 64]
[13 63]
[14 62]
[15 61]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[42 50]
[43 49]
[44 48]
[69 84]
[70 83]
[71 82]
[72 81]
[87 103]
[88 102]
[90 101]
[91 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
