%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGCAGCCCGACGCAAGAGGCAGGAAGCGCAGCAACUCGUGUCUGAGCGCCCGGCGGAAAACCGAAGUUGGAAGUGUCUCUUAGCAGCGCGCGGAGAAGAACGGGGAGCCAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[133.72605896 418.87820435]
[143.34356689 406.03750610]
[142.55192566 391.05841064]
[132.19271851 376.95996094]
[140.51448059 360.59899902]
[139.32771301 345.64602661]
[127.86402130 336.20571899]
[126.44747162 321.05819702]
[136.42706299 309.09802246]
[135.24029541 294.14505005]
[134.05354309 279.19204712]
[132.86679077 264.23907471]
[116.61308289 246.87069702]
[125.80300903 224.19949341]
[121.88886261 209.71917725]
[117.97470856 195.23886108]
[104.97154999 188.06575012]
[100.79576874 173.43641663]
[108.40775299 159.84614563]
[95.40460205 152.67303467]
[91.22881317 138.04370117]
[98.84079742 124.45343018]
[94.92665100 109.97311401]
[90.82170105 95.54573059]
[86.52667999 81.17378998]
[82.23165894 66.80184174]
[77.93663788 52.42989731]
[66.57183075 41.42300415]
[70.34090424 27.01316833]
[66.04588318 12.64122486]
[61.75085831 -1.73071969]
[57.45583344 -16.10266304]
[41.95014191 -24.07031631]
[37.04014206 -40.44703674]
[45.27457428 -55.04567719]
[40.60167313 -69.29924011]
[35.92877197 -83.55279541]
[31.25587082 -97.80635834]
[26.58297157 -112.05992126]
[21.72233582 -126.25055695]
[16.67481422 -140.37580872]
[10.76809216 -147.51170349]
[11.68586349 -154.94107056]
[7.01296329 -169.19462585]
[-6.87321043 -171.37399292]
[-18.39512253 -179.30862427]
[-25.31730461 -191.38928223]
[-26.32699966 -205.20935059]
[-21.28275871 -218.04418945]
[-11.23100758 -227.38830566]
[-15.52602959 -241.76025391]
[-19.82105255 -256.13220215]
[-30.14952469 -269.57687378]
[-20.08948898 -283.22354126]
[-4.19122696 -277.33444214]
[-5.44910860 -260.42721558]
[-1.15408576 -246.05528259]
[3.14093685 -231.68333435]
[18.89665413 -228.36711121]
[30.92351341 -217.52215576]
[35.90327072 -202.01423645]
[32.39863968 -186.01222229]
[21.26652336 -173.86752319]
[25.93942451 -159.61396790]
[30.80005836 -145.42332458]
[35.84757996 -131.29808044]
[41.12767029 -125.99163818]
[40.83653259 -116.73281860]
[45.50943375 -102.47926331]
[50.18233109 -88.22570038]
[54.85523224 -73.97213745]
[59.52813339 -59.71857834]
[71.78882599 -55.52484894]
[79.47822571 -44.85309982]
[79.57888031 -31.50466919]
[71.82778168 -20.39768600]
[76.12280273 -6.02574253]
[80.41782379 8.34620190]
[84.71284485 22.71814537]
[95.77044678 32.69706345]
[92.30857849 48.13487625]
[96.60359955 62.50682068]
[100.89862823 76.87876129]
[105.19364929 91.25070953]
[110.39720917 97.54977417]
[109.40695953 106.05896759]
[113.32111359 120.53927612]
[126.74333191 128.44381714]
[130.50656128 143.18467712]
[122.88806152 155.93199158]
[136.31028748 163.83653259]
[140.07351685 178.57739258]
[132.45501709 191.32470703]
[136.36917114 205.80502319]
[140.28332520 220.28533936]
[146.81938171 221.85055542]
[152.58685303 225.22093201]
[157.10336304 230.08723450]
[159.99914551 236.01631165]
[161.04725647 242.48963928]
[160.18118286 248.94866943]
[157.49855042 254.84294128]
[153.25080872 259.67706299]
[147.81976318 263.05230713]
[149.00653076 278.00531006]
[150.19328308 292.95828247]
[151.38003540 307.91125488]
[163.12126160 318.14755249]
[164.11178589 333.32888794]
[154.28070068 344.45925903]
[155.46745300 359.41226196]
[164.80364990 368.43014526]
[165.41955566 380.99279785]
[157.53102112 390.26678467]
[158.32266235 405.24588013]
[169.24003601 417.00131226]
[166.71374512 432.84420776]
[152.68174744 440.62124634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[3 114]
[5 111]
[6 110]
[9 107]
[10 106]
[11 105]
[12 104]
[14 95]
[15 94]
[16 93]
[19 90]
[22 87]
[23 86]
[24 84]
[25 83]
[26 82]
[27 81]
[29 79]
[30 78]
[31 77]
[32 76]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[40 66]
[41 65]
[43 64]
[44 63]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
