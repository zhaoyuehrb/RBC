%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACUGAAACUUGGCCCUCUGGGGGCGGAGUGGCCACUGGGGAUUUAAAGAGCUGCCACUUCCUUAGGCCUCCAGAGGGCACUGGGAAGUCACAGCUGCUGAGGGACCACUCUGCUCCCCCGCCUAAGCC\
) } def
/len { sequence length } bind def

/coor [
[43.56463242 518.58264160]
[33.60408783 530.10247803]
[19.81636238 536.56921387]
[4.59026909 536.86242676]
[-9.43618202 530.93127441]
[-19.83282280 519.80334473]
[-24.79837227 505.40673828]
[-23.47251892 490.23562622]
[-16.08497620 476.91857910]
[-3.91567898 467.76281738]
[10.92696762 464.35461426]
[13.76573658 449.62570190]
[16.60450554 434.89675903]
[19.26780319 420.13510132]
[21.75525284 405.34277344]
[24.24270439 390.55047607]
[16.13453293 383.98663330]
[11.49285126 374.55349731]
[11.23557377 363.96203613]
[15.47837067 354.16543579]
[23.50074768 346.99896240]
[33.86748886 343.83612061]
[37.40387344 329.25894165]
[40.94025803 314.68176270]
[44.47663879 300.10461426]
[48.01302338 285.52743530]
[51.54940796 270.95025635]
[55.08579254 256.37307739]
[58.62217712 241.79589844]
[62.15856171 227.21873474]
[65.69494629 212.64155579]
[69.23133087 198.06439209]
[72.76771545 183.48721313]
[76.30410004 168.91003418]
[79.66676331 154.29180908]
[82.85524750 139.63461304]
[81.18682861 132.35920715]
[86.29794312 124.66847992]
[89.83432770 110.09130859]
[86.07982635 96.62300110]
[95.58850098 86.37230682]
[99.12487793 71.79513550]
[94.85919952 56.55982971]
[105.37895966 46.01545715]
[92.67320251 53.98813629]
[77.69647217 53.15295792]
[65.95591736 43.81703568]
[61.76871109 29.41331100]
[66.67453766 15.23823261]
[78.86946869 6.50417280]
[93.86924744 6.42276478]
[106.15825653 15.02394390]
[111.21767426 29.14560127]
[117.44889832 15.50112247]
[123.68013000 1.85664213]
[129.91134644 -11.78783798]
[124.62618256 -26.44064522]
[131.13990784 -40.18932343]
[145.14169312 -45.13761902]
[151.37290955 -58.78210068]
[157.60414124 -72.42658234]
[163.83535767 -86.07106018]
[170.06658936 -99.71553802]
[176.29780579 -113.36002350]
[182.52903748 -127.00450134]
[183.26551819 -136.20930481]
[189.07434082 -140.89680481]
[195.62850952 -154.38912964]
[202.02165222 -167.95849609]
[208.25288391 -181.60298157]
[214.48410034 -195.24745178]
[220.71533203 -208.89193726]
[216.47863770 -224.36546326]
[226.05079651 -237.23997498]
[242.08888245 -237.63926697]
[252.28984070 -225.25700378]
[248.82836914 -209.59182739]
[234.35981750 -202.66070557]
[228.12858582 -189.01623535]
[221.89736938 -175.37174988]
[215.66613770 -161.72727966]
[215.74992371 -154.26348877]
[209.12083435 -147.83496094]
[202.56666565 -134.34263611]
[196.17352295 -120.77327728]
[189.94229126 -107.12879181]
[183.71107483 -93.48431396]
[177.47984314 -79.83983612]
[171.24861145 -66.19535828]
[165.01739502 -52.55087662]
[158.78616333 -38.90639496]
[164.21571350 -25.08410645]
[158.09072876 -11.15789795]
[143.55583191 -5.55661249]
[137.32460022 8.08786774]
[131.09338379 21.73234749]
[124.86215973 35.37682724]
[119.95613861 49.55183792]
[124.47476959 63.74448776]
[113.70205688 75.33152008]
[110.16567230 89.90869141]
[113.92017365 103.37699890]
[104.41149902 113.62769318]
[100.87512207 128.20486450]
[97.51245117 142.82308960]
[94.32396698 157.48030090]
[95.56094360 166.63128662]
[90.88127136 172.44642639]
[87.34488678 187.02359009]
[83.80850220 201.60076904]
[80.27211761 216.17794800]
[76.73573303 230.75511169]
[73.19934845 245.33229065]
[69.66296387 259.90945435]
[66.12657928 274.48663330]
[62.59019852 289.06381226]
[59.05381393 303.64099121]
[55.51742935 318.21817017]
[51.98104477 332.79531860]
[48.44466019 347.37249756]
[59.83184433 363.81393433]
[55.67462158 383.06884766]
[39.03501892 393.03793335]
[36.54756927 407.83023071]
[34.06011963 422.62255859]
[35.73111343 431.70431519]
[31.33343506 437.73553467]
[28.49466705 452.46447754]
[25.65589905 467.19338989]
[38.16864395 475.87390137]
[46.06337357 488.89669800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 129]
[12 128]
[13 127]
[14 125]
[15 124]
[16 123]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[30 112]
[31 111]
[32 110]
[33 109]
[34 108]
[35 106]
[36 105]
[38 104]
[39 103]
[41 101]
[42 100]
[44 98]
[53 97]
[54 96]
[55 95]
[56 94]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[67 84]
[68 83]
[69 81]
[70 80]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
