%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGGCGGCCUGCCGGGGUGGUUCGGCUUCCCGUUGCCGCCUCGGGCGCUGUACCCAGAGCUCGAAGAGGAGCAGCGCGGCCGCGCGGACCCGGCAAGGCUGGGCCGGACUCGGGGCUCCCGAGGGACGCC\
) } def
/len { sequence length } bind def

/coor [
[83.29550934 166.20129395]
[82.94387054 151.20541382]
[82.59223175 136.20954895]
[73.10283661 125.47564697]
[68.67985535 113.01580048]
[69.22617340 100.90670776]
[73.87963104 90.90845490]
[61.58115768 82.32081604]
[49.28268051 73.73318481]
[36.98420334 65.14554596]
[24.68572807 56.55791092]
[12.38725185 47.97027588]
[6.40366125 51.80972290]
[-1.09564793 53.26959991]
[-9.12973976 51.77396011]
[-24.02679825 53.52828979]
[-38.92385483 55.28262329]
[-53.82091141 57.03695297]
[-68.71797180 58.79128265]
[-83.61502838 60.54561234]
[-98.51208496 62.29994202]
[-113.40914154 64.05426788]
[-128.30619812 65.80860138]
[-143.20326233 67.56292725]
[-157.64587402 78.91622162]
[-173.49203491 71.46868896]
[-188.34387207 73.57176208]
[-203.19570923 75.67483521]
[-215.76728821 86.20514679]
[-231.07774353 80.32958221]
[-233.37698364 64.09242249]
[-220.29974365 54.19705963]
[-205.29878235 60.82300186]
[-190.44694519 58.71992874]
[-175.59510803 56.61685562]
[-168.02783203 47.10466385]
[-155.60435486 45.27754211]
[-144.95759583 52.66587448]
[-130.06053162 50.91154099]
[-115.16347504 49.15721130]
[-100.26641846 47.40288162]
[-85.36935425 45.64855194]
[-70.47229767 43.89422226]
[-55.57524109 42.13989258]
[-40.67818451 40.38556290]
[-25.78112793 38.63123322]
[-10.88406944 36.87690353]
[-1.72941577 24.99446678]
[-3.83248878 10.14262962]
[-5.93556213 -4.70920849]
[-8.03863525 -19.56104660]
[-10.14170837 -34.41288376]
[-12.24478149 -49.26472092]
[-14.34785461 -64.11656189]
[-23.94358063 -76.69561005]
[-18.06713104 -90.38198090]
[-20.17020416 -105.23381805]
[-22.44722748 -120.05998230]
[-36.85237885 -125.38794708]
[-46.65126801 -137.21492004]
[-49.20804596 -152.35951233]
[-43.83495331 -166.74787903]
[-31.97732162 -176.50965881]
[-16.82479668 -179.01895142]
[-2.45333147 -173.60078430]
[7.27122307 -161.71261597]
[9.73301029 -146.55229187]
[4.26982164 -132.19789124]
[-7.64877272 -122.51064301]
[-3.41287780 -116.36829376]
[-5.31836653 -107.33689117]
[-3.21529341 -92.48505402]
[6.23000717 -80.96829987]
[0.50398344 -66.21963501]
[2.60705662 -51.36779404]
[4.71012974 -36.51595688]
[6.81320286 -21.66411972]
[8.91627598 -6.81228161]
[11.01934910 8.03955650]
[13.12242222 22.89139366]
[20.97488785 35.67179871]
[33.27336502 44.25943375]
[45.57183838 52.84707260]
[57.87031555 61.43470764]
[70.16879272 70.02233887]
[82.46726990 78.60997772]
[107.05381012 73.25727081]
[125.80175781 90.04012299]
[140.73583984 88.63549805]
[155.66993713 87.23087311]
[164.01161194 83.27947235]
[170.96994019 85.97258759]
[185.93286133 84.91844177]
[200.89576721 83.86430359]
[215.85868835 82.81015778]
[230.82159424 81.75601196]
[245.78451538 80.70187378]
[261.15957642 73.55736542]
[272.28109741 86.35376740]
[263.06353760 100.58306122]
[246.83865356 95.66478729]
[231.87573242 96.71892548]
[216.91282654 97.77307129]
[201.94990540 98.82721710]
[186.98699951 99.88135529]
[172.02407837 100.93550110]
[157.07455444 102.16496277]
[142.14047241 103.56958771]
[127.20637512 104.97421265]
[130.82099915 107.95257568]
[134.12799072 111.46888733]
[137.06927490 115.49291992]
[146.77081299 126.93319702]
[156.47236633 138.37347412]
[166.17391968 149.81375122]
[175.87545776 161.25402832]
[185.57701111 172.69430542]
[200.43273926 180.86398315]
[196.69480896 197.40074158]
[179.76956177 198.38671875]
[174.13673401 182.39585876]
[164.43518066 170.95558167]
[154.73364258 159.51530457]
[145.03208923 148.07502747]
[135.33053589 136.63475037]
[125.62899017 125.19446564]
[118.61877441 127.86032867]
[116.22625732 142.66828918]
[104.59832764 133.19204712]
[97.58811188 135.85791016]
[97.93975067 150.85377502]
[98.29138947 165.84965515]
[100.93307495 185.05047607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[12 81]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[26 35]
[27 34]
[28 33]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[56 72]
[57 71]
[58 69]
[88 109]
[89 108]
[90 107]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
