%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCAGCCAAUGGGAGAGCCGAGGCGGGGAGGUGCGGCCAAUGGCGCGGGCCUGUUUGAUUCAAAGGUUGCCUAUAAAGCGGGACUGCACGCCGGUUUUUGUCCGAGGGCUGUCGAGUCCGAGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[104.31362915 223.10328674]
[90.24137115 215.39930725]
[87.63273621 199.56976318]
[98.48883820 187.75770569]
[99.20256805 172.77470398]
[92.07962036 159.69369507]
[100.46479797 146.27729797]
[101.17852783 131.29429626]
[84.36605835 124.71714783]
[75.02399445 110.71269226]
[75.37633514 95.09972382]
[62.21114731 87.91099548]
[49.04596329 80.72225952]
[35.88077927 73.53352356]
[22.71559525 66.34478760]
[10.07779121 69.22447968]
[-0.76653111 62.88853836]
[-4.23294401 51.23571777]
[-17.22332573 43.73571777]
[-30.21370506 36.23571777]
[-43.20408630 28.73571777]
[-56.45388412 21.70415306]
[-69.94621277 15.14998531]
[-84.72064209 20.08495140]
[-98.31041718 13.24589062]
[-102.92410278 -0.86968499]
[-116.41642761 -7.42385244]
[-129.90875244 -13.97802067]
[-143.40107727 -20.53218842]
[-159.19494629 -19.60248566]
[-167.26220703 -32.12321091]
[-180.75453186 -38.67737579]
[-194.24687195 -45.23154449]
[-207.73919678 -51.78571320]
[-223.53306580 -50.85601044]
[-231.60032654 -63.37673187]
[-245.09265137 -69.93090057]
[-258.66201782 -76.32405090]
[-272.30648804 -82.55527496]
[-285.95098877 -88.78649902]
[-302.87048340 -89.86637115]
[-306.51663208 -106.42360687]
[-291.61578369 -114.51073456]
[-279.71975708 -102.43097687]
[-266.07525635 -96.19975281]
[-252.43078613 -89.96852875]
[-244.96699524 -90.05232239]
[-238.53848267 -83.42322540]
[-225.04615784 -76.86905670]
[-210.21734619 -78.26756287]
[-201.18502808 -65.27803802]
[-187.69270325 -58.72387314]
[-174.20037842 -52.16970444]
[-160.70803833 -45.61553574]
[-145.87924194 -47.01403809]
[-136.84690857 -34.02451324]
[-123.35458374 -27.47034645]
[-109.86225891 -20.91617966]
[-96.36993408 -14.36201191]
[-82.42234802 -19.46107864]
[-68.64584351 -13.00642395]
[-63.39204407 1.65765834]
[-49.89971542 8.21182632]
[-46.38616180 7.34732580]
[-42.27229309 8.20428467]
[-38.40147018 11.04850197]
[-35.70408630 15.74533558]
[-22.71370506 23.24533653]
[-9.72332478 30.74533653]
[3.26705623 38.24533463]
[20.74646568 37.25624466]
[29.90432930 53.17960358]
[43.06951523 60.36833572]
[56.23469925 67.55707550]
[69.39988708 74.74580383]
[82.56507111 81.93453979]
[96.80673981 73.53292084]
[114.20094299 75.62332916]
[127.46371460 88.52658081]
[130.32861328 107.80367279]
[145.12092590 110.29112244]
[162.16265869 103.43553162]
[175.29098511 115.01806641]
[190.13830566 117.15278625]
[204.98562622 119.28751373]
[219.83294678 121.42223358]
[234.68026733 123.55695343]
[249.57418823 125.33774567]
[264.50625610 126.76358032]
[279.43835449 128.18942261]
[294.38632202 129.43746948]
[308.70330811 122.70438385]
[320.84619141 131.32992554]
[335.81964111 132.22189331]
[350.80267334 132.93562317]
[365.78567505 133.64935303]
[376.26229858 122.04011536]
[391.75717163 119.93238831]
[404.95410156 128.32136536]
[409.62191772 143.24603271]
[403.55657959 157.65942383]
[389.62197876 164.75596619]
[374.39761353 161.18489075]
[365.07192993 148.63235474]
[350.08892822 147.91864014]
[335.10592651 147.20491028]
[328.20791626 150.05670166]
[319.77609253 146.29170227]
[306.52929688 153.10133362]
[293.31625366 144.39926147]
[286.35232544 147.08609009]
[278.01251221 143.12150574]
[263.08041382 141.69566345]
[248.14834595 140.26982117]
[243.89460754 142.63044739]
[238.09925842 142.27511597]
[232.54554749 138.40428162]
[217.69822693 136.26956177]
[202.85090637 134.13482666]
[188.00358582 132.00010681]
[173.15626526 129.86538696]
[163.22817993 136.88232422]
[150.78735352 135.15921021]
[142.63346863 125.08343506]
[127.84115601 122.59598541]
[116.16153717 132.00802612]
[115.44780731 146.99102783]
[122.51970673 161.14372253]
[114.18557739 173.48843384]
[113.47184753 188.47143555]
[123.15599060 201.26194763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 130]
[5 129]
[7 127]
[8 126]
[11 76]
[12 75]
[13 74]
[14 73]
[15 72]
[18 70]
[19 69]
[20 68]
[21 67]
[22 63]
[23 62]
[26 59]
[27 58]
[28 57]
[29 56]
[31 54]
[32 53]
[33 52]
[34 51]
[36 49]
[37 48]
[38 46]
[39 45]
[40 44]
[80 125]
[81 124]
[83 121]
[84 120]
[85 119]
[86 118]
[87 117]
[88 114]
[89 113]
[90 112]
[91 110]
[93 108]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
