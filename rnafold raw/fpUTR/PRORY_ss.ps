%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGAGGACAAGGACUCAGGGGUCUGCUGGUCCAUCUCUGCACCUUGAAACAGCAGCUGGGGCACCAGAAGUAACCCUUACAGCCAACACCAUGUG\
) } def
/len { sequence length } bind def

/coor [
[82.12965393 317.83090210]
[84.93660736 298.65356445]
[85.41738129 283.66125488]
[78.09198761 270.69253540]
[86.26762390 257.14746094]
[78.94223022 244.17872620]
[87.11787415 230.63363647]
[87.59864807 215.64134216]
[74.87289429 207.90049744]
[67.68256378 194.74165344]
[68.04660034 179.65080261]
[75.96734619 166.68319702]
[89.40304565 159.37365723]
[89.88381195 144.38136292]
[86.89608765 137.46626282]
[90.62793732 128.91842651]
[91.58898926 113.94924927]
[83.72998047 99.21704102]
[92.96730042 85.30756378]
[93.44807434 70.31526947]
[93.92884827 55.32297516]
[94.40962219 40.33068085]
[94.89039612 25.33838844]
[95.37117004 10.34609413]
[95.37117004 -4.65390539]
[94.89039612 -19.64619827]
[86.71475220 -33.19128799]
[94.04015350 -46.16001511]
[93.55937958 -61.15230560]
[93.07860565 -76.14459991]
[92.59783173 -91.13689423]
[92.11705780 -106.12918854]
[91.39604950 -121.11184692]
[90.43499756 -136.08102417]
[76.77191925 -142.95617676]
[68.43961334 -155.66323853]
[67.59207916 -170.73466492]
[74.35694885 -184.11721802]
[86.82806396 -192.26196289]
[85.86700439 -207.23115540]
[84.90595245 -222.20033264]
[83.94490051 -237.16950989]
[69.93882751 -243.34111023]
[60.41423035 -255.32194519]
[57.55978012 -270.35891724]
[62.03141785 -284.99664307]
[72.80158997 -295.87149048]
[87.39538574 -300.48446655]
[102.45926666 -297.77557373]
[114.53165436 -288.36727905]
[120.83840942 -274.42153931]
[119.93028259 -259.14300537]
[112.01595306 -246.04254150]
[98.91408539 -238.13056946]
[99.87513733 -223.16137695]
[100.83618927 -208.19219971]
[101.79724121 -193.22302246]
[115.20748901 -186.73989868]
[123.62814331 -174.33230591]
[124.71485901 -159.27622986]
[118.07590485 -145.60798645]
[105.40417480 -137.04208374]
[106.36523438 -122.07289886]
[110.00315857 -115.47664642]
[107.10935211 -106.60996246]
[107.59012604 -91.61766815]
[108.07089996 -76.62537384]
[108.55167389 -61.63307953]
[109.03244781 -46.64078903]
[117.17369843 -34.16804886]
[109.88269043 -20.12697220]
[110.36346436 -5.13467932]
[113.31348419 -1.16178000]
[113.66822052 4.74943495]
[110.36346436 10.82686806]
[109.88269043 25.81916237]
[109.40191650 40.81145477]
[108.92114258 55.80374908]
[108.44036865 70.79604340]
[107.95959473 85.78833771]
[115.45497131 94.85504913]
[114.88951874 106.60520935]
[106.55816650 114.91030121]
[105.59711456 129.87948608]
[104.87610626 144.86213684]
[104.39533234 159.85443115]
[117.33509827 168.00978088]
[124.40873718 181.45822144]
[123.80515289 196.54139709]
[115.78650665 209.21250916]
[102.59094238 216.12211609]
[102.11016846 231.11441040]
[109.40117645 245.15548706]
[101.25991821 257.62823486]
[108.55092621 271.66931152]
[100.40967560 284.14202881]
[99.92890167 299.13433838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[5 94]
[7 92]
[8 91]
[13 86]
[14 85]
[16 84]
[17 83]
[19 80]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[25 72]
[26 71]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 63]
[34 62]
[39 57]
[40 56]
[41 55]
[42 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
