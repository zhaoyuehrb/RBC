%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCCAAUCGUUAGUCAGAGUGGGCGGAGCCGCCCGCGGGCACCUGCGCGUUAAGAGUGGGCCGCGUCGCUGAGGGGUAGCG\
) } def
/len { sequence length } bind def

/coor [
[36.43521881 393.42205811]
[31.40796471 407.93490601]
[19.78731918 417.97760010]
[4.69917774 420.84878540]
[-9.79782486 415.77606201]
[-19.80406761 404.12399292]
[-22.62792206 389.02691650]
[-17.50978470 374.54589844]
[-5.82641077 364.57623291]
[9.27943325 361.79971313]
[14.23361874 347.64144897]
[19.18780518 333.48321533]
[24.14199066 319.32495117]
[29.09617615 305.16668701]
[25.99662018 290.59817505]
[37.85763550 280.12789917]
[42.81182098 265.96963501]
[34.86289978 251.27621460]
[39.98784637 235.02494812]
[55.52587509 227.25010681]
[59.94720459 212.91650391]
[64.36853027 198.58291626]
[68.78985596 184.24932861]
[73.21118927 169.91574097]
[77.36371613 155.50196838]
[81.24600220 141.01309204]
[85.12828827 126.52420044]
[89.01057434 112.03530884]
[83.76812744 101.46369934]
[87.03481293 90.12477875]
[97.09815979 83.96268463]
[101.51948547 69.62908936]
[105.94081879 55.29550171]
[110.36214447 40.96191025]
[114.51467896 26.54814911]
[108.24165344 7.56627369]
[121.97047424 -5.83833075]
[124.75914764 -20.57682800]
[127.54782104 -35.31532288]
[122.51101685 -50.31336594]
[132.47958374 -61.38030243]
[135.26824951 -76.11879730]
[129.34419250 -91.41054535]
[139.83459473 -104.01543427]
[155.94784546 -100.96664429]
[161.10801697 -85.40050507]
[150.00674438 -73.33012390]
[147.21807861 -58.59162903]
[152.45434570 -44.64778519]
[142.28631592 -32.52664948]
[139.49765015 -17.78815269]
[136.70896912 -3.04965639]
[143.35836792 5.09994411]
[144.30952454 15.79852867]
[138.98612976 25.38283539]
[129.00357056 30.43043518]
[130.34721375 37.88797379]
[124.69573975 45.38323593]
[120.27440643 59.71682739]
[115.85308075 74.05042267]
[111.43175507 88.38401031]
[115.66077423 104.51179504]
[103.49946594 115.91759491]
[99.61717987 130.40647888]
[95.73489380 144.89537048]
[91.85260773 159.38426208]
[92.65012360 168.73744202]
[87.54477692 174.33706665]
[83.12345123 188.67065430]
[78.70212555 203.00424194]
[74.28079987 217.33784485]
[69.85946655 231.67143250]
[77.54122162 242.91319275]
[77.26921844 256.33001709]
[69.37224579 266.93652344]
[56.97007370 270.92382812]
[52.01588440 285.08206177]
[54.76108551 300.66329956]
[43.25442505 310.12088013]
[38.30023956 324.27914429]
[33.34605408 338.43737793]
[28.39186859 352.59564209]
[23.43768311 366.75387573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[16 77]
[17 76]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[25 66]
[26 65]
[27 64]
[28 63]
[31 61]
[32 60]
[33 59]
[34 58]
[35 56]
[37 52]
[38 51]
[39 50]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
