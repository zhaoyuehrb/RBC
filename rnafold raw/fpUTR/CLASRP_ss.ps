%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCUUUCAUUUCCGCUUCCGGUGCGGGCCGCGCGCGAGCGCAGCGGUGGGAGGCGGCGACCAGCCGGUUGAGGCCCCAGGCUUGGCCUCACCACA\
) } def
/len { sequence length } bind def

/coor [
[269.31390381 171.12059021]
[255.30169678 165.76730347]
[240.65119934 168.45289612]
[230.52113342 156.30001831]
[216.50892639 150.94673157]
[202.49670410 145.59342957]
[188.48448181 140.24014282]
[174.47227478 134.88684082]
[160.46005249 129.53355408]
[146.44783020 124.18025970]
[132.43560791 118.82696533]
[118.42339325 113.47367096]
[104.41117859 108.12038422]
[98.99131012 119.11362457]
[83.52958679 123.91662598]
[68.75746918 126.52135468]
[53.98535538 129.12606812]
[39.21323776 131.73078918]
[31.55166054 145.36289978]
[16.90184212 150.83253479]
[2.18098044 145.55709839]
[-5.66018534 132.02749634]
[-2.91929603 116.63198853]
[9.10948467 106.63986969]
[24.74653435 106.76910400]
[36.60851669 116.95867920]
[51.38063049 114.35395813]
[66.15274811 111.74923706]
[80.92486572 109.14451599]
[86.05516815 95.04912567]
[76.41335297 83.55845642]
[61.61565781 77.96035004]
[59.36183929 63.23725510]
[49.72002411 51.74658966]
[40.07821274 40.25592041]
[30.43639755 28.76525497]
[14.84956837 23.66792488]
[11.73580456 7.56710052]
[24.29828072 -2.97406816]
[39.61379623 2.88826847]
[41.92706299 19.12344170]
[51.56887817 30.61410713]
[61.21069336 42.10477448]
[70.85250854 53.59543991]
[84.96055603 58.37165451]
[87.90402222 73.91664124]
[97.54582977 85.40731049]
[109.76447296 94.10816193]
[123.77668762 99.46145630]
[137.78890991 104.81475067]
[151.80113220 110.16804504]
[165.81333923 115.52133942]
[179.82556152 120.87462616]
[193.83778381 126.22792053]
[207.84999084 131.58122253]
[221.86221313 136.93450928]
[235.87443542 142.28779602]
[251.52717590 139.98510742]
[260.65499878 151.75508118]
[274.66720581 157.10836792]
[282.49002075 148.45701599]
[292.59802246 142.69151306]
[303.97384644 140.37277222]
[315.47845459 141.71577454]
[325.96530151 146.56973267]
[334.39459229 154.43478394]
[339.93630981 164.51345825]
[342.05200195 175.79148865]
[340.54699707 187.13987732]
[353.76879883 194.22395325]
[366.99060059 201.30801392]
[376.21701050 202.64869690]
[380.51425171 208.83238220]
[393.50463867 216.33238220]
[406.49502563 223.83238220]
[419.48541260 231.33238220]
[432.47579956 238.83238220]
[445.46615601 246.33238220]
[459.58642578 239.89823914]
[474.78509521 243.02555847]
[485.21798706 254.51182556]
[486.87344360 269.94033813]
[479.11489868 283.37854004]
[464.92568970 289.65911865]
[449.76184082 286.36709595]
[439.45416260 274.76834106]
[437.96615601 259.32275391]
[424.97579956 251.82276917]
[411.98541260 244.32276917]
[398.99502563 236.82276917]
[386.00463867 229.32276917]
[373.01425171 221.82276917]
[359.90652466 214.52981567]
[346.68472290 207.44575500]
[333.46292114 200.36167908]
[318.25524902 211.17245483]
[299.60671997 212.99914551]
[282.44604492 205.27993774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[4 57]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[15 29]
[16 28]
[17 27]
[18 26]
[30 47]
[31 46]
[33 44]
[34 43]
[35 42]
[36 41]
[69 95]
[70 94]
[71 93]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
