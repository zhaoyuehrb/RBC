%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAACGUCUGACCUGGGGCCGUCGCUUAACCGUUUAGUUGCUGGGAUGGGGCGGCGUUGGGGGUGCGGCCCUGAACCGGAGGGAUUUAGAGACUGGAGACGCGGCCUCUAAGAGAGGUUGAAACUGUGUGUGUGUGGGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[79.74034119 129.82850647]
[73.61018372 124.57175446]
[68.80362701 118.08258820]
[65.56175232 110.68646240]
[64.04715729 102.75435638]
[64.33580780 94.68410492]
[48.70063400 97.10320282]
[39.48548889 85.40147400]
[25.43382645 80.15259552]
[11.38216400 74.90370941]
[-2.66949844 69.65483093]
[-15.58486080 78.05123138]
[-30.79008293 77.24213409]
[-42.46519852 67.74710083]
[-46.26505280 53.37006760]
[-60.31671524 48.12118530]
[-74.36837769 42.87230301]
[-88.42004395 37.62342072]
[-102.47170258 32.37453842]
[-116.52336884 27.12565613]
[-130.57502747 21.87677383]
[-144.62669373 16.62789154]
[-153.83663940 16.54808235]
[-158.92385864 11.11008453]
[-172.85850525 5.55801201]
[-186.79316711 0.00593954]
[-200.72781372 -5.54613256]
[-214.66246033 -11.09820557]
[-221.36869812 -10.51518345]
[-226.54986572 -13.06949043]
[-229.07197571 -17.20445061]
[-242.75303650 -23.35494232]
[-256.43411255 -29.50543404]
[-266.59371948 -23.16328430]
[-278.43441772 -22.55432129]
[-288.97485352 -27.71496391]
[-295.61782837 -37.24357224]
[-296.78976440 -48.67898178]
[-310.19155884 -55.41634369]
[-323.59335327 -62.15370941]
[-336.99514771 -68.89107513]
[-350.39691162 -75.62844086]
[-363.79870605 -82.36580658]
[-378.08731079 -76.01209259]
[-393.10275269 -80.37905884]
[-401.75521851 -93.40477753]
[-399.95922852 -108.93888092]
[-388.56286621 -119.64665222]
[-372.94708252 -120.47221375]
[-360.48519897 -111.02574921]
[-357.06134033 -95.76759338]
[-343.65954590 -89.03022766]
[-330.25778198 -82.29286194]
[-316.85598755 -75.55549622]
[-303.45419312 -68.81813049]
[-290.05239868 -62.08076859]
[-273.11947632 -68.89408875]
[-256.26391602 -61.10169220]
[-250.28361511 -43.18649673]
[-236.60255432 -37.03600311]
[-222.92149353 -30.88551140]
[-209.11039734 -25.03285599]
[-195.17573547 -19.48078346]
[-181.24108887 -13.92871094]
[-167.30644226 -8.37663937]
[-153.37179565 -2.82456660]
[-139.37780762 2.57622766]
[-125.32614899 7.82511044]
[-111.27448273 13.07399273]
[-97.22282410 18.32287598]
[-83.17115784 23.57175827]
[-69.11949921 28.82064056]
[-55.06783295 34.06952286]
[-41.01617050 39.31840515]
[-28.72123337 30.95344543]
[-13.68031502 31.43796921]
[-1.66833985 40.79563141]
[2.57938409 55.60316467]
[16.63104630 60.85204697]
[30.68271065 66.10092926]
[44.73437119 71.34981537]
[59.36447525 68.55528259]
[69.58468628 80.63243866]
[86.89721680 66.40668488]
[109.26964569 65.15366364]
[128.06242371 77.35724640]
[136.01832581 98.30478668]
[150.82072449 100.73151398]
[165.62312317 103.15824127]
[180.49325562 97.75549316]
[191.80110168 107.44990540]
[206.67123413 102.04715729]
[217.97909546 111.74156952]
[232.78149414 114.16829681]
[247.60931396 116.43453217]
[262.46081543 118.54000854]
[277.21038818 112.81636810]
[288.72561646 122.26353455]
[303.57711792 124.36901093]
[314.38555908 113.39248657]
[329.40921021 110.91399384]
[342.85253906 117.67723083]
[349.65417480 130.90127563]
[364.50567627 133.00675964]
[379.35717773 135.11222839]
[394.20867920 137.21771240]
[409.06018066 139.32318115]
[423.91165161 141.42864990]
[438.76315308 143.53413391]
[453.61465454 145.63960266]
[470.14569092 141.87638855]
[478.33807373 156.71960449]
[466.34280396 168.70083618]
[451.50918579 160.49110413]
[436.65768433 158.38562012]
[421.80618286 156.28015137]
[406.95468140 154.17468262]
[392.10321045 152.06919861]
[377.25170898 149.96372986]
[362.40020752 147.85826111]
[347.54870605 145.75277710]
[337.33944702 156.56521606]
[322.54602051 159.32537842]
[308.80325317 152.76870728]
[301.47164917 139.22050476]
[286.62014771 137.11503601]
[272.93283081 142.98927307]
[260.35534668 133.39151001]
[245.50382996 131.28602600]
[238.38703918 133.47758484]
[230.35476685 128.97070312]
[215.55236816 126.54396820]
[201.74099731 132.12030029]
[189.37437439 122.25230408]
[175.56301880 127.82863617]
[163.19639587 117.96063995]
[148.39399719 115.53391266]
[133.59159851 113.10718536]
[129.83222961 120.25417328]
[124.57660675 126.38529968]
[118.08831787 131.19305420]
[110.69279480 134.43627930]
[102.76096344 135.95233154]
[94.69065857 135.66517639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 83]
[8 81]
[9 80]
[10 79]
[11 78]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[21 68]
[22 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[31 61]
[32 60]
[33 59]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[87 138]
[88 137]
[89 136]
[91 134]
[93 132]
[94 131]
[95 129]
[96 128]
[98 126]
[99 125]
[103 121]
[104 120]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
