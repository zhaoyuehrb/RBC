%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGAGCUCCGAGGACGAGGGGGAGGGCCGGAGCUGCGCGUGCUGCUUUGCCCGAGCCCGAGCCCGAGCCCGAGCCCGAGCCCGAGCCCGAGCCCGAACGCAAGCCUGGGAGCGCGGAGCCCGGCUAGGGACUCCUCCUAUUU\
) } def
/len { sequence length } bind def

/coor [
[81.20985413 184.59837341]
[83.38368988 169.11262512]
[95.03752899 158.68563843]
[94.38774872 143.69972229]
[93.73796844 128.71380615]
[93.08818817 113.72788239]
[88.91893005 99.31894684]
[81.46588135 86.30156708]
[74.01284027 73.28419495]
[66.55979919 60.26681137]
[59.10675812 47.24943161]
[45.53524780 39.11772537]
[45.92607880 24.22824669]
[38.47303391 11.21086788]
[31.01999283 -1.80651116]
[23.98734856 -7.75389528]
[23.54999161 -15.18762779]
[8.65927124 -19.75973701]
[1.57629693 -33.22399139]
[6.02686977 -47.39184189]
[-7.36528540 -55.81566238]
[-6.65197325 -70.69317627]
[-21.90913963 -72.82038879]
[-32.86022186 -83.39995575]
[-35.45116425 -98.22395325]
[-28.89479828 -111.57131958]
[-36.06407547 -124.74710846]
[-43.23335648 -137.92289734]
[-50.40263367 -151.09869385]
[-57.71422577 -164.19604492]
[-65.16726685 -177.21342468]
[-72.62030792 -190.23080444]
[-79.65295410 -196.17817688]
[-80.09030914 -203.61190796]
[-87.25959015 -216.78770447]
[-94.42887115 -229.96350098]
[-101.33101654 -236.06184387]
[-101.60722351 -243.50331116]
[-108.48937225 -256.83132935]
[-115.25778198 -263.07775879]
[-115.37270355 -270.52346802]
[-122.00420380 -276.91506958]
[-121.95779419 -284.36151123]
[-128.25613403 -297.97515869]
[-134.55445862 -311.58877563]
[-141.29182434 -324.99057007]
[-148.46110535 -338.16635132]
[-155.63038635 -351.34216309]
[-162.79966736 -364.51794434]
[-178.71391296 -373.71337891]
[-177.67204285 -391.19973755]
[-185.12509155 -404.21713257]
[-198.69659424 -412.34884644]
[-198.30577087 -427.23831177]
[-205.75880432 -440.25567627]
[-219.33032227 -448.38739014]
[-218.93948364 -463.27688599]
[-226.39253235 -476.29425049]
[-240.82942200 -484.07296753]
[-241.04078674 -500.47073364]
[-226.80918884 -508.61898804]
[-212.77488708 -500.13546753]
[-213.37515259 -483.74731445]
[-205.92210388 -470.72991943]
[-192.88368225 -463.52929688]
[-192.74142456 -447.70874023]
[-185.28839111 -434.69134521]
[-172.24996948 -427.49072266]
[-172.10771179 -411.67016602]
[-164.65466309 -398.65280151]
[-153.02720642 -395.15246582]
[-146.72583008 -384.30523682]
[-149.62387085 -371.68722534]
[-142.45460510 -358.51144409]
[-135.28532410 -345.33563232]
[-128.11604309 -332.15985107]
[-124.77904510 -330.81961060]
[-121.94857788 -327.75497437]
[-120.44710541 -323.23318481]
[-120.94083405 -317.88711548]
[-114.64250183 -304.27349854]
[-108.34416199 -290.65985107]
[-101.89871979 -277.11526489]
[-95.16135406 -263.71347046]
[-88.27920532 -250.38545227]
[-81.25307465 -237.13276672]
[-74.08380127 -223.95698547]
[-66.91452026 -210.78118896]
[-59.60293198 -197.68383789]
[-52.14988708 -184.66645813]
[-44.69684601 -171.64907837]
[-38.59861755 -167.37553406]
[-37.22684479 -158.26795959]
[-30.05756569 -145.09217834]
[-22.88828659 -131.91638184]
[-15.71900845 -118.74059296]
[-0.95094281 -116.99639130]
[10.08886337 -106.76963043]
[13.02423000 -91.82851410]
[6.52381706 -77.86245728]
[19.40317726 -70.38105774]
[19.20265961 -54.56111908]
[33.51594543 -50.60315704]
[40.97430801 -37.34315872]
[36.72578049 -22.35690689]
[44.03737259 -9.25955391]
[51.49041367 3.75782514]
[58.94345856 16.77520370]
[71.98187256 23.97582436]
[72.12413788 39.79639053]
[79.57717896 52.81377029]
[87.03022003 65.83114624]
[94.48326111 78.84852600]
[101.93630219 91.86590576]
[109.77838898 86.85884857]
[121.11209106 87.76973724]
[132.18801880 96.15006256]
[142.96557617 106.58291626]
[153.74311829 117.01576996]
[164.52066040 127.44862366]
[175.41059875 137.76411438]
[186.41163635 147.96102905]
[197.41267395 158.15795898]
[213.43418884 158.98910522]
[222.65608215 172.11679077]
[218.00411987 187.47056580]
[203.04689026 193.27235413]
[189.25828552 185.07148743]
[187.21575928 169.15899658]
[176.21472168 158.96208191]
[165.21368408 148.76515198]
[158.11735535 146.50822449]
[154.08781433 138.22616577]
[143.31025696 127.79331970]
[132.53271484 117.36045837]
[121.75516510 106.92760468]
[108.07410431 113.07809448]
[108.72388458 128.06401062]
[109.37366486 143.04994202]
[110.02345276 158.03585815]
[122.53607178 167.41499329]
[126.04213715 182.65447998]
[118.88619232 196.55865479]
[104.44705200 202.56243896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 140]
[4 139]
[5 138]
[6 137]
[7 114]
[8 113]
[9 112]
[10 111]
[11 110]
[13 108]
[14 107]
[15 106]
[17 105]
[20 102]
[22 100]
[26 96]
[27 95]
[28 94]
[29 93]
[30 91]
[31 90]
[32 89]
[34 88]
[35 87]
[36 86]
[38 85]
[39 84]
[41 83]
[43 82]
[44 81]
[45 80]
[46 76]
[47 75]
[48 74]
[49 73]
[51 70]
[52 69]
[54 67]
[55 66]
[57 64]
[58 63]
[117 136]
[118 135]
[119 134]
[120 133]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
