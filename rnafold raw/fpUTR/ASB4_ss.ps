%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAUGCGCCUGUUUGCUCGGUGCUGUUCUCUCGAUAAAUCACAACAAAGCUUCCAGAGGGAGAGGAAGG\
) } def
/len { sequence length } bind def

/coor [
[180.88438416 78.54182434]
[166.78900146 83.67212677]
[152.69361877 88.80242920]
[138.59822083 93.93273163]
[124.50283051 99.06303406]
[110.40744781 104.19333649]
[96.42733002 109.62990570]
[86.63856506 122.05933380]
[71.91916656 119.78151703]
[58.06097031 125.52176666]
[52.24524689 140.21710205]
[37.70874786 146.41917419]
[23.07571983 140.44841003]
[17.02767944 125.84715271]
[23.15282249 111.27806854]
[37.81721115 105.38474274]
[52.32072067 111.66357422]
[66.17890930 105.92332458]
[74.97644043 93.90447235]
[90.68707275 95.77171326]
[96.55051422 89.84575653]
[105.27714539 90.09794617]
[119.37252808 84.96764374]
[133.46792603 79.83734131]
[147.56330872 74.70703888]
[161.65870667 69.57673645]
[175.75408936 64.44643402]
[189.34870911 58.10715866]
[202.33908081 50.60715866]
[215.32946777 43.10715866]
[228.31985474 35.60715866]
[241.31022644 28.10715866]
[254.30061340 20.60715866]
[267.29098511 13.10715961]
[262.73483276 -1.24747169]
[261.37145996 -16.24598122]
[263.26464844 -31.18686104]
[268.32583618 -45.37129974]
[276.31832886 -58.13586807]
[286.86828613 -68.88353729]
[299.48226929 -77.11162567]
[313.57031250 -82.43528748]
[328.47348022 -84.60552979]
[343.49472046 -83.52084351]
[357.93145752 -79.23195648]
[371.10845947 -71.93947601]
[382.40945435 -61.98447800]
[391.30581665 -49.83257675]
[397.38146973 -36.05214310]
[400.35226440 -21.28771210]
[400.07925415 -6.22983980]
[396.57516479 8.41718864]
[390.00390625 21.96830559]
[380.67285156 33.78969955]
[369.01840210 43.32846069]
[355.58566284 50.13845062]
[341.00292969 53.90114594]
[325.95223999 54.44056320]
[311.13757324 51.73147202]
[297.25180054 45.90058136]
[284.94439697 37.22061157]
[274.79098511 26.09753990]
[261.80059814 33.59754181]
[248.81022644 41.09754181]
[235.81985474 48.59754181]
[222.82946777 56.09754181]
[209.83908081 63.59754181]
[196.84870911 71.09754181]
[196.10305786 74.11746979]
[193.92256165 76.96510315]
[190.39183044 79.00948334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 20]
[9 18]
[10 17]
[28 68]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
