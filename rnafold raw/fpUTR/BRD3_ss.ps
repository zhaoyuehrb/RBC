%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCGGGGCCGGCGAGCCAAAGAGGAGCCGGCCGCGCGGGCCGGGAGGGGACGGCCGCCGGAGCCGCGAGGCCAACUGUCGCCUGGUUGGGCCCGGAAAUGGGACGUCGCGCUUUCUCAGGGAGCGUAGAAGCAGCCAGGGCCUCUCCAAGCCGCUGCUGUGACAGAAAGUGAGUGAGCUGCCGGAGG\
) } def
/len { sequence length } bind def

/coor [
[87.40569305 129.49084473]
[78.34862518 141.44783020]
[69.29155731 153.40481567]
[66.59687042 162.15301514]
[59.98323822 165.48361206]
[57.55808640 181.11784363]
[43.61658859 186.36035156]
[34.36203003 198.16514587]
[25.10747337 209.96994019]
[15.85291672 221.77473450]
[6.59835958 233.57952881]
[-2.65619731 245.38432312]
[-11.91075420 257.18911743]
[-9.97890472 267.91738892]
[-14.19355297 277.73168945]
[-22.93616867 283.47656250]
[-33.17752838 283.45104980]
[-42.81934357 294.94171143]
[-42.85912323 310.98471069]
[-55.51590347 320.84298706]
[-71.08048248 316.95410156]
[-77.61304474 302.30126953]
[-70.10237122 288.12490845]
[-54.31000900 285.29989624]
[-44.66819382 273.80923462]
[-42.73362350 254.58110046]
[-23.71554947 247.93455505]
[-14.46099186 236.12976074]
[-5.20643473 224.32496643]
[4.04812241 212.52017212]
[13.30267906 200.71537781]
[22.55723572 188.91058350]
[31.81179428 177.10578918]
[33.57499695 162.31591797]
[48.17844391 156.22904968]
[57.33457184 144.34774780]
[66.39163971 132.39076233]
[75.44869995 120.43377686]
[68.82835388 106.97380066]
[53.82887268 106.84913635]
[38.82938766 106.72447205]
[23.82990646 106.59980774]
[8.83042526 106.47514343]
[-0.28566834 119.03207397]
[-15.05190086 123.80050659]
[-29.79035568 118.94689178]
[-38.83379364 106.33753967]
[-38.70483398 90.82099915]
[-29.45305634 78.36370087]
[-14.63596439 73.75572968]
[0.04896990 78.76894379]
[8.95508957 91.47566223]
[23.95457268 91.60032654]
[38.95405197 91.72499084]
[53.95353699 91.84965515]
[68.95301819 91.97431946]
[89.88712311 73.68383026]
[113.40897369 79.71383667]
[125.13644409 70.36148834]
[136.86392212 61.00914383]
[148.59138489 51.65679932]
[160.24073792 42.20730591]
[171.81114197 32.66132355]
[183.38153076 23.11534309]
[194.87220764 13.47352886]
[206.28233337 3.73654842]
[217.69247437 -6.00043154]
[217.20388794 -19.47193336]
[224.46255493 -30.59939575]
[236.62678528 -35.43718338]
[249.16630554 -32.42499924]
[260.73669434 -41.97098160]
[259.92111206 -57.35412216]
[268.22296143 -70.11862946]
[282.28283691 -75.48368073]
[296.63409424 -71.58757019]
[308.20449829 -81.13355255]
[319.77490234 -90.67953491]
[331.34530640 -100.22551727]
[342.91571045 -109.77149963]
[354.48611450 -119.31748199]
[366.05651855 -128.86346436]
[366.43228149 -145.95812988]
[382.38125610 -157.65023804]
[392.39965820 -168.81407166]
[402.41809082 -179.97792053]
[401.74551392 -195.54022217]
[412.06463623 -206.71922302]
[426.90505981 -207.26452637]
[436.92346191 -218.42837524]
[446.94189453 -229.59220886]
[456.96029663 -240.75605774]
[466.97872925 -251.91989136]
[476.99713135 -263.08374023]
[462.12014771 -265.00088501]
[454.19781494 -277.73809814]
[459.05532837 -291.92980957]
[473.12100220 -297.14096069]
[486.05249023 -289.53988647]
[488.34091187 -274.71392822]
[499.25152588 -285.00753784]
[510.16210938 -295.30117798]
[506.18255615 -311.34045410]
[510.80285645 -327.10928345]
[522.67279053 -338.33572388]
[538.49163818 -342.02822876]
[553.92578125 -337.27230835]
[564.66375732 -347.74588013]
[575.31439209 -358.30831909]
[585.87683105 -368.95889282]
[596.43920898 -379.60946655]
[607.00164795 -390.26007080]
[617.56408691 -400.91064453]
[628.12652588 -411.56124878]
[638.68896484 -422.21182251]
[649.25140381 -432.86239624]
[656.11157227 -448.36642456]
[672.90875244 -446.06628418]
[675.34844971 -429.28878784]
[659.90197754 -422.29998779]
[649.33953857 -411.64938354]
[638.77709961 -400.99880981]
[628.21466064 -390.34820557]
[617.65228271 -379.69763184]
[607.08984375 -369.04705811]
[596.52740479 -358.39645386]
[585.96496582 -347.74588013]
[583.48254395 -340.76943970]
[575.13732910 -337.00787354]
[564.39935303 -326.53433228]
[568.63580322 -313.54025269]
[566.84777832 -299.92373657]
[559.32806396 -288.35290527]
[547.49822998 -281.11993408]
[533.64007568 -279.68688965]
[520.45574951 -284.39056396]
[509.54513550 -274.09695435]
[498.63452148 -263.80331421]
[488.16098022 -253.06532288]
[478.14257812 -241.90147400]
[468.12414551 -230.73764038]
[458.10574341 -219.57379150]
[448.08731079 -208.40995789]
[438.06890869 -197.24610901]
[439.12707520 -182.43342590]
[429.12600708 -170.96897888]
[413.58193970 -169.95950317]
[403.56350708 -158.79565430]
[393.54510498 -147.63182068]
[396.63937378 -132.95443726]
[410.31195068 -126.78513336]
[423.98455811 -120.61582947]
[440.23944092 -122.78616333]
[450.03073120 -109.63083649]
[443.28598022 -94.68291473]
[426.94360352 -93.31954193]
[417.81524658 -106.94323730]
[404.14266968 -113.11254883]
[390.47006226 -119.28185272]
[375.60250854 -117.29306793]
[364.03210449 -107.74708557]
[352.46170044 -98.20110321]
[340.89129639 -88.65512085]
[329.32089233 -79.10913849]
[317.75048828 -69.56315613]
[306.18008423 -60.01716995]
[307.27859497 -45.18708801]
[299.33996582 -32.40262222]
[285.23068237 -26.67716217]
[270.28268433 -30.40057755]
[258.71228027 -20.85459518]
[257.83020020 -4.06847429]
[244.83065796 7.11299133]
[227.42945862 5.40970516]
[216.01931763 15.14668465]
[204.60917664 24.88366508]
[201.55621338 31.62995148]
[192.92752075 34.68574524]
[181.35711670 44.23172760]
[169.78671265 53.77770996]
[166.62203979 60.47232056]
[157.94374084 63.38426971]
[146.21626282 72.73661804]
[134.48880005 82.08896637]
[122.76132202 91.44131470]
[125.71895599 102.76640320]
[123.02385712 114.88670349]
[114.64440918 124.99305725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[5 35]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[17 25]
[18 24]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[58 185]
[59 184]
[60 183]
[61 182]
[62 180]
[63 179]
[64 178]
[65 176]
[66 175]
[67 174]
[71 171]
[72 170]
[76 166]
[77 165]
[78 164]
[79 163]
[80 162]
[81 161]
[82 160]
[84 149]
[85 148]
[86 147]
[89 144]
[90 143]
[91 142]
[92 141]
[93 140]
[94 139]
[100 138]
[101 137]
[102 136]
[107 130]
[108 129]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
[116 120]
[150 159]
[151 158]
[152 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
