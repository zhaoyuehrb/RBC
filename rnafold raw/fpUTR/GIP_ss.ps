%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUCAGAAGGUCCAGAAAUCAGGGGAAGGAGACCCCUAUCUGUCCUUCUUCUGGAAGAGCUGGAAAGGAAGUCUGCUCAGGAAAUAACCUUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[156.57296753 179.08897400]
[146.93115234 167.59829712]
[137.28933716 156.10763550]
[127.64752960 144.61697388]
[118.00571442 133.12629700]
[105.53394318 137.29521179]
[92.38899994 136.92736816]
[80.16989136 132.06750488]
[70.36300659 123.30678558]
[64.16130829 111.71092987]
[62.31919479 98.69050598]
[65.06075287 85.82936859]
[72.05248260 74.69201660]
[63.15886307 62.61296082]
[54.26524353 50.53390884]
[45.37162399 38.45485306]
[36.47800827 26.37580109]
[18.51626587 27.11201668]
[3.75630450 17.12370491]
[-2.13500810 0.46777755]
[2.97199011 -16.28330040]
[-6.66982412 -27.77396774]
[-16.31163788 -39.26463318]
[-25.95345306 -50.75530243]
[-35.59526825 -62.24596786]
[-45.23707962 -73.73663330]
[-54.87889481 -85.22730255]
[-64.52070618 -96.71796417]
[-74.16252136 -108.20863342]
[-83.80433655 -119.69930267]
[-93.44615173 -131.18997192]
[-103.08796692 -142.68063354]
[-117.88565826 -148.27873230]
[-120.13948059 -163.00183105]
[-135.60877991 -161.78512573]
[-148.82124329 -169.92208862]
[-154.69642639 -184.28392029]
[-150.97517395 -199.34817505]
[-139.08840942 -209.32235718]
[-123.60681915 -210.37118530]
[-110.48339844 -202.09136963]
[-104.76436615 -187.66665649]
[-108.64881134 -172.64364624]
[-94.54076385 -167.86743164]
[-91.59729767 -152.32244873]
[-81.95548248 -140.83178711]
[-72.31366730 -129.34111023]
[-62.67185593 -117.85044861]
[-53.03004074 -106.35977936]
[-43.38822937 -94.86911774]
[-33.74641418 -83.37844849]
[-24.10459900 -71.88777924]
[-14.46278572 -60.39711380]
[-4.82097149 -48.90644836]
[4.82084274 -37.41578293]
[14.46265697 -25.92511559]
[26.52033424 -28.57573891]
[38.61545181 -25.76035309]
[48.37703323 -17.96642494]
[53.86387634 -6.66357374]
[53.95042038 5.97324324]
[48.55706024 17.48218155]
[57.45067978 29.56123543]
[66.34429932 41.64028931]
[75.23791504 53.71934128]
[84.13153839 65.79839325]
[100.44715118 62.29909897]
[116.67517853 66.18437958]
[129.63699341 76.69321442]
[136.79373169 91.76720428]
[136.74359131 108.45378113]
[129.49638367 123.48448944]
[139.13819885 134.97515869]
[148.78001404 146.46582031]
[158.42182922 157.95649719]
[168.06364441 169.44715881]
[188.57278442 175.20944214]
[191.98724365 195.45745850]
[202.67765808 205.97958374]
[217.94049072 210.14573669]
[221.58361816 224.58792114]
[232.27403259 235.11004639]
[242.96444702 245.63217163]
[258.76425171 245.25617981]
[270.14447021 256.22277832]
[270.35339355 272.02569580]
[259.26705933 283.28930664]
[243.46284485 283.33114624]
[232.31706238 272.12637329]
[232.44232178 256.32257080]
[221.75190735 245.80046082]
[211.06149292 235.27833557]
[196.56332397 231.86480713]
[192.15553284 216.66999817]
[181.46511841 206.14787292]
[172.39715576 207.69645691]
[163.53517151 204.75086975]
[157.00636292 197.87995911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[34 43]
[78 95]
[79 94]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
