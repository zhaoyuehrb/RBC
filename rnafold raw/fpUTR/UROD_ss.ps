%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUCCGAUCAUGUGAUCUUCAACAUGGCGACGCUCUUGGUUCCCUACAGAAAGGGGCGGAGCCUGGACUGGGGGGCAGGCUCAGAUUCAGGUUAAAUUGUGGAUUGAGCUCGCAGUUACAGACAGCUGACC\
) } def
/len { sequence length } bind def

/coor [
[77.05756378 127.14342499]
[65.17512512 136.29808044]
[53.29269028 145.45272827]
[41.41025162 154.60739136]
[29.52781487 163.76203918]
[22.96415520 180.92027283]
[5.54237080 182.66610718]
[-6.12219238 192.09680176]
[-10.88595009 200.00273132]
[-18.17254066 201.60798645]
[-30.05497742 210.76263428]
[-41.93741608 219.91728210]
[-53.81985092 229.07194519]
[-65.70228577 238.22659302]
[-77.58472443 247.38125610]
[-77.01363373 262.88781738]
[-85.69406891 275.74975586]
[-100.28822327 281.02142334]
[-115.18434906 276.67572021]
[-124.65457916 264.38366699]
[-125.05741882 248.87182617]
[-116.23796844 236.10479736]
[-101.58748627 230.99177551]
[-86.73937988 235.49880981]
[-74.85694122 226.34416199]
[-62.97450638 217.18949890]
[-51.09206772 208.03485107]
[-39.20963287 198.88020325]
[-27.32719421 189.72554016]
[-15.55288506 180.43223572]
[-3.88832235 171.00154114]
[-2.27907300 158.95349121]
[7.44339895 151.00648499]
[20.37316132 151.87960815]
[32.25559998 142.72494507]
[44.13803482 133.57029724]
[56.02047348 124.41564178]
[67.90290833 115.26098633]
[64.48747253 98.59241486]
[69.21148682 82.24645233]
[80.99221802 69.96959686]
[75.82521057 55.88761902]
[70.65821075 41.80564117]
[65.49121094 27.72366524]
[60.32420349 13.64168739]
[55.15720367 -0.44028977]
[50.22354126 -5.06633043]
[48.67304611 -10.65659332]
[50.09502411 -15.30525780]
[45.59375763 -29.61394691]
[41.09248734 -43.92263412]
[27.68523598 -47.34238434]
[17.81374168 -56.88232422]
[13.99895000 -69.95655060]
[17.14068985 -83.09704590]
[26.30819321 -92.87346649]
[22.14359283 -107.28374481]
[17.97899246 -121.69402313]
[13.81439209 -136.10430908]
[3.60818672 -149.64201355]
[13.79148293 -163.19697571]
[29.63572311 -157.16403198]
[28.22467041 -140.26890564]
[32.38927078 -125.85862732]
[36.55387115 -111.44834900]
[40.71847153 -97.03807068]
[56.29219818 -91.98541260]
[65.90928650 -78.53059387]
[65.64312744 -61.82866287]
[55.40117645 -48.42390442]
[59.90244675 -34.11521530]
[64.40371704 -19.80652809]
[69.23918152 -5.60729265]
[74.40618134 8.47468472]
[79.57318878 22.55666161]
[84.74018860 36.63863754]
[89.90718842 50.72061539]
[95.07419586 64.80259705]
[117.16551971 68.87981415]
[132.39875793 85.39037323]
[147.06608582 82.24877167]
[161.73339844 79.10717010]
[176.40072632 75.96556091]
[191.06805420 72.82395935]
[205.73536682 69.68235779]
[220.40269470 66.54074860]
[228.22499084 61.64086151]
[235.45053101 63.50167847]
[250.18746948 60.70477676]
[264.92440796 57.90787506]
[279.66134644 55.11097336]
[291.77679443 44.93618774]
[305.72357178 50.16466522]
[314.41085815 36.96215439]
[329.90597534 33.85128784]
[343.01589966 42.67768860]
[345.96276855 58.20481110]
[336.99826050 71.22068787]
[321.44082642 74.00322723]
[308.52047729 64.90160370]
[297.45910645 74.87634277]
[282.45825195 69.84791565]
[267.72131348 72.64481354]
[252.98437500 75.44171143]
[238.24743652 78.23861694]
[223.54429626 81.20806885]
[208.87696838 84.34967804]
[194.20965576 87.49127960]
[179.54232788 90.63288116]
[164.87501526 93.77449036]
[150.20768738 96.91609192]
[135.54035950 100.05769348]
[134.21401978 109.61883545]
[130.36386108 118.47042847]
[124.27390289 125.95955658]
[131.97601318 138.83113098]
[139.67813110 151.70271301]
[147.38024902 164.57427979]
[155.08235168 177.44586182]
[170.46934509 181.05364990]
[178.72737122 194.52883911]
[174.95709229 209.87681580]
[161.39535522 217.99191284]
[146.08808899 214.05958557]
[138.11683655 200.41279602]
[142.21078491 185.14796448]
[134.50866699 172.27639771]
[126.80655670 159.40481567]
[119.10444641 146.53324890]
[111.40232849 133.66166687]
[104.28773499 135.28082275]
[96.99241638 135.41293335]
[89.82386017 134.05241394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[7 31]
[8 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[49 72]
[50 71]
[51 70]
[56 66]
[57 65]
[58 64]
[59 63]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[88 105]
[89 104]
[90 103]
[91 102]
[93 100]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
