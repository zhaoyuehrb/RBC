%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAGAGGGCUGCUCAACUGCAAGGACGCUGUAAGCAGGAAGAGAAGCCACAGCGCUUCAGAAAAGAGUGGGACAGGGACAAGCAUAUCUAAGAGGCUGAAC\
) } def
/len { sequence length } bind def

/coor [
[48.97900009 175.87739563]
[35.09123993 181.54574585]
[20.10666466 180.86564636]
[6.78947830 173.96257019]
[-2.40370131 162.10990906]
[-5.77700853 147.49414062]
[-2.70816898 132.81141663]
[6.23670816 120.77027893]
[19.40462494 113.59278870]
[4.73872137 110.44457245]
[-9.92718220 107.29635620]
[-24.59308624 104.14813995]
[-39.70980072 108.81671143]
[-50.52968216 98.58052826]
[-65.19558716 95.43231201]
[-79.86148834 92.28409576]
[-94.28252411 102.04331207]
[-110.98934174 98.50514221]
[-119.86032104 84.30671692]
[-134.61462402 81.60289001]
[-149.36892700 78.89906311]
[-164.12321472 76.19523621]
[-172.68882751 88.78691864]
[-185.63880920 96.80052185]
[-200.72949219 98.84764862]
[-215.34635925 94.57362366]
[-226.95692444 84.71894073]
[-233.54959106 70.99098969]
[-233.98213196 55.76821899]
[-228.17962646 41.68806458]
[-217.14738464 31.18999672]
[-202.79679871 26.09287262]
[-187.61419678 27.27979851]
[-174.23007202 34.54513168]
[-164.96330261 46.63011169]
[-161.41938782 61.44093704]
[-146.66510010 64.14476776]
[-131.91079712 66.84858704]
[-117.15649414 69.55241394]
[-107.59358215 60.77256775]
[-94.51848602 59.13114166]
[-82.73738098 65.45979309]
[-76.71327209 77.61818695]
[-62.04737091 80.76641083]
[-47.38146591 83.91462708]
[-33.31375504 79.02087402]
[-21.44487000 89.48223114]
[-6.77896547 92.63044739]
[7.88693810 95.77866364]
[22.55284119 98.92687988]
[30.87370872 95.86467743]
[40.07348251 99.72131348]
[54.96411514 97.91326141]
[69.85474396 96.10520935]
[84.74538422 94.29715729]
[97.79302216 83.86447906]
[113.16293335 90.41027069]
[127.99216461 88.15330505]
[142.82139587 85.89633179]
[150.99369812 81.44455719]
[158.13194275 83.80219269]
[173.02258301 81.99414062]
[187.91320801 80.18608856]
[195.51428223 66.78721619]
[209.38542175 60.50669098]
[224.12068176 63.56213760]
[234.11167908 74.57658386]
[243.85044861 62.41951370]
[258.97741699 60.79801559]
[270.50729370 70.15735626]
[285.39794922 68.34930420]
[292.02069092 54.41579819]
[305.13717651 46.29413986]
[320.56198120 46.57592392]
[333.37307739 55.17123032]
[339.48251343 69.33733368]
[336.94076538 84.55387115]
[326.55892944 95.96531677]
[311.64981079 99.93030548]
[296.97082520 95.18363190]
[287.20599365 83.23993683]
[272.31536865 85.04798889]
[263.36035156 96.89463806]
[248.28488159 98.94038391]
[235.91973877 89.46721649]
[228.85498047 102.55260468]
[215.27911377 109.04564667]
[200.30801392 106.26720428]
[189.72125244 95.07672882]
[174.83062744 96.88477325]
[159.93998718 98.69282532]
[145.07836914 100.72556305]
[130.24913025 102.98253632]
[115.41990662 105.23950195]
[107.87972260 114.25257111]
[96.23696136 115.84503937]
[86.55342865 109.18779755]
[71.66279602 110.99584198]
[56.77216339 112.80389404]
[41.88153076 114.61194611]
[54.34797668 122.95387268]
[62.16531754 135.75579834]
[63.89149094 150.65614319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 50]
[10 49]
[11 48]
[12 47]
[14 45]
[15 44]
[16 43]
[19 39]
[20 38]
[21 37]
[22 36]
[52 100]
[53 99]
[54 98]
[55 97]
[57 94]
[58 93]
[59 92]
[61 91]
[62 90]
[63 89]
[67 85]
[70 82]
[71 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
