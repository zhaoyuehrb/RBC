%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCUCACCCACCCCAGCCGCGACUGUCUCCGCCGAGCCCCCGGGGCCAGGUGUCCCGGGCGCGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[131.20016479 154.02250671]
[123.49320984 157.79229736]
[115.34192657 160.46905518]
[106.90047455 162.00213623]
[98.32850647 162.36254883]
[89.78815460 161.54347229]
[81.44094086 159.56040955]
[73.44474030 156.45086670]
[65.95079041 152.27363586]
[59.10083008 147.10774231]
[53.02440262 141.05087280]
[47.83644485 134.21760559]
[43.63507462 126.73716736]
[40.49975204 118.75104523]
[38.48977661 110.41027069]
[37.64316559 101.87260437]
[37.97593307 93.29951477]
[39.48178101 84.85316467]
[42.13223267 76.69328308]
[45.87715912 68.97421265]
[50.64572525 61.84194946]
[56.34774780 55.43137741]
[47.21632767 43.53107452]
[38.08490753 31.63077545]
[22.57725716 32.17156982]
[9.73229313 23.46602440]
[4.48916483 8.86159897]
[8.86396122 -6.02600574]
[21.17448425 -15.47220325]
[36.68708801 -15.84473610]
[49.43685913 -7.00035954]
[54.52124786 7.66008377]
[49.98520660 22.49935532]
[59.11662674 34.39965439]
[68.24804688 46.29995346]
[94.91804504 37.82239151]
[122.61067963 41.85674286]
[145.75338745 57.59117889]
[159.68922424 81.85948181]
[174.46133423 79.25476074]
[186.70828247 69.23863220]
[200.58576965 74.64831543]
[215.35787964 72.04359436]
[230.13000488 69.43887329]
[244.90211487 66.83414459]
[259.67422485 64.22942352]
[274.44635010 61.62470245]
[289.21847534 59.01998138]
[303.99057007 56.41525650]
[314.33331299 44.15117645]
[330.36572266 44.73492432]
[339.78915405 57.71870041]
[335.37475586 73.14246368]
[320.50885010 79.17442322]
[306.59530640 71.18737030]
[291.82318115 73.79209900]
[277.05108643 76.39682007]
[262.27896118 79.00154114]
[247.50683594 81.60626221]
[232.73472595 84.21098328]
[217.96260071 86.81571198]
[203.19049072 89.42043304]
[192.00013733 99.25025177]
[177.06605530 94.02687073]
[162.29394531 96.63159943]
[162.16699219 105.21019745]
[160.86425781 113.69025421]
[158.41038513 121.91138458]
[154.85176086 129.71809387]
[150.25572205 136.96273804]
[144.70916748 143.50828552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 35]
[23 34]
[24 33]
[39 65]
[40 64]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
