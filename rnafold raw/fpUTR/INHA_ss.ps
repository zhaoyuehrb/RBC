%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGACUGGGGAAGACUGGAUGAGAAGGGUAGAAGAGGGUGGGUGUGGGAUGGGGAGGGGAGAGUGGAAAGGCCCUGGGCAGACCCUGGCAGAAGGGGCACGGGGCAGGGUGUGAGUUCCCCACUAGCAGGGCCAGGUGAGCU\
) } def
/len { sequence length } bind def

/coor [
[-33.90568542 352.96722412]
[-36.88627625 369.43182373]
[-45.91517639 383.47549438]
[-59.59713745 392.97970581]
[-75.83754730 396.52346802]
[-92.16309357 393.59570312]
[-99.94468689 406.41937256]
[-107.72628784 419.24304199]
[-115.50788879 432.06674194]
[-111.50845337 447.35659790]
[-119.56398773 460.95379639]
[-134.89527893 464.79135132]
[-148.40655518 456.59252930]
[-152.08181763 441.22149658]
[-143.74057007 427.79766846]
[-128.33155823 424.28512573]
[-120.54996490 411.46145630]
[-112.76836395 398.63778687]
[-104.98677063 385.81408691]
[-113.53816986 375.57888794]
[-118.50864410 363.17764282]
[-119.39649963 349.82400513]
[-116.10032654 336.82952881]
[-108.93038940 325.47494507]
[-98.57942963 316.88381958]
[-86.05579376 311.91149902]
[-72.58519745 311.05987549]
[-59.49076462 314.42675781]
[-51.15721130 301.95471191]
[-42.82365799 289.48266602]
[-45.97228241 274.96984863]
[-37.69853973 262.20269775]
[-22.45481873 258.99853516]
[-28.22826195 246.91441345]
[-27.24975586 233.44891357]
[-19.66909599 222.14617920]
[-7.38785648 216.03437805]
[6.41658258 216.81475830]
[15.02022934 204.52748108]
[23.62387657 192.24020386]
[19.62932777 179.94361877]
[23.52716255 167.41162109]
[34.10115051 159.31269836]
[47.60568619 158.79931641]
[56.47533035 146.70265198]
[65.34497070 134.60598755]
[66.63102722 119.76700592]
[81.03090668 113.21306610]
[89.90055084 101.11640167]
[91.76984406 93.20775604]
[99.09799194 88.85542297]
[108.22940826 76.95512390]
[117.36083221 65.05482483]
[126.49225616 53.15452576]
[135.62367249 41.25422287]
[144.75509644 29.35392380]
[153.88652039 17.45362473]
[149.63754272 2.64645171]
[154.86116028 -11.65624523]
[167.35729980 -20.04137802]
[182.21693420 -19.46728516]
[184.47952271 -35.12586594]
[198.36581421 -40.51292038]
[200.62841797 -56.17150497]
[214.51469421 -61.55855942]
[210.45074463 -70.55561066]
[209.98951721 -80.35884857]
[213.15304565 -89.58752441]
[219.45582581 -96.95763397]
[227.97880554 -101.46050262]
[237.50328064 -102.50077820]
[246.68504333 -99.97479248]
[256.81887817 -111.03395081]
[266.95275879 -122.09310913]
[277.08660889 -133.15226746]
[287.22045898 -144.21142578]
[297.35430908 -155.27058411]
[300.97302246 -170.67239380]
[315.27600098 -174.82867432]
[325.40985107 -185.88783264]
[326.56286621 -191.13478088]
[329.36849976 -194.98904419]
[332.99844360 -197.04937744]
[336.58657837 -197.31111145]
[347.42202759 -207.68380737]
[358.25750732 -218.05650330]
[369.09295654 -228.42919922]
[369.18710327 -244.23320007]
[380.48736572 -255.28216553]
[396.28948975 -255.02093506]
[407.21838379 -243.60447693]
[406.79006958 -227.80599976]
[395.25872803 -216.99844360]
[379.46563721 -217.59373474]
[368.63018799 -207.22103882]
[357.79473877 -196.84834290]
[346.95925903 -186.47564697]
[336.46899414 -175.75398254]
[326.33514404 -164.69482422]
[323.44125366 -150.08404541]
[308.41345215 -145.13673401]
[298.27960205 -134.07757568]
[288.14575195 -123.01841736]
[278.01190186 -111.95925903]
[267.87805176 -100.90009308]
[257.74420166 -89.84093475]
[260.45956421 -69.64776611]
[247.33100891 -53.68963623]
[226.41499329 -52.42713547]
[224.80554199 -37.61974335]
[210.26611328 -31.38150024]
[208.65666199 -16.57410622]
[194.11723328 -10.33586311]
[198.51771545 3.86884451]
[193.65254211 18.10942268]
[181.18916321 26.85686684]
[165.78681946 26.58504677]
[156.65539551 38.48534775]
[147.52397156 50.38564682]
[138.39254761 62.28594589]
[129.26113892 74.18624878]
[120.12971497 86.08654785]
[110.99829102 97.98684692]
[101.99722290 109.98604584]
[93.12757874 122.08271790]
[91.20710754 137.78692627]
[77.44164276 143.47563171]
[68.57199860 155.57229614]
[59.70235443 167.66896057]
[62.69439697 184.86779785]
[52.55217361 198.66064453]
[35.91115570 200.84384155]
[27.30751038 213.13111877]
[18.70386314 225.41841125]
[24.43004608 241.29556274]
[19.63893509 257.30654907]
[6.39795399 267.22985840]
[-9.98277473 267.33209229]
[-7.10951757 282.64163208]
[-15.73859501 295.17135620]
[-30.35161209 297.81622314]
[-38.68516541 310.28826904]
[-47.01871872 322.76031494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 19]
[7 18]
[8 17]
[9 16]
[28 143]
[29 142]
[30 141]
[33 138]
[38 134]
[39 133]
[40 132]
[44 129]
[45 128]
[46 127]
[48 125]
[49 124]
[51 123]
[52 122]
[53 121]
[54 120]
[55 119]
[56 118]
[57 117]
[61 113]
[63 111]
[65 109]
[72 106]
[73 105]
[74 104]
[75 103]
[76 102]
[77 101]
[79 99]
[80 98]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
