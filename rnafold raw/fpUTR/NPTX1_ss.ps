%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGGGGCCUGAUAGCGCGGCGGUGUGGACCGCGCGGCCGAAGAGCGCGGCGCCCAGAGCGCGGGCCGCUCGCGGAGCCACAGCCCGAGCCGGGUCCCAGCCGGAGCCGAGCCCCAGCCGAGCCGAGCCGGGCCCGGAGCGCCCGGUGCCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[89.44852448 240.41371155]
[100.12828064 228.76388550]
[99.23966980 213.79022217]
[98.35105896 198.81657410]
[97.46244812 183.84291077]
[96.57383728 168.86926270]
[88.09616089 156.62269592]
[95.00234222 142.38839722]
[94.11373138 127.41474915]
[93.22512054 112.44109344]
[89.58293152 126.99219513]
[76.38330078 134.11747742]
[62.21991348 129.17802429]
[56.31389999 115.38965607]
[62.51040268 101.72937012]
[76.77471924 97.09071350]
[61.77544785 97.23889923]
[46.77618027 97.38708496]
[31.77691078 97.53527069]
[22.73900414 110.01013947]
[8.25775623 114.71618652]
[-6.04860115 110.04798126]
[-14.75860500 97.99501801]
[-29.75787354 98.14320374]
[-38.36116409 101.37114716]
[-45.05424500 98.14320374]
[-60.05351257 97.99501801]
[-75.05278015 97.84683228]
[-81.06610107 100.79607391]
[-86.79484558 100.30017853]
[-90.63864899 97.38476562]
[-105.62035370 96.64412689]
[-120.60205841 95.90348816]
[-135.58375549 95.16284943]
[-150.56546021 94.42221069]
[-165.54716492 93.68156433]
[-174.43461609 106.29174805]
[-188.73738098 112.07401276]
[-203.89149475 109.18325043]
[-215.06132507 98.54190826]
[-218.68264771 83.54558563]
[-213.59988403 68.97956085]
[-201.43493652 59.49179840]
[-186.06959534 58.10981369]
[-172.40689087 65.27458191]
[-164.80653381 78.69985962]
[-149.82482910 79.44050598]
[-134.84312439 80.18114471]
[-119.86141205 80.92178345]
[-104.87971497 81.66242218]
[-89.89801025 82.40306854]
[-74.90459442 82.84756470]
[-59.90532684 82.99575043]
[-44.90605927 83.14393616]
[-29.90605927 83.14393616]
[-14.90679169 82.99575043]
[-6.43661928 70.77305603]
[7.77471495 65.82311249]
[22.34611511 70.24212646]
[31.62872505 82.53600311]
[46.62799454 82.38781738]
[61.62726212 82.23963165]
[76.62652588 82.09144592]
[106.65966034 85.61734772]
[119.18292236 77.36096191]
[131.70617676 69.10457611]
[144.22944641 60.84819031]
[149.70858765 53.47153091]
[157.08270264 52.55524826]
[169.76663208 44.54789734]
[182.45057678 36.54054642]
[195.13452148 28.53319550]
[200.75833130 21.26622581]
[208.14910889 20.49581528]
[220.98876953 12.74062538]
[233.82843018 4.98543644]
[219.34323120 1.08944213]
[210.61546326 -11.10998726]
[211.60540771 -26.07728577]
[221.86389160 -37.02094650]
[236.73603821 -38.97521973]
[249.47352600 -31.05333710]
[254.29666138 -16.84990501]
[249.01753235 -2.81058693]
[262.80380249 -8.72153187]
[276.59002686 -14.63247585]
[290.37628174 -20.54342079]
[304.16253662 -26.45436478]
[310.86013794 -32.74549484]
[318.28005981 -32.34291840]
[332.18038940 -37.98033142]
[346.02435303 -43.75479507]
[359.81060791 -49.66573715]
[373.59686279 -55.57668304]
[383.23138428 -68.12604523]
[397.97781372 -66.03016663]
[411.76406860 -71.94110870]
[415.23803711 -82.31905365]
[423.69522095 -88.91250610]
[434.16790771 -89.71612549]
[443.14727783 -84.70456696]
[457.15628052 -90.06625366]
[467.27908325 -102.22518921]
[481.93115234 -99.54836273]
[495.94018555 -104.91004944]
[506.06295776 -117.06898499]
[520.71502686 -114.39216614]
[534.72406006 -119.75384521]
[547.35552979 -131.06234741]
[561.71881104 -122.05503845]
[557.03967285 -105.75957489]
[540.08575439 -105.74483490]
[526.07672119 -100.38315582]
[516.95599365 -88.60771942]
[501.30184937 -90.90103912]
[487.29284668 -85.53935242]
[478.17208862 -73.76392365]
[462.51797485 -76.05724335]
[448.50894165 -70.69555664]
[437.52066040 -54.82270050]
[417.67498779 -58.15486145]
[403.88876343 -52.24391556]
[395.24029541 -40.11734390]
[379.50781250 -41.79043198]
[365.72155762 -35.87948608]
[351.93530273 -29.96854210]
[347.00070190 -24.41277504]
[337.81781006 -24.07998848]
[323.91744995 -18.44257545]
[310.07348633 -12.66811371]
[296.28723145 -6.75716925]
[282.50097656 -0.84622461]
[268.71472168 5.06472015]
[254.92848206 10.97566509]
[241.58363342 17.82510376]
[228.74395752 25.58029175]
[215.90429688 33.33547974]
[203.14186096 41.21713638]
[190.45793152 49.22448730]
[177.77398682 57.23183823]
[165.09004211 65.23918915]
[152.48582458 73.37145233]
[139.96257019 81.62783813]
[127.43930817 89.88422394]
[114.91604614 98.14060974]
[108.19877625 111.55248260]
[109.08738708 126.52613831]
[109.97599792 141.49980164]
[118.51723480 154.81736755]
[111.54750061 167.98065186]
[112.43610382 182.95429993]
[113.32471466 197.92796326]
[114.21332550 212.90161133]
[115.10193634 227.87527466]
[127.08458710 238.18020630]
[128.18759155 253.94595337]
[117.75655365 265.81900024]
[101.98001862 266.75524902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[8 148]
[9 147]
[10 146]
[16 63]
[17 62]
[18 61]
[19 60]
[23 56]
[24 55]
[26 54]
[27 53]
[28 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[64 145]
[65 144]
[66 143]
[67 142]
[69 141]
[70 140]
[71 139]
[72 138]
[74 137]
[75 136]
[76 135]
[84 134]
[85 133]
[86 132]
[87 131]
[88 130]
[90 129]
[91 128]
[92 126]
[93 125]
[94 124]
[96 122]
[97 121]
[101 119]
[102 118]
[104 116]
[105 115]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
