%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCCGCUUCCCUCCUGGGGCAGAGUCUCGGUCACAAACAACCACCACCGGCCCACCCCGCCCCUCCUUCCCUCUUCACUGUGAGCUCAGAGCAGCAGGACAAAGUGCUCGGGACAAGGACAUAGGGCUGAGAGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[97.39649963 300.15246582]
[83.30090332 292.49127197]
[80.64418030 276.66973877]
[91.46434784 264.82473755]
[92.13255310 249.83964539]
[84.96989441 236.78033447]
[93.31427002 223.33853149]
[93.98246765 208.35342407]
[94.65067291 193.36831665]
[95.31887817 178.38319397]
[95.31887817 163.38319397]
[94.65067291 148.39808655]
[93.98246765 133.41297913]
[93.31427002 118.42787170]
[84.31834412 113.44182587]
[78.70411682 104.19560242]
[78.39604187 92.85039520]
[83.99836731 82.37232208]
[69.57637787 78.24847412]
[55.15438461 74.12462616]
[40.73239136 70.00077057]
[26.31039810 65.87692261]
[10.91483593 69.52208710]
[0.80515903 58.58390808]
[-14.59040356 62.22907257]
[-24.70008087 51.29089355]
[-39.12207413 47.16704559]
[-58.36299515 52.99820709]
[-71.30620575 38.69665909]
[-85.89758301 35.21935654]
[-100.48896790 31.74205589]
[-115.08034515 28.26475334]
[-129.67172241 24.78745079]
[-138.55767822 37.12067032]
[-151.48957825 45.11031723]
[-166.49539185 47.53802872]
[-181.28686523 44.03359985]
[-193.60838318 35.13143158]
[-201.58100891 22.18903351]
[-203.98898315 7.18003225]
[-200.46510315 -7.60680962]
[-191.54672241 -19.91660500]
[-178.59385681 -27.87220192]
[-163.58169556 -30.26042938]
[-148.79949951 -26.71709633]
[-136.50144958 -17.78253937]
[-128.56289673 -4.81921291]
[-126.19441986 10.19607162]
[-111.60304260 13.67337322]
[-97.01166534 17.15067673]
[-82.42028046 20.62797737]
[-67.82890320 24.10527992]
[-59.55491638 17.94261169]
[-49.03233337 17.38334465]
[-39.77178955 22.85852623]
[-34.99822235 32.74505234]
[-20.57623100 36.86890030]
[-6.21222448 32.92877579]
[4.92900944 44.16191483]
[19.29301453 40.22178650]
[30.43424988 51.45492935]
[44.85623932 55.57878113]
[59.27823257 59.70262909]
[73.70022583 63.82648087]
[88.12221527 67.95033264]
[102.98838043 65.95102692]
[115.80844116 58.16347504]
[128.62850952 50.37592697]
[141.44857788 42.58837509]
[154.09196472 34.51713943]
[166.55238342 26.16622734]
[179.01281738 17.81531334]
[191.47323608 9.46440029]
[190.97534180 -4.35597467]
[197.33963013 -16.51150894]
[208.79888916 -23.85865974]
[222.28459167 -24.55772591]
[234.24826050 -18.53240776]
[246.89164734 -26.60364342]
[259.53503418 -34.67487717]
[272.17840576 -42.74611282]
[279.64715576 -56.69345474]
[294.53817749 -57.02006149]
[307.18157959 -65.09130096]
[310.70343018 -80.26477051]
[323.64059448 -88.27004242]
[338.08447266 -84.81897736]
[350.72787476 -92.89021301]
[363.28054810 -101.10179901]
[366.09594727 -116.65329742]
[379.13073730 -125.59028625]
[394.65161133 -122.61061859]
[403.45028687 -109.48207092]
[400.30670166 -93.99358368]
[387.08584595 -85.33419800]
[371.63146973 -88.64137268]
[367.79531860 -82.25299072]
[358.79910278 -80.24683380]
[346.15570068 -72.17559814]
[343.20620728 -57.62100601]
[330.49899292 -49.25551605]
[315.25280762 -52.44791412]
[302.60943604 -44.37667847]
[296.04501343 -31.00664711]
[280.24963379 -30.10272980]
[267.60626221 -22.03149414]
[254.96287537 -13.96025848]
[242.31948853 -5.88902330]
[241.87628174 10.48369217]
[231.68238831 23.51447487]
[215.57841492 27.97416496]
[199.82415771 21.92482758]
[187.36372375 30.27574158]
[174.90330505 38.62665558]
[162.44287109 46.97756577]
[160.64677429 51.48231125]
[155.95703125 54.86964035]
[149.23612976 55.40843964]
[136.41606140 63.19599152]
[123.59599304 70.98354340]
[110.77593231 78.77109528]
[119.49008179 88.25332642]
[121.70236969 100.35327911]
[117.33335114 111.23173523]
[108.29937744 117.75966644]
[108.96758270 132.74478149]
[109.63578033 147.72988892]
[110.30398560 162.71499634]
[112.88726044 166.43339539]
[113.98881531 170.38529968]
[113.72396851 174.06005859]
[112.36684418 177.04121399]
[110.30398560 179.05140686]
[109.63578033 194.03651428]
[108.96758270 209.02162170]
[108.29937744 224.00672913]
[115.41423798 238.13787842]
[107.11766052 250.50784302]
[106.44946289 265.49295044]
[116.17241669 278.25396729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 139]
[5 138]
[7 136]
[8 135]
[9 134]
[10 133]
[11 128]
[12 127]
[13 126]
[14 125]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[24 59]
[26 57]
[27 56]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[66 121]
[67 120]
[68 119]
[69 118]
[70 115]
[71 114]
[72 113]
[73 112]
[78 108]
[79 107]
[80 106]
[81 105]
[83 103]
[84 102]
[87 99]
[88 98]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
