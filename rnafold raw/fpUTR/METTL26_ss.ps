%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCCCGCGGAAGCCCGGCCACCGCCCCCGACGCGACCCGCGCCGCGUCCGCGGCGGGGAGUUGUUGCUGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[69.78027344 325.26889038]
[58.96828461 336.56646729]
[43.41833878 338.21969604]
[30.47264099 329.44796753]
[26.24375725 314.39306641]
[32.72843170 300.16339111]
[46.86480713 293.47781372]
[50.50023270 278.92501831]
[54.13565826 264.37225342]
[57.77108383 249.81945801]
[61.40650940 235.26666260]
[56.98449326 221.04362488]
[67.83574677 209.53010559]
[71.47117615 194.97732544]
[75.10659790 180.42453003]
[69.29005432 163.99732971]
[81.84975433 150.71333313]
[84.88856506 136.02436829]
[87.92737579 121.33540344]
[90.96618652 106.64644623]
[93.70473480 91.89855194]
[88.31244659 77.02462006]
[98.01481628 65.72358704]
[100.45195770 50.92290115]
[102.88909912 36.12221527]
[105.32624054 21.32152748]
[107.76338196 6.52084064]
[102.37109375 -8.35308838]
[112.07345581 -19.65411949]
[106.68116760 -34.52804947]
[116.38353729 -45.82907867]
[118.82067871 -60.62976837]
[121.25782013 -75.43045044]
[123.69496155 -90.23114014]
[126.13210297 -105.03182983]
[128.56924438 -119.83251190]
[117.56897736 -130.77662659]
[115.13561249 -146.10173035]
[122.20482635 -159.91497803]
[136.05836487 -166.90490723]
[151.36924744 -164.38375854]
[162.25015259 -153.32093811]
[164.51712036 -137.97036743]
[157.29847717 -124.23461151]
[143.36993408 -117.39537048]
[140.93278503 -102.59468842]
[138.49565125 -87.79399872]
[136.05850220 -72.99330902]
[133.62136841 -58.19262314]
[131.18421936 -43.39193726]
[136.75083923 -29.57665253]
[126.87414551 -17.21697807]
[132.44076538 -3.40169263]
[122.56407166 8.95798302]
[120.12693024 23.75867081]
[117.68978882 38.55935669]
[115.25263977 53.36004257]
[112.81549835 68.16072845]
[118.38211060 81.97601318]
[108.50542450 94.33569336]
[110.44126892 102.41606903]
[105.65515137 109.68525696]
[102.61634064 124.37422180]
[99.57752991 139.06318665]
[96.53871155 153.75213623]
[103.01505280 165.11915588]
[99.98797607 177.43032837]
[89.65939331 184.05995178]
[86.02396393 198.61274719]
[82.38853455 213.16554260]
[86.55052185 228.42948914]
[75.95929718 238.90208435]
[72.32387543 253.45487976]
[68.68844604 268.00765991]
[65.05302429 282.56045532]
[61.41759491 297.11325073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[13 70]
[14 69]
[15 68]
[17 65]
[18 64]
[19 63]
[20 62]
[21 60]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[29 52]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
