%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGUCCGGCUCAGCUGGGGCUGGGCGCCGUGGGUCUGGCGGUUCCGUAGCGGUCCCAGCGUCUGUCCCGCCGGCCGGGCGGUCGCGGCACAGCCGCGGGAAGGUGUCGGAGGGCGGUUCCGCCGCGCGGCGGGCGCGCCGCCCAC\
) } def
/len { sequence length } bind def

/coor [
[112.39106750 149.56135559]
[98.48952484 143.92689514]
[94.22711182 129.54524231]
[102.81450653 117.24525452]
[95.32971191 117.72253418]
[85.90641022 129.39306641]
[76.48310852 141.06361389]
[67.05981445 152.73414612]
[57.63651276 164.40467834]
[48.21321106 176.07521057]
[38.78991318 187.74575806]
[29.36661148 199.41629028]
[19.94331169 211.08682251]
[20.20622635 227.12773132]
[7.73769760 237.22303772]
[-7.89748383 233.62850952]
[-14.70534611 219.10154724]
[-7.46347904 204.78599548]
[8.27277565 201.66352844]
[17.69607544 189.99299622]
[27.11937523 178.32244873]
[36.54267502 166.65191650]
[45.96597672 154.98138428]
[55.38927460 143.31083679]
[64.81257629 131.64030457]
[74.23587799 119.96977234]
[83.65917206 108.29923248]
[76.90612030 94.90534973]
[61.91963577 95.54196167]
[46.93315125 96.17858124]
[31.94666672 96.81520081]
[16.96018219 97.45182037]
[7.57005119 109.95619965]
[-7.67249489 113.44887543]
[-21.57039261 106.28072357]
[-27.56147957 91.83631134]
[-22.81694603 76.93585968]
[-9.57701874 68.61490631]
[5.90681553 70.80234528]
[16.32356262 82.46533203]
[31.31004715 81.82872009]
[46.29653168 81.19210052]
[61.28301620 80.55548096]
[76.26950073 79.91886139]
[87.63413239 70.12880707]
[90.48237610 55.40170670]
[93.33061218 40.67460251]
[96.17885590 25.94750214]
[87.59650421 12.94823647]
[90.69481659 -1.94656384]
[103.14051819 -10.04841900]
[105.98876190 -24.77552032]
[97.40640259 -37.77478790]
[100.50472260 -52.66958618]
[112.95042419 -60.77144241]
[115.79866791 -75.49854279]
[118.64691162 -90.22564697]
[121.49515533 -104.95274353]
[120.04821777 -114.04368591]
[124.56330872 -119.96073914]
[127.72349548 -134.62406921]
[130.88368225 -149.28739929]
[126.22746277 -164.40791321]
[136.47247314 -175.21943665]
[139.63265991 -189.88276672]
[142.79284668 -204.54609680]
[145.95303345 -219.20942688]
[141.29681396 -234.32994080]
[151.54182434 -245.14146423]
[154.70201111 -259.80477905]
[157.86219788 -274.46810913]
[161.02238464 -289.13143921]
[159.76873779 -298.25106812]
[164.40840149 -304.07092285]
[167.87911987 -318.66387939]
[171.34982300 -333.25683594]
[174.82054138 -347.84979248]
[169.61364746 -363.40036011]
[180.67858887 -375.50402832]
[196.63272095 -371.70956421]
[201.06378174 -355.92041016]
[189.41348267 -344.37905884]
[185.94277954 -329.78613281]
[182.47206116 -315.19317627]
[179.00135803 -300.60021973]
[175.68571472 -285.97125244]
[172.52552795 -271.30792236]
[169.36534119 -256.64459229]
[166.20515442 -241.98127747]
[171.08741760 -227.90957642]
[160.61636353 -216.04922485]
[157.45617676 -201.38591003]
[154.29598999 -186.72257996]
[151.13580322 -172.05924988]
[156.01806641 -157.98754883]
[145.54701233 -146.12719727]
[142.38682556 -131.46388245]
[139.22663879 -116.80054474]
[136.22225952 -102.10450745]
[133.37400818 -87.37740326]
[130.52577209 -72.65029907]
[127.67752838 -57.92319870]
[136.20492554 -45.76511765]
[133.52619934 -30.78916740]
[120.71586609 -21.92727852]
[117.86762238 -7.20017672]
[126.39502716 4.95790672]
[123.71629333 19.93385696]
[110.90596008 28.79574585]
[108.05771637 43.52284622]
[105.20947266 58.24994659]
[102.36122894 72.97705078]
[135.64797974 104.98405457]
[146.47732544 115.36313629]
[157.30667114 125.74222565]
[168.13601685 136.12130737]
[178.96534729 146.50038147]
[189.79469299 156.87947083]
[200.62403870 167.25856018]
[211.77830505 177.28762817]
[223.24620056 186.95651245]
[234.71409607 196.62539673]
[246.18199158 206.29429626]
[257.64987183 215.96318054]
[269.11776733 225.63206482]
[285.34744263 227.98361206]
[291.17364502 243.31292725]
[280.60287476 255.85049438]
[264.50942993 252.69877625]
[259.44888306 237.09996033]
[247.98098755 227.43107605]
[236.51310730 217.76219177]
[225.04521179 208.09329224]
[213.57731628 198.42440796]
[202.10942078 188.75552368]
[198.51809692 188.71774292]
[194.77273560 186.89462280]
[191.73269653 183.23631287]
[190.24494934 178.08789062]
[179.41560364 167.70881653]
[168.58627319 157.32972717]
[157.75692749 146.95065308]
[146.92758179 136.57156372]
[136.09825134 126.19248199]
[125.26890564 115.81340027]
[117.78410339 116.29067993]
[127.86392212 127.39911652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[45 112]
[46 111]
[47 110]
[48 109]
[51 106]
[52 105]
[55 102]
[56 101]
[57 100]
[58 99]
[60 98]
[61 97]
[62 96]
[64 94]
[65 93]
[66 92]
[67 91]
[69 89]
[70 88]
[71 87]
[72 86]
[74 85]
[75 84]
[76 83]
[77 82]
[113 145]
[114 144]
[115 143]
[116 142]
[117 141]
[118 140]
[119 139]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
