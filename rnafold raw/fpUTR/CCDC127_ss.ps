%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUACUGAGUGGGGGCGCCGCGCCUGCGCAAAGCGGACCCGCGGACGGUGGCGUUAAGGGAACGCUGAGGUCCCGCGCUCCCCGACCGAGGUAUAUCUCC\
) } def
/len { sequence length } bind def

/coor [
[136.45307922 377.27124023]
[147.53701782 366.41186523]
[145.21354675 351.59292603]
[142.89007568 336.77395630]
[140.56660461 321.95498657]
[138.24311829 307.13604736]
[126.09297943 298.59735107]
[123.52554321 283.60189819]
[132.56410217 270.91561890]
[129.78088379 256.17608643]
[126.54061890 241.53024292]
[123.30035400 226.88439941]
[120.06008148 212.23855591]
[116.81981659 197.59271240]
[113.35217285 182.99903870]
[109.65798950 168.46105957]
[105.96380615 153.92306519]
[102.26962280 139.38508606]
[91.63617706 128.95535278]
[95.73647308 113.67471313]
[86.11724854 103.52768707]
[89.72554016 90.01947021]
[86.03135681 75.48149109]
[82.33717346 60.94350433]
[78.64299011 46.40551758]
[73.40969849 38.69803238]
[75.06748962 31.35792351]
[71.70639801 27.99138260]
[69.89470673 24.09525490]
[69.59893799 20.26283836]
[70.58272552 17.00689888]
[72.45511627 14.69638824]
[71.05743408 -0.23835200]
[69.65974426 -15.17309189]
[68.26205444 -30.10783195]
[56.37752151 -40.17737579]
[55.17281723 -55.34323502]
[64.84582520 -66.61126709]
[63.44813919 -81.54600525]
[62.05044937 -96.48074341]
[50.68256378 -103.90005493]
[45.78847504 -116.35190582]
[48.96804047 -129.14617920]
[58.82480240 -137.60350037]
[57.89225769 -152.57447815]
[56.95971298 -167.54545593]
[56.02716827 -182.51644897]
[46.51458740 -195.87469482]
[53.57208252 -210.67752075]
[69.93950653 -211.69705200]
[78.77945709 -197.88447571]
[70.99815369 -183.44898987]
[71.93069458 -168.47801208]
[72.86324310 -153.50701904]
[73.79578400 -138.53604126]
[86.83859253 -128.04676819]
[88.37506104 -111.04330444]
[76.98519135 -97.87843323]
[78.38288116 -82.94369507]
[79.78056335 -68.00895691]
[91.37636566 -58.73139572]
[93.00656891 -43.60535812]
[83.19679260 -31.50552177]
[84.59448242 -16.57078171]
[85.99217224 -1.63604105]
[87.38986206 13.29869938]
[89.71333313 28.11765671]
[93.18097687 42.71133423]
[96.87516022 57.24931717]
[100.56934357 71.78730011]
[104.26352692 86.32528687]
[113.88275146 96.47231293]
[110.27445984 109.98052979]
[121.17213440 121.45010376]
[116.80760956 135.69090271]
[120.50179291 150.22888184]
[124.19597626 164.76687622]
[127.89015961 179.30485535]
[133.12344360 187.01234436]
[131.46565247 194.35244751]
[134.70593262 208.99829102]
[137.94619751 223.64413452]
[141.18646240 238.28997803]
[144.42672729 252.93582153]
[148.78573608 258.28543091]
[149.53375244 264.14633179]
[147.38305664 268.59213257]
[159.87062073 277.90335083]
[162.01585388 292.96496582]
[153.06208801 304.81256104]
[155.38555908 319.63153076]
[157.70903015 334.45046997]
[160.03250122 349.26943970]
[162.35597229 364.08840942]
[176.23161316 371.03433228]
[183.34461975 384.82507324]
[180.95989990 400.15780640]
[169.99441528 411.13677979]
[154.66462708 413.54034424]
[140.86514282 406.44430542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[9 87]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 78]
[16 77]
[17 76]
[18 75]
[20 73]
[22 71]
[23 70]
[24 69]
[25 68]
[27 67]
[32 66]
[33 65]
[34 64]
[35 63]
[38 60]
[39 59]
[40 58]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
