%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCGCGUGCCUGAACGCCUUGGGCCGUCGGCGAGGGGGAGGGGAAGCCGUGGGCGGAAGCGGAAGUGACGACUGAAGCGGGGCGGAGACGCAAG\
) } def
/len { sequence length } bind def

/coor [
[93.11776733 307.84115601]
[85.36622620 294.26000977]
[88.20884705 278.88296509]
[100.30342865 268.97058105]
[100.30342865 253.97058105]
[100.30342865 238.97058105]
[100.06053162 223.97254944]
[89.98251343 209.70643616]
[98.54967499 193.50740051]
[97.57872772 178.53886414]
[96.60778046 163.57031250]
[95.63683319 148.60177612]
[94.66588593 133.63322449]
[77.79753876 125.82049561]
[67.54562378 110.31313324]
[66.96526337 91.73241425]
[76.22939301 75.61547089]
[68.38156128 62.83221817]
[60.53372955 50.04896545]
[46.71977615 42.33629608]
[46.65486908 27.44183159]
[38.80703735 14.65857983]
[24.99308395 6.94590950]
[24.92817688 -7.94855452]
[11.11422348 -15.66122437]
[11.04931545 -30.55568886]
[3.20148420 -43.33893967]
[-4.64634752 -56.12219238]
[-11.94413757 -61.93630600]
[-12.53357315 -69.44891357]
[-19.96334267 -82.47959137]
[-27.39311409 -95.51026154]
[-34.82288361 -108.54093933]
[-49.89984131 -106.60348511]
[-64.56925964 -110.58804321]
[-76.59415436 -119.88698578]
[-84.14081573 -133.08230591]
[-86.05843353 -148.16178894]
[-82.05458832 -162.82595825]
[-72.73983002 -174.83860779]
[-59.53459930 -182.36790466]
[-44.45259476 -184.26568604]
[-29.79371071 -180.24255371]
[-17.79332542 -170.91200256]
[-10.28140545 -157.69688416]
[-8.40346622 -142.61239624]
[-12.44587994 -127.95880890]
[-21.79220772 -115.97071075]
[-14.36243725 -102.94003296]
[-6.93266726 -89.90935516]
[0.49710256 -76.87868500]
[8.13690472 -63.97002411]
[15.98473644 -51.18677139]
[23.83256721 -38.40351868]
[37.08518982 -31.60519409]
[37.71142960 -15.79638577]
[50.96405029 -8.99805927]
[51.59029007 6.81074858]
[59.43812180 19.59399986]
[72.69074249 26.39232826]
[73.31697845 42.20113373]
[81.16481018 54.98438644]
[89.01264191 67.76763916]
[106.16289520 66.50872040]
[121.74156952 73.79024506]
[131.77604675 87.75539398]
[146.61700439 85.57696533]
[161.45797729 83.39853668]
[173.97595215 72.80455017]
[189.31602478 78.60233307]
[191.69764709 94.82762146]
[178.67080688 104.78923035]
[163.63641357 98.23950958]
[148.79544067 100.41793823]
[133.95446777 102.59636688]
[133.00471497 108.38664246]
[131.07507324 113.92792511]
[128.22282410 119.05569458]
[124.53264618 123.61770630]
[120.11411285 127.47852325]
[115.09840393 130.52351379]
[109.63442993 132.66227722]
[110.60537720 147.63082886]
[111.57632446 162.59936523]
[112.54727173 177.56791687]
[113.51821899 192.53645325]
[122.74724579 201.72445679]
[123.14721680 214.33752441]
[115.05266571 223.48681641]
[118.51251221 232.15234375]
[115.30342865 238.97058105]
[115.30342865 253.97058105]
[115.30342865 268.97058105]
[127.39801025 278.88296509]
[130.24063110 294.26000977]
[122.48908997 307.84115601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 93]
[5 92]
[6 91]
[7 89]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[17 63]
[18 62]
[19 61]
[21 59]
[22 58]
[24 56]
[26 54]
[27 53]
[28 52]
[30 51]
[31 50]
[32 49]
[33 48]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
