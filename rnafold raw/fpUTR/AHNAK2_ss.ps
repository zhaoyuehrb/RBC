%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGGCAGCGCAGGGCAGCGGGGCAGAGCGCGGCUCCCGCCCGCCCGCCCCGUGCGCCGGAGCCGGGACCAGCGACUGGACGCGACGGGCCGCCAGGCCCGCACCGCCUGGCCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[87.07877350 333.35995483]
[89.76881409 314.16583252]
[90.15822601 299.17089844]
[90.54763794 284.17596436]
[90.93704224 269.18099976]
[91.32645416 254.18606567]
[91.71586609 239.19113159]
[84.31157684 226.26727295]
[92.40453339 212.67262268]
[92.79394531 197.67767334]
[89.78588104 190.82676697]
[93.39314270 182.29989624]
[94.17169952 167.32011414]
[94.95025635 152.34034729]
[95.72881317 137.36056519]
[78.67550659 129.23934937]
[68.30973816 114.31855774]
[66.78044891 96.93770599]
[73.78308868 81.74585724]
[59.56615067 76.96269989]
[45.34921265 72.17954254]
[31.13227081 67.39638519]
[16.91533089 62.61322403]
[2.69839096 57.83006287]
[-11.51854897 53.04690552]
[-27.06554604 55.97972488]
[-36.66115570 44.58790588]
[-45.91703796 44.80771255]
[-51.18227386 39.49162674]
[-65.27024841 34.34099960]
[-79.35822296 29.19037056]
[-88.61669159 29.16981506]
[-93.74214935 23.71883202]
[-107.69165802 18.20420647]
[-121.64117432 12.68958092]
[-137.77499390 15.62757301]
[-148.17854309 2.95088792]
[-142.14952087 -12.29978657]
[-125.89009094 -14.43586445]
[-116.12654877 -1.25993156]
[-102.17703247 4.25469398]
[-88.22752380 9.76931953]
[-74.20759583 15.10239601]
[-60.11962128 20.25302315]
[-46.03164673 25.40365219]
[-31.87799644 30.37096405]
[-17.34788895 27.09601974]
[-6.73539019 38.82996368]
[7.48155022 43.61312485]
[21.69849014 48.39628220]
[35.91543198 53.17944336]
[50.13237000 57.96260071]
[64.34931183 62.74576187]
[78.56625366 67.52892303]
[92.44300079 61.83367538]
[99.20075226 48.44215775]
[105.95851135 35.05064011]
[112.54185486 21.57252502]
[118.94968414 8.01008415]
[125.35750580 -5.55235577]
[131.76533508 -19.11479568]
[129.78213501 -37.36530685]
[144.46925354 -46.87530899]
[150.52282715 -60.59952927]
[142.60173035 -73.94253540]
[144.06974792 -89.39000702]
[154.36242676 -101.00209045]
[169.52201843 -104.31369019]
[183.71932983 -98.05143738]
[191.49522400 -84.62329865]
[189.85971069 -69.19265747]
[179.44166565 -57.69291306]
[164.24705505 -54.54595566]
[158.19348145 -40.82173538]
[162.27912903 -29.35565567]
[157.25086975 -17.83006287]
[145.32777405 -12.70697117]
[138.91995239 0.85546893]
[132.51211548 14.41790867]
[126.10429382 27.98034859]
[126.09168243 35.46254730]
[119.35002899 41.80839539]
[112.59226990 55.19991302]
[105.83451843 68.59143066]
[121.54359436 73.91416168]
[133.25111389 86.95653534]
[137.27268982 104.98005676]
[151.98919678 107.88253021]
[166.70570374 110.78501129]
[181.42221069 113.68749237]
[196.13871765 116.58996582]
[210.85523987 119.49244690]
[226.19229126 113.68671417]
[238.71575928 124.27421570]
[235.54254150 140.36341858]
[219.93699646 145.40315247]
[207.95275879 134.20895386]
[193.23625183 131.30647278]
[178.51974487 128.40399170]
[163.80322266 125.50151825]
[149.08671570 122.59904480]
[134.37020874 119.69656372]
[128.45480347 124.30720520]
[140.88067627 132.70945740]
[136.72943115 147.12359619]
[121.73796844 147.62971497]
[116.62400055 133.52847290]
[110.70859528 138.13911438]
[109.93003845 153.11889648]
[109.15148163 168.09867859]
[108.37292480 183.07846069]
[107.78888702 198.06709290]
[107.39947510 213.06202698]
[114.77590942 227.05841064]
[106.71080780 239.58053589]
[106.32139587 254.57548523]
[105.93199158 269.57043457]
[105.54257965 284.56536865]
[105.15316772 299.56030273]
[104.76375580 314.55526733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 117]
[6 116]
[7 115]
[9 113]
[10 112]
[12 111]
[13 110]
[14 109]
[15 108]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[27 46]
[29 45]
[30 44]
[31 43]
[33 42]
[34 41]
[35 40]
[55 84]
[56 83]
[57 82]
[58 80]
[59 79]
[60 78]
[61 77]
[63 74]
[64 73]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
