%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUUGUAACGCCGGAGUGGGACGCUGCUUUGCGUCUGAAAGGUGCAAAUUGAAACUCGAAAGCCCGCAAAUUAACGGGGUGUCUCUCUCCUGAUGAAGAGGUAUUGCACUCUCAGUCUCGCCAUGUUGAAGUCAGA\
) } def
/len { sequence length } bind def

/coor [
[-59.11536407 477.37988281]
[-66.56637573 490.39843750]
[-74.01738739 503.41696167]
[-81.46840668 516.43548584]
[-88.91941833 529.45404053]
[-96.37042999 542.47259521]
[-96.51022339 558.29321289]
[-109.54752350 565.49584961]
[-105.15827179 580.67840576]
[-112.86334229 594.47723389]
[-128.09146118 598.70568848]
[-141.80804443 590.85516357]
[-145.87528992 575.58319092]
[-137.88017273 561.95037842]
[-122.56606293 558.04479980]
[-122.95921326 543.15539551]
[-109.38896942 535.02160645]
[-101.93795776 522.00305176]
[-94.48694611 508.98449707]
[-87.03593445 495.96597290]
[-79.58491516 482.94741821]
[-72.13390350 469.92886353]
[-77.23062897 458.04132080]
[-74.48331451 445.20278931]
[-64.68108368 436.17764282]
[-51.27282333 434.44760132]
[-43.52950287 421.60076904]
[-35.78617859 408.75396729]
[-28.18852615 395.82043457]
[-20.73751259 382.80191040]
[-13.28649807 369.78335571]
[-5.83548498 356.76483154]
[0.71637237 343.27136230]
[6.33896351 329.36502075]
[11.96155453 315.45867920]
[7.80466890 296.62518311]
[23.70012093 284.31845093]
[28.68857765 270.17224121]
[33.67703247 256.02600098]
[38.66548920 241.87980652]
[33.72004318 230.78260803]
[37.82545853 218.92178345]
[49.28362656 212.88059998]
[54.59050369 198.85073853]
[59.89738464 184.82087708]
[65.20426178 170.79101562]
[70.51114655 156.76115417]
[75.81802368 142.73129272]
[81.12490082 128.70143127]
[74.43777466 123.72291565]
[69.05824280 117.19072723]
[65.34571838 109.44713593]
[63.57024384 100.91705322]
[63.89373016 92.08470917]
[66.35715485 83.46623230]
[70.87474060 75.57944489]
[77.23564148 68.91284180]
[85.11324310 63.89541245]
[94.08164215 60.86938477]
[103.63859558 60.06738663]
[105.66648865 45.20509720]
[99.86591339 30.48559189]
[109.25281525 18.92119598]
[103.45223999 4.20168972]
[112.83914185 -7.36270714]
[114.86704254 -22.22499657]
[116.89493561 -37.08728409]
[118.92283630 -51.94957352]
[107.62483215 -62.58605576]
[104.76959991 -77.83818054]
[111.45504761 -91.84119415]
[125.11047363 -99.21065521]
[140.48509216 -97.11285400]
[151.66703796 -86.35443878]
[154.35664368 -71.07224274]
[147.51968384 -57.14257050]
[133.78512573 -49.92168045]
[131.75723267 -35.05939102]
[129.72932434 -20.19709969]
[127.70143127 -5.33481121]
[133.64706421 8.32164478]
[124.11510468 20.94909096]
[130.06072998 34.60554886]
[120.52877808 47.23299408]
[118.50088501 62.09528351]
[130.59616089 70.96682739]
[144.16278076 64.56787109]
[157.72941589 58.16891479]
[171.29603577 51.76995468]
[184.86267090 45.37099838]
[194.04341125 32.48594666]
[208.85519409 34.05446625]
[217.75254822 20.27879906]
[234.11560059 21.36643410]
[241.11141968 36.19850922]
[231.54333496 49.51705551]
[215.25415039 47.62109375]
[207.04379272 60.04845047]
[191.26162720 58.93762589]
[177.69499207 65.33658600]
[164.12837219 71.73554230]
[150.56175232 78.13449860]
[136.99511719 84.53345490]
[136.39988708 111.53083038]
[119.30294037 130.70347595]
[95.15476227 134.00831604]
[89.84788513 148.03817749]
[84.54100800 162.06803894]
[79.23412323 176.09790039]
[73.92724609 190.12776184]
[68.62036896 204.15762329]
[63.31348801 218.18748474]
[66.73226929 236.24172974]
[52.81170273 246.86825562]
[47.82324600 261.01446533]
[42.83478928 275.16067505]
[37.84633255 289.30688477]
[43.14471817 298.92739868]
[42.24393082 309.65203857]
[35.68914413 317.90814209]
[25.86790085 321.08126831]
[20.24530983 334.98760986]
[14.62271881 348.89395142]
[28.98943520 344.58148193]
[42.29534912 351.50625610]
[47.00628662 365.74731445]
[40.45477295 379.24090576]
[26.35046768 384.34664917]
[12.67961788 378.17349243]
[7.18305540 364.21585083]
[-0.26795796 377.23437500]
[-7.71897125 390.25292969]
[-15.16998482 403.27145386]
[-16.74017906 412.35754395]
[-22.93935204 416.49728394]
[-30.68267441 429.34411621]
[-38.42599869 442.19091797]
[-33.89481735 459.04550171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[8 15]
[26 137]
[27 136]
[28 135]
[29 133]
[30 132]
[31 131]
[32 130]
[33 123]
[34 122]
[35 121]
[37 117]
[38 116]
[39 115]
[40 114]
[43 112]
[44 111]
[45 110]
[46 109]
[47 108]
[48 107]
[49 106]
[60 85]
[61 84]
[63 82]
[65 80]
[66 79]
[67 78]
[68 77]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
