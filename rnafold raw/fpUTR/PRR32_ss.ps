%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUUUCUCCAGACCUAGCUGGCCUGUUCAGUGGGUUAUCUCCACCACCUCAGGAAAGCUAUUCUGAUCAAAUUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[92.07472992 369.52917480]
[79.70768738 360.90829468]
[69.76365662 349.57781982]
[62.82075882 336.19650269]
[59.28265381 321.54229736]
[59.35503769 306.46722412]
[63.03370667 291.84768677]
[70.10478210 278.53366089]
[80.15716553 267.29919434]
[92.60643005 258.79748535]
[106.72877502 253.52275085]
[104.98738098 238.62417603]
[103.24598694 223.72560120]
[101.50459290 208.82702637]
[92.11823273 200.94082642]
[90.68138885 188.35871887]
[98.53320312 177.91229248]
[97.37081909 162.95739746]
[96.20842743 148.00251770]
[95.04604340 133.04762268]
[93.88365936 118.09272003]
[82.94339752 108.59235382]
[81.82057190 94.14640808]
[91.16144562 83.06966400]
[89.99906158 68.11476898]
[88.83667755 53.15987396]
[87.67429352 38.20498276]
[72.78034210 31.31656647]
[63.38354111 17.97726250]
[61.92849350 1.81885707]
[68.71287537 -12.81586170]
[81.83238220 -22.04028702]
[80.09098816 -36.93886185]
[78.34959412 -51.83743668]
[76.60820007 -66.73601532]
[74.86680603 -81.63459015]
[63.22484970 -92.67290497]
[64.73981476 -108.64426422]
[78.24954987 -117.29681396]
[93.39054108 -111.99305725]
[98.54792023 -96.80157471]
[89.76538086 -83.37598419]
[91.50677490 -68.47740936]
[93.24816895 -53.57883072]
[94.98956299 -38.68025589]
[96.73095703 -23.78168106]
[109.72235870 -19.14005280]
[119.45312500 -9.26696301]
[123.94868469 3.91669655]
[122.26102448 17.81032562]
[114.66792297 29.64658546]
[102.62918091 37.04259491]
[103.79157257 51.99748993]
[104.95395660 66.95238495]
[106.11634064 81.90727997]
[117.05660248 91.40764618]
[118.17942810 105.85359192]
[108.83855438 116.93033600]
[110.00093842 131.88522339]
[111.16332245 146.84011841]
[112.32570648 161.79501343]
[113.48809814 176.74990845]
[124.27117920 191.52552795]
[116.40316772 207.08563232]
[118.14456177 221.98420715]
[119.88595581 236.88278198]
[121.62734985 251.78135681]
[136.58546448 253.65705872]
[150.65979004 259.05862427]
[163.03204346 267.67202759]
[172.98295593 278.99645996]
[179.93395996 292.37356567]
[183.48094177 307.02560425]
[183.41769409 322.10073853]
[179.74789429 336.72250366]
[172.68489075 350.04080200]
[162.63931274 361.28137207]
[150.19522095 369.79064941]
[136.07606506 375.07391357]
[121.10274506 376.82406616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 67]
[12 66]
[13 65]
[14 64]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[24 55]
[25 54]
[26 53]
[27 52]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
