%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUACUGUGACGUCACCUGAGGGGGGCACUUCCGGUCUCGUGCCGCCUUCCCAGGACCCUCAGGGAGAGCGGGCAGCCUUCCAGGUGGACAGAA\
) } def
/len { sequence length } bind def

/coor [
[40.80211258 402.45248413]
[25.56398582 404.86145020]
[11.45169640 398.62872314]
[2.96842289 385.74316406]
[2.82114816 370.31649780]
[11.05686665 357.27133179]
[25.04759026 350.77032471]
[26.98541260 335.89602661]
[28.92323494 321.02172852]
[30.86105728 306.14739990]
[29.05799103 303.76510620]
[28.18591690 300.45825195]
[28.62906265 296.61627197]
[30.60806274 292.76995850]
[34.13261414 289.52438354]
[37.97578049 275.02508545]
[41.81894684 260.52575684]
[45.66211319 246.02645874]
[49.50527954 231.52714539]
[53.34844589 217.02783203]
[51.66100693 212.37246704]
[53.02054596 206.60400391]
[57.93828964 201.73008728]
[62.71193314 187.50996399]
[67.48558044 173.28982544]
[72.25922394 159.06968689]
[77.03286743 144.84954834]
[81.80651093 130.62940979]
[86.58015442 116.40927124]
[79.58477020 105.70742035]
[80.01595306 92.92934418]
[87.71685028 82.72341156]
[99.88607025 78.80228424]
[105.11768341 64.74417877]
[110.34929657 50.68608093]
[115.58091736 36.62797928]
[113.14261627 20.99579239]
[124.83300781 11.76628113]
[130.06462097 -2.29181981]
[135.29624939 -16.34992027]
[140.52786255 -30.40802193]
[138.08955383 -46.04020691]
[149.77995300 -55.26971817]
[137.60092163 -68.84516907]
[133.83877563 -86.60594940]
[139.41632080 -103.79553223]
[152.76640320 -115.85254669]
[170.27105713 -119.62113953]
[174.11421204 -134.12045288]
[177.95738220 -148.61976624]
[173.15029907 -164.29853821]
[184.52149963 -176.11497498]
[200.37324524 -171.91333008]
[204.39865112 -156.01589966]
[192.45669556 -144.77659607]
[188.61352539 -130.27728271]
[184.77037048 -115.77796936]
[194.43086243 -108.51100922]
[201.02430725 -98.33705139]
[203.72717285 -86.48255157]
[202.18661499 -74.38645935]
[196.56645203 -63.52556992]
[187.52998352 -55.23421097]
[176.16191101 -50.54033279]
[163.83805847 -50.03810501]
[166.65055847 -35.41144562]
[154.58595276 -25.17640495]
[149.35433960 -11.11830425]
[144.12272644 2.93979645]
[138.89111328 16.99789619]
[141.70361328 31.62455368]
[129.63902283 41.85959625]
[124.40740204 55.91769791]
[119.17578125 69.97579956]
[113.94416809 84.03389740]
[121.16288757 98.77997589]
[115.68656158 114.25791168]
[100.80029297 121.18291473]
[96.02664948 135.40304565]
[91.25300598 149.62318420]
[86.47936249 163.84332275]
[81.70571899 178.06346130]
[76.93206787 192.28359985]
[72.15842438 206.50373840]
[67.84776306 220.87100220]
[64.00459290 235.37031555]
[60.16142654 249.86962891]
[56.31826019 264.36892700]
[52.47509384 278.86825562]
[48.63192749 293.36755371]
[45.73535919 308.08523560]
[43.79753494 322.95953369]
[41.85971451 337.83383179]
[39.92189026 352.70812988]
[51.77998352 362.57672119]
[56.39848328 377.29653931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 94]
[8 93]
[9 92]
[10 91]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[33 75]
[34 74]
[35 73]
[36 72]
[38 70]
[39 69]
[40 68]
[41 67]
[43 65]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
