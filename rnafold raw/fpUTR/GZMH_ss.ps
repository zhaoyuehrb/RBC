%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUCUCUGAGUUUACUGUACCCAUCCCUCCUUCAUCUCCCUCCAGCAUUUGUUUCUGGAAGGAGUCAACACCAACAGCUCUGACCUGGGCAGCCUUCCUGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[141.48815918 211.07186890]
[155.46911621 216.51266479]
[147.96911621 203.52227783]
[140.46911621 190.53189087]
[132.96911621 177.54151917]
[125.46912384 164.55113220]
[115.21928406 162.74620056]
[107.55368042 155.38307190]
[105.24313354 144.78132629]
[109.31220245 134.48399353]
[102.58021545 121.07950592]
[95.84822083 107.67501831]
[92.86148071 106.46501923]
[90.28326416 104.07303619]
[88.57838440 100.66236877]
[88.13872528 96.57544708]
[89.21612549 92.30008698]
[84.08582306 78.20469666]
[78.95552063 64.10930634]
[73.82521820 50.01391983]
[61.88252258 51.82641220]
[49.81073380 51.52808762]
[37.97993851 49.12947845]
[26.75259018 44.70548248]
[16.47241020 38.39302826]
[7.45386457 30.38684464]
[-0.02746342 20.93343353]
[-5.74328375 10.32349491]
[-9.51957226 -1.11701131]
[-11.24186516 -13.03688717]
[-10.85873127 -25.07047272]
[-8.38330364 -36.84886169]
[-3.89283538 -48.01121902]
[2.47370791 -58.21582031]
[10.51995182 -67.15053558]
[19.99816895 -74.54235077]
[30.61690521 -80.16572571]
[42.04994202 -83.84947968]
[40.30854797 -98.74805450]
[38.56715393 -113.64662933]
[36.82575989 -128.54521179]
[27.53867531 -141.35382080]
[33.74611282 -154.89328003]
[32.00471878 -169.79185486]
[30.26332474 -184.69042969]
[28.52193260 -199.58900452]
[26.78053856 -214.48757935]
[22.61928940 -222.79751587]
[25.21166611 -229.84396362]
[12.94529819 -239.80949402]
[11.40148354 -255.53820801]
[21.49614143 -267.69851685]
[37.24029160 -269.07595825]
[49.29320526 -258.85330200]
[50.50410843 -243.09545898]
[40.15458679 -231.15130615]
[41.67911530 -216.22897339]
[43.42050552 -201.33039856]
[45.16189957 -186.43182373]
[46.90329361 -171.53324890]
[48.64468765 -156.63467407]
[57.80721664 -144.89170837]
[51.72433472 -130.28660583]
[53.46572876 -115.38802338]
[55.20712280 -100.48944855]
[56.94851685 -85.59087372]
[75.20677948 -83.28680420]
[92.20590973 -76.20822906]
[106.72061157 -64.85903931]
[117.70300293 -50.05120468]
[124.35823059 -32.84663391]
[126.20204163 -14.48105717]
[123.09597015 3.72474647]
[115.25774384 20.45993042]
[103.24603271 34.51796341]
[87.92060852 44.88361740]
[93.05091095 58.97900772]
[98.18121338 73.07439423]
[103.31151581 87.16978455]
[109.25271606 100.94302368]
[115.98470306 114.34751892]
[122.71669006 127.75200653]
[140.03114319 137.87138367]
[138.45950317 157.05113220]
[145.95950317 170.04151917]
[153.45950317 183.03189087]
[160.95950317 196.02227783]
[168.45950317 209.01266479]
[178.26741028 220.36187744]
[190.03364563 229.66542053]
[206.32923889 231.50550842]
[212.63453674 246.64404297]
[202.46321106 259.50778198]
[186.27862549 256.86361694]
[180.73011780 241.43165588]
[168.96388245 232.12811279]
[172.32089233 246.74763489]
[169.59579468 261.49801636]
[161.23684692 273.95306396]
[148.61894226 282.06408691]
[133.81755066 284.49694824]
[119.26727295 280.85147095]
[107.36140442 271.72732544]
[100.05828094 258.62524414]
[98.55915833 243.70034790]
[103.11061096 229.40754700]
[112.96399689 218.09777832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[10 82]
[11 81]
[12 80]
[17 79]
[18 78]
[19 77]
[20 76]
[38 66]
[39 65]
[40 64]
[41 63]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[49 56]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
