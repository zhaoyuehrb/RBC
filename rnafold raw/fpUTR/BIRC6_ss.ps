%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUGCUUCUCCCCCUCUCCCGUCAGCCUCCCUCCGAGUUUGGCCCCUCCGGCCGGGCGAUCGACGUUCCGCGUGCGUGCGGGCGCCUGACUUCACUUCCGGCUAACGCGCUCGGCUUGCCCCCUGGCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[132.77067566 515.09228516]
[125.57855988 514.47155762]
[118.53633118 512.87060547]
[111.77699280 510.31890869]
[105.42829895 506.86373901]
[99.61038971 502.56954956]
[94.43347931 497.51663208]
[89.99578857 491.79971313]
[86.38165283 485.52606201]
[83.65996552 478.81359863]
[81.88283539 471.78857422]
[81.08457947 464.58331299]
[81.28108215 457.33355713]
[82.46947479 450.17608643]
[84.62816620 443.24600220]
[87.71725464 436.67428589]
[91.67922974 430.58514404]
[96.44007874 425.09396362]
[101.91064453 420.30480957]
[107.98831177 416.30859375]
[114.55891418 413.18142700]
[121.49890137 410.98303223]
[120.10465240 396.04797363]
[118.71041107 381.11291504]
[109.82360840 369.15991211]
[116.24468231 354.70031738]
[114.85044098 339.76525879]
[113.45619202 324.83020020]
[112.06194305 309.89514160]
[97.58960724 306.17535400]
[85.24000549 297.71270752]
[76.51456451 285.51266479]
[72.48209381 271.03643799]
[73.64787292 256.02609253]
[79.89044952 242.29470825]
[90.47395325 231.50761414]
[104.13479614 224.98023987]
[102.74054718 210.04516602]
[101.34629822 195.11010742]
[99.95204926 180.17504883]
[98.55780792 165.23999023]
[89.67100525 153.28700256]
[96.09207916 138.82739258]
[94.69783020 123.89232635]
[93.30358887 108.95726013]
[91.73565674 94.03943634]
[89.99426270 79.14086151]
[88.25286865 64.24227905]
[78.96578979 51.43366623]
[85.17322540 37.89420700]
[83.25859833 23.01690292]
[81.17100525 8.16288090]
[78.91071320 -6.66584444]
[76.47805023 -21.46726799]
[73.87332153 -36.23938370]
[71.09690094 -50.98019409]
[68.32048035 -65.72100067]
[65.54405212 -80.46181488]
[62.59630585 -95.16931915]
[59.47763062 -109.84153748]
[46.86006165 -119.74993896]
[46.88393021 -135.79298401]
[59.53092575 -145.66380310]
[75.09935760 -141.79034424]
[81.64645386 -127.14402008]
[74.14984131 -112.96021271]
[77.26851654 -98.28799438]
[81.77747345 -92.34500885]
[80.28486633 -83.23823547]
[83.06128693 -68.49742889]
[85.83770752 -53.75661850]
[88.61413574 -39.01580811]
[92.98358154 -32.96951294]
[91.27947235 -23.89993668]
[93.71214294 -9.09851360]
[97.93971252 -2.95218325]
[96.02502441 6.07528496]
[98.11261749 20.92930603]
[102.19602966 27.17234230]
[100.07180023 36.15281296]
[109.23432922 47.89578247]
[103.15144348 62.50088882]
[104.89283752 77.39946747]
[106.63423157 92.29804230]
[110.65620422 99.37551880]
[108.23864746 107.56301117]
[109.63289642 122.49807739]
[111.02714539 137.43313599]
[120.01367188 150.45439148]
[113.49286652 163.84573364]
[114.88711548 178.78080750]
[116.28136444 193.71586609]
[117.67561340 208.65092468]
[119.06985474 223.58598328]
[133.70283508 227.47201538]
[146.10009766 236.11376953]
[154.77641296 248.45240784]
[158.70039368 262.98760986]
[157.41706848 277.96008301]
[151.10057068 291.56436157]
[140.53076172 302.16662598]
[126.99700165 308.50088501]
[128.39125061 323.43594360]
[129.78550720 338.37100220]
[131.17974854 353.30606079]
[140.16627502 366.32730103]
[133.64547729 379.71865845]
[135.03971863 394.65371704]
[136.43395996 409.58880615]
[160.67201233 416.93655396]
[178.69136047 434.66210938]
[186.40531921 458.67904663]
[182.09527588 483.48168945]
[166.79330444 503.40740967]
[174.44393921 516.30963135]
[182.09457397 529.21185303]
[192.88230896 531.32238770]
[200.53393555 538.90380859]
[202.65475464 549.23925781]
[198.77275085 558.81213379]
[205.81481934 572.05633545]
[212.85688782 585.30053711]
[227.04331970 593.52716064]
[226.74148560 609.92352295]
[212.26190186 617.62249756]
[198.49990845 608.70397949]
[199.61268616 592.34265137]
[192.57060242 579.09838867]
[185.52853394 565.85418701]
[168.42727661 556.94580078]
[169.19233704 536.86254883]
[161.54170227 523.96026611]
[153.89106750 511.05804443]
[147.06158447 513.36846924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 109]
[23 108]
[24 107]
[26 105]
[27 104]
[28 103]
[29 102]
[37 94]
[38 93]
[39 92]
[40 91]
[41 90]
[43 88]
[44 87]
[45 86]
[46 84]
[47 83]
[48 82]
[50 80]
[51 78]
[52 77]
[53 75]
[54 74]
[55 72]
[56 71]
[57 70]
[58 69]
[59 67]
[60 66]
[114 133]
[115 132]
[116 131]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
