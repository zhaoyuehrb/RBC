%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGCGCAGGCAGCCCAGCUGCCAGUCAGGCGUCCCGGGCUGGGCAUGCGCCACUUGUGCGGCAGUCGGGUGGGAAGCCGUGUCUCGCAGUCGUGGACUCGUGCAGCUGGGGCGUCCGCAGCCGCUCGUCACCCGCGUG\
) } def
/len { sequence length } bind def

/coor [
[60.75869370 612.20440674]
[63.37803268 593.00054932]
[63.71221542 578.00427246]
[64.04640198 563.00799561]
[64.38058472 548.01171875]
[64.71476746 533.01544189]
[65.04895782 518.01916504]
[52.92584991 506.41558838]
[52.90645599 489.29757690]
[65.48843384 477.19961548]
[65.48843384 462.19961548]
[65.48843384 447.19961548]
[65.32132721 432.20056152]
[64.98714447 417.20428467]
[64.65296173 402.20800781]
[56.59457016 395.76596069]
[53.38677597 385.72866821]
[56.33626556 375.38284302]
[64.69023132 368.25955200]
[65.02441406 353.26327515]
[65.35860443 338.26699829]
[65.69278717 323.27072144]
[66.02696991 308.27444458]
[59.81204224 304.42272949]
[55.31279373 298.57247925]
[53.14558029 291.44586182]
[53.63507462 283.94436646]
[56.76662445 277.03488159]
[62.18195343 271.62496948]
[69.21954346 268.44384766]
[71.21884918 253.57768250]
[73.21815491 238.71151733]
[75.21746063 223.84535217]
[77.21676636 208.97918701]
[79.21607208 194.11303711]
[81.21537018 179.24687195]
[83.21467590 164.38070679]
[85.21398163 149.51454163]
[87.21328735 134.64837646]
[84.96926880 127.54261780]
[89.42630768 119.47470856]
[91.75631714 104.65677643]
[89.66713715 99.75016785]
[90.52280426 94.02453613]
[94.53438568 89.23665619]
[97.52217865 74.53723145]
[100.50996399 59.83780670]
[103.49775696 45.13838196]
[106.48554230 30.43895531]
[101.65208435 15.37415314]
[111.76943970 4.44307566]
[114.59329224 -10.28872204]
[117.25285339 -25.05106354]
[119.91240692 -39.81340790]
[122.57196808 -54.57574844]
[124.90198517 -69.39367676]
[126.90128326 -84.25984192]
[128.90058899 -99.12599945]
[130.89988708 -113.99216461]
[132.89920044 -128.85832214]
[127.07032013 -143.56665039]
[136.43496704 -155.14907837]
[138.43426514 -170.01524353]
[140.43356323 -184.88140869]
[142.43287659 -199.74757385]
[140.23400879 -206.12141418]
[141.45881653 -211.77539062]
[144.86669922 -215.22575378]
[147.52626038 -229.98809814]
[150.18582153 -244.75044250]
[145.01794434 -259.70382690]
[154.88925171 -270.85757446]
[148.83155823 -286.09689331]
[159.21124268 -298.79312134]
[175.35055542 -295.88549805]
[180.64677429 -280.36511230]
[169.65159607 -268.19802856]
[175.00970459 -254.30055237]
[164.94816589 -242.09088135]
[162.28860474 -227.32853699]
[159.62904358 -212.56619263]
[157.29904175 -197.74826050]
[155.29972839 -182.88209534]
[153.30043030 -168.01594543]
[151.30111694 -153.14978027]
[157.27301025 -139.50477600]
[147.76536560 -126.85902405]
[145.76605225 -111.99285889]
[143.76675415 -97.12670135]
[141.76744080 -82.26053619]
[139.76814270 -67.39437103]
[141.95266724 -63.06465149]
[141.38317871 -57.30762482]
[137.33432007 -51.91618729]
[134.67475891 -37.15384674]
[132.01519775 -22.39150429]
[129.35563660 -7.62916183]
[131.28088379 -0.43049055]
[126.46886444 7.43086529]
[131.51602173 21.44426537]
[121.18496704 33.42674637]
[118.19718170 48.12617111]
[115.20938873 62.82559586]
[112.22160339 77.52502441]
[109.23381042 92.22444916]
[106.57424927 106.98678589]
[104.24423981 121.80471802]
[102.07944489 136.64768982]
[100.08014679 151.51385498]
[98.08084106 166.38000488]
[96.08153534 181.24617004]
[94.08222961 196.11233521]
[92.08292389 210.97850037]
[90.08362579 225.84466553]
[88.08432007 240.71081543]
[86.08501434 255.57698059]
[84.08570862 270.44314575]
[94.88030243 290.95022583]
[81.02324677 308.60861206]
[80.68906403 323.60488892]
[80.35488129 338.60116577]
[80.02069092 353.59744263]
[79.68650818 368.59371948]
[90.20361328 385.72866821]
[79.64923859 401.87380981]
[79.98342133 416.87008667]
[80.31760406 431.86636353]
[83.65953064 440.45635986]
[80.48843384 447.19961548]
[80.48843384 462.19961548]
[80.48843384 477.19961548]
[91.07753754 485.60134888]
[94.81461334 498.38867188]
[90.54317474 510.80145264]
[80.04523468 518.35333252]
[79.71104431 533.34960938]
[79.37686157 548.34588623]
[79.04267883 563.34216309]
[78.70849609 578.33843994]
[78.37431335 593.33471680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[4 138]
[5 137]
[6 136]
[7 135]
[10 131]
[11 130]
[12 129]
[13 127]
[14 126]
[15 125]
[19 123]
[20 122]
[21 121]
[22 120]
[23 119]
[30 117]
[31 116]
[32 115]
[33 114]
[34 113]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[41 107]
[42 106]
[45 105]
[46 104]
[47 103]
[48 102]
[49 101]
[51 99]
[52 97]
[53 96]
[54 95]
[55 94]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[62 85]
[63 84]
[64 83]
[65 82]
[68 81]
[69 80]
[70 79]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
