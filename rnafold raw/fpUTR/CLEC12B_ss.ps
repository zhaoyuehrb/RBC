%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCAGUAGAGUGUGUCUGGGUCAGCUGAGUGACUACAUCAAAGCUCCCAGCCUUGAAAAACACAUGCUGUUCCCAGGCCUCAAGAUAUUGAAACAUUAAUUAGAUAAUUUAAAGUAGCGUUUUCUUCUACA\
) } def
/len { sequence length } bind def

/coor [
[57.50883102 98.56890106]
[42.84150696 95.42729187]
[28.17418671 92.28569031]
[13.50686455 89.14408875]
[-1.16045749 86.00247955]
[-15.82777882 82.86087799]
[-30.49510002 79.71927643]
[-45.16242218 76.57766724]
[-50.30499268 78.25228882]
[-55.07773590 77.77114105]
[-58.70272446 75.65570068]
[-60.73321152 72.66526794]
[-75.14349365 68.50066376]
[-89.55377197 64.33606720]
[-103.96405029 60.17146301]
[-118.37432098 56.00686646]
[-132.78460693 51.84226608]
[-147.55331421 49.21830368]
[-162.51622009 48.16416168]
[-177.47914124 47.11001968]
[-192.44204712 46.05587387]
[-207.40496826 45.00173187]
[-213.64595032 47.60777664]
[-219.38084412 46.73252869]
[-223.03924561 43.53125381]
[-237.93629456 41.77692413]
[-252.83335876 40.02259445]
[-267.73040771 38.26826477]
[-281.20989990 49.34783173]
[-298.20339966 47.33694077]
[-308.31857300 33.95403290]
[-323.25265503 32.54941177]
[-338.18673706 31.14478683]
[-352.86065674 38.46657562]
[-366.38732910 29.19505119]
[-364.85168457 12.86796093]
[-349.83346558 6.28121805]
[-336.78213501 16.21069717]
[-321.84802246 17.61532021]
[-306.91394043 19.01994324]
[-298.19091797 9.46287918]
[-285.35852051 6.66165161]
[-273.08694458 11.86646938]
[-265.97607422 23.37120628]
[-251.07902527 25.12553596]
[-236.18197632 26.87986755]
[-221.28491211 28.63419724]
[-206.35083008 30.03881836]
[-191.38790894 31.09296227]
[-176.42500305 32.14710617]
[-161.46208191 33.20124817]
[-146.49917603 34.25539017]
[-156.98133850 23.52580261]
[-160.16184998 8.86686516]
[-155.06878662 -5.24202633]
[-143.25849915 -14.48956013]
[-128.33987427 -16.04992676]
[-114.87167358 -9.44632053]
[-106.96942902 3.30336857]
[-107.04786682 18.30316353]
[-115.08301544 30.96951294]
[-128.61999512 37.43198776]
[-114.20972443 41.59658813]
[-99.79944611 45.76118851]
[-85.38916779 49.92578506]
[-70.97888947 54.09038544]
[-56.56861496 58.25498581]
[-42.02081680 61.91035080]
[-27.35349655 65.05195618]
[-12.68617535 68.19355774]
[1.98114645 71.33515930]
[16.64846802 74.47676849]
[31.31579018 77.61837006]
[45.98311234 80.75997162]
[60.65043259 83.90157318]
[67.57050323 72.50681305]
[77.67921448 63.81533432]
[89.98262787 58.68172455]
[103.27100372 57.61075211]
[116.23775482 60.70772552]
[127.60792542 67.66812134]
[136.26353455 77.80757141]
[141.35351562 90.12909698]
[142.37739563 103.42118835]
[156.88133240 107.24682617]
[171.38528442 111.07247162]
[185.88923645 114.89810944]
[197.90568542 105.25907898]
[213.11599731 104.55223083]
[225.67739868 112.83929443]
[230.88800049 126.76723480]
[245.39195251 130.59288025]
[258.93548584 122.89803314]
[273.59002686 126.98439026]
[280.84243774 139.94349670]
[295.34637451 143.76913452]
[310.66351318 139.80734253]
[320.99655151 150.53477478]
[335.50051880 154.36041260]
[350.00445557 158.18605042]
[364.50839233 162.01168823]
[375.81353760 151.51420593]
[391.00341797 148.81767273]
[405.23098755 154.78256226]
[413.95629883 167.50547791]
[414.39511108 182.92660522]
[406.40740967 196.12509155]
[392.54205322 202.88938904]
[377.22341919 201.06098938]
[365.33963013 191.22335815]
[360.68276978 176.51564026]
[346.17880249 172.69000244]
[331.67486572 168.86436462]
[317.17092896 165.03871155]
[302.89120483 169.27413940]
[291.52075195 158.27308655]
[277.01678467 154.44744873]
[264.31625366 162.14364624]
[249.55267334 158.47052002]
[241.56629944 145.09683228]
[227.06236267 141.27117920]
[215.66012573 150.81723022]
[200.64556885 151.83070374]
[187.76264954 143.71383667]
[182.06358337 129.40205383]
[167.55964661 125.57641602]
[153.05569458 121.75077057]
[138.55174255 117.92513275]
[128.79713440 131.27734375]
[114.68627167 139.89813232]
[98.35376740 142.48338318]
[82.27029419 138.64201355]
[68.86885834 128.95513916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[25 47]
[26 46]
[27 45]
[28 44]
[31 40]
[32 39]
[33 38]
[84 128]
[85 127]
[86 126]
[87 125]
[91 121]
[92 120]
[95 117]
[96 116]
[98 114]
[99 113]
[100 112]
[101 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
