%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUGGCGUCCCCGCCCCGAAAGCACUGGGCCCGCCGCGUCGCACCGUCCUCUUUCCUUUCCUUCUCCCUCCCCUUUUCCCUUCCUUCGUCCCUUCCUUCCUUCCUUUCGCCGGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[98.98527527 112.05110931]
[88.72843170 122.99629211]
[78.61453247 134.07371521]
[68.64528656 145.28147888]
[58.67604446 156.48925781]
[49.45476913 168.32006836]
[41.02029800 180.72409058]
[32.58582687 193.12809753]
[24.15135574 205.53211975]
[23.48634338 221.91778564]
[8.83974171 229.29403687]
[-4.72128105 220.07283020]
[-3.24630737 203.74014282]
[11.74733639 197.09765625]
[20.18180847 184.69363403]
[28.61627960 172.28961182]
[37.05075073 159.88558960]
[22.05899620 159.38830566]
[12.88880157 147.51785278]
[16.19321251 132.88635254]
[29.57485580 126.10906219]
[43.32524490 132.10295105]
[47.46827316 146.52000427]
[57.43751526 135.31224060]
[67.40676117 124.10446167]
[69.52684021 116.92890167]
[77.78324127 112.73944855]
[88.04008484 101.79426575]
[98.00933075 90.58648682]
[100.99762726 75.05005646]
[115.11940002 70.31456757]
[124.79431915 58.85176086]
[134.46923828 47.38895798]
[144.14416504 35.92615128]
[153.81909180 24.46334839]
[155.40496826 17.84237099]
[159.53157043 13.71505260]
[164.30595398 12.67365360]
[174.56278992 1.72846627]
[184.81964111 -9.21672153]
[174.81684875 -20.40787697]
[165.84230042 -32.43929291]
[157.96621704 -45.21680832]
[151.25022888 -58.64041519]
[145.74693298 -72.60505676]
[141.49935913 -87.00144196]
[138.54078674 -101.71688843]
[136.89436340 -116.63623810]
[136.57295227 -131.64271545]
[137.57910156 -146.61886597]
[139.90490723 -161.44749451]
[143.53218079 -176.01254272]
[148.43254089 -190.20001221]
[154.56761169 -203.89884949]
[161.88940430 -217.00187683]
[170.34059143 -229.40650940]
[179.85505676 -241.01567078]
[190.35830688 -251.73852539]
[201.76814270 -261.49111938]
[213.99528503 -270.19714355]
[226.94401550 -277.78842163]
[240.51301575 -284.20559692]
[254.59605408 -289.39843750]
[269.08294678 -293.32626343]
[283.86029053 -295.95834351]
[298.81240845 -297.27410889]
[313.82232666 -297.26324463]
[328.77255249 -295.92581177]
[343.54605103 -293.27230835]
[358.02722168 -289.32351685]
[372.10275269 -284.11029053]
[385.66241455 -277.67346191]
[398.60012817 -270.06341553]
[410.81466675 -261.33969116]
[422.21035767 -251.57057190]
[432.69805908 -240.83251953]
[442.19567871 -229.20957947]
[450.62890625 -216.79272461]
[457.93170166 -203.67910767]
[464.04693604 -189.97138977]
[468.92672729 -175.77684021]
[472.53289795 -161.20655823]
[474.83721924 -146.37457275]
[475.82165527 -131.39697266]
[475.47851562 -116.39097595]
[473.81048584 -101.47403717]
[470.83056641 -86.76288605]
[466.56216431 -72.37267303]
[461.03863525 -58.41601562]
[454.30322266 -45.00215149]
[446.40863037 -32.23606110]
[437.41665649 -20.21765900]
[427.39767456 -9.04100609]
[416.43008423 1.20642138]
[404.59973145 10.44442368]
[391.99923706 18.60069847]
[378.72717285 25.61141205]
[364.88745117 31.42169380]
[350.58834839 35.98606873]
[335.94180298 39.26881790]
[321.06243896 41.24424362]
[306.06674194 41.89688492]
[291.07202148 41.22164154]
[276.19564819 39.22378922]
[261.55407715 35.91897202]
[247.26187134 31.33304787]
[233.43090820 25.50191307]
[220.16943359 18.47120476]
[207.58122253 10.29594707]
[195.76483154 1.04012394]
[185.50798035 11.98531151]
[175.25112915 22.93049812]
[165.28189087 34.13827133]
[155.60696411 45.60107422]
[145.93205261 57.06388092]
[136.25712585 68.52667999]
[126.58219910 79.98948669]
[124.28591919 94.70602417]
[109.47213745 100.26141357]
[108.71237183 105.58428192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 25]
[4 24]
[5 23]
[6 17]
[7 16]
[8 15]
[9 14]
[29 119]
[31 117]
[32 116]
[33 115]
[34 114]
[35 113]
[38 112]
[39 111]
[40 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
