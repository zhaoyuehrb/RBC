%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGGGGACUGUGCGGGAAGCUGGGGGUGGAUGCAUGGUGGGGCCCGGGGUUCUGGGCCGGGAUGCAGCCCUACUGAGCCCCUUUCUGGUUCUCCACAGGUG\
) } def
/len { sequence length } bind def

/coor [
[81.44461823 339.09820557]
[66.84909821 343.56292725]
[51.76313019 341.24423218]
[39.18204117 332.60253906]
[31.60381317 319.35363770]
[30.53311157 304.12814331]
[36.18252563 289.94903564]
[47.43035507 279.63162231]
[62.04334259 275.22442627]
[64.32205200 260.39849854]
[66.60076141 245.57260132]
[68.87947845 230.74670410]
[71.15818787 215.92079163]
[69.02703094 208.70913696]
[73.73911285 200.68028259]
[76.46889496 185.93077087]
[79.19867706 171.18125916]
[81.92846680 156.43173218]
[84.65824890 141.68222046]
[79.36633301 127.75939941]
[89.48586273 115.59774780]
[81.36634827 97.42627716]
[94.10765839 82.13614655]
[95.47828674 67.19889832]
[96.84891510 52.26165009]
[98.21953583 37.32440186]
[99.59016418 22.38715363]
[100.96079254 7.44990492]
[100.73204041 -7.54835081]
[98.90652466 -22.43685341]
[89.54724121 -35.19280624]
[95.67810822 -48.76711273]
[93.85258484 -63.65561295]
[92.02706909 -78.54411316]
[90.20155334 -93.43261719]
[88.37603760 -108.32112122]
[76.56701660 -112.97985077]
[67.95985413 -122.21184540]
[64.18261719 -134.17897034]
[65.91015625 -146.53504944]
[72.74444580 -156.88575745]
[83.30410004 -163.25265503]
[82.38964081 -178.22474670]
[81.47518158 -193.19685364]
[80.56072235 -208.16894531]
[79.64626312 -223.14105225]
[78.73180389 -238.11314392]
[77.81734467 -253.08525085]
[68.32090759 -266.45498657]
[75.39627838 -281.24926758]
[91.76492310 -282.24902344]
[100.58818054 -268.42578125]
[92.78944397 -253.99971008]
[93.70390320 -239.02761841]
[94.61836243 -224.05551147]
[95.53282166 -209.08340454]
[96.44728088 -194.11131287]
[97.36174011 -179.13920593]
[98.27619934 -164.16711426]
[113.51702118 -155.51939392]
[120.69660950 -139.36462402]
[116.83499908 -121.95441437]
[103.26453400 -110.14663696]
[105.09005737 -95.25813293]
[106.91557312 -80.36963654]
[108.74108887 -65.48113251]
[110.56660461 -50.59262848]
[119.79531860 -38.90159988]
[113.79502869 -24.26236916]
[115.62054443 -9.37386799]
[125.76224518 -20.42582893]
[140.59997559 -22.62621880]
[153.51261902 -14.99314499]
[158.73808289 -0.93275583]
[153.94458008 13.28070164]
[141.27114868 21.30467796]
[126.37313080 19.55858994]
[115.89804077 8.82053089]
[114.52741241 23.75777817]
[113.15678406 38.69502640]
[111.78616333 53.63227463]
[110.41553497 68.56952667]
[109.04490662 83.50677490]
[115.66587067 89.58763123]
[118.70885468 98.04660797]
[117.47885895 106.95172882]
[112.25680542 114.26911926]
[104.23538208 118.32753754]
[109.33203888 133.30534363]
[99.40776825 144.41200256]
[96.67797852 159.16151428]
[93.94819641 173.91104126]
[91.21841431 188.66055298]
[88.48863220 203.41007996]
[85.98409271 218.19950867]
[83.70538330 233.02540588]
[81.42666626 247.85131836]
[79.14795685 262.67721558]
[76.86924744 277.50311279]
[89.48427582 286.09521484]
[97.11461639 299.31414795]
[98.24526978 314.53533936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 99]
[10 98]
[11 97]
[12 96]
[13 95]
[15 94]
[16 93]
[17 92]
[18 91]
[19 90]
[21 88]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 70]
[30 69]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
