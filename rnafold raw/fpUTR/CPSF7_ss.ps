%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGGGGCGCGCGGUCGGGGGCAGGUUGGGCCGGAAGAGGGGUCCGGGCCGGCACUGAGGCGGGAAGGGGGUCGGUUGAG\
) } def
/len { sequence length } bind def

/coor [
[86.70334625 318.14343262]
[75.55764008 307.80700684]
[69.22047424 293.99005127]
[68.65821838 278.79949951]
[73.95661163 264.55187988]
[84.30769348 253.41976929]
[98.13299561 247.10078430]
[97.55844879 232.11178589]
[96.98390961 217.12280273]
[88.76480103 204.70123291]
[95.96783447 190.61482239]
[87.74872589 178.19325256]
[94.95175934 164.10684204]
[83.88352966 154.20584106]
[83.08734131 139.01304626]
[93.54747009 127.47080994]
[92.97293091 112.48181152]
[85.68656921 100.54864502]
[92.03807831 88.09272766]
[79.31130981 79.41312408]
[74.19548035 65.07151794]
[78.45507812 50.63822556]
[90.25555420 41.58908844]
[89.68100739 26.60009575]
[89.10646820 11.61110306]
[88.24491882 -3.36413407]
[87.09667969 -18.32012177]
[85.94844055 -33.27610779]
[84.80020905 -48.23209381]
[83.65196991 -63.18808365]
[74.88097382 -76.35547638]
[81.62130737 -89.63768768]
[80.47306824 -104.59367371]
[79.32483673 -119.54965973]
[78.17659760 -134.50564575]
[77.02835846 -149.46163940]
[64.21047974 -158.41909790]
[60.19909668 -173.53341675]
[66.88826752 -187.66809082]
[81.11956024 -194.14915466]
[96.17340851 -189.91644287]
[104.94183350 -176.96852112]
[103.28465271 -161.41899109]
[91.98434448 -150.60987854]
[93.13258362 -135.65388489]
[94.28082275 -120.69789886]
[95.42906189 -105.74191284]
[96.57730103 -90.78592682]
[105.26615906 -78.68828583]
[98.60795593 -64.33631897]
[99.75619507 -49.38033295]
[100.90443420 -34.42434692]
[102.05267334 -19.46835899]
[103.20091248 -4.51237297]
[106.94821167 2.08262205]
[104.09545898 11.03656197]
[104.67000580 26.02555466]
[105.24454498 41.01454926]
[117.70309448 49.13381577]
[123.05505371 63.19868469]
[119.05207825 77.88982391]
[107.02706909 87.51818848]
[114.31343079 99.45135498]
[107.96192169 111.90727234]
[108.53646851 126.89626312]
[119.84944916 137.60392761]
[120.21859741 152.81307983]
[109.94075775 163.53230286]
[118.20096588 177.02598572]
[110.95683289 190.04028320]
[119.21703339 203.53396606]
[111.97290039 216.54826355]
[112.54744720 231.53724670]
[113.12198639 246.52624512]
[127.39042664 251.76837158]
[138.56329346 262.07543945]
[144.93678284 275.87570190]
[145.53900146 291.06469727]
[140.27810669 305.32623291]
[129.95635986 316.48553467]
[116.14772797 322.84085083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 74]
[8 73]
[9 72]
[11 70]
[13 68]
[16 65]
[17 64]
[19 62]
[23 58]
[24 57]
[25 56]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
