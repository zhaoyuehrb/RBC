%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAGCUUCCUGUUUGUCUUCCUGAGAGACAGUAGAUUUAGAAAGUGAGGAUCAGAGGGUGGAAAAUAAAAGCUGUGGUCCCCAGGAGUCCUGAACAUCUGGGGACAGCGGGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[213.31736755 157.81292725]
[207.30973816 143.35720825]
[205.59487915 127.78250885]
[190.81518555 125.22113037]
[176.03549194 122.65974426]
[162.17393494 128.11012268]
[149.89765930 118.12995911]
[135.11796570 115.56857300]
[120.33826447 113.00719452]
[105.55857086 110.44581604]
[90.66429901 112.22362518]
[76.90270233 118.19174194]
[63.14110565 124.15985870]
[49.37950897 130.12797546]
[35.61791229 136.09609985]
[21.85631561 142.06422424]
[12.27396393 154.65347290]
[-2.48101735 152.61882019]
[-16.24261475 158.58692932]
[-23.45023727 172.91975403]
[-39.17898178 176.07983398]
[-51.36310196 165.64303589]
[-50.65598297 149.61558533]
[-37.60006714 140.29234314]
[-22.21073341 144.82533264]
[-8.44913673 138.85722351]
[0.14889352 126.69485474]
[15.88819599 128.30262756]
[29.64979362 122.33450317]
[43.41138840 116.36638641]
[57.17298889 110.39826202]
[70.93458557 104.43014526]
[84.69618225 98.46202850]
[86.17149353 91.10855865]
[89.12211609 76.40162659]
[90.59743500 69.04816437]
[80.20290375 58.23364639]
[69.80838013 47.41912460]
[59.41385269 36.60460663]
[49.01932526 25.79008675]
[33.90275574 28.87113190]
[19.52843094 23.26913643]
[10.48314762 10.77168179]
[9.65322208 -4.63334227]
[17.30348015 -18.03024864]
[30.99275398 -25.14413261]
[46.35284424 -23.70497894]
[58.48240280 -14.17201710]
[63.51093292 0.41281861]
[59.83384705 15.39556122]
[70.22837067 26.21008110]
[80.62290192 37.02460098]
[91.01742554 47.83911896]
[101.41194916 58.65363693]
[113.37506866 78.53945160]
[108.11995697 95.66612244]
[122.89965057 98.22750092]
[137.67933655 100.78887939]
[152.45903015 103.35026550]
[167.37773132 98.08309937]
[178.59686279 107.88005066]
[193.37655640 110.44143677]
[208.15625000 113.00281525]
[214.36949158 99.88307953]
[223.77392578 88.84066010]
[235.71714783 80.63183594]
[249.37313843 75.81663513]
[263.79943848 74.72065735]
[278.00222778 77.41305542]
[291.00460815 83.70220947]
[301.91403198 93.14933777]
[309.98342896 105.09912109]
[314.66238403 118.72515869]
[315.63470459 133.08709717]
[330.34161377 136.03771973]
[345.04855347 138.98834229]
[359.75549316 141.93896484]
[374.80801392 137.06744385]
[385.76464844 147.15713501]
[400.47155762 150.10777283]
[415.17849731 153.05839539]
[429.88543701 156.00901794]
[444.59234619 158.95964050]
[459.29928589 161.91026306]
[474.00622559 164.86088562]
[488.71313477 167.81152344]
[503.42007446 170.76214600]
[518.47259521 165.89062500]
[529.42926025 175.98031616]
[544.13616943 178.93093872]
[558.23327637 171.27256775]
[572.95355225 177.65167236]
[577.00482178 193.17477417]
[567.27935791 205.93386841]
[551.23760986 206.14126587]
[541.18554688 193.63786316]
[526.47863770 190.68724060]
[512.47802734 195.76980591]
[500.46945190 185.46907043]
[485.76251221 182.51844788]
[471.05560303 179.56782532]
[456.34866333 176.61720276]
[441.64172363 173.66658020]
[426.93481445 170.71594238]
[412.22787476 167.76531982]
[397.52093506 164.81469727]
[382.81399536 161.86407471]
[368.81341553 166.94664001]
[356.80487061 156.64590454]
[342.09793091 153.69528198]
[327.39099121 150.74464417]
[312.68405151 147.79402161]
[305.59063721 161.61914062]
[294.89529419 172.91117859]
[281.45028687 180.75857544]
[266.33020020 184.52470398]
[250.74620056 183.89955139]
[235.94895935 178.92517090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 63]
[4 62]
[5 61]
[7 59]
[8 58]
[9 57]
[10 56]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[18 26]
[19 25]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[74 112]
[75 111]
[76 110]
[77 109]
[79 107]
[80 106]
[81 105]
[82 104]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
