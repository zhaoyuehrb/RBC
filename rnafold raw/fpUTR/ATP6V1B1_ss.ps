%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCUCCAGCUCCAGCUGGACCUGAAGUCUCAGAGCUGCCACCAGCAGCAGGCUCAGACACUGGGCUCCCAGCUGGGGACUGCUCC\
) } def
/len { sequence length } bind def

/coor [
[84.24673462 374.90847778]
[69.07106781 373.27691650]
[56.11070633 365.21517944]
[47.93893433 352.32391357]
[46.17826080 337.16268921]
[51.17827606 322.74179077]
[61.94621658 311.92446899]
[76.34410095 306.85855103]
[77.94753265 291.94448853]
[79.55095673 277.03042603]
[80.88792419 262.09011841]
[81.95801544 247.12835693]
[83.02809906 232.16656494]
[84.09819031 217.20478821]
[85.16828156 202.24301147]
[86.23836517 187.28121948]
[87.30845642 172.31944275]
[88.37854004 157.35766602]
[89.44863129 142.39587402]
[90.51871490 127.43409729]
[78.91638947 119.95008087]
[72.08431244 107.95227814]
[71.56826782 94.15524292]
[58.15489197 87.44097900]
[44.74151230 80.72672272]
[31.32813263 74.01246643]
[14.99909401 75.52723694]
[5.74486732 61.98871994]
[13.08540821 47.32418823]
[29.46939659 46.61925125]
[38.04239273 60.59908676]
[51.45576859 67.31334686]
[64.86914825 74.02760315]
[78.28253174 80.74185944]
[83.87387085 75.86553955]
[90.51871490 72.56590271]
[89.44863129 57.60412216]
[88.37854004 42.64233780]
[87.30845642 27.68055725]
[86.23836517 12.71877480]
[75.10423279 1.16842055]
[77.33542633 -14.71872330]
[91.22035980 -22.75539970]
[106.10770416 -16.77655792]
[110.57716370 -1.36865330]
[101.20014954 11.64868736]
[102.27023315 26.61046982]
[103.34032440 41.57225037]
[104.41040802 56.53403091]
[105.48049927 71.49581146]
[114.81123352 75.03699493]
[122.39099884 81.52928162]
[136.03547668 75.29805756]
[149.67996216 69.06682587]
[163.32444763 62.83560562]
[176.96891785 56.60437775]
[190.61340332 50.37315369]
[204.25788879 44.14192963]
[216.15391541 32.06217194]
[231.05474854 40.14929962]
[227.40863037 56.70653915]
[210.48910522 57.78640747]
[196.84461975 64.01763153]
[183.20014954 70.24885559]
[169.55566406 76.48008728]
[155.91119385 82.71131134]
[142.26670837 88.94253540]
[128.62222290 95.17375946]
[123.84278107 116.55433655]
[105.48049927 128.50418091]
[104.41040802 143.46597290]
[103.34032440 158.42774963]
[102.27023315 173.38952637]
[101.20014954 188.35131836]
[100.13005829 203.31309509]
[99.05997467 218.27487183]
[97.98988342 233.23666382]
[96.91979980 248.19844055]
[95.84970856 263.16021729]
[98.39961243 272.17446899]
[94.46501160 278.63385010]
[92.86158752 293.54791260]
[91.25815582 308.46197510]
[104.25016785 316.47262573]
[112.47264099 329.33160400]
[114.29300690 344.48577881]
[109.34982300 358.92626953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 83]
[9 82]
[10 81]
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[19 71]
[20 70]
[23 34]
[24 33]
[25 32]
[26 31]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
