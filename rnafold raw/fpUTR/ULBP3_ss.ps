%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCAUGCGAGGGCCGAAGUGAUUCAUACGCUGGUCUCCACAUCGACUGCGCCUUGUGUCCCGGGCGCUCCUGGUCUACA\
) } def
/len { sequence length } bind def

/coor [
[89.61961365 314.94839478]
[91.27678680 299.39886475]
[102.57709503 288.58975220]
[101.42885590 273.63375854]
[100.28061676 258.67776489]
[88.84127808 249.20797729]
[87.46374512 234.05683899]
[97.47409821 222.12240601]
[93.72679138 215.52742004]
[96.57954407 206.57347107]
[96.00500488 191.58448792]
[95.43046570 176.59548950]
[87.21134949 164.17391968]
[94.41439056 150.08750916]
[93.83985138 135.09852600]
[93.26530457 120.10952759]
[82.90645599 112.55228424]
[78.79660034 100.40621948]
[82.43820953 88.11165619]
[92.50000000 80.16318512]
[89.30638123 71.32508087]
[92.79833221 64.59139252]
[93.37287140 49.60240173]
[93.94741058 34.61341095]
[86.74437714 20.52700615]
[94.96348572 8.10543251]
[95.53802490 -6.88355970]
[83.45259094 -19.35960579]
[83.99045563 -36.38658142]
[96.34481812 -47.62483215]
[96.34481812 -62.62483215]
[96.34481812 -77.62483215]
[93.15119934 -86.46293640]
[96.64315033 -93.19662476]
[97.21768951 -108.18561554]
[97.79223633 -123.17460632]
[98.36677551 -138.16360474]
[86.08894348 -147.65225220]
[81.76559448 -162.55488586]
[87.05912781 -177.14111328]
[99.93407440 -185.80224609]
[115.43976593 -185.20790100]
[127.61393738 -175.58660889]
[131.77537537 -160.63796997]
[126.32392120 -146.11001587]
[113.35576630 -137.58906555]
[112.78122711 -122.60006714]
[112.20668793 -107.61107635]
[111.63214111 -92.62208557]
[111.34481812 -77.62483215]
[111.34481812 -62.62483215]
[111.34481812 -47.62483215]
[121.73783875 -39.76053619]
[125.68589020 -27.13411903]
[121.50204468 -14.37725830]
[110.52702332 -6.30901909]
[109.95247650 8.67997360]
[117.19660950 21.69426537]
[108.93640900 35.18795013]
[108.36186218 50.17694473]
[107.78732300 65.16593933]
[107.50000000 80.16318512]
[119.39962006 91.43238831]
[119.71354675 107.81826782]
[108.25430298 119.53498840]
[108.82884216 134.52398682]
[109.40338135 149.51296997]
[117.66358948 163.00665283]
[110.41945648 176.02095032]
[110.99399567 191.00994873]
[111.56853485 205.99893188]
[112.43008423 220.97416687]
[124.14490509 231.24066162]
[125.09632874 246.42451477]
[115.23661041 257.52954102]
[116.38484192 272.48553467]
[117.53308105 287.44149780]
[130.35096741 296.39895630]
[134.36235046 311.51330566]
[127.67317200 325.64797974]
[113.44187927 332.12902832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 77]
[4 76]
[5 75]
[8 72]
[10 71]
[11 70]
[12 69]
[14 67]
[15 66]
[16 65]
[20 62]
[22 61]
[23 60]
[24 59]
[26 57]
[27 56]
[30 52]
[31 51]
[32 50]
[34 49]
[35 48]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
