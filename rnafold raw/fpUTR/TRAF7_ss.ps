%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGAGGGGGCAUCAUGAAGCGGGCUGGCGGCGCUGCCGCUCCCGGGCGGCCGCGGGCGGGAGGUGCUUCCCAAGGACCGUAGAUGCCUCUCUAGAGC\
) } def
/len { sequence length } bind def

/coor [
[84.71270752 408.03717041]
[87.50736237 388.85800171]
[87.97852325 373.86541748]
[88.21413422 358.86724854]
[80.47682953 346.13998413]
[88.21413422 332.33981323]
[88.21413422 317.33981323]
[88.21413422 302.33981323]
[88.21413422 287.33981323]
[87.97852325 272.34167480]
[87.50736237 257.34906006]
[87.03620148 242.35647583]
[86.56504059 227.36387634]
[86.09387970 212.37127686]
[85.62271881 197.37867737]
[78.52706146 193.12181091]
[73.72592163 186.26577759]
[72.11550903 177.95504761]
[74.05133057 169.61611938]
[79.27329254 162.71264648]
[86.93776703 158.48858643]
[88.34939575 143.55516052]
[89.76101685 128.62171936]
[91.17263794 113.68829346]
[83.76243591 98.72207642]
[93.42264557 85.09932709]
[94.36450195 70.12892914]
[95.07109833 55.14557648]
[95.54225922 40.15298080]
[86.44100952 24.24211502]
[96.05017090 9.65054607]
[96.05017090 -5.34945393]
[96.05017090 -20.34945297]
[96.05017090 -35.34945297]
[96.05017090 -50.34945297]
[96.05017090 -65.34945679]
[86.45363617 -80.96659088]
[95.59972382 -95.85279083]
[95.12856293 -110.84539032]
[94.65740204 -125.83798981]
[94.18624115 -140.83058167]
[93.71508026 -155.82318115]
[93.24391937 -170.81578064]
[85.07695770 -184.36610413]
[92.41066742 -197.33013916]
[91.93950653 -212.32273865]
[91.46834564 -227.31533813]
[82.37155914 -240.96012878]
[89.88147736 -255.53865051]
[106.27252960 -256.05377197]
[114.68301392 -241.97555542]
[106.46094513 -227.78649902]
[106.93210602 -212.79389954]
[107.40326691 -197.80130005]
[115.53652191 -185.32333374]
[108.23651886 -171.28694153]
[108.70767975 -156.29434204]
[109.17884064 -141.30174255]
[109.65000153 -126.30915070]
[110.12116241 -111.31655121]
[110.59232330 -96.32395172]
[119.25039673 -87.71538544]
[119.66162872 -75.10943604]
[111.05017090 -65.34945679]
[111.05017090 -50.34945297]
[111.05017090 -35.34945297]
[111.05017090 -20.34945297]
[111.05017090 -5.34945393]
[111.05017090 9.65054607]
[119.43357086 18.52682114]
[119.44863129 31.13946915]
[110.53485870 40.62414169]
[110.06369781 55.61674118]
[113.05358887 62.52507401]
[109.33489990 71.07078552]
[108.39304352 86.04118347]
[115.60398865 95.33018494]
[114.68135834 107.05332184]
[106.10607147 115.09992218]
[104.69444275 130.03335571]
[103.28282166 144.96678162]
[101.87120056 159.90020752]
[112.99097443 179.23960876]
[100.61531067 196.90751648]
[101.08647919 211.90011597]
[101.55764008 226.89271545]
[102.02880096 241.88531494]
[102.49996185 256.87789917]
[102.97112274 271.87051392]
[106.41954803 280.52880859]
[103.21413422 287.33981323]
[103.21413422 302.33981323]
[103.21413422 317.33981323]
[103.21413422 332.33981323]
[110.95143127 346.13998413]
[103.21413422 358.86724854]
[106.38889313 367.62960815]
[102.97112274 374.33657837]
[102.49996185 389.32916260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 96]
[6 94]
[7 93]
[8 92]
[9 91]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[21 82]
[22 81]
[23 80]
[24 79]
[26 76]
[27 75]
[28 73]
[29 72]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
