%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCGGGGCCUCGGCACAGGAGCUGGCUGCGGGAGCCCGCCGUCCUGAGUCGCAGGCCGAGGAGACAGUGAGUGCGCGCCCUGAGUCGCAGGCCGAGGAGACAGUGAGUGCGCGCCCUGAGUCGCAGGCCGAGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[104.20782471 205.07644653]
[102.54021454 190.16943359]
[93.43594360 178.38124084]
[99.59106445 163.80644226]
[97.92345428 148.89941406]
[96.25585175 133.99240112]
[83.24888611 129.81446838]
[72.91516876 120.87855530]
[66.90380859 108.61071777]
[51.91218567 109.11193848]
[36.92056274 109.61316681]
[21.92893791 110.11438751]
[6.93731499 110.61561584]
[-8.04779434 111.28382111]
[-23.02453041 112.11891937]
[-38.00126648 112.95401764]
[-52.97800064 113.78911591]
[-66.32601166 122.28271484]
[-79.46430206 115.26598358]
[-94.44104004 116.10107422]
[-109.41777802 116.93617249]
[-124.39450836 117.77127075]
[-139.37124634 118.60636902]
[-154.32565308 119.77492523]
[-169.25032043 121.27636719]
[-182.20672607 130.35614014]
[-195.64454651 123.93164825]
[-210.56921387 125.43308258]
[-225.49388123 126.93451691]
[-240.41854858 128.43595886]
[-251.64276123 139.89878845]
[-267.58767700 138.12702942]
[-276.02172852 124.47981262]
[-270.47500610 109.42611694]
[-255.20251465 104.51385498]
[-241.91998291 113.51128387]
[-226.99531555 112.00984955]
[-212.07064819 110.50841522]
[-197.14598083 109.00698090]
[-185.25709534 100.03459167]
[-170.75175476 106.35169983]
[-155.82708740 104.85025787]
[-152.12173462 101.72152710]
[-146.38952637 100.94090271]
[-140.20634460 103.62963867]
[-125.22960663 102.79454041]
[-110.25286865 101.95944214]
[-95.27613831 101.12434387]
[-80.29940033 100.28924561]
[-68.02262878 91.85537720]
[-53.81309891 98.81237793]
[-38.83636475 97.97727966]
[-23.85962868 97.14218140]
[-8.88289261 96.30708313]
[-2.32663417 92.76548004]
[6.43609047 95.62399292]
[21.42771339 95.12276459]
[36.41933823 94.62154388]
[51.41096115 94.12031555]
[66.40258789 93.61909485]
[74.87438965 76.80072784]
[90.96504974 67.01709747]
[109.79537964 67.23488617]
[125.65545654 77.38805389]
[138.80970764 70.17932892]
[143.33717346 55.27497482]
[156.78013611 48.15168762]
[170.96125793 52.55978775]
[184.11550903 45.35106277]
[197.26976013 38.14233780]
[203.35247803 31.21723938]
[210.79835510 30.92325974]
[217.03384399 24.13539886]
[224.48442078 24.00737953]
[237.94673157 17.39178848]
[251.40905762 10.77619934]
[264.87136841 4.16060925]
[278.33367920 -2.45498037]
[291.79598999 -9.07056999]
[305.25833130 -15.68616009]
[318.72064209 -22.30175018]
[332.10842896 -29.06690216]
[345.34216309 -36.12863922]
[358.49639893 -43.33736801]
[371.65066528 -50.54609299]
[376.17813110 -65.45044708]
[389.62109375 -72.57373047]
[403.80221558 -68.16563416]
[416.95648193 -75.37435913]
[417.21841431 -90.73101807]
[425.13735962 -103.89102936]
[438.58316040 -111.31441498]
[453.93890381 -111.00431824]
[467.07403564 -103.04416656]
[474.45523071 -89.57518768]
[474.09701538 -74.22047424]
[466.09573364 -61.11036301]
[452.60366821 -53.77141571]
[437.25015259 -54.17776489]
[424.16519165 -62.22011185]
[411.01095581 -55.01138306]
[407.09588623 -40.68630219]
[393.85830688 -33.18824387]
[378.85937500 -37.39184570]
[365.70513916 -30.18311691]
[352.55087280 -22.97439194]
[348.16134644 -16.95280647]
[339.02230835 -15.75531483]
[334.49969482 -9.83301926]
[325.33621216 -8.83943272]
[311.87390137 -2.22384334]
[298.41159058 4.39174652]
[284.94927979 11.00733662]
[271.48696899 17.62292671]
[258.02465820 24.23851585]
[244.56233215 30.85410500]
[231.10000610 37.46969604]
[217.71223450 44.23484802]
[204.47848511 51.29658508]
[191.32423401 58.50531387]
[178.16999817 65.71403503]
[174.25492859 80.03911591]
[161.01734924 87.53717804]
[146.01843262 83.33358002]
[132.86418152 90.54230499]
[134.18855286 100.80320740]
[132.38377380 110.99059296]
[127.61504364 120.17205811]
[120.31880188 127.50724030]
[111.16286469 132.32479858]
[112.83047485 147.23181152]
[114.49807739 162.13882446]
[123.72163391 174.99327087]
[117.44723511 188.50183105]
[119.11483765 203.40884399]
[131.61814880 213.07542419]
[133.54113770 228.76228333]
[123.74290466 241.16270447]
[108.03659058 242.91972351]
[95.74045563 232.99093628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[4 132]
[5 131]
[6 130]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 54]
[15 53]
[16 52]
[17 51]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 42]
[25 41]
[27 39]
[28 38]
[29 37]
[30 36]
[64 125]
[65 124]
[68 121]
[69 120]
[70 119]
[72 118]
[74 117]
[75 116]
[76 115]
[77 114]
[78 113]
[79 112]
[80 111]
[81 110]
[82 108]
[83 106]
[84 105]
[85 104]
[88 101]
[89 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
