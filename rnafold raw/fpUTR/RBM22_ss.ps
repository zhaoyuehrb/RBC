%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGCCCUAGACGCGUAAAUAAGACGCCGACCGGCGCGGCGCUAGCCUCGGGGCUUGACGGGAUUGUGGCGGUCCUCUCUCCCAAUUCGGAAGCUACAGCUACCUCCGGACGCUCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[60.66790771 128.77584839]
[56.51300430 121.99873352]
[53.51514816 114.63629913]
[51.75409698 106.88444519]
[36.75531769 106.69288635]
[21.75654221 106.50133514]
[6.75776529 106.30977631]
[-8.24101162 106.11822510]
[-23.23978806 105.92666626]
[-38.23856354 105.73511505]
[-46.97616959 108.78244781]
[-53.61665726 105.34224701]
[-68.60565186 104.76770782]
[-82.69205475 111.97074890]
[-95.11363220 103.75163269]
[-110.10262299 103.17709351]
[-115.23578644 116.61737061]
[-124.26870728 127.78777313]
[-136.30117798 135.59631348]
[-150.14064026 139.28494263]
[-164.42031860 138.50323486]
[-177.73428345 133.34149170]
[-188.77580261 124.32062531]
[-196.46562195 112.33963776]
[-200.05746460 98.58594513]
[-208.93927002 101.18315887]
[-215.39543152 97.40837860]
[-230.33554077 96.06924438]
[-245.27565002 94.73010254]
[-260.21575928 93.39096832]
[-274.85742188 100.77701569]
[-288.42459106 91.56488037]
[-286.96054077 75.23121643]
[-271.97134399 68.57869720]
[-258.87661743 78.45086670]
[-243.93650818 79.79000092]
[-228.99639893 81.12914276]
[-214.05628967 82.46827698]
[-199.10031128 83.61651611]
[-192.99598694 69.16162872]
[-182.30799866 57.63717270]
[-168.30561829 50.43855667]
[-152.66085815 48.44587326]
[-137.24888611 51.91635132]
[-123.92323303 60.45130157]
[-114.29290771 73.04183960]
[-109.52808380 88.18810272]
[-94.53908539 88.76264191]
[-81.52479553 81.51850891]
[-68.03111267 89.77871704]
[-53.04211807 90.35325623]
[-38.04700851 90.73633575]
[-23.04823303 90.92788696]
[-8.04945564 91.11944580]
[6.94932079 91.31100464]
[21.94809723 91.50255585]
[36.94687271 91.69411469]
[51.94565201 91.88566589]
[60.70105743 71.17889404]
[77.81951141 56.60543060]
[99.65810394 51.26658249]
[121.56945801 56.29849625]
[130.19923401 44.02955627]
[138.82901001 31.76061440]
[147.45880127 19.49167442]
[144.95291138 4.11772537]
[153.87951660 -8.20178986]
[168.55166626 -10.49601936]
[170.16259766 -26.23499870]
[183.81340027 -32.19359589]
[192.44317627 -44.46253586]
[193.36750793 -60.83561325]
[208.12904358 -67.97907257]
[221.54238892 -58.54433823]
[219.80903625 -42.23705292]
[204.71212769 -35.83275604]
[196.08233643 -23.56381607]
[195.08866882 -8.70239258]
[180.82060242 -1.86623979]
[183.62084961 12.71780014]
[175.04380798 25.28318405]
[159.72773743 28.12145424]
[151.09796143 40.39039612]
[142.46817017 52.65933609]
[133.83839417 64.92827606]
[143.77494812 78.57998657]
[148.45672607 94.80296326]
[147.32171631 111.64980316]
[161.16151428 117.43427277]
[175.00131226 123.21873474]
[188.84111023 129.00320435]
[202.68089294 134.78767395]
[216.52069092 140.57214355]
[230.57189941 145.82226562]
[244.81387329 150.53031921]
[259.05587769 155.23838806]
[274.99533081 151.38278198]
[286.10659790 163.44393921]
[280.95938110 179.01435852]
[264.84869385 182.07655334]
[254.34779358 169.48037720]
[240.10580444 164.77230835]
[225.86383057 160.06423950]
[222.48204041 161.40150452]
[218.26614380 161.09371948]
[214.03167725 158.75930786]
[210.73622131 154.41192627]
[196.89643860 148.62747192]
[183.05664062 142.84300232]
[169.21684265 137.05853271]
[155.37704468 131.27406311]
[141.53724670 125.48960114]
[136.84075928 131.90330505]
[131.16407776 137.46817017]
[124.65820312 142.03611755]
[117.49626160 145.48564148]
[109.86880493 147.72492981]
[101.97877502 148.69442749]
[94.03608704 148.36831665]
[86.25209045 146.75529480]
[78.83386993 143.89826965]
[71.97881317 139.87324524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[12 51]
[13 50]
[15 48]
[16 47]
[25 39]
[27 38]
[28 37]
[29 36]
[30 35]
[62 85]
[63 84]
[64 83]
[65 82]
[68 79]
[70 77]
[71 76]
[88 112]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
