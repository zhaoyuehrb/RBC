%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGCAGACAAGCCCGCCCCGCCGCUCCUCCCAGCAGCUUCUAUCCCGGAAGUUGAUGCCGAGCGCAGAUCGCUUGCAGCUUGCUAGCUGUGUGGGCUGGGAGGUCUGGUAGGGCUGAGCUUGCAAGAGGAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[103.25784302 587.18707275]
[92.62971497 576.48687744]
[84.99723053 563.47937012]
[80.84016418 548.98211670]
[80.41984558 533.90649414]
[83.76268005 519.20019531]
[90.65854645 505.78756714]
[100.67395782 494.51184082]
[113.17933655 486.08175659]
[127.38858795 481.02725220]
[126.02456665 466.08941650]
[124.66054535 451.15155029]
[123.29652405 436.21371460]
[121.93250275 421.27584839]
[120.39853668 406.35449219]
[111.26573944 394.58837891]
[117.38554382 379.99871826]
[115.68184662 365.09579468]
[113.97814178 350.19284058]
[112.27443695 335.28991699]
[103.14163971 323.52380371]
[109.26144409 308.93414307]
[107.55773926 294.03121948]
[105.85404205 279.12826538]
[104.15033722 264.22534180]
[92.36669922 255.18756104]
[90.42660522 240.09814453]
[99.98615265 227.79965210]
[98.28244781 212.89671326]
[96.57875061 197.99378967]
[94.87504578 183.09085083]
[93.17134094 168.18792725]
[91.46763611 153.28498840]
[89.76393890 138.38206482]
[88.06023407 123.47912598]
[86.35652924 108.57619476]
[78.12975311 96.03346252]
[65.13937378 88.53346252]
[52.14899063 81.03346252]
[39.15861130 73.53346252]
[26.16822815 66.03346252]
[13.17784786 58.53346252]
[0.18746661 51.03346252]
[-15.61871624 53.78012085]
[-27.52504349 43.02749634]
[-26.39799881 27.02408028]
[-13.10215664 18.04632378]
[2.16305304 22.98119354]
[7.68746662 38.04307938]
[20.67784691 45.54307938]
[33.66822815 53.04307938]
[46.65861130 60.54307938]
[59.64899063 68.04308319]
[72.63937378 75.54308319]
[85.62975311 83.04308319]
[92.12494659 79.29308319]
[80.97789764 69.25598145]
[87.07928467 55.55295181]
[101.99705505 57.12143707]
[105.11532593 71.79308319]
[111.61051178 68.04308319]
[111.61051178 53.04307938]
[111.61051178 38.04307938]
[111.61051178 23.04307938]
[111.61051178 8.04308033]
[111.61051178 -6.95692015]
[101.32874298 -19.27214622]
[104.68762970 -34.95964050]
[119.11051178 -41.98529816]
[133.53340149 -34.95964050]
[136.89228821 -19.27214622]
[126.61051178 -6.95692015]
[126.61051178 8.04308033]
[126.61051178 23.04307938]
[126.61051178 38.04307938]
[126.61051178 53.04307938]
[126.61051178 68.04308319]
[140.68634033 73.22682190]
[150.41506958 61.80965424]
[160.14379883 50.39248276]
[169.87252808 38.97531509]
[179.60125732 27.55814362]
[182.03765869 11.34099102]
[197.39721680 5.59504271]
[209.87934875 16.23123550]
[206.64349365 32.30796814]
[191.01843262 37.28687286]
[181.28970337 48.70404434]
[171.56097412 60.12121582]
[161.83224487 71.53838348]
[152.10351562 82.95555878]
[146.82446289 98.50716400]
[137.64411926 109.70892334]
[126.55874634 115.80105591]
[115.62790680 116.78155518]
[106.71518707 113.36727905]
[101.25946045 106.87248993]
[102.96316528 121.77542114]
[104.66687012 136.67835999]
[106.37057495 151.58128357]
[108.07427216 166.48422241]
[109.77797699 181.38714600]
[111.48168182 196.29008484]
[113.18538666 211.19302368]
[114.88908386 226.09594727]
[126.97763824 235.91963196]
[128.49313354 251.05758667]
[119.05326843 262.52163696]
[120.75697327 277.42456055]
[122.46067810 292.32751465]
[124.16437531 307.23043823]
[133.41903687 320.06250000]
[127.17736816 333.58621216]
[128.88107300 348.48913574]
[130.58477783 363.39208984]
[132.28848267 378.29501343]
[141.54313660 391.12707520]
[135.30146790 404.65078735]
[139.41659546 412.90441895]
[136.87034607 419.91183472]
[138.23437500 434.84967041]
[139.59840393 449.78753662]
[140.96241760 464.72540283]
[142.32644653 479.66323853]
[157.21615601 482.06060791]
[171.04153442 488.08636475]
[182.93353271 497.36166382]
[192.14459229 509.30349731]
[198.09570312 523.16113281]
[200.41276550 538.06359863]
[198.95013428 553.07397461]
[193.79975891 567.24871826]
[185.28536987 579.69689941]
[173.94221497 589.63586426]
[160.48333740 596.44097900]
[145.75474548 599.68438721]
[130.68232727 599.16217041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 124]
[11 123]
[12 122]
[13 121]
[14 120]
[15 118]
[17 116]
[18 115]
[19 114]
[20 113]
[22 111]
[23 110]
[24 109]
[25 108]
[28 105]
[29 104]
[30 103]
[31 102]
[32 101]
[33 100]
[34 99]
[35 98]
[36 97]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
