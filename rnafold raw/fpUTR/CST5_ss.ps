%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCUCAGCCUUCUGCUGCUUUGCUCUCUGGGAGAUCCAGCUCCUUGCUCUGUGUCCCAGUAGAAC\
) } def
/len { sequence length } bind def

/coor [
[58.24019623 134.53302002]
[55.27898026 133.81282043]
[53.09225464 132.27760315]
[38.66487122 136.38255310]
[30.40638351 153.12437439]
[12.93442345 158.75868225]
[-3.00137782 150.28633118]
[-16.98846054 155.70495605]
[-30.97554398 161.12358093]
[-44.96262741 166.54220581]
[-52.73202896 180.57844543]
[-68.57354736 183.11335754]
[-80.33493042 172.20237732]
[-78.99384308 156.21546936]
[-65.57906342 147.41642761]
[-50.38125229 152.55513000]
[-36.39416885 147.13650513]
[-22.40708542 141.71788025]
[-8.42000294 136.29925537]
[-6.04994106 124.73405457]
[1.80997229 115.76243591]
[13.19361591 111.81177521]
[25.16155434 114.02995300]
[34.55992508 121.95516968]
[48.98730850 117.85022736]
[62.84550095 112.10997772]
[75.94983673 104.81090546]
[89.05417633 97.51184082]
[101.98641968 89.91204071]
[114.73967743 82.01555634]
[127.49293518 74.11907196]
[140.24618530 66.22258759]
[152.99945068 58.32610703]
[165.75270081 50.42962646]
[173.41268921 36.58638382]
[188.30679321 36.46472549]
[201.06004333 28.56824303]
[204.79037476 13.44467258]
[217.83648682 5.61819124]
[232.23150635 9.26769257]
[244.98477173 1.37121022]
[257.73803711 -6.52527237]
[262.79598999 -21.75013924]
[277.90197754 -27.15276146]
[291.46798706 -18.58870888]
[293.08734131 -2.62759042]
[281.51779175 8.48659039]
[265.63452148 6.22798491]
[252.88125610 14.12446690]
[240.12799072 22.02095032]
[236.97848511 36.53356934]
[224.15734863 44.72340012]
[208.95652771 41.32149887]
[196.20327759 49.21798325]
[189.45549011 62.49641418]
[173.64918518 63.18288422]
[160.89593506 71.07936859]
[148.14266968 78.97584534]
[135.38941956 86.87232971]
[122.63616180 94.76881409]
[109.88290405 102.66529846]
[105.03346252 109.47673798]
[96.35324097 110.61617279]
[83.24890900 117.91524506]
[70.14456940 125.21430969]
[68.09243774 129.40887451]
[65.10139465 132.43232727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[7 19]
[8 18]
[9 17]
[10 16]
[26 65]
[27 64]
[28 63]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[34 56]
[36 54]
[37 53]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
