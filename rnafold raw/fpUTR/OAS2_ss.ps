%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAGUUGGUAAGCUCGCUGCAGUGGGUGGAGAGAGGCCUCUAGACUUCAGUUUCAGUUUCCUGGCUCUGGGCAGCAGCAAGAAUUCCUCUGCCUCCCAUCCUACCAUUCACUGUCUUGCCGGCAGCCAGCUGAGAGCA\
) } def
/len { sequence length } bind def

/coor [
[106.01448059 596.79821777]
[101.65647888 582.17053223]
[104.08526611 567.10186768]
[112.81861115 554.58422852]
[126.12249756 547.10296631]
[125.12060547 532.13647461]
[124.11871338 517.16992188]
[123.11682892 502.20343018]
[122.11493683 487.23693848]
[121.11305237 472.27044678]
[120.11116028 457.30392456]
[111.18734741 449.06271362]
[110.27452850 436.54696655]
[118.41242218 426.47219849]
[117.74422455 411.48709106]
[117.07601929 396.50198364]
[108.77944183 384.13201904]
[115.89430237 370.00085449]
[115.22610474 355.01574707]
[103.61691284 339.61160278]
[112.96604919 321.81246948]
[111.63097382 306.87200928]
[110.29589081 291.93154907]
[108.96081543 276.99105835]
[107.62573242 262.05059814]
[106.29065704 247.11013794]
[104.95557404 232.16966248]
[103.62049866 217.22920227]
[102.28541565 202.28872681]
[100.95034027 187.34826660]
[99.61525726 172.40780640]
[98.11382294 157.48313904]
[96.44622040 142.57611084]
[92.54510498 136.22720337]
[94.91133118 127.31892395]
[93.57625580 112.37845612]
[87.11104584 98.84327698]
[76.32868958 88.41539001]
[65.54633331 77.98750305]
[54.76398087 67.55961609]
[39.56910706 70.09378052]
[25.95474052 63.27450943]
[19.04804039 49.90433884]
[21.31151581 35.20689774]
[10.52916145 24.77901268]
[-0.25319427 14.35112667]
[-11.03554916 3.92324018]
[-21.81790543 -6.50464630]
[-37.07737732 -3.68894863]
[-51.06302261 -10.41065407]
[-58.39707947 -24.08512878]
[-56.25944901 -39.45425797]
[-45.47209549 -50.60829926]
[-30.18297577 -53.25829697]
[-16.27107048 -46.38526917]
[-9.08578777 -32.63203812]
[-11.39001846 -17.28700066]
[-0.60766309 -6.85911512]
[10.17469215 3.56877136]
[20.95704651 13.99665737]
[31.73940277 24.42454338]
[46.35299683 21.67121696]
[59.94649124 28.12729645]
[67.21687317 41.50619507]
[65.19186401 56.77726364]
[75.97422028 67.20514679]
[86.75657654 77.63303375]
[97.53893280 88.06092072]
[99.07888794 87.72543335]
[100.66439056 87.58971405]
[109.69606781 75.61353302]
[118.72773743 63.63735199]
[127.75940704 51.66117477]
[125.76445007 36.21261597]
[135.09445190 24.19572639]
[149.83459473 22.38904381]
[158.86625671 10.41286373]
[167.89793396 -1.56331575]
[176.92961121 -13.53949547]
[178.13844299 -20.17272186]
[181.97817993 -24.49985123]
[186.64007568 -25.83602142]
[196.19628906 -37.39797974]
[196.11691284 -53.44083786]
[208.70013428 -63.39283371]
[224.29316711 -59.61965179]
[230.93437195 -45.01575089]
[223.52919006 -30.78399658]
[207.75823975 -27.84177017]
[198.20204163 -16.27981377]
[188.90579224 -4.50782204]
[179.87411499 7.46835756]
[170.84243774 19.44453621]
[161.81077576 31.42071724]
[164.12611389 46.08955383]
[155.13731384 58.36376190]
[139.73559570 60.69284821]
[130.70391846 72.66902924]
[121.67224121 84.64520264]
[112.64057159 96.62138367]
[108.51672363 111.04338074]
[109.85179901 125.98384857]
[111.35323334 140.90850830]
[113.02084351 155.81552124]
[117.11405945 164.07397461]
[114.55572510 171.07272339]
[115.89080811 186.01318359]
[117.22588348 200.95365906]
[118.56096649 215.89411926]
[119.89604187 230.83459473]
[121.23112488 245.77505493]
[122.56620026 260.71551514]
[123.90128326 275.65600586]
[125.23635864 290.59646606]
[126.57144165 305.53692627]
[127.90651703 320.47738647]
[136.71762085 327.02682495]
[140.35153198 337.15252686]
[137.82131958 347.38168335]
[130.21121216 354.34756470]
[130.87940979 369.33267212]
[139.22378540 382.77447510]
[132.06112671 395.83377075]
[132.72933960 410.81887817]
[133.39753723 425.80398560]
[143.67117310 441.04067993]
[135.07766724 456.30203247]
[136.07955933 471.26855469]
[137.08143616 486.23504639]
[138.08332825 501.20153809]
[139.08522034 516.16802979]
[140.08711243 531.13458252]
[141.08900452 546.10107422]
[155.27133179 551.74237061]
[165.59519958 562.98425293]
[170.01075745 577.59472656]
[167.64132690 592.67279053]
[158.95735168 605.22473145]
[145.68302917 612.75836182]
[130.45399475 613.77783203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 133]
[6 132]
[7 131]
[8 130]
[9 129]
[10 128]
[11 127]
[14 125]
[15 124]
[16 123]
[18 121]
[19 120]
[21 116]
[22 115]
[23 114]
[24 113]
[25 112]
[26 111]
[27 110]
[28 109]
[29 108]
[30 107]
[31 106]
[32 104]
[33 103]
[35 102]
[36 101]
[37 68]
[38 67]
[39 66]
[40 65]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[70 100]
[71 99]
[72 98]
[73 97]
[76 94]
[77 93]
[78 92]
[79 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
