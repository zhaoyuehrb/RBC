%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGCAACGCUUGCGCUGGGCGGGGCUUGGUGCGCUCUCACCCUUAUCUCCAAAUUCUGGGUGUUGUCGCGAGGGCUGCUGUGUCCGGAACUUCCGGUUCCGGUCAGGGUCCGCGAUCUCGGACUAAGG\
) } def
/len { sequence length } bind def

/coor [
[76.03867340 113.70027161]
[73.48961639 107.68390656]
[72.42623138 101.23692322]
[72.90810394 94.72062683]
[59.51859283 87.95888519]
[46.12908554 81.19715118]
[32.73957825 74.43541718]
[16.93323898 75.12111664]
[9.06028271 62.47731018]
[-6.74605703 63.16300964]
[-14.61901188 50.51920319]
[-28.00852013 43.75746918]
[-41.39802933 36.99573135]
[-54.78753662 30.23399734]
[-68.17704773 23.47226143]
[-81.56655121 16.71052551]
[-95.03617859 10.10982227]
[-114.23573303 16.40764999]
[-130.53479004 5.41162109]
[-145.22422791 8.44814682]
[-159.91366577 11.48467255]
[-174.60310364 14.52119732]
[-189.29254150 17.55772400]
[-201.24069214 27.92846680]
[-215.27075195 22.92780685]
[-223.74189758 36.27004242]
[-239.18428040 39.63283920]
[-252.43620300 31.02110672]
[-255.63554382 15.54403591]
[-246.88418579 2.38389587]
[-231.37416077 -0.65163416]
[-218.30728149 8.23837185]
[-207.40982056 -1.91517878]
[-192.32907104 2.86828780]
[-177.63963318 -0.16823773]
[-162.95019531 -3.20476317]
[-148.26075745 -6.24128866]
[-133.57131958 -9.27781391]
[-132.38493347 -13.89697933]
[-130.23339844 -18.15317154]
[-139.28137207 -30.11705017]
[-148.32933044 -42.08092880]
[-157.37728882 -54.04481125]
[-166.42524719 -66.00868988]
[-181.01260376 -61.81660080]
[-196.12890625 -63.18104935]
[-209.72981262 -69.91750336]
[-219.97590637 -81.11491394]
[-225.48147583 -95.25892639]
[-225.50196838 -110.43667603]
[-220.03457642 -124.59548950]
[-209.81875610 -135.82051086]
[-196.23608398 -142.59365845]
[-181.12350464 -143.99890137]
[-166.52490234 -139.84620667]
[-154.41458130 -130.69717407]
[-146.43038940 -117.78916168]
[-143.65209961 -102.86784363]
[-146.45547485 -87.95122528]
[-154.46136475 -75.05664825]
[-145.41340637 -63.09276962]
[-136.36544800 -51.12889099]
[-127.31748962 -39.16501236]
[-118.26952362 -27.20113182]
[-103.78404999 -27.14822769]
[-92.18790436 -18.02573395]
[-88.59745789 -3.43797779]
[-81.13175201 -3.40789819]
[-74.80481720 3.32101679]
[-61.41530991 10.08275318]
[-48.02579880 16.84448814]
[-34.63629150 23.60622406]
[-21.24678421 30.36795998]
[-7.85727644 37.12969589]
[6.99135637 35.96035004]
[15.82201862 49.08780289]
[30.67065239 47.91845703]
[39.50131607 61.04590607]
[52.89082336 67.80764008]
[66.28032684 74.56938171]
[79.66983795 81.33111572]
[104.28513336 72.73316193]
[125.07655334 88.46703339]
[139.89468384 86.13828278]
[152.32630920 76.35231781]
[166.10047913 82.01988983]
[180.91860962 79.69113922]
[195.73674011 77.36238861]
[210.55487061 75.03363800]
[225.37300110 72.70488739]
[240.19111633 70.37613678]
[255.00924683 68.04738617]
[269.82739258 65.71863556]
[284.53576660 57.28658295]
[296.70999146 69.08594513]
[288.74191284 84.05077362]
[272.15612793 80.53676605]
[257.33801270 82.86551666]
[242.51986694 85.19426727]
[227.70175171 87.52301788]
[212.88362122 89.85176849]
[198.06549072 92.18051910]
[183.24736023 94.50926971]
[168.42922974 96.83802032]
[157.05749512 106.45742035]
[142.22343445 100.95640564]
[127.40530396 103.28515625]
[125.59442139 110.33288574]
[122.00466919 116.66245270]
[131.05262756 128.62632751]
[140.10058594 140.59020996]
[149.14854431 152.55409241]
[158.19651794 164.51797485]
[167.24447632 176.48184204]
[182.93122864 178.40574646]
[192.59706116 190.90962219]
[190.50743103 206.57516479]
[177.90205383 216.10826111]
[162.25949097 213.85311890]
[152.86018372 201.14765930]
[155.28059387 185.52981567]
[146.23263550 173.56593323]
[137.18467712 161.60205078]
[128.13670349 149.63816833]
[119.08875275 137.67428589]
[110.04078674 125.71041107]
[103.71581268 127.35023499]
[97.18259430 127.45732880]
[90.80727386 126.02568817]
[84.94712067 123.13554382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 81]
[5 80]
[6 79]
[7 78]
[9 76]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[17 67]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[25 32]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[83 107]
[84 106]
[86 104]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
