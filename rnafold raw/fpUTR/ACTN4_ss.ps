%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAGUGCGCAGGCGCGGGCGGAGGGCGGGCUGAAGCAGCUGAAGCGGCGGUAGCGGCGGCGGCUCGGGCAGAGGGGCGGGAGCUGAGGCGGGAGCGGACAGGCUGGUGGGCGAGCGAGAGGCGGCGGA\
) } def
/len { sequence length } bind def

/coor [
[-21.51662064 357.19204712]
[-35.15727615 360.19964600]
[-48.86858749 357.77035522]
[-57.03314209 370.35369873]
[-57.51875305 388.71533203]
[-73.36494446 396.15686035]
[-81.22541809 408.93234253]
[-89.08588409 421.70782471]
[-96.94635773 434.48330688]
[-96.86399841 450.88226318]
[-111.15925598 458.91827393]
[-125.12638855 450.32461548]
[-124.39721680 433.94168091]
[-109.72183990 426.62283325]
[-101.86137390 413.84735107]
[-94.00090027 401.07186890]
[-86.14043427 388.29638672]
[-88.63285065 376.39587402]
[-82.10493469 365.66452026]
[-69.61646271 362.18911743]
[-61.45190811 349.60580444]
[-70.00251770 336.16052246]
[-71.86402893 320.27734375]
[-66.61611938 305.10971069]
[-55.25497437 293.69104004]
[-40.00466537 288.32806396]
[-23.88182449 290.13510132]
[-16.02135658 277.35961914]
[-15.94171810 262.46524048]
[-2.12014484 254.76623535]
[-2.04050708 239.87184143]
[11.78106594 232.17283630]
[19.64153481 219.39733887]
[13.80495167 205.71990967]
[17.18131256 191.05484009]
[28.68002319 181.07321167]
[44.02879333 179.76115417]
[51.88926315 166.98567200]
[51.38863373 149.48631287]
[67.55995178 140.77574158]
[75.11181641 127.81543732]
[82.66368103 114.85513306]
[77.28279877 97.73020935]
[85.94555664 82.00845337]
[103.29669189 77.40896606]
[110.21848297 64.10149384]
[117.14028168 50.79402542]
[110.71755981 33.05398560]
[119.06573486 16.48835754]
[136.53890991 11.27756405]
[135.28518677 -4.49388933]
[147.63766479 -12.81648159]
[153.91346741 -26.44051170]
[148.67625427 -41.11052322]
[155.23489380 -54.83782578]
[169.25279236 -59.74031067]
[167.99905396 -75.51176453]
[180.35153198 -83.83435822]
[186.62734985 -97.45838165]
[181.39012146 -112.12839508]
[187.94877625 -125.85569763]
[201.96665955 -130.75817871]
[208.24247742 -144.38221741]
[214.51829529 -158.00624084]
[220.79409790 -171.63026428]
[227.06991577 -185.25430298]
[233.34573364 -198.87832642]
[228.10850525 -213.54833984]
[234.66714478 -227.27565002]
[248.68504333 -232.17813110]
[254.96084595 -245.80215454]
[249.25184631 -260.53927612]
[255.71203613 -274.96292114]
[270.50869751 -280.51580811]
[284.86322021 -273.90347290]
[290.25936890 -259.04895020]
[283.49563599 -244.76512146]
[268.58486938 -239.52635193]
[262.30908203 -225.90231323]
[267.69338989 -212.06234741]
[261.52288818 -198.15623474]
[246.96975708 -192.60252380]
[240.69393921 -178.97848511]
[234.41813660 -165.35446167]
[228.14231873 -151.73042297]
[221.86650085 -138.10639954]
[215.59069824 -124.48236847]
[220.97500610 -110.64240265]
[214.80451965 -96.73629761]
[200.25137329 -91.18257141]
[193.97557068 -77.55854034]
[195.67817688 -62.76156998]
[182.87681580 -53.46449661]
[188.26112366 -39.62452698]
[182.09063721 -25.71842194]
[167.53750610 -20.16469955]
[161.26168823 -6.54066944]
[162.96430969 8.25630188]
[150.16293335 17.55337715]
[156.39004517 27.25092697]
[157.12471008 38.87295914]
[152.06472778 49.49506378]
[142.38078308 56.38736343]
[130.44775391 57.71582413]
[123.52595520 71.02329254]
[116.60415649 84.33075714]
[122.10685730 94.29824066]
[122.11148834 105.68377686]
[116.61688995 115.65573120]
[106.98960876 121.73403931]
[95.62397766 122.40699768]
[88.07212067 135.36729431]
[80.52025604 148.32759094]
[83.04757690 161.04187012]
[76.41108704 171.70642090]
[64.66474915 174.84614563]
[56.80427933 187.62162781]
[62.55205536 201.91390991]
[58.82552338 216.67759705]
[47.25699234 226.30220032]
[32.41701889 227.25781250]
[24.55655098 240.03329468]
[23.91468048 255.84147644]
[10.65534019 262.62670898]
[10.01346874 278.43487549]
[-3.24587083 285.22009277]
[-11.10634041 297.99557495]
[-3.00248599 309.63842773]
[0.02425941 323.45278931]
[-2.45368147 337.33193970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[6 17]
[7 16]
[8 15]
[9 14]
[27 127]
[28 126]
[30 124]
[32 122]
[33 121]
[37 117]
[38 116]
[40 113]
[41 112]
[42 111]
[45 106]
[46 105]
[47 104]
[50 99]
[52 97]
[53 96]
[56 93]
[58 91]
[59 90]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
