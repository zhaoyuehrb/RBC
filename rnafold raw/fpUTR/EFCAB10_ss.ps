%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGCGCCGGGUAGAGGGAGACAGAGUCGCACGGCUGAGACGCCAGGCAGUCGCCUAGCAACAGCGGGACGCGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[87.23961639 277.57336426]
[70.95413971 275.64584351]
[64.73016357 260.47369385]
[74.97038269 247.66471863]
[76.73344421 232.76869202]
[78.49649811 217.87266541]
[72.30876160 204.32418823]
[81.61447144 191.52909851]
[83.37752533 176.63307190]
[85.14058685 161.73704529]
[78.95285034 148.18856812]
[88.25856018 135.39347839]
[90.02161407 120.49744415]
[84.84465027 117.03023529]
[80.79978180 112.29085541]
[78.18917847 106.63335419]
[77.20783234 100.48034668]
[61.69213486 103.57446289]
[51.97873688 92.28291321]
[37.71289062 87.64765930]
[24.54823303 96.08719635]
[9.04537678 94.03892517]
[-1.47570658 82.46996307]
[-2.04728174 66.84282684]
[7.60053110 54.53617477]
[22.91233063 51.36082840]
[36.65835190 58.81608582]
[42.34814453 73.38181305]
[56.61399078 78.01706696]
[71.10930634 74.59140015]
[81.84309387 86.21449280]
[95.11434937 77.73244476]
[110.71763611 79.87921906]
[115.59932709 64.82997894]
[130.19734192 61.87237167]
[141.21217346 51.69036102]
[152.22700500 41.50835037]
[163.24185181 31.32633972]
[161.37098694 19.26599884]
[165.63211060 7.95928764]
[174.81085205 0.28946072]
[186.45564270 -1.85077310]
[197.53187561 1.97474277]
[209.31163025 -7.31166649]
[215.35902405 -21.93150330]
[230.14408875 -23.73464584]
[241.92384338 -33.02105713]
[253.70359802 -42.30746460]
[265.48333740 -51.59387589]
[271.05429077 -67.01776886]
[287.24270630 -69.63838196]
[297.39532471 -56.75985718]
[291.06799316 -41.63050842]
[274.76974487 -39.81412125]
[262.98999023 -30.52771187]
[251.21025085 -21.24130249]
[239.43049622 -11.95489311]
[234.22567749 2.00071740]
[218.59803772 4.46808767]
[206.81829834 13.75449657]
[205.95419312 31.84102440]
[192.08486938 43.96160126]
[173.42385864 42.34117889]
[162.40902710 52.52318954]
[151.39418030 62.70520020]
[140.37934875 72.88720703]
[136.28550720 87.20816803]
[120.89965057 90.89405823]
[120.31247711 110.34972382]
[104.91764832 122.26050568]
[103.15458679 137.15653992]
[109.21621704 151.77047729]
[100.03661346 163.50010681]
[98.27355957 178.39613342]
[96.51049805 193.29216003]
[102.57212830 207.90609741]
[93.39252472 219.63572693]
[91.62947083 234.53175354]
[89.86640930 249.42778015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 79]
[5 78]
[6 77]
[8 75]
[9 74]
[10 73]
[12 71]
[13 70]
[17 31]
[19 29]
[20 28]
[33 68]
[35 66]
[36 65]
[37 64]
[38 63]
[43 60]
[44 59]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
