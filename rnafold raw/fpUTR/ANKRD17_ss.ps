%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGAGGUGACCGAGGCGGUGGCGGCGGAGGCGGCACCGAUUGCUGUGUCGGCCCCAGUGCGGCCGAAGUCGCGGUAGAGCGUAGCCCCACGCCCCUCCCCCGUCCGCGCCCUCCCUCUUUCCCUGGGG\
) } def
/len { sequence length } bind def

/coor [
[130.87603760 369.15859985]
[120.49488831 358.33123779]
[122.24384308 343.43356323]
[134.85037231 335.30487061]
[149.14208984 339.85946655]
[145.23086548 325.37835693]
[141.31962585 310.89727783]
[137.40840149 296.41616821]
[132.57926941 290.72256470]
[133.58145142 281.54083252]
[120.75555420 274.05538940]
[116.93473816 259.32937622]
[124.87312317 245.92712402]
[121.31026459 231.35639954]
[116.61904907 225.54862976]
[117.84111786 216.39358521]
[114.62867737 201.74162292]
[111.41623688 187.08964539]
[108.20379639 172.43768311]
[104.99135590 157.78570557]
[94.70787048 147.01077271]
[99.31016541 131.87374878]
[96.09772491 117.22178650]
[82.84699249 104.19428253]
[88.59099579 86.52216339]
[84.67975616 72.04106140]
[80.76852417 57.55995941]
[76.85729218 43.07886124]
[66.03685760 35.94034195]
[63.11530685 23.72396278]
[69.13788605 13.16162395]
[65.57501984 -1.40910041]
[60.44898224 -9.09233475]
[62.10588074 -16.37191963]
[58.89344025 -31.02388763]
[55.68099976 -45.67585754]
[52.29310226 -60.28825760]
[48.73024368 -74.85897827]
[44.99292374 -89.38594055]
[34.17249298 -96.52445984]
[31.25093842 -108.74083710]
[37.27351761 -119.30317688]
[33.71065521 -133.87390137]
[30.14779282 -148.44462585]
[26.58493233 -163.01535034]
[23.02206993 -177.58607483]
[19.45920753 -192.15679932]
[15.89634609 -206.72752380]
[12.33348370 -221.29824829]
[8.24889565 -235.73141479]
[3.64786601 -250.00833130]
[-0.95316386 -264.28524780]
[-5.55419350 -278.56216431]
[-10.15522385 -292.83911133]
[-14.75625324 -307.11602783]
[-29.30828857 -312.84072876]
[-36.73056412 -326.60458374]
[-33.51850510 -341.90872192]
[-21.18874931 -351.52700806]
[-5.56303072 -350.91793823]
[5.98066473 -340.36914062]
[7.99175644 -324.86141968]
[-0.47933045 -311.71704102]
[4.12169933 -297.44012451]
[8.72272873 -283.16320801]
[13.32375908 -268.88629150]
[17.92478943 -254.60935974]
[22.52581787 -240.33244324]
[25.58278847 -238.39308167]
[27.81110764 -234.82731628]
[28.43397903 -230.06109619]
[26.90420914 -224.86111450]
[30.46706963 -210.29039001]
[34.02993393 -195.71966553]
[37.59279251 -181.14894104]
[41.15565491 -166.57821655]
[44.71851730 -152.00749207]
[48.28137970 -137.43676758]
[51.84424210 -122.86603546]
[64.64398956 -110.92264557]
[59.47402573 -93.29717255]
[64.30315399 -87.60356140]
[63.30096817 -78.42184448]
[66.86383057 -63.85111618]
[71.55503845 -58.04334641]
[70.33296967 -48.88829803]
[73.54541016 -34.23632812]
[76.75785065 -19.58436012]
[80.14574432 -4.97196198]
[83.70861053 9.59876251]
[96.50835419 21.54215431]
[91.33839417 39.16762924]
[95.24962616 53.64872742]
[99.16085815 68.12982941]
[103.07209015 82.61092377]
[112.07431793 87.11479950]
[117.15300751 95.80571747]
[116.65782928 105.85955811]
[110.74969482 114.00934601]
[113.96213531 128.66131592]
[124.47539520 140.48425293]
[119.64332581 154.57327271]
[122.85576630 169.22523499]
[126.06820679 183.87721252]
[129.28065491 198.52917480]
[132.49308777 213.18115234]
[135.88098145 227.79354858]
[139.44384766 242.36427307]
[152.67100525 250.59106445]
[156.07669067 265.41860962]
[148.15217590 277.97796631]
[151.88949585 292.50494385]
[155.80073547 306.98602295]
[159.71195984 321.46713257]
[163.62319946 335.94824219]
[168.39508057 350.16894531]
[174.01048279 364.07821655]
[179.62586975 377.98745728]
[185.24125671 391.89672852]
[200.16716003 396.56057739]
[208.55961609 409.75531006]
[206.45597839 425.25073242]
[194.84950256 435.73043823]
[179.22042847 436.24618530]
[166.94831848 426.55447388]
[163.82768250 411.23141479]
[171.33200073 397.51211548]
[165.71661377 383.60287476]
[160.10122681 369.69360352]
[154.48582458 355.78436279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 115]
[6 114]
[7 113]
[8 112]
[10 111]
[13 108]
[14 107]
[16 106]
[17 105]
[18 104]
[19 103]
[20 102]
[22 100]
[23 99]
[25 95]
[26 94]
[27 93]
[28 92]
[31 90]
[32 89]
[34 88]
[35 87]
[36 86]
[37 84]
[38 83]
[39 81]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[116 130]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
