%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUUUUGUGGCCCGCUAUGGCGGCGGUGUUGAGGUUGGGUACGGGAUGCGGGGUCUUUGACUGAAGGGGUAGGCCAAGUGGAGGUAUCAGGGACGUCGCGCGGCACAGAAGAGGACCAGCCUGGACGCCGGGGACGCUGUC\
) } def
/len { sequence length } bind def

/coor [
[139.73332214 147.87458801]
[136.83319092 133.15762329]
[132.32261658 147.46337891]
[127.81201935 161.76913452]
[123.30143738 176.07489014]
[124.30501556 192.99909973]
[108.32001495 198.64854431]
[98.46626282 184.85217285]
[108.99568176 171.56430054]
[113.50627136 157.25854492]
[118.01685333 142.95278931]
[122.52744293 128.64703369]
[116.24633789 124.54853058]
[97.40303040 112.25301361]
[86.12543488 122.14319611]
[74.84783936 132.03338623]
[63.57024002 141.92356873]
[58.81414795 157.61788940]
[42.78507996 161.08215332]
[31.97237206 148.75262451]
[37.49920654 133.31286621]
[53.68005371 130.64598083]
[64.95764923 120.75579071]
[76.23524475 110.86560059]
[87.51284027 100.97541046]
[95.70985413 88.41320801]
[100.22044373 74.10745239]
[104.73102570 59.80170059]
[109.24161530 45.49594498]
[113.75220490 31.19019127]
[118.26278687 16.88443565]
[122.77337646 2.57868195]
[119.54397583 -12.90942764]
[130.75033569 -22.72099113]
[135.26092529 -37.02674484]
[139.77151489 -51.33250046]
[144.28208923 -65.63825226]
[148.79267883 -79.94400787]
[153.30326843 -94.24976349]
[157.81385803 -108.55551910]
[150.24249268 -119.74974060]
[150.52134705 -133.06605530]
[158.32287598 -143.61973572]
[170.60139465 -147.66943359]
[157.47984314 -167.83848572]
[163.07342529 -190.98738098]
[183.52862549 -202.69462585]
[181.53710938 -211.68876648]
[185.69487000 -217.86801147]
[187.97671509 -232.69343567]
[190.25857544 -247.51885986]
[192.54042053 -262.34429932]
[194.82228088 -277.16970825]
[189.27435303 -291.98629761]
[198.85771179 -303.38842773]
[201.13957214 -318.21383667]
[203.42141724 -333.03924561]
[205.70327759 -347.86468506]
[207.98512268 -362.69009399]
[210.26696777 -377.51553345]
[212.54882812 -392.34094238]
[214.83067322 -407.16638184]
[216.30093384 -422.09414673]
[216.95521545 -437.07986450]
[217.60951233 -452.06558228]
[205.63591003 -461.75781250]
[201.71116638 -476.47003174]
[207.13787842 -490.50622559]
[219.63946533 -498.55908203]
[220.29374695 -513.54479980]
[210.55895996 -526.29681396]
[214.59892273 -541.82287598]
[229.31452942 -548.21270752]
[243.41723633 -540.56463623]
[246.08863831 -524.74554443]
[235.27947998 -512.89050293]
[234.62518311 -497.90478516]
[246.37733459 -488.79299927]
[250.56007385 -474.33724976]
[245.36801147 -460.02307129]
[232.59523010 -451.41128540]
[231.94094849 -436.42556763]
[231.28665161 -421.43984985]
[244.16946411 -429.12316895]
[258.28604126 -424.05145264]
[263.33364868 -409.92623901]
[255.62837219 -397.05654907]
[240.79377747 -394.83514404]
[229.65609741 -404.88452148]
[227.37425232 -390.05911255]
[225.09239197 -375.23367310]
[222.81054688 -360.40826416]
[220.52868652 -345.58282471]
[218.24684143 -330.75741577]
[215.96499634 -315.93197632]
[213.68313599 -301.10656738]
[219.39427185 -287.35040283]
[209.64768982 -274.88784790]
[207.36584473 -260.06243896]
[205.08399963 -245.23701477]
[202.80213928 -230.41159058]
[200.52029419 -215.58616638]
[198.40029907 -200.73674011]
[204.55349731 -197.42373657]
[209.77430725 -192.75061035]
[213.76705933 -186.97045898]
[216.30302429 -180.39935303]
[217.23333740 -173.39907837]
[216.49786377 -166.35720825]
[214.12886047 -159.66563416]
[210.24981689 -153.69882202]
[205.06889343 -148.79272461]
[198.86787415 -145.22604370]
[191.98680115 -143.20423889]
[184.80534363 -142.84783936]
[192.88470459 -128.13682556]
[187.75872803 -111.80184174]
[172.11961365 -104.04492950]
[167.60902405 -89.73917389]
[163.09843445 -75.43341827]
[158.58784485 -61.12766647]
[154.07725525 -46.82191467]
[149.56668091 -32.51615906]
[145.05609131 -18.21040535]
[148.60812378 -3.74553823]
[137.07913208 7.08926868]
[132.56854248 21.39502335]
[128.05795288 35.70077896]
[123.54737091 50.00653076]
[119.03678131 64.31228638]
[114.52619934 78.61804199]
[110.01560974 92.92379761]
[120.83256531 82.53180695]
[132.20887756 72.75533295]
[146.31771851 67.66213226]
[161.31555176 67.91770172]
[175.24266052 73.48864746]
[186.27928162 83.64704895]
[192.98330688 97.06554413]
[194.47874451 111.99081421]
[190.57020569 126.47264099]
[181.76840210 138.61875916]
[169.22340393 146.84208679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[14 25]
[15 24]
[16 23]
[17 22]
[26 132]
[27 131]
[28 130]
[29 129]
[30 128]
[31 127]
[32 126]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[39 119]
[40 118]
[44 115]
[47 103]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
[55 96]
[56 95]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 83]
[64 82]
[65 81]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
