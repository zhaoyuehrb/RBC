%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGACCCCUUCGCUUCCGCUCCGCGUUCCCACAAUGCAGUGCGGCUGAGCGCCUCGGAGCCCGCGGGGACGCUGCGGGGGGACCCGUGCUGAGGCGGCGGCGGCGACGUGGGCUGCGGCGGGCCCGCGGCGUCGGGCGGUGCGG\
) } def
/len { sequence length } bind def

/coor [
[99.20532227 223.10282898]
[98.24426270 208.13365173]
[97.28321075 193.16447449]
[96.32215881 178.19528198]
[95.36110687 163.22610474]
[91.76830292 156.70635986]
[94.54293823 147.92739868]
[93.90199280 132.94110107]
[93.26104736 117.95480347]
[87.34767914 113.34155273]
[80.72534943 126.80055237]
[78.83196259 141.68057251]
[66.46478271 150.16897583]
[51.89900208 146.58593750]
[44.88097000 133.32896423]
[50.10662460 119.26864624]
[64.07762146 113.81301880]
[75.52094269 104.11505127]
[69.60757446 99.50180054]
[54.91566849 102.52634430]
[40.22375870 105.55088806]
[28.26715660 115.91188049]
[14.24117661 110.89978027]
[2.28457236 121.26077271]
[-11.74140739 116.24867249]
[-26.43331528 119.27321625]
[-41.12522125 122.29776001]
[-55.81713104 125.32229614]
[-70.50903320 128.34684753]
[-80.49813843 140.90061951]
[-96.54068756 140.77389526]
[-106.33022308 128.06387329]
[-102.35704041 112.52059937]
[-87.66902924 106.06754303]
[-73.53357697 113.65493774]
[-58.84167099 110.63039398]
[-44.14976501 107.60585022]
[-29.45785713 104.58130646]
[-14.76594925 101.55676270]
[-3.86020875 91.41210938]
[11.21663380 96.20787048]
[22.12237549 86.06321716]
[37.19921875 90.85897827]
[51.89112473 87.83444214]
[66.58303070 84.80989838]
[76.30645752 73.38820648]
[76.94740295 58.40190887]
[77.58834839 43.41560745]
[78.22929382 28.42930794]
[70.07612610 18.37524796]
[70.96029663 5.86380005]
[79.85822296 -2.39622712]
[80.81928253 -17.36540794]
[81.78033447 -32.33459091]
[82.74138641 -47.30376816]
[83.70243835 -62.27294922]
[84.66349030 -77.24213409]
[85.62454987 -92.21131134]
[86.58560181 -107.18049622]
[84.43362427 -111.13772583]
[83.76636505 -115.16576385]
[84.41640472 -118.77585602]
[86.07105255 -121.58793640]
[88.32212067 -123.36951447]
[90.55775452 -138.20198059]
[92.79338837 -153.03443909]
[95.02902222 -167.86689758]
[97.26465607 -182.69937134]
[99.50028992 -197.53182983]
[90.38672638 -210.16435242]
[92.86527252 -225.17472839]
[104.96462250 -233.78527832]
[99.37055206 -248.58448792]
[108.91832733 -260.01641846]
[111.15396118 -274.84887695]
[107.53585815 -291.41226196]
[122.45034790 -299.47418213]
[134.32592773 -287.37432861]
[125.98642731 -272.61325073]
[123.75079346 -257.78079224]
[129.50477600 -244.04249573]
[119.79708099 -231.54963684]
[128.82089233 -219.75529480]
[126.76493073 -204.68122864]
[114.33275604 -195.29618835]
[112.09712219 -180.46372986]
[109.86148834 -165.63127136]
[107.62585449 -150.79881287]
[105.39022064 -135.96633911]
[103.15458679 -121.13388062]
[101.55477905 -106.21943665]
[100.59372711 -91.25025940]
[99.63267517 -76.28108215]
[98.67162323 -61.31189728]
[97.71056366 -46.34271622]
[96.74951172 -31.37353516]
[95.78845978 -16.40435410]
[94.82740784 -1.43517399]
[103.46055603 13.80870342]
[93.21559906 29.07025337]
[92.57465363 44.05655289]
[91.93370819 59.04285431]
[91.29275513 74.02915192]
[126.32718658 94.88929749]
[140.16999817 100.66654968]
[154.01280212 106.44380188]
[167.85560608 112.22105408]
[183.57118225 110.39579773]
[192.33656311 122.43810272]
[206.17938232 128.21534729]
[220.02218628 133.99259949]
[233.86499023 139.76985168]
[247.70780945 145.54710388]
[261.55059814 151.32435608]
[275.39343262 157.10160828]
[289.23623657 162.87886047]
[303.75646973 156.63879395]
[318.40505981 162.57128906]
[324.49124146 177.15667725]
[318.40423584 191.74172974]
[303.75531006 197.67338562]
[289.23541260 191.43249512]
[283.45898438 176.72167969]
[269.61618042 170.94442749]
[255.77336121 165.16717529]
[241.93055725 159.38992310]
[228.08773804 153.61267090]
[214.24493408 147.83541870]
[200.40213013 142.05816650]
[186.55931091 136.28091431]
[171.83387756 138.51939392]
[162.07835388 126.06386566]
[148.23554993 120.28661346]
[134.39274597 114.50936127]
[120.54993439 108.73210907]
[108.24735260 117.31385803]
[108.88829803 132.30015564]
[109.52924347 147.28645325]
[110.33028412 162.26504517]
[111.29134369 177.23423767]
[112.25239563 192.20341492]
[113.21344757 207.17259216]
[114.17449951 222.14176941]
[123.71250153 235.48188782]
[116.68321228 250.29812622]
[100.31775665 251.34883118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[4 140]
[5 139]
[7 138]
[8 137]
[9 136]
[19 45]
[20 44]
[21 43]
[23 41]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[46 103]
[47 102]
[48 101]
[49 100]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[72 82]
[74 80]
[75 79]
[104 135]
[105 134]
[106 133]
[107 132]
[109 130]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
