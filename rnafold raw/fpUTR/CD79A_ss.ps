%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACUCACAGCCUGAAGCAUACCCGGCAGGGGCUGUCCCCAGGCCCAACAAGCAAAGGGCCCAGUAGCGAGGGCCACUGGAGCCCAUCUCCGGGGGGCUGGGCAGGAAGUAGGGUGGGGUUUGGGGUAGGGAUCUGGUACCCUGGGACUGCUGCAACUCAAACUAACCAACCCACUGGGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[66.87342834 96.61609650]
[81.87407684 96.74429321]
[68.40700531 90.13838196]
[54.93993759 83.53246307]
[41.47286987 76.92655182]
[28.00580215 70.32064056]
[14.53873348 63.71472931]
[1.01635873 57.22278214]
[-12.56035900 50.84526443]
[-27.26912498 55.97263718]
[-40.94699860 49.31151962]
[-45.74451828 35.25735855]
[-59.32123566 28.87984276]
[-72.89794922 22.50232315]
[-86.47467041 16.12480545]
[-106.44702148 18.74997520]
[-116.83243561 2.45455003]
[-130.61680603 -3.46078777]
[-144.40116882 -9.37612534]
[-156.26364136 -2.96916223]
[-169.45687866 -4.54811621]
[-179.18302917 -13.31280518]
[-182.03549194 -25.89135933]
[-195.71798706 -32.03866196]
[-209.40048218 -38.18597031]
[-223.08297729 -44.33327484]
[-236.76547241 -50.48057938]
[-245.89801025 -51.14688873]
[-250.62577820 -56.84899139]
[-264.20248413 -63.22650909]
[-279.13781738 -64.61795044]
[-293.65896606 -60.85816574]
[-308.18014526 -57.09837723]
[-322.70129395 -53.33858871]
[-337.22244263 -49.57880020]
[-343.78683472 -35.38575363]
[-357.96051025 -28.77958107]
[-373.05105591 -32.87952042]
[-381.93319702 -45.74970627]
[-380.41305542 -61.31322479]
[-369.20837402 -72.22146606]
[-353.60971069 -73.32388306]
[-340.98223877 -64.09996033]
[-326.46109009 -67.85974884]
[-311.93991089 -71.61953735]
[-297.41876221 -75.37931824]
[-282.89761353 -79.13910675]
[-280.65237427 -86.29515076]
[-295.19842529 -89.95744324]
[-309.74447632 -93.61973572]
[-324.61340332 -91.64088440]
[-334.27157593 -103.11780548]
[-329.78158569 -117.43004608]
[-315.29837036 -121.33342743]
[-304.22396851 -111.21488953]
[-290.19296265 -105.91106415]
[-276.16192627 -100.60724640]
[-273.91671753 -107.76329041]
[-283.68731689 -119.14466095]
[-293.45788574 -130.52603149]
[-303.22848511 -141.90740967]
[-313.09481812 -153.20585632]
[-323.05624390 -164.42057800]
[-333.01766968 -175.63531494]
[-342.97909546 -186.85003662]
[-352.94052124 -198.06477356]
[-367.88992310 -203.24415588]
[-370.55725098 -217.89797974]
[-380.51864624 -229.11270142]
[-396.24279785 -233.76930237]
[-399.80850220 -249.77609253]
[-387.54769897 -260.66668701]
[-372.07324219 -255.23774719]
[-369.30392456 -239.07412720]
[-359.34249878 -227.85939026]
[-345.10562134 -223.48216248]
[-341.72576904 -208.02618408]
[-331.76437378 -196.81146240]
[-321.80294800 -185.59672546]
[-311.84152222 -174.38200378]
[-301.88009644 -163.16728210]
[-295.07250977 -160.24792480]
[-291.84710693 -151.67799377]
[-282.07650757 -140.29661560]
[-272.30593872 -128.91525269]
[-262.53533936 -117.53387451]
[-252.72621155 -102.49266052]
[-251.85768127 -87.51614380]
[-257.82498169 -76.80322266]
[-244.24826050 -70.42570496]
[-230.61816406 -64.16307068]
[-216.93566895 -58.01576614]
[-203.25317383 -51.86846161]
[-189.57069397 -45.72115707]
[-175.88819885 -39.57385254]
[-160.44837952 -46.21612930]
[-144.66699219 -39.51430130]
[-138.48583984 -23.16049194]
[-124.70146942 -17.24515533]
[-110.91709900 -11.32981682]
[-101.78179932 -15.96724033]
[-91.38523102 -14.77412701]
[-83.20097351 -7.90536356]
[-80.09715271 2.54808784]
[-66.52043152 8.92560577]
[-52.94371796 15.30312443]
[-39.36700058 21.68064308]
[-25.48715210 16.39997673]
[-11.62757969 22.67428207]
[-6.18284082 37.26854706]
[7.39387703 43.64606476]
[14.80101776 43.64421082]
[21.14464569 50.24766159]
[34.61171341 56.85357285]
[48.07878113 63.45948410]
[61.54584885 70.06539917]
[75.01291656 76.67131042]
[88.47998810 83.27722168]
[130.59690857 69.92530823]
[145.54345703 71.19057465]
[160.48999023 72.45584106]
[175.43653870 73.72110748]
[190.38307190 74.98637390]
[205.32962036 76.25163269]
[220.27615356 77.51689911]
[235.22270203 78.78216553]
[250.18847656 79.79481506]
[265.16921997 80.55455017]
[280.14996338 81.31429291]
[295.13073730 82.07402802]
[309.30508423 75.04562378]
[321.62411499 83.41761780]
[335.79846191 76.38922119]
[348.11752319 84.76121521]
[363.09826660 85.52095032]
[378.07901001 86.28068542]
[392.25335693 79.25228882]
[404.57241821 87.62428284]
[417.39257812 77.97946167]
[432.88983154 82.12859344]
[439.17596436 96.88881683]
[431.42880249 110.93734741]
[415.59133911 113.49736023]
[403.81268311 102.60502625]
[390.70983887 109.68777466]
[377.31927490 101.26143646]
[362.33853149 100.50170135]
[347.35778809 99.74195862]
[334.25494385 106.82470703]
[320.86437988 98.39836884]
[307.76156616 105.48110962]
[294.37097168 97.05477142]
[279.39022827 96.29503632]
[264.40948486 95.53530121]
[249.42874146 94.77555847]
[245.33319092 97.27072906]
[239.62300110 97.20452118]
[233.95742798 93.72870636]
[219.01089478 92.46343994]
[204.06434631 91.19818115]
[189.11781311 89.93291473]
[174.17126465 88.66764832]
[159.22473145 87.40238190]
[144.27818298 86.13711548]
[129.33164978 84.87184906]
[124.74085236 90.80266571]
[139.60414124 92.82324982]
[145.28599548 106.70548248]
[136.10461426 118.56729126]
[121.24129486 116.54698181]
[115.55925751 102.66429901]
[110.96846771 108.59512329]
[115.93972778 122.74738312]
[120.91099548 136.89964294]
[131.86499023 149.83975220]
[122.46295166 163.94783020]
[106.30347443 158.81874084]
[106.75872803 141.87091064]
[101.78746796 127.71864319]
[96.81620026 113.56638336]
[95.17461395 128.47628784]
[84.74974060 139.26155090]
[69.90421295 141.40872192]
[56.85064697 134.01922607]
[51.05175018 120.18547821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 118]
[3 117]
[4 116]
[5 115]
[6 114]
[7 113]
[8 111]
[9 110]
[12 107]
[13 106]
[14 105]
[15 104]
[17 100]
[18 99]
[19 98]
[23 95]
[24 94]
[25 93]
[26 92]
[27 91]
[29 90]
[30 89]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[58 86]
[59 85]
[60 84]
[61 83]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[68 75]
[69 74]
[119 165]
[120 164]
[121 163]
[122 162]
[123 161]
[124 160]
[125 159]
[126 158]
[127 155]
[128 154]
[129 153]
[130 152]
[132 150]
[134 148]
[135 147]
[136 146]
[138 144]
[172 180]
[173 179]
[174 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
