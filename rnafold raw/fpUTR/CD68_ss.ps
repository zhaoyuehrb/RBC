%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAUUACAAAAACUAAUGACUAAGAGAGAGGUGGCUAGAGCUGAGGCCCCUGAGUCAGGCUGUGGGUGGGAUCAUCUCCAGUACAGGAAGUGAGACUUUCAUUUCCUCCUUUCCAAGAGAGGGCUGAGGGAGCAGGGUUGAGCAACUGGUGCAGACAGCCUAGCUGGACUUUGGGUGAGGCGGUUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[-82.16165161 438.19091797]
[-74.85377502 451.33496094]
[-69.93954468 465.54840088]
[-67.56829834 480.39926147]
[-67.81208801 495.43627930]
[-70.66351318 510.20245361]
[-76.03591156 524.24914551]
[-83.76603699 537.14935303]
[-93.61896515 548.51116943]
[-105.29528809 557.98931885]
[-118.44016266 565.29565430]
[-132.65414429 570.20831299]
[-147.50527954 572.57788086]
[-162.54226685 572.33233643]
[-177.30813599 569.47924805]
[-191.35418701 564.10528564]
[-204.25355530 556.37371826]
[-215.61424255 546.51947021]
[-225.09103394 534.84210205]
[-232.39593506 521.69635010]
[-237.30694580 507.48181152]
[-239.67481995 492.63043213]
[-239.42762756 477.59347534]
[-236.57284546 462.82791138]
[-231.19726562 448.78247070]
[-223.46421814 435.88400269]
[-213.60870361 424.52441406]
[-201.93023682 415.04895020]
[-188.78369141 407.74554443]
[-174.56860352 402.83615112]
[-159.71693420 400.46994019]
[-144.68000793 400.71887207]
[-129.91477966 403.57531738]
[-115.86995697 408.95248413]
[-108.15841675 396.08654785]
[-100.44686890 383.22061157]
[-92.73532867 370.35470581]
[-91.99200439 362.98931885]
[-84.79089355 357.34280396]
[-76.86987305 344.60476685]
[-68.94886017 331.86676025]
[-61.02783966 319.12872314]
[-53.10682297 306.39068604]
[-45.18580627 293.65264893]
[-50.41541672 276.12149048]
[-41.02309799 260.05142212]
[-22.55972672 255.86289978]
[-15.05972576 242.87252808]
[-7.55972576 229.88214111]
[-0.05972585 216.89175415]
[-2.88621974 205.11968994]
[3.26928592 194.23156738]
[15.57774353 190.34103394]
[23.28928375 177.47509766]
[31.00082588 164.60917664]
[38.71236801 151.74324036]
[46.42390823 138.87731934]
[54.02993393 125.94873047]
[61.52993393 112.95835114]
[59.45043945 98.10318756]
[48.67171478 87.67155457]
[37.89299011 77.23991394]
[27.11426544 66.80827332]
[11.81686687 62.77092361]
[8.05213165 48.35995483]
[-2.72659230 37.92831802]
[-13.50531673 27.49667740]
[-24.28404045 17.06503677]
[-35.06276321 6.63339806]
[-51.09326172 3.17576909]
[-55.85584641 -12.51657963]
[-44.45117950 -24.30070686]
[-28.61140633 -20.05410957]
[-24.63112640 -4.14532614]
[-13.85240173 6.28631306]
[-3.07367706 16.71795273]
[7.70504713 27.14959145]
[18.48377228 37.58123016]
[33.01020432 40.87243652]
[37.54590607 56.02954865]
[48.32463074 66.46118927]
[59.10335541 76.89282990]
[69.88208008 87.32446289]
[69.66727448 71.88591766]
[77.14872742 55.48322296]
[92.67024994 41.73870850]
[93.16103363 26.74673843]
[93.65182495 11.75477028]
[94.14260864 -3.23719859]
[94.63339233 -18.22916794]
[95.12418365 -33.22113800]
[95.61496735 -48.21310425]
[96.10575104 -63.20507431]
[96.59654236 -78.19704437]
[86.72322083 -90.84208679]
[90.59358215 -106.41127777]
[105.23861694 -112.96127319]
[119.42391205 -105.46747589]
[122.26771545 -89.67847443]
[111.58850861 -77.70625305]
[111.09772491 -62.71428680]
[110.60693359 -47.72232056]
[110.11614990 -32.73035049]
[109.62536621 -17.73838043]
[109.13457489 -2.74641252]
[108.64379120 12.24555683]
[108.15300751 27.23752594]
[107.66221619 42.22949219]
[121.78537750 47.28284073]
[130.91679382 35.38254166]
[140.04821777 23.48224068]
[149.17964172 11.58194160]
[158.31106567 -0.31835857]
[167.44248962 -12.21865845]
[172.28785706 -28.46546555]
[189.24105835 -28.30701828]
[193.78192139 -11.97248745]
[179.34278870 -3.08723736]
[170.21136475 8.81306267]
[161.07994080 20.71336365]
[151.94851685 32.61366272]
[142.81710815 44.51396179]
[133.68568420 56.41426468]
[143.39001465 67.85217285]
[156.61883545 60.78121948]
[169.84765625 53.71026993]
[175.86192322 38.83720016]
[191.28042603 34.40443802]
[204.27540588 43.81241608]
[204.87823486 59.84413910]
[192.62646484 70.20143890]
[176.91860962 66.93908691]
[163.68978882 74.01004028]
[150.46096802 81.08099365]
[151.68269348 88.48081207]
[155.34783936 110.68029022]
[170.14749146 113.12372589]
[184.94714355 115.56715393]
[199.74678040 118.01058960]
[214.54643250 120.45401764]
[229.34608459 122.89745331]
[247.85673523 114.94164276]
[262.27661133 127.80996704]
[277.14828491 129.76786804]
[292.01995850 131.72575378]
[305.57186890 123.13941193]
[320.68673706 128.51718140]
[325.76971436 143.73371887]
[316.92160034 157.11618042]
[300.92990112 158.39869690]
[290.06207275 146.59742737]
[275.19039917 144.63954163]
[260.31872559 142.68164062]
[252.78810120 149.61741638]
[242.46499634 151.28974915]
[232.72889709 146.90606689]
[226.90264893 137.69709778]
[212.10301208 135.25366211]
[197.30335999 132.81024170]
[182.50370789 130.36680603]
[167.70405579 127.92337036]
[152.90440369 125.47994232]
[121.76000214 145.06025696]
[90.88588715 140.34115601]
[74.52031708 120.45835114]
[67.02031708 133.44873047]
[65.43511963 142.46128845]
[59.28983688 146.58885193]
[51.57829666 159.45478821]
[43.86675644 172.32070923]
[36.15521240 185.18664551]
[28.44367218 198.05258179]
[28.57658958 216.45883179]
[12.93065548 224.39175415]
[5.43065500 237.38214111]
[-2.06934476 250.37252808]
[-9.56934452 263.36291504]
[-4.30928230 274.04583740]
[-4.86119080 285.82061768]
[-10.97183514 295.76028442]
[-21.02062607 301.45001221]
[-32.44777298 301.57366943]
[-40.36878967 314.31170654]
[-48.28980637 327.04974365]
[-56.21082687 339.78775024]
[-64.13184357 352.52578735]
[-72.05286407 365.26382446]
[-79.86940002 378.06622314]
[-87.58094025 390.93215942]
[-95.29248047 403.79809570]
[-103.00402832 416.66403198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 191]
[35 190]
[36 189]
[37 188]
[39 187]
[40 186]
[41 185]
[42 184]
[43 183]
[44 182]
[47 177]
[48 176]
[49 175]
[50 174]
[53 172]
[54 171]
[55 170]
[56 169]
[57 168]
[58 166]
[59 165]
[60 83]
[61 82]
[62 81]
[63 80]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[86 108]
[87 107]
[88 106]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
[124 134]
[125 133]
[126 132]
[136 162]
[137 161]
[138 160]
[139 159]
[140 158]
[141 157]
[143 153]
[144 152]
[145 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
