%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGCGGAGGAGGAGGAGAGACGAGGGCAGCGGAGGAGGCGAGGAGCGCCGGGUACCGGGCCGGGGGAGCCGCGGGCUCUCGGGGAAGAGACGG\
) } def
/len { sequence length } bind def

/coor [
[36.10389709 457.29763794]
[21.76359749 461.81491089]
[6.87534237 463.91006470]
[-8.15470505 463.52597046]
[-22.91651535 460.67312622]
[-37.00737762 455.42932129]
[-50.04287720 447.93762207]
[-61.66740036 438.40240479]
[-71.56381989 427.08380127]
[-79.46215820 414.29058838]
[-85.14694214 400.37179565]
[-88.46307373 385.70709229]
[-89.32010651 370.69659424]
[-87.69464874 355.74975586]
[-83.63104248 341.27438354]
[-77.24015045 327.66531372]
[-68.69631958 315.29385376]
[-58.23263550 304.49752808]
[-46.13454819 295.57080078]
[-32.73210526 288.75726318]
[-18.39093781 284.24276733]
[-3.50227928 282.15045166]
[11.52769470 282.53744507]
[26.28895569 285.39312744]
[31.52057076 271.33502197]
[36.75218582 257.27694702]
[41.98380280 243.21884155]
[47.21541977 229.16073608]
[52.44703674 215.10263062]
[57.67865372 201.04454041]
[53.75823975 184.02340698]
[67.82493591 172.27891541]
[72.59857941 158.05877686]
[77.37222290 143.83863831]
[82.14586639 129.61849976]
[69.76470947 116.78846741]
[65.42006683 99.49607086]
[70.26675415 82.33762360]
[83.01651764 69.87381744]
[100.28047943 65.41753387]
[103.65211487 50.80138016]
[107.02375031 36.18521881]
[98.91043854 22.88815498]
[102.53797150 8.11332321]
[115.26468658 0.46046641]
[118.63632202 -14.15569115]
[114.19895935 -29.34188271]
[124.59904480 -40.00431061]
[127.97068787 -54.62047195]
[120.72018433 -68.93164825]
[127.51927948 -83.46271515]
[143.15229797 -87.06667328]
[155.62690735 -76.97888184]
[155.37367249 -60.93782806]
[142.58683777 -51.24883270]
[139.21520996 -36.63267517]
[143.89373779 -22.49193192]
[133.25248718 -10.78405571]
[129.88084412 3.83210230]
[137.96923828 16.28656006]
[134.75813293 31.15745354]
[121.63990784 39.55685806]
[118.26827240 54.17301559]
[114.89663696 68.78916931]
[124.70030212 75.79420471]
[131.50567627 85.73752594]
[134.48663330 97.41212463]
[133.28137207 109.40086365]
[128.03614807 120.24845123]
[119.38769531 128.63813782]
[108.38581848 133.55149841]
[96.36600494 134.39215088]
[91.59236145 148.61227417]
[86.81871796 162.83241272]
[82.04507446 177.05255127]
[87.10411072 189.05256653]
[82.69465637 200.87654114]
[71.73675537 206.27615356]
[66.50513458 220.33424377]
[61.27352142 234.39234924]
[56.04190445 248.45045471]
[50.81028748 262.50854492]
[45.57867050 276.56665039]
[40.34705734 290.62475586]
[53.38399887 298.11395264]
[65.01036072 307.64691162]
[74.90895844 318.96362305]
[82.80976105 331.75531006]
[88.49722290 345.67300415]
[91.81618500 360.33706665]
[92.67610931 375.34741211]
[91.05352783 390.29455566]
[86.99271393 404.77072144]
[80.60444641 418.38101196]
[72.06299591 430.75408936]
[61.60139084 441.55245972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[30 78]
[32 75]
[33 74]
[34 73]
[35 72]
[40 64]
[41 63]
[42 62]
[45 59]
[46 58]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
