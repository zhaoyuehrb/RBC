%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGCGUACAGGCCCUUCCCGACCGUAGCGAGGGUGCUGCUGCGCUGGGGGAAGGAAAACGCCGCUUUGACUGUGCCUUGUUCUCACAGCUGGCGGGAAGCAAGCGCCUUUUCGAAAGCCAGAGGCUCGAGUUACCCCUCUUACCACCGUC\
) } def
/len { sequence length } bind def

/coor [
[192.27156067 214.27967834]
[206.94322205 217.38464355]
[195.96241760 207.16593933]
[184.98161316 196.94723511]
[174.00080872 186.72851562]
[163.02001953 176.50981140]
[152.03921509 166.29110718]
[141.05841064 156.07240295]
[129.94458008 158.95233154]
[118.71170044 156.05245972]
[110.20618439 147.98722839]
[106.64147186 136.69482422]
[109.02275848 124.97228241]
[98.47074127 114.31137085]
[84.32342529 109.32604980]
[69.41897583 111.01644897]
[54.51453018 112.70684814]
[39.61008072 114.39724731]
[24.70563316 116.08763885]
[9.80118656 117.77803802]
[-5.10326147 119.46843719]
[-13.21360970 134.27796936]
[-28.39281082 141.28657532]
[-44.60069275 137.92259216]
[-55.51607132 125.69947815]
[-70.38266754 127.69553375]
[-85.24926758 129.69158936]
[-100.11586761 131.68765259]
[-114.98246765 133.68370056]
[-129.84906006 135.67976379]
[-137.99691772 139.94686890]
[-145.04103088 137.56092834]
[-159.94548035 139.25132751]
[-172.80424500 149.42895508]
[-187.94586182 143.13107300]
[-189.79393005 126.83638763]
[-176.44732666 117.30748749]
[-161.63587952 124.34688568]
[-146.73143005 122.65648651]
[-131.84512329 120.81316376]
[-116.97852325 118.81710052]
[-102.11192322 116.82104492]
[-87.24532318 114.82498932]
[-72.37872314 112.82893372]
[-57.51212692 110.83287811]
[-52.26959991 98.51751709]
[-41.53080750 90.34774017]
[-28.04814720 88.55239105]
[-15.34470272 93.70892334]
[-6.79365873 104.56398773]
[8.11078835 102.87358856]
[23.01523590 101.18319702]
[37.91968536 99.49279785]
[52.82413101 97.80239868]
[67.72857666 96.11199951]
[82.63302612 94.42160034]
[67.84077454 91.93375397]
[58.53543472 80.16895294]
[59.52136230 65.20139313]
[70.28952789 54.75885391]
[85.28030396 54.23284531]
[96.75391388 63.89494705]
[98.78604126 78.75859070]
[100.93462372 63.91326904]
[103.08320618 49.06794357]
[105.23178101 34.22262192]
[107.38036346 19.37729836]
[100.28460693 8.55815220]
[102.41971588 -3.79549742]
[112.09534454 -11.11973095]
[110.40617371 -20.16088676]
[114.75354767 -26.19516182]
[117.50978851 -40.93975830]
[120.26603699 -55.68435669]
[123.02227783 -70.42895508]
[125.77851868 -85.17354584]
[114.48347473 -95.68190765]
[110.68487549 -110.63430023]
[115.59482574 -125.25948334]
[127.64659119 -134.89060974]
[142.99449158 -136.45440674]
[156.74107361 -129.45190430]
[164.49983215 -116.11754608]
[163.79501343 -100.70629120]
[154.85148621 -88.13581848]
[140.52311707 -82.41730499]
[137.76687622 -67.67270660]
[135.01063538 -52.92811203]
[132.25439453 -38.18351746]
[129.49813843 -23.43891907]
[126.89342499 -8.66680336]
[133.95680237 7.36919641]
[122.22568512 21.52587891]
[120.07710266 36.37120056]
[117.92852783 51.21652222]
[115.77994537 66.06184387]
[113.63137054 80.90716553]
[116.38219452 88.41698456]
[116.01774597 95.39203644]
[113.25107574 100.73236084]
[109.13165283 103.75936127]
[119.68366241 114.42026520]
[138.56875610 113.75589752]
[151.76246643 126.83669281]
[151.27711487 145.09159851]
[162.25791931 155.31030273]
[173.23872375 165.52900696]
[184.21952820 175.74772644]
[195.20031738 185.96643066]
[206.18112183 196.18513489]
[217.16192627 206.40383911]
[230.15231323 213.90383911]
[244.49237061 218.30413818]
[258.83242798 222.70443726]
[273.17248535 227.10473633]
[287.51254272 231.50503540]
[294.12930298 230.38194275]
[299.48947144 232.49295044]
[302.34426880 236.39158630]
[316.49157715 241.37690735]
[330.63891602 246.36222839]
[347.58718872 245.92381287]
[352.70022583 262.08837891]
[338.58279419 271.47637939]
[325.65359497 260.50955200]
[311.50625610 255.52423096]
[297.35894775 250.53890991]
[283.11224365 245.84510803]
[268.77218628 241.44480896]
[254.43212891 237.04450989]
[240.09207153 232.64419556]
[225.75201416 228.24389648]
[235.77876282 239.40025330]
[242.64103699 252.73852539]
[245.88819885 267.38284302]
[245.30703735 282.37158203]
[240.93571472 296.72048950]
[233.06127930 309.48736572]
[222.20080566 319.83386230]
[209.06744385 327.08056641]
[194.52359009 330.75161743]
[179.52430725 330.60598755]
[165.05448914 326.65316772]
[152.06433105 319.15280151]
[141.40681458 308.59735107]
[133.78178406 295.67996216]
[129.68994141 281.24887085]
[129.39996338 266.25167847]
[132.93090820 251.67317200]
[140.05088806 238.47068787]
[150.29240417 227.51113892]
[162.98292542 219.51422119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[5 108]
[6 107]
[7 106]
[8 105]
[13 102]
[14 101]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[32 39]
[33 38]
[63 97]
[64 96]
[65 95]
[66 94]
[67 93]
[70 91]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[112 132]
[113 131]
[114 130]
[115 129]
[116 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
