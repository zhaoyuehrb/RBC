%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCACGCGCGCAUUGCGGACGCCAGCUAGACCGAGCCCUGGGAGGCUACGGGCUCCCCCGGAAACCCUGCCAGGGGAGCCGGGUUUUGAGCUCAGGCGCCUCUAGCGGCGGCCCCCAGAAAUCUGACUCGCGAGGCCAGAGUUGCAGGGACUGAAUAGCAAACUGAGGCUGAGUAGGGAACAGACC\
) } def
/len { sequence length } bind def

/coor [
[88.45886230 211.22381592]
[90.96949005 192.00543213]
[91.21881104 177.00749207]
[91.46813202 162.00956726]
[91.71745300 147.01164246]
[89.37781525 146.53884888]
[87.06472778 145.94969177]
[80.78199768 159.57052612]
[74.49927521 173.19137573]
[68.21654510 186.81221008]
[72.39476013 202.30163574]
[62.77402496 215.13989258]
[46.73454666 215.47859192]
[36.58044052 203.05789185]
[40.10107040 187.40589905]
[54.59570694 180.52949524]
[60.87843323 166.90864563]
[67.16115570 153.28781128]
[73.44388580 139.66696167]
[57.82814407 122.36582184]
[52.26506424 99.73325348]
[58.08073425 77.16427612]
[46.19943237 68.00814819]
[34.31813049 58.85201645]
[22.43683052 49.69588852]
[13.71133232 46.92858887]
[10.43581676 40.28750229]
[-1.29165530 30.93515587]
[-13.01912785 21.58280945]
[-24.74659920 12.23046303]
[-36.47407150 2.87811565]
[-48.20154572 -6.47423124]
[-54.70130920 -7.84172678]
[-58.89358521 -11.71384811]
[-60.15658188 -16.33754921]
[-68.73329163 -19.53634071]
[-71.67370605 -26.33244133]
[-82.92042542 -36.25772858]
[-94.24924469 -46.08920288]
[-105.65937805 -55.82618332]
[-117.06951904 -65.56316376]
[-128.47966003 -75.30014038]
[-139.88978577 -85.03712463]
[-151.29992676 -94.77410126]
[-166.19342041 -86.88240051]
[-182.93833923 -85.31176758]
[-198.96943665 -90.27452850]
[-211.84170532 -100.98428345]
[-219.60322571 -115.78038025]
[-221.09115601 -132.38539124]
[-216.10583496 -148.25559998]
[-231.71937561 -150.81060791]
[-236.84582520 -164.79519653]
[-248.57330322 -174.14753723]
[-260.30078125 -183.49989319]
[-272.02825928 -192.85223389]
[-283.75570679 -202.20457458]
[-295.48318481 -211.55693054]
[-307.21066284 -220.90927124]
[-318.93814087 -230.26162720]
[-334.55166626 -232.81661987]
[-339.67813110 -246.80120850]
[-351.40560913 -256.15356445]
[-366.32708740 -251.89578247]
[-380.88989258 -257.25341797]
[-389.49432373 -270.16635132]
[-388.83178711 -285.66928101]
[-379.15704346 -297.80099487]
[-364.19024658 -301.89666748]
[-349.68640137 -296.38134766]
[-341.22256470 -283.37585449]
[-342.05325317 -267.88104248]
[-330.32577515 -258.52868652]
[-315.55105591 -256.64263916]
[-309.58578491 -241.98908997]
[-297.85830688 -232.63674927]
[-286.13085938 -223.28439331]
[-274.40338135 -213.93205261]
[-262.67590332 -204.57971191]
[-250.94842529 -195.22735596]
[-239.22096252 -185.87501526]
[-227.49348450 -176.52265930]
[-212.71878052 -174.63661194]
[-206.75349426 -159.98307800]
[-195.56520081 -167.13421631]
[-182.69438171 -170.49057007]
[-169.39315796 -169.71107483]
[-156.96000671 -164.85772705]
[-146.61300659 -156.39089966]
[-139.37051392 -145.12573242]
[-135.95092773 -132.15362549]
[-136.70146179 -118.73654938]
[-141.56294250 -106.18424225]
[-130.15281677 -96.44725800]
[-118.74267578 -86.71028137]
[-107.33253479 -76.97329712]
[-95.92240143 -67.23632050]
[-84.51226044 -57.49934006]
[-77.36981964 -55.54524612]
[-72.99514008 -47.50444794]
[-61.74841690 -37.57915878]
[-50.41960144 -27.74768639]
[-38.84919739 -18.20170403]
[-27.12172508 -8.84935665]
[-15.39425278 0.50299042]
[-3.66678047 9.85533714]
[8.06069183 19.20768356]
[19.78816414 28.56003189]
[31.59295845 37.81459045]
[43.47425842 46.97071457]
[55.35556030 56.12684250]
[67.23686218 65.28297424]
[77.05020905 58.14307404]
[88.34687805 53.70853424]
[100.39672852 52.26596832]
[112.42094421 53.90861893]
[123.64234161 58.53031540]
[133.33566284 65.83233643]
[145.36750793 56.87495804]
[157.39935303 47.91757965]
[163.39434814 32.65350342]
[179.64898682 30.48118973]
[189.44187927 43.63532639]
[182.69894409 58.58406448]
[166.35673523 59.94942856]
[154.32489014 68.90680695]
[142.29302979 77.86418915]
[147.45733643 94.85246277]
[146.05560303 112.55294037]
[159.72819519 118.72224426]
[173.40078735 124.89154816]
[187.12417603 130.94700623]
[200.89741516 136.88821411]
[215.43513489 131.29426575]
[229.31852722 137.51568604]
[234.56192017 151.40965271]
[248.33515930 157.35086060]
[262.10839844 163.29205322]
[275.88165283 169.23324585]
[290.41937256 163.63929749]
[304.30276489 169.86071777]
[309.54614258 183.75469971]
[323.31939697 189.69589233]
[337.09262085 195.63708496]
[350.86587524 201.57827759]
[364.68801880 207.40480042]
[378.55810547 213.11625671]
[389.88330078 202.88381958]
[404.52905273 198.58676147]
[419.58743286 201.07827759]
[432.06860352 209.86367798]
[439.49441528 223.19859314]
[440.39044189 238.43539429]
[434.57882690 252.54878235]
[423.21343994 262.73654175]
[408.55087280 266.97589111]
[393.50241089 264.42507935]
[381.05593872 255.59060669]
[373.68267822 242.22654724]
[372.84664917 226.98634338]
[358.97656250 221.27490234]
[351.58044434 221.63587952]
[344.92468262 215.35153198]
[331.15142822 209.41032410]
[317.37817383 203.46913147]
[303.60494995 197.52793884]
[289.90060425 203.24865723]
[275.84793091 197.41964722]
[269.94042969 183.00648499]
[256.16720581 177.06529236]
[242.39396667 171.12409973]
[228.62071228 165.18289185]
[214.91638184 170.90362549]
[200.86372375 165.07461548]
[194.95622253 150.66145325]
[181.18296814 144.72026062]
[173.78187561 144.95825195]
[167.23147583 138.56413269]
[153.55888367 132.39483643]
[139.88630676 126.22552490]
[134.88737488 132.58169556]
[128.88729858 138.00288391]
[122.05827332 142.33352661]
[114.59626007 145.44935608]
[106.71538544 147.26097107]
[106.46606445 162.25889587]
[106.21674347 177.25682068]
[105.96742249 192.25474548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 188]
[3 187]
[4 186]
[5 185]
[7 19]
[8 18]
[9 17]
[10 16]
[22 112]
[23 111]
[24 110]
[25 109]
[27 108]
[28 107]
[29 106]
[30 105]
[31 104]
[32 103]
[35 102]
[37 101]
[38 100]
[39 98]
[40 97]
[41 96]
[42 95]
[43 94]
[44 93]
[51 84]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[62 73]
[63 72]
[118 127]
[119 126]
[120 125]
[129 180]
[130 179]
[131 178]
[132 176]
[133 175]
[136 172]
[137 171]
[138 170]
[139 169]
[142 166]
[143 165]
[144 164]
[145 163]
[146 161]
[147 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
