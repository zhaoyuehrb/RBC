%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAUUGGGGGUCCCAGCCUGCGUCCCGUCAGUCCCUUCUUGGCCCGGAGUGCGCGGAGCUGGGAGUGGCUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[-3.18334436 205.74807739]
[-14.51958752 215.57098389]
[-25.85583115 225.39390564]
[-30.46009064 233.61827087]
[-37.86065292 235.37475586]
[-49.58812714 244.72709656]
[-61.31559753 254.07945251]
[-73.04306793 263.43179321]
[-84.77054596 272.78414917]
[-93.38424683 287.38690186]
[-109.80082703 283.15228271]
[-110.27625275 266.20498657]
[-94.12288666 261.05667114]
[-82.39541626 251.70433044]
[-70.66794586 242.35197449]
[-58.94047165 232.99963379]
[-47.21300125 223.64727783]
[-35.67874146 214.05766296]
[-24.34249878 204.23474121]
[-13.00625515 194.41183472]
[-2.08010840 184.13470459]
[8.41775608 173.42047119]
[18.91562080 162.70623779]
[16.30025482 151.26377869]
[19.69453621 139.90066528]
[28.33282661 131.59869385]
[40.05748749 128.59770203]
[51.85702515 131.79220581]
[63.19326782 121.96929169]
[74.52951050 112.14638519]
[85.86575317 102.32347107]
[90.61981201 89.17468262]
[104.31133270 86.34028625]
[115.64757538 76.51737213]
[126.98381805 66.69446564]
[138.32006836 56.87155151]
[139.59950256 41.34735107]
[151.23599243 31.54701233]
[166.02806091 32.86243439]
[177.36430359 23.03952217]
[188.70054626 13.21661091]
[194.06317139 -1.66804123]
[208.74865723 -4.15517044]
[220.08489990 -13.97808170]
[225.44752502 -28.86273384]
[240.13301086 -31.34986305]
[242.70710754 -47.18506241]
[256.76251221 -54.91971207]
[271.51715088 -48.62045288]
[275.65249634 -33.11953354]
[265.99627686 -20.30793381]
[249.95591736 -20.01362038]
[245.40414429 -5.83156729]
[229.90780640 -2.64183784]
[218.57156372 7.18107319]
[214.01979065 21.36312485]
[198.52346802 24.55285454]
[187.18722534 34.37576675]
[175.85098267 44.19867706]
[175.04788208 59.02738571]
[163.69123840 69.15070343]
[148.14297485 68.20779419]
[136.80673218 78.03070831]
[125.47048950 87.85361481]
[114.13424683 97.67652893]
[109.38018799 110.82531738]
[95.68866730 113.65971375]
[84.35242462 123.48262787]
[73.01618195 133.30554199]
[61.67993546 143.12844849]
[61.24050140 161.84063721]
[47.69096375 174.29785156]
[29.62985611 173.20410156]
[19.13199234 183.91833496]
[8.63412666 194.63256836]
[6.48151207 201.37393188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[21 75]
[22 74]
[23 73]
[28 70]
[29 69]
[30 68]
[31 67]
[33 65]
[34 64]
[35 63]
[36 62]
[39 59]
[40 58]
[41 57]
[43 55]
[44 54]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
