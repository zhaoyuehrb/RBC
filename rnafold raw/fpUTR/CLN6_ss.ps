%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGCAGCCCCGCCUGUUCCUCCCGAGGGCCGCGCGCUCUCGCCGGCCCGCCCCGAACCGCCCCGCGCUGGGAAUUUGCGGCGGCCUCCGCCGGGGCAGCCGAGCUGAACCGGUCUCUUCCUCGGAAAGGCAGGGCCGAGGGGCCUGCGGGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[-5.16473436 599.32562256]
[-20.94126701 598.38934326]
[-31.37230682 586.51635742]
[-30.26930428 570.75061035]
[-18.28664970 560.44567871]
[-17.39804077 545.47198486]
[-24.36778069 532.30871582]
[-15.82653809 518.99114990]
[-14.93792915 504.01748657]
[-14.04931927 489.04382324]
[-13.16071033 474.07019043]
[-12.27210045 459.09652710]
[-11.38349152 444.12286377]
[-10.49488163 429.14920044]
[-20.54577065 418.21691895]
[-19.85789871 403.01882935]
[-8.32294655 392.55065918]
[-7.43433714 377.57699585]
[-6.54572773 362.60336304]
[-5.65711832 347.62969971]
[-4.76850891 332.65603638]
[-3.87989926 317.68237305]
[-2.99128985 302.70870972]
[-16.52321053 305.43426514]
[-27.00863075 298.50808716]
[-41.62306976 301.88717651]
[-56.23750687 305.26623535]
[-70.85194397 308.64532471]
[-85.46638489 312.02441406]
[-100.08082581 315.40347290]
[-114.69526672 318.78256226]
[-124.37774658 331.57431030]
[-140.41867065 331.83572388]
[-150.51281738 319.36624146]
[-146.91680908 303.73141479]
[-132.38920593 296.92489624]
[-118.07434082 304.16812134]
[-103.45990753 300.78903198]
[-88.84546661 297.40997314]
[-74.23102570 294.03088379]
[-59.61658859 290.65179443]
[-45.00214767 287.27273560]
[-30.38770866 283.89364624]
[-22.55809784 272.91876221]
[-8.23519421 271.53692627]
[2.87199998 282.05581665]
[9.98375797 268.84887695]
[17.09551620 255.64195251]
[24.20727348 242.43502808]
[31.31903267 229.22810364]
[38.29997253 215.95156860]
[45.14941025 202.60670471]
[51.99884796 189.26185608]
[58.44982529 175.71987915]
[64.49668121 161.99270630]
[70.54352570 148.26551819]
[76.59037781 134.53833008]
[62.30545425 117.88932037]
[58.44064331 96.29506683]
[66.06432343 75.72498322]
[83.06903076 61.86538315]
[79.54573822 47.28504181]
[76.02245331 32.70469666]
[72.35529327 18.15987206]
[68.54462433 3.65198374]
[64.73395538 -10.85590363]
[60.92328262 -25.36379051]
[57.11261368 -39.87167740]
[42.40970993 -44.54373550]
[32.58435059 -56.43767929]
[30.77177238 -71.75819397]
[37.55036163 -85.61655426]
[50.75709915 -93.59061432]
[66.17775726 -93.13587952]
[78.89167023 -84.39745331]
[84.84185791 -70.16373444]
[82.12965393 -54.97665024]
[71.62050629 -43.68234634]
[75.43117523 -29.17446136]
[79.24184418 -14.66657257]
[83.05251312 -0.15868536]
[86.86318207 14.34920216]
[91.62947845 20.05002403]
[90.60279083 29.18140602]
[94.12608337 43.76174927]
[97.64937592 58.34209442]
[104.35178375 58.50339127]
[110.94183350 59.73608398]
[117.24937439 62.00834656]
[123.11155701 65.26151276]
[128.37702942 69.41159058]
[140.38917542 60.42781448]
[152.40133667 51.44404221]
[164.41348267 42.46026993]
[176.42564392 33.47650146]
[178.81622314 18.08419991]
[191.12622070 9.14449501]
[205.78570557 11.51840115]
[217.79785156 2.53462958]
[229.81001282 -6.44914246]
[241.82215881 -15.43291378]
[250.88504028 -29.76122856]
[267.16226196 -25.01900291]
[267.11132812 -8.06513214]
[250.80593872 -3.42075992]
[238.79377747 5.56301165]
[226.78163147 14.54678345]
[214.76947021 23.53055573]
[212.90393066 38.26335526]
[200.84988403 47.54529572]
[185.40940857 45.48865509]
[173.39726257 54.47242737]
[161.38510132 63.45619583]
[149.37295532 72.43997192]
[137.36079407 81.42374420]
[141.06407166 92.60754395]
[141.49356079 104.38070679]
[138.61503601 115.80462646]
[132.65795898 125.96852875]
[124.09725952 134.06213379]
[113.61544037 139.44015503]
[102.04814911 141.67387390]
[90.31756592 140.58518982]
[84.27071381 154.31236267]
[78.22386169 168.03955078]
[72.17700958 181.76673889]
[72.76210785 187.06109619]
[71.36496735 191.58003235]
[68.62555695 194.69035339]
[65.34370422 196.11129761]
[58.49426651 209.45614624]
[51.64482880 222.80101013]
[50.49795151 231.91807556]
[44.52595901 236.33985901]
[37.41419983 249.54678345]
[30.30244255 262.75372314]
[23.19068336 275.96063232]
[16.07892609 289.16757202]
[11.98236656 303.59732056]
[11.09375668 318.57098389]
[10.20514774 333.54464722]
[9.31653786 348.51831055]
[8.42792797 363.49194336]
[7.53931904 378.46560669]
[6.65070963 393.43927002]
[16.86659622 405.19824219]
[15.75211430 420.37100220]
[4.47877407 430.03781128]
[3.59016466 445.01147461]
[2.70155525 459.98513794]
[1.81294584 474.95880127]
[0.92433637 489.93243408]
[0.03572695 504.90609741]
[-0.85288244 519.87976074]
[6.05329800 534.11407471]
[-2.42438483 546.36059570]
[-3.31299424 561.33428955]
[7.36675787 572.98406982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 157]
[6 156]
[8 154]
[9 153]
[10 152]
[11 151]
[12 150]
[13 149]
[14 148]
[17 145]
[18 144]
[19 143]
[20 142]
[21 141]
[22 140]
[23 139]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[46 138]
[47 137]
[48 136]
[49 135]
[50 134]
[51 132]
[52 131]
[53 130]
[54 126]
[55 125]
[56 124]
[57 123]
[61 86]
[62 85]
[63 84]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[91 115]
[92 114]
[93 113]
[94 112]
[95 111]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
