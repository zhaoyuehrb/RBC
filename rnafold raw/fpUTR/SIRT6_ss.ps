%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGCUUCCGGCGGAAGCGGCCUCAACAAGGGAAACUUUAUUGUUCCCGUGGGGCAGUCGAGG\
) } def
/len { sequence length } bind def

/coor [
[50.15664291 238.62623596]
[39.33193207 228.24232483]
[33.43392181 214.45053101]
[33.40330505 199.45056152]
[39.24602509 185.63325500]
[25.07101250 190.53927612]
[10.89600086 195.44529724]
[-3.27901196 200.35131836]
[-17.45402336 205.25733948]
[-31.62903595 210.16334534]
[-45.80405045 215.06936646]
[-58.79447937 225.96363831]
[-72.85910034 216.49671936]
[-67.65562439 200.36103821]
[-50.71006775 200.89436340]
[-36.53505707 195.98834229]
[-22.36004448 191.08232117]
[-8.18503094 186.17630005]
[5.98998117 181.27027893]
[20.16499329 176.36425781]
[34.34000397 171.45823669]
[46.34812546 162.46908569]
[55.04897690 150.25044250]
[63.74983215 138.03179932]
[72.45068359 125.81316376]
[81.15153503 113.59452057]
[89.85239410 101.37588501]
[91.69048309 93.20508575]
[99.26940155 88.79623413]
[100.70133972 81.73851013]
[105.01358795 77.36296082]
[110.02709961 76.38118744]
[120.37828064 65.52517700]
[130.72946167 54.66916656]
[141.08065796 43.81315613]
[151.43183899 32.95714569]
[155.27178955 24.26531219]
[162.54325867 21.84571838]
[162.66876221 6.04192829]
[173.99092102 -4.98460102]
[189.79249573 -4.69202423]
[200.69869995 6.74607754]
[200.23907471 22.54368210]
[188.68630981 33.32835007]
[172.89445496 32.70172882]
[162.28784180 43.30833054]
[151.93666077 54.16434097]
[141.58547974 65.02035522]
[131.23429871 75.87636566]
[120.88311005 86.73237610]
[111.06019592 98.06861877]
[102.07102966 110.07673645]
[93.37017822 122.29537201]
[84.66932678 134.51400757]
[75.96846771 146.73265076]
[67.26761627 158.95129395]
[58.56676483 171.16993713]
[73.46858215 169.45649719]
[87.85253143 173.71113586]
[99.42447662 183.25526428]
[106.33876038 196.56663513]
[107.49260712 211.52218628]
[102.70198822 225.73661804]
[92.73097229 236.94281006]
[79.16986847 243.35345459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[29 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
