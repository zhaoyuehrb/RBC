%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCCUCUUGUUUUUCCCGCGAAACUCGGCGGCUGAGCGUGGAGGUUCUUGUCUCCCCUGGUUUGUGAAGUGCGGAAAACCAGAGGCGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[94.04326630 425.39810181]
[97.45165253 410.25997925]
[109.12925720 400.04171753]
[107.64357758 385.11547852]
[106.15789032 370.18920898]
[104.67221069 355.26296997]
[103.18652344 340.33673096]
[101.70084381 325.41049194]
[100.21516418 310.48425293]
[91.25532532 298.58590698]
[97.58773804 284.08724976]
[96.10205078 269.16101074]
[94.61637115 254.23475647]
[93.13068390 239.30850220]
[91.64500427 224.38226318]
[88.42612457 220.61032104]
[87.67810059 214.72152710]
[90.58808899 208.42532349]
[90.09214020 193.43353271]
[89.59619141 178.44172668]
[89.10023499 163.44993591]
[86.59635162 160.70394897]
[85.40768433 156.53388977]
[86.22348785 151.62640381]
[89.37284088 146.96467590]
[90.36420441 131.99746704]
[91.35556030 117.03026581]
[81.88867188 106.06102753]
[82.84629059 91.60317993]
[93.67723846 81.97837830]
[94.66859436 67.01116943]
[95.65995026 52.04396820]
[96.65131378 37.07676315]
[89.84298706 22.79540062]
[98.40452576 10.60731792]
[91.59620667 -3.67404485]
[100.15773773 -15.86212730]
[101.14910126 -30.82933235]
[98.55707550 -39.80074692]
[102.42874908 -46.27242279]
[100.13476562 -55.32463455]
[104.21829987 -61.66476059]
[106.19668579 -76.53372192]
[108.17506409 -91.40268707]
[110.15345001 -106.27164459]
[112.13183594 -121.14060974]
[102.33023071 -133.53836060]
[104.24894714 -149.22573853]
[116.74963379 -158.89572144]
[132.41586304 -156.81124878]
[141.95312500 -144.20903015]
[139.70314026 -128.56571960]
[127.00079346 -119.16222382]
[125.02240753 -104.29326630]
[123.04402924 -89.42430115]
[121.06564331 -74.55534363]
[119.08726501 -59.68637848]
[117.35499573 -44.78673935]
[116.11630249 -29.83797264]
[115.12494659 -14.87076855]
[122.00417328 -1.65996063]
[113.37172699 11.59867668]
[120.25096130 24.80948448]
[111.61851501 38.06812286]
[110.62715912 53.03532791]
[109.63579559 68.00253296]
[108.64443970 82.96973419]
[118.11132812 93.93897247]
[117.15370941 108.39682007]
[106.32276154 118.02162170]
[105.33140564 132.98883057]
[104.34004974 147.95603943]
[104.09204102 162.95397949]
[104.58798981 177.94578552]
[105.08393860 192.93757629]
[105.57988739 207.92938232]
[106.57125092 222.89657593]
[108.05693054 237.82283020]
[109.54261017 252.74906921]
[111.02829742 267.67532349]
[112.51397705 282.60156250]
[121.58007812 295.56753540]
[115.14140320 308.99856567]
[116.62709045 323.92480469]
[118.11277008 338.85104370]
[119.59844971 353.77728271]
[121.08413696 368.70355225]
[122.56981659 383.62979126]
[124.05550385 398.55603027]
[137.51818848 406.27197266]
[143.84368896 420.44122314]
[140.59971619 435.61541748]
[129.03364563 445.95977783]
[113.59287262 447.49667358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[6 86]
[7 85]
[8 84]
[9 83]
[11 81]
[12 80]
[13 79]
[14 78]
[15 77]
[18 76]
[19 75]
[20 74]
[21 73]
[25 72]
[26 71]
[27 70]
[30 67]
[31 66]
[32 65]
[33 64]
[35 62]
[37 60]
[38 59]
[40 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
