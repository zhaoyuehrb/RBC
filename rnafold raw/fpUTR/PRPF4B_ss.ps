%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGCUCUUUUCCUUCUUCCUCCACUUCCCCUACCCUCCACCGUCCGGGAGCCGCCGCCACCGCCGCCGAGGAGUCAGGAAGUUCAAG\
) } def
/len { sequence length } bind def

/coor [
[56.69438171 370.78298950]
[52.15666580 385.08016968]
[56.20227432 400.97247314]
[44.27462769 412.22692871]
[28.64386749 407.26596069]
[25.38957596 391.19296265]
[37.85949326 380.54244995]
[42.39720917 366.24526978]
[29.74006653 351.66079712]
[28.11151314 332.27951050]
[38.30163574 315.55050659]
[56.52647018 308.00024414]
[59.07512665 293.21835327]
[61.62378311 278.43646240]
[64.17243958 263.65457153]
[66.72109222 248.87268066]
[69.26975250 234.09078979]
[60.49726486 222.10833740]
[62.87139130 207.08108521]
[75.49916840 197.96093750]
[78.04782104 183.17904663]
[80.59647369 168.39715576]
[83.14513397 153.61526489]
[85.69378662 138.83337402]
[88.24244690 124.05147552]
[77.78731537 114.94357300]
[73.29090118 101.82695007]
[75.95938873 88.22023773]
[85.07694244 77.77352905]
[80.53923035 63.47635269]
[76.00151062 49.17918396]
[71.46379089 34.88201141]
[66.92607117 20.58484077]
[53.17405319 13.26912117]
[48.77582932 -1.29488528]
[55.83499908 -14.36024857]
[51.29727936 -28.65742111]
[36.53082275 -33.42516327]
[27.41414070 -45.98166656]
[27.45278168 -61.49869156]
[36.63188934 -74.00962830]
[51.42190933 -78.70377350]
[66.13577271 -73.77612305]
[75.11570740 -61.12145996]
[74.90873718 -45.60576630]
[65.59445190 -33.19513702]
[70.13217163 -18.89796638]
[83.43383789 -12.29484177]
[88.23939514 2.13988137]
[81.22324371 16.04712105]
[85.76096344 30.34429359]
[90.29868317 44.64146423]
[94.83639526 58.93863678]
[99.37411499 73.23580933]
[107.60799408 74.33227539]
[115.10943604 77.89980316]
[121.15627289 83.59494781]
[135.11044312 78.09213257]
[145.10998535 65.83163452]
[159.78836060 68.36042786]
[173.74253845 62.85761261]
[183.51722717 49.68995285]
[199.77485657 51.83979416]
[205.79095459 67.09556580]
[195.37667847 79.76344299]
[179.24534607 76.81179047]
[165.29116821 82.31460571]
[156.28973389 94.18150330]
[140.61326599 92.04631042]
[126.65908813 97.54912567]
[120.76696014 116.89517975]
[103.02433777 126.60013580]
[100.47567749 141.38201904]
[97.92702484 156.16392517]
[95.37837219 170.94581604]
[92.82971191 185.72770691]
[90.28105927 200.50959778]
[99.12556458 213.33193970]
[96.33029175 228.28657532]
[84.05164337 236.63943481]
[81.50299072 251.42132568]
[78.95433044 266.20321655]
[76.40567780 280.98510742]
[73.85701752 295.76699829]
[71.30836487 310.54888916]
[80.49605560 316.73736572]
[86.98534393 325.66708374]
[90.01264954 336.24203491]
[89.23729706 347.17547607]
[84.77964783 357.14642334]
[77.20333862 364.95938110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[20 77]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[36 47]
[37 46]
[57 70]
[58 69]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
