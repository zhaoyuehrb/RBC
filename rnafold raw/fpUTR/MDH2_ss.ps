%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCGGAGGCGAGCGCGACCGGAAGUCCGGUCACUCUCGCGAGGCCCCAGAGAGCAGGCGCUGGGCAGUGUGGAGGUCGUUGGAGUCACUUCCCCGUCACCAGCUCCUGUGCCUGCCAGUCGGUGCCCCUCCCGCUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[85.20077515 206.03396606]
[75.12393188 194.35232544]
[72.98494720 179.07397461]
[79.46636963 165.07415771]
[92.50000000 156.82019043]
[92.50000000 141.82019043]
[92.50000000 126.82019043]
[92.50000000 111.82019043]
[79.62085724 104.13073730]
[66.41638184 111.24706268]
[53.21191788 118.36338043]
[40.00744629 125.47969818]
[26.80297852 132.59602356]
[18.32545662 145.95423889]
[3.45092535 145.18119812]
[-5.02659750 158.53942871]
[-19.90112877 157.76638794]
[-33.10559845 164.88270569]
[-46.31006622 171.99902344]
[-59.51453400 179.11534119]
[-72.71900177 186.23167419]
[-85.92346954 193.34799194]
[-94.07032013 207.58036804]
[-110.46812439 207.37060547]
[-118.24822998 192.93446350]
[-109.40713501 179.12261963]
[-93.03979492 180.14352417]
[-79.83531952 173.02719116]
[-66.63085175 165.91087341]
[-53.42638397 158.79455566]
[-40.22191620 151.67823792]
[-27.01744843 144.56192017]
[-19.48439789 131.71270752]
[-3.66539431 131.97673035]
[3.86765647 119.12751770]
[19.68665886 119.39154816]
[32.89112854 112.27523041]
[46.09559631 105.15891266]
[59.30006409 98.04258728]
[72.50453186 90.92626953]
[101.63813019 81.91767120]
[102.93672180 66.14984894]
[116.46671295 59.92180252]
[124.85157776 47.48419189]
[133.23643494 35.04658127]
[134.53503418 19.27875710]
[148.06501770 13.05071163]
[156.44987488 0.61310077]
[158.67916870 -8.32682705]
[165.15805054 -12.00285625]
[173.81410217 -24.25327110]
[170.52047729 -41.39608383]
[180.41766357 -55.36484909]
[197.01676941 -57.84159470]
[205.40162659 -70.27920532]
[213.78648376 -82.71681976]
[222.17134094 -95.15442657]
[230.55619812 -107.59204102]
[238.94105530 -120.02964783]
[247.32591248 -132.46725464]
[255.71076965 -144.90487671]
[257.00936890 -160.67269897]
[270.53936768 -166.90074158]
[278.92422485 -179.33834839]
[287.17193604 -191.86730957]
[295.28155518 -204.48611450]
[296.23345947 -220.27865601]
[309.62338257 -226.80242920]
[311.65573120 -235.78916931]
[318.05230713 -239.60662842]
[326.43716431 -252.04423523]
[334.82202148 -264.48184204]
[343.20687866 -276.91946411]
[344.50546265 -292.68728638]
[358.03546143 -298.91534424]
[366.42031860 -311.35293579]
[351.42147827 -311.53918457]
[342.03872681 -323.24234009]
[345.11853027 -337.92276001]
[358.41360474 -344.86834717]
[372.22271729 -339.01095581]
[376.46945190 -324.62445068]
[386.16726685 -336.06790161]
[395.86505127 -347.51135254]
[405.56283569 -358.95483398]
[407.95535278 -375.17849731]
[423.29931641 -380.96600342]
[435.81018066 -370.36361694]
[432.61782837 -354.27819824]
[417.00631714 -349.25701904]
[407.30850220 -337.81356812]
[397.61071777 -326.37011719]
[387.91290283 -314.92663574]
[378.85794067 -302.96807861]
[370.47308350 -290.53048706]
[369.77423096 -275.65228271]
[355.64450073 -268.53460693]
[347.25964355 -256.09698486]
[338.87478638 -243.65937805]
[330.48992920 -231.22177124]
[322.24218750 -218.69281006]
[321.87033081 -203.80284119]
[307.90036011 -196.37651062]
[299.79074097 -183.75770569]
[298.81301880 -176.37304688]
[291.36181641 -170.95349121]
[282.97695923 -158.51588440]
[282.27810669 -143.63768005]
[268.14837646 -136.52001953]
[259.76351929 -124.08240509]
[251.37866211 -111.64479065]
[242.99380493 -99.20718384]
[234.60894775 -86.76956940]
[226.22409058 -74.33196259]
[217.83923340 -61.89434814]
[209.45437622 -49.45673752]
[213.66600037 -37.23178864]
[209.98954773 -24.63205719]
[199.55894470 -16.34767914]
[186.06451416 -15.59721565]
[177.40846252 -3.34679937]
[168.88749695 8.99795818]
[160.50263977 21.43556976]
[159.80377197 36.31377029]
[145.67404175 43.43143845]
[137.28918457 55.86904907]
[128.90432739 68.30665588]
[128.20547485 83.18486023]
[114.07573700 90.30252838]
[128.74940491 87.19069672]
[140.94386292 95.92542267]
[142.71983337 110.81990814]
[132.92108154 122.17704773]
[117.92713165 122.60270691]
[107.50000000 111.82019043]
[107.50000000 126.82019043]
[107.50000000 141.82019043]
[107.50000000 156.82019043]
[120.53363037 165.07415771]
[127.01505280 179.07397461]
[124.87606812 194.35232544]
[114.79922485 206.03396606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 138]
[6 137]
[7 136]
[8 135]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[15 34]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[41 129]
[43 127]
[44 126]
[45 125]
[47 123]
[48 122]
[50 121]
[51 120]
[54 116]
[55 115]
[56 114]
[57 113]
[58 112]
[59 111]
[60 110]
[61 109]
[63 107]
[64 106]
[65 104]
[66 103]
[68 101]
[70 100]
[71 99]
[72 98]
[73 97]
[75 95]
[76 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
