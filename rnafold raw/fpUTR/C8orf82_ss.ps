%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCCCCGAGGCCCGAGGGAGAGGGAAGAGCGCCGGGCCCGGGUCGCGGAGGCGGGCGCCGCCGGAACGCGAAGCGCGGGGCUACUGCGGGCAGGCGCGAGUUCGCGCAGCACCGCCCCCGGCGUGACCUGCUGGUCGCUUCCGGCGCGGGAGGAGA\
) } def
/len { sequence length } bind def

/coor [
[86.63557434 228.30560303]
[78.88403320 214.72445679]
[81.72665405 199.34741211]
[93.82123566 189.43504333]
[93.82123566 174.43504333]
[93.67304993 159.43577576]
[93.37668610 144.43870544]
[93.08032990 129.44163513]
[92.78397369 114.44455719]
[85.80629730 111.69464874]
[74.06565857 121.03045654]
[71.85093689 106.19483185]
[64.87326050 103.44492340]
[54.42499161 114.20753479]
[43.97672653 124.97014618]
[46.76355362 140.23490906]
[40.01540375 154.20782471]
[26.32707787 161.51599121]
[10.96201897 159.34928894]
[-0.17159523 148.54086304]
[-2.79266286 133.24674988]
[4.10666990 119.34786987]
[17.87346840 112.18862152]
[33.21411896 114.52188110]
[43.66238403 103.75926971]
[54.11064911 92.99665833]
[51.99119186 85.80236053]
[37.60253525 90.04105377]
[33.36406708 75.65232849]
[47.75228119 71.41377258]
[45.63282394 64.21947479]
[31.01838493 60.84039307]
[16.40394592 57.46131516]
[1.78950751 54.08223724]
[-12.82493114 50.70315933]
[-28.01338005 55.13278580]
[-38.67051315 44.72727203]
[-53.85895920 49.15689850]
[-64.51609039 38.75138092]
[-79.16320038 35.51684570]
[-93.84155273 32.42716599]
[-108.51989746 29.33748627]
[-122.68886566 36.86210632]
[-137.34809875 30.34396172]
[-141.25230408 14.78321648]
[-131.40649414 2.11674237]
[-115.36353302 2.06117463]
[-105.43021393 14.65913963]
[-90.75186920 17.74881935]
[-76.07352448 20.83849907]
[-68.84184265 19.12976265]
[-61.13701630 24.13694382]
[-46.99388885 19.46562004]
[-35.29143524 30.11283112]
[-21.14830780 25.44150734]
[-9.44585323 36.08871841]
[5.16858625 39.46779633]
[19.78302574 42.84687805]
[34.39746475 46.22595596]
[49.01190186 49.60503387]
[106.50559998 88.34839630]
[119.02886200 80.09201050]
[131.55212402 71.83562469]
[144.07537842 63.57923889]
[156.59864807 55.32285309]
[169.12190247 47.06646729]
[181.64517212 38.81008148]
[194.16842651 30.55369568]
[193.68023682 25.30766869]
[194.42181396 20.13375664]
[196.33306885 15.31398392]
[199.29061890 11.10647678]
[203.11573792 7.73163700]
[207.58491516 5.36062622]
[212.44299316 4.10674810]
[223.10185242 -6.44733191]
[227.02635193 -14.75603485]
[234.07711792 -17.10203552]
[244.94241333 -27.44346619]
[255.80772400 -37.78489685]
[266.67303467 -48.12632751]
[277.53833008 -58.46775818]
[262.90008545 -61.74219513]
[256.15176392 -75.13846588]
[262.23318481 -88.85037231]
[276.69268799 -92.84066010]
[288.94580078 -84.18840790]
[290.02307129 -69.22710419]
[301.85540771 -78.44644928]
[313.68771362 -87.66579437]
[325.52001953 -96.88513947]
[337.26068115 -106.22092438]
[348.90853882 -115.67224121]
[351.03063965 -128.42988586]
[360.97149658 -136.05979919]
[373.04458618 -134.88754272]
[384.87689209 -144.10688782]
[396.70919800 -153.32623291]
[408.54150391 -162.54556274]
[420.37384033 -171.76490784]
[426.03231812 -187.15692139]
[442.23535156 -189.68553162]
[452.31463623 -176.74954224]
[445.90148926 -161.65637207]
[429.59317017 -159.93260193]
[417.76086426 -150.71325684]
[405.92855835 -141.49391174]
[394.09622192 -132.27456665]
[382.26391602 -123.05522156]
[376.58547974 -106.47430420]
[358.35986328 -104.02438354]
[346.71200562 -94.57306671]
[343.48229980 -87.88083649]
[334.73937988 -85.05281830]
[322.90704346 -75.83348083]
[311.07473755 -66.61413574]
[299.24243164 -57.39478683]
[287.87976074 -47.60245514]
[277.01446533 -37.26102448]
[266.14913940 -26.91959381]
[255.28384399 -16.57816315]
[244.41854858 -6.23673248]
[233.65594482 4.21153307]
[222.99707031 14.76561260]
[224.91822815 29.64207649]
[237.90861511 37.14207458]
[250.89898682 44.64207458]
[263.88937378 52.14207458]
[276.87976074 59.64207458]
[289.87014771 67.14207458]
[306.26034546 66.60099030]
[314.69314575 80.66584778]
[306.49356079 94.86792755]
[290.09664917 94.59734344]
[282.37014771 80.13245392]
[269.37976074 72.63245392]
[256.38937378 65.13245392]
[243.39898682 57.63245773]
[230.40861511 50.13245773]
[217.41822815 42.63245773]
[202.42481995 43.07695770]
[189.90155029 51.33334351]
[177.37829590 59.58972931]
[164.85502625 67.84611511]
[152.33177185 76.10250092]
[139.80850220 84.35888672]
[127.28524780 92.61527252]
[114.76198578 100.87165833]
[107.78104401 114.14820099]
[108.07740784 129.14527893]
[108.37376404 144.14234924]
[108.67012024 159.13941956]
[111.98289490 167.71040344]
[108.82123566 174.43504333]
[108.82123566 189.43504333]
[120.91581726 199.34741211]
[123.75843811 214.72445679]
[116.00689697 228.30560303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 155]
[5 154]
[6 152]
[7 151]
[8 150]
[9 149]
[13 26]
[14 25]
[15 24]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[37 54]
[39 52]
[40 50]
[41 49]
[42 48]
[61 148]
[62 147]
[63 146]
[64 145]
[65 144]
[66 143]
[67 142]
[68 141]
[75 124]
[76 123]
[78 122]
[79 121]
[80 120]
[81 119]
[82 118]
[88 117]
[89 116]
[90 115]
[91 114]
[92 112]
[93 111]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[125 140]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
