%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCGCUGGACGCGGCUAGAGCUGGGGCUGCCGCGCCCUCCACCUCCUUCUCCAAAGGCCUCCCCGGACCCCUGGCUCGGGCCCAGCCUGCGACUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[133.12504578 255.79559326]
[129.02009583 241.36820984]
[124.91515350 226.94082642]
[120.81021118 212.51344299]
[115.86672211 206.84341431]
[116.80835724 197.57832336]
[113.14965057 183.03137207]
[109.49094391 168.48440552]
[105.83223724 153.93745422]
[102.17353058 139.39050293]
[91.56556702 128.93486023]
[95.70312500 113.66426849]
[86.10868073 103.49380493]
[89.74992371 89.99443817]
[86.09121704 75.44747925]
[82.20893097 60.95859528]
[78.10398865 46.53121185]
[73.99903870 32.10382462]
[69.89409637 17.67644119]
[65.78915405 3.24905658]
[48.97080994 -5.16814661]
[43.56319046 -22.85230827]
[52.48889542 -38.68795776]
[47.50357437 -52.83527374]
[42.51824951 -66.98258972]
[37.53292847 -81.12990570]
[32.54760742 -95.27722168]
[27.56228447 -109.42453766]
[13.58689117 -116.30393982]
[8.73260021 -130.72235107]
[15.37718105 -144.00335693]
[10.39185905 -158.15066528]
[5.40653706 -172.29798889]
[-9.59683323 -170.82751465]
[-24.51604080 -172.99099731]
[-38.48370361 -178.66267395]
[-50.68775558 -187.51278687]
[-60.41867447 -199.02679443]
[-67.11071777 -212.53532410]
[-70.37480927 -227.25296021]
[-70.02119446 -242.32408142]
[-66.07041931 -256.87243652]
[-58.75217819 -270.05221558]
[-48.49195099 -281.09719849]
[-35.88624573 -289.36517334]
[-21.66794968 -294.37551880]
[-6.66369057 -295.83688354]
[8.25420284 -293.66436768]
[22.21842384 -287.98422241]
[34.41711044 -279.12670898]
[44.14104462 -267.60678101]
[50.82489395 -254.09422302]
[54.08006668 -239.37460327]
[53.71731186 -224.30371094]
[49.75771713 -209.75775146]
[42.43148804 -196.58239746]
[32.16456604 -185.54365540]
[19.55385399 -177.28330994]
[24.53917503 -163.13598633]
[29.52449799 -148.98867798]
[43.02733994 -142.80734253]
[48.28469849 -128.53097534]
[41.70960236 -114.40985870]
[46.69492340 -100.26254272]
[51.68024445 -86.11522675]
[56.66556931 -71.96791077]
[61.65089035 -57.82059479]
[66.63621521 -43.67327881]
[77.94018555 -41.01998901]
[86.59453583 -33.09873581]
[90.31132507 -21.84338188]
[88.02999115 -10.08856201]
[80.21653748 -0.85588825]
[84.32147980 13.57149601]
[88.42642212 27.99888039]
[92.53137207 42.42626572]
[96.63631439 56.85364914]
[101.57980347 62.52367783]
[100.63816833 71.78878021]
[104.29687500 86.33573151]
[113.89131927 96.50619507]
[110.25007629 110.00556183]
[121.11973572 121.50169373]
[116.72048187 135.73179626]
[120.37918854 150.27874756]
[124.03789520 164.82569885]
[127.69660187 179.37266541]
[131.35531616 193.91961670]
[135.23759460 208.40850830]
[139.34254456 222.83589172]
[143.44747925 237.26327515]
[147.55242920 251.69065857]
[162.46679688 255.35903931]
[173.53771973 266.00469971]
[177.78717041 280.76403809]
[174.07205200 295.66683960]
[163.39173889 306.70434570]
[148.61915588 310.90750122]
[133.72807312 307.14569092]
[122.72411346 296.43081665]
[118.56727600 281.64514160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[6 88]
[7 87]
[8 86]
[9 85]
[10 84]
[12 82]
[14 80]
[15 79]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[31 60]
[32 59]
[33 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
