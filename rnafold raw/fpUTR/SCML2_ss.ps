%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGUGGCGGUUGCGGGGCAUGCGCGGCUCCGCGCGCGGCUUCUCAAACAUGGCGGCGGCGGUGUGAAGCUCGGUGCCGGCUCGCGCGAUCGGUGGGACAGAAUUUCGUUGUUUUCACCGACGAGACUGGAGGAAACAACACCAAAUAGGGAUACC\
) } def
/len { sequence length } bind def

/coor [
[75.43458557 101.71113586]
[68.98967743 97.87537384]
[54.74237061 102.56732178]
[44.05489349 114.23300934]
[29.54607201 110.86501312]
[15.29876995 115.55696869]
[4.61128950 127.22265625]
[-9.89753056 123.85466003]
[-24.14483261 128.54661560]
[-34.83231354 140.21229553]
[-49.34113312 136.84429932]
[-63.58843613 141.53625488]
[-77.68948364 146.65098572]
[-91.63173676 152.18394470]
[-101.60475159 164.46601868]
[-116.28855133 161.96896362]
[-130.23080444 167.50192261]
[-144.17304993 173.03488159]
[-158.11531067 178.56784058]
[-172.05755615 184.10079956]
[-178.92530823 190.20783997]
[-186.33242798 189.60212708]
[-200.38192749 194.85678101]
[-214.43142700 200.11145020]
[-228.48092651 205.36610413]
[-242.53042603 210.62077332]
[-256.57992554 215.87544250]
[-262.90338135 230.35955811]
[-277.64685059 236.05215454]
[-292.06329346 229.57594299]
[-297.59970093 214.77311707]
[-290.97143555 200.42593384]
[-276.11090088 195.04634094]
[-261.83459473 201.82592773]
[-247.78509521 196.57127380]
[-233.73559570 191.31660461]
[-219.68609619 186.06195068]
[-205.63658142 180.80728149]
[-191.58708191 175.55261230]
[-177.59051514 170.15853882]
[-163.64826965 164.62557983]
[-149.70600891 159.09262085]
[-135.76376343 153.55966187]
[-121.82151031 148.02670288]
[-112.84573364 136.14038086]
[-97.16469574 138.24168396]
[-83.22244263 132.70872498]
[-81.49207306 129.57748413]
[-78.13096619 127.14929199]
[-73.49609375 126.19422913]
[-68.28038788 127.28894806]
[-54.03308105 122.59700012]
[-44.36466599 111.26690674]
[-28.83678246 114.29930878]
[-14.58948040 109.60736084]
[-4.92106247 98.27726746]
[10.60682011 101.30966187]
[24.85412216 96.61771393]
[34.52254105 85.28762054]
[50.05042267 88.32002258]
[64.29772186 83.62806702]
[109.36534882 77.47905731]
[121.60491943 68.80767822]
[133.84449768 60.13629913]
[146.08407593 51.46492004]
[158.32363892 42.79354095]
[156.30703735 28.92176819]
[160.45553589 15.60151482]
[169.90188599 5.42503023]
[182.75373840 0.34684113]
[196.47256470 1.30849946]
[208.37501526 8.06456375]
[220.78457642 -0.36175227]
[220.70741272 -12.31501007]
[226.37484741 -22.70283699]
[236.26478577 -28.97859764]
[247.83709717 -29.66836739]
[258.18560791 -24.71560097]
[270.92034912 -32.64189529]
[283.65509033 -40.56818771]
[296.38983154 -48.49448395]
[309.04516602 -56.54698944]
[321.61981201 -64.72490692]
[334.19445801 -72.90283203]
[346.76910400 -81.08074951]
[332.98068237 -86.98668671]
[328.80514526 -101.39379883]
[337.29852295 -113.75755310]
[352.24453735 -115.02896118]
[362.70425415 -104.27747345]
[361.02301025 -89.37335968]
[374.34725952 -96.26281738]
[387.67147827 -103.15227509]
[400.99572754 -110.04173279]
[414.31997681 -116.93119812]
[427.64419556 -123.82065582]
[440.96844482 -130.71011353]
[454.29269409 -137.59957886]
[467.61691284 -144.48902893]
[480.87200928 -151.51062012]
[494.05664062 -158.66363525]
[507.24127197 -165.81663513]
[510.18649292 -181.17436218]
[522.34698486 -191.00576782]
[537.98089600 -190.66876221]
[549.70648193 -180.32247925]
[551.98712158 -164.85211182]
[543.74609375 -151.56228638]
[528.87451172 -146.72805786]
[514.39428711 -152.63201904]
[501.20965576 -145.47900391]
[488.02502441 -138.32598877]
[483.62133789 -132.33935547]
[474.50637817 -131.16479492]
[461.18212891 -124.27533722]
[447.85791016 -117.38587189]
[434.53366089 -110.49641418]
[421.20941162 -103.60695648]
[407.88519287 -96.71749878]
[394.56094360 -89.82804108]
[381.23669434 -82.93857574]
[367.91247559 -76.04911804]
[354.94702148 -68.50611115]
[342.37237549 -60.32818985]
[329.79772949 -52.15026855]
[317.22308350 -43.97234726]
[313.30895996 -37.65475845]
[304.31613159 -35.75973129]
[291.58139038 -27.83343887]
[278.84664917 -19.90714455]
[266.11187744 -11.98085117]
[263.08618164 6.03336573]
[247.62002563 16.33771896]
[229.21089172 12.04780865]
[216.80133057 20.47412491]
[218.37863159 36.53070068]
[211.61866760 51.28322220]
[198.27409363 60.68036270]
[181.91969299 62.08938980]
[166.99502563 55.03311539]
[154.75544739 63.70449448]
[142.51586914 72.37587738]
[130.27630615 81.04725647]
[118.03672791 89.71863556]
[132.93272400 87.95529175]
[144.28153992 97.76367188]
[144.69447327 112.75798798]
[133.90269470 123.17611694]
[118.93222809 122.23529053]
[109.52978516 110.54846954]
[112.19975281 125.30892944]
[123.20351410 137.46826172]
[117.91824341 152.99237061]
[101.78097534 155.91139221]
[91.39234924 143.22247314]
[97.43929291 127.97889709]
[94.76932526 113.21843719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[5 58]
[6 57]
[8 55]
[9 54]
[11 52]
[12 51]
[13 47]
[14 46]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[62 144]
[63 143]
[64 142]
[65 141]
[66 140]
[72 135]
[73 134]
[78 131]
[79 130]
[80 129]
[81 128]
[82 126]
[83 125]
[84 124]
[85 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
[100 112]
[101 111]
[102 110]
[150 157]
[151 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
