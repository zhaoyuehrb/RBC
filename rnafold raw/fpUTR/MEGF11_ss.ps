%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGCUGCCCGCCGCCCGGCUCCCGGCUGCUCGCGGCCCCCUGCUCCUGCCUGGCGCUCUGGCCAGGCUCGGGCUCCGGAGGACAGGACCGCGCGACUGGCCGGCCGAUCCCUGGGCCGGCCGCGGGAGCAGGGCCCGGG\
) } def
/len { sequence length } bind def

/coor [
[83.14628601 392.52096558]
[78.35067749 407.18405151]
[66.37448883 416.90896606]
[51.03926468 418.59259033]
[37.23843002 411.69763184]
[29.37577438 398.42425537]
[29.96024704 383.00796509]
[38.80533981 370.36804199]
[53.08862305 364.53781128]
[55.72964859 349.77215576]
[58.37067795 335.00650024]
[61.01170731 320.24081421]
[54.34183502 310.08999634]
[56.47642517 297.72500610]
[66.80391693 289.91217041]
[69.77095032 275.20855713]
[72.73797607 260.50491333]
[75.70500183 245.80130005]
[70.63805389 231.79502869]
[80.95218658 219.79797363]
[83.91921234 205.09434509]
[86.88623810 190.39071655]
[89.85327148 175.68708801]
[92.82029724 160.98345947]
[95.78733063 146.27983093]
[98.75435638 131.57620239]
[84.49047852 126.19718933]
[74.89734650 115.08646393]
[71.89927673 101.29460144]
[75.70066071 88.28986359]
[84.86074829 79.08773041]
[73.04950714 68.56133270]
[76.21809387 54.00765991]
[71.33108521 39.82608414]
[66.44407654 25.64450645]
[61.55706787 11.46292782]
[56.67005920 -2.71864963]
[46.54497910 -6.95724773]
[40.58401871 -15.91025162]
[40.57933044 -26.44557381]
[46.28842926 -35.03628922]
[42.03350449 -49.42015457]
[37.77857590 -63.80401993]
[33.52365112 -78.18788910]
[28.04703903 -85.59941101]
[29.33748627 -92.93717957]
[25.40180206 -107.41165924]
[21.46611786 -121.88613129]
[17.53043365 -136.36059570]
[-11.31782532 -148.13751221]
[-18.62541771 -161.23709106]
[-25.93301010 -174.33666992]
[-33.24060440 -187.43626404]
[-40.54819489 -200.53584290]
[-47.85578918 -213.63542175]
[-55.16337967 -226.73501587]
[-70.43368530 -230.80851746]
[-78.27859497 -244.52832031]
[-74.04386902 -259.75469971]
[-60.24189758 -267.45410156]
[-45.06114197 -263.05865479]
[-37.50807571 -249.17604065]
[-42.06379700 -234.04260254]
[-34.75620651 -220.94302368]
[-27.44861221 -207.84342957]
[-20.14101982 -194.74385071]
[-12.83342743 -181.64427185]
[-5.52583456 -168.54467773]
[1.78175807 -155.44509888]
[16.57573700 -157.92263794]
[19.21676445 -172.68830872]
[21.85779381 -187.45396423]
[24.49882126 -202.21963501]
[21.33571053 -218.87590027]
[36.46540451 -226.52630615]
[48.00514603 -214.10572815]
[39.26448822 -199.57861328]
[36.62346268 -184.81294250]
[33.98243332 -170.04727173]
[31.34140587 -155.28160095]
[32.00490570 -140.29627991]
[35.94058990 -125.82181549]
[39.87627411 -111.34734344]
[43.81195831 -96.87286377]
[47.90751648 -82.44281006]
[52.16244125 -68.05894470]
[56.41736984 -53.67508316]
[60.67229462 -39.29121399]
[75.64712524 -27.13166428]
[70.85163879 -7.60565805]
[75.73864746 6.57591963]
[80.62565613 20.75749779]
[85.51266479 34.93907547]
[90.39967346 49.12065125]
[101.86136627 58.63269043]
[99.04232788 74.20072174]
[116.25235748 77.51348877]
[128.50067139 91.74226379]
[129.33564758 111.74852753]
[143.97004700 115.04010010]
[158.60443115 118.33168030]
[173.23883057 121.62326050]
[187.87322998 124.91483307]
[202.50761414 128.20642090]
[217.14201355 131.49798584]
[231.77641296 134.78956604]
[246.41079712 138.08114624]
[257.97457886 127.73423767]
[273.41500854 126.19392395]
[286.79495239 134.05249023]
[292.96951294 148.28816223]
[289.56448364 163.42703247]
[277.88912964 173.64788818]
[262.43289185 175.02061462]
[249.13899231 167.01736450]
[243.11923218 152.71554565]
[228.48483276 149.42396545]
[213.85043335 146.13238525]
[199.21604919 142.84080505]
[184.58164978 139.54922485]
[169.94725037 136.25765991]
[155.31285095 132.96607971]
[140.67846680 129.67449951]
[126.04406738 126.38291931]
[113.45798492 134.54322815]
[110.49095917 149.24685669]
[107.52392578 163.95048523]
[104.55690002 178.65411377]
[101.58987427 193.35774231]
[98.62284088 208.06137085]
[95.65581512 222.76501465]
[100.51054382 237.82296753]
[90.40863800 248.76832581]
[87.44160461 263.47195435]
[84.47457886 278.17559814]
[81.50754547 292.87921143]
[87.80107117 310.14550781]
[75.77737427 322.88183594]
[73.13634491 337.64752197]
[70.49531555 352.41317749]
[67.85429382 367.17886353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 141]
[10 140]
[11 139]
[12 138]
[15 136]
[16 135]
[17 134]
[18 133]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[31 96]
[33 94]
[34 93]
[35 92]
[36 91]
[37 90]
[41 88]
[42 87]
[43 86]
[44 85]
[46 84]
[47 83]
[48 82]
[49 81]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[70 80]
[71 79]
[72 78]
[73 77]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
