%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCAUGAACCACGAUGCUCAGCCCCUUAGCUGAACUUUUAAACAGAGAUUUCUUCUAUUUCAGACAGACACUGAGACUGAGGCACCCAUUCC\
) } def
/len { sequence length } bind def

/coor [
[77.20651245 159.10330200]
[67.85604095 154.82833862]
[59.29070663 149.08013916]
[51.74160004 142.00056458]
[45.41452026 133.76756287]
[34.46656036 144.02143860]
[23.51859856 154.27532959]
[12.57063866 164.52920532]
[14.62884331 179.90917969]
[7.22424364 193.54557800]
[-6.79594040 200.19494629]
[-22.04066277 197.30046082]
[-32.64801407 185.97509766]
[-34.53925705 170.57371521]
[-26.98716354 157.01843262]
[-12.89567184 150.52156067]
[2.31675363 153.58125305]
[13.26471519 143.32736206]
[24.21267509 133.07348633]
[35.16063690 122.81959534]
[31.75449371 108.21144104]
[17.40038872 103.85717010]
[3.04628301 99.50289917]
[-11.30782223 95.14862823]
[-25.66192627 90.79436493]
[-39.48016357 98.46455383]
[-54.65158463 94.03696442]
[-62.17525482 80.13840485]
[-57.58751297 65.01464081]
[-43.61018372 57.63834000]
[-28.53577232 62.38572311]
[-21.30765724 76.44025421]
[-6.95355177 80.79452515]
[7.40055323 85.14879608]
[21.75465775 89.50306702]
[36.10876465 93.85733795]
[37.86769867 84.61365509]
[40.95270157 75.75167084]
[45.29009628 67.45993042]
[50.77964020 59.91367722]
[57.29685593 53.27111816]
[64.69581604 47.67014313]
[72.81243134 43.22544479]
[81.46807098 40.02618027]
[90.47349548 38.13420105]
[99.63300323 37.58286285]
[108.74867249 38.37647247]
[117.62463379 40.49035263]
[126.07128906 43.87154770]
[133.90936279 48.44010544]
[140.97370911 54.09097672]
[147.11674500 60.69639969]
[152.21159363 68.10880280]
[156.15469360 76.16406250]
[158.86784363 84.68518066]
[173.73951721 82.72729492]
[188.61119080 80.76940155]
[203.48286438 78.81150818]
[213.09872437 66.55699158]
[228.20860291 64.78326416]
[239.83215332 74.02603149]
[254.70382690 72.06813812]
[269.57550049 70.11024475]
[284.44717407 68.15235138]
[299.31884766 66.19445801]
[314.19052124 64.23656464]
[322.43942261 50.95162964]
[337.31387329 46.12622452]
[351.79061890 52.03875351]
[359.03417969 65.89750671]
[355.62432861 81.15879822]
[343.17117310 90.61672211]
[327.55462646 89.80552673]
[316.14840698 79.10823822]
[301.27673340 81.06613159]
[286.40505981 83.02402496]
[271.53338623 84.98191833]
[256.66171265 86.93981171]
[241.79003906 88.89770508]
[232.95475769 100.83393097]
[217.90066528 103.03136444]
[205.44075012 93.68318176]
[190.56907654 95.64106750]
[175.69740295 97.59896088]
[160.82574463 99.55685425]
[160.30650330 109.41658783]
[158.19409180 119.09616089]
[154.53323364 128.33897400]
[149.40992737 136.89817810]
[142.94929504 144.54330444]
[135.31266785 151.06646729]
[126.69351959 156.28794861]
[117.31256104 160.06121826]
[107.41209412 162.27696228]
[97.24979401 162.86628723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[55 85]
[56 84]
[57 83]
[58 82]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
