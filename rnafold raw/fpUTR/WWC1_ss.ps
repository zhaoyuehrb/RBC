%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCCGGGCUAAGAGCGGCCGGCUGGAGCCGCUGAGCCCCCGCUGCGGCCGGGAGCUGCAUGGGGGAGCGCCGGCAGCGCUUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[15.05635166 199.57768250]
[7.27822161 196.61560059]
[-4.79782915 205.51329041]
[-16.87388039 214.41098022]
[-28.94993019 223.30868530]
[-41.02598190 232.20637512]
[-53.10203171 241.10408020]
[-65.17808533 250.00177002]
[-71.69857788 264.41680908]
[-86.53453064 265.73730469]
[-87.34042358 281.35412598]
[-98.03383636 292.76397705]
[-113.56567383 294.57949829]
[-126.60227203 285.94348145]
[-130.98814392 270.93353271]
[-124.65242767 256.63693237]
[-110.58664703 249.80409241]
[-95.43222809 253.66125488]
[-89.77549744 239.88262939]
[-74.07578278 237.92572021]
[-61.99972916 229.02803040]
[-49.92367935 220.13032532]
[-37.84762573 211.23263550]
[-25.77157593 202.33493042]
[-13.69552517 193.43724060]
[-1.61947465 184.53953552]
[4.56383801 163.88481140]
[26.60684013 160.54666138]
[37.38919449 150.11877441]
[41.15894699 135.70910645]
[56.45775223 131.67709351]
[67.24010468 121.24919891]
[78.02246094 110.82131958]
[88.80481720 100.39343262]
[99.41141510 89.78682709]
[109.65767670 78.83173370]
[119.71945190 67.70694733]
[129.78121948 56.58216858]
[139.84298706 45.45738602]
[143.19039917 27.44614983]
[159.94293213 22.51974106]
[169.62734985 11.06495857]
[179.11900330 -0.55005020]
[188.41525269 -12.32204056]
[197.71150208 -24.09403229]
[207.00775146 -35.86602402]
[205.35746765 -51.35519028]
[214.95288086 -63.16123581]
[229.72959900 -64.63907623]
[239.02584839 -76.41106415]
[248.32209778 -88.18305969]
[257.61834717 -99.95504761]
[266.91458130 -111.72703552]
[276.21084595 -123.49903107]
[275.77407837 -139.53613281]
[288.13244629 -149.76600647]
[303.80566406 -146.34115601]
[310.77059937 -131.88883972]
[303.68432617 -117.49563599]
[287.98284912 -114.20278168]
[278.68658447 -102.43078613]
[269.39035034 -90.65879822]
[260.09408569 -78.88681030]
[250.79783630 -67.11481476]
[241.50158691 -55.34282684]
[243.48954773 -40.62604523]
[234.22953796 -28.55514526]
[218.77973938 -26.56977463]
[209.48348999 -14.79778385]
[200.18724060 -3.02579260]
[190.89099121 8.74619770]
[189.18215942 16.09444237]
[181.08212280 20.74937630]
[171.39770508 32.20415878]
[172.06581116 44.40894699]
[163.91514587 54.05249023]
[150.96777344 55.51915741]
[140.90600586 66.64393616]
[130.84422302 77.76872253]
[120.78245544 88.89350128]
[118.58662415 96.11119843]
[110.19377136 100.21471405]
[107.21893311 107.89664459]
[99.23270416 111.17578888]
[88.45034790 121.60366821]
[77.66799164 132.03155518]
[66.88563538 142.45944214]
[62.34465790 157.61497498]
[47.81708145 160.90112305]
[37.03472519 171.32901001]
[38.53090668 180.00158691]
[36.37510681 188.43559265]
[31.01958084 195.17681885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[10 18]
[28 90]
[29 89]
[31 87]
[32 86]
[33 85]
[34 84]
[35 82]
[36 80]
[37 79]
[38 78]
[39 77]
[41 74]
[42 73]
[43 71]
[44 70]
[45 69]
[46 68]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
