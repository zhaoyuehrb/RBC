%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUCUGCCGCCCCUGUUUCAAGGGAUAAGAAACCCUGCGACAAAACCUCCUCCUUUUCCAAGCGGCUGCCGAAG\
) } def
/len { sequence length } bind def

/coor [
[85.22299957 280.68902588]
[72.55269623 269.42404175]
[79.86995697 254.13046265]
[81.09259796 239.18037415]
[82.31523132 224.23028564]
[83.53787231 209.28019714]
[76.86370850 195.96461487]
[85.70010376 182.84101868]
[86.92274475 167.89093018]
[80.24858093 154.57534790]
[89.08497620 141.45175171]
[90.30761719 126.50166321]
[91.53025818 111.55157471]
[85.72371674 98.83246613]
[93.51965332 87.22578430]
[94.74229431 72.27569580]
[82.72444916 64.82331848]
[75.17852783 52.94295502]
[73.55699921 39.02963257]
[78.12487793 25.85847092]
[87.91844177 16.03120995]
[100.94789124 11.46228218]
[102.77930450 -3.42549515]
[104.61071777 -18.31327248]
[106.44213104 -33.20104980]
[108.27355194 -48.08882904]
[110.10496521 -62.97660446]
[100.65120697 -75.35659790]
[102.72060394 -90.42883301]
[114.58129883 -99.36524963]
[116.41271210 -114.25302887]
[102.78936005 -120.86233521]
[92.05195618 -131.53880310]
[85.36521149 -145.12431335]
[83.45445251 -160.14521790]
[86.52695465 -174.97216797]
[94.24942780 -187.99684143]
[105.78419495 -197.80642700]
[119.88005066 -203.33683777]
[135.00799561 -203.98818970]
[149.52703857 -199.68983459]
[161.86227417 -190.90800476]
[170.67568970 -178.59529114]
[175.01123047 -164.08731079]
[174.39865112 -148.95774841]
[168.90435791 -134.84777832]
[159.12437439 -123.28791046]
[146.11952209 -115.53208923]
[131.30049133 -112.42161560]
[129.46907043 -97.53383636]
[138.81031799 -85.98927307]
[137.16508484 -70.86486053]
[124.99274445 -61.14519119]
[123.16132355 -46.25741196]
[121.32991028 -31.36963463]
[119.49849701 -16.48185730]
[117.66708374 -1.59408045]
[115.83567047 13.29369736]
[128.89286804 22.58830261]
[135.59344482 37.25013351]
[134.05815125 53.39057922]
[124.60573578 66.67758179]
[109.69238281 73.49833679]
[108.46974182 88.44842529]
[114.27628326 101.16753387]
[106.48034668 112.77421570]
[105.25770569 127.72430420]
[104.03506470 142.67439270]
[110.62178040 157.05931091]
[101.87283325 169.11357117]
[100.65019226 184.06365967]
[107.23690796 198.44857788]
[98.48796082 210.50283813]
[97.26531982 225.45292664]
[96.04268646 240.40301514]
[94.82004547 255.35310364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[8 71]
[9 70]
[11 68]
[12 67]
[13 66]
[15 64]
[16 63]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[30 50]
[31 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
