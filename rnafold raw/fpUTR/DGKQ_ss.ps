%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUGUACCGGGCCGUGGAGCGGCGGCUCCUGUACCCCCGGCGCGGACCUAAAGGGGCUCGGGCCGCUCGGGCCGGGA\
) } def
/len { sequence length } bind def

/coor [
[105.47023773 120.11289978]
[97.78466797 120.72545624]
[90.40219879 118.50228882]
[84.33293915 113.74756622]
[80.40730286 107.11186218]
[65.41027069 106.81362915]
[50.41323471 106.51539612]
[35.41619873 106.21716309]
[21.46492004 113.67855835]
[8.89399815 105.68973541]
[-6.10303640 105.39150238]
[-21.10303688 105.39150238]
[-36.10007095 105.68973541]
[-51.09710693 105.98796844]
[-66.09413910 106.28620148]
[-81.09117889 106.58443451]
[-91.86000824 118.15196991]
[-107.65696716 118.63323212]
[-119.11000061 107.74270630]
[-119.42422485 91.94154358]
[-108.41321564 80.60429382]
[-92.60961151 80.45714569]
[-81.38941193 91.58740234]
[-66.39237213 91.28916931]
[-51.39533997 90.99093628]
[-36.39830399 90.69270325]
[-21.40126991 90.39447021]
[-14.59358788 87.02146912]
[-5.80480385 90.39447021]
[9.19223118 90.69270325]
[22.07082176 83.20997620]
[35.71443176 91.22012329]
[50.71146774 91.51835632]
[65.70850372 91.81658936]
[80.70553589 92.11482239]
[98.34397888 79.22237396]
[117.80187988 89.15816498]
[132.56234741 86.48819733]
[147.32281494 83.81822968]
[162.08326721 81.14826202]
[176.84373474 78.47829437]
[191.60420227 75.80832672]
[203.80676270 65.73818207]
[217.70802307 71.08649445]
[232.46849060 68.41652679]
[221.34800720 58.34999084]
[218.97198486 43.53937149]
[226.38554382 30.49946594]
[240.32766724 24.96618271]
[254.66557312 29.37346458]
[263.09240723 41.78266907]
[261.90145874 56.73531342]
[251.61540222 67.65470886]
[266.54132080 69.14351654]
[281.04132080 62.81414413]
[292.93777466 71.77646637]
[307.86370850 73.26527405]
[322.78964233 74.75408173]
[337.50460815 67.51515198]
[350.97879028 76.86280060]
[349.35110474 93.18096924]
[334.29598999 99.68292999]
[321.30084229 89.68001556]
[306.37490845 88.19120789]
[291.44897461 86.70240021]
[278.01660156 93.13826752]
[265.05252075 84.06945038]
[250.12658691 82.58064270]
[235.13845825 83.17699432]
[220.37799072 85.84696198]
[209.23118591 95.72612762]
[194.27416992 90.56878662]
[179.51370239 93.23875427]
[164.75323486 95.90872192]
[149.99278259 98.57869720]
[135.23231506 101.24866486]
[120.47184753 103.91863251]
[117.64685059 111.09237671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 35]
[6 34]
[7 33]
[8 32]
[10 30]
[11 29]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[44 70]
[45 69]
[53 68]
[54 67]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
