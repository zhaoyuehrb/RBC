%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCAGAGGAUUCCUGCAGAGGAUCAAGACAGCACGUGGACCUCGCACAGCCUCUCCCACAGGUACC\
) } def
/len { sequence length } bind def

/coor [
[139.00733948 323.85421753]
[149.10661316 311.91525269]
[146.38986206 297.16333008]
[143.67312622 282.41137695]
[128.71850586 268.48471069]
[134.81166077 248.19221497]
[130.11149597 233.94761658]
[125.41133881 219.70301819]
[120.71118164 205.45843506]
[116.01101685 191.21383667]
[103.66812134 189.15997314]
[93.38684082 181.90019226]
[87.25045013 170.82730103]
[86.53625488 158.11434937]
[91.45018768 146.28816223]
[101.07318115 137.72715759]
[97.68782043 123.11416626]
[94.30246735 108.50118256]
[89.41116333 101.72776031]
[91.11168671 93.14630890]
[88.39494324 78.39438629]
[85.67819977 63.64245987]
[82.96145630 48.89053345]
[72.85268402 36.71994400]
[78.15690613 22.80180740]
[75.44016266 8.04988194]
[72.72341919 -6.70204353]
[62.61464691 -18.87263489]
[67.91886902 -32.79076767]
[54.76378250 -41.54971695]
[51.73720169 -57.06149673]
[60.63474274 -70.12324524]
[76.17765808 -72.98565674]
[89.14460754 -63.95051956]
[91.84252930 -48.37821198]
[82.67079926 -35.50751114]
[92.58525085 -24.39207840]
[87.47534943 -9.41878700]
[90.19209290 5.33313894]
[92.90883636 20.08506393]
[102.82328796 31.20049858]
[97.71338654 46.17378998]
[100.43013000 60.92571640]
[103.14687347 75.67764282]
[105.86361694 90.42956543]
[108.91545105 105.11582947]
[112.30081177 119.72881317]
[115.68616486 134.34179688]
[132.37413025 140.66432190]
[142.05935669 155.47056580]
[141.18109131 172.98829651]
[130.25561523 186.51367188]
[134.95578003 200.75827026]
[139.65592957 215.00286865]
[144.35609436 229.24745178]
[149.05625916 243.49205017]
[158.52693176 246.78346252]
[165.16795349 254.10586548]
[167.45535278 263.57803345]
[164.96093750 272.85192871]
[158.42504883 279.69464111]
[161.14179993 294.44656372]
[163.85853577 309.19848633]
[177.54838562 316.75640869]
[183.12902832 331.36428833]
[177.96545410 346.12475586]
[164.49574280 354.06838989]
[149.07987976 351.44439697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[16 48]
[17 47]
[18 46]
[20 45]
[21 44]
[22 43]
[23 42]
[25 40]
[26 39]
[27 38]
[29 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
