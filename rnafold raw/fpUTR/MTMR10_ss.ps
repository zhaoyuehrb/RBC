%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAGGGCCUGGGCGGCCGCACUGAGAGCUUUACGCCCGGAGGCGUCGGCGCUGCCACUGGCCCGCGACGGGAACGGGGCGAAAAGGCGGCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[26.31083298 151.17253113]
[26.75826263 166.16586304]
[19.93845367 179.52587891]
[7.53303480 187.95829773]
[-7.39907265 189.38383484]
[-21.17591476 183.45098877]
[-30.40040398 171.62268066]
[-32.79796600 156.81553650]
[-27.77741623 142.68067932]
[-16.57779884 132.70405579]
[-31.56081009 131.99032593]
[-46.54381943 131.27659607]
[-61.52682877 130.56286621]
[-76.50984192 129.84913635]
[-91.49285126 129.13540649]
[-106.47586060 128.42167664]
[-116.79329681 141.71321106]
[-132.82273865 146.25689697]
[-148.27119446 140.47222900]
[-157.19366455 126.79418182]
[-172.19177246 126.55619049]
[-182.29479980 138.49198914]
[-197.71501160 141.09027100]
[-211.17146301 133.12423706]
[-216.31042480 118.35517883]
[-210.70545959 103.75660706]
[-197.00302124 96.22151947]
[-181.67301941 99.30775452]
[-171.95379639 111.55808258]
[-156.95567322 111.79607391]
[-149.89193726 100.34785461]
[-137.97596741 93.87422943]
[-124.30970001 94.18354797]
[-112.51239777 101.30211639]
[-105.76213074 113.43866730]
[-90.77912140 114.15239716]
[-75.79611206 114.86612701]
[-60.81310272 115.57985687]
[-45.83008957 116.29357910]
[-30.84708023 117.00730896]
[-15.86407089 117.72103882]
[-7.77756214 113.18687439]
[2.28393483 115.98811340]
[16.86110878 112.45172882]
[27.40548134 101.93196869]
[42.64078522 106.19764709]
[57.21796036 102.66126251]
[71.79513550 99.12487793]
[86.37230682 95.58850098]
[96.62300110 86.07982635]
[110.09130859 89.83432770]
[124.66847992 86.29794312]
[139.24565125 82.76155853]
[153.82283020 79.22517395]
[168.07389832 74.54467773]
[181.90921021 68.74949646]
[195.74452209 62.95432281]
[202.60282898 56.63862991]
[210.11192322 57.20248032]
[224.12414551 51.84918976]
[238.13636780 46.49589539]
[249.29804993 31.95817184]
[266.46731567 35.18515778]
[280.30261230 29.38998222]
[294.13793945 23.59480476]
[307.97326660 17.79962921]
[320.24658203 6.10338974]
[334.88330078 14.65922070]
[330.71368408 31.09243774]
[313.76843262 31.63494301]
[299.93310547 37.43011856]
[286.09780884 43.22529602]
[272.26248169 49.02047348]
[267.31286621 60.18397141]
[255.68251038 65.06963348]
[243.48965454 60.50811386]
[229.47743225 65.86140442]
[215.46522522 71.21469879]
[201.53970337 76.78963470]
[187.70439148 82.58481598]
[173.86907959 88.37998962]
[173.03395081 90.74911499]
[171.24963379 92.95054626]
[168.57051086 94.64185333]
[165.16601562 95.50436401]
[161.31002808 95.27976990]
[157.35920715 93.80235291]
[142.78204346 97.33873749]
[128.20486450 100.87512207]
[113.62769318 104.41149902]
[103.37699890 113.92017365]
[89.90869141 110.16567230]
[75.33152008 113.70205688]
[60.75434494 117.23844147]
[46.17716980 120.77482605]
[34.59014130 131.54753113]
[20.39749146 127.02890778]
[5.82031870 130.56529236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[20 30]
[21 29]
[43 98]
[44 97]
[46 95]
[47 94]
[48 93]
[49 92]
[51 90]
[52 89]
[53 88]
[54 87]
[55 81]
[56 80]
[57 79]
[59 78]
[60 77]
[61 76]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
