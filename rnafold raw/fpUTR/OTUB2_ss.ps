%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGGUUUGCGGAGCGGUCGGGUGUAUUCUCCGCCGCCCCCACGCCCUCGAGGUCCCCGCCACCGAACCAGCGGCGGAGCCCGCCCGCGCCUCCCGCGGCAUUCCCGCACCGGAUCGCUCCUCGCUGGGGCGGGACCUGGCCUGGCGGCUCUGGUCACU\
) } def
/len { sequence length } bind def

/coor [
[99.37722778 292.93606567]
[84.45044708 298.81576538]
[70.61927795 290.68688965]
[68.49382019 274.78524780]
[79.70453644 263.30923462]
[80.87413025 248.35488892]
[82.04372406 233.40055847]
[70.61208344 223.88973999]
[66.92927551 209.29861450]
[72.61084747 195.17158508]
[85.67240143 187.00445557]
[86.84199524 172.05012512]
[88.01158142 157.09579468]
[89.18117523 142.14146423]
[90.35076904 127.18712616]
[91.52035522 112.23279572]
[79.26580811 103.58258820]
[65.56659698 109.69255066]
[61.32983017 114.87419891]
[55.91852188 116.80892181]
[51.21163940 115.76200867]
[37.28447342 121.33282471]
[23.35730553 126.90364838]
[9.43013954 132.47447205]
[-4.49702740 138.04528809]
[-6.60787296 153.25843811]
[-16.05515099 165.36811829]
[-30.29759216 171.11689758]
[-45.50404739 168.95837402]
[-57.58406448 159.47319031]
[-63.28816986 145.21279907]
[-61.08199692 130.01318359]
[-51.55898666 117.96295929]
[-37.28078842 112.30358124]
[-22.08816147 114.55738831]
[-10.06784725 124.11811829]
[3.85931993 118.54730225]
[17.78648567 112.97647858]
[31.71365356 107.40566254]
[45.64081955 101.83483887]
[59.45663834 95.99333954]
[73.15584564 89.88337708]
[88.49866486 84.88469696]
[99.15952301 90.73823547]
[107.68975830 78.39987946]
[116.21999359 66.06151581]
[124.75022888 53.72315979]
[121.28614044 36.60083008]
[131.06394958 22.53299332]
[147.65405273 19.91743851]
[148.82997131 4.13999224]
[162.31111145 -2.19309950]
[170.59898376 -14.69554996]
[178.88685608 -27.19799995]
[187.17471313 -39.70045090]
[195.46258545 -52.20289993]
[203.75045776 -64.70535278]
[212.03831482 -77.20780182]
[214.18881226 -86.13871002]
[220.61186218 -89.87116241]
[229.14208984 -102.20952606]
[237.67233276 -114.54788208]
[222.72755432 -113.26181793]
[211.13534546 -122.78129578]
[209.49032593 -137.69081116]
[218.72833252 -149.50856018]
[233.59399414 -151.51158142]
[245.63043213 -142.56037903]
[247.99069214 -127.74890137]
[257.90377808 -139.00637817]
[267.81686401 -150.26383972]
[277.72998047 -161.52131653]
[287.64306641 -172.77877808]
[297.55615234 -184.03625488]
[307.46923828 -195.29373169]
[310.81579590 -203.84861755]
[317.68725586 -206.67170715]
[327.81811523 -217.73361206]
[337.94897461 -228.79551697]
[348.07980347 -239.85742188]
[358.21066284 -250.91934204]
[350.65222168 -269.24472046]
[357.81518555 -290.58932495]
[379.48132324 -303.48901367]
[386.25204468 -316.87399292]
[393.02273560 -330.25897217]
[394.11529541 -339.37994385]
[400.05838013 -343.83712769]
[407.08895874 -357.08743286]
[414.11953735 -370.33776855]
[410.80932617 -386.03558350]
[421.12921143 -398.31887817]
[437.16268921 -397.76492310]
[446.61026001 -384.79870605]
[442.22451782 -369.36676025]
[427.36987305 -363.30715942]
[420.33926392 -350.05685425]
[413.30868530 -336.80654907]
[406.40771484 -323.48825073]
[399.63699341 -310.10330200]
[392.86630249 -296.71832275]
[398.03866577 -291.28726196]
[408.90097046 -301.63183594]
[419.24539185 -290.76934814]
[408.38345337 -280.42510986]
[413.55581665 -274.99404907]
[427.25503540 -281.10400391]
[440.95425415 -287.21398926]
[452.95697021 -299.18774414]
[467.78546143 -290.96878052]
[463.99264526 -274.44451904]
[447.06420898 -273.51477051]
[433.36499023 -267.40481567]
[419.66577148 -261.29483032]
[411.07205200 -245.33500671]
[397.09033203 -236.21202087]
[381.86807251 -235.04136658]
[369.27258301 -240.78848267]
[359.14172363 -229.72657776]
[349.01086426 -218.66467285]
[338.88000488 -207.60276794]
[328.74914551 -196.54086304]
[318.72671509 -185.38063049]
[308.81362915 -174.12316895]
[298.90054321 -162.86569214]
[288.98742676 -151.60823059]
[279.07434082 -140.35075378]
[269.16125488 -129.09327698]
[259.24816895 -117.83580780]
[250.01068115 -106.01765442]
[241.48045349 -93.67929077]
[232.95022583 -81.34093475]
[224.54077148 -68.91993713]
[216.25289917 -56.41748428]
[207.96504211 -43.91503525]
[199.67716980 -31.41258430]
[191.38929749 -18.91013336]
[183.10144043 -6.40768337]
[174.81356812 6.09476709]
[174.23045349 20.97795296]
[160.15650940 28.20530510]
[164.46141052 40.38123322]
[160.89912415 52.99739838]
[150.55883789 61.36903000]
[137.08859253 62.25339127]
[128.55834961 74.59175110]
[120.02812195 86.93011475]
[111.49788666 99.26847076]
[106.47469330 113.40238190]
[105.30509949 128.35671997]
[104.13550568 143.31105042]
[102.96591949 158.26538086]
[101.79632568 173.21971130]
[100.62673187 188.17404175]
[112.25971985 198.27255249]
[115.67586517 213.11112976]
[109.76934052 226.95225525]
[96.99805450 234.57014465]
[95.82846069 249.52447510]
[94.65887451 264.47882080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 160]
[6 159]
[7 158]
[11 154]
[12 153]
[13 152]
[14 151]
[15 150]
[16 149]
[17 42]
[18 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[44 148]
[45 147]
[46 146]
[47 145]
[50 141]
[52 139]
[53 138]
[54 137]
[55 136]
[56 135]
[57 134]
[58 133]
[60 132]
[61 131]
[62 130]
[69 129]
[70 128]
[71 127]
[72 126]
[73 125]
[74 124]
[75 123]
[77 122]
[78 121]
[79 120]
[80 119]
[81 118]
[84 101]
[85 100]
[86 99]
[88 98]
[89 97]
[90 96]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
