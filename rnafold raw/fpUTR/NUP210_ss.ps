%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGGCCUGGCGCGCGCGCGGGCGGGAGCGGAGGGCAACGGGGCGGCGCGGGCGGCCGGGCGCAGGGUCGCGGGAGGUGACGCGCGGCGAGG\
) } def
/len { sequence length } bind def

/coor [
[229.89753723 234.97749329]
[229.01768494 227.62860107]
[230.58580017 220.34153748]
[219.46101379 210.27976990]
[208.33622742 200.21800232]
[197.04487610 190.34352112]
[185.59008789 180.65910339]
[174.13529968 170.97468567]
[162.68052673 161.29026794]
[151.22573853 151.60585022]
[139.77095032 141.92143250]
[128.31617737 132.23701477]
[116.70116425 122.74536133]
[104.92917633 113.44911194]
[91.12273407 111.24142456]
[85.77457428 98.32287598]
[74.00258636 89.02662659]
[62.23059464 79.73038483]
[50.45860291 70.43413544]
[38.68661499 61.13788605]
[23.06105614 58.65745926]
[17.86789131 44.69750595]
[2.24233413 42.21707916]
[-2.95082998 28.25712395]
[-21.14542580 26.12021255]
[-27.17977905 9.73413754]
[-42.60515213 11.90107155]
[-54.72523499 2.70551467]
[-56.69601440 -12.01357555]
[-68.77206421 -20.91127205]
[-84.78562164 -19.93886948]
[-95.42272949 -31.94850922]
[-92.52351379 -47.72742081]
[-78.31200409 -55.17137909]
[-63.69005203 -48.57001114]
[-59.87436676 -32.98732376]
[-47.79831696 -24.08962631]
[-33.15618515 -26.56823730]
[-20.78260040 -17.71673584]
[-18.28208351 -2.34191346]
[-6.14917278 -3.82370520]
[4.01723719 3.66464043]
[6.34541845 16.48513222]
[21.12896538 18.30062866]
[27.16414070 32.92551422]
[41.94768524 34.74100876]
[47.98286057 49.36589432]
[59.75485229 58.66214371]
[71.52684021 67.95838928]
[83.29883575 77.25463867]
[95.07082367 86.55088806]
[108.87726593 88.75857544]
[114.22542572 101.67712402]
[125.99741364 110.97337341]
[134.86231995 113.92161560]
[138.00059509 120.78223419]
[149.45536804 130.46665955]
[160.91015625 140.15107727]
[172.36494446 149.83549500]
[183.81971741 159.51991272]
[195.27450562 169.20433044]
[206.72929382 178.88874817]
[215.49073792 182.13156128]
[218.39799500 189.09321594]
[229.52278137 199.15498352]
[240.64756775 209.21676636]
[264.40634155 211.25317383]
[272.59542847 232.92466736]
[285.50146484 240.56890869]
[298.40747070 248.21316528]
[311.31350708 255.85740662]
[324.21951294 263.50164795]
[337.12554932 271.14590454]
[352.94229126 271.52151489]
[359.94979858 284.66473389]
[375.19610596 280.50228882]
[388.87854004 288.41220093]
[392.87954712 303.70166016]
[384.82540894 317.29968262]
[369.49450684 321.13885498]
[355.98239136 312.94140625]
[352.30554199 297.57077026]
[337.41192627 297.74191284]
[329.48129272 284.05194092]
[316.57528687 276.40768433]
[303.66925049 268.76342773]
[290.76324463 261.11917114]
[277.85720825 253.47492981]
[264.95117188 245.83068848]
[258.85531616 249.44432068]
[251.86439514 250.89045715]
[244.73101807 249.97854614]
[238.23454285 246.77383423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[13 54]
[14 53]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[22 45]
[24 43]
[26 40]
[29 37]
[30 36]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
