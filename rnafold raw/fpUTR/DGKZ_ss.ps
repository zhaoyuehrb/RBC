%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUAGCUCUCCAAACUAGGACUUGCUCAGCAGAGGCCGCCAGCCCGGAGCUGGAUCCAGAGCCCGGCCUUGGGGACCCCAGCUCCCACCUGCGCCCUGCCUUCCAGAUCAGCCAACCGCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[69.55184937 109.46717072]
[58.55607224 119.66976166]
[47.56029510 129.87236023]
[36.56451416 140.07495117]
[25.69678116 150.41381836]
[14.95877743 160.88737488]
[4.22077465 171.36093140]
[4.35344219 188.80116272]
[-7.88904905 200.74618530]
[-24.64849472 200.20600891]
[-35.12204742 210.94401550]
[-45.59560013 221.68200684]
[-45.14799118 237.47996521]
[-56.06289291 248.90975952]
[-71.86469269 249.19032288]
[-83.17845917 238.15518188]
[-83.29193878 222.35130310]
[-72.13780212 211.15484619]
[-56.33360291 211.20846558]
[-45.86005020 200.47045898]
[-35.38649750 189.73245239]
[-37.34286880 176.93226624]
[-31.45115280 165.18260193]
[-19.67857361 158.91007996]
[-6.25277758 160.62292480]
[4.48522520 150.14936829]
[15.22322845 139.67581177]
[17.84343147 132.67652893]
[26.36192322 129.07916260]
[37.35770035 118.87657166]
[48.35348129 108.67398071]
[59.34925842 98.47138977]
[95.38880157 81.77356720]
[99.09015656 67.23741150]
[102.79151917 52.70125198]
[106.49288177 38.16509247]
[110.19424438 23.62893295]
[103.78298187 4.59401274]
[117.63876343 -8.80040169]
[120.61095428 -23.50298882]
[123.39962769 -38.24148560]
[126.00435638 -53.01360321]
[128.60906982 -67.78572083]
[118.00299072 -78.95787811]
[116.03215790 -94.05652618]
[123.24454498 -107.26431274]
[136.69027710 -113.61649323]
[139.29499817 -128.38861084]
[141.89971924 -143.16072083]
[144.50444031 -157.93284607]
[147.10916138 -172.70495605]
[149.71389771 -187.47708130]
[152.31861877 -202.24919128]
[154.92333984 -217.02130127]
[146.24505615 -236.53466797]
[159.81066895 -252.00857544]
[161.30418396 -266.93405151]
[162.79769897 -281.85949707]
[164.29122925 -296.78497314]
[165.78474426 -311.71041870]
[159.45994568 -326.21240234]
[168.42602539 -338.10604858]
[169.91954041 -353.03149414]
[165.48031616 -369.39395142]
[179.97441101 -378.18927002]
[192.43836975 -366.69638062]
[184.84500122 -351.53799438]
[183.35148621 -336.61251831]
[189.78311157 -323.17810059]
[180.71020508 -310.21688843]
[179.21669006 -295.29144287]
[177.72315979 -280.36596680]
[176.22964478 -265.44052124]
[174.73612976 -250.51506042]
[181.53715515 -244.51455688]
[184.80342102 -235.90489197]
[183.65994263 -226.62800598]
[178.24243164 -218.84144592]
[169.69544983 -214.41658020]
[167.09072876 -199.64447021]
[164.48600769 -184.87234497]
[161.88128662 -170.10023499]
[159.27656555 -155.32812500]
[156.67184448 -140.55599976]
[154.06712341 -125.78388977]
[151.46238708 -111.01177216]
[161.92468262 -100.44395447]
[164.18478394 -85.56592560]
[157.16874695 -72.05190277]
[143.38119507 -65.18099976]
[140.77647400 -50.40887833]
[138.17175293 -35.63676453]
[140.13009644 -28.42424393]
[135.31353760 -20.53079605]
[132.34135437 -5.82820988]
[138.80378723 2.25911665]
[139.70758057 12.79356766]
[134.50439453 22.25082207]
[124.73040009 27.33029556]
[121.02904510 41.86645508]
[117.32768250 56.40261459]
[113.62631989 70.93877411]
[109.92495728 85.47492981]
[120.93731689 75.29024506]
[135.93634033 75.11927032]
[147.17800903 85.05028534]
[148.85820007 99.95588684]
[140.10945129 112.14027405]
[125.44875336 115.31262970]
[112.44416046 107.83345795]
[119.28731537 121.18153381]
[126.13047791 134.52961731]
[139.31146240 143.28015137]
[138.23257446 158.13563538]
[152.29435730 166.57356262]
[151.74728394 182.96357727]
[137.15414429 190.44505310]
[123.52710724 181.32167053]
[124.88450623 164.97879028]
[112.19298553 157.18299866]
[112.78240204 141.37277222]
[105.93923950 128.02468872]
[99.09608459 114.67661285]
[91.71002197 113.37425232]
[82.06822968 124.86494446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 27]
[6 26]
[7 25]
[10 21]
[11 20]
[12 19]
[33 103]
[34 102]
[35 101]
[36 100]
[37 99]
[39 95]
[40 94]
[41 92]
[42 91]
[43 90]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[62 68]
[63 67]
[110 123]
[111 122]
[112 121]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
