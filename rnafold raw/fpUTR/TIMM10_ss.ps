%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCACGUGCUUCCGCUGGAGCCUCUCGGGAGGCGGGUAACGUUAUAGUAUUUGUCAGAAGUUGGGGUCUCCGUGGGCAUUGUGAUCCGUCCCAGGCAGUGGAUUAGGAGGCCAGAAGGAGAUCCCUUCCACGGUGCUAGGCUGAG\
) } def
/len { sequence length } bind def

/coor [
[-32.40461731 245.98390198]
[-42.64493179 241.27322388]
[-54.11282730 250.94210815]
[-65.58071899 260.61099243]
[-77.04861450 270.27987671]
[-78.41384888 274.56869507]
[-80.85641479 277.83654785]
[-83.90872192 279.86630249]
[-87.08106232 280.62045288]
[-89.92391205 280.23202515]
[-102.17047119 288.89352417]
[-114.41703033 297.55505371]
[-126.66358948 306.21655273]
[-138.91015625 314.87805176]
[-151.15670776 323.53958130]
[-156.40246582 331.10403442]
[-163.75639343 332.25170898]
[-170.85728455 346.38989258]
[-185.73463440 347.10641479]
[-198.16229248 355.50604248]
[-210.58993530 363.90563965]
[-220.32701111 377.78460693]
[-236.35906982 372.27014160]
[-235.49822998 355.33807373]
[-218.98954773 351.47799683]
[-206.56190491 343.07839966]
[-194.13426208 334.67877197]
[-187.92228699 321.14138794]
[-172.15602112 319.82406616]
[-159.81822205 311.29302979]
[-147.57167053 302.63150024]
[-135.32510376 293.97000122]
[-123.07854462 285.30847168]
[-110.83198547 276.64697266]
[-98.58542633 267.98547363]
[-86.71750641 258.81201172]
[-75.24961090 249.14311218]
[-63.78171539 239.47421265]
[-52.31382370 229.80532837]
[-54.78392029 211.35049438]
[-45.63073730 194.96563721]
[-28.34896469 187.27204895]
[-9.75811958 191.50080872]
[1.07122147 181.12171936]
[1.65561676 168.99589539]
[10.65342045 160.25904846]
[23.59453392 160.01556396]
[34.64173508 149.86868286]
[45.68893814 139.72178650]
[56.73613739 129.57490540]
[67.78334045 119.42801666]
[78.83054352 109.28112793]
[89.87774658 99.13423920]
[93.24245453 91.74315643]
[101.26878357 88.89228821]
[112.52886963 78.98216248]
[114.14190674 66.13966370]
[123.78277588 58.11803818]
[135.90228271 58.82148743]
[147.37017822 49.15259933]
[158.83807373 39.48371124]
[160.65042114 34.44040298]
[163.91711426 30.98297691]
[167.77090454 29.40190506]
[171.35734558 29.59274292]
[183.41731262 20.67324448]
[195.47726440 11.75374699]
[207.53721619 2.83424902]
[219.59718323 -6.08524847]
[231.65713501 -15.00474644]
[243.71708679 -23.92424393]
[255.77705383 -32.84374237]
[267.83700562 -41.76324081]
[267.44985962 -58.64007950]
[277.08172607 -72.30154419]
[292.79315186 -77.50215149]
[308.35885620 -72.38896942]
[320.22677612 -81.56243896]
[332.09469604 -90.73590088]
[338.28146362 -105.29730988]
[353.08306885 -106.95914459]
[364.95098877 -116.13260651]
[371.13775635 -130.69401550]
[385.93936157 -132.35585022]
[397.80728149 -141.52931213]
[409.67520142 -150.70277405]
[421.54312134 -159.87623596]
[433.41104126 -169.04971313]
[445.27896118 -178.22317505]
[456.84881592 -187.76980591]
[468.10891724 -197.67993164]
[479.36898804 -207.59004211]
[487.26431274 -222.59338379]
[503.86697388 -219.15994263]
[505.16378784 -202.25566101]
[489.27911377 -196.32995605]
[478.01904297 -186.41984558]
[466.75894165 -176.50971985]
[466.18991089 -172.96357727]
[463.83239746 -169.52937317]
[459.76437378 -167.06440735]
[454.45242310 -166.35525513]
[442.58450317 -157.18179321]
[430.71658325 -148.00831604]
[418.84866333 -138.83485413]
[406.98074341 -129.66139221]
[395.11282349 -120.48792267]
[389.77493286 -106.58267212]
[374.12445068 -104.26468658]
[362.25653076 -95.09122467]
[356.91864014 -81.18596649]
[341.26815796 -78.86798096]
[329.40023804 -69.69451904]
[317.53231812 -60.52104950]
[319.16238403 -47.23170090]
[313.95507812 -34.77921295]
[303.17822266 -26.47380829]
[289.59512329 -24.58072662]
[276.75650024 -29.70328140]
[264.69653320 -20.78378487]
[252.63659668 -11.86428738]
[240.57662964 -2.94478917]
[228.51667786 5.97470856]
[216.45672607 14.89420605]
[204.39675903 23.81370354]
[192.33680725 32.73320007]
[180.27684021 41.65269852]
[168.50695801 50.95160675]
[157.03906250 60.62049484]
[145.57116699 70.28938293]
[140.54573059 87.07258606]
[122.43898773 90.24224854]
[111.17890167 100.15237427]
[100.02463531 110.18144226]
[88.97743225 120.32833099]
[77.93022919 130.47521973]
[66.88302612 140.62210083]
[55.83582687 150.76899719]
[44.78862381 160.91587830]
[33.74142075 171.06277466]
[28.67143822 188.73184204]
[11.45030499 191.95106506]
[0.62096316 202.33013916]
[4.15480900 213.35899353]
[3.28797317 224.85597229]
[-1.81377578 235.13790894]
[-10.36751938 242.71409607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[5 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[17 29]
[19 27]
[20 26]
[21 25]
[43 143]
[44 142]
[47 140]
[48 139]
[49 138]
[50 137]
[51 136]
[52 135]
[53 134]
[55 133]
[56 132]
[59 130]
[60 129]
[61 128]
[65 127]
[66 126]
[67 125]
[68 124]
[69 123]
[70 122]
[71 121]
[72 120]
[73 119]
[77 114]
[78 113]
[79 112]
[81 110]
[82 109]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
[89 102]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
