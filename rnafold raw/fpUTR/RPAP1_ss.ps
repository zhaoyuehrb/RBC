%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGAAACGCGAUCUCUGCGGGGCAAGAUGGCGGCGCCCAGACAGGCCUGGAGCACGGAUGAAUAAGAGGGAACCCCCACACGGAGACACUGCUGGAGAGAGUCGUACUGGGGAGGCAGCUGGAGCAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[112.07437134 179.17401123]
[101.60908508 189.92005920]
[87.01033020 193.36628723]
[72.84416199 188.43478394]
[63.54133987 176.66798401]
[62.01150513 161.74620056]
[68.73313904 148.33651733]
[81.60142517 140.63374329]
[89.89313507 128.13385010]
[98.18484497 115.63394165]
[91.10164642 113.16853333]
[77.83220673 120.16297150]
[64.56277466 127.15740967]
[55.96261597 140.43701172]
[41.09583282 139.52705383]
[27.82640266 146.52148438]
[14.55696869 153.51591492]
[1.28753614 160.51036072]
[-4.91356897 167.34205627]
[-12.37015724 167.50909424]
[-25.79760742 174.19515991]
[-39.22505569 180.88124084]
[-50.70858002 193.35380554]
[-65.87267303 185.77182007]
[-62.78482819 169.10144043]
[-45.91113281 167.45379639]
[-32.48368073 160.76771545]
[-19.05623245 154.08163452]
[-5.70690107 147.24092102]
[7.56253147 140.24649048]
[20.83196449 133.25204468]
[34.10139847 126.25761414]
[41.75243759 113.47830200]
[57.56834030 113.88797760]
[70.83777618 106.89353943]
[84.10720825 99.89910126]
[94.71380615 89.29250336]
[101.70824432 76.02307129]
[99.93943024 56.00193787]
[116.57605743 46.25114441]
[122.95020294 32.67284393]
[129.32434082 19.09454155]
[135.69848633 5.51624060]
[142.07263184 -8.06206036]
[148.28953552 -21.71307564]
[154.34834290 -35.43498230]
[154.96745300 -44.64055252]
[160.70884705 -49.40132904]
[167.08299255 -62.97962952]
[173.45713806 -76.55792999]
[179.67404175 -90.20894623]
[185.73284912 -103.93085480]
[178.19425964 -121.23458862]
[185.48646545 -138.29946899]
[202.60720825 -144.59265137]
[208.02583313 -158.57974243]
[213.44445801 -172.56681824]
[218.86308289 -186.55390930]
[219.05638123 -195.77824402]
[224.57177734 -200.79910278]
[212.45120239 -209.75326538]
[202.83180237 -221.34115601]
[196.26936340 -234.88641357]
[193.14149475 -249.59976196]
[193.62571716 -264.62503052]
[197.68957520 -279.08898926]
[205.09266663 -292.15200806]
[215.40084839 -303.05691528]
[228.01181030 -311.17282104]
[242.19010925 -316.03158569]
[257.11019897 -317.35488892]
[271.90438843 -315.07012939]
[277.64465332 -328.92831421]
[283.38488770 -342.78652954]
[280.70907593 -358.96588135]
[293.55291748 -369.16235352]
[308.70376587 -362.88668823]
[310.57571411 -346.59472656]
[297.24310303 -337.04626465]
[291.50283813 -323.18807983]
[285.76257324 -309.32986450]
[297.83923340 -300.48437500]
[307.45361328 -288.99856567]
[314.04351807 -275.53732300]
[317.22201538 -260.88122559]
[316.80004883 -245.88128662]
[312.79788208 -231.40956116]
[305.44390869 -218.30842590]
[295.16183472 -207.34155273]
[282.54617310 -199.14938354]
[268.32791138 -194.21179199]
[253.33207703 -192.81985474]
[238.42997742 -195.05883789]
[232.85015869 -181.13528442]
[227.43153381 -167.14819336]
[222.01290894 -153.16111755]
[216.59428406 -139.17402649]
[223.40556335 -129.89137268]
[224.86430359 -118.34921265]
[220.48699951 -107.44025421]
[211.26766968 -99.95585632]
[199.45475769 -97.87203979]
[193.39595032 -84.15013123]
[193.57347107 -76.69378662]
[187.03544617 -70.18378448]
[180.66130066 -56.60548401]
[174.28715515 -43.02718353]
[168.07025146 -29.37616920]
[162.01144409 -15.65426064]
[162.18896484 -8.19791508]
[155.65093994 -1.68791497]
[149.27679443 11.89038658]
[142.90264893 25.46868706]
[136.52850342 39.04698944]
[130.15435791 52.62528992]
[134.50733948 61.99087524]
[132.90527344 72.41697693]
[125.64384460 80.36976624]
[114.97767639 83.01750946]
[107.98323822 96.28694153]
[123.02185822 100.43451691]
[133.15635681 116.97135925]
[139.21517944 130.69326782]
[145.27398682 144.41517639]
[151.33280945 158.13708496]
[163.26171875 170.18437195]
[154.98748779 184.98213196]
[138.47750854 181.12768555]
[137.61090088 164.19589233]
[131.55207825 150.47398376]
[125.49327087 136.75207520]
[119.43445587 123.03017426]
[112.35124969 120.56476593]
[111.08972931 135.51162720]
[109.82820129 150.45848083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 36]
[12 35]
[13 34]
[15 32]
[16 31]
[17 30]
[18 29]
[20 28]
[21 27]
[22 26]
[37 120]
[38 119]
[40 115]
[41 114]
[42 113]
[43 112]
[44 111]
[45 109]
[46 108]
[48 107]
[49 106]
[50 105]
[51 103]
[52 102]
[55 97]
[56 96]
[57 95]
[58 94]
[60 93]
[72 81]
[73 80]
[74 79]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
