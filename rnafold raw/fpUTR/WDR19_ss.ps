%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCGGCCCCUCGAGGCACCGCCUUUCAAUUAGCACUCGCUGAUUGGUCGCUGCUCGCGCGGUCUCCUGGGUGACGGGAACGCGGUAGCCUGCUUGGUGGAGACCGGGUGCGCCUGCGUACUUCAUAGUUCGCGUAGCGGCUCGAGCGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[88.62165070 121.51631165]
[80.67072296 114.79180908]
[76.25782013 105.35981750]
[61.32017136 103.99359894]
[46.38251877 102.62738037]
[31.44486809 101.26116180]
[16.99733353 107.70936584]
[5.02768517 98.84501648]
[-9.92304516 97.63024902]
[-24.88531876 96.56704712]
[-39.84759140 95.50385284]
[-51.72491837 105.58189392]
[-66.88364410 104.29051971]
[-76.41831970 92.90519714]
[-91.38059235 91.84200287]
[-106.34286499 90.77880096]
[-121.30513763 89.71560669]
[-136.26741028 88.65241241]
[-148.14472961 98.73045349]
[-163.30346680 97.43907928]
[-172.83813477 86.05375671]
[-187.80041504 84.99056244]
[-202.76268005 83.92736053]
[-215.21881104 101.20790863]
[-235.41563416 107.55039978]
[-255.26432800 100.58115387]
[-266.91485596 83.22477722]
[-281.89559937 83.98451233]
[-296.87634277 84.74424744]
[-311.85708618 85.50399017]
[-326.83782959 86.26372528]
[-341.81857300 87.02346039]
[-356.79931641 87.78320312]
[-371.78009033 88.54293823]
[-386.76083374 89.30267334]
[-400.22793579 98.66048431]
[-414.94836426 91.43265533]
[-415.77896118 75.05455780]
[-401.86529541 66.37457275]
[-387.52056885 74.32192993]
[-372.53982544 73.56218719]
[-357.55908203 72.80245209]
[-342.57830811 72.04271698]
[-327.59756470 71.28297424]
[-312.61682129 70.52323914]
[-297.63607788 69.76350403]
[-282.65533447 69.00376129]
[-267.67459106 68.24402618]
[-264.84860229 59.42116547]
[-259.67279053 51.70901108]
[-252.54264832 45.72024918]
[-244.00944519 41.93499756]
[-234.73776245 40.66234589]
[-225.45361328 42.01514816]
[-216.88769531 45.90013885]
[-209.71781921 52.02425003]
[-204.51531982 59.91668701]
[-201.69949341 68.96508789]
[-186.73721313 70.02828979]
[-171.77494812 71.09148407]
[-160.72615051 61.16878891]
[-145.53713989 62.03387451]
[-135.20420837 73.69013977]
[-120.24194336 74.75333405]
[-105.27967072 75.81652832]
[-90.31739807 76.87973022]
[-75.35512543 77.94292450]
[-64.30633545 68.02022552]
[-49.11731720 68.88531494]
[-38.78439713 80.54158020]
[-23.82212257 81.60477448]
[-8.85984993 82.66796875]
[-1.92413402 79.98926544]
[6.39390230 83.90736389]
[19.77299500 77.36143494]
[32.81108475 86.32350922]
[47.74873734 87.68972778]
[62.68638992 89.05594635]
[77.62403870 90.42216492]
[93.42291260 76.56582642]
[114.12450409 80.17786407]
[126.16978455 71.23856354]
[138.21507263 62.29925537]
[150.26034546 53.35995102]
[162.30563354 44.42064667]
[174.35090637 35.48134232]
[176.79837036 20.09798431]
[189.14134216 11.20384789]
[203.79194641 13.63192940]
[215.83721924 4.69262505]
[218.85351562 -1.29748392]
[223.72724915 -4.36218452]
[228.55668640 -4.35309792]
[240.95434570 -12.79691696]
[253.35200500 -21.24073601]
[265.74966431 -29.68455505]
[278.14733887 -38.12837219]
[290.54498291 -46.57219315]
[302.94262695 -55.01601028]
[309.57382202 -70.01465607]
[325.90539551 -71.50194550]
[335.13681030 -57.94787598]
[327.77160645 -43.29571915]
[311.38647461 -42.61835480]
[298.98880005 -34.17453384]
[286.59115601 -25.73071671]
[274.19348145 -17.28689766]
[261.79583740 -8.84307766]
[249.39816284 -0.39925888]
[237.00051880 8.04456043]
[224.77653503 16.73790741]
[212.73124695 25.67721176]
[210.81126404 40.40301514]
[198.72297668 49.64033127]
[183.29022217 47.52662277]
[171.24493408 56.46593094]
[159.19964600 65.40523529]
[147.15437317 74.34453583]
[135.10908508 83.28384399]
[123.06380463 92.22314453]
[124.15988922 102.95265198]
[120.51208496 113.10239410]
[130.05000305 124.67945099]
[139.58792114 136.25650024]
[149.12582397 147.83355713]
[158.66374207 159.41061401]
[168.20166016 170.98767090]
[176.12240601 175.65702820]
[177.81268311 182.89736938]
[187.11401367 194.66535950]
[196.41534424 206.43333435]
[205.71665955 218.20132446]
[215.01799011 229.96929932]
[229.64547729 235.99816895]
[231.46734619 250.78092957]
[240.76866150 262.54891968]
[256.19961548 268.10031128]
[258.84072876 284.28540039]
[245.97506714 294.45431519]
[230.83772278 288.14614868]
[229.00068665 271.85021973]
[219.69935608 260.08224487]
[205.73716736 254.89511108]
[203.25000000 239.27062988]
[193.94868469 227.50263977]
[184.64735413 215.73466492]
[175.34603882 203.96667480]
[166.04470825 192.19869995]
[156.62460327 180.52558899]
[147.08668518 168.94853210]
[137.54878235 157.37147522]
[128.01086426 145.79441833]
[118.47294617 134.21736145]
[108.93503571 122.64031219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[6 76]
[8 74]
[9 72]
[10 71]
[11 70]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[21 60]
[22 59]
[23 58]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[89 112]
[90 111]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
[122 154]
[123 153]
[124 152]
[125 151]
[126 150]
[127 149]
[129 148]
[130 147]
[131 146]
[132 145]
[133 144]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
