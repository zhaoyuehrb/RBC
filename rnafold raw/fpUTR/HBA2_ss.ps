%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAACCCUGGCGCGCUCGCGGGCCGGCACUCUUCUGGUCCCCACAGACUCAGAGAGAACCCACC\
) } def
/len { sequence length } bind def

/coor [
[99.81955719 139.11599731]
[92.35210419 138.36148071]
[85.16622162 136.19465637]
[78.52645874 132.69526672]
[72.67726898 127.99217987]
[67.83399963 122.25852966]
[64.17494965 115.70539856]
[61.83484268 108.57405853]
[60.89982986 101.12705994]
[46.10137177 98.67639923]
[31.30291939 96.22573853]
[16.50446320 93.77507782]
[1.70600903 91.32441711]
[-13.17283916 96.70312500]
[-24.46500397 86.99043274]
[-39.26345825 84.53977203]
[-54.41563034 90.81223297]
[-67.25728607 80.61302948]
[-64.57804108 64.43422699]
[-49.13406372 58.91919327]
[-36.81279755 69.74131775]
[-22.01434326 72.19197845]
[-8.19397926 66.63799286]
[4.15666962 76.52596283]
[18.95512390 78.97662354]
[33.75357819 81.42728424]
[48.55203247 83.87794495]
[63.35048676 86.32860565]
[80.23807526 66.24263000]
[106.01976013 61.34956360]
[129.09217834 73.85159302]
[141.96374512 66.14948273]
[154.83532715 58.44736862]
[167.70689392 50.74525452]
[173.72015381 43.39805603]
[181.36727905 43.00013351]
[194.58572388 35.90980530]
[207.80416870 28.81947708]
[220.85276794 21.42122459]
[233.72433472 13.71911144]
[246.59591675 6.01699829]
[250.20372009 -9.36998749]
[263.67889404 -17.62801170]
[279.02688599 -13.85773468]
[287.14196777 -0.29599437]
[283.20962524 15.01126862]
[269.56286621 22.98252678]
[254.29803467 18.88857460]
[241.42645264 26.59068680]
[228.55487061 34.29280090]
[224.28681946 40.65050888]
[214.89450073 42.03792191]
[201.67605591 49.12825012]
[188.45761108 56.21857452]
[175.40901184 63.61682892]
[162.53742981 71.31893921]
[149.66586304 79.02105713]
[136.79428101 86.72316742]
[138.65272522 93.99491882]
[139.08810425 101.48774719]
[138.08442688 108.92580414]
[135.67863464 116.03524780]
[131.95927429 122.55433655]
[127.06330872 128.24307251]
[121.17098236 132.89199829]
[114.49921417 136.32997131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[15 22]
[16 21]
[31 58]
[32 57]
[33 56]
[34 55]
[36 54]
[37 53]
[38 52]
[39 50]
[40 49]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
