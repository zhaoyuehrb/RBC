%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUCGGCGCAGGCGCAGUCCGCGCGGGUUCUCGCGCGGAGAAGGGGUGCGAGCGGCGGCGGCGGCGGAGGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[120.35438538 171.18075562]
[113.94836426 165.32157898]
[110.50267029 157.24865723]
[110.70783997 148.37741089]
[114.60655975 140.29930115]
[107.10655975 127.30892181]
[99.60655975 114.31854248]
[87.59510040 107.16197205]
[87.40306091 93.18145752]
[79.90306091 80.19107819]
[72.40306091 67.20069885]
[57.40153885 63.00640488]
[49.98052216 49.72547150]
[54.07159042 35.44966125]
[46.57159042 22.45928001]
[39.07159042 9.46889877]
[31.57159042 -3.52148271]
[11.15815639 -7.15508747]
[-0.29343104 -24.10544014]
[3.84038734 -43.85541534]
[-5.64629316 -55.47449112]
[-15.13297367 -67.09356689]
[-24.61965370 -78.71263885]
[-34.10633469 -90.33171844]
[-43.59301758 -101.95079041]
[-53.07969666 -113.56986237]
[-62.56637573 -125.18893433]
[-72.05305481 -136.80801392]
[-87.57005310 -142.11413574]
[-90.46737671 -158.25531006]
[-77.76451111 -168.62687683]
[-62.52907944 -162.55946350]
[-60.43398285 -146.29469299]
[-50.94730377 -134.67561340]
[-41.46062088 -123.05654144]
[-31.97394180 -111.43746948]
[-22.48726082 -99.81839752]
[-13.00057983 -88.19931793]
[-3.51389956 -76.58024597]
[5.97278118 -64.96117401]
[15.45946217 -53.34209824]
[25.21374321 -55.41436768]
[35.08324432 -53.62091064]
[43.58454514 -48.18568802]
[49.42261124 -39.88339996]
[51.68802261 -29.92934990]
[49.99836349 -19.80158997]
[44.56196976 -11.02148247]
[52.06196976 1.96889830]
[59.56196976 14.95927906]
[67.06197357 27.94966125]
[81.47071838 31.54459953]
[89.26184082 44.61185074]
[85.39344025 59.70069885]
[92.89344025 72.69107819]
[100.39344025 85.68145752]
[112.40489960 92.83802795]
[112.59693909 106.81854248]
[120.09693909 119.80892181]
[127.59693909 132.79930115]
[147.89907837 141.88708496]
[148.57402039 163.39717102]
[158.06069946 175.01625061]
[167.54737854 186.63533020]
[177.03405762 198.25439453]
[186.52073669 209.87347412]
[196.00741577 221.49255371]
[211.52441406 226.79867554]
[214.42173767 242.93984985]
[201.71887207 253.31141663]
[186.48344421 247.24398804]
[184.38833618 230.97923279]
[174.90165710 219.36015320]
[165.41497803 207.74107361]
[155.92829895 196.12200928]
[146.44161987 184.50292969]
[136.95494080 172.88386536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 60]
[6 59]
[7 58]
[9 56]
[10 55]
[11 54]
[14 51]
[15 50]
[16 49]
[17 48]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
