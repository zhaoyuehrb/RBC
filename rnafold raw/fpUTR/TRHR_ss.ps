%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGAUGGAACUGCUGCAAUAAAGGUGGGCGCUGGAAAGAAGAUGUUUUGAGAAGUCAGUGUUUCCGAGAAACUUUAAGCUUCUAAAG\
) } def
/len { sequence length } bind def

/coor [
[78.14800262 318.26510620]
[62.87324905 316.65966797]
[50.45708466 307.61895752]
[44.23939514 293.57489014]
[45.89270782 278.30523682]
[54.97229004 265.91744995]
[69.03578186 259.74383545]
[70.60370636 244.82598877]
[72.17163086 229.90817261]
[73.73956299 214.99034119]
[75.30748749 200.07250977]
[72.90544891 195.71299744]
[73.37553406 189.76947021]
[77.54079437 184.18168640]
[80.14551544 169.40957642]
[82.75024414 154.63746643]
[69.20010376 148.31327820]
[57.74784088 138.69833374]
[49.17349243 126.44754028]
[44.06108475 112.39533234]
[42.75883865 97.49883270]
[45.35545349 82.77269745]
[51.67406845 69.21996307]
[61.28429794 57.76374817]
[73.53157043 49.18436813]
[87.58168030 44.06618500]
[102.47763824 42.75781631]
[105.08236694 27.98569870]
[107.68708801 13.21358299]
[109.77468109 -1.64043772]
[111.34261322 -16.55826569]
[112.91053772 -31.47609520]
[114.47846222 -46.39392471]
[116.04639435 -61.31175232]
[117.61431885 -76.22957611]
[119.18224335 -91.14740753]
[105.87797546 -98.44618225]
[96.40721893 -110.25075531]
[92.18888092 -124.74279785]
[93.83586884 -139.70524597]
[101.06625366 -152.86148071]
[112.75094604 -162.22167969]
[127.08991241 -166.38380432]
[128.65783691 -181.30163574]
[121.49703217 -196.05476379]
[130.91598511 -209.47918701]
[147.22529602 -207.76501465]
[153.64733887 -192.67562866]
[143.57566833 -179.73371887]
[142.00773621 -164.81588745]
[155.16801453 -157.76347351]
[164.65126038 -146.17842102]
[168.98831177 -131.80641174]
[167.48843384 -116.82849121]
[160.34921265 -103.53018188]
[148.63111877 -93.95265198]
[134.10006714 -89.57948303]
[132.53215027 -74.66165161]
[130.96421814 -59.74382401]
[129.39628601 -44.82599640]
[127.82836914 -29.90816689]
[126.26043701 -14.99033928]
[124.69251251 -0.07251077]
[127.09455109 4.28700829]
[126.62446594 10.23052216]
[122.45920563 15.81830597]
[119.85448456 30.59042168]
[117.24975586 45.36253738]
[130.79989624 51.68672180]
[142.25215149 61.30166245]
[150.82650757 73.55245972]
[155.93891907 87.60466766]
[157.24116516 102.50116730]
[154.64454651 117.22730255]
[148.32592773 130.78002930]
[138.71569824 142.23625183]
[126.46842957 150.81562805]
[112.41831970 155.93382263]
[97.52236176 157.24218750]
[94.91763306 172.01429749]
[92.31291199 186.78642273]
[90.22531891 201.64044189]
[88.65738678 216.55827332]
[87.08946228 231.47608948]
[85.52153778 246.39392090]
[83.95360565 261.31173706]
[96.42620850 270.27444458]
[102.73181915 284.27926636]
[101.17426300 299.55895996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[14 81]
[15 80]
[16 79]
[27 68]
[28 67]
[29 66]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
