%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGCGGCGGCGGCGGCAGCAGCGGGGCUGGGGGCGGCGAGUGGCCCGCGCGACACGCGCCGGCCUCGACCCUAUGCUUUGAUUCGCGUGGCGCAGGCGCCUACUGCCCCGCCGGCGGGGCCCGGGCUUCCUGCCGCGGG\
) } def
/len { sequence length } bind def

/coor [
[245.58747864 431.74694824]
[251.16105652 415.20346069]
[244.23481750 401.89828491]
[231.49494934 394.18176270]
[231.98580933 378.36816406]
[225.05958557 365.06298828]
[218.13334656 351.75784302]
[211.20712280 338.45266724]
[204.28089905 325.14752197]
[197.35466003 311.84234619]
[191.43128967 307.32748413]
[190.42605591 298.17053223]
[183.79171753 284.71743774]
[177.15739441 271.26434326]
[170.52305603 257.81124878]
[163.88873291 244.35816956]
[148.80278015 235.45602417]
[150.06265259 217.12016296]
[143.13641357 203.81500244]
[136.21018982 190.50984192]
[130.28681946 185.99499512]
[129.28158569 176.83802795]
[122.64724731 163.38493347]
[107.56129456 154.48278809]
[108.82116699 136.14694214]
[101.89493561 122.84177399]
[94.96871185 109.53661346]
[85.45281219 97.94145203]
[73.75453949 88.55260468]
[62.05627441 79.16374969]
[46.45077896 76.56009674]
[41.36793518 62.55960083]
[29.66966629 53.17074966]
[17.97139931 43.78189468]
[6.27313185 34.39304352]
[-5.42513514 25.00419235]
[-21.03063393 22.40054131]
[-26.11347771 8.40004253]
[-37.81174469 -0.98880988]
[-49.51001358 -10.37766171]
[-61.20827866 -19.76651382]
[-72.90654755 -29.15536690]
[-88.51204681 -31.75901794]
[-93.59488678 -45.75951767]
[-105.29315948 -55.14836884]
[-116.99142456 -64.53722382]
[-128.89172363 -73.66864014]
[-140.98838806 -82.53828430]
[-157.34010315 -83.78476715]
[-164.19157410 -98.68408203]
[-154.49459839 -111.90908051]
[-138.22459412 -109.85503387]
[-132.11874390 -94.63495636]
[-120.02207947 -85.76531219]
[-115.17960358 -85.61034393]
[-110.40130615 -82.36056519]
[-107.60256958 -76.23548889]
[-95.90430450 -66.84663391]
[-84.20603943 -57.45778275]
[-69.43727875 -55.52568436]
[-63.51769257 -40.85363388]
[-51.81942749 -31.46478081]
[-40.12115860 -22.07592964]
[-28.42289352 -12.68707752]
[-16.72462463 -3.29822493]
[-1.95586562 -1.36612725]
[3.96371675 13.30592537]
[15.66198444 22.69477654]
[27.36025047 32.08362961]
[39.05851746 41.47248077]
[50.75678635 50.86133194]
[65.52554321 52.79343033]
[71.44512939 67.46548462]
[83.14339447 76.85433197]
[94.84165955 86.24318695]
[109.61377716 83.63846588]
[117.39537811 70.81478882]
[125.17697906 57.99110794]
[132.95857239 45.16743088]
[140.74017334 32.34375381]
[134.61558533 18.08650589]
[138.07371521 2.95967770]
[149.78485107 -7.22015858]
[165.24580383 -8.53864765]
[178.51153564 -0.48880404]
[184.48110962 13.83404350]
[180.85906982 28.92246819]
[169.03820801 38.97466278]
[153.56385803 40.12535095]
[145.78225708 52.94902802]
[138.00065613 65.77270508]
[130.21905518 78.59638214]
[122.43745422 91.42006683]
[116.34165955 99.51268005]
[108.27387238 102.61038208]
[115.20010376 115.91554260]
[122.12632751 129.22070312]
[134.21281433 133.86370850]
[139.69174194 145.14987183]
[136.10034180 156.75059509]
[142.73466492 170.20368958]
[149.51535034 183.58361816]
[156.44158936 196.88877869]
[163.36781311 210.19393921]
[175.45429993 214.83694458]
[180.93321228 226.12310791]
[177.34182739 237.72383118]
[183.97615051 251.17692566]
[190.61048889 264.63000488]
[197.24481201 278.08309937]
[203.87915039 291.53619385]
[210.65982056 304.91613770]
[217.58605957 318.22128296]
[224.51228333 331.52645874]
[231.43852234 344.83160400]
[238.36474609 358.13677979]
[245.29096985 371.44192505]
[258.52624512 380.11013794]
[257.53997803 394.97207642]
[264.46621704 408.27722168]
[277.73547363 410.83898926]
[286.95437622 420.45220947]
[288.90042114 433.43130493]
[283.08175659 444.97711182]
[289.71609497 458.43017578]
[296.35043335 471.88327026]
[302.98477173 485.33636475]
[309.76544189 498.71630859]
[316.69168091 512.02148438]
[323.61788940 525.32659912]
[338.42446899 531.50274658]
[342.68878174 546.96868896]
[333.13961792 559.86029053]
[317.10229492 560.28820801]
[306.87924194 547.92419434]
[310.31274414 532.25286865]
[303.38650513 518.94769287]
[296.46029663 505.64251709]
[290.53692627 501.12765503]
[289.53167725 491.97070312]
[282.89733887 478.51760864]
[276.26300049 465.06451416]
[269.62869263 451.61141968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[5 117]
[6 116]
[7 115]
[8 114]
[9 113]
[10 112]
[12 111]
[13 110]
[14 109]
[15 108]
[16 107]
[18 104]
[19 103]
[20 102]
[22 101]
[23 100]
[25 97]
[26 96]
[27 95]
[28 75]
[29 74]
[30 73]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[44 59]
[45 58]
[46 57]
[47 54]
[48 53]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[124 143]
[125 142]
[126 141]
[127 140]
[128 138]
[129 137]
[130 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
