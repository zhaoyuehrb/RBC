%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGGACGCAGAGCUGCCUAACCGCAAGAACGCCUGGCCGGAGCUGCCCUCUGCAGCCGAGCCGGCGCCCCCUGCCCUUCGCCGCCGCGCUGGGCGGGCGCCCCCGCCGCCCUCACUCCGCUGCUCCCGGCUCCUCGCGCGCAGGUCGCGGAGCUCCGCCACCGCUGGGUGCGGCGAGGCCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[94.01484680 136.16238403]
[82.07786560 131.97401428]
[72.27565765 123.97710419]
[59.16241074 131.26014709]
[46.04916382 138.54319763]
[32.93591690 145.82623291]
[28.49285507 160.75596619]
[15.09040833 167.95521545]
[0.88456964 163.62742615]
[-12.22867775 170.91047668]
[-25.34192467 178.19351196]
[-38.45517349 185.47656250]
[-51.56842041 192.75961304]
[-64.68166351 200.04264832]
[-68.97697449 212.21772766]
[-80.06450653 218.01028442]
[-91.73796844 214.79406738]
[-104.97045898 221.85815430]
[-105.58145905 237.14128113]
[-113.70658112 249.98181152]
[-127.07910919 256.98480225]
[-142.06121826 256.35821533]
[-154.63340759 248.37039185]
[-167.86590576 255.43447876]
[-181.09838867 262.49856567]
[-194.27171326 269.67236328]
[-202.57931519 283.13693237]
[-217.46244812 282.55239868]
[-230.57569885 289.83544922]
[-236.34968567 304.80343628]
[-251.69482422 309.48388672]
[-264.83959961 300.28637695]
[-265.70050049 284.26644897]
[-253.61708069 273.71319580]
[-237.85873413 276.72219849]
[-224.74548340 269.43914795]
[-217.37583923 256.49551392]
[-201.55476379 256.55911255]
[-197.22557068 250.55152893]
[-188.16247559 249.26606750]
[-174.92997742 242.20198059]
[-161.69749451 235.13790894]
[-161.33891296 220.24707031]
[-153.52297974 207.44990540]
[-140.26333618 200.23548889]
[-125.07314301 200.62928772]
[-112.03453827 208.62565613]
[-98.80204773 201.56158447]
[-90.35520935 186.18838501]
[-71.96471405 186.92941284]
[-58.85146332 179.64636230]
[-45.73821640 172.36331177]
[-32.62496948 165.08027649]
[-19.51172256 157.79722595]
[-6.39847565 150.51417542]
[-2.56454039 136.16717529]
[10.63040733 128.59432983]
[25.65287018 132.71299744]
[38.76611710 125.42994690]
[51.87936401 118.14689636]
[64.99261475 110.86385345]
[63.36027145 98.96520233]
[65.66156769 87.17765045]
[71.64943695 76.76670074]
[80.68102264 68.85007477]
[75.55072021 54.75468826]
[70.42041779 40.65929794]
[65.29011536 26.56390953]
[60.15981293 12.46852016]
[55.02951050 -1.62686908]
[49.89920807 -15.72225857]
[45.86918259 -19.09897041]
[43.76096725 -23.26999664]
[43.55406570 -27.36523438]
[44.88370514 -30.65014267]
[40.46237946 -44.98373413]
[36.04104996 -59.31732559]
[31.61972427 -73.65091705]
[17.92763901 -81.07820129]
[13.64797115 -95.67749023]
[20.81313324 -108.68502808]
[16.39180565 -123.01861572]
[11.97047710 -137.35221863]
[-0.41243416 -148.10374451]
[2.97242737 -164.14976501]
[18.64300728 -168.98350525]
[30.47875595 -157.63241577]
[26.30406952 -141.77354431]
[30.72539711 -127.43994904]
[35.14672470 -113.10635376]
[48.39426422 -106.39530182]
[53.08230972 -91.92198181]
[45.95331573 -78.07225037]
[50.37464523 -63.73865509]
[54.79597092 -49.40506363]
[59.21730042 -35.07147217]
[63.99459839 -20.85256004]
[69.12490082 -6.75717115]
[74.25520325 7.33821821]
[79.38550568 21.43360710]
[84.51580811 35.52899551]
[89.64611053 49.62438583]
[94.77641296 63.71977615]
[114.49887848 66.33513641]
[129.94989014 78.86839294]
[136.57745361 97.62715149]
[151.42797852 99.73944092]
[166.27851868 101.85172272]
[181.12904358 103.96400452]
[195.97958374 106.07629395]
[210.73179626 100.35941315]
[222.24269104 109.81185913]
[237.09321594 111.92414093]
[251.94374084 114.03642273]
[266.79428101 116.14871216]
[260.10916138 102.72077942]
[266.28414917 89.05075073]
[280.77880859 85.19007111]
[292.93536377 93.97747040]
[293.81518555 108.95164490]
[282.76977539 119.10272980]
[297.39367676 122.44053650]
[312.01760864 125.77835083]
[326.64151001 129.11616516]
[341.26544189 132.45397949]
[356.44131470 127.98149872]
[367.12777710 138.35688782]
[381.75170898 141.69470215]
[396.37561035 145.03251648]
[410.99954224 148.37033081]
[425.62347412 151.70814514]
[440.24737549 155.04595947]
[429.92150879 144.16587830]
[425.24719238 129.91278076]
[427.12435913 115.03070831]
[435.19158936 102.38478088]
[447.89581299 94.40962982]
[462.79113770 92.64064789]
[477.00988770 97.41840363]
[487.81466675 107.82307434]
[493.12527466 121.85152435]
[491.91931152 136.80296326]
[484.42895508 149.79891968]
[472.09628296 158.33737183]
[457.29779053 160.77459717]
[470.97036743 166.94390869]
[484.64294434 173.11320496]
[500.40414429 171.73645020]
[508.82287598 184.02360535]
[522.49548340 190.19291687]
[536.16802979 196.36221313]
[549.84063721 202.53152466]
[566.09552002 200.36119080]
[575.88684082 213.51651001]
[569.14208984 228.46443176]
[552.79968262 229.82780457]
[543.67132568 216.20411682]
[529.99871826 210.03480530]
[516.32617188 203.86549377]
[502.65356445 197.69619751]
[487.87033081 199.51422119]
[478.47366333 186.78579712]
[464.80105591 180.61648560]
[451.12847900 174.44718933]
[436.90957642 169.66987610]
[422.28564453 166.33206177]
[407.66171265 162.99424744]
[393.03781128 159.65643311]
[378.41387939 156.31863403]
[363.78997803 152.98081970]
[349.66009521 157.69203186]
[337.92761230 147.07789612]
[323.30371094 143.74008179]
[308.67977905 140.40226746]
[294.05587769 137.06445312]
[279.43194580 133.72663879]
[264.68197632 130.99923706]
[249.83146667 128.88696289]
[234.98092651 126.77467346]
[220.13040161 124.66239166]
[206.44039917 130.53034973]
[193.86729431 120.92681885]
[179.01675415 118.81453705]
[164.16622925 116.70225525]
[149.31570435 114.58996582]
[134.46516418 112.47768402]
[128.17073059 123.45101929]
[118.52077484 131.63101196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 61]
[4 60]
[5 59]
[6 58]
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[17 48]
[18 47]
[23 42]
[24 41]
[25 40]
[26 38]
[28 36]
[29 35]
[65 103]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
[71 97]
[75 96]
[76 95]
[77 94]
[78 93]
[81 90]
[82 89]
[83 88]
[106 186]
[107 185]
[108 184]
[109 183]
[110 182]
[112 180]
[113 179]
[114 178]
[115 177]
[121 176]
[122 175]
[123 174]
[124 173]
[125 172]
[127 170]
[128 169]
[129 168]
[130 167]
[131 166]
[132 165]
[145 164]
[146 163]
[147 162]
[149 160]
[150 159]
[151 158]
[152 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
