%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGACGCCGCCGCCUCCUCCCGCCGCGCGGACCGUGGAGCGGGGUCGCAGCCGCCUGCCCGCCCUGCGGUGGGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[176.40577698 163.94596863]
[172.79632568 148.79310608]
[160.10652161 140.79502869]
[147.11614990 133.29502869]
[133.84471130 126.30438232]
[120.57328796 119.31372833]
[107.30186462 112.32307434]
[93.32441711 112.67327881]
[85.70748138 100.94834900]
[72.43605804 93.95770264]
[59.16463089 86.96704865]
[45.89320374 79.97639465]
[33.19118500 83.04843903]
[22.20720291 76.74559021]
[18.68371010 65.00331116]
[5.69332933 57.50331497]
[-10.12662125 57.30392838]
[-17.28011131 44.23959351]
[-31.40600395 50.38494492]
[-46.26815796 47.07288742]
[-56.21262741 35.77812958]
[-57.58301926 20.97069931]
[-70.57340240 13.47069836]
[-83.56378174 5.97069883]
[-96.55416107 -1.52930129]
[-113.29441833 -4.21258354]
[-115.35016632 -21.04143524]
[-99.74808502 -27.67553139]
[-89.05416107 -14.51968193]
[-76.06378174 -7.01968241]
[-63.07339859 0.48031768]
[-50.08301926 7.98031759]
[-36.57421112 1.76339316]
[-21.82043076 4.72817898]
[-11.52102661 15.94315434]
[-9.78011131 31.24921227]
[5.11067963 30.91214943]
[13.19332886 44.51293182]
[26.18371010 52.01293182]
[43.58761597 50.95144653]
[52.88385391 66.70496368]
[66.15528107 73.69561768]
[79.42671204 80.68627167]
[92.69813538 87.67692566]
[106.67558289 87.32672119]
[114.29251862 99.05165100]
[127.56394196 106.04229736]
[140.83537292 113.03295135]
[154.10679626 120.02360535]
[161.14547729 120.15543365]
[166.16090393 123.47975159]
[168.10459900 128.10523987]
[180.79438782 136.10330200]
[196.02188110 132.82289124]
[208.77720642 141.11483765]
[211.81072998 155.65214539]
[224.50053406 163.65020752]
[237.19032288 171.64828491]
[249.88012695 179.64634705]
[262.72262573 187.39683533]
[275.71301270 194.89683533]
[288.70339966 202.39683533]
[301.69378662 209.89683533]
[314.68414307 217.39683533]
[327.67453003 224.89683533]
[344.06475830 224.35574341]
[352.49752808 238.42060852]
[344.29797363 252.62268066]
[327.90106201 252.35211182]
[320.17453003 237.88722229]
[307.18414307 230.38722229]
[294.19378662 222.88722229]
[281.20339966 215.38722229]
[268.21301270 207.88722229]
[255.22262573 200.38722229]
[247.65983582 199.75428772]
[241.88206482 192.33613586]
[229.19226074 184.33807373]
[216.50247192 176.34001160]
[203.81266785 168.34194946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 49]
[5 48]
[6 47]
[7 46]
[9 44]
[10 43]
[11 42]
[12 41]
[15 39]
[16 38]
[18 36]
[22 32]
[23 31]
[24 30]
[25 29]
[56 80]
[57 79]
[58 78]
[59 77]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
