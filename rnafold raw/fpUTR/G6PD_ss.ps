%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGCAGGGGCUGGCCUGGGAUGCGCGCGCACCUGCCCUCGCCCCGCCCCGCCCGCACGAGGGGUGGUGGCCGAGGCCCCGCCCCGCACGCCUCGCCUGAGGCGGGUCCGCUCAGCCCAGGCGCCCGCCCCCGCCCCCGCCGAUUAA\
) } def
/len { sequence length } bind def

/coor [
[166.49977112 630.03881836]
[171.48432922 615.72338867]
[181.06683350 603.97814941]
[194.09014893 596.22125244]
[191.26078796 581.49053955]
[188.43144226 566.75976562]
[178.43235779 555.72039795]
[183.42773438 540.70849609]
[180.59837341 525.97778320]
[177.76901245 511.24703979]
[174.93965149 496.51629639]
[172.11030579 481.78555298]
[156.38491821 472.51043701]
[152.29598999 454.39160156]
[162.86909485 438.73538208]
[159.42124939 424.13699341]
[155.97341919 409.53863525]
[152.52557373 394.94024658]
[149.07772827 380.34188843]
[145.62989807 365.74353027]
[142.18205261 351.14514160]
[131.72648621 340.53710938]
[136.08456421 325.32797241]
[132.63673401 310.72961426]
[122.18115234 300.12158203]
[126.53923798 284.91244507]
[123.09140015 270.31408691]
[119.64355469 255.71571350]
[115.01377106 249.88946533]
[116.28035736 240.77326965]
[111.77443695 234.85070801]
[113.23294067 225.76322937]
[110.40358734 211.03248596]
[107.57422638 196.30174255]
[104.74487305 181.57099915]
[101.91551208 166.84027100]
[99.08615875 152.10952759]
[96.25679779 137.37878418]
[91.87674713 131.36254883]
[93.52651215 122.30783844]
[91.00835419 107.52071381]
[84.43910217 94.03572845]
[74.34742737 82.93807220]
[64.25574493 71.84040833]
[54.04763794 60.84975433]
[43.72423172 49.96732712]
[33.40082169 39.08489609]
[23.07741737 28.20246696]
[12.75401020 17.32003593]
[2.43060303 6.43760729]
[-7.89280367 -4.44482231]
[-22.80903625 -0.78400940]
[-37.55279160 -5.08717632]
[-48.15807343 -16.19679260]
[-51.77211380 -31.12442780]
[-47.42275238 -45.85462189]
[-36.27994919 -56.42502975]
[-21.34105873 -59.99225998]
[-6.62457037 -55.59674835]
[3.91085672 -44.42086792]
[7.43124437 -29.47086906]
[2.98962593 -14.76822948]
[13.31303310 -3.88579965]
[23.63644028 6.99663019]
[33.95984650 17.87905884]
[44.28325272 28.76148987]
[54.60665894 39.64391708]
[64.93006897 50.52634811]
[71.86225128 53.23278809]
[75.35340881 61.74873352]
[85.44508362 72.84638977]
[95.53675842 83.94404602]
[110.34960175 81.58191681]
[116.48915100 67.89593506]
[122.62870026 54.20996094]
[128.76824951 40.52398682]
[134.90780640 26.83801079]
[141.04734802 13.15203476]
[134.82696533 1.15980053]
[136.64447021 -12.03006935]
[145.60997009 -21.60821533]
[158.26913452 -24.21357346]
[164.69586182 -37.76706696]
[166.01884460 -54.66931915]
[182.62678528 -58.07704926]
[190.49887085 -43.06150436]
[178.24935913 -31.34034348]
[171.82263184 -17.78684998]
[178.15158081 -2.23834777]
[171.16950989 13.39770031]
[154.73332214 19.29158401]
[148.59378052 32.97755814]
[142.45422363 46.66353607]
[136.31468201 60.34951019]
[130.17512512 74.03548431]
[124.03558350 87.72146606]
[121.81361389 96.11634827]
[117.19868469 102.07214355]
[111.42428589 105.04708099]
[105.79547119 105.00255585]
[108.31362915 119.78967285]
[110.98754120 134.54942322]
[113.81689453 149.28016663]
[116.64625549 164.01091003]
[119.47560883 178.74165344]
[122.30496979 193.47239685]
[125.13432312 208.20312500]
[127.96368408 222.93386841]
[130.94818115 237.63397217]
[134.24192810 252.26786804]
[137.68977356 266.86624146]
[141.13760376 281.46459961]
[151.83978271 293.11682129]
[147.23509216 307.28176880]
[150.68293762 321.88015747]
[161.38511658 333.53234863]
[156.78042603 347.69729614]
[160.22827148 362.29568481]
[163.67610168 376.89404297]
[167.12394714 391.49243164]
[170.57177734 406.09078979]
[174.01962280 420.68914795]
[177.46746826 435.28753662]
[188.67666626 439.48434448]
[196.36521912 448.49993896]
[198.69178772 459.99536133]
[195.18669128 471.06176758]
[186.84103394 478.95620728]
[189.67039490 493.68695068]
[192.49975586 508.41769409]
[195.32911682 523.14843750]
[198.15846252 537.87915039]
[208.35992432 549.97216797]
[203.16217041 563.93041992]
[205.99153137 578.66119385]
[208.82089233 593.39190674]
[223.79122925 595.77197266]
[237.04319763 603.13140869]
[246.97656250 614.58148193]
[252.39183044 628.73956299]
[252.63505554 643.89593506]
[247.67689514 658.22052002]
[238.11605835 669.98339844]
[225.10705566 677.76428223]
[210.22079468 680.62347412]
[195.25486755 678.21582031]
[182.01647949 670.83197021]
[172.10423279 659.36364746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 136]
[5 135]
[6 134]
[8 132]
[9 131]
[10 130]
[11 129]
[12 128]
[15 123]
[16 122]
[17 121]
[18 120]
[19 119]
[20 118]
[21 117]
[23 115]
[24 114]
[26 112]
[27 111]
[28 110]
[30 109]
[32 108]
[33 107]
[34 106]
[35 105]
[36 104]
[37 103]
[38 102]
[40 101]
[41 100]
[42 72]
[43 71]
[44 70]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[73 96]
[74 95]
[75 94]
[76 93]
[77 92]
[78 91]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
