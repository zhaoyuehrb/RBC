%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAGACAGACAGAAGAAAGGGAUUCUUUUCAGUCUAGAAAAAUGCUCACCCCUUCCUCAGAACAUUUCCACUGUGACGAAAAGAGACUGAUGAAGCCUCAGAGAGAAAGGCAACUCUGGGUGGUGAUGCAAUAGUGCAGAAUCCAGA\
) } def
/len { sequence length } bind def

/coor [
[-16.39963150 286.80432129]
[-22.40623665 282.25802612]
[-33.96393585 291.81936646]
[-39.66521072 306.57763672]
[-54.40368271 308.72860718]
[-65.96138000 318.28997803]
[-77.51908112 327.85131836]
[-89.07677460 337.41268921]
[-94.77805328 352.17092896]
[-109.51652527 354.32189941]
[-121.07422638 363.88327026]
[-123.77559662 370.03494263]
[-128.49160767 373.35348511]
[-133.32199097 373.59072876]
[-145.26994324 382.65972900]
[-157.21789551 391.72869873]
[-169.16584778 400.79769897]
[-181.11380005 409.86669922]
[-193.06173706 418.93566895]
[-196.65484619 434.57119751]
[-211.18116760 441.38037109]
[-225.49739075 434.13983154]
[-228.62130737 418.40386963]
[-218.15652466 406.24377441]
[-202.13072205 406.98773193]
[-190.18278503 397.91873169]
[-178.23483276 388.84976196]
[-166.28688049 379.78076172]
[-154.33892822 370.71179199]
[-142.39099121 361.64279175]
[-130.63558960 352.32556152]
[-119.07788086 342.76422119]
[-114.20329285 328.68984985]
[-98.63813782 325.85498047]
[-87.08043671 316.29364014]
[-75.52274323 306.73226929]
[-63.96504211 297.17089844]
[-59.09045029 283.09655762]
[-43.52529526 280.26168823]
[-31.96759605 270.70031738]
[-38.74135208 247.77729797]
[-33.61188507 224.37187195]
[-17.79555130 206.29554749]
[4.83067799 198.06425476]
[28.67946053 201.77015686]
[36.71686172 189.10523987]
[44.75426483 176.44032288]
[52.65859985 163.69192505]
[60.42900467 150.86146545]
[68.19940948 138.03100586]
[75.96981812 125.20053864]
[83.74021912 112.37007904]
[80.38086700 94.30011749]
[92.89963531 80.84317780]
[93.21376801 65.84646606]
[93.52790833 50.84975433]
[93.84204102 35.85304260]
[86.39544678 21.89385986]
[94.39759064 9.33141708]
[94.71172333 -5.66529274]
[95.02586365 -20.66200256]
[95.33999634 -35.65871429]
[81.13101959 -44.05273819]
[73.12284088 -58.37548828]
[73.40937805 -74.68881989]
[81.81850433 -88.56130219]
[95.98445892 -96.27199554]
[95.98445892 -111.27199554]
[95.98445892 -126.27199554]
[95.98445892 -141.27200317]
[82.95082855 -149.52597046]
[76.46940613 -163.52578735]
[78.60838318 -178.80413818]
[88.68523407 -190.48577881]
[103.48445892 -194.84313965]
[118.28368378 -190.48577881]
[128.36051941 -178.80413818]
[130.49951172 -163.52578735]
[124.01808167 -149.52597046]
[110.98445892 -141.27200317]
[110.98445892 -126.27199554]
[110.98445892 -111.27199554]
[110.98445892 -96.27199554]
[123.26506042 -90.21656036]
[131.76823425 -79.40002441]
[134.78196716 -65.90752411]
[131.65959167 -52.37170792]
[122.95742035 -41.45904541]
[110.33670807 -35.34457779]
[110.02257538 -20.34786606]
[109.70843506 -5.35115671]
[109.39430237 9.64555359]
[116.86336517 22.53207207]
[108.83875275 36.16717911]
[108.52461243 51.16389084]
[108.21047974 66.16059875]
[107.89634705 81.15731049]
[113.98553467 85.10691833]
[118.30969238 90.93609619]
[133.25708008 89.68093109]
[148.20448303 88.42575836]
[163.15187073 87.17059326]
[178.09925842 85.91542816]
[193.04666138 84.66025543]
[207.99404907 83.40509033]
[214.46086121 69.47397614]
[227.03605652 60.65581512]
[242.33697510 59.32264709]
[256.24774170 65.83309174]
[265.02645874 78.43586731]
[266.31164551 93.74089050]
[259.75762939 107.63119507]
[247.12741089 116.37034607]
[231.81842041 117.60756683]
[217.94874573 111.01004791]
[209.24922180 98.35248566]
[194.30181885 99.60765076]
[179.35443115 100.86281586]
[164.40704346 102.11798859]
[149.45964050 103.37315369]
[134.51225281 104.62831879]
[119.56485748 105.88349152]
[110.76589203 117.36360168]
[96.57068634 120.14048004]
[88.80027771 132.97094727]
[81.02987671 145.80140686]
[73.25946808 158.63186646]
[65.48906708 171.46234131]
[63.70033646 180.48901367]
[57.41918182 184.47772217]
[49.38178253 197.14263916]
[41.34437943 209.80755615]
[46.63685989 215.28982544]
[51.00329590 221.52922058]
[54.33720779 228.37109375]
[56.55768204 235.64611816]
[57.61134338 243.17451477]
[57.47362900 250.77046204]
[56.14936829 258.24670410]
[53.67262268 265.41915894]
[50.10581207 272.11148071]
[45.53814316 278.15927124]
[40.08337402 283.41433716]
[33.87699509 287.74813843]
[27.07284355 291.05499268]
[19.83930969 293.25463867]
[12.35515499 294.29425049]
[4.80510426 294.14956665]
[-2.62471843 292.82562256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[5 37]
[6 36]
[7 35]
[8 34]
[10 32]
[11 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[45 132]
[46 131]
[47 130]
[48 128]
[49 127]
[50 126]
[51 125]
[52 124]
[54 97]
[55 96]
[56 95]
[57 94]
[59 92]
[60 91]
[61 90]
[62 89]
[67 83]
[68 82]
[69 81]
[70 80]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
