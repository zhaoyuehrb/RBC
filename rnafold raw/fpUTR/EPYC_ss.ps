%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCAUUGGUCAGGGGCAAAUACCACUAGCUCUGCAUCCUCAGUCACUUUGUGCCAUUUCAUCAGGUCAGAGCCAAAGGAAAGCUUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[140.11845398 166.22012329]
[125.30123138 163.88563538]
[112.78211975 155.62741089]
[113.30310059 140.63645935]
[105.65885162 153.54248047]
[98.01460266 166.44850159]
[95.14499664 183.15783691]
[78.29428864 185.02597046]
[71.83441162 169.35095215]
[85.10857391 158.80426025]
[92.75282288 145.89822388]
[100.39707947 132.99220276]
[97.01450348 126.29831696]
[90.24935150 112.91053009]
[86.86677551 106.21664429]
[71.94210815 104.71520996]
[57.01743698 103.21376801]
[42.09276962 101.71233368]
[27.16810226 100.21089935]
[18.78776741 113.01826477]
[5.40983152 120.45394897]
[-9.89155102 120.80929565]
[-23.60023689 114.00263977]
[-32.56606674 101.59810638]
[-34.72875977 86.44615936]
[-29.59134865 72.02861786]
[-18.33436966 61.65851593]
[-3.54459286 57.71883392]
[11.37939739 61.11487579]
[23.00817680 71.06626129]
[28.66953850 85.28623199]
[43.59420395 86.78766632]
[58.51887131 88.28910065]
[73.44354248 89.79054260]
[88.36820984 91.29197693]
[102.83524323 87.32904053]
[114.91129303 78.43135071]
[121.77920532 61.44778061]
[139.17732239 59.95695877]
[150.94931030 50.66071320]
[162.72129822 41.36446381]
[174.49330139 32.06821442]
[176.47866821 16.61842346]
[188.54956055 7.35840225]
[203.26634216 9.34636211]
[203.94598389 -1.76446426]
[210.58700562 -10.41969681]
[220.72193909 -13.81116009]
[230.80654907 -11.01453686]
[243.17317200 -19.50374413]
[255.53979492 -27.99295044]
[267.90640259 -36.48215485]
[280.27304077 -44.97136307]
[285.71536255 -52.56476974]
[293.19775391 -53.52949905]
[305.84115601 -61.60073471]
[318.48452759 -69.67197418]
[318.42855835 -85.09923553]
[326.74136353 -98.09542847]
[340.77032471 -104.51351166]
[356.03884888 -102.30549622]
[367.67483521 -92.17596436]
[371.96527100 -77.35720062]
[367.54107666 -62.57781601]
[355.81399536 -52.55387115]
[340.52612305 -50.48395920]
[326.55575562 -57.02858734]
[313.91238403 -48.95735168]
[301.26898193 -40.88611603]
[288.76223755 -32.60474014]
[276.39562988 -24.11553383]
[264.02899170 -15.62632656]
[251.66236877 -7.13712025]
[239.29574585 1.35208619]
[232.50430298 19.32669640]
[212.56259155 21.11835289]
[211.08474731 35.89507675]
[199.27871704 45.49048996]
[183.78953552 43.84020615]
[172.01754761 53.13645554]
[160.24555969 62.43270111]
[148.47357178 71.72895050]
[146.69725037 83.82225037]
[136.78906250 91.64905548]
[123.80899048 90.50740051]
[111.73294067 99.40509033]
[126.59645844 97.38619995]
[141.49334717 95.63046265]
[155.78027344 100.20033264]
[166.89286804 110.27555847]
[172.83653259 124.04773712]
[172.54443359 139.04489136]
[166.06898499 152.57518005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 12]
[5 11]
[6 10]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[36 86]
[37 85]
[39 82]
[40 81]
[41 80]
[42 79]
[45 76]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[55 69]
[56 68]
[57 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
