%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGACGGGCGCAGCCUCGGCAGCGGCGGCGGCGGAGCCCUGAGGCGACAGCAGCUGCGGGAGGCGACGGGCUGCGGCCUGCGGAACCUGAGGCAGCUGGGGAGGGCCGGGCGCGCCGGCCGGAUAGCGAGCCGCGCUGGCGGCGGCGGUGGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[65.66884613 562.63848877]
[50.17937088 561.71343994]
[38.21325684 551.83459473]
[34.37172318 536.80053711]
[40.13191605 522.39221191]
[53.27892685 514.14990234]
[54.17315292 499.17657471]
[55.06737900 484.20324707]
[48.10257721 471.03735352]
[56.64881516 457.72299194]
[57.54304504 442.74966431]
[58.43727112 427.77633667]
[51.47246933 414.61044312]
[60.01870728 401.29608154]
[60.91293335 386.32275391]
[61.80715942 371.34942627]
[62.55248642 356.36795044]
[63.14883423 341.37982178]
[63.74518204 326.39169312]
[56.51998901 313.36685181]
[64.79981995 299.88522339]
[65.39616394 284.89706421]
[65.99251556 269.90893555]
[66.58885956 254.92079163]
[67.18521118 239.93264771]
[64.29296112 233.08668518]
[67.94535065 224.65328979]
[68.83958435 209.67997742]
[69.73381042 194.70664978]
[70.62803650 179.73333740]
[61.93011093 164.51829529]
[72.12802124 149.21618652]
[72.72436523 134.22805786]
[62.76894379 123.00800323]
[50.80543900 132.98358154]
[35.65837097 131.56196594]
[26.22190094 120.09512329]
[11.26931858 118.90337372]
[-3.68326426 117.71161652]
[-18.25138474 125.24168396]
[-31.90875053 116.16378021]
[-30.60583687 99.81647491]
[-15.68296719 93.01647186]
[-2.49151182 102.75903320]
[12.46107101 103.95079041]
[27.41365433 105.14253998]
[38.54731750 95.31517029]
[53.72834015 96.31077576]
[63.96069717 108.05541992]
[65.73506165 91.15945435]
[74.66448975 77.55838776]
[88.21329498 69.92321014]
[86.13226318 55.06827164]
[84.05123138 40.21332932]
[81.97019958 25.35838699]
[79.88916779 10.50344467]
[77.80813599 -4.35149717]
[75.72709656 -19.20643997]
[62.19097519 -26.56031990]
[55.65693283 -40.31385422]
[58.44142914 -55.10271835]
[69.27065277 -65.29418182]
[67.18962097 -80.14912415]
[65.10858917 -95.00406647]
[62.58549500 -109.79034424]
[59.62258530 -124.49480438]
[54.83550262 -132.33992004]
[56.75000381 -139.52093506]
[54.08003235 -154.28140259]
[51.41006470 -169.04185486]
[48.74009705 -183.80232239]
[46.07012939 -198.56278992]
[35.06636810 -210.72212219]
[40.35164261 -226.24623108]
[56.48890686 -229.16523743]
[66.87753296 -216.47633362]
[60.83059311 -201.23275757]
[63.50056076 -186.47229004]
[66.17052460 -171.71183777]
[68.84049988 -156.95137024]
[71.51046753 -142.19090271]
[74.32704163 -127.45771790]
[77.28995514 -112.75325012]
[80.06320190 -110.49316406]
[81.85433960 -106.75351715]
[81.96915436 -102.02265930]
[79.96353149 -97.08509827]
[82.04456329 -82.23015594]
[84.12559509 -67.37521362]
[97.33843994 -60.55181122]
[104.07954407 -47.09738922]
[101.57633209 -32.07782364]
[90.58203888 -21.28747177]
[92.66307068 -6.43252993]
[94.74411011 8.42241192]
[96.82514191 23.27735329]
[98.90617371 38.13229752]
[100.98720551 52.98723602]
[103.06823730 67.84217834]
[108.47828674 68.82856750]
[113.64263916 70.71829987]
[118.41162872 73.45661163]
[122.64705658 76.96414948]
[126.22616577 81.13925934]
[129.04525757 85.86095428]
[143.68789673 82.60626984]
[158.33053589 79.35158539]
[172.97319031 76.09690857]
[187.61582947 72.84222412]
[202.25848389 69.58753967]
[212.04937744 56.87857819]
[228.09194946 56.75358582]
[238.07969666 69.30844879]
[234.35087585 84.91214752]
[219.76591492 91.59486389]
[205.51315308 84.23018646]
[190.87051392 87.48487091]
[176.22787476 90.73954773]
[161.58522034 93.99423218]
[146.94258118 97.24891663]
[132.29994202 100.50359344]
[131.27578735 110.75906372]
[127.00390625 120.40349579]
[119.77375793 128.41270447]
[110.19581604 133.88636780]
[99.15149689 136.14784241]
[87.71250916 134.82440186]
[87.11615753 149.81254578]
[95.29421234 159.83268738]
[94.45686340 172.33694458]
[85.60135651 180.62756348]
[84.70713043 195.60087585]
[83.81290436 210.57420349]
[82.91867828 225.54751587]
[82.17334747 240.52899170]
[81.57700348 255.51713562]
[80.98065948 270.50527954]
[80.38430786 285.49340820]
[79.78796387 300.48156738]
[86.97049713 314.57843018]
[78.73332214 326.98803711]
[78.13697052 341.97616577]
[77.54062653 356.96432495]
[80.33793640 365.71856689]
[76.78047943 372.24365234]
[75.88625336 387.21697998]
[74.99202728 402.19030762]
[81.89286804 416.42718506]
[73.41059113 428.67056274]
[72.51636505 443.64389038]
[71.62213898 458.61721802]
[78.52297974 472.85409546]
[70.04070282 485.09747314]
[69.14647675 500.07080078]
[68.25225067 515.04412842]
[80.32482147 524.79260254]
[84.32922363 539.78405762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 155]
[7 154]
[8 153]
[10 151]
[11 150]
[12 149]
[14 147]
[15 146]
[16 145]
[17 143]
[18 142]
[19 141]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[27 134]
[28 133]
[29 132]
[30 131]
[32 128]
[33 127]
[34 49]
[37 46]
[38 45]
[39 44]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[58 93]
[62 89]
[63 88]
[64 87]
[65 83]
[66 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
