%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUUCUGCACUGCUCAUCUGGGCAGAGGAAGCUUCAGAAAGCUGCCAAGGCACCAUCUCCAGGAACUCCCAGCACGCAGAAUCCAUCUGAGAAU\
) } def
/len { sequence length } bind def

/coor [
[99.21650696 263.48123169]
[99.57160950 248.35742188]
[104.58474731 234.08424377]
[113.76480103 222.06002808]
[126.21238708 213.46276855]
[121.90171814 199.09552002]
[117.59104919 184.72825623]
[113.28038788 170.36099243]
[108.96971893 155.99372864]
[104.65905762 141.62648010]
[80.44208527 137.03994751]
[62.99718094 119.62807465]
[48.70160675 124.17082977]
[34.40603256 128.71357727]
[20.11046028 133.25633240]
[5.81488705 137.79908752]
[-8.48068619 142.34182739]
[-19.12679863 154.81549072]
[-35.20095444 151.56686401]
[-40.16743469 135.93785095]
[-28.91715622 124.00624084]
[-13.02343750 128.04626465]
[1.27213597 123.50350952]
[15.56770897 118.96075439]
[29.86328316 114.41800690]
[44.15885544 109.87525177]
[58.45442963 105.33250427]
[60.08066559 87.31470490]
[69.15361023 71.66326904]
[60.10269547 59.70162582]
[45.60569000 53.36542130]
[44.09617996 38.54750443]
[35.04526138 26.58586311]
[25.99434280 14.62422085]
[16.94342613 2.66257834]
[7.89250755 -9.29906368]
[-7.41784668 -15.17486954]
[-9.71683216 -31.41207123]
[3.36054993 -41.30722809]
[18.36141014 -34.68104935]
[19.85414886 -18.34998131]
[28.90506744 -6.38834000]
[37.95598602 5.57330227]
[47.00690460 17.53494453]
[56.05782318 29.49658585]
[69.90744019 34.97721481]
[72.06433868 50.65070724]
[81.11525726 62.61235046]
[91.71575165 58.94100189]
[102.91049194 58.21484375]
[113.89645386 60.48596954]
[121.32622528 47.45529175]
[114.81594849 33.36998367]
[117.86118317 18.15465546]
[129.29096985 7.65991497]
[144.71032715 5.92120314]
[158.19018555 13.60709000]
[164.54728699 27.76219559]
[161.33717346 42.94359207]
[149.79420471 53.31372452]
[134.35690308 54.88506317]
[126.92713165 67.91574097]
[132.56607056 73.65761566]
[137.00282288 80.37192535]
[151.29840088 75.82917023]
[159.92143250 62.30058670]
[175.88946533 60.75077057]
[186.95315552 72.36861420]
[184.62539673 88.24189758]
[170.69186401 96.19400024]
[155.84114075 90.12474823]
[141.54557800 94.66749573]
[141.76281738 103.21514893]
[140.23979187 111.62882233]
[137.03994751 119.55791473]
[132.29664612 126.67202759]
[126.20751953 132.67469788]
[119.02631378 137.31581116]
[123.33698273 151.68305969]
[127.64764404 166.05032349]
[131.95831299 180.41758728]
[136.26898193 194.78485107]
[140.57965088 209.15209961]
[155.70411682 209.47680664]
[169.98735046 214.46124268]
[182.02999878 223.61711121]
[190.65225220 236.04737854]
[195.00939941 250.53428650]
[194.67457581 265.65853882]
[189.68055725 279.93841553]
[180.51663208 291.97494507]
[168.08058167 300.58886719]
[153.59075928 304.93630981]
[138.46673584 304.59133911]
[124.19020081 299.58776855]
[112.15982819 290.41577148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[10 78]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[29 48]
[30 47]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[51 62]
[52 61]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
