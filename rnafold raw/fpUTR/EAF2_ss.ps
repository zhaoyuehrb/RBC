%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUCUGGGUGACUUGGCUGGCGGGAUCAAGUGCAGCUGCUUCAGGCUGAGGUGGCAGAUAGUGAGCGCUGGUGGCGGAGUUAAAGUCAAAGCAGGAGAGUAAUU\
) } def
/len { sequence length } bind def

/coor [
[144.14556885 398.34808350]
[141.94180298 383.30773926]
[145.66633606 368.57015991]
[154.75119019 356.38272095]
[167.81098938 348.60391235]
[165.61683655 333.76525879]
[163.42268372 318.92660522]
[161.22854614 304.08792114]
[141.60299683 293.15847778]
[135.80288696 271.19485474]
[147.73620605 251.56852722]
[142.55993652 237.48994446]
[137.38368225 223.41136169]
[132.20742798 209.33279419]
[127.03116608 195.25421143]
[121.85491180 181.17562866]
[110.20092010 171.90019226]
[112.70071411 156.27772522]
[107.52445984 142.19914246]
[102.34819794 128.12057495]
[97.17194366 114.04199219]
[86.55594635 104.94296265]
[88.74948120 91.13426971]
[83.57321930 77.05568695]
[78.39696503 62.97711182]
[62.43859863 55.99890518]
[56.50644684 39.98032379]
[63.77914810 24.89592171]
[58.19182587 10.97536755]
[52.60449982 -2.94518566]
[37.47778320 -5.21006536]
[25.59417725 -14.67984390]
[20.08276367 -28.73298264]
[22.33048439 -43.55876160]
[31.63467216 -55.19051361]
[19.31377029 -65.11553192]
[21.75350952 -79.80895996]
[16.16618538 -93.72951508]
[10.57886124 -107.65007019]
[4.99153662 -121.57061768]
[-0.59578758 -135.49118042]
[-6.18311214 -149.41172791]
[-11.77043629 -163.33227539]
[-17.35776138 -177.25283813]
[-22.94508553 -191.17338562]
[-34.45620346 -203.62049866]
[-25.68212700 -218.12745667]
[-9.31319714 -213.71220398]
[-9.02453232 -196.76071167]
[-3.43720746 -182.84016418]
[2.15011692 -168.91960144]
[7.73744154 -154.99905396]
[13.32476616 -141.07850647]
[18.91209030 -127.15794373]
[24.49941444 -113.23738861]
[30.08673859 -99.31684113]
[35.67406464 -85.39628601]
[47.59532166 -76.46696472]
[45.55522537 -60.77783966]
[60.31934357 -58.80643845]
[72.19336700 -49.64873505]
[77.92720032 -35.68487167]
[75.88832092 -20.62699127]
[66.52505493 -8.53250980]
[72.11238098 5.38804340]
[77.69969940 19.30859756]
[90.22338104 22.70770073]
[98.58916473 32.88236618]
[99.53117371 46.21702194]
[92.47554016 57.80085373]
[97.65180206 71.87943268]
[102.82805634 85.95800781]
[113.44405365 95.05703735]
[111.25051880 108.86573029]
[116.42678070 122.94431305]
[121.60303497 137.02288818]
[126.77929688 151.10147095]
[138.80352783 161.38389587]
[135.93348694 175.99937439]
[141.10974121 190.07795715]
[146.28601074 204.15653992]
[151.46226501 218.23510742]
[156.63851929 232.31369019]
[161.81477356 246.39227295]
[170.09150696 246.86874390]
[177.88175964 249.62400818]
[184.57327271 254.42536926]
[189.64462280 260.88000488]
[192.70588684 268.46697998]
[193.52854919 276.57940674]
[192.06257629 284.57281494]
[188.43907166 291.81655884]
[182.95878601 297.74331665]
[176.06719971 301.89379883]
[178.26135254 316.73245239]
[180.45549011 331.57110596]
[182.64964294 346.40975952]
[197.40180969 350.07608032]
[209.62501526 359.11279297]
[217.45530701 372.14178467]
[219.69863892 387.17626953]
[216.01289368 401.92361450]
[206.96012878 414.13491821]
[193.92083740 421.94805908]
[178.88340759 424.17160034]
[164.14094543 420.46646118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 97]
[6 96]
[7 95]
[8 94]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[18 77]
[19 76]
[20 75]
[21 74]
[23 72]
[24 71]
[25 70]
[28 66]
[29 65]
[30 64]
[35 59]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
