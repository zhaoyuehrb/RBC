%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGCCCCCGGGCUGCCCUCAGCGCCGCCUGAUUGCAUUUGCGGCCUCGCUGCCGUAUCCCAGGCUAAGCGCCGCGCGCAAAGCCGUGCGGAGAUUGGAGGCCGCGCGGGUCCCUGGUCUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[139.83197021 459.97442627]
[139.46385193 444.97894287]
[139.09573364 429.98345947]
[138.72761536 414.98797607]
[128.77371216 400.58987427]
[137.58125305 384.47442627]
[136.84524536 369.49249268]
[136.10922241 354.51055908]
[134.45588684 339.60195923]
[131.89146423 324.82278442]
[129.32704163 310.04360962]
[126.76261139 295.26446533]
[116.96334076 284.04733276]
[122.22742462 269.12756348]
[119.66300201 254.34838867]
[109.86373138 243.13127136]
[115.12781525 228.21148682]
[112.56338501 213.43232727]
[109.99896240 198.65316772]
[100.19969177 187.43605042]
[105.46377563 172.51626587]
[102.89935303 157.73710632]
[100.33492279 142.95793152]
[97.77049255 128.17877197]
[95.02489471 113.43218994]
[85.95128632 102.79446411]
[90.26332855 89.49416351]
[87.33696747 74.78238678]
[84.41061401 60.07060623]
[81.48426056 45.35882568]
[71.20335388 33.33329391]
[76.30901337 19.34110069]
[73.38265991 4.62932110]
[69.79046631 0.55347145]
[68.34154510 -4.04047060]
[68.86226654 -8.22098064]
[70.82437134 -11.27039433]
[68.98821259 -26.15758705]
[64.79262543 -34.39299774]
[67.29430389 -41.43209457]
[65.82404327 -56.35986710]
[64.35379028 -71.28763580]
[62.88352966 -86.21540833]
[61.41327286 -101.14318085]
[59.94301605 -116.07095337]
[58.28968430 -130.97955322]
[56.45352173 -145.86674500]
[44.27808762 -155.58253479]
[42.62803650 -170.70642090]
[51.96558762 -182.25396729]
[50.12942886 -197.14115906]
[48.29326630 -212.02835083]
[46.45710754 -226.91554260]
[44.25614929 -241.75318909]
[41.69172287 -256.53234863]
[39.12729263 -271.31152344]
[25.14040184 -278.03063965]
[17.80381393 -291.70373535]
[19.93859673 -307.07327271]
[30.72388268 -318.22930908]
[46.01251221 -320.88214111]
[59.92568970 -314.01168823]
[67.11351776 -300.25979614]
[64.81213379 -284.91433716]
[53.90645981 -273.87594604]
[56.47088623 -259.09677124]
[59.03531647 -244.31762695]
[62.44134903 -240.83357239]
[63.62667084 -235.13902283]
[61.34429932 -228.75170898]
[63.18046188 -213.86451721]
[65.01662445 -198.97731018]
[66.85278320 -184.09011841]
[78.71632385 -175.15748596]
[80.79052734 -160.08592224]
[71.34071350 -147.70291138]
[73.17687988 -132.81571960]
[77.16004181 -126.49577332]
[74.87078857 -117.54120636]
[76.34104156 -102.61343384]
[77.81130219 -87.68566895]
[79.28155518 -72.75789642]
[80.75181580 -57.83012390]
[82.22207642 -42.90235138]
[83.87540436 -27.99374771]
[85.71156311 -13.10655499]
[88.09443665 1.70296633]
[91.02079010 16.41474533]
[101.09239197 27.38799477]
[96.19603729 42.43247223]
[99.12239838 57.14425278]
[102.04875183 71.85603333]
[104.97510529 86.56781006]
[114.04871368 97.20553589]
[109.73667145 110.50583649]
[114.52672577 118.41028595]
[112.54965973 125.61434174]
[115.11408997 140.39350891]
[117.67851257 155.17266846]
[120.24294281 169.95184326]
[130.22563171 182.22605896]
[124.77812195 196.08872986]
[127.34255219 210.86790466]
[129.90698242 225.64706421]
[139.88967896 237.92127991]
[134.44216919 251.78396606]
[137.00659180 266.56314087]
[146.98928833 278.83734131]
[141.54177856 292.70001221]
[144.10620117 307.47918701]
[146.67062378 322.25836182]
[149.23506165 337.03750610]
[160.29425049 326.90368652]
[175.14941406 328.98309326]
[183.00103760 341.76400757]
[178.14108276 355.95489502]
[164.10266113 361.23910522]
[151.09115601 353.77453613]
[151.82717896 368.75646973]
[152.56318665 383.73840332]
[161.61639404 393.02191162]
[161.86470032 405.58422852]
[153.72309875 414.61984253]
[154.09121704 429.61532593]
[154.45933533 444.61080933]
[154.82745361 459.60629272]
[157.49024963 478.80419922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 123]
[6 120]
[7 119]
[8 118]
[9 112]
[10 111]
[11 110]
[12 109]
[14 107]
[15 106]
[17 104]
[18 103]
[19 102]
[21 100]
[22 99]
[23 98]
[24 97]
[25 95]
[27 93]
[28 92]
[29 91]
[30 90]
[32 88]
[33 87]
[37 86]
[38 85]
[40 84]
[41 83]
[42 82]
[43 81]
[44 80]
[45 79]
[46 77]
[47 76]
[50 73]
[51 72]
[52 71]
[53 70]
[54 67]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
