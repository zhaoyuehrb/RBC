%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACCAUUUGACCUUUCAAAGGUUCUCCAGCAGUAUUUAACUGAUGCAAAAGGAACACACUUGCAAUUUUCUACUUUUGACAUGACAGACCCUCCUCUUAGUUCACACA\
) } def
/len { sequence length } bind def

/coor [
[104.79096222 169.27699280]
[101.29693604 154.68960571]
[100.57267761 139.70207214]
[90.43005371 150.75318909]
[80.28742981 161.80430603]
[76.71694183 170.37823486]
[69.69390106 173.02090454]
[59.23983383 183.77789307]
[48.78577042 194.53486633]
[38.33170700 205.29183960]
[27.87764359 216.04881287]
[24.38663864 232.07208252]
[8.68440628 236.80197144]
[-3.07594419 225.37278748]
[1.20362866 209.54190063]
[17.12066650 205.59475708]
[27.57472992 194.83778381]
[38.02879333 184.08079529]
[48.48285675 173.32382202]
[58.93692017 162.56684875]
[69.23631287 151.66168213]
[79.37893677 140.61056519]
[89.52156067 129.55944824]
[88.45420074 122.13579559]
[78.17720032 133.06205750]
[63.22708511 131.83976746]
[54.86132050 119.38930511]
[59.37934494 105.08589935]
[73.37908173 99.70004272]
[86.31948090 107.28846741]
[85.25211334 99.86480713]
[72.40688324 92.11885071]
[59.56164551 84.37288666]
[46.71641159 76.62692261]
[30.86079979 79.07215881]
[19.16134644 68.09479523]
[20.59287262 52.11574173]
[34.05723190 43.39274979]
[49.22571945 48.61735535]
[54.46237183 63.78168869]
[67.30760956 71.52764893]
[80.15283966 79.27361298]
[92.99807739 87.01957703]
[107.44934845 82.99953461]
[114.44936371 69.73303986]
[121.44937134 56.46654510]
[128.25923157 43.10144806]
[134.87754822 29.64047050]
[141.49586487 16.17949486]
[148.11418152 2.71851802]
[154.73249817 -10.74245834]
[161.35081482 -24.20343399]
[150.09468079 -34.26335526]
[141.97105408 -46.98771667]
[137.58277893 -61.43228531]
[137.25547791 -76.52517700]
[141.01344299 -91.14640808]
[148.57781982 -104.21097565]
[159.38725281 -114.74939728]
[172.63964844 -121.97966766]
[187.35156250 -125.36524963]
[202.43127441 -124.65489960]
[216.75979614 -119.90133667]
[229.27381897 -111.45730591]
[239.04475403 -99.94941711]
[245.34750366 -86.23162079]
[247.71438599 -71.32187653]
[245.96974182 -56.32658768]
[240.24304199 -42.35849380]
[230.95925903 -30.45413208]
[218.80729675 -21.49687767]
[204.68891907 -16.15142059]
[189.65179443 -14.81442928]
[174.81178284 -17.58511734]
[168.19346619 -4.12414169]
[161.57514954 9.33683491]
[154.95683289 22.79781151]
[148.33851624 36.25878906]
[141.72019958 49.71976471]
[141.59129333 57.22245026]
[134.71586609 63.46655655]
[127.71585083 76.73304749]
[120.71584320 89.99954224]
[131.66607666 79.74809265]
[144.32949829 71.70831299]
[158.26559448 66.15986633]
[172.98960876 63.29574203]
[187.98939514 63.21557236]
[202.74319458 65.92214966]
[216.73779297 71.32131958]
[229.48641968 79.22528076]
[240.54560852 89.35910797]
[249.53068542 101.37028503]
[256.12908936 114.84102631]
[260.11132812 129.30276489]
[261.33886719 144.25245667]
[259.76901245 159.17007446]
[255.45639038 173.53674316]
[248.55096436 186.85272217]
[239.29296875 198.65481567]
[228.00442505 208.53251648]
[215.07800293 216.14221191]
[200.96333313 221.21922302]
[186.15138245 223.58694458]
[171.15737915 223.16302490]
[156.50286865 219.96220398]
[142.69760132 214.09580994]
[130.22177124 205.76791382]
[119.50936890 195.26817322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[31 43]
[32 42]
[33 41]
[34 40]
[44 83]
[45 82]
[46 81]
[47 79]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
