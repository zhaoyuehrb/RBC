%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUCAUCUUACAUCAGCACAAGAAGAAGAGUGAGCAUAGCACACCGAUGUCAGACCCUGCCACUAGCCUCCUUAACAGAAGUUCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[65.71678925 463.59216309]
[50.71251297 462.71350098]
[36.01823044 459.55462646]
[21.97839546 454.18960571]
[8.92212677 446.74417114]
[-2.84451962 437.39288330]
[-13.04571724 426.35494995]
[-21.44233513 413.88909912]
[-27.83754539 400.28756714]
[-32.08143234 385.86920166]
[-34.07452011 370.97195435]
[-33.77007675 355.94503784]
[-31.17524910 341.14074707]
[-26.35085869 326.90606689]
[-19.40999603 313.57473755]
[-10.51536655 301.45919800]
[0.12452707 290.84350586]
[12.26027107 281.97647095]
[25.60738564 275.06597900]
[39.85299683 270.27401733]
[54.66316605 267.71289062]
[69.69071960 267.44265747]
[71.71139526 252.57937622]
[73.73206329 237.71611023]
[67.77980042 224.06254578]
[77.30561829 211.43046570]
[79.32628632 196.56718445]
[68.45574951 186.41979980]
[65.61120605 171.64236450]
[72.08932495 157.86241150]
[85.59545898 150.45359802]
[87.61613464 135.59033203]
[89.63680267 120.72705841]
[91.65747833 105.86378479]
[89.50653076 97.90814972]
[94.00562286 90.53591919]
[96.52713013 75.74936676]
[99.04864502 60.96282196]
[90.18061066 48.15674210]
[92.94842529 33.19699860]
[105.21171570 24.82160378]
[107.48313904 9.99457932]
[109.00066376 -4.92846012]
[110.01330566 -19.89423943]
[111.02595520 -34.86001968]
[103.32200623 -49.33694077]
[112.23574829 -63.10201263]
[128.59748840 -61.99491119]
[135.57566833 -47.15452576]
[125.99172974 -33.84737396]
[124.97908783 -18.88159370]
[123.96643829 -3.91581392]
[126.52004242 0.34328219]
[126.27664948 6.28445816]
[122.34641266 12.01525211]
[124.61154938 19.21464539]
[119.99826813 27.34311867]
[128.79273987 39.30944061]
[126.44620514 54.34102249]
[113.83518982 63.48433685]
[111.31368256 78.27088165]
[108.79216766 93.05742645]
[106.52075195 107.88445282]
[104.50007629 122.74772644]
[102.47940826 137.61100769]
[100.45873260 152.47427368]
[111.49676514 163.21987915]
[114.06097412 178.22915649]
[107.37457275 191.71084595]
[94.18955994 198.58786011]
[92.16889191 213.45114136]
[97.97662354 228.16781616]
[88.59533691 239.73678589]
[86.57466888 254.60005188]
[84.55399323 269.46331787]
[98.96398926 273.73562622]
[112.55290222 280.15759277]
[125.00217438 288.57876587]
[136.01998901 298.80169678]
[145.34806824 310.58673096]
[152.76776123 323.65765381]
[158.10511780 337.70803833]
[161.23503113 352.40850830]
[162.08413696 367.41448975]
[160.63252258 382.37420654]
[156.91423035 396.93698120]
[151.01640320 410.76147461]
[143.07731628 423.52355957]
[133.28305054 434.92413330]
[121.86321259 444.69592285]
[109.08549500 452.60986328]
[95.24942780 458.48043823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 75]
[23 74]
[24 73]
[26 71]
[27 70]
[31 66]
[32 65]
[33 64]
[34 63]
[36 62]
[37 61]
[38 60]
[41 57]
[42 55]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
