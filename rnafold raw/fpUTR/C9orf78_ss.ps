%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCGCGCGCCGGAAGCAGCCUGGGCCGCUGCGCAGAGGCGCGGCGGCUGUACAACUCGGCCGUUGUCACC\
) } def
/len { sequence length } bind def

/coor [
[86.59815979 205.34167480]
[88.10837555 189.77717590]
[99.30606842 178.86180115]
[98.01659393 163.91732788]
[89.21384430 151.90229797]
[95.73616791 137.48808289]
[94.44670105 122.54360962]
[93.15722656 107.59913635]
[89.27969360 100.22586823]
[92.14795685 91.98623657]
[91.50262451 77.00012970]
[90.85729218 62.01401520]
[90.21195984 47.02790451]
[89.56662750 32.04179001]
[75.61145782 25.95781708]
[65.72200775 14.46496391]
[61.81917572 -0.12229439]
[64.62533569 -14.89681625]
[73.53126526 -26.93815231]
[86.72747040 -33.88981628]
[86.08213806 -48.87592697]
[82.90464020 -53.79628754]
[82.23958588 -58.91724014]
[83.68650055 -63.16112900]
[86.44651794 -65.80725861]
[87.73599243 -80.75173187]
[89.02546692 -95.69620514]
[90.31493378 -110.64067841]
[91.60440826 -125.58515167]
[92.89388275 -140.52961731]
[94.18334961 -155.47409058]
[95.47282410 -170.41856384]
[96.76229858 -185.36303711]
[98.05176544 -200.30751038]
[99.34123993 -215.25198364]
[91.90656281 -229.86901855]
[101.07355499 -243.46675110]
[117.41199493 -242.05700684]
[124.11430359 -227.08999634]
[114.28571320 -213.96250916]
[112.99623871 -199.01803589]
[111.70676422 -184.07356262]
[110.41729736 -169.12910461]
[109.12782288 -154.18463135]
[107.83834839 -139.24015808]
[106.54888153 -124.29567719]
[105.25940704 -109.35120392]
[103.96993256 -94.40673065]
[102.68046570 -79.46226501]
[101.39099121 -64.51779175]
[101.06825256 -49.52126312]
[101.71358490 -34.53514862]
[115.45853424 -28.74362755]
[125.36663818 -17.51246452]
[129.43249512 -3.03386593]
[126.79810333 11.83489895]
[117.93323517 24.13535309]
[104.55273438 31.39645767]
[105.19807434 46.38256836]
[105.84340668 61.36868286]
[106.48873901 76.35478973]
[107.13407135 91.34090424]
[108.10169983 106.30966187]
[109.39116669 121.25413513]
[110.68064117 136.19860840]
[119.57563019 149.28256226]
[112.96106720 162.62785339]
[114.25054169 177.57232666]
[127.15246582 186.40829468]
[131.30644226 201.48405457]
[124.75109863 215.68128967]
[110.58166504 222.29649353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 68]
[4 67]
[6 65]
[7 64]
[8 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[20 52]
[21 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
