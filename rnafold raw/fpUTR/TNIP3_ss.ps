%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGUCUUAAAGACAGGUCUCCGUAUUAGACCUUGUAAUACGCUUACCUAGAUCUGAGAAGGACUUUCAGGAUAGAAC\
) } def
/len { sequence length } bind def

/coor [
[158.83830261 285.48687744]
[169.35176086 274.46929932]
[163.61151123 260.61111450]
[157.87126160 246.75291443]
[152.13101196 232.89471436]
[146.39076233 219.03652954]
[140.65051270 205.17832947]
[134.91026306 191.32014465]
[129.17001343 177.46194458]
[111.99708557 171.72087097]
[104.09626770 155.08224487]
[110.72120667 137.56172180]
[103.91134644 124.19662476]
[97.10149384 110.83152008]
[90.03054047 97.60270691]
[82.44567871 84.66168976]
[74.60820007 71.87208557]
[66.77072144 59.08248520]
[58.93324280 46.29288101]
[43.58685684 44.95322800]
[32.10612106 34.95092773]
[28.75614166 20.27981186]
[34.61731720 6.61289406]
[26.77983665 -6.17670822]
[18.94235802 -18.96631050]
[11.10488033 -31.75591278]
[3.26740170 -44.54551697]
[-4.57007647 -57.33511734]
[-12.40755558 -70.12471771]
[-27.89908218 -72.25700378]
[-38.35729599 -83.88282776]
[-38.84415436 -99.51282501]
[-29.12977028 -111.76700592]
[-13.80098438 -114.85929871]
[-0.09557780 -107.32963562]
[5.51517439 -92.73328400]
[0.38204730 -77.96219635]
[8.21952534 -65.17259979]
[16.05700493 -52.38299561]
[23.89448357 -39.59339142]
[31.73196030 -26.80378914]
[39.56943893 -14.01418686]
[47.40691757 -1.22458422]
[62.24514771 -0.24227862]
[73.79634857 9.40312195]
[77.49631500 24.17348480]
[71.72284698 38.45540237]
[79.56032562 51.24500656]
[87.39780426 64.03460693]
[95.23528290 76.82421112]
[101.58304596 80.99123383]
[103.11798096 90.27338409]
[109.66138458 95.37026978]
[110.46659088 104.02166748]
[117.27644348 117.38676453]
[124.08630371 130.75186157]
[136.20167542 132.22489929]
[145.92723083 139.39514160]
[150.81761169 150.31117249]
[149.71662903 162.09971619]
[143.02819824 171.72169495]
[148.76844788 185.57987976]
[154.50869751 199.43807983]
[160.24894714 213.29626465]
[165.98921204 227.15446472]
[171.72946167 241.01266479]
[177.46971130 254.87084961]
[183.20996094 268.72903442]
[198.43470764 269.08551025]
[212.19543457 275.60946655]
[222.10801697 287.17062378]
[226.45504761 301.76596069]
[224.48336792 316.86669922]
[216.53459167 329.85656738]
[203.98588562 338.48498535]
[189.01138306 341.25704956]
[174.20552063 337.69247437]
[162.13349915 328.40881348]
[154.88685608 315.01455688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[12 56]
[13 55]
[14 54]
[15 52]
[16 50]
[17 49]
[18 48]
[19 47]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
