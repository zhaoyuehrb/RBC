%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCGGGGUCAGUGCCGUAGCGCCCGGCUCCUGCAGGCGCUCGGCCUCCGCUCAUUCCUGACCCCGCAGUGGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[114.86698151 299.20217896]
[116.49436951 283.64950562]
[127.77394867 272.81875610]
[126.59706116 257.86499023]
[125.42017365 242.91123962]
[123.07366180 228.09591675]
[119.57198334 213.51037598]
[116.07029724 198.92481995]
[112.56861877 184.33927917]
[109.06694031 169.75372314]
[105.56525421 155.16816711]
[102.06357574 140.58262634]
[98.56189728 125.99707794]
[95.06021881 111.41152954]
[88.88187408 105.45727539]
[88.04680634 96.95191956]
[78.76039124 85.17216492]
[69.47398376 73.39241028]
[60.18757629 61.61265945]
[52.19937897 56.64244080]
[50.77873611 49.18321991]
[41.96195602 37.04796219]
[33.14517975 24.91270828]
[24.32839966 12.77745342]
[15.51162052 0.64219850]
[6.69484186 -11.49305630]
[-6.06056261 -14.35106945]
[-13.12865353 -24.86301422]
[-11.09568882 -36.95615005]
[-19.42924309 -49.42819214]
[-34.36849976 -56.19211578]
[-35.71090698 -72.53622437]
[-22.07551575 -81.64710999]
[-7.48924351 -74.15225983]
[-6.95719862 -57.76174545]
[1.37635505 -45.28970337]
[17.45373917 -38.54735184]
[18.83009720 -20.30983543]
[27.64687538 -8.17458057]
[36.46365356 3.96067476]
[45.28043365 16.09593010]
[54.09720993 28.23118401]
[62.91399002 40.36643982]
[71.96733093 52.32624817]
[81.25373840 64.10600281]
[90.54014587 75.88575745]
[99.82656097 87.66551208]
[101.21662903 72.73005676]
[108.74359894 59.75528717]
[121.01895905 51.13464355]
[135.77828979 48.45838547]
[150.29891968 52.22019577]
[161.90223694 61.72613525]
[168.44778442 75.22264862]
[168.72810364 90.22002411]
[162.69148254 103.95171356]
[151.45149231 113.88462067]
[137.08157349 118.18642426]
[122.23255157 116.06357574]
[109.64576721 107.90985107]
[113.14744568 122.49539948]
[116.64912415 137.08094788]
[120.15081024 151.66648865]
[123.65248871 166.25204468]
[127.15416718 180.83758545]
[130.65585327 195.42314148]
[134.15753174 210.00868225]
[137.65921021 224.59423828]
[141.25247192 228.03862000]
[143.17810059 232.08686829]
[143.46615601 236.07283020]
[142.38330078 239.42327881]
[140.37393188 241.73435974]
[141.55082703 256.68811035]
[142.72770691 271.64187622]
[155.56272888 280.57476807]
[159.60305786 295.68136597]
[152.94096375 309.82882690]
[138.72210693 316.33715820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[16 47]
[17 46]
[18 45]
[19 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[29 36]
[30 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
