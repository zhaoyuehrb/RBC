%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCGCACGGCGAAGUGGGGGAGGGCAGUCCGUGUGUGUCUGUGUUGUUGUUCGGCGGCGGCGGCGGCGGUAAG\
) } def
/len { sequence length } bind def

/coor [
[84.90143585 323.21249390]
[84.41531372 307.41567993]
[95.30231476 295.95928955]
[94.68244171 280.97210693]
[94.06256866 265.98492432]
[93.44268799 250.99774170]
[92.82281494 236.01055908]
[89.29812622 229.26527405]
[92.50000000 220.39389038]
[92.50000000 205.39389038]
[84.76270294 192.66661072]
[92.50000000 178.86643982]
[92.50000000 163.86643982]
[81.81912994 153.54875183]
[81.60544586 138.33662415]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[82.89127350 72.24720764]
[91.90814972 57.33777237]
[91.28827667 42.35058594]
[90.66840363 27.36339951]
[82.36742401 13.89475918]
[89.57215881 0.85861593]
[88.95228577 -14.12857056]
[88.33240509 -29.11575699]
[87.71253204 -44.10294342]
[87.09265900 -59.09012985]
[83.52690887 -67.82162476]
[86.76984406 -74.70680237]
[86.45983887 -89.70359802]
[85.83996582 -104.69078064]
[72.84609985 -113.17247772]
[67.35073090 -127.68386841]
[71.46693420 -142.64503479]
[83.61194611 -152.30310059]
[99.11576843 -152.94433594]
[112.01685333 -144.32218933]
[117.35448456 -129.75204468]
[113.07622528 -114.83640289]
[100.82714844 -105.31066132]
[101.44702911 -90.32347107]
[104.97171783 -83.57819366]
[101.76984406 -74.70680237]
[102.07984924 -59.71000290]
[102.69972229 -44.72281647]
[103.31959534 -29.73563194]
[103.93946838 -14.74844551]
[104.55934143 0.23874132]
[112.81598663 12.63539696]
[105.65559387 26.74352455]
[106.27546692 41.73071289]
[106.89533997 56.71789932]
[115.67315674 65.30108643]
[116.14676666 77.97381592]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[118.39455414 138.33662415]
[118.18087006 153.54875183]
[107.50000000 163.86643982]
[107.50000000 178.86643982]
[115.23729706 192.66661072]
[107.50000000 205.39389038]
[107.50000000 220.39389038]
[107.81000519 235.39068604]
[108.42987823 250.37786865]
[109.04975128 265.36505127]
[109.66962433 280.35223389]
[110.28950500 295.33941650]
[122.08538055 305.85763550]
[122.90541077 321.64062500]
[112.26306915 333.32464600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[5 70]
[6 69]
[7 68]
[9 67]
[10 66]
[12 64]
[13 63]
[16 60]
[17 59]
[19 57]
[21 54]
[22 53]
[23 52]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[31 45]
[32 43]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
