%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCACAGCGAGCGAGCGAGCGAGGAGGGGGAGAGAGGGAGUCUGUCUGCAAAGUGCUGCUCCCUGGUGCUCAGAGGCGGCUGCUCCAGCUCCAACUCUCAUUCAUUUCGCCGGUUAACAUGAGAGAUC\
) } def
/len { sequence length } bind def

/coor [
[91.52973175 483.49411011]
[87.58911896 497.96722412]
[83.64850616 512.44036865]
[88.35002136 528.15112305]
[76.89960480 539.89080811]
[61.07646561 535.58264160]
[57.15809631 519.65844727]
[69.17537689 508.49975586]
[73.11598969 494.02661133]
[77.05659485 479.55349731]
[60.22166824 463.33676147]
[55.94544601 440.24264526]
[65.95233154 418.87127686]
[86.62312317 407.25802612]
[86.62312317 392.25802612]
[78.88582611 379.53073120]
[86.62312317 365.73056030]
[86.62312317 350.73056030]
[83.44496155 343.97335815]
[86.80874634 335.36920166]
[87.17120361 320.37359619]
[87.53366089 305.37796021]
[87.89611816 290.38235474]
[88.25856781 275.38671875]
[88.62102509 260.39111328]
[81.19352722 247.48059082]
[89.26203156 233.87141418]
[89.62448883 218.87579346]
[89.98694611 203.88017273]
[82.55944061 190.96965027]
[90.62794495 177.36047363]
[90.99040222 162.36485291]
[91.35285950 147.36923218]
[91.71531677 132.37361145]
[92.07776642 117.37799072]
[82.15894318 106.81564331]
[82.50906372 92.33035278]
[92.92661285 82.25955200]
[93.28907013 67.26393127]
[93.65151978 52.26831436]
[94.01397705 37.27269363]
[91.06981659 28.51606560]
[94.57073212 21.92030334]
[95.29543304 6.93781948]
[96.02013397 -8.04466343]
[85.84164429 -16.95806503]
[82.73260498 -29.92495155]
[87.61748505 -42.12233734]
[98.48973846 -49.14662933]
[99.57626343 -64.10722351]
[100.66278076 -79.06782532]
[98.50514221 -83.10317230]
[97.87486267 -87.19840240]
[98.59215546 -90.84648132]
[100.32548523 -93.65708160]
[102.64553833 -95.39728546]
[105.17089081 -110.18318176]
[107.69625092 -124.96907043]
[110.22160339 -139.75495911]
[112.74696350 -154.54084778]
[111.09893036 -163.63099670]
[115.51612854 -169.65170288]
[110.57434845 -184.68132019]
[120.61275482 -195.68493652]
[123.49465942 -210.40548706]
[126.37655640 -225.12603760]
[118.65242004 -239.18724060]
[124.96271515 -253.93714905]
[140.46672058 -258.06088257]
[153.27108765 -248.39509583]
[153.55342102 -232.35453796]
[141.09710693 -222.24414062]
[138.21520996 -207.52359009]
[135.33331299 -192.80303955]
[140.48121643 -178.82632446]
[130.23667908 -166.76979065]
[127.53285217 -152.01550293]
[125.00749969 -137.22961426]
[122.48213959 -122.44371796]
[119.95678711 -107.65782166]
[117.43142700 -92.87193298]
[115.62338257 -77.98130035]
[114.53685760 -63.02070236]
[113.45033264 -48.06010437]
[124.97372437 -35.87362671]
[124.15071106 -18.78506088]
[111.00261688 -7.31996298]
[110.27791595 7.66252041]
[109.55321503 22.64500427]
[109.00959778 37.63515091]
[108.64714050 52.63077164]
[108.28468323 67.62638855]
[107.92223358 82.62200928]
[117.84105682 93.18435669]
[117.49093628 107.66964722]
[107.07338715 117.74044800]
[106.71092987 132.73606873]
[106.34848022 147.73168945]
[105.98602295 162.72731018]
[105.62356567 177.72293091]
[113.02513885 191.70602417]
[104.98255920 204.24263000]
[104.62010956 219.23825073]
[104.25765228 234.23387146]
[111.65922546 248.21696472]
[103.61664581 260.75357056]
[103.25418854 275.74917603]
[102.89173889 290.74481201]
[102.52928162 305.74041748]
[102.16682434 320.73605347]
[101.80436707 335.73165894]
[101.62312317 350.73056030]
[101.62312317 365.73056030]
[109.36042786 379.53073120]
[101.62312317 392.25802612]
[101.62312317 407.25802612]
[109.07375336 409.56915283]
[115.90423584 413.31686401]
[121.84129333 418.34680176]
[126.64830017 424.45330811]
[130.13465881 431.38803101]
[132.16343689 438.86987305]
[132.65666199 446.59637451]
[131.59837341 454.25610352]
[129.03503418 461.54098511]
[125.07361603 468.15887451]
[119.87702179 473.84521484]
[113.65747070 478.37353516]
[106.66780853 481.56460571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[14 116]
[15 115]
[17 113]
[18 112]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[27 104]
[28 103]
[29 102]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[38 93]
[39 92]
[40 91]
[41 90]
[43 89]
[44 88]
[45 87]
[49 84]
[50 83]
[51 82]
[56 81]
[57 80]
[58 79]
[59 78]
[60 77]
[62 76]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
