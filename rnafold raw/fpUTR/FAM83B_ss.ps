%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCUUCGGCGGCCGGCGCUGUGCGGCGGGCGCGGUUGCGCGCGGCUUGGGGCAAAUACUUCUCACCACUGCAUGAAUGGACAUUUGAAAGUGCCAUAGCCAAACACUUGCAAGC\
) } def
/len { sequence length } bind def

/coor [
[214.25881958 234.83601379]
[206.46899414 225.05474854]
[203.61180115 212.80673218]
[206.30047607 200.44622803]
[194.94027710 190.65103149]
[183.44961548 181.00921631]
[171.83053589 171.52253723]
[160.21147156 162.03584290]
[148.59239197 152.54916382]
[136.84700012 143.21932983]
[124.97742462 134.04801941]
[113.10783386 124.87670898]
[101.23825073 115.70539856]
[86.37323761 113.69760132]
[72.49584961 119.39130402]
[58.61847305 125.08500671]
[48.78804779 137.48152161]
[34.07637405 135.15431213]
[20.19899178 140.84800720]
[6.32161093 146.54171753]
[-6.03702927 158.14776611]
[-20.61072159 149.48498535]
[-16.32087898 133.08273315]
[0.62790531 132.66433716]
[14.50528717 126.97062683]
[28.38266754 121.27692413]
[37.22048950 109.28767395]
[52.92476654 111.20762634]
[66.80214691 105.51392365]
[80.67952728 99.82021332]
[81.08225250 84.82562256]
[67.53049469 78.39523315]
[53.97873688 71.96484375]
[40.42697906 65.53446198]
[26.87522316 59.10406876]
[10.58169174 60.96226501]
[1.04449999 47.62157440]
[8.07469273 32.80575943]
[24.44021034 31.75605583]
[33.30561066 45.55231476]
[46.85736847 51.98270035]
[60.40912247 58.41308975]
[73.96088409 64.84347534]
[87.51263428 71.27386475]
[99.74188995 62.58793259]
[98.13391113 47.67436981]
[94.43222046 41.94141769]
[94.30361938 36.09403229]
[96.86209869 31.92018127]
[96.05695343 16.94180489]
[95.25180054 1.96342945]
[94.44665527 -13.01494598]
[93.64150238 -27.99332237]
[80.54375458 -36.31369019]
[74.86936188 -50.75602341]
[78.80024719 -65.76694489]
[90.82491302 -75.57444763]
[106.31961823 -76.40735626]
[119.32633209 -67.94538879]
[124.84371948 -53.44234848]
[120.75022125 -38.47495651]
[108.61988068 -28.79847145]
[109.42502594 -13.82009602]
[110.23017883 1.15828001]
[111.03532410 16.13665581]
[111.84047699 31.11503029]
[113.04747772 46.06639099]
[114.65544891 60.97995377]
[123.99392700 89.01823425]
[110.40956116 103.83580780]
[122.27915192 113.00712585]
[134.14872742 122.17843628]
[146.01831055 131.34974670]
[154.84588623 134.17433167]
[158.07907104 140.93009949]
[169.69815063 150.41677856]
[181.31723022 159.90345764]
[192.93629456 169.39013672]
[201.68486023 172.45069885]
[204.73548889 179.29083252]
[216.09568787 189.08604431]
[233.49287415 184.38055420]
[250.12429810 190.90876770]
[259.51052856 205.92831421]
[258.11370850 223.42834473]
[269.98327637 232.59965515]
[281.85287476 241.77098083]
[293.72244263 250.94229126]
[309.37335205 253.25743103]
[314.71377563 267.16171265]
[326.58334351 276.33303833]
[338.45294189 285.50433350]
[350.32254028 294.67565918]
[362.19210815 303.84695435]
[376.08004761 297.41390991]
[391.36618042 298.18334961]
[404.53793335 305.97845459]
[412.56848145 319.00799561]
[413.61251831 334.27786255]
[407.43005371 348.27914429]
[395.44183350 357.79446411]
[380.40264893 360.63726807]
[365.76840210 356.15429688]
[354.90191650 345.37570190]
[350.30023193 330.77832031]
[353.02081299 315.71655273]
[341.15121460 306.54522705]
[329.28161621 297.37393188]
[317.41204834 288.20260620]
[305.54244995 279.03131104]
[290.74053955 277.37216187]
[284.55114746 262.81185913]
[272.68154907 253.64056396]
[260.81198120 244.46925354]
[248.94239807 235.29792786]
[237.78417969 240.44029236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 81]
[5 80]
[6 78]
[7 77]
[8 76]
[9 75]
[10 73]
[11 72]
[12 71]
[13 70]
[14 30]
[15 29]
[16 28]
[18 26]
[19 25]
[20 24]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[45 68]
[46 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[85 115]
[86 114]
[87 113]
[88 112]
[90 110]
[91 109]
[92 108]
[93 107]
[94 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
