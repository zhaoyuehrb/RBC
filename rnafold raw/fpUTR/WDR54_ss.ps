%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGCCGUGCGUACGUGCGUCGUCUCUAUGGUGGCGGCGGAUUUGGAGGGACCCUACGAACCAGGAGUCAGGCGAGCCGAUCUGGGGCUGCAGCGCGCCUGGUGAUUCGGCUGCACCCCCACACAGG\
) } def
/len { sequence length } bind def

/coor [
[84.24968719 116.11262512]
[80.20083618 110.75555420]
[65.38837433 113.12010956]
[50.57592010 115.48466492]
[35.76346207 117.84922028]
[20.98089600 120.39396667]
[6.23041010 123.11852264]
[-5.93482685 133.23373413]
[-19.85576820 127.93688202]
[-32.02100372 138.05209351]
[-45.94194794 132.75524902]
[-60.69243240 135.47979736]
[-66.40717316 144.88714600]
[-76.18117523 149.44911194]
[-86.62543488 147.85412598]
[-94.26583099 140.88043213]
[-109.13147736 142.88359070]
[-121.77477264 152.39451599]
[-135.42131042 146.42616272]
[-150.28695679 148.42932129]
[-165.15260315 150.43247986]
[-180.01824951 152.43563843]
[-194.88388062 154.43878174]
[-209.74952698 156.44194031]
[-224.61517334 158.44509888]
[-231.85891724 172.16763306]
[-245.79994202 178.98138428]
[-261.07763672 176.26635742]
[-271.81744385 165.06651306]
[-273.88964844 149.68843079]
[-266.49746704 136.04528809]
[-252.48333740 129.38314819]
[-237.23599243 132.26376343]
[-226.61833191 143.57945251]
[-211.75268555 141.57629395]
[-196.88703918 139.57315063]
[-182.02139282 137.56999207]
[-167.15576172 135.56683350]
[-152.29011536 133.56367493]
[-137.42446899 131.56051636]
[-125.84445953 122.19287872]
[-111.13462830 128.01794434]
[-96.26898956 126.01479340]
[-81.98876953 113.06817627]
[-63.41698456 120.72930908]
[-48.66650009 118.00475311]
[-37.55631638 108.08441925]
[-22.58032036 113.18639374]
[-11.47013760 103.26605988]
[3.50585723 108.36803436]
[18.25634193 105.64347839]
[24.32510757 101.28988647]
[33.39890671 103.03676605]
[48.21136475 100.67221069]
[63.02381897 98.30765533]
[77.83628082 95.94309998]
[91.44080353 79.15703583]
[112.91609955 81.53751373]
[125.11544800 72.80963135]
[137.31478882 64.08174896]
[149.18724060 54.91414261]
[160.71694946 45.31904602]
[172.24665833 35.72395325]
[183.77636719 26.12885666]
[195.30607605 16.53376007]
[206.83578491 6.93866539]
[212.49389648 -7.83618593]
[227.22602844 -10.03022480]
[238.75572205 -19.62532043]
[237.87474060 -35.00485229]
[246.12223816 -47.80455017]
[260.15917969 -53.22933197]
[274.52685547 -49.39428711]
[286.05657959 -58.98938370]
[290.71383667 -66.97032166]
[297.98587036 -68.67360687]
[309.74578857 -77.98509979]
[321.50573730 -87.29658508]
[333.26568604 -96.60807800]
[333.52902222 -112.24344635]
[343.81997681 -124.01759338]
[359.27941895 -126.37113190]
[372.60794067 -118.19279480]
[377.51214600 -103.34413910]
[371.67648315 -88.83624268]
[357.85632324 -81.51929474]
[342.57717896 -84.84813690]
[330.81723022 -75.53665161]
[319.05728149 -66.22515869]
[307.29736328 -56.91366959]
[295.65167236 -47.45967484]
[284.12194824 -37.86458206]
[285.28350830 -23.03930473]
[277.39935303 -10.22119808]
[263.31451416 -4.43579197]
[248.35083008 -8.09561348]
[236.82112122 1.49948215]
[231.98767090 15.58802891]
[216.43087769 18.46837234]
[204.90116882 28.06346703]
[193.37145996 37.65856171]
[181.84175110 47.25365829]
[170.31204224 56.84875488]
[158.78233337 66.44384766]
[158.12454224 70.00778961]
[155.64405823 73.40956879]
[151.44685364 75.76615906]
[146.04267883 76.28109741]
[133.84333801 85.00897980]
[121.64398956 93.73686218]
[121.86708069 105.43322754]
[116.19559479 115.66498566]
[122.89128876 129.08764648]
[129.58697510 142.51029968]
[144.92208862 143.36473083]
[157.76667786 151.78565979]
[164.66561890 165.50790405]
[163.76312256 180.84025574]
[155.30197144 193.65838623]
[141.55816650 200.51428223]
[126.22871399 199.56373596]
[113.43716431 191.06245422]
[106.62438965 177.29722595]
[107.62297821 161.97082520]
[116.16432190 149.20599365]
[109.46862793 135.78334045]
[102.77293396 122.36067963]
[96.06022644 122.18484497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[5 53]
[6 51]
[7 50]
[9 48]
[11 46]
[12 45]
[16 43]
[17 42]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[58 110]
[59 109]
[60 108]
[61 104]
[62 103]
[63 102]
[64 101]
[65 100]
[66 99]
[68 97]
[69 96]
[73 92]
[74 91]
[76 90]
[77 89]
[78 88]
[79 87]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
