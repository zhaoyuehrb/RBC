%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCGGGUCGCGGGCGUUGGCAGCCGGGCGGGUGGGAGGGGCCGGAGCAAAAGUUCCGGGCGCCCGAGCCGGCUGCUCGUGCC\
) } def
/len { sequence length } bind def

/coor [
[6.52370358 303.40011597]
[4.76931858 306.57595825]
[2.36238766 308.78030396]
[-0.31189442 309.92587280]
[-2.87729812 310.05761719]
[-12.13647175 321.85879517]
[-11.64926243 337.89447021]
[-23.97539330 348.16314697]
[-39.65931320 344.78762817]
[-46.66965866 330.35726929]
[-39.62869644 315.94186401]
[-23.93764496 312.59963989]
[-14.67847252 300.79846191]
[-6.54767179 288.19329834]
[0.38538653 274.89169312]
[7.31844473 261.59008789]
[14.25150299 248.28848267]
[9.54885864 234.20228577]
[16.39048004 220.61380005]
[31.19725609 215.77674866]
[38.13031387 202.47514343]
[45.06337357 189.17353821]
[51.99642944 175.87193298]
[58.92948914 162.57032776]
[65.86254883 149.26872253]
[72.79560852 135.96711731]
[79.72866058 122.66551208]
[86.66172028 109.36390686]
[85.41152191 92.73580170]
[99.43444824 83.71280670]
[105.87126160 70.16410065]
[112.30806732 56.61539459]
[118.74488068 43.06668472]
[125.18168640 29.51797867]
[110.38076019 31.95366287]
[97.99802399 23.48797798]
[94.89557648 8.81232262]
[102.79269409 -3.94054127]
[117.31305695 -7.70340300]
[130.40995789 -0.39100966]
[134.82569885 13.94235706]
[137.25697327 -1.69092572]
[151.20051575 -6.92797565]
[160.45968628 -18.72914886]
[169.71885681 -30.53032303]
[178.97804260 -42.33149719]
[188.23721313 -54.13267136]
[197.49638367 -65.93384552]
[206.75555420 -77.73502350]
[208.53428650 -94.03741455]
[223.64898682 -100.39966583]
[236.55093384 -90.27682495]
[233.96771240 -74.08241272]
[218.55673218 -68.47584534]
[209.29756165 -56.67467117]
[200.03839111 -44.87349701]
[190.77920532 -33.07232285]
[181.52003479 -21.27115059]
[172.26086426 -9.46997643]
[163.00169373 2.33119774]
[161.23271179 17.12038231]
[146.62687683 23.20153046]
[138.73039246 35.95478821]
[132.29357910 49.50349426]
[125.85677338 63.05220413]
[119.41996765 76.60091400]
[112.98316193 90.14962006]
[116.22860718 101.49152374]
[110.97018433 112.05186462]
[99.96332550 116.29696655]
[93.03026581 129.59857178]
[86.09721375 142.90017700]
[79.16415405 156.20178223]
[72.23109436 169.50338745]
[65.29803467 182.80499268]
[58.36497879 196.10659790]
[51.43191910 209.40820312]
[44.49886322 222.70980835]
[49.01409149 237.61787415]
[41.79349899 251.00883484]
[27.55310822 255.22154236]
[20.62005043 268.52313232]
[13.68699169 281.82473755]
[6.75393343 295.12634277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 13]
[6 12]
[14 84]
[15 83]
[16 82]
[17 81]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[41 62]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
