%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGGCAGCCAGCGAGGGAGAGAGCGAGCGGGCGAGCCGGAGCGAGGAAGGGAAAGCGCAAGAGAGAGCGCACACGCACACACCCGCCGCGCGCACUCGCGCACGGACCCGCACGGGGACAGCUCGGAAGUCAUCAGUUCCAUGGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[60.64499283 138.70108032]
[48.62000656 147.66767883]
[46.43669128 164.99382019]
[32.68749619 175.20497131]
[16.13420868 172.39974976]
[4.29710007 181.61293030]
[-7.54000759 190.82612610]
[-14.03600979 208.02517700]
[-31.46547127 209.82414246]
[-43.10964203 219.28001404]
[-54.75381470 228.73587036]
[-60.58906174 243.44166565]
[-75.34648895 245.45851135]
[-86.99066162 254.91438293]
[-88.76523590 270.38980103]
[-100.70878601 279.81350708]
[-115.45129395 278.02633667]
[-114.48340607 293.51321411]
[-122.83171082 306.59317017]
[-137.28611755 312.23672485]
[-152.28862000 308.27380371]
[-162.07043457 296.22824097]
[-162.87026978 280.73178101]
[-154.38055420 267.74316406]
[-139.86578369 262.25674438]
[-124.90715027 266.38217163]
[-123.63088226 251.58668518]
[-111.95674133 241.83122253]
[-96.44651794 243.27020264]
[-84.80234528 233.81434631]
[-79.79996490 219.78489685]
[-64.20967102 217.09169006]
[-52.56550217 207.63583374]
[-40.92132950 198.17997742]
[-39.34587479 186.14657593]
[-29.66710472 178.17686462]
[-16.75319862 178.98901367]
[-4.91609049 169.77583313]
[6.92101717 160.56263733]
[6.71830940 147.64236450]
[14.12086964 136.81401062]
[26.59887695 132.17678833]
[39.65341949 135.64268494]
[51.67840576 126.67609406]
[46.82917404 114.81396484]
[44.84608841 102.15329742]
[45.83605576 89.37655640]
[49.74570465 77.17246246]
[56.36429214 66.19888306]
[65.33504486 57.04733658]
[76.17439270 50.21113586]
[71.59815216 35.92624664]
[67.02190399 21.64136124]
[45.20323181 16.58012962]
[30.76267624 -0.37826028]
[29.25985718 -22.47656822]
[41.13744736 -41.02446365]
[34.27239990 -54.36129761]
[27.40735435 -67.69813538]
[20.54230881 -81.03496552]
[5.18643188 -83.26581573]
[-5.90194750 -94.12065125]
[-8.45912170 -109.42556763]
[-1.50180495 -123.29551697]
[12.29477215 -130.39721680]
[27.62554359 -127.99990845]
[38.59551620 -117.02542114]
[40.98651123 -101.69366455]
[33.87914276 -87.90000916]
[40.74418640 -74.56317902]
[47.60923386 -61.22634506]
[54.47428131 -47.88951111]
[62.78293228 -49.12389755]
[71.16258240 -48.34603882]
[79.13199615 -45.59304047]
[86.23166656 -41.01566696]
[92.05038452 -34.87009430]
[96.24897766 -27.50357437]
[98.58013153 -19.33483505]
[98.90291595 -10.83026600]
[97.19130707 -2.47730041]
[93.53607178 5.24352980]
[88.14002991 11.88623238]
[81.30679321 17.06511688]
[85.88303375 31.35000420]
[90.45928192 45.63489151]
[115.74939728 47.09870529]
[137.72206116 59.70563126]
[149.36624146 50.24977112]
[161.01040649 40.79391098]
[166.84565735 26.08811569]
[181.60308838 24.07126045]
[193.24725342 14.61540031]
[204.89141846 5.15954113]
[216.53559875 -4.29631805]
[221.88282776 -19.79919624]
[238.03161621 -22.65373993]
[248.36949158 -9.92344093]
[242.26171875 5.29586124]
[225.99145508 7.34785318]
[214.34729004 16.80371284]
[202.70310974 26.25957108]
[191.05894470 35.71543121]
[186.05656433 49.74488068]
[170.46626282 52.43808365]
[158.82209778 61.89394379]
[147.17793274 71.34980011]
[152.01727295 81.53937531]
[154.68400574 92.50000000]
[169.68400574 92.50000000]
[184.68400574 92.50000000]
[196.99923706 82.21823120]
[212.68672180 85.57711029]
[219.71238708 100.00000000]
[212.68672180 114.42288971]
[196.99923706 117.78176880]
[184.68400574 107.50000000]
[169.68400574 107.50000000]
[154.68400574 107.50000000]
[152.88586426 115.80114746]
[149.83538818 123.72813416]
[145.60484314 131.09323120]
[140.29437256 137.72206116]
[149.75022888 149.36624146]
[159.20608521 161.01040649]
[168.66194153 172.65458679]
[178.35643005 184.10084534]
[188.28541565 195.34429932]
[198.21438599 206.58776855]
[208.14337158 217.83122253]
[223.57699585 216.22416687]
[236.99078369 224.02481079]
[243.22683716 238.23365784]
[239.88728333 253.38710022]
[228.25624084 263.65835571]
[212.80609131 265.09790039]
[199.47772217 257.15219116]
[193.39616394 242.87652588]
[196.89990234 227.76020813]
[186.97093201 216.51673889]
[177.04194641 205.27328491]
[167.11297607 194.02981567]
[162.42666626 192.84629822]
[158.45794678 188.66793823]
[157.01777649 182.11044312]
[147.56192017 170.46626282]
[138.10606384 158.82209778]
[128.65019226 147.17793274]
[115.13956451 153.07904053]
[100.54879761 155.19320679]
[85.91886902 153.36958313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[5 39]
[6 38]
[7 37]
[9 34]
[10 33]
[11 32]
[13 30]
[14 29]
[17 26]
[51 86]
[52 85]
[53 84]
[57 72]
[58 71]
[59 70]
[60 69]
[88 107]
[89 106]
[90 105]
[92 103]
[93 102]
[94 101]
[95 100]
[109 119]
[110 118]
[111 117]
[123 148]
[124 147]
[125 146]
[126 145]
[127 142]
[128 141]
[129 140]
[130 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
