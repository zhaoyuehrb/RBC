%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCACGCAGCGCACGUCGCCGCGCGCCUGCGCUCUUUUCCACGUGCGAAAGCCCCGGACUCGUGGAGUUGUGAACGCCGCGGACUCCGGAGCCGCACAAACCAGGGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[119.12802124 157.57588196]
[118.71829224 142.58146667]
[118.30857086 127.58706665]
[111.84780121 123.77808380]
[104.22960663 136.69950867]
[91.30831146 129.08110046]
[98.92625427 116.16010284]
[92.46547699 112.35111237]
[79.14720154 119.25209045]
[65.82891846 126.15306091]
[52.51064301 133.05404663]
[39.28786469 140.13627625]
[26.16305542 147.39846802]
[13.03824520 154.66065979]
[4.70924997 168.11198425]
[-10.17293358 167.50379944]
[-23.29774284 174.76599121]
[-31.28639984 189.08776855]
[-47.68552399 189.05970764]
[-55.62510300 174.71064758]
[-46.93757629 160.80169678]
[-30.55993080 161.64117432]
[-17.43511963 154.37899780]
[-10.04489899 141.44709778]
[5.77605820 141.53584290]
[18.90086746 134.27365112]
[32.02567673 127.01146698]
[36.41415787 120.93748474]
[45.60966873 119.73576355]
[58.92794418 112.83478546]
[72.24622345 105.93380737]
[85.56449890 99.03283691]
[97.45439911 89.88787079]
[107.54200745 78.78651428]
[117.62961578 67.68515778]
[127.71722412 56.58379745]
[137.80484009 45.48244095]
[131.93460083 33.48224258]
[130.53762817 20.22877121]
[133.76132202 7.33080769]
[141.19352722 -3.65362263]
[151.91511536 -11.40544415]
[164.61360168 -15.00292110]
[177.74374390 -14.03122044]
[189.71568298 -8.63011742]
[200.39447021 -19.16403389]
[211.07325745 -29.69795036]
[221.75205994 -40.23186493]
[232.43084717 -50.76578522]
[233.87297058 -56.06836700]
[236.95841980 -59.83364105]
[240.78651428 -61.68592453]
[244.44175720 -61.67988586]
[255.94705200 -71.30425262]
[261.56759644 -86.09342957]
[276.29409790 -88.32490540]
[287.79937744 -97.94926453]
[299.30468750 -107.57363129]
[310.80996704 -117.19799042]
[322.31524658 -126.82235718]
[328.16128540 -144.21728516]
[345.47412109 -146.70608521]
[356.71221924 -156.64112854]
[367.95031738 -166.57615662]
[379.18841553 -176.51119995]
[390.42654419 -186.44624329]
[401.66464233 -196.38127136]
[406.87911987 -211.31846619]
[421.53918457 -213.95135498]
[432.77728271 -223.88638306]
[444.01541138 -233.82142639]
[451.87747192 -248.84220886]
[468.48770142 -245.44555664]
[469.82192993 -228.54418945]
[453.95043945 -222.58331299]
[442.71234131 -212.64828491]
[431.47421265 -202.71324158]
[427.06356812 -188.48667908]
[411.59967041 -185.14317322]
[400.36157227 -175.20812988]
[389.12347412 -165.27308655]
[377.88534546 -155.33805847]
[366.64724731 -145.40301514]
[355.40914917 -135.46798706]
[354.32202148 -123.33510590]
[344.92172241 -114.96881104]
[331.93960571 -115.31707001]
[320.43432617 -105.69271088]
[308.92904663 -96.06834412]
[297.42376709 -86.44397736]
[285.91845703 -76.81961823]
[281.12084961 -62.71883011]
[265.57141113 -59.79896545]
[254.06611633 -50.17459869]
[242.96476746 -40.08699036]
[232.28596497 -29.55307388]
[221.60717773 -19.01915741]
[210.92839050 -8.48524189]
[200.24958801 2.04867506]
[206.17904663 17.74612999]
[204.71281433 34.51693344]
[196.09344482 49.04150772]
[181.98408508 58.42425156]
[165.14772034 60.77073288]
[148.90618896 55.57004929]
[138.81858826 66.67140961]
[128.73097229 77.77276611]
[118.64336395 88.87412262]
[108.55575562 99.97547913]
[124.28823090 108.61342621]
[133.30297852 127.17734528]
[133.71269226 142.17175293]
[134.12242126 157.16615295]
[136.83847046 176.35659790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[8 32]
[9 31]
[10 30]
[11 29]
[12 27]
[13 26]
[14 25]
[16 23]
[17 22]
[33 109]
[34 108]
[35 107]
[36 106]
[37 105]
[45 99]
[46 98]
[47 97]
[48 96]
[49 95]
[53 94]
[54 93]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
