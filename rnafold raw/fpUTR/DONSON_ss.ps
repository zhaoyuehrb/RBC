%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCGGGCCCGGCGCGCGCGGGAAGUCUCUGUAGGGCGGCCGGCUACCCUCAGCCGCCGCGCGUC\
) } def
/len { sequence length } bind def

/coor [
[75.40821075 108.64495850]
[60.42421722 109.33770752]
[45.44022369 110.03046417]
[30.45622826 110.72321320]
[15.47223377 111.41596222]
[0.48823878 112.10871887]
[-7.53143406 123.18238831]
[-20.31486893 127.44680786]
[-33.00083160 123.52183533]
[-40.90467072 113.09670258]
[-55.90467072 113.09670258]
[-70.90467072 113.09670258]
[-85.90467072 113.09670258]
[-95.81703949 125.19129181]
[-111.19409180 128.03390503]
[-124.77523804 120.28236389]
[-130.14788818 105.59670258]
[-124.77523804 90.91104126]
[-111.19409180 83.15950012]
[-95.81703949 86.00212097]
[-85.90467072 98.09670258]
[-70.90467072 98.09670258]
[-55.90467072 98.09670258]
[-40.90467072 98.09670258]
[-29.71205902 85.75485229]
[-12.72846889 85.15003967]
[-0.20451309 97.12472534]
[14.77948189 96.43196869]
[29.76347542 95.73921967]
[44.74747086 95.04647064]
[59.73146439 94.35371399]
[74.71546173 93.66096497]
[83.26251984 80.01630402]
[98.19499969 73.99551392]
[113.81610107 77.89555359]
[124.16629028 90.22853088]
[137.19369507 81.25091553]
[150.58058167 87.78089142]
[165.51658630 86.39686584]
[180.45260620 85.01284027]
[195.38861084 83.62881470]
[210.32463074 82.24478912]
[218.91490173 78.21987152]
[225.97990417 81.15814209]
[240.96389771 80.46538544]
[255.94789124 79.77263641]
[270.93188477 79.07988739]
[281.39260864 67.23299408]
[297.17141724 66.33621979]
[308.90707397 76.92160797]
[309.63696289 92.70903778]
[298.92807007 104.33209991]
[283.13381958 104.89504242]
[271.62463379 94.06388092]
[256.64062500 94.75662994]
[241.65664673 95.44937897]
[226.67265320 96.14213562]
[211.70864868 97.18080139]
[196.77264404 98.56482697]
[181.83662415 99.94885254]
[166.90061951 101.33287811]
[151.96459961 102.71690369]
[140.00552368 111.59552002]
[125.55031586 105.16454315]
[119.59279633 117.19342041]
[108.43969727 124.66298676]
[95.04858398 125.59247589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[10 24]
[11 23]
[12 22]
[13 21]
[36 64]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[44 57]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
