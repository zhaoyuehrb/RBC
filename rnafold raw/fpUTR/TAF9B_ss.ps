%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCCUGAGCGAGGAGCCCGCGAGCUCUCCUCUCUCCUCUGUCUCCGCGGAUGACGAGUGGCUGGAUAAC\
) } def
/len { sequence length } bind def

/coor [
[89.71097565 185.61723328]
[94.39065552 170.98863220]
[105.76847839 160.67160034]
[102.52188110 146.02716064]
[99.27528381 131.38272095]
[96.02869415 116.73828888]
[80.94130707 104.74630737]
[85.42351532 83.41708374]
[71.56532288 77.67683411]
[57.70713043 71.93657684]
[41.99649811 73.80381775]
[33.19896698 61.78496552]
[19.34077454 56.04471588]
[5.48258114 50.30446243]
[-8.37561226 44.56421280]
[-22.23380470 38.82395935]
[-36.09199905 33.08370972]
[-50.54682922 38.88850021]
[-64.51923370 32.86965561]
[-69.96413422 19.05340958]
[-86.14350891 21.72921753]
[-96.33998108 8.88538933]
[-90.06430054 -6.26544762]
[-73.77234650 -8.13741016]
[-64.22388458 5.19521666]
[-50.60419846 -0.72421706]
[-36.46824646 4.89979887]
[-30.35174561 19.22551537]
[-16.49355316 24.96576691]
[-2.63536048 30.70601845]
[11.22283268 36.44626999]
[25.08102608 42.18652344]
[38.93922043 47.92677307]
[53.65862274 45.64895630]
[63.44738007 58.07838821]
[77.30557251 63.81863785]
[91.16376495 69.55889130]
[106.14949036 68.90460205]
[119.45465088 61.97837067]
[132.75981140 55.05213928]
[139.16992188 48.09844971]
[146.79986572 48.12835693]
[160.39448547 41.78908157]
[173.98908997 35.44981003]
[187.44218445 28.81547737]
[200.74734497 21.88924789]
[209.09745789 7.77515364]
[225.49057007 8.22005558]
[233.06285095 22.76627731]
[224.02459717 36.44991302]
[207.67358398 35.19441223]
[194.36842346 42.12063980]
[189.74732971 48.19208145]
[180.32836914 49.04442596]
[166.73374939 55.38369751]
[153.13912964 61.72297287]
[139.68605042 68.35729980]
[126.38088226 75.28353119]
[113.07572174 82.20976257]
[119.63771820 99.65182495]
[110.67313385 113.49169159]
[113.91972351 128.13613892]
[117.16632080 142.78057861]
[120.41291809 157.42501831]
[135.08488464 161.96693420]
[145.50843811 173.24723816]
[148.87968445 188.23156738]
[144.29179382 202.88922119]
[132.97888184 213.27735901]
[117.98406219 216.60163879]
[103.34085846 211.96781921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[5 62]
[6 61]
[8 37]
[9 36]
[10 35]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[20 25]
[38 59]
[39 58]
[40 57]
[42 56]
[43 55]
[44 54]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
