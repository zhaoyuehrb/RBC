%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCGCUCGCGCAGGAGACCCCGGGUGACGGGGCCCGGCGCCGCUAACUGGAGCGAACCCCAGCGUCCGCCGAC\
) } def
/len { sequence length } bind def

/coor [
[172.54876709 148.82392883]
[158.32991028 153.10876465]
[144.94927979 145.86904907]
[140.55136108 130.92596436]
[127.46018982 123.60331726]
[114.36901093 116.28067780]
[101.27783203 108.95803070]
[97.14574432 109.59221649]
[92.76748657 108.24417877]
[89.10919189 104.86046600]
[87.11545563 99.85642242]
[75.01627350 90.99020386]
[62.91709518 82.12399292]
[50.81791306 73.25777435]
[35.11315536 71.34175110]
[29.42055511 57.57789993]
[17.32137299 48.71168518]
[8.27866745 46.05295563]
[4.91943693 39.22879791]
[-4.00729799 36.20344162]
[-7.08538532 29.24794388]
[-18.42162895 19.42503357]
[-29.75787163 9.60212231]
[-41.09411621 -0.22078881]
[-52.43035889 -10.04370022]
[-68.47071075 -10.33801460]
[-78.12693024 -23.14961243]
[-73.99158478 -38.65053177]
[-59.23696518 -44.94979477]
[-45.18154907 -37.21514511]
[-42.60744858 -21.37994385]
[-31.27120399 -11.55703259]
[-19.93496132 -1.73412144]
[-8.59871769 8.08878994]
[2.73752594 17.91170120]
[14.27178383 27.50132561]
[26.18758965 36.61250305]
[38.28676987 45.47872162]
[53.12611389 46.76057053]
[59.68412781 61.15859222]
[71.78330994 70.02481079]
[83.88249207 78.89102173]
[95.98167419 87.75724030]
[108.60047913 95.86685181]
[121.69165039 103.18949890]
[134.78283691 110.51213837]
[147.87400818 117.83478546]
[162.90884399 113.76154327]
[176.08084106 121.37422943]
[179.87141418 135.73275757]
[193.75869751 141.40225220]
[208.23429871 145.33378601]
[222.70989990 149.26530457]
[237.18550110 153.19683838]
[251.73829651 156.83226013]
[266.36221313 160.17007446]
[277.95864868 149.85975647]
[293.40386963 148.36825562]
[306.75888062 156.26907349]
[312.88842773 170.52420044]
[309.43554688 185.65222168]
[297.72796631 195.83613586]
[282.26745605 197.15998840]
[268.99893188 189.11476135]
[263.02441406 174.79399109]
[248.40048218 171.45617676]
[240.97068787 173.08462524]
[233.25398254 167.67243958]
[218.77838135 163.74092102]
[204.30278015 159.80938721]
[189.82716370 155.87786865]
[194.58833313 170.10218811]
[188.23382568 183.68968201]
[174.26466370 189.15434265]
[160.37715149 183.48539734]
[154.22261047 169.80615234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[4 47]
[5 46]
[6 45]
[7 44]
[11 43]
[12 42]
[13 41]
[14 40]
[16 38]
[17 37]
[19 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[51 71]
[52 70]
[53 69]
[54 68]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
