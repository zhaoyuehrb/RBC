%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAAGUGACGCGAGGCGUAGCGGAAGUUACUGCAGCCGCGGUGUUGUGCUGUGGGGAAGGGAGAAGGAUUUGUAAACCCCGGAGCGAGGUUCUGCUUACCCGAGGCCGCUGCUGUGCGGAGACCCCCGGGUGAAGCCACCGUCAUC\
) } def
/len { sequence length } bind def

/coor [
[106.18730164 311.11712646]
[92.76051331 318.89535522]
[77.32958984 317.26254272]
[65.82802582 306.84649658]
[62.67841721 291.65243530]
[69.09184265 277.52276611]
[82.60221863 269.89065552]
[84.18063354 254.97392273]
[85.75904083 240.05720520]
[87.33745575 225.14048767]
[88.91586304 210.22375488]
[90.49427795 195.30703735]
[88.05387878 188.27677917]
[92.26644897 180.09364319]
[86.19677734 166.49186707]
[95.61341095 153.77818298]
[97.50595856 138.89805603]
[99.39850616 124.01792908]
[87.02617645 115.53704834]
[73.83010864 122.66893768]
[60.63404465 129.80082703]
[47.43798065 136.93272400]
[34.24191284 144.06460571]
[26.11185646 158.30659485]
[9.71381569 158.11616516]
[1.91668761 143.68922424]
[10.74149036 129.86695862]
[27.11002350 130.86854553]
[40.30608749 123.73664856]
[53.50215530 116.60475922]
[66.69821930 109.47286987]
[79.89428711 102.34098053]
[65.67334747 107.11223602]
[51.50740051 102.18009186]
[43.32466888 89.60858154]
[44.54949188 74.65867615]
[54.66930008 63.58665848]
[69.44911957 61.02600098]
[82.70383453 68.04829407]
[88.88668060 81.71607208]
[85.13182831 67.19364166]
[81.37698364 52.67120361]
[77.62213135 38.14876938]
[62.70534897 35.10722733]
[50.63755417 25.92815971]
[43.77989197 12.47480774]
[43.44482422 -2.56010938]
[49.64525986 -16.19330597]
[61.10261917 -25.74288368]
[57.34776688 -40.26531982]
[53.59291840 -54.78775406]
[49.83806992 -69.31018829]
[38.89260101 -80.73416901]
[43.19763184 -94.99305725]
[39.44278336 -109.51549530]
[35.68793106 -124.03792572]
[31.93308258 -138.56036377]
[28.17823410 -153.08279419]
[13.89442730 -158.85159302]
[5.84048939 -171.77395630]
[6.92718649 -186.78340149]
[16.52874184 -198.13893127]
[5.58327389 -209.56291199]
[9.88830376 -223.82180786]
[6.13345385 -238.34423828]
[2.37860441 -252.86666870]
[-9.49471855 -264.17843628]
[-5.37264204 -280.05108643]
[10.50439453 -284.15615845]
[21.80345726 -272.27075195]
[16.90103912 -256.62152100]
[20.65588951 -242.09909058]
[24.41073799 -227.57664490]
[35.08763504 -217.19140625]
[31.05117607 -201.89378357]
[44.95353699 -196.61529541]
[53.17922592 -184.01362610]
[52.39819717 -168.80694580]
[42.70066833 -156.83764648]
[46.45551682 -142.31521606]
[50.21036530 -127.79277802]
[53.96521759 -113.27033997]
[57.72006607 -98.74790955]
[68.39696503 -88.36267090]
[64.36050415 -73.06504059]
[68.11535645 -58.54260254]
[71.87020111 -44.02016830]
[75.62505341 -29.49773407]
[90.27528381 -26.69840622]
[102.30676270 -17.77916336]
[109.30122375 -4.46606588]
[109.82392120 10.62522221]
[103.71766663 24.50328445]
[92.14456177 34.39392090]
[95.89941406 48.91635513]
[99.65426636 63.43878937]
[103.40911102 77.96122742]
[114.29154205 88.28462982]
[128.99163818 91.26911926]
[143.69172668 94.25361633]
[158.39183044 97.23810577]
[173.09191895 100.22260284]
[187.79202271 103.20709229]
[202.49211121 106.19158936]
[217.55583191 101.35475159]
[228.48918152 111.46965027]
[243.18927002 114.45413971]
[258.00210571 116.81627655]
[272.90136719 118.55184937]
[287.80062866 120.28742981]
[302.69989014 122.02300262]
[314.93609619 112.02047729]
[330.65267944 113.68304443]
[340.52529907 126.02433014]
[338.69665527 141.72247314]
[326.25167847 151.46403503]
[310.57376099 149.46952820]
[300.96429443 136.92225647]
[286.06506348 135.18669128]
[271.16580200 133.45111084]
[256.26654053 131.71553040]
[253.95793152 133.41682434]
[250.81393433 134.27398682]
[247.16473389 133.95555115]
[243.45721436 132.26016235]
[240.20478821 129.15423584]
[225.50468445 126.16974640]
[211.49241638 131.22004700]
[199.50762939 120.89167786]
[184.80752563 117.90718842]
[170.10743713 114.92269897]
[155.40733337 111.93820190]
[140.70724487 108.95371246]
[126.00714874 105.96921539]
[111.30705261 102.98472595]
[116.27189636 112.69676971]
[114.27864075 125.91047668]
[112.38608551 140.79060364]
[110.49353790 155.67074585]
[116.42784119 170.33683777]
[107.14657593 181.98619080]
[105.41099548 196.88545227]
[103.83258820 211.80216980]
[102.25417328 226.71888733]
[100.67576599 241.63562012]
[99.09735107 256.55233765]
[97.51894379 271.46905518]
[109.13282013 281.75970459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[12 142]
[14 141]
[16 139]
[17 138]
[18 137]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[40 97]
[41 96]
[42 95]
[43 94]
[49 88]
[50 87]
[51 86]
[52 85]
[54 83]
[55 82]
[56 81]
[57 80]
[58 79]
[62 75]
[64 73]
[65 72]
[66 71]
[98 135]
[99 134]
[100 133]
[101 132]
[102 131]
[103 130]
[104 129]
[106 127]
[107 126]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
