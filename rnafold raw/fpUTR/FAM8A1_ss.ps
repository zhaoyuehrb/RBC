%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGGCGGGGGAUUGUUGACGCCUGCGGUUGCUGCGGUGGUGACGGGGCUGUUGGGGAGGGGCCAUUGGGGGAGGGAAACGGAGCAGUGACAGGUAUCCCAGAGGGUGCUGCUGAGGCGACG\
) } def
/len { sequence length } bind def

/coor [
[54.69644928 139.89265442]
[61.11219406 126.33395386]
[72.39920807 116.45257568]
[57.44251633 117.59156799]
[42.48582077 118.73056793]
[27.52912712 119.86956024]
[12.57243347 121.00856018]
[-2.38426018 122.14756012]
[-17.34095383 123.28655243]
[-23.25964737 133.75332642]
[-33.42101669 139.95372009]
[-45.19488907 140.42030334]
[-55.59983444 135.15235901]
[-62.05813980 125.58647919]
[-77.05332947 125.96646881]
[-92.04851532 126.34645844]
[-107.04370117 126.72644806]
[-122.03888702 127.10644531]
[-132.89245605 138.27952576]
[-148.10511780 138.45127869]
[-158.69006348 128.03521729]
[-173.68524170 128.41520691]
[-188.68043518 128.79519653]
[-203.67561340 129.17518616]
[-212.28854370 132.55256653]
[-219.05439758 129.37001038]
[-234.05439758 129.37001038]
[-249.05439758 129.37001038]
[-264.05441284 129.37001038]
[-279.89352417 135.41635132]
[-290.08828735 121.87001038]
[-279.89352417 108.32366943]
[-264.05441284 114.37001038]
[-249.05439758 114.37001038]
[-234.05439758 114.37001038]
[-219.05439758 114.37001038]
[-204.05560303 114.18000031]
[-189.06042480 113.80001068]
[-174.06523132 113.42002106]
[-159.07005310 113.04003143]
[-149.02626038 102.10121155]
[-133.82441711 101.50223541]
[-122.41887665 112.11125946]
[-107.42369080 111.73126221]
[-92.42850494 111.35127258]
[-77.43331909 110.97128296]
[-62.43813324 110.59129333]
[-50.76013565 96.60241699]
[-32.25669479 95.45675659]
[-18.47994995 108.32985687]
[-3.52325678 107.19086456]
[11.43343735 106.05186462]
[26.39013100 104.91287231]
[41.34682465 103.77387238]
[56.30351639 102.63487244]
[71.26020813 101.49588013]
[85.82782745 97.92034149]
[94.35126495 86.83689880]
[108.25683594 88.29529572]
[122.04119873 82.37995911]
[131.67172241 69.82752228]
[146.41880798 71.91870117]
[156.04933167 59.36627197]
[170.79640198 61.45745087]
[184.58076477 55.54211426]
[194.21130371 42.98968124]
[208.95837402 45.08086014]
[222.74273682 39.16552353]
[236.52709961 33.25018311]
[250.31147766 27.33484650]
[264.09585571 21.41950989]
[277.88021851 15.50417137]
[276.89227295 -0.34418309]
[281.36367798 -15.55289364]
[290.74020386 -28.30170441]
[303.88177490 -37.07126999]
[319.20095825 -40.82420349]
[334.85476685 -39.12778854]
[348.96636963 -32.20376205]
[359.85000610 -20.89954758]
[373.48010254 -27.16218185]
[378.73330688 -42.06787109]
[393.02365112 -48.81776810]
[407.87298584 -43.40727615]
[414.47140503 -29.04635048]
[408.90423584 -14.25506783]
[394.47433472 -7.80883646]
[379.74273682 -13.53209019]
[366.11264038 -7.26945543]
[367.69293213 6.85626507]
[364.81277466 20.79722023]
[357.74276733 33.17760086]
[347.16766357 42.77138138]
[334.12014771 48.62374496]
[319.87982178 50.14609146]
[305.84790039 47.17520905]
[293.40921021 39.99066162]
[283.79553223 29.28853798]
[270.01116943 35.20387650]
[256.22680664 41.11921310]
[242.44244385 47.03455353]
[228.65808105 52.94989014]
[214.87371826 58.86522675]
[206.22914124 70.99455261]
[190.49610901 69.32647705]
[176.71174622 75.24182129]
[168.06716919 87.37114716]
[152.33413696 85.70307159]
[143.68955994 97.83239746]
[127.95653534 96.16432190]
[114.17217255 102.07965851]
[105.64873505 113.16310120]
[91.74316406 111.70470428]
[106.32139587 115.23675537]
[118.28600311 124.28375244]
[125.65642548 137.34808350]
[127.21258545 152.26715088]
[122.69689178 166.57128906]
[112.85684967 177.89266968]
[99.32134247 184.35717773]
[84.33097076 184.89471436]
[70.36720276 179.41630554]
[59.74152374 168.82881165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 56]
[4 55]
[5 54]
[6 53]
[7 52]
[8 51]
[9 50]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[21 40]
[22 39]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[29 33]
[57 113]
[59 111]
[60 110]
[62 108]
[64 106]
[65 105]
[67 103]
[68 102]
[69 101]
[70 100]
[71 99]
[72 98]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
