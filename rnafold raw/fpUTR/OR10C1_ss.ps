%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCAUUUCACGAUUCCAUAGUUGUGAUUUUUCCUUGCCAUUUCUUUUGUCUUCCAGUCAAAGGUAUGCAGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[-10.09918213 153.92144775]
[-18.58398247 163.96147156]
[-29.58948898 171.11640930]
[-42.17383194 174.78646851]
[-55.26363754 174.66961670]
[-67.74557495 170.78633118]
[-78.56108093 163.47697449]
[-86.79606628 153.37200928]
[-91.75824738 141.33763123]
[-106.70960999 142.54463196]
[-121.66097260 143.75163269]
[-136.61233521 144.95863342]
[-151.56369019 146.16561890]
[-166.51504517 147.37261963]
[-181.46640015 148.57962036]
[-196.41777039 149.78662109]
[-209.59928894 159.54263306]
[-224.52908325 152.75785828]
[-225.84866333 136.41188049]
[-212.20056152 127.32005310]
[-197.62477112 134.83526611]
[-182.67340088 133.62826538]
[-167.72204590 132.42126465]
[-152.77069092 131.21426392]
[-137.81932068 130.00726318]
[-122.86796570 128.80026245]
[-107.91661072 127.59326935]
[-92.96524811 126.38627625]
[-88.34223175 110.00395966]
[-77.90289307 96.51564026]
[-63.14454651 87.89762115]
[-46.19961929 85.42469025]
[-29.52757835 89.48157501]
[-15.55795383 99.50336456]
[-6.33627987 114.05400848]
[8.36057949 111.05362701]
[23.05743980 108.05323792]
[37.75429916 105.05285645]
[52.45116043 102.05246735]
[67.14801788 99.05208588]
[71.96340179 82.85063934]
[84.19381714 71.18479919]
[100.60459137 67.13990784]
[116.85546875 71.78574371]
[128.64846802 83.89358521]
[143.05624390 79.72032166]
[157.46400452 75.54705811]
[171.87178040 71.37380219]
[186.27955627 67.20053864]
[200.68731689 63.02727509]
[211.78999329 51.75600815]
[226.16741943 55.64687729]
[240.57518005 51.47361374]
[254.10676575 41.25927353]
[267.66784668 51.43441772]
[261.64440918 67.28227997]
[244.74844360 65.88138580]
[230.34068298 70.05464935]
[220.26855469 81.02741241]
[204.86058044 77.43504333]
[190.45281982 81.60830688]
[176.04504395 85.78157043]
[161.63726807 89.95483398]
[147.22949219 94.12809753]
[132.82173157 98.30135345]
[130.95323181 111.04757690]
[124.32899475 122.09641266]
[113.96678162 129.75028992]
[101.45867920 132.83326721]
[88.72646332 130.87164307]
[77.72634125 124.16682434]
[70.14840698 113.74893951]
[55.45154572 116.74932861]
[40.75468445 119.74971771]
[26.05782509 122.75009918]
[11.36096478 125.75048828]
[-3.33589458 128.75086975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
