%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGGUGCGGGCCGCACUCAGAGGCCGUCCAAGACACUGGCAAGCCGCAGAAGCCCAGUUCGCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[25.60787773 171.55451965]
[15.73058605 179.56518555]
[3.42521286 182.47166443]
[-8.84908581 179.75865173]
[-18.66774368 172.02737427]
[-32.36191177 178.14863586]
[-46.05607986 184.26988220]
[-59.75024796 190.39114380]
[-73.44441986 196.51239014]
[-87.13858795 202.63365173]
[-100.83275604 208.75489807]
[-112.82559204 220.73855591]
[-127.66087341 212.53181458]
[-123.88166809 196.00445557]
[-106.95401001 195.06072998]
[-93.25984192 188.93948364]
[-79.56567383 182.81822205]
[-65.87150574 176.69697571]
[-52.17733383 170.57571411]
[-38.48316574 164.45446777]
[-24.78899765 158.33320618]
[-22.14343262 141.13685608]
[-9.76693916 128.69154358]
[7.71679831 125.90238190]
[23.62391853 134.01828003]
[36.72350311 126.71068573]
[49.82308578 119.40309143]
[62.92266846 112.09550476]
[76.02225494 104.78791046]
[76.27737427 94.07602692]
[81.08807373 84.50176239]
[89.53052521 77.90370178]
[99.98348999 75.54890442]
[110.43962097 77.88957977]
[118.89097595 84.47623444]
[132.84249878 78.96670532]
[139.94467163 72.71099091]
[147.53501892 73.53711700]
[161.71659851 68.65010834]
[175.89817810 63.76310349]
[190.07975769 58.87609482]
[204.26132202 53.98908615]
[208.09013367 49.51895142]
[212.83410645 47.42063522]
[217.33189392 47.61486816]
[220.65577698 49.53134918]
[235.35940552 46.56431961]
[242.68360901 32.74801636]
[257.19454956 26.91995239]
[272.04064941 31.83196068]
[280.21197510 45.16474152]
[277.85034180 60.62296295]
[266.07080078 70.90773010]
[250.43528748 71.16287994]
[238.32644653 61.26795197]
[223.62281799 64.23497772]
[209.14833069 68.17066193]
[194.96676636 73.05767059]
[180.78518677 77.94467926]
[166.60360718 82.83168793]
[152.42202759 87.71869659]
[138.35203552 92.91823578]
[124.40050507 98.42775726]
[118.20787811 116.31961060]
[101.09805298 124.42643738]
[83.32984924 117.88748932]
[70.23026276 125.19508362]
[57.13068008 132.50267029]
[44.03109360 139.81027222]
[30.93151093 147.11785889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[35 63]
[36 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[46 56]
[47 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
