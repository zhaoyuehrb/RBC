%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUCGGUCCAGGCAUCGGUGGCGGGGAGCCAGGCCUAGGCCAGCCCGGGCCCACCCAGACUGGCCCCUAAUGAGCUCCCAAGUGGCCUGUGGGGACUUGGCCUCAGUUUUGCCAGCUGUGAACUGGGACCGUCGCUGCUAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[173.78829956 436.66052246]
[170.60693359 422.00177002]
[157.98077393 414.18414307]
[154.54560852 399.36340332]
[162.83106995 386.17291260]
[159.64971924 371.51416016]
[156.46835327 356.85543823]
[153.28698730 342.19668579]
[150.10563660 327.53793335]
[146.92427063 312.87918091]
[143.58645630 298.25524902]
[140.09257507 283.66784668]
[127.34975433 271.64587402]
[132.64114380 254.04258728]
[128.83631897 239.53317261]
[125.03150177 225.02374268]
[114.31892395 214.67532349]
[118.30269623 199.36389160]
[107.59011841 189.01545715]
[111.57389069 173.70402527]
[107.76907349 159.19459534]
[103.96424866 144.68518066]
[100.15943146 130.17575073]
[96.35461426 115.66633606]
[88.17159271 103.09500885]
[76.44412231 93.74266815]
[64.71664429 84.39031982]
[52.98917389 75.03797150]
[41.26170349 65.68562317]
[29.53422928 56.33327866]
[17.70749283 47.10677719]
[5.78284121 38.00717926]
[-6.59840584 44.89978027]
[-20.63059616 46.53458786]
[-34.18123627 42.69654465]
[-45.20375824 33.99978256]
[-52.04660797 21.78961754]
[-53.70066833 7.93452311]
[-49.94794464 -5.45977211]
[-61.67541504 -14.81211948]
[-73.40288544 -24.16446686]
[-85.13036346 -33.51681519]
[-96.85783386 -42.86915970]
[-108.58530426 -52.22150803]
[-124.19884491 -54.77650833]
[-129.32530212 -68.76110077]
[-144.93882751 -71.31610107]
[-150.06529236 -85.30068970]
[-161.79275513 -94.65303802]
[-173.52023315 -104.00538635]
[-189.80802917 -105.91317749]
[-196.05036926 -121.07778168]
[-185.82566833 -133.89915466]
[-169.65222168 -131.18775940]
[-164.16789246 -115.73285675]
[-152.44041443 -106.38050842]
[-140.71293640 -97.02816010]
[-125.93823242 -95.14210510]
[-119.97294617 -80.48857117]
[-105.19824219 -78.60250854]
[-99.23295593 -63.94897842]
[-87.50548553 -54.59663391]
[-75.77801514 -45.24428558]
[-64.05054474 -35.89193726]
[-52.32307053 -26.53959084]
[-40.59559631 -17.18724442]
[-26.36727715 -24.38891792]
[-10.36486053 -24.68272591]
[4.22365475 -17.95962143]
[14.46996403 -5.51349449]
[18.29321480 10.20752430]
[14.88243961 26.08252716]
[26.80709076 35.18212509]
[34.08413696 36.75053787]
[38.88657761 44.60580444]
[50.61404800 53.95815277]
[62.34152222 63.31049728]
[74.06899261 72.66284943]
[85.79646301 82.01519012]
[97.52394104 91.36753845]
[99.13982391 86.50621796]
[102.73505402 82.14649200]
[108.12456512 78.90828705]
[113.77534485 64.13062286]
[128.50637817 61.92926025]
[140.03131104 52.32843781]
[151.55624390 42.72761154]
[163.08119202 33.12678909]
[168.99876404 15.72401714]
[186.35450745 13.33962727]
[197.67164612 3.49470997]
[202.49058533 -12.18042374]
[218.53340149 -15.58042526]
[229.29661560 -3.20766449]
[223.70796204 12.20982265]
[207.51655579 14.81184769]
[196.19941711 24.65676498]
[195.03073120 36.74127579]
[185.62078857 45.03411484]
[172.68200684 44.65172577]
[161.15707397 54.25254822]
[149.63214111 63.85337448]
[138.10719299 73.45420074]
[133.28076172 87.54514313]
[117.72539520 90.43321991]
[132.43914795 87.51683807]
[144.51634216 96.41297913]
[146.09407043 111.32977295]
[136.14512634 122.55557251]
[121.14682770 122.78176880]
[110.86403656 111.86151123]
[114.66885376 126.37094116]
[118.47367859 140.88035583]
[122.27849579 155.38978577]
[126.08331299 169.89920044]
[137.06803894 181.28544617]
[132.81211853 195.55906677]
[143.79684448 206.94529724]
[139.54092407 221.21893311]
[143.34574890 235.72834778]
[147.15055847 250.23777771]
[157.90499878 257.44195557]
[160.74792480 269.65817261]
[154.67999268 280.17395020]
[158.17387390 294.76138306]
[163.24989319 302.44268799]
[161.58302307 309.69781494]
[164.76438904 324.35656738]
[167.94573975 339.01531982]
[171.12710571 353.67407227]
[174.30845642 368.33282471]
[177.48982239 382.99157715]
[190.49775696 391.56079102]
[193.51528931 406.47216797]
[185.26568604 418.82043457]
[188.44705200 433.47918701]
[201.13922119 446.77514648]
[195.22552490 463.26559448]
[198.71942139 477.85302734]
[210.38803101 489.37582397]
[205.98205566 505.17202759]
[190.03398132 508.99182129]
[178.94981384 496.90573120]
[184.13200378 481.34689331]
[180.63810730 466.75949097]
[170.46455383 460.13378906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[5 132]
[6 131]
[7 130]
[8 129]
[9 128]
[10 127]
[11 125]
[12 124]
[14 121]
[15 120]
[16 119]
[18 117]
[20 115]
[21 114]
[22 113]
[23 112]
[24 111]
[25 80]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 73]
[32 72]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[46 59]
[48 57]
[49 56]
[50 55]
[83 105]
[85 103]
[86 102]
[87 101]
[88 100]
[90 97]
[91 96]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
