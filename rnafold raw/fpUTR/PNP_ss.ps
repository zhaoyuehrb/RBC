%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGCCAGAGCCUAGACCAGUGAGCCAACUGUGCGAACCAGACCCGGCAGCCUUGCUCAGUUCAGCAUAGCGGAGCGGAUCCGAUCGGAUCGGAGCGGAUCGGAGCACACCGGAGCAGGCUCAUCGAGAAGGCGUCUGCGAGACC\
) } def
/len { sequence length } bind def

/coor [
[84.66276550 453.92590332]
[78.65547180 439.84857178]
[79.88989258 424.59292603]
[88.08236694 411.66458130]
[101.35031891 404.03439331]
[100.70937347 389.04809570]
[97.25672150 382.45306396]
[100.21833038 373.73538208]
[99.89778137 358.73883057]
[99.57723236 343.74224854]
[99.09645844 328.74993896]
[98.45551300 313.76364136]
[97.81456757 298.77734375]
[97.17362213 283.79104614]
[84.14198303 278.92623901]
[73.92549133 269.42239380]
[68.09657288 256.69699097]
[67.56960297 242.66658020]
[72.45766449 229.45835876]
[82.05035400 219.08746338]
[94.91681671 213.14968872]
[94.59627533 198.15310669]
[94.27572632 183.15653992]
[93.95517731 168.15995789]
[93.63463593 153.16339111]
[93.31408691 138.16680908]
[92.99354553 123.17023468]
[77.98432922 113.77361298]
[72.61791229 95.60787201]
[81.14241028 77.32086182]
[68.65924835 69.00397491]
[56.17608643 60.68708801]
[43.69292068 52.37020111]
[31.20975685 44.05331421]
[18.72659302 35.73642731]
[6.15527105 27.55340195]
[-6.50277233 19.50517654]
[-19.16081619 11.45695114]
[-31.81885910 3.40872574]
[-44.60251617 5.44255209]
[-54.99566269 -1.57888722]
[-57.70009232 -13.41473579]
[-70.18325806 -21.73162270]
[-74.68630981 -21.84657478]
[-78.50832367 -23.28272820]
[-81.30973053 -25.65072441]
[-82.91773987 -28.48973083]
[-83.33509827 -31.33000755]
[-95.06256866 -40.68235397]
[-106.79004669 -50.03470230]
[-123.07784271 -51.94249725]
[-129.32017517 -67.10710144]
[-119.09548187 -79.92846680]
[-102.92203522 -77.21707916]
[-97.43769836 -61.76217270]
[-85.71022797 -52.40982819]
[-73.98274994 -43.05747986]
[-61.86636734 -34.21478653]
[-49.38320541 -25.89789963]
[-31.86504364 -25.75248909]
[-23.77063370 -9.24931812]
[-11.11258984 -1.20109212]
[1.54545331 6.84713364]
[14.20349693 14.89535904]
[21.58788490 15.83671951]
[27.04347992 23.25326157]
[39.52664566 31.57014847]
[52.00980759 39.88703537]
[64.49297333 48.20392227]
[76.97613525 56.52080917]
[89.45930481 64.83769989]
[104.40452576 63.55697632]
[115.29065704 53.23747253]
[126.17678833 42.91796875]
[130.95417786 23.38187218]
[149.86161804 19.53519058]
[160.29685974 8.75995064]
[164.23510742 -10.96243954]
[182.96092224 -15.61351776]
[192.92620850 -26.82481194]
[202.89149475 -38.03610611]
[212.85676575 -49.24739838]
[222.82205200 -60.45869446]
[232.78733826 -71.66999054]
[236.17250061 -87.12480164]
[250.41090393 -91.49711609]
[260.37619019 -102.70841217]
[259.19781494 -118.46871185]
[269.57196045 -130.39149475]
[285.34381104 -131.40318298]
[297.15625000 -120.90357208]
[298.00112915 -105.12187958]
[287.37722778 -93.42111206]
[271.58749390 -92.74312592]
[261.62219238 -81.53183746]
[258.94982910 -66.87892914]
[243.99862671 -61.70470428]
[234.03335571 -50.49340820]
[224.06806946 -39.28211594]
[214.10278320 -28.07082176]
[204.13749695 -16.85952759]
[194.17221069 -5.64823294]
[195.68835449 4.54434538]
[191.21578979 14.07197666]
[182.02896118 19.64612198]
[171.07209778 19.19518852]
[160.63685608 29.97042847]
[161.71609497 40.21848297]
[156.84049988 49.54629898]
[147.42387390 54.72280502]
[136.49629211 53.80410004]
[125.61016083 64.12360382]
[114.72402954 74.44310760]
[122.46879578 82.28314209]
[126.59562683 92.14238739]
[126.73428345 102.49739075]
[123.11128998 111.84358978]
[116.48230743 118.91383362]
[107.99011993 122.84969330]
[108.31066132 137.84626770]
[108.63121033 152.84283447]
[108.95175934 167.83941650]
[109.27230072 182.83598328]
[109.59284973 197.83256531]
[109.91339111 212.82913208]
[124.74726868 219.43257141]
[135.19219971 231.78857422]
[139.20533752 247.40228271]
[136.03587341 263.14962769]
[126.36491394 275.90252686]
[112.15992737 283.15011597]
[112.80087280 298.13641357]
[113.44181824 313.12271118]
[114.08276367 328.10900879]
[117.59682465 336.61898804]
[114.57380676 343.42169189]
[114.89435577 358.41827393]
[115.21490479 373.41485596]
[115.69567871 388.40713501]
[116.33662415 403.39343262]
[130.20761108 409.86294556]
[139.47401428 422.04458618]
[142.00646973 437.13912964]
[137.22305298 451.67794800]
[126.22294617 462.32012939]
[111.53389740 466.62020874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 140]
[6 139]
[8 138]
[9 137]
[10 136]
[11 134]
[12 133]
[13 132]
[14 131]
[21 125]
[22 124]
[23 123]
[24 122]
[25 121]
[26 120]
[27 119]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 64]
[37 63]
[38 62]
[39 61]
[42 59]
[43 58]
[48 57]
[49 56]
[50 55]
[72 113]
[73 112]
[74 111]
[76 107]
[77 106]
[79 102]
[80 101]
[81 100]
[82 99]
[83 98]
[84 97]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
