%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAGGCCCUGAGCUGACGUGUGGAGCCAGAGCCACCCAAUCCCGUAGGGACAGGUUUCACAACUUCCCGG\
) } def
/len { sequence length } bind def

/coor [
[91.08917999 157.80154419]
[74.58559418 152.67379761]
[60.30112457 142.94671631]
[49.48305893 129.46963501]
[43.07599640 113.41934967]
[41.63938904 96.19731903]
[26.91979218 93.31054688]
[12.20019531 90.42377472]
[-2.83105826 95.36057281]
[-13.83135700 85.31852722]
[-28.55095482 82.43175507]
[-43.27054977 79.54498291]
[-52.61156845 80.98063660]
[-58.55522537 76.20433807]
[-73.13700104 72.68697357]
[-87.71877289 69.16960144]
[-98.79888153 79.90434265]
[-113.92819214 82.92221832]
[-128.27899170 77.26023102]
[-137.27198792 64.72509766]
[-138.03756714 49.31674194]
[-130.33140564 35.95190811]
[-116.61254120 28.89526939]
[-101.25859833 30.39856911]
[-89.16896057 39.98211288]
[-84.20140076 54.58782578]
[-69.61962891 58.10519791]
[-55.03785324 61.62257004]
[-40.38377762 64.82537842]
[-25.66418076 67.71215820]
[-10.94458294 70.59893036]
[3.03382683 65.45565033]
[15.08696938 75.70417786]
[29.80656624 78.59095001]
[44.52616501 81.47772217]
[49.94760132 69.74808502]
[57.81247330 59.49526215]
[67.73683167 51.21978378]
[79.23620605 45.32563782]
[91.74921417 42.10055542]
[104.66500092 41.70198059]
[117.35305786 44.14937210]
[129.19398499 49.32325363]
[139.60972595 56.97105026]
[148.09182739 66.71941376]
[154.22619629 78.09245300]
[157.71337891 90.53495789]
[158.38313293 103.43952942]
[156.20277405 116.17619324]
[169.96652222 122.13933563]
[183.73028564 128.10247803]
[197.49403381 134.06561279]
[204.59996033 133.65789795]
[209.89015198 136.65011597]
[212.14962769 141.17895508]
[225.34980774 148.30322266]
[238.54998779 155.42749023]
[251.75016785 162.55175781]
[268.11813354 161.54072571]
[276.95089722 175.35787964]
[269.16210938 189.78932190]
[252.76419067 189.98922729]
[244.62591553 175.75193787]
[231.42572021 168.62767029]
[218.22554016 161.50340271]
[205.02536011 154.37913513]
[191.53089905 147.82937622]
[177.76713562 141.86622620]
[164.00338745 135.90309143]
[150.23963928 129.93994141]
[139.29621887 143.31544495]
[124.92157745 152.90875244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 35]
[7 34]
[8 33]
[10 31]
[11 30]
[12 29]
[14 28]
[15 27]
[16 26]
[49 70]
[50 69]
[51 68]
[52 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
