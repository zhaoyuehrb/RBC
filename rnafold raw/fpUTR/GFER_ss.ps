%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGCCUGGAGGCUGACCUGGAGGCUCAUCUGGAGGCCGAGCUGACCCGGCAGGCCUUGCGCGGGCAAC\
) } def
/len { sequence length } bind def

/coor [
[114.71564484 304.89834595]
[112.73033905 290.03033447]
[110.74502563 275.16229248]
[101.39129639 263.57104492]
[107.23401642 248.86820984]
[105.24871063 234.00018311]
[93.87834167 227.55432129]
[88.30511475 215.51480103]
[90.82115173 202.28852844]
[100.71019745 192.86497498]
[99.38449097 177.92367554]
[98.05879211 162.98237610]
[96.73309326 148.04107666]
[95.40738678 133.09976196]
[94.08168793 118.15846252]
[83.03829193 108.77819061]
[81.75770569 94.34536743]
[90.97701263 83.16723633]
[89.65130615 68.22593689]
[80.72462463 55.16358948]
[87.30680847 41.80229568]
[85.98110962 26.86099434]
[75.03406525 12.24198532]
[82.65957642 -3.40915561]
[80.67427063 -18.27719307]
[78.68896484 -33.14523315]
[76.70365143 -48.01327133]
[74.71834564 -62.88130569]
[60.32202911 -68.07790375]
[49.99825668 -79.37738800]
[46.11936188 -94.18321991]
[49.57668686 -109.09313965]
[59.57575607 -120.68093872]
[73.81886292 -126.28383636]
[89.03304291 -124.61432648]
[101.72219086 -116.05605316]
[108.97043610 -102.57563782]
[109.11217499 -87.27078247]
[102.11484528 -73.65843964]
[89.58638763 -64.86661530]
[91.57169342 -49.99857712]
[93.55699921 -35.13053894]
[95.54230499 -20.26250076]
[97.52761841 -5.39446354]
[107.06397247 2.36854529]
[108.67583466 14.96761131]
[100.92240906 25.53529358]
[102.24811554 40.47659683]
[111.07997131 52.47024155]
[104.59261322 66.90023041]
[105.91831207 81.84153748]
[116.96170807 91.22180939]
[118.24229431 105.65463257]
[109.02298737 116.83276367]
[110.34869385 131.77406311]
[111.67439270 146.71536255]
[113.00009155 161.65667725]
[114.32579803 176.59797668]
[115.65149689 191.53927612]
[129.20407104 202.35287476]
[130.87025452 219.27560425]
[120.11674500 232.01486206]
[122.10205841 246.88290405]
[131.59779358 259.53759766]
[125.61306763 273.17697144]
[127.59837341 288.04501343]
[129.58367920 302.91305542]
[140.01403809 315.56768799]
[134.01731873 330.83108521]
[117.76244354 333.00158691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[5 63]
[6 62]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[18 51]
[19 50]
[21 48]
[22 47]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
