%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUCAACCAAGAUGGCGCGGAUGGCUUCAGGCGCAUCACGACACCGGCGCGUCACGCGACCCGCCCUACGGGCACCUCCCGCGCUUUUCUUAGCGCCGCAGACGGUGGCCGAGCGGGGGACCGGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[119.88487244 242.80236816]
[117.04610443 228.07342529]
[114.20733643 213.34449768]
[111.36856079 198.61557007]
[108.52979279 183.88664246]
[105.69102478 169.15771484]
[93.25053406 161.04785156]
[90.16180420 146.15106201]
[98.75251770 133.15731812]
[91.32894897 132.82879639]
[83.99826813 130.82228088]
[77.14273071 127.16545105]
[71.13612366 121.97360992]
[66.32364655 115.44701385]
[63.00254822 107.86369324]
[61.40464020 99.56784821]
[46.44285965 100.63793945]
[33.22982025 109.34001923]
[19.98300171 102.53038788]
[5.03501368 103.77843475]
[-9.89706516 105.20427704]
[-24.81111908 106.80770874]
[-39.70503616 108.58849335]
[-54.59895706 110.36927795]
[-69.49287415 112.15006256]
[-84.36454773 114.10795593]
[-99.21186829 116.24267578]
[-114.05918884 118.37740326]
[-128.87661743 126.61634064]
[-140.89544678 114.65875244]
[-132.73231506 99.79942322]
[-116.19391632 103.53008270]
[-101.34658813 101.39535522]
[-86.49926758 99.26063538]
[-80.26563263 95.15491486]
[-71.27365875 97.25614166]
[-56.37974167 95.47535706]
[-41.48582458 93.69457245]
[-26.59190559 91.91378784]
[-20.26232719 87.95757294]
[-11.32290554 90.27220154]
[3.60917306 88.84635925]
[10.03110790 85.04190063]
[18.91291428 87.56860352]
[31.05578613 78.94306183]
[45.37276840 85.67615509]
[60.33455276 84.60607147]
[68.14157104 71.79785156]
[62.23681641 58.00894547]
[56.33206177 44.22004318]
[50.42731094 30.43113708]
[37.88227463 20.79097557]
[39.98477554 6.04551029]
[34.08002090 -7.74339390]
[28.17526817 -21.53229904]
[14.72996235 -30.92143059]
[16.40792274 -47.23450851]
[31.48300743 -53.69003296]
[44.44726181 -43.64712143]
[41.96417236 -27.43705177]
[47.86892700 -13.64814758]
[53.77367783 0.14075714]
[65.89636230 8.79464340]
[64.21621704 24.52638435]
[70.12096405 38.31528854]
[76.02571869 52.10419083]
[81.93047333 65.89309692]
[95.80049133 62.99399185]
[109.26799774 65.32804108]
[120.49639130 72.20492554]
[128.09133911 82.34099579]
[142.26635742 77.43497467]
[156.44136047 72.52895355]
[166.95191956 60.70360565]
[181.50982666 63.85267639]
[195.68482971 58.94665527]
[209.85984802 54.04063797]
[224.03485107 49.13461685]
[238.15048218 44.06026840]
[252.20472717 38.81830597]
[259.32360840 21.34427261]
[276.62225342 14.64166164]
[293.08428955 22.48507690]
[306.87319946 16.58032417]
[320.66210938 10.67557144]
[334.45101929 4.77081776]
[348.23989868 -1.13393545]
[353.88037109 -15.89743614]
[368.34201050 -22.27205086]
[383.04507446 -16.47583580]
[389.26641846 -1.94758034]
[383.31509399 12.69335842]
[368.72186279 18.76077080]
[354.14465332 12.65496922]
[340.35577393 18.55972290]
[326.56686401 24.46447563]
[312.77795410 30.36922836]
[298.98904419 36.27398300]
[297.11151123 47.64239883]
[289.86962891 56.75901794]
[278.99804688 61.25192261]
[267.19363403 59.87987518]
[257.44668579 52.87255096]
[243.39244080 58.11451340]
[238.17399597 63.45145798]
[228.94087219 63.30963135]
[214.76586914 68.21565247]
[200.59085083 73.12166595]
[186.41583252 78.02768707]
[176.91917419 89.50212860]
[161.34738159 86.70396423]
[147.17236328 91.60998535]
[132.99736023 96.51600647]
[128.73539734 116.59038544]
[113.48145294 130.31854248]
[126.28607941 139.18867493]
[128.95518494 154.16635132]
[120.41996002 166.31893921]
[123.25872803 181.04786682]
[126.09749603 195.77679443]
[128.93626404 210.50573730]
[131.77502441 225.23466492]
[134.61380005 239.96359253]
[148.97396851 245.60177612]
[157.98774719 258.12197876]
[158.77886963 273.52905273]
[151.09489441 286.90664673]
[137.38774109 293.98602295]
[122.03132629 292.50817871]
[109.92581177 282.94470215]
[104.93403625 268.34722900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[9 115]
[16 47]
[17 46]
[19 44]
[20 42]
[21 41]
[22 39]
[23 38]
[24 37]
[25 36]
[26 34]
[27 33]
[28 32]
[48 67]
[49 66]
[50 65]
[51 64]
[53 62]
[54 61]
[55 60]
[71 113]
[72 112]
[73 111]
[75 109]
[76 108]
[77 107]
[78 106]
[79 104]
[80 103]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
