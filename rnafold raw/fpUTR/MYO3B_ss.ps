%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGAUCGAAAGUCCUUUGGUAAUGAUGUGUCAUACAUUCUAGUCAUCAAAGACACCAUUUUCUGGGCCUGAAGUGUUCUGCUGGUUUUUGGAGGAAUGAGAAUCCAAUCUCUCAUAAGCCGGAUUCAGAAAAUAGGUCAUCG\
) } def
/len { sequence length } bind def

/coor [
[93.33798218 108.27445221]
[78.42713165 109.90745544]
[63.51628876 111.54045868]
[48.60544586 113.17346191]
[33.69459915 114.80646515]
[29.31259537 130.23915100]
[19.37994957 142.78828430]
[5.43323469 150.55992126]
[-10.38807487 152.39556885]
[-25.66979218 148.04475403]
[-38.09140778 138.19873047]
[-45.77843094 124.38087463]
[-60.65010452 126.33876801]
[-75.52178192 128.29666138]
[-83.69400024 132.54817200]
[-90.73881531 130.13137817]
[-105.64965820 131.76438904]
[-120.56050110 133.39738464]
[-135.47134399 135.03039551]
[-150.38218689 136.66339111]
[-165.29304504 138.29640198]
[-178.16885376 147.49009705]
[-191.66281128 141.18435669]
[-206.57365417 142.81736755]
[-221.42309570 144.93736267]
[-236.19520569 147.54208374]
[-250.96731567 150.14680481]
[-265.73944092 152.75152588]
[-280.51156616 155.35624695]
[-295.28366089 157.96096802]
[-309.83224487 166.66589355]
[-322.22439575 155.09565735]
[-314.53683472 139.98481750]
[-297.88839722 143.18885803]
[-283.11627197 140.58413696]
[-268.34414673 137.97941589]
[-253.57205200 135.37469482]
[-238.79992676 132.76997375]
[-224.02781677 130.16525269]
[-221.69505310 127.42639160]
[-217.88708496 125.71733093]
[-213.11982727 125.73381042]
[-208.20666504 127.90651703]
[-193.29582214 126.27351379]
[-181.48652649 117.19662476]
[-166.92604065 123.38555908]
[-152.01519775 121.75255585]
[-137.10435486 120.11955261]
[-122.19350433 118.48654938]
[-107.28266144 116.85354614]
[-92.37181854 115.22054291]
[-77.47967529 113.42498779]
[-62.60799789 111.46709442]
[-47.73632431 109.50920105]
[-44.60873795 95.78913879]
[-36.95916367 83.94223022]
[-25.69385338 75.40975189]
[-12.16039467 71.23808289]
[2.01347995 71.95039368]
[15.11566544 77.48116302]
[25.55649185 87.18157959]
[32.06159592 99.89562225]
[46.97244263 98.26261902]
[61.88328552 96.62961578]
[76.79412842 94.99661255]
[91.70497894 93.36360931]
[106.47709656 90.75888824]
[121.04722595 87.19359589]
[135.61735535 83.62831116]
[150.18748474 80.06301880]
[164.75761414 76.49773407]
[167.88720703 66.16033173]
[175.00259399 58.14284134]
[184.74629211 53.87251663]
[195.30163574 54.07136536]
[204.73143005 58.63493729]
[211.33349609 66.66397858]
[226.10562134 64.05925751]
[240.87773132 61.45453262]
[255.64985657 58.84981155]
[270.42196655 56.24508667]
[285.10095215 53.15843201]
[299.67108154 49.59314346]
[314.24121094 46.02785492]
[328.81134033 42.46256638]
[343.38146973 38.89727783]
[357.95159912 35.33198929]
[372.52172852 31.76670074]
[384.08737183 20.97102928]
[398.28897095 25.46150017]
[412.85910034 21.89621162]
[427.42922974 18.33092308]
[438.99487305 7.53525257]
[453.19644165 12.02572441]
[467.76657104 8.46043587]
[482.33670044 4.89514780]
[493.90234375 -5.90052366]
[508.10391235 -1.41005135]
[522.67407227 -4.97533989]
[530.65759277 -18.61493683]
[545.96838379 -22.53348732]
[559.52282715 -14.40618515]
[563.27929688 0.94518590]
[555.00915527 14.41292953]
[539.61889648 18.00687218]
[526.23931885 9.59479141]
[511.66921997 13.16007996]
[501.14572144 23.70073891]
[485.90200806 19.46527863]
[471.33184814 23.03056717]
[456.76171875 26.59585571]
[446.23825073 37.13651276]
[430.99450684 32.90105438]
[416.42437744 36.46634293]
[401.85424805 40.03163147]
[391.33074951 50.57228851]
[376.08703613 46.33683014]
[361.51690674 49.90211868]
[346.94674683 53.46740723]
[332.37661743 57.03269577]
[317.80648804 60.59798431]
[303.23635864 64.16327667]
[288.66622925 67.72856140]
[286.51760864 70.61412048]
[282.82955933 72.56857300]
[278.07144165 72.86392212]
[273.02670288 71.01720428]
[258.25457764 73.62192535]
[243.48245239 76.22664642]
[228.71034241 78.83137512]
[213.93821716 81.43609619]
[204.07109070 98.15844727]
[184.81745911 102.41482544]
[168.32290649 91.06786346]
[153.75277710 94.63314819]
[139.18264771 98.19844055]
[124.61251068 101.76372528]
[110.04238129 105.32901764]
[121.97271729 114.42116547]
[124.17908478 129.25801086]
[115.41065979 141.42825317]
[100.63842773 144.03233337]
[88.23706818 135.59396362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[12 54]
[13 53]
[14 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[23 44]
[24 43]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[67 138]
[68 137]
[69 136]
[70 135]
[71 134]
[77 131]
[78 130]
[79 129]
[80 128]
[81 127]
[82 123]
[83 122]
[84 121]
[85 120]
[86 119]
[87 118]
[88 117]
[90 115]
[91 114]
[92 113]
[94 111]
[95 110]
[96 109]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
