%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGAGGCCCUGAGGGGCCAGCAGUUGUCCUUCAGAGGGAGCCUGCAGAGGUGCAGAGUCAGGUGGGACCCGUCGUCCUCCCCUCGUCCUUCAGCGCCCUUUGCAGGAGAAGGAGACUUGGGAGGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[-69.53270721 483.75802612]
[-74.18604279 494.90414429]
[-82.33374023 503.77343750]
[-92.98411560 509.32144165]
[-104.85276794 510.90588379]
[-116.51743317 508.36080933]
[-124.98138428 520.74475098]
[-133.44532776 533.12866211]
[-141.90928650 545.51257324]
[-150.37322998 557.89648438]
[-151.07720947 574.28051758]
[-165.74131775 581.62194824]
[-179.28036499 572.36846924]
[-177.76655579 556.03936768]
[-162.75715637 549.43255615]
[-154.29319763 537.04864502]
[-145.82925415 524.66473389]
[-137.36531067 512.28076172]
[-128.90135193 499.89685059]
[-137.48884583 484.06491089]
[-136.94111633 465.97817993]
[-127.32242584 450.55224609]
[-111.17381287 442.02209473]
[-92.84232330 442.77963257]
[-85.29045868 429.81933594]
[-77.73859406 416.85903931]
[-70.18673706 403.89874268]
[-69.53086090 396.46182251]
[-62.29520035 390.72131348]
[-54.43473053 377.94583130]
[-46.57426071 365.17034912]
[-38.71379089 352.39486694]
[-30.85332298 339.61938477]
[-30.77368546 324.72497559]
[-16.95211220 317.02597046]
[-9.09164238 304.25048828]
[-1.23117328 291.47500610]
[-11.60854816 275.02185059]
[-12.35456371 255.50654602]
[-3.19147587 238.17280579]
[13.48554230 227.71678162]
[33.23397827 227.01498413]
[39.50979233 213.39096069]
[45.78560257 199.76693726]
[52.06141663 186.14289856]
[58.33723068 172.51887512]
[64.61304474 158.89483643]
[70.88885498 145.27081299]
[77.16466522 131.64678955]
[83.44047546 118.02275085]
[89.71629333 104.39872742]
[95.82829285 90.70042419]
[101.77560425 76.92982483]
[107.72291565 63.15922165]
[106.09136200 47.42236710]
[118.24071503 38.80596161]
[124.18803406 25.03536034]
[130.13534546 11.26475906]
[126.81507874 -8.55164909]
[142.62951660 -19.57603836]
[147.74102783 -33.67824936]
[152.68309021 -47.84073639]
[157.62513733 -62.00322723]
[153.73551941 -79.95473480]
[167.36068726 -90.94715118]
[171.96171570 -105.22406769]
[176.56274414 -119.50099182]
[181.16377258 -133.77792358]
[185.76480103 -148.05484009]
[179.75617981 -162.93019104]
[187.76506042 -176.83117676]
[203.64770508 -179.09416199]
[215.22032166 -167.98315430]
[213.60537720 -152.02159119]
[200.04171753 -143.45381165]
[195.44068909 -129.17687988]
[190.83966064 -114.89996338]
[186.23863220 -100.62303925]
[181.63760376 -86.34611511]
[186.88534546 -75.37818146]
[183.09321594 -63.40341568]
[171.78762817 -57.06116867]
[166.84556580 -42.89867783]
[161.90351868 -28.73619080]
[162.67773438 -21.31067848]
[156.66941833 -14.29579353]
[161.75384521 -5.29278851]
[160.97355652 5.23868322]
[154.34658813 13.74262047]
[143.90594482 17.21207237]
[137.95863342 30.98267365]
[132.01132202 44.75327682]
[134.06826782 59.50516510]
[121.49352264 69.10652924]
[115.54620361 82.87713623]
[109.59889221 96.64773560]
[109.53894043 104.79476166]
[103.34031677 110.67453766]
[97.06450653 124.29856873]
[90.78869629 137.92259216]
[84.51288605 151.54663086]
[78.23706818 165.17065430]
[71.96125793 178.79467773]
[65.68544769 192.41871643]
[59.40963364 206.04273987]
[53.13382339 219.66677856]
[46.85800934 233.29080200]
[54.60007095 240.93792725]
[59.85782623 250.44122314]
[62.21394348 261.02163696]
[61.48840332 271.81564331]
[57.75218964 281.94573975]
[51.32055664 290.59182739]
[42.72644043 297.05752563]
[32.67634201 300.82629395]
[21.99222374 301.60266113]
[11.54431152 299.33547974]
[3.68384242 312.11096191]
[-4.17662716 324.88644409]
[-4.81849813 340.69461060]
[-18.07783890 347.47982788]
[-25.93830681 360.25531006]
[-33.79877853 373.03082275]
[-41.65924454 385.80630493]
[-49.51971436 398.58178711]
[-57.22643661 411.45059204]
[-64.77829742 424.41088867]
[-72.33016205 437.37118530]
[-79.88201904 450.33151245]
[-72.53711700 460.05151367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[24 129]
[25 128]
[26 127]
[27 126]
[29 125]
[30 124]
[31 123]
[32 122]
[33 121]
[35 119]
[36 118]
[37 117]
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
[50 99]
[51 98]
[52 96]
[53 95]
[54 94]
[56 92]
[57 91]
[58 90]
[60 86]
[61 84]
[62 83]
[63 82]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
