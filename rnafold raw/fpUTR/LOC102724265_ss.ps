%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGUCAUGGGAAGACUCACAGGAAGCUGAAAUGCAUAUUGCUAGAUAGAAGAACCAAUCCGAAAAGGCUACUUUCUCUAUGAUUCCAACUACGUGACUUUCUGGAAAAGGCAAAACU\
) } def
/len { sequence length } bind def

/coor [
[166.79713440 306.51235962]
[175.39929199 294.10650635]
[187.03025818 284.48239136]
[180.92921448 270.77923584]
[174.82815552 257.07604980]
[168.72711182 243.37286377]
[162.62605286 229.66967773]
[156.52500916 215.96649170]
[150.42396545 202.26330566]
[144.32290649 188.56013489]
[137.33869934 175.28530884]
[129.50122070 162.49571228]
[121.66373444 149.70611572]
[113.82625580 136.91650391]
[106.36564636 140.28680420]
[98.10666656 142.10995483]
[89.37783813 142.20211792]
[80.54888916 140.45059204]
[72.01506805 136.82279968]
[64.17967987 131.37179565]
[57.43536758 124.23793793]
[42.84981918 127.73962402]
[28.26426888 131.24130249]
[16.74768257 142.91607666]
[0.94914800 138.51853943]
[-2.87915683 122.57249451]
[9.20099926 111.48187256]
[24.76258850 116.65575409]
[39.34813690 113.15406799]
[53.93368530 109.65238953]
[54.81521606 102.20437622]
[39.91921997 100.44107056]
[41.68277359 85.54510498]
[56.57827759 87.30834961]
[57.45980835 79.86033630]
[44.09471130 73.05048370]
[30.72961235 66.24062347]
[13.87186050 64.43713379]
[10.93817711 47.73893738]
[26.17168045 40.29738235]
[37.53947067 52.87552643]
[50.90456772 59.68538284]
[64.26966858 66.49523926]
[73.61170959 61.60161972]
[83.33150482 59.06203079]
[92.87542725 58.80046082]
[101.74172211 60.61776352]
[105.24340820 46.03221512]
[108.74508667 31.44666672]
[112.24676514 16.86111832]
[115.74844360 2.27556992]
[114.70748901 -6.92666149]
[119.53740692 -12.64349937]
[123.41969299 -27.13238716]
[127.30197906 -41.62127304]
[115.81621552 -51.61319733]
[109.83211517 -65.54437256]
[110.48737335 -80.63048553]
[117.59851837 -93.88162231]
[129.70788574 -102.69481659]
[144.38214111 -105.36533356]
[148.26443481 -119.85422516]
[141.52041626 -134.41093445]
[148.82507324 -148.69454956]
[164.57489014 -151.74789429]
[176.68795776 -141.22871399]
[175.87216187 -125.20641327]
[162.75332642 -115.97193909]
[158.87103271 -101.48304749]
[170.24406433 -91.83318329]
[176.32447815 -78.14604187]
[175.85734558 -63.11465073]
[168.88175964 -49.72206497]
[156.73379517 -40.64936447]
[141.79086304 -37.73898697]
[137.90858459 -23.25010109]
[134.02629089 -8.76121330]
[130.33399963 5.77725029]
[126.83231354 20.36279869]
[123.33063507 34.94834900]
[119.82895660 49.53389740]
[116.32727051 64.11944580]
[134.85665894 81.58786011]
[138.84031677 106.73968506]
[126.61585999 129.07902527]
[134.45333862 141.86863708]
[142.29081726 154.65823364]
[150.12829590 167.44783020]
[156.75958252 153.99324036]
[171.35375977 150.52770996]
[183.32591248 159.56474304]
[183.99279785 174.54991150]
[172.87075806 184.61471558]
[158.02609253 182.45907593]
[164.12713623 196.16226196]
[170.22819519 209.86544800]
[176.32923889 223.56863403]
[182.43029785 237.27180481]
[188.53134155 250.97499084]
[194.63238525 264.67816162]
[200.73344421 278.38134766]
[215.66816711 276.17764282]
[230.64349365 278.08615112]
[244.54812622 283.96520996]
[256.35028076 293.37860107]
[265.17413330 305.62777710]
[270.36489868 319.80377197]
[271.53738403 334.85461426]
[268.60461426 349.66345215]
[261.78417969 363.13134766]
[251.58221436 374.25891113]
[238.75578308 382.22039795]
[224.25668335 386.42501831]
[209.16085815 386.56076050]
[194.58850098 382.61752319]
[181.62098694 374.88796997]
[171.22058105 363.94564819]
[164.15907288 350.60260010]
[160.96046448 335.84887695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 101]
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[11 88]
[12 87]
[13 86]
[14 85]
[21 30]
[22 29]
[23 28]
[35 43]
[36 42]
[37 41]
[47 82]
[48 81]
[49 80]
[50 79]
[51 78]
[53 77]
[54 76]
[55 75]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
