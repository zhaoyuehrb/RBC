%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGCCGCGCUCCUCAUCUGCCCCGCGCCGAGCGCCGCCGCCGCCGCCGCCGCCGCCGCUCCGCUGCCCGCGCCGCCCGCGGCUCCCG\
) } def
/len { sequence length } bind def

/coor [
[-11.97084522 196.06263733]
[-22.29519463 185.18110657]
[-26.11243248 170.67494202]
[-22.48130417 156.12107849]
[-12.29819965 145.10887146]
[-27.28906250 145.63235474]
[-40.81079865 153.84657288]
[-53.80034637 146.55815125]
[-68.79120636 147.08164978]
[-83.78207397 147.60513306]
[-98.77293396 148.12863159]
[-113.76379395 148.65213013]
[-128.75465393 149.17561340]
[-133.14814758 163.66616821]
[-142.01068115 175.94355774]
[-154.38092041 184.67602539]
[-168.91702271 188.91633606]
[-184.04223633 188.20452881]
[-198.11589050 182.61784363]
[-209.61135864 172.76223755]
[-217.28172302 159.70681763]
[-220.29495239 144.86770630]
[-218.32418823 129.85455322]
[-211.58320618 116.29586792]
[-200.80322266 105.66239166]
[-187.15357971 99.10757446]
[-172.11485291 97.34243011]
[-157.31837463 100.55842590]
[-144.36912537 108.40672302]
[-134.67175293 120.03598022]
[-129.27815247 134.18475342]
[-114.28728485 133.66127014]
[-99.29642487 133.13777161]
[-84.30556488 132.61427307]
[-69.31470490 132.09078979]
[-54.32383728 131.56729126]
[-41.87434769 123.39053345]
[-27.81255531 130.64149475]
[-12.82169247 130.11801147]
[-5.35970306 125.04715729]
[4.65810966 126.72027588]
[18.75349998 121.58997345]
[32.84888840 116.45967102]
[46.94427872 111.32936859]
[61.03966522 106.19906616]
[70.35308075 94.57540131]
[85.96730804 97.12614441]
[95.10092163 86.53989410]
[108.90238953 88.77846527]
[122.99777985 83.64816284]
[133.31938171 71.65753937]
[147.92541504 74.57524109]
[162.02081299 69.44493866]
[176.11619568 64.31463623]
[187.48541260 49.95951080]
[204.59432983 53.41709137]
[218.50209045 47.79799271]
[228.39894104 35.45445633]
[243.09791565 37.86063766]
[257.00567627 32.24153900]
[269.42645264 20.70202637]
[283.95343018 29.44295120]
[279.57556152 45.82192230]
[262.62475586 46.14929581]
[248.71701050 51.76839447]
[239.81492615 63.71001434]
[224.12118530 61.70574951]
[210.21342468 67.32485199]
[205.10789490 78.44168091]
[193.38816833 83.16820526]
[181.24650574 78.41002655]
[167.15110779 83.54032898]
[153.05572510 88.67063141]
[143.74230957 100.29429626]
[128.12808228 97.74355316]
[114.03269196 102.87385559]
[104.89907837 113.46010590]
[91.09761047 111.22153473]
[80.77600861 123.21215820]
[66.16996765 120.29445648]
[52.07458115 125.42475891]
[37.97919083 130.55506897]
[23.88380051 135.68536377]
[9.78841209 140.81565857]
[23.35621071 147.21212769]
[32.17441559 159.34635925]
[34.06863785 174.22627258]
[28.57179832 188.18280029]
[17.03930855 197.77455139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 39]
[6 38]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[41 84]
[42 83]
[43 82]
[44 81]
[45 80]
[47 78]
[49 76]
[50 75]
[52 73]
[53 72]
[54 71]
[56 68]
[57 67]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
