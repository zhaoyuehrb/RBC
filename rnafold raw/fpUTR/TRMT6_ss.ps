%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCCGGAAAGCGGAAGCGGCGUGCAACACGUGGGGGCGGUGCCGGUCGGAGGGCUCCUAGUGCGCCAGGUUGUGGGAAGUGAGGCUGGCGGUGGCGACAACCGAGGAGGAGGGGCGGGACGCCGUGGAGCACGGCGACCGGCUGAGCGUC\
) } def
/len { sequence length } bind def

/coor [
[135.51258850 240.27774048]
[134.28994751 225.32765198]
[125.54100037 213.27339172]
[132.12771606 198.88847351]
[130.90507507 183.93838501]
[129.68243408 168.98829651]
[128.45979309 154.03820801]
[127.23715210 139.08811951]
[126.01451874 124.13803864]
[118.84024811 121.95175171]
[107.87924194 132.19169617]
[104.49170685 117.57918549]
[97.31743622 115.39289856]
[87.96508789 127.12036896]
[86.05728912 143.40817261]
[70.89268494 149.65051270]
[58.07131958 139.42581177]
[60.78270721 123.25236511]
[76.23760986 117.76802063]
[85.58995819 106.04055023]
[91.25946045 92.15326691]
[84.96755219 77.63698578]
[93.96056366 65.76369476]
[95.48790741 50.84165573]
[97.01525116 35.91962051]
[98.54260254 20.99758148]
[100.06994629 6.07554340]
[90.36562347 -6.10903358]
[92.12713623 -21.22034454]
[103.80307770 -30.39684105]
[105.33042145 -45.31887817]
[106.85776520 -60.24091721]
[93.59003448 -53.24325180]
[79.76422882 -59.06108856]
[75.49153137 -73.43968201]
[83.89667511 -85.86359406]
[98.83274841 -87.24688721]
[109.37689209 -76.57716370]
[112.41570282 -91.26612091]
[115.45451355 -105.95508575]
[118.49333191 -120.64405060]
[117.16468811 -129.74366760]
[121.74684906 -135.60025024]
[117.27436829 -150.77613831]
[127.64976501 -161.46260071]
[130.98757935 -176.08651733]
[134.32539368 -190.71043396]
[129.85290527 -205.88632202]
[140.22830200 -216.57278442]
[143.56611633 -231.19670105]
[134.56124878 -238.45487976]
[128.96600342 -248.51832581]
[127.56557465 -259.89526367]
[130.52651978 -270.91571045]
[137.37808228 -279.97662354]
[147.08653259 -285.77508545]
[158.21098328 -287.49560547]
[162.43696594 -301.88800049]
[166.66296387 -316.28039551]
[170.88894653 -330.67279053]
[175.11494446 -345.06518555]
[165.39808655 -361.27362061]
[170.46670532 -379.14907837]
[186.68106079 -387.55212402]
[190.31648254 -402.10488892]
[193.80328369 -416.69400024]
[197.14109802 -431.31793213]
[200.47891235 -445.94186401]
[203.81672668 -460.56576538]
[207.15454102 -475.18969727]
[205.55024719 -481.70407104]
[207.26138306 -487.20303345]
[210.93827820 -490.33618164]
[214.86979675 -504.81179810]
[218.80133057 -519.28741455]
[222.73284912 -533.76300049]
[218.88310242 -549.10870361]
[229.68574524 -559.36303711]
[233.61726379 -573.83868408]
[223.78854370 -585.84594727]
[222.92826843 -601.33917236]
[231.36723328 -614.36083984]
[245.86050415 -619.90380859]
[260.83511353 -615.83679199]
[270.53302002 -603.72357178]
[271.22515869 -588.22192383]
[262.64541626 -575.29260254]
[248.09286499 -569.90710449]
[244.16134644 -555.43151855]
[248.29231262 -541.12121582]
[237.20846558 -529.83148193]
[233.27693176 -515.35589600]
[229.34541321 -500.88027954]
[225.41387939 -486.40466309]
[221.77845764 -471.85186768]
[218.44064331 -457.22796631]
[215.10282898 -442.60403442]
[211.76501465 -427.98013306]
[208.42720032 -413.35620117]
[210.01451111 -406.09146118]
[204.86926270 -398.46948242]
[201.23384094 -383.91668701]
[209.12745667 -375.58224487]
[212.02081299 -364.34942627]
[209.07553101 -353.00582886]
[200.91732788 -344.42514038]
[189.50732422 -340.83920288]
[185.28134155 -326.44680786]
[181.05535889 -312.05441284]
[176.82936096 -297.66201782]
[172.60337830 -283.26962280]
[184.85000610 -269.23229980]
[186.24383545 -250.50648499]
[176.04986572 -234.55975342]
[158.19003296 -227.85888672]
[154.85221863 -213.23497009]
[159.56344604 -199.10508728]
[148.94931030 -187.37261963]
[145.61149597 -172.74870300]
[142.27368164 -158.12478638]
[146.98490906 -143.99490356]
[136.37077332 -132.26243591]
[133.18229675 -117.60523224]
[130.14347839 -102.91627502]
[127.10466766 -88.22731018]
[124.06584930 -73.53834534]
[121.77980042 -58.71357346]
[120.25245667 -43.79153442]
[118.72511292 -28.86949730]
[128.29989624 -17.51788330]
[126.96351624 -2.36305666]
[114.99198151 7.60288811]
[113.46463776 22.52492523]
[111.93729401 37.44696426]
[110.40995026 52.36900330]
[108.88260651 67.29103851]
[115.28376007 80.73999786]
[106.18149567 93.68061066]
[120.15155792 92.39319611]
[134.14385986 102.54988861]
[140.96459961 122.91539764]
[142.18724060 137.86547852]
[143.40988159 152.81556702]
[144.63252258 167.76565552]
[145.85516357 182.71574402]
[147.07780457 197.66583252]
[155.91419983 210.78942871]
[149.24003601 224.10501099]
[150.46267700 239.05509949]
[161.71403503 250.49128723]
[159.64500427 266.40036011]
[145.84277344 274.57824707]
[130.89521790 268.75155640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[13 20]
[14 19]
[21 138]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[30 129]
[31 128]
[32 127]
[38 126]
[39 125]
[40 124]
[41 123]
[43 122]
[45 120]
[46 119]
[47 118]
[49 116]
[50 115]
[57 111]
[58 110]
[59 109]
[60 108]
[61 107]
[64 102]
[65 101]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[73 94]
[74 93]
[75 92]
[76 91]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
