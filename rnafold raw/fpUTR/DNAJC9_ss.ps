%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGCGCGGCGUGGCCACGCCCCUUCAGUGCUUGUGACGCAGGCGCCCUGGGCUUUUUGGGCGCGAAAAAGAAGCAGUCCUGGGUUGUACCCGGCGCAGCUGGGAGCGGCUGCUUCCUCCGGGGUCGUAUCUCCGCCCGGC\
) } def
/len { sequence length } bind def

/coor [
[87.24700165 431.96105957]
[72.26316833 437.69378662]
[58.51253128 429.42944336]
[56.54339981 413.50769043]
[67.86632538 402.14236450]
[69.18277740 387.20022583]
[59.44863892 375.98498535]
[60.57085800 360.81277466]
[72.40045166 350.67877197]
[73.71691132 335.73663330]
[75.03336334 320.79452515]
[76.34981537 305.85241699]
[69.75936890 292.49517822]
[78.67796326 279.42733765]
[79.99442291 264.48519897]
[70.26027679 253.26994324]
[71.38249207 238.09774780]
[83.21209717 227.96372986]
[84.52854919 213.02162170]
[85.84500122 198.07949829]
[86.99724579 183.12380981]
[87.98514557 168.15638733]
[88.97304535 153.18894958]
[89.96094513 138.22151184]
[73.57083130 129.37968445]
[63.05009079 114.01325226]
[60.73514938 95.53476715]
[67.14010620 78.04791260]
[51.88749313 73.84452057]
[48.27962875 59.39348221]
[37.61493301 48.84529495]
[26.95023537 38.29710770]
[16.28553963 27.74891853]
[5.62084436 17.20073128]
[-9.63176441 12.99734211]
[-13.23963070 -1.45369840]
[-25.41760445 3.88466072]
[-38.65454865 4.74061632]
[-51.35706711 1.03308129]
[-62.00357437 -6.77101803]
[-69.32658386 -17.71542740]
[-72.46356201 -30.47169495]
[-71.05850983 -43.50041199]
[-65.30218506 -55.23697281]
[-75.49326324 -66.24341583]
[-85.68434906 -77.24986267]
[-95.87542725 -88.25630951]
[-106.06651306 -99.26275635]
[-116.25759125 -110.26920319]
[-131.21699524 -106.78899384]
[-145.90765381 -111.27009583]
[-156.37783813 -122.50712585]
[-159.81114197 -137.47735596]
[-155.28401184 -152.15390015]
[-144.01422119 -162.58880615]
[-129.03329468 -165.97517395]
[-114.37101746 -161.40205383]
[-103.97148132 -150.09960938]
[-100.63209534 -135.10815430]
[-105.25115204 -120.46028137]
[-95.06006622 -109.45383453]
[-84.86898804 -98.44738770]
[-74.67790222 -87.44094849]
[-64.48681641 -76.43450165]
[-54.29573822 -65.42805481]
[-38.36560822 -70.85787964]
[-21.60517502 -68.80973053]
[-7.35880995 -59.64406204]
[1.50979865 -45.14636230]
[3.19324446 -28.17948532]
[-2.69144368 -12.11839485]
[11.79835510 -8.66948128]
[16.16903114 6.53603601]
[26.83372688 17.08422279]
[37.49842453 27.63241005]
[48.16312027 38.18059921]
[58.82781601 48.72878647]
[73.31761169 52.17770004]
[77.68829346 67.38321686]
[98.69796753 60.50352478]
[120.11513519 65.98458862]
[130.06196594 54.75692368]
[140.00880432 43.52926254]
[149.95565796 32.30160141]
[159.90249634 21.07394028]
[169.84933472 9.84627914]
[175.82687378 -6.01894665]
[192.72682190 -4.66694498]
[196.10603333 11.94682312]
[181.07699585 19.79311943]
[171.13015747 31.02078056]
[161.18331909 42.24843979]
[151.23646545 53.47610092]
[141.28962708 64.70376587]
[131.34278870 75.93142700]
[135.38638306 82.40820312]
[138.10893250 89.54170990]
[153.06462097 88.38946533]
[168.02029419 87.23721313]
[182.97596741 86.08496857]
[197.93165588 84.93272400]
[212.88732910 83.78047943]
[227.84301758 82.62823486]
[241.06015015 72.92055511]
[255.96501160 79.75995636]
[257.22473145 96.11064911]
[243.54342651 105.15244293]
[228.99525452 97.58391571]
[214.03958130 98.73616028]
[199.08389282 99.88840485]
[184.12821960 101.04064941]
[169.17254639 102.19289398]
[154.21685791 103.34513855]
[139.26118469 104.49738312]
[137.97328186 110.94062042]
[135.63555908 117.08138275]
[132.31266785 122.74991608]
[128.09645081 127.78950500]
[123.10347748 132.06082153]
[117.47178650 135.44578552]
[111.35707092 137.85081482]
[104.92837524 139.20941162]
[103.94047546 154.17684937]
[102.95258331 169.14428711]
[101.96468353 184.11170959]
[104.53643799 192.95919800]
[100.78712463 199.39595032]
[99.47066498 214.33807373]
[98.15421295 229.28018188]
[108.02964783 241.32650757]
[106.48171234 256.46118164]
[94.93653870 265.80166626]
[93.62008667 280.74377441]
[100.11637878 295.16973877]
[91.29193878 307.16885376]
[89.97548676 322.11099243]
[88.65902710 337.05310059]
[87.34257507 351.99520874]
[97.21800232 364.04153442]
[95.67007446 379.17620850]
[84.12490082 388.51669312]
[82.80844879 403.45880127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 142]
[6 141]
[9 138]
[10 137]
[11 136]
[12 135]
[14 133]
[15 132]
[18 129]
[19 128]
[20 127]
[21 125]
[22 124]
[23 123]
[24 122]
[28 79]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[36 71]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
