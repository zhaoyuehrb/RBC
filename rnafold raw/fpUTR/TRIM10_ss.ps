%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGUGUGACCCAGCCCUUCCCCCGUGGCCAAGCAGAGAGAGUGGCCUUGAGGAAGCCAUAGCAGCAGGACCAGC\
) } def
/len { sequence length } bind def

/coor [
[99.11088562 368.82183838]
[97.28344727 353.57205200]
[103.34047699 339.45794678]
[115.65267181 330.27615356]
[106.41933441 318.58877563]
[112.41382599 303.94717407]
[110.58241272 289.05938721]
[108.75099182 274.17160034]
[94.56085968 271.76065063]
[81.62767792 265.40707397]
[71.02330017 255.62722778]
[63.62944031 243.22190857]
[60.06439972 229.21063232]
[60.63137054 214.74798584]
[65.29266357 201.02841187]
[73.67207336 189.18756104]
[85.08521271 180.20835876]
[98.59542847 174.83932495]
[97.37278748 159.88922119]
[96.15014648 144.93913269]
[94.92750549 129.98904419]
[93.70487213 115.03896332]
[85.19618988 106.82981110]
[84.47306061 95.02874756]
[91.91579437 85.84214783]
[91.30396271 70.85463715]
[83.01021576 57.38153839]
[90.22194672 44.34926605]
[89.61012268 29.36174965]
[88.99829102 14.37423229]
[88.38645935 -0.61328483]
[87.77463531 -15.60080147]
[76.43504333 -26.28028870]
[76.02806091 -41.48847580]
[86.27920532 -52.23323059]
[75.50366974 -64.11882782]
[78.21988678 -79.93026733]
[92.34420013 -87.53837585]
[107.04165649 -81.10684967]
[111.03761292 -65.56941223]
[101.26672363 -52.84505844]
[112.35955048 -42.97162247]
[113.19353485 -27.78086472]
[102.76214600 -16.21263123]
[103.37397766 -1.22511363]
[103.98580933 13.76240349]
[104.59763336 28.74991989]
[105.20946503 43.73743820]
[113.45945740 56.13852310]
[106.29148102 70.24280548]
[106.90331268 85.23032379]
[116.27282715 99.00286102]
[108.65496063 113.81632233]
[109.87759399 128.76641846]
[111.10023499 143.71650696]
[112.32287598 158.66659546]
[113.54551697 173.61668396]
[128.83047485 177.14175415]
[142.28446960 185.16935730]
[152.62019348 196.91764832]
[158.85290527 211.24948120]
[160.39424133 226.78237915]
[157.10778809 242.02198792]
[149.32096863 255.50576782]
[137.79257202 265.94338989]
[123.63877106 272.34020996]
[125.47018433 287.22796631]
[127.30160522 302.11575317]
[136.66593933 314.86801147]
[130.54045105 328.44473267]
[144.71089172 334.36877441]
[154.00805664 346.59408569]
[155.93106079 361.83212280]
[149.96263123 375.98391724]
[137.70823669 385.24270630]
[122.46424866 387.11795044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 70]
[6 68]
[7 67]
[8 66]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[25 51]
[26 50]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[35 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
