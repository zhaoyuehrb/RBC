%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAUGCCCCGUUUGCUGCCUGAACCUCUCCACAAAGACUCCCAGAUCCUGUAGAAUUGAAUUUAAUCAUCUCCUGACAAAAGA\
) } def
/len { sequence length } bind def

/coor [
[123.78726959 155.74580383]
[115.70890045 158.53767395]
[107.31812286 160.16539001]
[98.78180695 160.59657288]
[90.26972198 159.82266235]
[81.95114136 157.85903931]
[73.99150848 154.74475098]
[66.54911041 150.54173279]
[59.77195740 145.33358765]
[53.79483414 139.22387695]
[48.73660660 132.33410645]
[44.69787216 124.80129242]
[41.75894547 116.77525330]
[39.97827530 108.41559601]
[39.39127731 99.88858032]
[40.00962448 91.36377716]
[41.82101822 83.01072693]
[44.78943253 74.99554443]
[48.85583878 67.47763824]
[53.93936157 60.60651016]
[43.83392715 49.52137756]
[33.72849274 38.43624115]
[18.76564026 41.60804367]
[4.31954432 36.89560318]
[-5.76117563 25.65970421]
[-8.84374237 10.98476791]
[-4.19828701 -3.16745257]
[-14.30372143 -14.25258636]
[-24.40915680 -25.33772087]
[-40.20617294 -25.81715965]
[-50.97634125 -37.38344574]
[-50.32991028 -53.17451096]
[-38.65040207 -63.82179260]
[-22.86705399 -63.00844574]
[-12.34385204 -51.21701813]
[-13.32402229 -35.44315338]
[-3.21858788 -24.35802078]
[6.88684654 -13.27288723]
[21.40732384 -16.59272385]
[35.73523712 -12.16927433]
[45.99307632 -1.09483862]
[49.35249710 13.72444248]
[44.81362534 28.33080864]
[54.91905975 39.41594315]
[65.02449799 50.50107574]
[88.45387268 40.50112152]
[113.92294312 41.01202393]
[136.93243408 51.94352722]
[153.41758728 71.36450958]
[160.46617126 95.84413147]
[175.44313049 96.67530823]
[190.42008972 97.50647736]
[207.71922302 87.47962189]
[223.64836121 98.18209076]
[238.64579773 97.90490723]
[249.57569885 86.80648804]
[264.78918457 86.73902130]
[275.30245972 97.22741699]
[290.29992676 96.95023346]
[305.29736328 96.67304993]
[316.08239746 85.12063599]
[331.88003540 84.66154480]
[343.31774902 95.56813812]
[343.60980225 111.36972809]
[332.58288574 122.69151306]
[316.77911377 122.81648254]
[305.57452393 111.67048645]
[290.57708740 111.94766998]
[275.57965088 112.22485352]
[265.46112061 123.09455872]
[250.25552368 123.58930969]
[238.92297363 112.90234375]
[223.92553711 113.17952728]
[217.30844116 121.34785461]
[207.03567505 124.46358490]
[196.57063293 121.21558380]
[189.58891296 112.48343658]
[174.61195374 111.65225983]
[159.63500977 110.82109070]
[157.51979065 119.10242462]
[154.26068115 127.00386047]
[149.92245483 134.36827087]
[144.59141541 141.04917908]
[138.37356567 146.91374207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 45]
[21 44]
[22 43]
[27 38]
[28 37]
[29 36]
[50 79]
[51 78]
[52 77]
[54 73]
[55 72]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
