%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUUCCUUUUAAUUUAGUUUUUUUUCCCCUUCUCCCCCAACCCCCAACCUUCCCCCUUACCUCCCCCACCCCCUUUAUCACCACCCCCCUUUUAAAUAAGAGGGUGAAGGGGAACCAGAGCGCACAAGGGAACUGACUCAGGAGGCAGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[-37.39439774 305.64208984]
[-46.16222763 317.81274414]
[-54.93005753 329.98342896]
[-45.15613937 341.46096802]
[-38.41362000 354.94436646]
[-35.09449768 369.64968872]
[-35.39174271 384.72201538]
[-39.28807449 399.28506470]
[-46.55696487 412.49212646]
[-56.77580643 423.57537842]
[-69.35049438 431.89047241]
[-83.54995728 436.95394897]
[-98.54864502 438.47143555]
[-113.47455597 436.35473633]
[-127.45992279 430.72686768]
[-139.69165039 421.91503906]
[-149.45861816 410.43157959]
[-156.19296265 396.94409180]
[-159.50315857 382.23675537]
[-159.19677734 367.16461182]
[-155.29162598 352.60394287]
[-148.01472473 339.40127563]
[-137.78916931 328.32421875]
[-125.20943451 320.01675415]
[-111.00691223 314.96188354]
[-96.00730896 313.45349121]
[-81.08267975 315.57925415]
[-67.10072327 321.21557617]
[-58.33289337 309.04492188]
[-49.56506348 296.87426758]
[-40.92022324 284.61593628]
[-32.39925385 272.27114868]
[-23.87828255 259.92639160]
[-15.35731125 247.58164978]
[-6.83634043 235.23689270]
[1.68463099 222.89213562]
[-1.24444354 208.33341980]
[7.22117710 195.69268799]
[22.51155472 192.71913147]
[31.03252602 180.37435913]
[28.28469467 170.45982361]
[31.54533958 160.46989441]
[39.95834351 153.81181335]
[50.86921310 152.89665222]
[59.88034439 140.90501404]
[50.66239166 129.13085938]
[44.80496216 115.37251282]
[42.70702744 100.56710052]
[44.51148224 85.72306824]
[50.09542084 71.85147858]
[59.07850647 59.89715958]
[70.84886932 50.67436600]
[84.60480499 44.81128311]
[99.40934753 42.70726395]
[114.25412750 44.50561905]
[128.12800598 50.08385849]
[137.13914490 38.09221649]
[146.15028381 26.10057449]
[155.16140747 14.10893345]
[164.17254639 2.11729193]
[165.63648987 -17.95009613]
[183.65611267 -24.87026215]
[192.05235291 -37.30018997]
[200.32301331 -49.81403351]
[208.59367371 -62.32787704]
[200.88092041 -74.20709229]
[198.29679871 -88.08863831]
[201.20039368 -101.86256409]
[209.11918640 -113.44809723]
[220.82568359 -121.10802460]
[234.52745056 -123.70911407]
[248.14164734 -120.88970947]
[256.66262817 -133.23446655]
[265.18359375 -145.57922363]
[273.70455933 -157.92398071]
[282.22552490 -170.26873779]
[290.74652100 -182.61349487]
[299.26748657 -194.95825195]
[307.78845215 -207.30300903]
[293.29940796 -203.42135620]
[278.96881104 -207.85241699]
[269.19946289 -219.23484802]
[266.99276733 -234.07164001]
[273.02667236 -247.80451965]
[285.44741821 -256.21435547]
[300.43896484 -256.71737671]
[313.39553833 -249.15908813]
[320.33645630 -235.86158752]
[319.12979126 -220.91160583]
[329.73638916 -231.51820374]
[340.34301758 -242.12481689]
[350.94961548 -252.73141479]
[361.55621338 -263.33801270]
[372.16281128 -273.94461060]
[382.76940918 -284.55120850]
[386.48886108 -300.52301025]
[402.25704956 -305.02819824]
[413.85299683 -293.43225098]
[409.34777832 -277.66406250]
[393.37600708 -273.94461060]
[382.76940918 -263.33801270]
[372.16281128 -252.73141479]
[361.55621338 -242.12481689]
[350.94961548 -231.51820374]
[340.34301758 -220.91160583]
[329.73638916 -210.30500793]
[320.13320923 -198.78204346]
[311.61224365 -186.43728638]
[303.09127808 -174.09252930]
[294.57031250 -161.74777222]
[286.04931641 -149.40301514]
[277.52835083 -137.05825806]
[269.00738525 -124.71349335]
[260.48641968 -112.36873627]
[268.65417480 -98.66489410]
[270.04678345 -82.71421051]
[264.33615112 -67.69371033]
[252.61402893 -56.61725616]
[237.18370056 -51.73082352]
[221.10751343 -54.05722046]
[212.83685303 -41.54337692]
[204.56619263 -29.02953529]
[203.49566650 -21.67306900]
[196.00086975 -16.34929085]
[198.74870300 -6.43474197]
[195.48806763 3.55517435]
[187.07505798 10.21326542]
[176.16418457 11.12842560]
[167.15306091 23.12006760]
[158.14192200 35.11170959]
[149.13078308 47.10335159]
[140.11965942 59.09499359]
[149.33761597 70.86914825]
[155.19503784 84.62748718]
[157.29296875 99.43289948]
[155.48851013 114.27693176]
[149.90457153 128.14852905]
[140.92149353 140.10284424]
[129.15112305 149.32563782]
[115.39519501 155.18872070]
[100.59065247 157.29273987]
[85.74587250 155.49438477]
[71.87198639 149.91613770]
[62.86085510 161.90779114]
[61.39690781 181.97517395]
[43.37728500 188.89533997]
[34.85631180 201.24009705]
[37.49801636 216.59129333]
[28.68068504 228.98924255]
[14.02938938 231.41310120]
[5.50841761 243.75785828]
[-3.01255345 256.10263062]
[-11.53352451 268.44738770]
[-20.05449677 280.79214478]
[-28.57546616 293.13690186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[31 155]
[32 154]
[33 153]
[34 152]
[35 151]
[36 150]
[39 147]
[40 146]
[44 144]
[45 143]
[56 132]
[57 131]
[58 130]
[59 129]
[60 128]
[62 124]
[63 122]
[64 121]
[65 120]
[72 114]
[73 113]
[74 112]
[75 111]
[76 110]
[77 109]
[78 108]
[79 107]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
