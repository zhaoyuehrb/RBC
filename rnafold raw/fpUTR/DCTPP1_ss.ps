%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUCUGGAGGCGGGGCUUCGAGCGUGGCUCGUGGGUUUUCCGUGAAGUCGCGGUGCAGCGGUGGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[-43.32289124 180.32501221]
[-55.86177444 188.55764771]
[-68.40065765 196.79029846]
[-80.93953705 205.02293396]
[-93.47841644 213.25558472]
[-106.01730347 221.48823547]
[-118.55618286 229.72087097]
[-131.09506226 237.95352173]
[-143.63394165 246.18615723]
[-150.51820374 261.07034302]
[-166.87260437 262.28082275]
[-175.87316895 248.57237244]
[-168.26086426 234.04705811]
[-151.86659241 233.64727783]
[-139.32771301 225.41464233]
[-126.78882599 217.18199158]
[-114.24994659 208.94934082]
[-101.71106720 200.71670532]
[-89.17218018 192.48405457]
[-76.63330078 184.25141907]
[-64.09441376 176.01876831]
[-51.55553436 167.78611755]
[-51.13333511 158.38067627]
[-46.19731140 150.19869995]
[-37.83138275 145.29681396]
[-27.99952507 144.98141479]
[-19.08521461 149.46328735]
[-5.59075212 142.91352844]
[2.48059297 130.39543152]
[18.27415657 131.33027649]
[31.76861954 124.78051758]
[45.26308060 118.23074341]
[58.75754547 111.68097687]
[72.25200653 105.13121033]
[85.74646759 98.58144379]
[93.74542999 87.11373901]
[107.70375824 87.92409515]
[116.74031830 74.93751526]
[131.56866455 76.34085083]
[134.40200806 61.19891357]
[145.47863770 50.75087357]
[160.40695190 48.85103226]
[173.43550110 56.02007294]
[186.92996216 49.47030258]
[200.42442322 42.92053604]
[213.91888428 36.37076569]
[227.41334534 29.82099724]
[236.15661621 15.94701767]
[252.53076172 16.85220909]
[259.69146729 31.60538864]
[250.27241516 45.02975082]
[233.96311951 43.31546021]
[220.46865845 49.86523056]
[206.97419739 56.41499710]
[193.47973633 62.96476746]
[179.98526001 69.51453400]
[177.55723572 84.18568420]
[166.82890320 94.73873901]
[151.76760864 96.97718811]
[138.11843872 89.83531952]
[130.04708862 102.35340881]
[114.25353241 101.41855621]
[106.25457001 112.88626099]
[92.29624176 112.07590485]
[78.80177307 118.62567139]
[65.30731201 125.17543793]
[51.81285095 131.72520447]
[38.31838608 138.27497864]
[24.82392502 144.82475281]
[15.78736496 157.81132507]
[0.95901650 156.40798950]
[-12.53544617 162.95776367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[27 72]
[28 71]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[37 62]
[39 60]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
