%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUCAUUUGCUCUCUGACUCUCAGAGAGGGAGGCACGCUUUCCUGGAGCUCCUGGUGACAGAACAGGUGUUUGCUGUCUGGACCUGGCUGCUGAUCCUGAGCCUGCUGGGAGAUCUUAACGAUCCCCAGGAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[-75.30883026 234.23979187]
[-87.30308533 243.24743652]
[-99.19477844 252.39006042]
[-110.98239899 261.66650391]
[-122.77001953 270.94290161]
[-134.55764771 280.21932983]
[-137.42077637 286.33001709]
[-142.24221802 289.53515625]
[-147.09402466 289.63412476]
[-159.28877258 298.36840820]
[-166.00277710 312.69436646]
[-180.85516357 313.81500244]
[-193.04991150 322.54928589]
[-205.24467468 331.28356934]
[-217.43943787 340.01788330]
[-229.63418579 348.75216675]
[-241.82894897 357.48645020]
[-254.02369690 366.22076416]
[-266.21844482 374.95504761]
[-275.57470703 389.09353638]
[-291.75073242 384.01684570]
[-291.35040283 367.06762695]
[-274.95275879 362.76028442]
[-262.75799561 354.02600098]
[-250.56324768 345.29171753]
[-238.36848450 336.55740356]
[-226.17372131 327.82312012]
[-213.97897339 319.08883667]
[-201.78421021 310.35452271]
[-189.58946228 301.62023926]
[-183.74771118 287.91900635]
[-168.02307129 286.17367554]
[-155.82832336 277.43936157]
[-143.83406067 268.43170166]
[-132.04644775 259.15530396]
[-120.25882721 249.87887573]
[-108.47120667 240.60244751]
[-105.13204956 233.93783569]
[-96.31074524 231.25318909]
[-84.31649017 222.24552917]
[-87.52899933 212.09107971]
[-87.75215149 201.42173767]
[-84.95596313 191.10095215]
[-79.35527039 181.96733093]
[-71.39328003 174.76647949]
[-61.70653915 170.09019470]
[-51.07401276 168.32777405]
[-40.35446930 169.63363647]
[-30.41711617 173.91394043]
[-22.07112122 180.83312988]
[-9.13761234 173.23547363]
[3.79589725 165.63781738]
[16.72940636 158.04016113]
[29.66291618 150.44250488]
[42.59642410 142.84486389]
[55.52993393 135.24720764]
[68.46344757 127.64955139]
[72.67295074 121.49755859]
[81.77621460 120.03013611]
[76.26320648 94.22871399]
[94.37641907 78.96172333]
[95.73065948 64.02297974]
[97.08489227 49.08423615]
[98.43913269 34.14549255]
[96.08377075 25.23061943]
[99.99651337 18.88574409]
[101.68801880 3.98142195]
[103.37951660 -10.92290115]
[92.47985840 -22.13591003]
[91.38938904 -37.73542404]
[100.62298584 -50.35583496]
[115.82083130 -54.03816223]
[129.80696106 -47.04373169]
[135.97755432 -32.67509460]
[131.41905212 -17.71668243]
[118.28383636 -9.23140240]
[116.59233856 5.67292023]
[114.90084076 20.57724380]
[113.37787628 35.49972916]
[112.02363586 50.43847275]
[110.66940308 65.37721252]
[109.31516266 80.31595612]
[112.55425262 82.20604706]
[115.42102051 84.62384796]
[117.83045197 87.49765015]
[132.32662964 83.64266205]
[146.82279968 79.78767395]
[161.31896973 75.93268585]
[175.81515503 72.07769012]
[190.31132507 68.22270203]
[202.99842834 54.93054581]
[219.74337769 60.06005859]
[234.14872742 55.87844849]
[248.55407715 51.69683838]
[254.70182800 37.31841278]
[268.67684937 30.30176163]
[283.88052368 33.95993423]
[293.13415527 46.56565094]
[292.06848145 62.16688156]
[281.18664551 73.39719391]
[265.62677002 74.95398712]
[252.73568726 66.10218811]
[238.33033752 70.28379822]
[223.92498779 74.46540833]
[217.78280640 84.94773102]
[205.74963379 88.51648712]
[194.16630554 82.71887970]
[179.67013550 86.57386780]
[165.17396545 90.42885590]
[150.67779541 94.28384399]
[136.18161011 98.13883209]
[121.68544769 101.99382782]
[120.64704132 113.05538177]
[113.80171967 123.29861450]
[125.15812683 133.09820557]
[136.51452637 142.89781189]
[147.87092590 152.69740295]
[163.91184998 152.95875549]
[173.59437561 165.75048828]
[169.49089050 181.25987244]
[154.74923706 187.58944702]
[140.67796326 179.88368225]
[138.07133484 164.05380249]
[126.71492767 154.25421143]
[115.35852814 144.45460510]
[104.00212097 134.65501404]
[89.07963562 133.13204956]
[76.06109619 140.58306885]
[63.12758636 148.18070984]
[50.19408035 155.77836609]
[37.26057053 163.37602234]
[24.32705879 170.97367859]
[11.39354992 178.57133484]
[-1.53995919 186.16897583]
[-14.47346878 193.76663208]
[-13.22662067 213.51176453]
[-22.02340126 231.14651489]
[-38.41801071 241.94187927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 37]
[4 36]
[5 35]
[6 34]
[9 33]
[10 32]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[50 135]
[51 134]
[52 133]
[53 132]
[54 131]
[55 130]
[56 129]
[57 128]
[59 127]
[61 82]
[62 81]
[63 80]
[64 79]
[66 78]
[67 77]
[68 76]
[85 112]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[92 104]
[93 103]
[94 102]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
