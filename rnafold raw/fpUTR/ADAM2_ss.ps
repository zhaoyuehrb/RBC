%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUACCUCUUCCAGGCUGCGUGGCCGGGGCGUCAUCUCGCGCUUCCAACUGCCCUGUAACCACCAACUGCCAUUAUUCCGGCUGGGACCCAGGACUUCAAGCC\
) } def
/len { sequence length } bind def

/coor [
[88.72609711 304.38763428]
[83.91013336 290.01467896]
[84.30355835 274.86141968]
[89.85885620 260.75772095]
[99.90521240 249.40666199]
[113.22946167 242.17892456]
[110.99382782 227.34646606]
[108.75819397 212.51400757]
[95.56787109 198.50920105]
[102.77062988 179.79925537]
[99.65195465 165.12702942]
[96.53327942 150.45481873]
[93.41460419 135.78260803]
[90.29592896 121.11038971]
[80.05155182 95.37686157]
[68.90438080 85.33990479]
[53.47158813 81.85572052]
[49.19064331 67.58957672]
[38.04347229 57.55261993]
[26.89629936 47.51565933]
[15.74912739 37.47869873]
[0.31633630 33.99451828]
[-3.96460557 19.72837448]
[-15.11177826 9.69141674]
[-26.25895119 -0.34554279]
[-48.42041397 -2.98865914]
[-55.14340591 -23.49341583]
[-67.40919495 -32.12767410]
[-79.67498779 -40.76192856]
[-91.94078064 -49.39618301]
[-104.20657349 -58.03044128]
[-116.47235870 -66.66469574]
[-128.73815918 -75.29895020]
[-144.26426697 -72.34678650]
[-157.28320312 -81.30686188]
[-160.07104492 -96.86332703]
[-150.97383118 -109.78679657]
[-135.38876343 -112.41001892]
[-122.56219482 -103.17667389]
[-120.10389709 -87.56474304]
[-107.83810425 -78.93048859]
[-95.57231140 -70.29623413]
[-83.30652618 -61.66197586]
[-71.04073334 -53.02771759]
[-58.77494431 -44.39346313]
[-46.50915146 -35.75920868]
[-38.87609100 -38.85910034]
[-30.54677391 -38.58779144]
[-22.96017456 -34.91479111]
[-17.45831108 -28.40392494]
[-15.04901791 -20.12806892]
[-16.22199059 -11.49271488]
[-5.07481861 -1.45575607]
[6.07235336 8.58120346]
[20.70782471 11.34747505]
[25.78608704 26.33152771]
[36.93325806 36.36848831]
[48.08043289 46.40544510]
[59.22760391 56.44240570]
[73.86307526 59.20867920]
[78.94133759 74.19273376]
[90.08850861 84.22969055]
[83.75843048 70.63079071]
[87.07714844 56.00252533]
[98.65583038 46.46658707]
[113.64898682 46.01361465]
[125.78222656 54.83316422]
[129.97798157 69.23439789]
[124.48040771 83.19063568]
[111.58889771 90.86167908]
[126.45314026 88.84818268]
[141.31738281 86.83468628]
[148.55158997 73.10711670]
[162.48786926 66.28365326]
[177.76745605 68.98806000]
[188.51502991 80.18042755]
[190.59794617 95.55706787]
[183.21525574 109.20535278]
[169.20578003 115.87722778]
[153.95642090 113.00723267]
[143.33088684 101.69892883]
[128.46664429 103.71242523]
[113.60239410 105.72592926]
[104.96813965 117.99171448]
[108.08681488 132.66392517]
[111.20549011 147.33615112]
[114.32416534 162.00836182]
[117.44284058 176.68057251]
[127.06301117 182.18489075]
[131.88233948 191.91909790]
[130.48507690 202.46720886]
[123.59066010 210.27836609]
[125.82629395 225.11083984]
[128.06192017 239.94329834]
[142.92463684 242.92251587]
[155.87043762 250.80807495]
[165.33607483 262.64773560]
[170.17851257 277.01181030]
[169.81301880 292.16577148]
[164.28372192 306.27966309]
[154.25830078 317.64923096]
[140.94738770 324.90148926]
[125.95833588 327.16073608]
[111.10115051 324.15411377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 94]
[7 93]
[8 92]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[15 62]
[16 61]
[18 59]
[19 58]
[20 57]
[21 56]
[23 54]
[24 53]
[25 52]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
