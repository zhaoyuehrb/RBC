%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCCCCGCUCAGACGCGCGCAAACCCGGAAGCAGAUCGCGUGGAGUGAAGGUCCCUCAGCGGCGCGAUUGACAUCUAAAGACUCUUGGUACAUGAGGAAGAAACCCGGAAAAGGAAAGCAGAGGAGUCAGGG\
) } def
/len { sequence length } bind def

/coor [
[90.61280823 474.09204102]
[75.59932709 479.74667358]
[61.89191437 471.41082764]
[60.00572586 455.47906494]
[71.38768005 444.17282104]
[72.78192902 429.23776245]
[74.17617798 414.30270386]
[65.98374176 398.82760620]
[76.63965607 383.86193848]
[77.68600464 368.89849854]
[78.73235321 353.93502808]
[79.77869415 338.97155762]
[67.35420990 330.75588989]
[60.66571045 317.33499146]
[61.59912491 302.26864624]
[70.00371552 289.60925293]
[83.70574951 282.81210327]
[84.75209808 267.84863281]
[73.24249268 258.43231201]
[69.43959045 243.87203979]
[75.00458527 229.69866943]
[87.99840546 221.42420959]
[74.41245270 212.75402832]
[66.98657990 198.34460449]
[67.81900024 182.06195068]
[76.77786255 168.32817078]
[91.51156616 160.92050171]
[92.20944214 145.93675232]
[92.90732574 130.95298767]
[93.60520172 115.96923828]
[84.41237640 111.13675690]
[78.91473389 101.07258606]
[79.96663666 88.56379700]
[64.55245972 86.31863403]
[55.49694443 74.09356689]
[57.73236084 59.41233444]
[48.63559341 47.48552322]
[39.53882599 35.55871201]
[30.44206047 23.63189888]
[21.34529495 11.70508671]
[12.24852753 -0.22172533]
[3.15176153 -12.14853764]
[-5.94500446 -24.07534981]
[-20.46622276 -30.35585976]
[-22.03260231 -45.16787338]
[-34.74421310 -47.68262100]
[-42.06896591 -57.88060379]
[-40.49551773 -69.93218994]
[-49.31229782 -82.06744385]
[-58.12907410 -94.20269775]
[-73.74014282 -95.11296082]
[-85.07826996 -105.88240051]
[-86.78993988 -121.42602539]
[-78.06695557 -134.40460205]
[-63.02804184 -138.69004822]
[-48.77411652 -132.25891113]
[-42.03544235 -118.14777374]
[-45.99382019 -103.01947784]
[-37.17704010 -90.88422394]
[-28.36026192 -78.74897003]
[-11.98836708 -72.53961182]
[-10.10579014 -54.26463699]
[3.76476622 -48.83721542]
[5.98180723 -33.17211533]
[15.07857323 -21.24530411]
[24.17534065 -9.31849194]
[33.27210617 2.60832024]
[42.36887360 14.53513241]
[51.46563721 26.46194458]
[60.56240463 38.38875580]
[69.65917206 50.31556702]
[84.40892792 52.04194641]
[93.80423737 64.00784302]
[91.89344788 79.46703339]
[89.62830353 64.63904572]
[84.86888885 50.41414261]
[89.03330994 36.00381470]
[100.64701843 26.51055717]
[115.59774780 25.29579926]
[128.59165955 32.78966904]
[135.02780151 46.33869553]
[132.62722778 61.14535522]
[122.23782349 71.96798706]
[113.84585571 84.40080261]
[127.17110443 77.51330566]
[140.49635315 70.62580872]
[149.20303345 57.41580200]
[164.06202698 58.44529724]
[177.38726807 51.55780029]
[188.68170166 38.91373444]
[203.95823669 46.26654053]
[201.12174988 62.98152161]
[184.27476501 64.88305664]
[170.94952393 71.77055359]
[163.19595337 84.48792267]
[147.38385010 83.95106506]
[134.05860901 90.83856201]
[120.73334503 97.72605896]
[135.28274536 94.07705688]
[149.36853027 99.23368073]
[158.12303162 111.41393280]
[158.52096558 126.40865326]
[150.42478943 139.03608704]
[136.63233948 144.93252563]
[121.90988159 142.06034851]
[111.34511566 131.41207886]
[108.58895874 116.66711426]
[107.89108276 131.65087891]
[107.19319916 146.63462830]
[106.49532318 161.61839294]
[118.68582153 168.57879639]
[126.63369751 180.06916809]
[128.82525635 193.80033875]
[124.88671875 207.06665039]
[115.64653778 217.27909851]
[102.96186829 222.47056580]
[114.67765808 232.47288513]
[118.21594238 247.28280640]
[112.42365265 261.17214966]
[99.71556091 268.89498901]
[98.66921234 283.85845947]
[111.29191589 292.49642944]
[117.85286713 306.20227051]
[116.68036652 321.25192261]
[108.18914032 333.61132812]
[94.74215698 340.01791382]
[93.69580841 354.98138428]
[92.64946747 369.94482422]
[91.60311890 384.90829468]
[99.48717499 395.19180298]
[98.25204468 407.68682861]
[89.11123657 415.69696045]
[87.71698761 430.63201904]
[86.32274628 445.56707764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 134]
[6 133]
[7 132]
[9 129]
[10 128]
[11 127]
[12 126]
[17 121]
[18 120]
[22 116]
[27 110]
[28 109]
[29 108]
[30 107]
[33 74]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[45 62]
[48 60]
[49 59]
[50 58]
[84 98]
[85 97]
[86 96]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
