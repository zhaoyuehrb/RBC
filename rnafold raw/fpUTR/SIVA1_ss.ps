%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGACGUCACGGCGUCGUUGGUAAGGGGCUGGCGGCCGGGGAGCUGCGUAGCUCCCGGCCCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[26.03755951 167.46911621]
[8.56390285 176.75511169]
[-11.15344715 176.54464722]
[-28.30382729 166.95547485]
[-40.43908310 175.77224731]
[-52.57433701 184.58903503]
[-64.70959473 193.40580750]
[-76.84484863 202.22259521]
[-83.01704407 217.41587830]
[-99.29585266 219.39892578]
[-108.93502808 206.13172913]
[-102.01861572 191.26245117]
[-85.66162872 190.08732605]
[-73.52636719 181.27055359]
[-61.39111710 172.45378113]
[-49.25585938 163.63699341]
[-37.12060547 154.82022095]
[-40.41406631 144.40135193]
[-40.74589157 133.46182251]
[-38.08143234 122.82844543]
[-32.61288071 113.30752563]
[-24.74540329 105.62367249]
[-15.06717300 100.36469269]
[-4.30537367 97.93660736]
[6.72841883 98.53231812]
[17.19944763 102.11634064]
[26.31292152 108.42671967]
[33.37435150 116.99421692]
[47.41787338 111.72359467]
[61.46139526 106.45297241]
[75.50492096 101.18235016]
[89.54843903 95.91172791]
[103.47016907 90.32731628]
[113.11885834 77.78884125]
[127.86289215 79.90136719]
[141.65580750 74.00599670]
[155.44871521 68.11061859]
[169.24163818 62.21524429]
[183.03456116 56.31987000]
[196.82746887 50.42449188]
[210.62039185 44.52911758]
[217.55157471 38.07399368]
[225.16687012 38.69410706]
[239.21038818 33.42348480]
[253.25390625 28.15286064]
[267.29742432 22.88223839]
[277.28918457 9.87850475]
[293.50891113 12.29768848]
[299.27114868 27.65114212]
[288.64822388 40.14455032]
[272.56805420 36.92576218]
[258.52453613 42.19638443]
[244.48101807 47.46700668]
[230.43748474 52.73762894]
[216.51576233 58.32203293]
[202.72285461 64.21740723]
[188.92993164 70.11278534]
[175.13700867 76.00816345]
[161.34410095 81.90353394]
[147.55117798 87.79891205]
[133.75827026 93.69429016]
[125.09613800 105.81108856]
[109.36553955 104.12023926]
[103.55965424 110.11942291]
[94.81906891 109.95524597]
[80.77554321 115.22586823]
[66.73201752 120.49649048]
[52.68849564 125.76711273]
[38.64497375 131.03773499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 63]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
