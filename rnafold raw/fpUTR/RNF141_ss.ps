%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUGCGACCGGGUCCCGGCCUGAGUCGCGGCCACCCGCAGGUCUGAGCUGUGGGCUGAGGCAGCGCAGCCGCUGCCGCAGGGUGCGCGAUGCCUUGAACCUGGGAAACUAUGUGAAGCAACACUCUGGAUUUUGAAAGACAUCUUUUCAUC\
) } def
/len { sequence length } bind def

/coor [
[364.27987671 409.48855591]
[356.69171143 396.54946899]
[349.10354614 383.61041260]
[341.38381958 370.74938965]
[333.53329468 357.96780396]
[325.55282593 345.26693726]
[317.44320679 332.64813232]
[311.42993164 330.81936646]
[306.74914551 325.52844238]
[305.35693359 317.80554199]
[294.64266968 307.30767822]
[283.92843628 296.80981445]
[273.21420288 286.31195068]
[262.49996948 275.81408691]
[251.78575134 265.31622314]
[240.96499634 254.92817688]
[226.13157654 255.63916016]
[214.90451050 245.37234497]
[214.25933838 229.80886841]
[203.33320618 219.53175354]
[192.40705872 209.25462341]
[189.54649353 209.23947144]
[186.52067566 208.05558777]
[183.78791809 205.63452148]
[181.82246399 202.07963562]
[181.05279541 197.66635132]
[171.00068665 186.53283691]
[160.94857788 175.39932251]
[150.89646912 164.26580811]
[140.84436035 153.13229370]
[130.79225159 141.99879456]
[120.62710571 130.96838379]
[110.34997559 120.04223633]
[100.07285309 109.11608887]
[90.31490326 117.10527802]
[73.98235321 115.32837677]
[59.67915344 110.80968475]
[45.37595749 106.29099274]
[31.07276154 101.77230072]
[16.76956558 97.25360107]
[2.46636963 92.73490906]
[-11.83682632 88.21621704]
[-24.93217850 96.76290131]
[-40.45123291 94.84119415]
[-51.06636810 83.35846710]
[-51.76543808 67.73651886]
[-42.21836853 55.35155106]
[-26.93298912 52.05136871]
[-13.12659168 59.39421463]
[-7.31813335 73.91302490]
[6.98506260 78.43171692]
[21.28825760 82.95040894]
[35.59145355 87.46910095]
[49.89464951 91.98779297]
[64.19784546 96.50648499]
[78.50104523 101.02517700]
[89.10764313 90.41857910]
[84.58895111 76.11537933]
[80.07025909 61.81218719]
[68.53513336 50.98391342]
[72.07896423 36.51703644]
[67.56027222 22.21384239]
[63.04158020 7.91064548]
[58.52288818 -6.39255047]
[54.00419617 -20.69574738]
[49.48550415 -34.99894333]
[44.96680832 -49.30213928]
[32.51107407 -59.96922302]
[35.78674698 -76.03788757]
[51.42409515 -80.97807312]
[63.33675385 -69.70773315]
[59.27000427 -53.82083130]
[63.78870010 -39.51763535]
[68.30738831 -25.21443939]
[72.82608795 -10.91124344]
[77.34477997 3.39195275]
[81.86347198 17.69514847]
[86.38216400 31.99834442]
[97.59407806 41.80355835]
[94.37345123 57.29349518]
[98.89215088 71.59668732]
[103.41084290 85.89988708]
[110.99900055 98.83896637]
[121.27612305 109.76511383]
[131.55325317 120.69126129]
[139.76460266 124.83154297]
[141.92576599 131.94668579]
[151.97787476 143.08018494]
[162.02998352 154.21369934]
[172.08209229 165.34721375]
[182.13420105 176.48072815]
[192.18630981 187.61424255]
[202.68417358 198.32847595]
[213.61032104 208.60560608]
[224.53646851 218.88272095]
[240.11026001 218.57479858]
[251.04452515 229.15290833]
[251.24211121 244.00202942]
[259.69131470 247.63233948]
[262.28359985 254.60197449]
[272.99783325 265.09985352]
[283.71206665 275.59771729]
[294.42630005 286.09558105]
[305.14056396 296.59344482]
[315.85479736 307.09130859]
[313.25158691 292.31890869]
[316.67980957 277.71591187]
[325.58468628 265.64517212]
[338.52539062 258.05978394]
[353.40805054 256.18713379]
[367.82452393 260.33020020]
[379.44216919 269.81863403]
[386.38119507 283.11712646]
[387.51879883 298.07391357]
[382.67089844 312.26892090]
[372.62194824 323.40530396]
[358.99792480 329.68109131]
[344.00326538 330.08087158]
[330.06201172 324.53851318]
[338.17160034 337.15731812]
[345.48907471 342.72714233]
[346.31488037 350.11727905]
[354.16540527 362.89886475]
[361.36773682 368.61682129]
[362.04263306 376.02224731]
[369.63079834 388.96133423]
[377.21896362 401.90039062]
[387.89825439 400.72680664]
[398.31491089 403.19549561]
[407.26724243 408.99514771]
[413.73141479 417.43179321]
[416.97845459 427.51165771]
[416.65646362 438.05831909]
[412.82855225 447.84979248]
[405.96246338 455.76037598]
[412.47070312 469.27490234]
[418.97897339 482.78942871]
[425.48721313 496.30395508]
[431.99548340 509.81851196]
[438.50372314 523.33300781]
[453.11065674 529.96759033]
[456.89096069 545.55889893]
[446.94470215 558.14666748]
[430.90182495 558.07458496]
[421.06903076 545.39801025]
[424.98919678 529.84130859]
[418.48095703 516.32678223]
[411.97268677 502.81222534]
[405.46444702 489.29769897]
[398.95617676 475.78317261]
[392.44793701 462.26861572]
[373.07015991 460.15475464]
[358.73226929 446.73934937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 123]
[5 122]
[6 120]
[7 119]
[10 105]
[11 104]
[12 103]
[13 102]
[14 101]
[15 100]
[16 98]
[19 95]
[20 94]
[21 93]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 85]
[33 84]
[34 83]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[57 82]
[58 81]
[59 80]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
[135 151]
[136 150]
[137 149]
[138 148]
[139 147]
[140 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
