%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGAGUGAAGGCCCAGCGCGAGGCCGCGAGCCCAGCGCCCAGAGCGCGCGCUCACGAAAGGAGCGGGGCAUCCCAACGGCGCCACCUUUAAGCGUCACGGGUGGGGCUGCAGCUUCUGGACCUAGGACUUUGAAC\
) } def
/len { sequence length } bind def

/coor [
[63.60980606 614.19744873]
[73.32457733 601.43023682]
[72.64676666 586.44555664]
[71.96895599 571.46087646]
[71.29114532 556.47619629]
[70.61333466 541.49151611]
[59.47714233 531.66699219]
[58.57628632 516.48004150]
[68.95663452 504.86599731]
[60.21208954 496.43167114]
[59.57227707 483.89672852]
[67.93054962 474.00103760]
[67.59156036 459.00488281]
[67.25257111 444.00872803]
[59.22961426 431.45956421]
[66.65306091 417.48803711]
[66.31407166 402.49188232]
[65.97508240 387.49569702]
[63.95299530 385.43978882]
[62.65946960 382.42556763]
[62.47660065 378.74011230]
[63.67033386 374.80783081]
[66.34471130 371.14425659]
[67.36099243 356.17874146]
[68.37727356 341.21319580]
[69.39355469 326.24765015]
[70.40984344 311.28213501]
[63.55261993 298.05987549]
[72.20713043 284.81564331]
[73.22341919 269.85009766]
[70.51543427 262.90505981]
[74.43553925 254.55906677]
[75.78977966 239.62031555]
[77.14401245 224.68157959]
[78.49825287 209.74282837]
[79.85248566 194.80409241]
[77.48032379 190.57057190]
[77.80181122 184.78993225]
[81.62044525 179.22610474]
[83.64833832 164.36381531]
[85.67623138 149.50152588]
[87.70413208 134.63923645]
[89.73202515 119.77695465]
[71.55404663 102.10153961]
[79.62147522 71.83608246]
[73.37623596 58.19801331]
[66.97727966 44.63138580]
[60.42541885 31.13793755]
[53.80611038 24.71863937]
[53.88183975 17.26469421]
[41.10135651 7.93893147]
[42.83715820 -6.85418415]
[36.59191895 -20.49225616]
[30.34667969 -34.13032532]
[24.10144043 -47.76839828]
[17.85620117 -61.40646744]
[11.38365269 -67.97372437]
[11.62782001 -75.42404938]
[-1.83835173 -84.78323364]
[-0.19670640 -101.10000610]
[14.86397266 -107.58907318]
[27.85054970 -97.57503510]
[25.40354729 -81.35948181]
[31.49427223 -67.65171051]
[37.73950958 -54.01363754]
[43.98474884 -40.37556458]
[50.22998810 -26.73749542]
[56.47522736 -13.09942341]
[68.80901337 -4.74914694]
[67.51991272 11.01945496]
[73.91886902 24.58608055]
[80.47072601 38.07952881]
[86.27083588 42.76202011]
[87.01430511 51.95277405]
[93.25954437 65.59084320]
[100.52895355 67.43630981]
[99.54651642 52.46851730]
[113.47815704 46.90888977]
[123.07077026 58.44065857]
[115.06776428 71.12724304]
[122.33716583 72.97270966]
[134.33142090 63.96504593]
[146.32566833 54.95738983]
[158.31991577 45.94972992]
[170.31417847 36.94207001]
[169.08735657 21.56356430]
[176.38967896 7.97387457]
[189.89099121 0.50942349]
[205.28308105 1.55208933]
[217.65438843 10.76916122]
[223.05726624 25.21950531]
[219.76768494 40.29206848]
[208.83532715 51.17725372]
[193.74868774 54.40163422]
[179.32183838 48.93632126]
[167.32757568 57.94398117]
[155.33332825 66.95163727]
[143.33908081 75.95929718]
[131.34483337 84.96695709]
[130.23063660 104.76224518]
[119.17287445 118.21155548]
[104.59431458 121.80484772]
[102.56642151 136.66714478]
[100.53852081 151.52943420]
[98.51062775 166.39172363]
[96.48272705 181.25401306]
[94.79122925 196.15832520]
[93.43699646 211.09707642]
[92.08275604 226.03581238]
[90.72852325 240.97456360]
[89.37428284 255.91329956]
[88.18894958 270.86639404]
[87.17266846 285.83193970]
[93.95719910 300.12460327]
[85.37537384 312.29840088]
[84.35909271 327.26394653]
[83.34280396 342.22949219]
[82.32652283 357.19500732]
[81.31024170 372.16055298]
[80.97125244 387.15670776]
[81.31024170 402.15289307]
[81.64923096 417.14904785]
[89.69643402 430.77084351]
[82.24874115 443.66970825]
[82.58773041 458.66589355]
[82.92671967 473.66204834]
[92.86368561 489.11846924]
[83.94131470 504.18820190]
[95.32781219 514.81762695]
[95.80175018 530.02392578]
[85.59801483 540.81365967]
[86.27582550 555.79833984]
[86.95363617 570.78302002]
[87.63144684 585.76770020]
[88.30925751 600.75238037]
[99.13701630 612.59045410]
[96.49044037 628.41369629]
[82.39975739 636.08392334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 135]
[3 134]
[4 133]
[5 132]
[6 131]
[9 128]
[12 126]
[13 125]
[14 124]
[16 122]
[17 121]
[18 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 115]
[29 113]
[30 112]
[32 111]
[33 110]
[34 109]
[35 108]
[36 107]
[39 106]
[40 105]
[41 104]
[42 103]
[43 102]
[45 75]
[46 74]
[47 72]
[48 71]
[50 70]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[58 63]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
