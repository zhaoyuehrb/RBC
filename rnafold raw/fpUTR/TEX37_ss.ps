%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAACAGGACUCUCCAUGUGGCAAGGGCACCUGGAGGUGGGAGGGCAGGAGCGUCGUCUUGCCCUGGCAGAAGAAGCGGUAGGCUCUGUCUGCGUGGCAGCUGGUCCCCAGCCCUAGGAGAGAAGCUGUCUGUCGUUUGCC\
) } def
/len { sequence length } bind def

/coor [
[74.78057098 275.11492920]
[80.82691193 259.27578735]
[80.82691193 244.27578735]
[80.82691193 229.27578735]
[80.82691193 214.27578735]
[77.65697479 207.53483582]
[80.99530029 198.94718933]
[73.53945160 186.05300903]
[81.57803345 172.42614746]
[81.90754700 157.42976379]
[82.23706055 142.43338013]
[69.52993774 134.46287537]
[56.17232895 141.28739929]
[42.81472015 148.11193848]
[29.45710945 154.93647766]
[16.09950066 161.76100159]
[2.74189067 168.58554077]
[-6.02703190 181.75431824]
[-20.88099289 180.65470886]
[-34.23860168 187.47923279]
[-47.59621048 194.30377197]
[-56.36513519 207.47254944]
[-71.21909332 206.37294006]
[-82.57305908 218.96356201]
[-97.81472778 211.53874207]
[-94.89939117 194.83732605]
[-78.04362488 193.01531982]
[-70.23013306 180.33468628]
[-54.42074585 180.94616699]
[-41.06313705 174.12162781]
[-27.70552635 167.29708862]
[-19.89202881 154.61645508]
[-4.08264399 155.22793579]
[9.27496529 148.40339661]
[22.63257599 141.57885742]
[35.99018478 134.75433350]
[49.34779358 127.92979431]
[62.70540237 121.10526276]
[59.89268875 111.84934235]
[59.28245163 102.42819214]
[60.80200577 93.34642792]
[64.26726532 85.06716919]
[69.39773560 77.98838806]
[59.20665741 66.98194885]
[49.01557541 55.97549820]
[38.82449341 44.96905518]
[28.63340950 33.96260834]
[18.44232750 22.95616341]
[8.25124550 11.94971752]
[-1.93983662 0.94327241]
[-12.13091850 -10.06317329]
[-27.93117714 -10.42011166]
[-38.79070282 -21.90254402]
[-38.26673508 -37.69814301]
[-26.67013168 -48.43566513]
[-10.88095284 -47.74472427]
[-0.26663899 -36.03524780]
[-1.12447333 -20.25425529]
[9.06660938 -9.24780941]
[19.25769043 1.75863564]
[29.44877434 12.76508141]
[39.63985443 23.77152634]
[49.83093643 34.77797318]
[60.02201843 45.78441620]
[70.21310425 56.79086304]
[80.40418243 67.79730988]
[93.81689453 62.81427002]
[108.12042999 63.18875504]
[114.20140839 49.47665024]
[120.28237915 35.76454926]
[126.36334991 22.05244446]
[132.44432068 8.34034157]
[138.37431335 -5.43772936]
[144.15260315 -19.28010559]
[149.93089294 -33.12248230]
[150.36061096 -42.32614517]
[155.99114990 -47.20324326]
[162.07212830 -60.91534424]
[157.66571045 -76.34140015]
[167.09588623 -89.32028198]
[183.12861633 -89.89570618]
[193.46496582 -77.62625885]
[190.17576599 -61.92400360]
[175.78422546 -54.83436966]
[169.70324707 -41.12226868]
[163.77326965 -27.34419632]
[157.99497986 -13.50181961]
[152.21669006 0.34055722]
[152.54524231 7.78240347]
[146.15643311 14.42131519]
[140.07545471 28.13341904]
[133.99447632 41.84552002]
[127.91350555 55.55762482]
[121.83253479 69.26972961]
[131.04177856 78.61268616]
[136.49150085 90.54589844]
[137.52166748 103.62412262]
[151.86676025 108.00794220]
[166.21186829 112.39176941]
[180.55697632 116.77559662]
[194.90208435 121.15941620]
[209.24719238 125.54324341]
[223.59230042 129.92706299]
[237.42333984 122.76187897]
[251.90887451 127.41204834]
[258.65454102 140.64199829]
[272.99966431 145.02581787]
[288.45858765 141.65950012]
[298.36892700 152.77859497]
[312.71401978 157.16242981]
[325.72833252 148.49282837]
[341.26480103 150.26832581]
[351.98757935 161.65060425]
[352.83370972 177.26527405]
[343.40365601 189.73957825]
[328.15002441 193.18353271]
[314.27511597 185.97100830]
[308.33020020 171.50752258]
[293.98510742 167.12370300]
[279.55224609 170.80358887]
[268.61584473 159.37092590]
[254.27072144 154.98710632]
[241.28196716 162.18626404]
[226.67153931 157.94479370]
[219.20848083 144.27217102]
[204.86337280 139.88835144]
[190.51826477 135.50453186]
[176.17315674 131.12069702]
[161.82804871 126.73687744]
[147.48294067 122.35305023]
[133.13783264 117.96922302]
[119.47286987 135.25372314]
[97.23343658 142.76289368]
[96.90393066 157.75927734]
[96.57441711 172.75566101]
[104.00669861 186.72245789]
[95.99167633 199.27670288]
[95.82691193 214.27578735]
[95.82691193 229.27578735]
[95.82691193 244.27578735]
[95.82691193 259.27578735]
[101.87325287 275.11492920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 141]
[3 140]
[4 139]
[5 138]
[7 137]
[9 135]
[10 134]
[11 133]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[19 31]
[20 30]
[21 29]
[23 27]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[68 94]
[69 93]
[70 92]
[71 91]
[72 90]
[73 88]
[74 87]
[75 86]
[77 85]
[78 84]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[103 125]
[106 122]
[107 121]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
