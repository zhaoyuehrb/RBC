%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUGAGCUGAGCUCUUUCCCUGAAUGAAUCCAAGUAACCCUGGCCUUCUGAAAUGACCAGCAGACACACAACUGUCCAGAGGCUGCCCAAAGUAUAAACUCUGGUUCUAAAGUACC\
) } def
/len { sequence length } bind def

/coor [
[237.06954956 162.70402527]
[235.00323486 154.32673645]
[220.94584656 149.09320068]
[206.88845825 143.85968018]
[192.83106995 138.62614441]
[178.77368164 133.39260864]
[160.09800720 138.10848999]
[147.28584290 122.65387726]
[132.97184753 118.16952515]
[118.65784454 113.68517303]
[104.34384155 109.20082092]
[96.21142578 109.98760986]
[89.71399689 104.40455627]
[80.45214844 104.57346344]
[75.21585846 99.22378540]
[61.15847397 93.99025726]
[47.03322983 88.94273376]
[32.84259033 84.08209991]
[18.65195084 79.22146606]
[4.46131182 74.36083221]
[-5.15865231 79.76753998]
[-15.94037914 78.93198395]
[-24.26467705 72.38099670]
[-27.47423363 62.51836014]
[-41.38857269 56.91558456]
[-55.30291367 51.31280899]
[-64.56077576 50.99267578]
[-69.50743103 45.37411118]
[-79.52500153 50.00276566]
[-90.20682526 48.31681061]
[-97.98674011 41.12776566]
[-100.40592957 31.04211426]
[-113.83338165 24.35603905]
[-127.26082611 17.66996384]
[-140.95820618 24.96116447]
[-156.32055664 22.77541924]
[-167.44076538 11.95319176]
[-170.04287720 -3.34414983]
[-163.12632751 -17.23446655]
[-149.35066223 -24.37664604]
[-134.01290894 -22.02437782]
[-123.01075745 -11.08215523]
[-120.57475281 4.24251461]
[-107.14730072 10.92858982]
[-93.71985626 17.61466599]
[-74.65113068 14.89353943]
[-63.53931427 31.61251450]
[-49.70013809 37.39846420]
[-35.78579712 43.00124359]
[-21.87145615 48.60401917]
[-3.07779455 44.38276291]
[9.32194614 60.17019272]
[23.51258469 65.03083038]
[37.70322418 69.89146423]
[51.89386368 74.75209808]
[59.33469009 73.93247223]
[66.39199829 79.93286896]
[80.44939423 85.16639709]
[94.57463837 90.21392059]
[108.82819366 94.88681793]
[123.14219666 99.37117004]
[137.45619202 103.85552216]
[151.77018738 108.33987427]
[161.24407959 102.68112183]
[172.04411316 103.23178101]
[180.53843689 109.56074524]
[184.00721741 119.33522797]
[198.06460571 124.56875610]
[212.12199402 129.80227661]
[226.17938232 135.03581238]
[240.23677063 140.26934814]
[261.86239624 134.65870667]
[275.50433350 151.40036011]
[290.03506470 155.12303162]
[304.56576538 158.84571838]
[321.71099854 146.88902283]
[341.88354492 151.14179993]
[352.44470215 168.51249695]
[367.28686523 170.68284607]
[382.12899780 172.85319519]
[396.97116089 175.02354431]
[411.81332397 177.19389343]
[426.65548706 179.36424255]
[441.60845947 180.55099487]
[456.60714722 180.74899292]
[471.60583496 180.94699097]
[482.75140381 169.74198914]
[498.55563354 169.78350830]
[509.64218140 181.04690552]
[509.43356323 196.84982300]
[498.05358887 207.81665039]
[482.25375366 207.44097900]
[471.40783691 195.94567871]
[456.40914917 195.74768066]
[441.41046143 195.54968262]
[449.23760986 208.34561157]
[444.36828613 222.53326416]
[430.33300781 227.82580566]
[417.30816650 220.38583374]
[414.73748779 205.60774231]
[424.48513794 194.20639038]
[409.64297485 192.03604126]
[394.80081177 189.86569214]
[379.95864868 187.69534302]
[365.11651611 185.52499390]
[350.27435303 183.35464478]
[344.68438721 191.20140076]
[336.53244019 196.44496155]
[326.95928955 198.29992676]
[317.32391357 196.45878601]
[309.01062012 191.14187622]
[303.23007202 183.07200623]
[300.84307861 173.37643433]
[286.31237793 169.65374756]
[271.78164673 165.93107605]
[265.80776978 171.48046875]
[258.01239014 174.17720032]
[249.69717407 173.48995972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[8 63]
[9 62]
[10 61]
[11 60]
[13 59]
[15 58]
[16 57]
[17 55]
[18 54]
[19 53]
[20 52]
[24 50]
[25 49]
[26 48]
[28 47]
[32 45]
[33 44]
[34 43]
[73 115]
[74 114]
[75 113]
[78 106]
[79 105]
[80 104]
[81 103]
[82 102]
[83 101]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
