%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGCUGUGGGCGGUGCCGCGCGGACCCCCGGGAAGUGUCUCUGUGGGCGGCCGCCGGGUUGAGCUGCGGCACACGUGCGACGGCCGUG\
) } def
/len { sequence length } bind def

/coor [
[96.30511475 285.56661987]
[95.78737640 270.57556152]
[95.26963043 255.58450317]
[91.81851959 248.86544800]
[95.00178528 240.06898499]
[95.00178528 225.06898499]
[95.00178528 210.06898499]
[95.00178528 195.06898499]
[95.00178528 180.06898499]
[94.74287415 165.07122803]
[86.57089233 152.61859131]
[93.82724762 138.55958557]
[93.30950928 123.56852722]
[92.79176331 108.57746124]
[92.01534271 93.59757233]
[90.98047638 78.63330841]
[89.94561005 63.66905212]
[88.91074371 48.70479202]
[87.87587738 33.74053574]
[86.84101105 18.77627563]
[85.80614471 3.81201625]
[84.51313782 -11.13215065]
[82.96237946 -26.05177307]
[69.81006622 -31.14503479]
[60.21545792 -41.39169312]
[56.03655243 -54.72293854]
[58.04583740 -68.48127747]
[65.78820801 -79.95024872]
[77.68241119 -86.89078522]
[76.64754486 -101.85504150]
[75.61267853 -116.81930542]
[74.57781219 -131.78355408]
[73.54294586 -146.74781799]
[59.84613037 -153.55549622]
[51.45125580 -166.22131348]
[50.52939987 -181.28837585]
[57.22819138 -194.70413208]
[69.65898132 -202.91029358]
[68.62411499 -217.87454224]
[67.58924103 -232.83880615]
[66.55437469 -247.80307007]
[65.51950836 -262.76733398]
[55.91583252 -276.06024170]
[62.87196732 -290.91094971]
[79.23204041 -292.04235840]
[88.16620636 -278.29052734]
[80.48377228 -263.80218506]
[81.51863861 -248.83793640]
[82.55350494 -233.87367249]
[83.58837128 -218.90940857]
[84.62323761 -203.94515991]
[98.06529999 -197.52825928]
[106.54704285 -185.16233826]
[107.70800018 -170.11180115]
[101.13653564 -156.41098022]
[88.50720215 -147.78268433]
[89.54207611 -132.81843567]
[90.57694244 -117.85417175]
[91.61180878 -102.88990784]
[92.64667511 -87.92565155]
[107.25843048 -81.26172638]
[116.61978149 -68.09826660]
[118.13571930 -51.92324448]
[111.30541992 -37.08034897]
[97.88200378 -27.60253334]
[99.43276215 -12.68290997]
[103.33920288 -6.21796083]
[100.77040100 2.77714920]
[101.80526733 17.74140739]
[102.84013367 32.70566559]
[103.87500000 47.66992569]
[104.90987396 62.63418579]
[105.94474030 77.59844208]
[106.97960663 92.56270599]
[110.70148468 99.92369843]
[107.78282928 108.05972290]
[108.30056763 123.05078125]
[108.81831360 138.04183960]
[117.02732849 151.56672668]
[109.73394012 164.55348206]
[113.21892548 173.23481750]
[110.00178528 180.06898499]
[110.00178528 195.06898499]
[110.00178528 210.06898499]
[110.00178528 225.06898499]
[110.00178528 240.06898499]
[110.26069641 255.06675720]
[110.77843475 270.05783081]
[111.29618073 285.04888916]
[114.15041351 304.21926880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[3 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[10 80]
[12 78]
[13 77]
[14 76]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[21 68]
[22 66]
[23 65]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
