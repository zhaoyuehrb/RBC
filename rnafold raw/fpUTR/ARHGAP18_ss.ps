%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGCUAAUGAGCGAGUUGCCAGGCGAGACAGGAACUUCUUUCCCCUUCUCUGUGUCAGGAUCGCAGAAAGUAUGUCCCUUCUCUCACC\
) } def
/len { sequence length } bind def

/coor [
[64.35176086 203.78546143]
[52.60721970 194.45455933]
[47.53918457 180.33666992]
[50.66722488 165.66777039]
[37.94650269 173.61656189]
[25.22578239 181.56535339]
[21.60521317 187.52052307]
[16.27058220 190.18286133]
[11.32868576 189.58883667]
[-1.91552806 196.63092041]
[-8.19111156 203.57415771]
[-15.74713230 203.67846680]
[-29.22904205 210.25402832]
[-35.79066467 224.89385986]
[-51.36292648 228.75186157]
[-64.00012207 218.86851501]
[-64.00807953 202.82545471]
[-51.38069153 192.92956543]
[-35.80461121 196.77212524]
[-22.32269859 190.19656372]
[-8.95760155 183.38670349]
[4.28661251 176.34461975]
[17.27699280 168.84461975]
[29.99771500 160.89584351]
[42.71843719 152.94705200]
[54.03908157 143.10615540]
[63.68089294 131.61549377]
[73.32270813 120.12483215]
[82.96452332 108.63416290]
[81.80626678 94.19100952]
[91.11994934 83.09139252]
[105.54480743 81.72402191]
[115.18662262 70.23335266]
[124.82843781 58.74269104]
[119.69373322 44.33498383]
[122.44190979 29.39027405]
[132.23643494 17.90404129]
[146.37066650 12.89608765]
[161.01519775 15.61698627]
[170.65701294 4.12631989]
[180.29882812 -7.36434698]
[189.94064331 -18.85501289]
[199.58245850 -30.34568024]
[193.77165222 -45.71400070]
[196.42547607 -61.83406448]
[206.73800659 -74.38462830]
[221.86300659 -80.04874420]
[237.69903564 -77.39008331]
[246.93395996 -89.21025085]
[249.84291077 -98.10572815]
[256.70324707 -101.27433014]
[266.34506226 -112.76499176]
[275.98687744 -124.25566101]
[281.53631592 -140.27565002]
[298.46649170 -139.37786865]
[302.29052734 -122.86081696]
[287.47753906 -114.61384583]
[277.83575439 -103.12318420]
[268.19393921 -91.63251495]
[258.75411987 -79.97532654]
[249.51919556 -68.15516663]
[255.48991394 -55.74328613]
[255.48332214 -41.90336990]
[249.44293213 -29.37720299]
[238.51332092 -20.67136765]
[224.82366943 -17.55573082]
[211.07312012 -20.70386505]
[201.43130493 -9.21319962]
[191.78948975 2.27746725]
[182.14767456 13.76813412]
[172.50587463 25.25880051]
[177.72842407 39.20837021]
[175.25093079 53.99748611]
[165.64001465 65.63777924]
[151.39956665 70.93933105]
[136.31910706 68.38450623]
[126.67729187 79.87516785]
[117.03547668 91.36583710]
[118.19373322 105.80899048]
[108.88005066 116.90860748]
[94.45519257 118.27597809]
[84.81337738 129.76664734]
[75.17156219 141.25730896]
[65.52974701 152.74797058]
[80.49254608 151.69216919]
[93.76736450 158.67637634]
[101.37230682 171.60559082]
[101.02618408 186.60160828]
[92.83282471 199.16618347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[6 23]
[9 22]
[10 21]
[12 20]
[13 19]
[26 84]
[27 83]
[28 82]
[29 81]
[32 78]
[33 77]
[34 76]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[48 61]
[49 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
