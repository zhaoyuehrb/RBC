%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGAGCCAGGCCGAGCCUUAUAAAGGGACUGCUCUUUGUCCAAACACACACAUCUCACUCAUCCUUCUUCUCGUG\
) } def
/len { sequence length } bind def

/coor [
[113.90825653 279.04318237]
[112.12297821 264.14978027]
[110.33770752 249.25640869]
[108.55243683 234.36303711]
[106.76716614 219.46965027]
[104.98188782 204.57626343]
[103.19661713 189.68289185]
[101.41134644 174.78950500]
[72.38441467 169.51864624]
[47.65295029 153.43452454]
[31.06378555 129.03895569]
[16.72601509 133.44670105]
[2.38824224 137.85446167]
[-11.94952965 142.26222229]
[-25.31266975 152.69595337]
[-39.03793716 142.74339294]
[-33.27386093 126.79937744]
[-16.35728455 127.92444611]
[-2.01951194 123.51668549]
[12.31826019 119.10893250]
[26.65603256 114.70117950]
[25.21085358 101.43032074]
[26.14755821 88.11390686]
[29.43631744 75.17604065]
[34.97238922 63.02876663]
[42.57946014 52.05895233]
[52.01526260 42.61596680]
[62.97928238 35.00054932]
[75.12233734 29.45523262]
[71.57717133 14.88019276]
[68.03200531 0.30515248]
[64.48683929 -14.26988792]
[50.08265686 -20.04044151]
[41.84980011 -33.19337463]
[42.95396042 -48.67111588]
[52.97056961 -60.52215576]
[68.04803467 -64.18952942]
[82.38876343 -58.26305771]
[90.47845459 -45.02158737]
[89.20645905 -29.55673599]
[79.06187439 -17.81505394]
[82.60704041 -3.24001408]
[86.15220642 11.33502579]
[89.69737244 25.91006660]
[99.20198822 25.20143318]
[108.71955109 25.70712090]
[118.09556580 27.41892052]
[127.17779541 30.30904198]
[135.81881714 34.33056259]
[143.87832642 39.41819763]
[151.22549438 45.48934937]
[157.74104309 52.44546127]
[163.31918335 60.17359543]
[167.86938477 68.54829407]
[171.31773376 77.43359375]
[173.60829163 86.68525696]
[174.70384216 96.15306854]
[174.58660889 105.68334198]
[173.25849915 115.12134552]
[170.74107361 124.31385803]
[167.07519531 133.11164856]
[162.32037354 141.37188721]
[156.55381775 148.96047974]
[149.86914062 155.75421143]
[142.37484741 161.64279175]
[134.19262695 166.53063965]
[125.45530701 170.33839417]
[116.30472565 173.00424194]
[118.08999634 187.89761353]
[119.87526703 202.79100037]
[121.66054535 217.68437195]
[123.44581604 232.57775879]
[125.23108673 247.47114563]
[127.01636505 262.36453247]
[128.80163574 277.25790405]
[139.06094360 290.05160522]
[132.85960388 305.23300171]
[116.57701874 307.18481445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[11 21]
[12 20]
[13 19]
[14 18]
[29 44]
[30 43]
[31 42]
[32 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
