%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCGGGGCAGGCAAAGUGCAGAUGUAGGAGCUGCUGAGGAGCAGUUCUUAGUUUUGGUGCCAUCAACCAGGCCAGUACUUCCUAAA\
) } def
/len { sequence length } bind def

/coor [
[104.45588684 216.64021301]
[108.20205688 201.99584961]
[116.09971619 189.10714722]
[127.44661713 179.12019348]
[121.28113556 165.44587708]
[108.99633789 157.02371216]
[110.37751770 141.26290894]
[104.21204376 127.58858490]
[87.10748291 124.75186157]
[74.97891998 112.36191559]
[72.50747681 95.20077515]
[80.64703369 79.89193726]
[73.53234100 66.68659210]
[66.41765594 53.48124313]
[59.30296326 40.27589798]
[50.50346756 39.36119461]
[42.93590546 34.96620560]
[37.89227676 27.93199348]
[36.19620895 19.54185295]
[38.06924057 11.28752232]
[43.10531998 4.60399723]
[37.91977310 -9.47116184]
[32.73422623 -23.54632187]
[27.54868126 -37.62147903]
[13.47708893 -44.30190277]
[8.41871357 -58.64998245]
[14.87419128 -72.02392578]
[9.68864536 -86.09909058]
[4.50309992 -100.17424774]
[-0.68244600 -114.24940491]
[-5.86799192 -128.32456970]
[-11.05353737 -142.39971924]
[-16.23908424 -156.47488403]
[-21.42462921 -170.55004883]
[-26.61017609 -184.62519836]
[-31.79572105 -198.70036316]
[-36.98126602 -212.77552795]
[-49.92430115 -222.84576416]
[-47.40701294 -239.05056763]
[-32.01897049 -244.71980286]
[-19.59007645 -234.02145386]
[-22.90610886 -217.96107483]
[-17.72056198 -203.88591003]
[-12.53501606 -189.81074524]
[-7.34947014 -175.73559570]
[-2.16392422 -161.66043091]
[3.02162170 -147.58526611]
[8.20716763 -133.51011658]
[13.39271355 -119.43495178]
[18.57825851 -105.35979462]
[23.76380539 -91.28463745]
[28.94935036 -77.20947266]
[42.53853607 -71.22035217]
[47.99792480 -57.02000809]
[41.62384033 -42.80702591]
[46.80938721 -28.73186684]
[51.99493408 -14.65670776]
[57.18048096 -0.58154845]
[75.31670380 11.05806541]
[72.50830841 33.16120529]
[79.62300110 46.36655426]
[86.73769379 59.57189941]
[93.85237885 72.77724457]
[106.16038513 72.78013611]
[117.27022552 78.07716370]
[125.02108002 87.63808441]
[127.90544891 99.60334778]
[125.36233521 111.64575195]
[117.88635254 121.42311096]
[124.05183411 135.09742737]
[136.77763367 144.49768066]
[134.95545959 159.28041077]
[141.12092590 172.95471191]
[156.11810303 171.06365967]
[171.00611877 173.67874146]
[184.46112061 180.56745911]
[195.28671265 191.11723328]
[202.52027893 204.39002991]
[205.51864624 219.20559692]
[204.01516724 234.24658203]
[198.14353943 248.17552185]
[188.42587280 259.75387573]
[175.72625732 267.95211792]
[161.17391968 272.04122925]
[146.06285095 271.65765381]
[131.73672485 266.83547974]
[119.46939850 258.00347900]
[110.35168457 245.94700623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 73]
[5 72]
[7 70]
[8 69]
[12 63]
[13 62]
[14 61]
[15 60]
[21 58]
[22 57]
[23 56]
[24 55]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
