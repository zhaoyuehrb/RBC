%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGUUCCCUGUGUAGGGCUGCCUGCCCCUUAUAAAAGGACUCUCCACCACACUGAUGCUAUCUUCUUGCCAUUCAGUUGUAGAUCUUUGAAGACUCUGAUUCUCUGAGACUGAGGAGAG\
) } def
/len { sequence length } bind def

/coor [
[-9.60918903 180.77386475]
[-19.79829025 191.78215027]
[-29.98739052 202.79043579]
[-33.58445740 220.79364014]
[-50.45300293 225.44540405]
[-60.35528564 236.71238708]
[-63.48761749 254.80223083]
[-80.23079681 259.88681030]
[-89.83969116 271.40499878]
[-99.44858551 282.92321777]
[-109.05748749 294.44140625]
[-111.32429504 310.68313599]
[-126.62297058 316.58926392]
[-139.21556091 306.08410645]
[-136.14787292 289.97442627]
[-120.57569122 284.83251953]
[-110.96679688 273.31430054]
[-101.35789490 261.79611206]
[-91.74900055 250.27790833]
[-92.50892639 238.13085938]
[-84.49476624 228.44279480]
[-71.62226105 226.81010437]
[-61.71998215 215.54312134]
[-62.16689682 203.38053894]
[-53.90594482 193.90203857]
[-40.99567032 192.60133362]
[-30.80657005 181.59304810]
[-20.61746979 170.58477783]
[-25.17919159 156.29524231]
[-39.86202621 153.22695923]
[-54.54486465 150.15867615]
[-69.22769928 147.09039307]
[-84.62927246 152.72276306]
[-97.03251648 141.99468994]
[-93.67803192 125.94229126]
[-78.01663208 121.07890320]
[-66.15941620 132.40756226]
[-51.47658157 135.47584534]
[-36.79374695 138.54412842]
[-22.11091232 141.61241150]
[-2.53656435 132.02674866]
[14.41000652 139.82278442]
[27.46428490 132.43457031]
[40.51856232 125.04634857]
[53.57284164 117.65812683]
[66.62712097 110.26990509]
[79.68139648 102.88168335]
[80.66461182 88.14284515]
[91.95699310 76.49710083]
[109.54341125 74.74226379]
[112.98873138 60.14329529]
[111.91230011 50.94999695]
[116.71527100 45.21514893]
[120.53533936 30.70973206]
[124.35540009 16.20431519]
[128.17547607 1.69889963]
[131.99554443 -12.80651665]
[125.73350525 -31.88469124]
[139.67922974 -45.17763901]
[142.74751282 -59.86047363]
[131.67784119 -70.60597992]
[128.19715881 -85.63555908]
[133.41612244 -100.15333557]
[145.66940308 -109.52674103]
[161.04701233 -110.76474762]
[174.64201355 -103.47231293]
[182.11628723 -89.97643280]
[181.08482361 -74.58358765]
[171.87675476 -62.20558548]
[157.43034363 -56.79219437]
[154.36207581 -42.10935593]
[160.77700806 -33.97043610]
[161.60627747 -23.41881561]
[156.32571411 -13.99179554]
[146.50094604 -8.98644924]
[142.68089294 5.51896620]
[138.86082458 20.02438164]
[135.04075623 34.52979660]
[131.22068787 49.03521347]
[127.58769226 63.58861160]
[124.14237976 78.18757629]
[131.36190796 91.33589935]
[145.52925110 96.26403046]
[159.69659424 101.19216919]
[168.95184326 101.06670380]
[174.16244507 106.43388367]
[188.19819641 111.72516632]
[202.23394775 117.01644897]
[216.26969910 122.30773163]
[231.91210938 119.93584442]
[241.09188843 131.66534424]
[255.12763977 136.95661926]
[264.38305664 137.06950378]
[269.45373535 142.56907654]
[283.34860229 148.21998596]
[297.08703613 140.75074768]
[312.40203857 143.91052246]
[322.06237793 156.20736694]
[321.50668335 171.83506775]
[310.99737549 183.41471863]
[295.49661255 185.47875977]
[282.32336426 177.05261230]
[277.69766235 162.11485291]
[263.80282593 156.46392822]
[249.83634949 150.99237061]
[235.80059814 145.70109558]
[221.16212463 148.45144653]
[210.97842407 136.34347534]
[196.94267273 131.05220032]
[182.90692139 125.76091766]
[168.87117004 120.46963501]
[154.76844788 115.35950470]
[140.60112000 110.43137360]
[126.43377686 105.50323486]
[107.96759796 122.38558197]
[87.06961823 115.93596649]
[74.01534271 123.32418060]
[60.96106339 130.71240234]
[47.90678406 138.10063171]
[34.85250473 145.48884583]
[21.79822731 152.87707520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[5 23]
[6 22]
[8 19]
[9 18]
[10 17]
[11 16]
[29 40]
[30 39]
[31 38]
[32 37]
[42 121]
[43 120]
[44 119]
[45 118]
[46 117]
[47 116]
[50 81]
[51 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[59 71]
[60 70]
[82 114]
[83 113]
[84 112]
[86 111]
[87 110]
[88 109]
[89 108]
[91 106]
[92 105]
[94 104]
[95 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
