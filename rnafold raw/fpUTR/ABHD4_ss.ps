%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCGGGUCAGCUGGUGCUGGCGUCAGGCGCUGGGCGGGCUCGCCAGGACCUGGCAAGGCUUGUUUACU\
) } def
/len { sequence length } bind def

/coor [
[109.24724579 330.16156006]
[107.23329163 314.93527222]
[113.11711884 300.74810791]
[125.31600952 291.41629028]
[123.30251312 276.55203247]
[121.28900909 261.68780518]
[119.27551270 246.82354736]
[117.26201630 231.95930481]
[115.24851227 217.09506226]
[103.75839996 204.01921082]
[110.44474792 187.02729797]
[107.76639557 172.26835632]
[105.08804321 157.50941467]
[102.07920074 142.81427002]
[98.74138641 128.19035339]
[95.40357208 113.56643677]
[86.03518677 103.18737793]
[89.97250366 89.77137756]
[86.63468933 75.14745331]
[83.29687500 60.52353668]
[79.95906830 45.89962006]
[76.62125397 31.27569962]
[73.28343964 16.65178108]
[69.23884583 12.35537243]
[67.66166687 7.40084028]
[68.34651184 2.94161677]
[70.62122345 -0.15676805]
[69.27663422 -15.09638214]
[67.93204498 -30.03599739]
[58.98885345 -43.08704758]
[65.55414581 -56.45664978]
[54.20983505 -67.80064392]
[56.14898300 -83.72607422]
[69.88403320 -92.01631165]
[84.87863159 -86.31179047]
[89.63020325 -70.98854065]
[80.49375916 -57.80123901]
[89.34077454 -45.81877136]
[82.87165833 -31.38058662]
[84.21624756 -16.44097137]
[85.56083679 -1.50135767]
[87.90735626 13.31396770]
[91.24517059 27.93788528]
[94.58298492 42.56180573]
[97.92079926 57.18572235]
[101.25861359 71.80963898]
[104.59642792 86.43356323]
[113.96481323 96.81262207]
[110.02749634 110.22862244]
[113.36531067 124.85254669]
[116.70312500 139.47645569]
[121.81690216 147.44886780]
[119.84698486 154.83105469]
[122.52534485 169.58999634]
[125.20369720 184.34893799]
[135.48173523 192.48962402]
[137.26068115 205.07061768]
[130.11276245 215.08155823]
[132.12626648 229.94580078]
[134.13975525 244.81005859]
[136.15325928 259.67428589]
[138.16676331 274.53854370]
[140.18025208 289.40280151]
[154.42213440 295.15295410]
[163.86824036 307.26354980]
[165.97761536 322.47689819]
[160.18284607 336.70068359]
[148.04269409 346.10879517]
[132.82279968 348.17047119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[11 55]
[12 54]
[13 53]
[14 51]
[15 50]
[16 49]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[27 41]
[28 40]
[29 39]
[31 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
