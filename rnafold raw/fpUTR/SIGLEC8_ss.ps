%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUCUGAGAGAAGAACCCUGAGGAACAGACGUUCCCUGGCGGCCCUGGCGCCUUCAAACCCAGAC\
) } def
/len { sequence length } bind def

/coor [
[72.45740509 123.93407440]
[66.27642059 113.93394470]
[51.53182602 116.69018555]
[36.78723145 119.44642639]
[22.04263306 122.20267487]
[7.29803705 124.95891571]
[-7.44655943 127.71515656]
[-19.59003258 137.85649109]
[-33.52232361 132.58956909]
[-48.26692200 135.34580994]
[-56.44917297 140.14616394]
[-63.75514221 137.87229919]
[-73.07814789 150.63385010]
[-88.70692444 152.98268127]
[-101.36918640 143.52528381]
[-103.55265045 127.87254333]
[-93.96189880 115.31097412]
[-78.28695679 113.29312134]
[-65.82749176 123.01614380]
[-51.02316284 120.60121155]
[-36.27856827 117.84496307]
[-25.18972588 107.90077972]
[-10.20280266 112.97055817]
[4.54179430 110.21431732]
[19.28639030 107.45807648]
[34.03098679 104.70183563]
[48.77558517 101.94558716]
[63.52017975 99.18934631]
[68.53139496 81.52944946]
[81.50726318 68.54442596]
[99.16362000 63.52075958]
[117.03166199 67.72993469]
[130.58901978 80.10662079]
[144.57609558 74.68799591]
[158.56318665 69.26937103]
[161.01077271 54.17113876]
[170.62351990 42.40288544]
[184.74226379 37.06176758]
[199.53977966 39.48855972]
[211.05819702 48.93268585]
[225.04528809 43.51406097]
[239.03236389 38.09543610]
[253.01945496 32.67681122]
[263.09268188 20.47679710]
[277.75555420 23.09399414]
[290.34091187 11.73419571]
[304.74075317 20.68301201]
[300.12792969 36.99736786]
[283.17419434 37.08107758]
[274.10137939 48.89351654]
[258.43807983 46.66389465]
[244.45098877 52.08251953]
[230.46391296 57.50114441]
[216.47682190 62.91976929]
[214.32708740 77.65897369]
[205.02650452 89.42142487]
[190.99433899 94.98602295]
[175.96220398 92.76525116]
[163.98181152 83.25645447]
[149.99472046 88.67507935]
[136.00764465 94.09370422]
[136.01684570 105.84985352]
[132.28739929 116.99877167]
[125.20640564 126.38316345]
[115.50891113 133.02890015]
[104.20153809 136.24612427]
[92.45803070 135.70088196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[9 21]
[10 20]
[12 19]
[33 61]
[34 60]
[35 59]
[40 54]
[41 53]
[42 52]
[43 51]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
