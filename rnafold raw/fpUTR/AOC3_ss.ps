%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUUCCCACCCUUAGUCCCAGGCAUCUGACUACCGGGAACCUCAGCCAGAGUCCGGGAGCCCCCCACCCCGUCCAGGAGCCAACAGAGCCCCCGUCUUGCUGGCGUGAGAAUACAUUGCUCUCCUUUGGUUGAAUCAGCUGUCCCUCUUCGUGGGAAA\
) } def
/len { sequence length } bind def

/coor [
[-48.45252609 632.30169678]
[-64.22974396 631.37707520]
[-74.66952515 619.51171875]
[-73.57813263 603.74517822]
[-61.60306931 593.43139648]
[-60.72548294 578.45709229]
[-59.84790039 563.48278809]
[-58.97031784 548.50848389]
[-58.09273529 533.53417969]
[-57.21514893 518.55987549]
[-56.33756638 503.58557129]
[-62.89287567 499.94168091]
[-75.75942993 507.65219116]
[-76.00348663 492.65390015]
[-82.55879974 489.01000977]
[-94.81334686 497.66021729]
[-107.06789398 506.31042480]
[-119.32244110 514.96063232]
[-131.57699585 523.61083984]
[-134.72866821 529.51562500]
[-139.66215515 532.46289062]
[-144.48269653 532.34844971]
[-157.06541443 540.51391602]
[-164.02912903 555.36114502]
[-180.38978577 556.48413086]
[-189.31692505 542.72778320]
[-181.62707520 528.24334717]
[-165.23091125 527.93121338]
[-152.64819336 519.76574707]
[-140.22718811 511.35629272]
[-127.97264862 502.70608521]
[-115.71810150 494.05587769]
[-103.46354675 485.40567017]
[-91.20899963 476.75546265]
[-86.94038391 449.62771606]
[-67.84668732 433.29931641]
[-45.05776596 433.34536743]
[-38.54950714 419.83084106]
[-32.04125214 406.31631470]
[-25.53299522 392.80175781]
[-36.51076508 375.78152466]
[-35.06120300 355.44204712]
[-21.60014343 339.94281006]
[-1.39508796 335.60086060]
[3.76576257 321.51663208]
[8.92661285 307.43240356]
[14.08746338 293.34817505]
[19.24831390 279.26394653]
[24.40916443 265.17971802]
[29.57001495 251.09547424]
[34.73086548 237.01124573]
[39.89171600 222.92701721]
[45.05256653 208.84277344]
[43.87280655 205.46942139]
[44.29981995 201.35026550]
[46.66893768 197.26148987]
[50.94944763 194.10044861]
[56.92546463 180.34226990]
[62.90148163 166.58410645]
[68.87749481 152.82594299]
[74.85351562 139.06776428]
[80.82952881 125.30959320]
[75.63152313 120.35337830]
[71.68045044 114.35568237]
[69.17847443 107.62340546]
[68.25363922 100.50103760]
[68.95325470 93.35303497]
[71.24152374 86.54515839]
[75.00136566 80.42576599]
[80.04037476 75.30797577]
[86.10071564 71.45367432]
[82.90573883 56.79788971]
[70.23678589 46.95526886]
[70.17717743 30.91232681]
[82.77263641 20.97583389]
[98.36100769 24.76821709]
[104.98423004 39.38028717]
[97.56153107 53.60290909]
[100.75650787 68.25869751]
[105.35955811 65.37003326]
[110.71418762 63.19353485]
[118.00196838 50.08292007]
[125.28974915 36.97230530]
[132.57752991 23.86169052]
[132.51966858 8.04058933]
[145.46595764 0.67561698]
[152.75373840 -12.43499756]
[160.04151917 -25.54561234]
[159.98364258 -41.36671448]
[172.92993164 -48.73168564]
[180.21771240 -61.84230042]
[179.41020203 -78.22154999]
[193.33607483 -86.88191986]
[207.66960144 -78.91436005]
[207.66567993 -62.51521301]
[193.32833862 -54.55451584]
[186.04055786 -41.44390106]
[186.61968994 -26.56056023]
[173.15213013 -18.25782967]
[165.86434937 -5.14721441]
[158.57656860 7.96340036]
[159.15571594 22.84674263]
[145.68815613 31.14947319]
[138.40036011 44.26008606]
[131.11257935 57.37070084]
[123.82479858 70.48131561]
[133.40419006 82.02407837]
[147.63342285 77.27761841]
[161.86265564 72.53115845]
[168.70243835 58.28359604]
[183.64093018 53.12440872]
[197.81536865 60.11444473]
[202.81632996 75.10663605]
[195.67683411 89.20639038]
[180.63259888 94.04856873]
[166.60911560 86.76039124]
[152.37988281 91.50685120]
[138.15065002 96.25331116]
[123.85266876 125.67118073]
[94.58769989 131.28561401]
[88.61168671 145.04377747]
[82.63566589 158.80195618]
[76.65965271 172.56011963]
[70.68363190 186.31829834]
[64.70761871 200.07646179]
[59.13679886 214.00363159]
[53.97594833 228.08786011]
[48.81509781 242.17208862]
[43.65424728 256.25631714]
[38.49339676 270.34054565]
[33.33254623 284.42480469]
[28.17169571 298.50903320]
[23.01084518 312.59326172]
[17.84999466 326.67749023]
[12.68914509 340.76171875]
[20.05945778 347.56829834]
[25.00575447 356.26260376]
[27.07843208 366.01806641]
[26.10012054 375.91339111]
[22.18071175 385.01968384]
[15.70534229 392.48751831]
[7.29661417 397.62631226]
[-2.24523091 399.96810913]
[-12.01846313 399.31002808]
[-18.52671814 412.82455444]
[-25.03497505 426.33908081]
[-31.54323196 439.85363770]
[-22.68927002 447.79309082]
[-17.07600594 458.98138428]
[-15.88277149 472.07025146]
[-19.72234535 485.29342651]
[-28.49851990 496.70498657]
[-41.36326218 504.46316528]
[-42.24084473 519.43750000]
[-43.11842728 534.41180420]
[-43.99600983 549.38610840]
[-44.87359619 564.36041260]
[-45.75117874 579.33471680]
[-46.62876129 594.30902100]
[-35.94043350 605.95098877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 159]
[6 158]
[7 157]
[8 156]
[9 155]
[10 154]
[11 153]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[22 29]
[23 28]
[37 147]
[38 146]
[39 145]
[40 144]
[44 135]
[45 134]
[46 133]
[47 132]
[48 131]
[49 130]
[50 129]
[51 128]
[52 127]
[53 126]
[57 125]
[58 124]
[59 123]
[60 122]
[61 121]
[62 120]
[71 79]
[72 78]
[81 106]
[82 105]
[83 104]
[84 103]
[86 101]
[87 100]
[88 99]
[90 97]
[91 96]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
