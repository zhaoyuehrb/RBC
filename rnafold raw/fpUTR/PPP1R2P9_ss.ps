%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCAUACGCAGCGCCCUUUGUGACACCAGGGCCCUGGUGCUUUAACUAGGGCGUUGGGACCUGUUGCCCACACAGACCGCCCUGCAGUUUCAGACUGGAGGGCGGUGGACGGCUACUCAGCGGCCCAACUCUCUCGCAGCCCUUCUCUCCGCAAA\
) } def
/len { sequence length } bind def

/coor [
[127.63658142 142.86431885]
[142.50910950 144.83665466]
[130.94375610 135.28454590]
[119.37841034 125.73244476]
[106.64183807 131.52090454]
[92.65248871 131.36392212]
[80.04901886 125.29109955]
[71.20868683 114.44789124]
[59.53709793 125.12892914]
[45.38050842 120.49856567]
[30.77591133 123.91993713]
[16.17131615 127.34130096]
[1.56671846 130.76266479]
[-13.03787804 134.18403625]
[-27.64247513 137.60539246]
[-42.24707031 141.02676392]
[-56.85166931 144.44813538]
[-71.45626831 147.86950684]
[-77.55059052 162.01748657]
[-90.65396881 169.77343750]
[-105.63458252 168.34338379]
[-116.76731110 158.48435974]
[-131.37190247 161.90571594]
[-145.97650146 165.32708740]
[-160.50971985 169.03999329]
[-174.96572876 173.04293823]
[-189.42175293 177.04589844]
[-203.87776184 181.04884338]
[-218.33378601 185.05180359]
[-232.78979492 189.05474854]
[-243.89662170 201.12001038]
[-259.83749390 197.27030945]
[-264.21383667 181.46588135]
[-252.52362061 169.96498108]
[-236.79273987 174.59873962]
[-222.33673096 170.59577942]
[-207.88072205 166.59283447]
[-193.42469788 162.58987427]
[-178.96868896 158.58692932]
[-164.51266479 154.58396912]
[-161.39938354 150.89532471]
[-155.91458130 149.15710449]
[-149.39787292 150.72248840]
[-134.79327393 147.30113220]
[-120.18867493 143.87976074]
[-114.59327698 130.10189819]
[-101.80658722 122.16688538]
[-86.62176514 123.29587555]
[-74.87763214 133.26490784]
[-60.27303696 129.84353638]
[-45.66843796 126.42217255]
[-31.06384277 123.00080109]
[-16.45924568 119.57943726]
[-1.85464811 116.15807343]
[12.74994850 112.73670197]
[27.35454559 109.31533813]
[41.95914078 105.89396667]
[52.58611298 95.45764923]
[67.78731537 99.84329224]
[67.93223572 87.87862396]
[72.62102509 76.08741760]
[81.70340729 66.21586609]
[76.13690948 52.28697205]
[70.57041931 38.35807419]
[65.00392914 24.42917824]
[50.09450912 19.71291161]
[41.74845886 6.48878765]
[43.90652847 -8.99916744]
[55.54974365 -19.43801498]
[71.18053436 -19.89884949]
[83.41851807 -10.16407967]
[86.48529816 5.16983414]
[78.93282318 18.86268616]
[84.49932098 32.79158401]
[90.06581116 46.72047806]
[95.63230133 60.64937592]
[110.58428192 61.84870529]
[118.29984283 48.98518753]
[126.01540375 36.12166977]
[133.73097229 23.25815201]
[141.44653320 10.39463425]
[149.16209412 -2.46888328]
[156.87765503 -15.33240032]
[164.59321594 -28.19591904]
[165.05636597 -44.01034546]
[178.23817444 -50.94499969]
[185.95373535 -63.80851746]
[193.66929626 -76.67203522]
[201.38485718 -89.53555298]
[209.10041809 -102.39907074]
[212.06246948 -119.09226227]
[228.92324829 -120.86711121]
[235.29627991 -105.15657806]
[221.96394348 -94.68350983]
[214.24838257 -81.81999207]
[206.53280640 -68.95647430]
[198.81724548 -56.09295654]
[191.10168457 -43.22943878]
[191.19039917 -28.33509636]
[177.45674133 -20.48035431]
[169.74118042 -7.61683750]
[162.02561951 5.24668026]
[154.31004333 18.11019707]
[146.59448242 30.97371483]
[138.87892151 43.83723068]
[131.16336060 56.70074844]
[123.44779205 69.56427002]
[134.39079285 91.96584320]
[128.93051147 114.16709137]
[140.49586487 123.71920013]
[152.06121826 133.27130127]
[165.00128174 140.85778809]
[178.98516846 146.28463745]
[192.96907043 151.71150208]
[206.95295715 157.13835144]
[203.69735718 142.49591064]
[212.95486450 130.69343567]
[227.95132446 130.36738586]
[237.71307373 141.75633240]
[235.09696960 156.52642822]
[222.01760864 163.86965942]
[235.38951111 170.66615295]
[248.76142883 177.46263123]
[262.13333130 184.25910950]
[274.96206665 175.81404114]
[290.29553223 174.93078613]
[304.00912476 181.84692383]
[312.41394043 194.70207214]
[313.24914551 210.03823853]
[306.29003906 223.73007202]
[293.40859985 232.09455872]
[278.06991577 232.88166809]
[264.39993286 225.87969971]
[256.07586670 212.97212219]
[255.33685303 197.63101196]
[241.96493530 190.83453369]
[228.59303284 184.03805542]
[215.22113037 177.24156189]
[201.52610779 171.12223816]
[187.54220581 165.69538879]
[173.55831909 160.26853943]
[159.57443237 154.84167480]
[168.55804443 166.85394287]
[172.97996521 181.18734741]
[172.32534790 196.17306519]
[166.67039490 210.06628418]
[156.67352295 221.24940491]
[143.49865723 228.42041016]
[128.67977905 230.74433899]
[113.94223022 227.95063782]
[101.00192261 220.36456299]
[91.36550140 208.86938477]
[86.15493011 194.80346680]
[85.97688293 179.80451965]
[90.85208893 165.61888123]
[100.21292114 153.89817810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[8 59]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[22 45]
[23 44]
[24 43]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[62 76]
[63 75]
[64 74]
[65 73]
[77 107]
[78 106]
[79 105]
[80 104]
[81 103]
[82 102]
[83 101]
[84 100]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
[112 142]
[113 141]
[114 140]
[115 139]
[121 138]
[122 137]
[123 136]
[124 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
