%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUGUUAGCGGGUGGGAGGUGCGGCUGGGUUGCUACAGCCAGAGCUGGGCGGUGGCGGGCGCUGCUGAAGGAGUCUCGCUGAGCUCGAGGAGGUGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[57.67629242 190.52009583]
[61.29813766 205.07627869]
[58.41719055 219.79701233]
[49.57524109 231.91394043]
[36.43510056 239.14834595]
[21.46789932 240.13975525]
[7.48835945 234.70169067]
[-2.87453580 223.85685730]
[-7.67194510 209.64472961]
[-6.00167036 194.73800659]
[1.82251203 181.93971252]
[-8.84017181 193.62808228]
[-23.35611153 190.29089355]
[-37.59341812 195.01309204]
[-51.83072662 199.73527527]
[-62.49340820 211.42364502]
[-77.00934601 208.08645630]
[-83.87341309 222.32234192]
[-98.82067108 227.45603943]
[-112.98318481 220.44184875]
[-117.95857239 205.44114685]
[-110.79504395 191.35359192]
[-95.74257660 186.53707886]
[-81.73154449 193.84915161]
[-72.08720398 182.49855042]
[-56.55291748 185.49797058]
[-42.31560898 180.77578735]
[-28.07830429 176.05358887]
[-18.43396759 164.70298767]
[-2.89968038 167.70240784]
[10.24050903 160.46809387]
[21.84473038 150.96324158]
[25.07961464 144.17463684]
[33.95085526 141.35200500]
[45.83954239 132.20547485]
[57.72822571 123.05892944]
[69.61691284 113.91239166]
[81.50559998 104.76585388]
[83.48262787 90.41184235]
[94.96672058 81.57658386]
[109.34786224 83.34545898]
[121.23654938 74.19892120]
[127.76834106 57.06718063]
[145.14933777 55.24982071]
[156.75355530 45.74497986]
[168.35777283 36.24013519]
[179.96200562 26.73529243]
[191.56622314 17.23044968]
[197.33944702 2.50019550]
[212.08824158 0.42117065]
[223.69245911 -9.08367252]
[235.29669189 -18.58851624]
[246.90090942 -28.09335899]
[258.50512695 -37.59820175]
[263.26593018 -45.59825897]
[270.61126709 -47.20943832]
[282.49993896 -56.35597992]
[294.38861084 -65.50251770]
[293.06430054 -76.38815308]
[296.44296265 -86.73466492]
[303.82473755 -94.62155914]
[313.77368164 -98.61573792]
[324.39669800 -98.03163147]
[333.70370483 -93.04787445]
[346.37841797 -101.06981659]
[351.28588867 -116.34385681]
[366.33782959 -121.89527130]
[379.98770142 -113.46550751]
[381.76446533 -97.52114105]
[370.30514526 -86.29333496]
[354.40036011 -88.39510345]
[341.72564697 -80.37315369]
[339.06768799 -61.22524261]
[323.09686279 -49.81240845]
[303.53515625 -53.61383057]
[291.64648438 -44.46729279]
[279.75778198 -35.32075500]
[268.00997925 -25.99398041]
[256.40576172 -16.48913574]
[244.80152893 -6.98429346]
[233.19731140 2.52054930]
[221.59307861 12.02539253]
[216.64987183 26.07579613]
[201.07106018 28.83467102]
[189.46684265 38.33951569]
[177.86262512 47.84435654]
[166.25839233 57.34920120]
[154.65417480 66.85404205]
[153.10211182 78.95812225]
[143.36306763 86.96246338]
[130.38308716 86.08760834]
[118.49440002 95.23414612]
[116.51737213 109.58815765]
[105.03327942 118.42341614]
[90.65213776 116.65454102]
[78.76345062 125.80107880]
[66.87476349 134.94761658]
[54.98608017 144.09414673]
[43.09739304 153.24069214]
[31.34957314 162.56745911]
[19.74535179 172.07231140]
[34.74354172 172.30538940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 30]
[13 28]
[14 27]
[15 26]
[17 24]
[31 101]
[32 100]
[34 99]
[35 98]
[36 97]
[37 96]
[38 95]
[41 92]
[42 91]
[44 88]
[45 87]
[46 86]
[47 85]
[48 84]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[56 77]
[57 76]
[58 75]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
