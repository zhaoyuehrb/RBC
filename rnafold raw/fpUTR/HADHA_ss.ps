%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCACUCGGCAUCUGGGUUUUAGUCAGGCAGUGCUCCAGGCGCCUGGCUGCCAGGCUACGGGAGAAAAGUCCUCCGCUCGGCCGCACCCGUUAGAGGCGCUCUCCACUGCUGUCCUCUUCAGCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[26.82731628 431.90466309]
[16.40796661 438.48574829]
[4.24639034 439.96438599]
[-1.03385329 454.00427246]
[-6.31409693 468.04418945]
[-3.10632896 484.12655640]
[-15.60701084 494.74093628]
[-30.95651245 488.96817017]
[-33.36458206 472.74679565]
[-20.35400581 462.76394653]
[-15.07376194 448.72402954]
[-9.79351807 434.68414307]
[-20.17970657 420.49902344]
[-20.04577446 402.76260376]
[-9.25853729 388.48706055]
[8.06659031 383.42739868]
[12.66761971 369.15048218]
[17.26865005 354.87353516]
[21.86968040 340.59661865]
[26.47070885 326.31970215]
[31.07173920 312.04278564]
[24.07053757 298.94625854]
[28.53325653 284.40188599]
[42.31755829 277.14718628]
[46.91858673 262.87026978]
[35.86423874 249.19941711]
[35.14764786 231.47697449]
[45.23804092 216.70068359]
[62.30065918 210.81616211]
[66.21189117 196.33506775]
[70.12312317 181.85397339]
[74.03436279 167.37286377]
[77.94559479 152.89176941]
[81.85682678 138.41067505]
[85.76805878 123.92957306]
[76.92053223 115.57275391]
[72.48288727 104.24039459]
[73.30303955 92.09780121]
[79.22428131 81.46511841]
[89.11521912 74.37396240]
[101.08595276 72.17926788]
[105.68698120 57.90234375]
[110.28800964 43.62542343]
[114.88903809 29.34849930]
[119.49006653 15.07157707]
[124.09109497 0.79465389]
[128.69212341 -13.48226929]
[132.42944336 -28.00922585]
[135.28961182 -42.73401260]
[130.32566833 -57.75632477]
[140.34782410 -68.77474976]
[143.20799255 -83.49953461]
[146.06817627 -98.22432709]
[144.23524475 -104.74440002]
[145.80502319 -110.33703613]
[149.43467712 -113.57898712]
[152.99754333 -128.14970398]
[156.56039429 -142.72042847]
[160.12326050 -157.29115295]
[149.03363037 -169.99983215]
[147.68064880 -186.64620972]
[156.39787292 -200.69752502]
[171.60543823 -206.75656128]
[174.81787109 -221.40852356]
[178.03031921 -236.06050110]
[181.24275208 -250.71246338]
[171.55165100 -262.98504639]
[172.06817627 -278.61410522]
[182.54844666 -290.22006226]
[198.04399109 -292.32293701]
[211.23829651 -283.92980957]
[215.90141296 -269.00369263]
[209.83155823 -254.59220886]
[195.89472961 -247.50003052]
[192.68228149 -232.84805298]
[189.46984863 -218.19609070]
[186.25740051 -203.54411316]
[196.04705811 -194.38601685]
[200.04106140 -181.47560120]
[197.08589172 -168.17732239]
[187.85391235 -158.01281738]
[174.69398499 -153.72830200]
[171.13111877 -139.15757751]
[167.56826782 -124.58684540]
[164.00540161 -110.01612091]
[160.79295349 -95.36415100]
[157.93278503 -80.63936615]
[155.07261658 -65.91457367]
[160.24113464 -51.94548035]
[150.01440430 -39.87384033]
[147.15423584 -25.14905167]
[161.08168030 -30.71917725]
[174.23986816 -23.51765823]
[177.05511475 -8.78421116]
[167.47906494 2.76132250]
[152.47912598 2.71858382]
[142.96905518 -8.88123894]
[138.36802673 5.39568377]
[133.76699829 19.67260742]
[129.16595459 33.94952774]
[124.56493378 48.22645187]
[119.96390533 62.50337601]
[115.36286926 76.78029633]
[126.16104889 90.47257233]
[126.69696045 107.90219879]
[116.76038361 122.23200226]
[100.24916077 127.84080505]
[96.33792877 142.32189941]
[92.42669678 156.80300903]
[88.51545715 171.28410339]
[84.60422516 185.76519775]
[80.69299316 200.24630737]
[76.78176117 214.72740173]
[85.91727448 223.42530823]
[90.42410278 235.12890625]
[89.49260712 247.56286621]
[83.36404419 258.33819580]
[73.27220917 265.41125488]
[61.19551086 267.47128296]
[56.59448242 281.74819946]
[63.54893875 295.68640137]
[58.67945862 310.09970093]
[45.34866333 316.64379883]
[40.74763107 330.92074585]
[36.14660263 345.19766235]
[31.54557228 359.47457886]
[26.94454384 373.75149536]
[22.34351349 388.02841187]
[31.05150223 397.15432739]
[34.99201584 409.06054688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[16 128]
[17 127]
[18 126]
[19 125]
[20 124]
[21 123]
[24 120]
[25 119]
[29 113]
[30 112]
[31 111]
[32 110]
[33 109]
[34 108]
[35 107]
[41 103]
[42 102]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
[48 91]
[49 90]
[51 88]
[52 87]
[53 86]
[56 85]
[57 84]
[58 83]
[59 82]
[63 77]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
