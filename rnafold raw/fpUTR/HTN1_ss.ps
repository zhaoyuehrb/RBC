%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCAGCCAUAUAGAAAAGGACAUCUCUUGAGACUUCACUUCAGCUUCACUGACUUCUUGACUCUCCUCUUGAGUAAAAGGACUCAGCCAACU\
) } def
/len { sequence length } bind def

/coor [
[86.12275696 134.44638062]
[78.53598785 130.30555725]
[72.11189270 124.52313232]
[67.19845581 117.41233063]
[64.06182861 109.35832977]
[62.87191391 100.79740143]
[48.11933899 98.08419800]
[33.36676025 95.37098694]
[25.36516571 105.26737976]
[13.94566059 110.71787262]
[1.36502564 110.71495819]
[-9.92032623 105.32206726]
[-17.73397064 95.64889526]
[-20.59914398 83.62370300]
[-35.14014816 79.94141388]
[-48.60705566 87.76957703]
[-63.30124664 83.82807922]
[-70.68121338 70.94120026]
[-85.22221375 67.25891876]
[-99.76322174 63.57663345]
[-108.78793335 71.67342377]
[-120.50294495 74.28860474]
[-131.88220215 70.86816406]
[-140.04557800 62.40164948]
[-142.98774719 51.13970566]
[-157.25360107 46.50445175]
[-173.17315674 50.44143295]
[-184.34590149 38.43720245]
[-179.27828979 22.84068489]
[-163.18342590 19.69624138]
[-152.61834717 32.23860550]
[-138.35249329 36.87385941]
[-122.76620483 27.55608177]
[-104.96156311 32.48019028]
[-96.08093262 49.03562927]
[-81.53993225 52.71791077]
[-66.99892426 56.40019226]
[-54.37496567 48.57899475]
[-39.57586288 52.10620880]
[-31.45786476 65.40041351]
[-16.91686058 69.08269501]
[-4.06963730 57.19952393]
[13.47634792 55.24086761]
[28.89552116 64.15332794]
[36.07997131 80.61841583]
[50.83254623 83.33161926]
[65.58512115 86.04483032]
[79.76501465 68.86037445]
[101.22785950 62.88365555]
[122.24877930 70.26580048]
[135.26193237 88.34983826]
[150.16157532 86.61756897]
[165.06121826 84.88529968]
[179.96086121 83.15303040]
[192.77516174 73.87379456]
[206.31080627 80.08951569]
[221.21044922 78.35724640]
[236.11009216 76.62497711]
[251.00973511 74.89270782]
[265.90936279 73.16043854]
[280.30230713 61.82381439]
[296.14663696 69.16774750]
[310.98083496 66.94379425]
[325.81506348 64.71983337]
[340.64929199 62.49588394]
[348.65890503 49.06532669]
[363.44454956 43.97426605]
[378.02487183 49.62654495]
[385.51550293 63.35332870]
[382.37957764 78.67325592]
[370.09777832 88.35271454]
[354.46923828 87.82136536]
[342.87322998 77.33010101]
[328.03900146 79.55405426]
[313.20480347 81.77800751]
[298.37057495 84.00196075]
[290.82589722 93.61561584]
[278.34185791 95.49145508]
[267.64163208 88.06008148]
[252.74200439 89.79235077]
[237.84236145 91.52462006]
[222.94271851 93.25688934]
[208.04307556 94.98915863]
[196.29450989 104.14449310]
[181.69313049 98.05267334]
[166.79348755 99.78494263]
[151.89384460 101.51721191]
[136.99420166 103.24948120]
[135.24110413 111.71304321]
[131.57904053 119.54213715]
[126.20638275 126.31266022]
[119.41416931 131.65786743]
[111.57032776 135.28822327]
[103.09973145 137.00706482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[14 41]
[15 40]
[18 37]
[19 36]
[20 35]
[25 32]
[26 31]
[51 88]
[52 87]
[53 86]
[54 85]
[56 83]
[57 82]
[58 81]
[59 80]
[60 79]
[62 76]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
