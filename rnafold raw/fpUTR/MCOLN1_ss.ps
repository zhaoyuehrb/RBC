%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGUGACCGAGGCACAGAUCAGCUGAUGCCGGAGGGUUUGAAGCCGCGCCGCGAGGGAGCGAGGUCGCAGUGACAGCGGCGGGCGAUCGGACCCAGGCUGCCCCGCCGUACCCGCCUGCGUCCCGCGCUCCCGCCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[-14.41470051 194.99295044]
[-12.90989208 180.06863403]
[-4.87502241 167.40232849]
[-19.16123962 171.97441101]
[-33.44745636 176.54650879]
[-47.73367691 181.11859131]
[-54.35864639 192.24545288]
[-66.41242981 195.73200989]
[-77.23751068 190.22349548]
[-91.62137604 194.47842407]
[-102.65992737 205.81248474]
[-117.05919647 202.00325012]
[-131.44305420 206.25817871]
[-145.82691956 210.51310730]
[-158.14437866 224.15179443]
[-175.02552795 219.48164368]
[-189.31173706 224.05372620]
[-203.59796143 228.62580872]
[-217.88418579 233.19789124]
[-232.17039490 237.76998901]
[-246.45661926 242.34207153]
[-253.73924255 256.11163330]
[-268.29263306 260.54486084]
[-281.37493896 253.51715088]
[-295.66116333 258.08923340]
[-309.94735718 262.66131592]
[-320.56784058 275.15679932]
[-336.64865112 271.94119263]
[-341.64718628 256.32238770]
[-330.42144775 244.36772156]
[-314.51943970 248.37510681]
[-300.23324585 243.80300903]
[-285.94702148 239.23092651]
[-279.37588501 225.91342163]
[-264.95275879 221.07316589]
[-251.02870178 228.05584717]
[-236.74247742 223.48376465]
[-222.45626831 218.91168213]
[-208.17004395 214.33958435]
[-193.88383484 209.76750183]
[-179.59761047 205.19541931]
[-173.74534607 194.55224609]
[-161.81788635 190.65539551]
[-150.08184814 196.12922668]
[-135.69798279 191.87431335]
[-121.31411743 187.61938477]
[-111.30440521 176.58966064]
[-95.87630463 180.09455872]
[-81.49243927 175.83963013]
[-70.16129303 162.48341370]
[-52.30576324 166.83236694]
[-38.01954651 162.26028442]
[-23.73332596 157.68820190]
[-9.44710827 153.11610413]
[-3.02483678 145.64526367]
[8.07063580 145.28573608]
[21.00535393 137.69013977]
[33.94007492 130.09454346]
[46.87479019 122.49894714]
[59.80950928 114.90335083]
[72.74423218 107.30775452]
[85.67894745 99.71216583]
[92.74674225 87.64825439]
[106.72545624 87.35311890]
[119.66017914 79.75752258]
[128.32818604 63.55261612]
[145.83726501 64.01734161]
[158.60078430 56.13746262]
[171.36430359 48.25758743]
[184.12782288 40.37770844]
[196.89134216 32.49782944]
[209.56692505 24.47724533]
[222.15299988 16.31694031]
[223.10182190 0.94144154]
[232.80880737 -10.79003716]
[247.38995361 -14.51216125]
[261.20156860 -9.00056648]
[273.78762817 -17.16087151]
[286.37371826 -25.32117844]
[298.95980835 -33.48148346]
[311.54586792 -41.64178848]
[324.13195801 -49.80209732]
[336.71804810 -57.96240234]
[349.30410767 -66.12271118]
[361.79916382 -74.42173767]
[374.20162964 -82.85847473]
[381.26022339 -97.01782227]
[396.13537598 -97.77881622]
[408.53784180 -106.21556091]
[409.93112183 -121.79094696]
[421.04650879 -132.79013062]
[436.63571167 -134.01960754]
[449.33792114 -124.89888763]
[453.15557861 -109.73447418]
[446.28610229 -95.68654633]
[431.97305298 -89.38809967]
[416.97457886 -93.81307983]
[404.57211304 -85.37634277]
[398.40063477 -71.82044983]
[382.63836670 -70.45600128]
[370.23590088 -62.01926041]
[366.44458008 -55.60569000]
[357.46441650 -53.53662872]
[344.87835693 -45.37632370]
[332.29226685 -37.21601486]
[319.70617676 -29.05570984]
[307.12011719 -20.89540482]
[294.53402710 -12.73509789]
[281.94793701 -4.57479239]
[269.36187744 3.58551359]
[268.75735474 18.44393158]
[259.40893555 30.23677063]
[244.73748779 34.31129456]
[230.31330872 28.90301895]
[217.72723389 37.06332397]
[213.79495239 43.39145660]
[204.77122498 45.26135254]
[192.00770569 53.14123154]
[179.24418640 61.02110672]
[166.48065186 68.90098572]
[153.71713257 76.78086853]
[150.60198975 88.52062225]
[139.96499634 95.17677307]
[127.25576782 92.69224548]
[114.32105255 100.28783417]
[107.25325775 112.35174561]
[93.27454376 112.64688110]
[80.33982086 120.24247742]
[67.40510559 127.83807373]
[54.47038651 135.43367004]
[41.53566742 143.02926636]
[28.60094833 150.62484741]
[15.66623020 158.22044373]
[30.46300697 160.68122864]
[42.58691025 169.51361084]
[49.46543121 182.84349060]
[49.63905716 197.84248352]
[43.07093811 211.32803345]
[31.15473557 220.43869019]
[16.41888809 223.24131775]
[1.99011588 219.14125061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[6 51]
[9 49]
[10 48]
[12 46]
[13 45]
[14 44]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[24 33]
[25 32]
[26 31]
[56 133]
[57 132]
[58 131]
[59 130]
[60 129]
[61 128]
[62 127]
[64 125]
[65 124]
[67 121]
[68 120]
[69 119]
[70 118]
[71 117]
[72 115]
[73 114]
[77 110]
[78 109]
[79 108]
[80 107]
[81 106]
[82 105]
[83 104]
[84 103]
[85 101]
[86 100]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
