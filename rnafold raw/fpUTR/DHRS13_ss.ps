%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUCCGCCUUCGGAGGCUGACGCGCCCGGGCGCCGUUCCAGGCCUGUGCAGGGCGGAUCGGCAGCCGCCUGGCGGCGAUCCAGGGCGGUGCGGGGCCUGGGCGGGAGCCGGGAGGCGCGGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[82.35995483 544.78765869]
[85.02274323 525.58978271]
[85.39086151 510.59426880]
[85.75897980 495.59878540]
[76.52354431 480.72961426]
[86.11122894 465.06573486]
[86.11122894 450.06573486]
[86.11122894 435.06573486]
[86.11122894 420.06573486]
[85.92715454 405.06686401]
[85.55903625 390.07138062]
[85.19091797 375.07589722]
[84.82279968 360.08041382]
[74.29815674 352.54116821]
[70.00458527 340.12075806]
[73.73541260 327.31637573]
[84.33428955 318.90322876]
[84.33428955 303.90322876]
[84.33428955 288.90322876]
[84.33428955 273.90322876]
[81.57404327 269.88818359]
[81.37972260 264.07482910]
[84.72047424 258.17175293]
[77.61699677 245.08013916]
[86.02211761 231.67625427]
[86.75813293 216.69432068]
[87.49414825 201.71238708]
[88.23016357 186.73045349]
[88.96617889 171.74851990]
[89.70219421 156.76658630]
[90.43820953 141.78465271]
[91.17422485 126.80272675]
[91.91024017 111.82079315]
[85.69330597 99.29715729]
[93.10783386 87.44319153]
[93.84384918 72.46125793]
[94.57986450 57.47932816]
[95.31587982 42.49739838]
[88.26503754 28.33419609]
[96.61751556 16.00190735]
[97.35353088 1.01997459]
[94.62765503 -7.81147480]
[98.29592133 -14.31925011]
[91.59478760 -28.65122223]
[100.24739838 -40.77481842]
[101.35086823 -55.73417282]
[102.45433807 -70.69353485]
[103.55780029 -85.65288544]
[103.55780029 -100.65288544]
[102.45433807 -115.61224365]
[101.35086823 -130.57159424]
[92.61932373 -143.76519775]
[99.39938354 -157.02717590]
[98.29592133 -171.98652649]
[97.19245148 -186.94587708]
[96.08898163 -201.90524292]
[94.98551178 -216.86459351]
[93.88204193 -231.82395935]
[80.62109375 -239.88166809]
[74.66003418 -254.20805359]
[78.29100800 -269.29434204]
[90.11784363 -279.33950806]
[105.59288025 -280.48101807]
[118.76564026 -272.27990723]
[124.57093811 -257.88970947]
[120.77651215 -242.84370422]
[108.84140015 -232.92741394]
[109.94487000 -217.96806335]
[111.04833984 -203.00871277]
[112.15180969 -188.04934692]
[113.25527191 -173.08999634]
[114.35874176 -158.13063049]
[123.01135254 -146.00703430]
[116.31022644 -131.67506409]
[117.41368866 -116.71571350]
[118.51715851 -101.75635529]
[129.59339905 -111.87154388]
[144.58654785 -111.41834259]
[155.03161621 -100.65263367]
[155.03140259 -85.65263367]
[144.58604431 -74.88720703]
[129.59288025 -74.43442535]
[118.51715851 -84.54942322]
[117.41368866 -69.59006500]
[116.31022644 -54.63070679]
[115.20675659 -39.67134857]
[121.98681641 -26.40937042]
[113.25527191 -13.21578217]
[112.33546448 1.75598967]
[111.59944916 16.73792076]
[118.70293427 29.82951355]
[110.29780579 43.23341370]
[109.56179047 58.21534348]
[108.82577515 73.19727325]
[108.08975983 88.17920685]
[114.30669403 100.70284271]
[106.89216614 112.55680847]
[106.15615082 127.53874207]
[105.42013550 142.52067566]
[104.68412018 157.50260925]
[103.94810486 172.48452759]
[103.21208954 187.46646118]
[102.47607422 202.44839478]
[101.74006653 217.43032837]
[101.00405121 232.41226196]
[108.05488586 246.57546997]
[99.70240784 258.90774536]
[99.33428955 273.90322876]
[99.33428955 288.90322876]
[99.33428955 303.90322876]
[99.33428955 318.90322876]
[111.91247559 330.98797607]
[111.91208649 348.09439087]
[99.81828308 359.71231079]
[100.18640137 374.70779419]
[100.55451965 389.70327759]
[100.92263794 404.69876099]
[104.29080200 413.30575562]
[101.11122894 420.06573486]
[101.11122894 435.06573486]
[101.11122894 450.06573486]
[101.11122894 465.06573486]
[109.69800568 474.78228760]
[109.32959747 487.34167480]
[100.75446320 495.96691895]
[100.38634491 510.96240234]
[100.01822662 525.95788574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[6 122]
[7 121]
[8 120]
[9 119]
[10 117]
[11 116]
[12 115]
[13 114]
[17 111]
[18 110]
[19 109]
[20 108]
[23 107]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[35 95]
[36 94]
[37 93]
[38 92]
[40 90]
[41 89]
[43 88]
[45 86]
[46 85]
[47 84]
[48 83]
[49 76]
[50 75]
[51 74]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
