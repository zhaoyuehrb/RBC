%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCCCCGCCCACACGCCGCCUGCCAGGCGUGAGUCUUCCUCCCGCUCUGCGCCGUCGCCCCGCCCACACGCCGCCACCCUCGCGUCAGUUGUCGCUCCGCGCCUGCGCCCGUUGUCUCCCUGCUCGCUCCGGGUCCCGGCGCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[51.67516327 189.69110107]
[48.90848923 205.15280151]
[43.37815094 219.85031128]
[35.26976013 233.29418945]
[24.85474968 245.03704834]
[12.48129940 254.68833923]
[-1.43731844 261.92742920]
[-16.43653297 266.51425171]
[-32.01598740 268.29721069]
[-47.65621948 267.21820068]
[-62.83599854 263.31454468]
[-77.04967499 256.71771240]
[-89.82404327 247.64877319]
[-100.73409271 236.41116333]
[-113.17353821 244.79330444]
[-125.61297607 253.17546082]
[-138.05241394 261.55758667]
[-150.49185181 269.93972778]
[-162.93130493 278.32186890]
[-163.34539795 293.83343506]
[-172.82455444 306.11859131]
[-187.72383118 310.45349121]
[-202.31414795 305.17123413]
[-210.98524475 292.30297852]
[-210.40289307 276.79684448]
[-200.79103088 264.61523438]
[-185.84559631 260.44223022]
[-171.31344604 265.88244629]
[-158.87399292 257.50030518]
[-146.43455505 249.11816406]
[-133.99511719 240.73600769]
[-121.55567932 232.35386658]
[-109.11624146 223.97172546]
[-114.99642944 210.91320801]
[-118.62305450 197.05551147]
[-119.89405060 182.78456116]
[-118.77301025 168.49800110]
[-115.29015350 154.59408569]
[-109.54156494 141.46052551]
[-101.68653870 129.46377563]
[-91.94314575 118.93872833]
[-80.58218384 110.17938995]
[-67.91966248 103.43067932]
[-54.30799866 98.88156891]
[-40.12622833 96.65979767]
[-25.76943016 96.82829285]
[-11.63773441 99.38335419]
[1.87483692 104.25478363]
[14.39135456 111.30774689]
[25.56249237 120.34658051]
[35.07628250 131.12014771]
[47.85364151 123.26272583]
[60.63099670 115.40529633]
[73.40835571 107.54787445]
[68.11256409 89.38967896]
[75.99608612 68.54135895]
[71.09453583 54.36479950]
[59.27250290 43.85052109]
[62.42616272 29.29360962]
[57.52461243 15.11705017]
[43.59015656 8.15510464]
[38.82123566 -6.29176521]
[45.54426193 -19.53323555]
[40.64271164 -33.70979309]
[26.32131577 -40.39359665]
[20.99931717 -55.27485657]
[27.83415985 -69.52478027]
[42.77085495 -74.68915558]
[56.94772339 -67.70403290]
[61.95388412 -52.71356964]
[54.81926727 -38.61134338]
[59.72081757 -24.43478584]
[73.18685913 -18.17369461]
[78.35968018 -3.86647320]
[71.70117188 10.21549988]
[76.60272217 24.39205742]
[88.07416534 33.89233398]
[85.27109528 49.46324921]
[90.17264557 63.63980484]
[97.59324646 64.72822571]
[99.77033234 49.88705444]
[114.61146545 52.06438446]
[112.43445587 66.90505981]
[119.85505676 67.99347687]
[128.62126160 55.82164383]
[137.38746643 43.64980698]
[139.17401123 27.92979240]
[152.89047241 22.12395859]
[153.99752808 5.76222038]
[168.83789062 -1.21600413]
[182.14508057 8.36788368]
[180.22978210 24.65480232]
[165.06231689 30.89016533]
[163.90280151 45.73957062]
[149.55931091 52.41601562]
[140.79310608 64.58785248]
[132.02688599 76.75968933]
[133.05238342 84.30739594]
[132.48716736 91.39933014]
[130.53965759 97.72555542]
[127.47465515 103.03800964]
[141.37721252 108.66996002]
[155.27976990 114.30191803]
[169.18232727 119.93387604]
[183.08486938 125.56583405]
[198.78045654 123.57608032]
[207.67149353 135.52592468]
[223.36708069 133.53617859]
[232.25811768 145.48602295]
[246.16067505 151.11798096]
[260.06323242 156.74993896]
[273.96578979 162.38189697]
[287.86834717 168.01385498]
[302.27743530 162.09645081]
[316.29638672 168.00610352]
[321.84890747 181.77944946]
[335.75146484 187.41140747]
[347.81365967 177.90357971]
[363.01605225 175.71655273]
[377.26925659 181.43861389]
[386.73922729 193.53054810]
[388.87860107 208.73971558]
[383.11187744 222.97491455]
[370.99032593 232.40693665]
[355.77450562 234.49862671]
[341.55746460 228.68731689]
[332.16348267 216.53623962]
[330.11950684 201.31396484]
[316.21694946 195.68200684]
[302.64385986 201.70751953]
[288.46447754 196.19396973]
[282.23638916 181.91639709]
[268.33383179 176.28445435]
[254.43127441 170.65249634]
[240.52871704 165.02053833]
[226.62615967 159.38858032]
[211.92497253 161.78115845]
[202.03953552 149.42848206]
[187.33834839 151.82107544]
[177.45292664 139.46838379]
[163.55036926 133.83642578]
[149.64781189 128.20448303]
[135.74525452 122.57251740]
[121.84269714 116.94055939]
[102.29775238 127.54644012]
[81.26577759 120.32523346]
[68.48842621 128.18266296]
[55.71106720 136.04008484]
[42.93370819 143.89750671]
[48.63851166 158.54421997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[51 149]
[52 148]
[53 147]
[54 146]
[56 79]
[57 78]
[59 76]
[60 75]
[63 72]
[64 71]
[84 97]
[85 96]
[86 95]
[88 93]
[101 144]
[102 143]
[103 142]
[104 141]
[105 140]
[107 138]
[109 136]
[110 135]
[111 134]
[112 133]
[113 132]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
