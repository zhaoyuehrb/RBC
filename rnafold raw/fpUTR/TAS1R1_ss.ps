%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUUAGGAAGCAUCCGGCAGCUGCCUUCUAUUUAAGCAACUGGCCUCCUUAGAGGCCACUCCUUGGCCAUGCCAGGCGCGGGCAUCUGGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[89.93817139 151.83428955]
[71.27598572 144.30537415]
[56.78596497 130.34109497]
[43.40985870 137.12930298]
[38.59967422 149.23121643]
[27.16373062 154.56683350]
[15.56578636 150.73031616]
[1.97687769 157.08181763]
[-11.61203003 163.43331909]
[-20.83774948 176.28619385]
[-35.64396286 174.66592407]
[-49.23287201 181.01742554]
[-62.82178116 187.36892700]
[-65.63655090 202.62857056]
[-76.90630341 213.29496765]
[-92.29759979 215.26669312]
[-105.89216614 207.78555298]
[-112.46261597 193.72821045]
[-109.48247528 178.50000000]
[-98.09767151 167.95648193]
[-82.68589020 166.15184021]
[-69.17327881 173.78001404]
[-55.58437347 167.42851257]
[-41.99546432 161.07701111]
[-33.74171448 148.67843628]
[-17.96353149 149.84440613]
[-4.37462425 143.49290466]
[9.21428394 137.14140320]
[18.35769081 122.25897217]
[36.62165070 123.75318909]
[49.99776077 116.96498871]
[47.91202164 108.65315247]
[47.19828033 100.11340332]
[47.87533188 91.57065582]
[49.92535400 83.24994659]
[53.29433823 75.37042999]
[57.89355087 68.13965607]
[63.60184479 61.74808502]
[70.26886749 56.36406708]
[77.71900940 52.12942123]
[85.75603485 49.15568924]
[94.16824341 47.52119064]
[102.73406219 47.26898956]
[105.63063049 32.55131531]
[108.52719879 17.83364296]
[111.42376709 3.11597061]
[114.32033539 -11.60170174]
[117.21690369 -26.31937408]
[120.11347198 -41.03704834]
[114.30158997 -56.37178040]
[124.88405609 -68.89948273]
[140.97454834 -65.73273468]
[146.02053833 -50.12920761]
[134.83114624 -38.14048004]
[131.93458557 -23.42280579]
[129.03800964 -8.70513344]
[126.14144135 6.01253939]
[123.24487305 20.73021126]
[120.34830475 35.44788361]
[117.45173645 50.16555786]
[131.91529846 57.93519211]
[143.29313660 69.77187347]
[150.48515320 84.53117371]
[152.79598999 100.78607941]
[150.00224304 116.96498871]
[163.37834167 123.75318909]
[176.75445557 130.54139709]
[190.13056946 137.32960510]
[203.50666809 144.11781311]
[216.88278198 150.90600586]
[230.25888062 157.69421387]
[243.84779358 164.04571533]
[257.63525391 169.95385742]
[271.42269897 175.86199951]
[285.21017456 181.77012634]
[299.08502197 174.55746460]
[314.33868408 178.00128174]
[323.76882935 190.47550964]
[322.92285156 206.09017944]
[312.20019531 217.47254944]
[296.66372681 219.24819946]
[283.64935303 210.57872009]
[279.30203247 195.55758667]
[265.51455688 189.64944458]
[251.72711182 183.74131775]
[237.93966675 177.83317566]
[233.08859253 178.82662964]
[227.57873535 176.64376831]
[223.47068787 171.07032776]
[210.09457397 164.28211975]
[196.71846008 157.49391174]
[183.34236145 150.70570374]
[169.96624756 143.91751099]
[156.59014893 137.12930298]
[143.21403503 130.34109497]
[128.72401428 144.30537415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[7 28]
[8 27]
[9 26]
[11 24]
[12 23]
[13 22]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[71 89]
[72 86]
[73 85]
[74 84]
[75 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
