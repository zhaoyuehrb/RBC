%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGGGGCUGGCGGCGGCCGCGGGCGGCGGGCGGCGGAGGUGCGGGGCCUGCUCCCGCCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[73.67716980 309.71340942]
[58.19721603 313.92657471]
[45.33727646 304.33483887]
[44.96239090 288.29617310]
[57.36014175 278.11404419]
[60.15704346 263.37710571]
[54.92856216 249.43035889]
[65.10334778 237.31489563]
[67.90025330 222.57795715]
[70.69715118 207.84101868]
[73.49405670 193.10408020]
[76.29095459 178.36714172]
[79.08785248 163.63020325]
[81.88475800 148.89326477]
[84.68165588 134.15632629]
[82.76645660 126.74223328]
[87.97055817 118.80133057]
[91.45513916 104.21168518]
[89.63606262 98.88231659]
[91.14559174 92.94459534]
[96.01014709 88.45052338]
[100.84561157 74.25128937]
[105.68107605 60.05205154]
[110.51654053 45.85281754]
[115.35200500 31.65358162]
[120.18746948 17.45434570]
[113.46343994 3.40354085]
[118.56955719 -10.92761993]
[132.00628662 -17.25136757]
[136.84175110 -31.45060158]
[133.96618652 -47.00828934]
[145.39326477 -56.56189728]
[150.22872925 -70.76113129]
[141.97520447 -84.04319763]
[144.24134827 -99.51570892]
[155.95715332 -109.87301636]
[171.59077454 -110.22472382]
[183.76049805 -100.40475464]
[186.72015381 -85.04980469]
[179.07228088 -71.41001129]
[164.42796326 -65.92566681]
[159.59249878 -51.72643280]
[162.81391907 -37.18436813]
[151.04100037 -26.61513710]
[146.20552063 -12.41590118]
[152.99015808 0.79410988]
[148.28857422 15.26303673]
[134.38670349 22.28981209]
[129.55123901 36.48904800]
[124.71577454 50.68828201]
[119.88031006 64.88751984]
[115.04484558 79.08675385]
[110.20938110 93.28598785]
[106.04477692 107.69626617]
[102.56019592 122.28591156]
[99.41859436 136.95323181]
[96.62169647 151.69017029]
[93.82479095 166.42710876]
[91.02789307 181.16404724]
[88.23099518 195.90098572]
[85.43408966 210.63792419]
[82.63719177 225.37486267]
[79.84028625 240.11180115]
[84.86871338 255.11264038]
[74.89398193 266.17401123]
[72.09707642 280.91094971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 66]
[6 65]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[17 55]
[18 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[29 45]
[30 44]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
