%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUGUUUCUAUUAGGGCCCGUGGCCAUCAGCGAAGGGUCCGUCCUUCAGCCGUCUUGGGGAGCAAAGCCCGCAAUUUAUGUUUUCCAAGCCACAAAUGGACC\
) } def
/len { sequence length } bind def

/coor [
[148.55461121 129.94882202]
[152.84512329 144.32211304]
[152.36611938 159.31446838]
[147.16682434 173.38455200]
[137.78176880 185.08587646]
[125.17581177 193.21543884]
[110.64493561 196.93746948]
[95.68301392 195.86932373]
[81.82824707 190.12081909]
[70.50500488 180.28291321]
[62.87739944 167.36705017]
[59.72960281 152.70106506]
[61.38523102 137.79270935]
[67.67407990 124.17469025]
[77.94960022 113.24703217]
[91.15388489 106.13371277]
[76.35652161 103.67644501]
[61.55916595 101.21916962]
[46.76180649 98.76190186]
[31.96444893 96.30463409]
[17.16708946 93.84736633]
[2.28584075 99.21942902]
[-9.00198460 89.50169373]
[-23.88323402 94.87375641]
[-35.17105865 85.15602875]
[-49.96841812 82.69876099]
[-63.80160904 90.82417297]
[-78.72692871 84.94077301]
[-83.29495239 69.56180573]
[-74.00147247 56.48468781]
[-57.97566605 55.74107361]
[-47.51115036 67.90139771]
[-32.71379089 70.35866547]
[-18.89094734 64.81085205]
[-6.54471636 74.70433807]
[7.27812624 69.15651703]
[19.62435722 79.05001068]
[34.42171860 81.50727844]
[49.21907425 83.96454620]
[64.01643372 86.42181396]
[78.81379700 88.87908173]
[93.61115265 91.33634949]
[108.55076599 89.99176025]
[122.67156219 84.93180847]
[136.79235840 79.87186432]
[150.91316223 74.81191254]
[151.04306030 59.67227936]
[156.33494568 45.51714325]
[166.13204956 34.04817200]
[179.23721313 26.63706970]
[194.05926514 24.16149902]
[208.80607605 26.90121460]
[221.70133972 34.50656891]
[231.19847107 46.04302597]
[238.36221313 40.10793686]
[245.81806946 41.04982758]
[260.08392334 36.41457367]
[274.34976196 31.77931976]
[288.61560059 27.14406395]
[302.88146973 22.50881004]
[317.14730835 17.87355423]
[331.41314697 13.23830032]
[345.67901611 8.60304546]
[359.94485474 3.96779013]
[374.21069336 -0.66746479]
[388.47653198 -5.30271959]
[389.63430786 -20.45950127]
[396.50866699 -34.01722336]
[408.05130005 -43.90843582]
[422.50204468 -48.62479782]
[437.65728760 -47.44709778]
[451.20596313 -40.55492783]
[461.08197021 -28.99929047]
[465.77932739 -14.54234219]
[464.58169556 0.61134052]
[457.67169189 14.15093136]
[446.10308838 24.01173973]
[431.63995361 28.69006538]
[416.48788452 27.47249794]
[402.95739746 20.54470634]
[393.11181641 8.96312809]
[378.84594727 13.59838295]
[364.58010864 18.23363876]
[350.31427002 22.86889267]
[336.04840088 27.50414848]
[321.78256226 32.13940430]
[307.51672363 36.77465820]
[293.25085449 41.40991211]
[278.98501587 46.04516602]
[264.71917725 50.68042374]
[250.45332336 55.31567764]
[236.25840759 60.16382217]
[236.24964905 75.10655212]
[231.11941528 89.17104340]
[221.46876526 100.65317535]
[208.44769287 108.15471649]
[193.61813354 110.75355530]
[178.76657104 108.11701965]
[165.68887329 100.54431152]
[155.97311401 88.93270874]
[141.85231018 93.99266052]
[127.73151398 99.05261230]
[113.61071777 104.11255646]
[127.87435913 108.75458527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 35]
[25 33]
[26 32]
[43 103]
[44 102]
[45 101]
[46 100]
[54 92]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
