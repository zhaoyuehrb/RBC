%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUUAAAACCGUUCUCCCAUUAAUGCCAAAGCCAGCAGAGGUACCAACUAUAGCUCCACGGCCAGAAGAUACCAGCAGCUCUGCCUUUACUGAAAUUUCAUCUGGAGAAAGGUCCACAGCACA\
) } def
/len { sequence length } bind def

/coor [
[95.89909363 516.15350342]
[82.99330902 508.30386353]
[72.82282257 497.13525391]
[66.21212006 483.55307007]
[63.69709015 468.65841675]
[65.48162079 453.65866089]
[71.42105103 439.76983643]
[81.03389740 428.11779785]
[93.54088593 419.64712524]
[107.92813110 415.04455566]
[107.55416870 400.04919434]
[107.18020630 385.05386353]
[99.12801361 372.52343750]
[106.51885986 358.53466797]
[106.14489746 343.53933716]
[105.77093506 328.54400635]
[105.39698029 313.54864502]
[105.02301788 298.55331421]
[104.64905548 283.55798340]
[89.30258942 275.95538330]
[79.81676483 261.58999634]
[78.84207153 244.31449890]
[86.73190308 228.81593323]
[101.42256165 219.34397888]
[100.30161285 204.38592529]
[99.18066406 189.42787170]
[87.75861359 179.93721008]
[86.40872955 164.78358459]
[96.44083405 152.86744690]
[95.31988525 137.90939331]
[81.18103790 133.23960876]
[69.90192413 123.51873779]
[63.19652176 110.22394562]
[62.08378601 95.37551880]
[66.73281097 81.22983551]
[76.43712616 69.93647003]
[89.72206116 63.21156693]
[88.60110474 48.25350952]
[87.48015594 33.29545212]
[86.35920715 18.33739471]
[85.23825073 3.37933731]
[83.00261688 -11.45312500]
[79.66480255 -26.07704353]
[76.32698822 -40.70096207]
[72.98917389 -55.32488251]
[62.37503815 -67.05734253]
[67.08626556 -81.18722534]
[53.98750687 -89.61695862]
[50.81081390 -104.49523926]
[58.92799377 -116.93094635]
[55.59017944 -131.55487061]
[45.94586182 -136.87643433]
[40.98006058 -146.46046448]
[42.14620972 -156.96911621]
[48.80825806 -164.89280701]
[46.20353699 -179.66493225]
[43.59881592 -194.43704224]
[32.64888763 -206.64488220]
[38.00270462 -222.14547729]
[54.15270996 -224.99316406]
[64.48516846 -212.25846863]
[58.37092972 -197.04176331]
[60.97565460 -182.26965332]
[63.58037567 -167.49754333]
[77.09791565 -153.76185608]
[70.21409607 -134.89268494]
[73.55191040 -120.26876068]
[86.26089478 -112.58648682]
[89.85423279 -97.80329895]
[81.71018219 -84.52503967]
[92.08557892 -73.83857727]
[87.61309814 -58.66269684]
[90.95090485 -44.03877640]
[94.28871918 -29.41485786]
[97.62653351 -14.79093933]
[107.07987213 -26.43716049]
[121.97398376 -28.21630287]
[133.90454102 -19.12444878]
[136.13946533 -4.29187775]
[127.41763306 7.91179895]
[112.66054535 10.60038376]
[100.19631195 2.25838590]
[101.31726074 17.21644211]
[102.43820953 32.17449951]
[103.55916595 47.13255692]
[104.68011475 62.09061432]
[118.81896210 66.76039124]
[130.09808350 76.48126221]
[136.80348206 89.77605438]
[137.91621399 104.62448120]
[133.26719666 118.77016449]
[123.56287384 130.06353760]
[110.27793884 136.78843689]
[111.39889526 151.74649048]
[123.09496307 162.03433228]
[124.01868439 177.21989441]
[114.13871765 188.30691528]
[115.25966644 203.26496887]
[116.38062286 218.22302246]
[128.60459900 222.74957275]
[138.14773560 231.55982971]
[143.59497070 243.29870605]
[144.15722656 256.18063354]
[139.78543091 268.26107788]
[131.17265320 277.73025513]
[119.64439392 283.18402100]
[120.01835632 298.17935181]
[120.39231873 313.17468262]
[120.76627350 328.17004395]
[121.14023590 343.16537476]
[121.51419830 358.16070557]
[129.59313965 371.76370239]
[122.17554474 384.67990112]
[122.54950714 399.67523193]
[122.92346191 414.67059326]
[137.52224731 418.55032349]
[150.43591309 426.38702393]
[160.61761475 437.54541016]
[167.24195862 451.12091064]
[169.77195740 466.01306152]
[168.00248718 481.01458740]
[162.07701111 494.90939331]
[152.47587585 506.57107544]
[139.97741699 515.05426025]
[125.59479523 519.67132568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 115]
[11 114]
[12 113]
[14 111]
[15 110]
[16 109]
[17 108]
[18 107]
[19 106]
[24 99]
[25 98]
[26 97]
[29 94]
[30 93]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[42 75]
[43 74]
[44 73]
[45 72]
[47 70]
[50 67]
[51 66]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
