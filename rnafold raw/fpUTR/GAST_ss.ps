%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAGAGACCUGAGAGGCACCAGGCCCAGCCGUGGCACCACACACCUCCCAGCUCUGCAGACGAG\
) } def
/len { sequence length } bind def

/coor [
[102.72343445 353.86962891]
[101.78553009 338.59286499]
[108.06509399 324.63488770]
[120.11912537 315.20306396]
[117.36288452 300.45846558]
[114.60663605 285.71386719]
[111.85039520 270.96926880]
[109.09415436 256.22467041]
[106.33791351 241.48008728]
[102.68437195 237.93020630]
[101.45387268 231.93193054]
[104.07415009 225.25170898]
[102.69012451 210.31570435]
[101.30609894 195.37968445]
[92.42748260 183.42062378]
[98.85845184 168.96540833]
[97.47442627 154.02938843]
[96.09040070 139.09338379]
[94.70638275 124.15737152]
[85.52239227 121.58581543]
[77.58415985 115.49854279]
[72.23719025 106.49664307]
[70.53974915 95.69207001]
[73.07197571 84.57244873]
[79.80733490 74.79630280]
[73.12125397 61.36885452]
[66.43518066 47.94140244]
[53.96261215 36.45787811]
[61.54460526 21.29378700]
[78.21498108 24.38163376]
[79.86263275 41.25532913]
[86.54870605 54.68277740]
[93.23477936 68.11022949]
[108.23078156 68.45669556]
[115.52984619 55.35235977]
[122.82891083 42.24802399]
[118.26334381 27.11755371]
[125.80737305 13.23003674]
[140.98527527 8.82469082]
[154.79225159 16.51512909]
[159.03688049 31.73875046]
[151.20089722 45.46364975]
[135.93324280 49.54709244]
[128.63418579 62.65142822]
[121.33511353 75.75576019]
[128.14602661 104.55863190]
[109.64239502 122.77334595]
[111.02642059 137.70935059]
[112.41044617 152.64537048]
[113.79446411 167.58137512]
[122.77207947 180.60877991]
[116.24211121 193.99566650]
[117.62613678 208.93167114]
[119.01016235 223.86769104]
[121.08250427 238.72384644]
[123.83875275 253.46844482]
[126.59499359 268.21304321]
[129.35124207 282.95764160]
[132.10748291 297.70223999]
[134.86372375 312.44683838]
[149.51092529 316.88729858]
[160.40866089 327.63430786]
[165.05268860 342.21826172]
[162.37585449 357.28787231]
[152.99327087 369.38024902]
[139.06098938 375.71667480]
[123.78054810 374.84106445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 60]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[12 54]
[13 53]
[14 52]
[16 50]
[17 49]
[18 48]
[19 47]
[25 33]
[26 32]
[27 31]
[34 45]
[35 44]
[36 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
