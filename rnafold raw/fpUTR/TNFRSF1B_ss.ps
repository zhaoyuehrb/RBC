%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGCGCAGCGGAGCCUGGAGAGAAGGCGCUGGGCUGCGAGGGCGCGAGGGCGCGAGGGCAGGGGGCAACCGGACCCCGCCCGCACCC\
) } def
/len { sequence length } bind def

/coor [
[84.83044434 105.94692993]
[69.91261292 104.37899780]
[54.99478912 102.81107330]
[40.96239471 115.27798462]
[22.56591606 113.78258514]
[11.12653351 99.69931030]
[-3.86432862 99.17581940]
[-18.85519028 98.65232849]
[-33.84605408 98.12883759]
[-48.83691406 97.60534668]
[-63.82777786 97.08184814]
[-78.82778168 97.08184814]
[-93.81864166 97.60534668]
[-107.34037781 105.81954956]
[-120.32992554 98.53113556]
[-135.32078552 99.05462646]
[-150.31164551 99.57812500]
[-165.30250549 100.10161591]
[-174.78674316 112.53476715]
[-190.05522156 115.91230774]
[-203.89862061 108.63946533]
[-209.78051758 94.15025330]
[-204.92366028 79.28603363]
[-191.62132263 71.06523895]
[-176.15443420 73.36947632]
[-165.82600403 85.11075592]
[-150.83514404 84.58725739]
[-135.84428406 84.06376648]
[-120.85341644 83.54027557]
[-108.40392303 75.36351013]
[-94.34213257 82.61447906]
[-79.35127258 82.09098816]
[-75.36847687 79.10559845]
[-69.41738129 78.74393463]
[-63.30428696 82.09098816]
[-48.31342316 82.61447906]
[-33.32255936 83.13796997]
[-18.33169937 83.66146851]
[-3.34083629 84.18495941]
[11.65002632 84.70845032]
[18.28249550 75.11473083]
[28.87584496 69.95201874]
[40.76086807 70.65341187]
[50.87750244 77.15739441]
[56.56271362 87.89324188]
[71.48054504 89.46117401]
[86.39836884 91.02909851]
[96.00367737 84.20409393]
[107.69898987 85.64009857]
[115.36785889 94.58610535]
[130.22187805 96.67369843]
[145.07589722 98.76129913]
[159.81858826 93.01991272]
[171.34518433 102.45320129]
[186.19920349 104.54080200]
[192.80064392 102.30612183]
[198.59852600 103.69568634]
[202.00239563 107.32733154]
[216.67460632 110.44600677]
[231.34683228 113.56468201]
[246.01904297 116.68335724]
[255.28944397 115.39839172]
[261.14474487 120.17539978]
[275.69918823 123.80422974]
[290.25360107 127.43305969]
[304.80804443 131.06188965]
[315.96997070 120.41223145]
[331.12191772 117.51019287]
[345.42898560 123.28180695]
[354.32580566 135.88537598]
[354.97348022 151.29913330]
[347.16531372 164.60461426]
[333.39285278 171.55609131]
[318.05084229 169.93536377]
[306.03491211 160.25961304]
[301.17922974 145.61631775]
[286.62478638 141.98748779]
[272.07034302 138.35865784]
[257.51593018 134.72984314]
[242.90036011 131.35557556]
[228.22814941 128.23689270]
[213.55593872 125.11821747]
[198.88372803 121.99954224]
[184.11160278 119.39482117]
[169.25758362 117.30722809]
[155.57734680 123.19792938]
[142.98831177 113.61531830]
[128.13427734 111.52772522]
[113.28026581 109.44012451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 32]
[13 31]
[15 29]
[16 28]
[17 27]
[18 26]
[50 89]
[51 88]
[52 87]
[54 85]
[55 84]
[58 83]
[59 82]
[60 81]
[61 80]
[63 79]
[64 78]
[65 77]
[66 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
