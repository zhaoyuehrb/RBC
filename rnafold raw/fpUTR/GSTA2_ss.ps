%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCCUAACUUGACCCUUCUUUCAGUGGGAGGGAACUAUUGAGAGGAACAAAGAGCUUAUAAAUACAUUAGGACCUGGAAUUCGGUUGUCCAGCCACAAAGGUGACAGCAUUUAACAAAGCUUAGAGAAACCUCCAGGAGACUGCUACC\
) } def
/len { sequence length } bind def

/coor [
[-89.15032959 198.82015991]
[-88.81372833 183.82392883]
[-83.50293732 169.79554749]
[-73.82408142 158.33605957]
[-60.87944794 150.75245667]
[-75.85916138 149.97261047]
[-90.83887482 149.19276428]
[-105.81859589 148.41291809]
[-120.79830933 147.63307190]
[-135.75856018 148.72438049]
[-150.46652222 151.66986084]
[-165.17448425 154.61534119]
[-169.03678894 169.34097290]
[-178.86958313 180.88233948]
[-192.68179321 186.98503113]
[-207.71221924 186.48762512]
[-220.98141479 179.54228210]
[-229.88235474 167.57403564]
[-244.59031677 170.51951599]
[-259.29827881 173.46499634]
[-274.00625610 176.41049194]
[-288.71420288 179.35597229]
[-303.42218018 182.30145264]
[-318.13012695 185.24693298]
[-332.83810425 188.19241333]
[-347.54605103 191.13789368]
[-362.25402832 194.08337402]
[-376.96197510 197.02886963]
[-391.66995239 199.97434998]
[-399.01437378 213.77990723]
[-413.53384399 219.58670044]
[-428.37271118 214.65293884]
[-436.52450562 201.30821228]
[-434.14022827 185.85345459]
[-422.34561157 175.58596802]
[-406.70977783 175.35372925]
[-394.61541748 185.26638794]
[-379.90747070 182.32090759]
[-365.19949341 179.37541199]
[-350.49154663 176.42993164]
[-335.78356934 173.48445129]
[-321.07562256 170.53897095]
[-306.36764526 167.59349060]
[-291.65969849 164.64801025]
[-276.95172119 161.70252991]
[-262.24377441 158.75704956]
[-247.53579712 155.81155396]
[-232.82785034 152.86607361]
[-229.22212219 138.39320374]
[-219.65077209 126.87370300]
[-205.97102356 120.62666321]
[-190.87393188 120.93984985]
[-177.35502625 127.80471039]
[-168.11996460 139.90737915]
[-153.41200256 136.96189880]
[-138.70404053 134.01641846]
[-152.37500000 127.84352112]
[-162.10566711 116.42800140]
[-166.03593445 101.95204926]
[-163.41447449 87.18289948]
[-154.74241638 74.94380188]
[-141.67750549 67.57439423]
[-126.71723175 66.48340607]
[-112.72140503 71.87939453]
[-102.36544800 82.73085785]
[-97.62902069 96.96343231]
[-99.41753387 111.85643005]
[-107.38909149 124.56289673]
[-120.01846313 132.65335083]
[-105.03874969 133.43319702]
[-90.05903625 134.21304321]
[-75.07931519 134.99288940]
[-60.09960556 135.77273560]
[-52.20882797 131.36195374]
[-42.35824203 133.92048645]
[-27.86264420 130.06332397]
[-13.36704731 126.20616913]
[1.12854910 122.34900665]
[15.62414551 118.49184418]
[30.11974144 114.63468933]
[42.70428848 100.00393677]
[62.08980179 105.37516022]
[76.41239929 100.91834259]
[90.73500061 96.46153259]
[84.15518951 77.21900940]
[99.56872559 54.42087555]
[111.64871979 45.52852631]
[123.72870636 36.63617706]
[135.80868530 27.74382591]
[147.88868713 18.85147667]
[159.96867371 9.95912647]
[163.01255798 3.97228289]
[167.90653992 0.92595333]
[172.74124146 0.96055847]
[185.18067932 -7.42158461]
[197.62011719 -15.80372810]
[202.08753967 -31.21222305]
[216.97409058 -37.19303894]
[230.86009216 -29.15820122]
[233.09338379 -13.27135181]
[221.96078491 -1.71952295]
[206.00227356 -3.36428761]
[193.56282043 5.01785564]
[181.12338257 13.39999866]
[168.86102295 22.03911400]
[156.78103638 30.93146515]
[144.70104980 39.82381439]
[132.62104797 48.71616364]
[120.54106903 57.60851288]
[108.46107483 66.50086212]
[111.25353241 81.23932648]
[114.04572296 95.97647858]
[128.54132080 99.83363342]
[143.03692627 103.69079590]
[157.53251648 107.54795074]
[172.02810669 111.40511322]
[185.57389832 103.26341248]
[200.88885498 107.16568756]
[208.88688660 120.79679108]
[204.82290649 136.06962585]
[191.10800171 143.92309570]
[175.87898254 139.69787598]
[168.17095947 125.90071106]
[153.67535400 122.04354858]
[139.17976379 118.18639374]
[124.68416595 114.32923126]
[110.18856812 110.47206879]
[95.19181061 110.78412628]
[80.86921692 115.24094391]
[66.54661560 119.69776154]
[62.01326752 129.67443848]
[52.90474701 135.36112976]
[42.39133453 135.06570435]
[33.97690201 129.13027954]
[19.48130608 132.98744202]
[4.98570871 136.84460449]
[-9.50988770 140.70176697]
[-24.00548553 144.55891418]
[-38.50107956 148.41607666]
[-24.27139282 153.16117859]
[-12.43372917 162.37365723]
[-4.33911943 175.00209045]
[-0.91140187 189.60519409]
[-2.54178071 204.51632690]
[-9.04418182 218.03367615]
[-19.67648506 228.61451721]
[-33.22523117 235.05125427]
[-48.14409637 236.60925293]
[-62.73040009 233.11071777]
[-75.31940460 224.95492554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 73]
[6 72]
[7 71]
[8 70]
[9 69]
[10 56]
[11 55]
[12 54]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[75 139]
[76 138]
[77 137]
[78 136]
[79 135]
[80 134]
[82 130]
[83 129]
[84 128]
[86 110]
[87 109]
[88 108]
[89 107]
[90 106]
[91 105]
[94 104]
[95 103]
[96 102]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
