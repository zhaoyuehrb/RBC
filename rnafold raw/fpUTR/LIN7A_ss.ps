%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGCUCCGCACCGCAACUGAAGAUCUGCCGCCGCGGAACAGUUGCGUCUCCAUCUGGCUACCAACCCACCCAAGCUUUCUUCUCCACCACCACCACCUUCCUUCCUUCCCCCUCCUCCCCCUCCUUUCCGUCUUCCCUCUCCACCCCCGCCCCCAAUCUCCUCCUUUUUUUCUCACUACGAGCGGUUGCUG\
) } def
/len { sequence length } bind def

/coor [
[125.79681396 272.95620728]
[112.58769989 262.32815552]
[119.14376831 246.69311523]
[119.62950134 231.70097351]
[120.11522675 216.70884705]
[120.60095978 201.71670532]
[111.49879456 186.71987915]
[121.32858276 171.15663147]
[121.57147980 156.15859985]
[121.81437683 141.16056824]
[122.05727386 126.16253662]
[115.51206970 122.50052643]
[102.42166138 115.17650604]
[95.87645721 111.51450348]
[83.22196198 119.56830597]
[70.56746674 127.62210846]
[57.91297150 135.67590332]
[45.25847626 143.72970581]
[32.60398102 151.78350830]
[19.94948387 159.83731079]
[7.29498768 167.89111328]
[6.49078989 177.31126404]
[1.50872958 185.18400574]
[-6.42238331 189.80474854]
[-15.45304489 190.24275208]
[-23.54378319 186.52610779]
[-36.57445908 193.95587158]
[-49.60513306 201.38563538]
[-62.63581085 208.81541443]
[-75.66648865 216.24517822]
[-83.47097015 230.66815186]
[-99.86911011 230.85021973]
[-107.99189758 216.60409546]
[-99.48331451 202.58496094]
[-83.09626007 203.21450806]
[-70.06558228 195.78474426]
[-57.03490448 188.35496521]
[-44.00422668 180.92520142]
[-30.97355270 173.49542236]
[-22.17511559 154.83419800]
[-0.75881475 155.23661804]
[11.89568138 147.18281555]
[24.55017662 139.12901306]
[37.20467377 131.07521057]
[49.85916901 123.02141571]
[62.51366425 114.96760559]
[75.16815948 106.91380310]
[87.82265472 98.86000061]
[88.06552124 91.36393738]
[73.09895325 92.36492920]
[58.13239288 93.36591339]
[43.22503662 95.03045654]
[35.52498245 82.15765381]
[44.04231644 69.81037903]
[58.81048203 72.43646240]
[73.68086243 74.40412903]
[88.55124664 76.37180328]
[88.79411316 68.87574005]
[76.68747711 60.01970291]
[64.58084106 51.16366577]
[52.47420502 42.30762863]
[39.28201675 49.91592026]
[24.13510895 51.49423218]
[9.65777493 46.76911926]
[-1.64169955 36.55923462]
[-7.80561209 22.63349915]
[-7.76602793 7.40463495]
[-1.52980494 -6.48886728]
[9.82259369 -16.63987350]
[24.32429504 -21.28966331]
[39.46279144 -19.63262749]
[52.61524963 -11.95586205]
[61.50292587 0.41058961]
[64.58597565 15.32416439]
[61.33024216 30.20099449]
[73.43687439 39.05702972]
[85.54351044 47.91306686]
[97.65014648 56.76910019]
[92.70887756 42.60633850]
[88.57420349 28.18744659]
[85.25926971 13.55832386]
[82.77463531 -1.23446524]
[81.12821198 -16.14383507]
[80.32524109 -31.12232780]
[80.36827850 -46.12226486]
[81.25717926 -61.09590530]
[82.98912048 -75.99558258]
[85.55858612 -90.77387238]
[88.95739746 -105.38373566]
[93.17474365 -119.77866364]
[98.19718933 -133.91284180]
[104.00875092 -147.74128723]
[110.59094238 -161.21995544]
[117.92279053 -174.30598450]
[125.98097992 -186.95768738]
[134.73983765 -199.13481140]
[144.17150879 -210.79858398]
[154.24595642 -221.91188049]
[164.93112183 -232.43934631]
[176.19297791 -242.34744263]
[187.99569702 -251.60466003]
[200.30169678 -260.18151855]
[213.07180786 -268.05068970]
[226.26539612 -275.18716431]
[239.84045410 -281.56823730]
[253.75376892 -287.17355347]
[267.96105957 -291.98529053]
[282.41708374 -295.98815918]
[297.07586670 -299.16937256]
[311.89074707 -301.51882935]
[326.81451416 -303.02905273]
[341.79971313 -303.69525146]
[356.79864502 -303.51525879]
[371.76351929 -302.48965454]
[386.64678955 -300.62176514]
[401.40100098 -297.91744995]
[415.97921753 -294.38540649]
[430.33502197 -290.03680420]
[444.42276001 -284.88549805]
[458.19757080 -278.94790649]
[471.61557007 -272.24291992]
[484.63412476 -264.79190063]
[497.21170044 -256.61853027]
[509.30834961 -247.74884033]
[520.88549805 -238.21107483]
[531.90637207 -228.03558350]
[542.33581543 -217.25474548]
[552.14068604 -205.90287781]
[561.28973389 -194.01612854]
[569.75390625 -181.63233948]
[577.50616455 -168.79090881]
[584.52185059 -155.53271484]
[590.77868652 -141.89996338]
[596.25677490 -127.93604279]
[600.93859863 -113.68540955]
[604.80926514 -99.19342041]
[607.85650635 -84.50620270]
[610.07061768 -69.67051697]
[611.44451904 -54.73356628]
[611.97381592 -39.74290848]
[611.65692139 -24.74625587]
[610.49475098 -9.79134655]
[608.49102783 5.07422066]
[605.65209961 19.80312729]
[601.98706055 34.34848785]
[597.50756836 48.66400909]
[592.22784424 62.70411682]
[586.16473389 76.42412567]
[579.33752441 89.78036499]
[571.76794434 102.73032379]
[563.48010254 115.23277283]
[554.50030518 127.24792480]
[544.85723877 138.73751831]
[534.58154297 149.66500854]
[523.70593262 159.99560547]
[512.26501465 169.69639587]
[500.29522705 178.73654175]
[487.83465576 187.08724976]
[474.92297363 194.72193909]
[461.60128784 201.61631775]
[447.91198730 207.74841309]
[433.89862061 213.09873962]
[419.60583496 217.65025330]
[405.07910156 221.38847351]
[390.36468506 224.30148315]
[375.50939941 226.38002014]
[360.56051636 227.61747742]
[345.56564331 228.00990295]
[330.57250977 227.55606079]
[315.62884521 226.25738525]
[300.78219604 224.11801147]
[286.07983398 221.14474487]
[271.56854248 217.34706116]
[257.29452515 212.73704529]
[243.30319214 207.32936096]
[229.63911438 201.14123535]
[216.34576416 194.19235229]
[203.46546936 186.50483704]
[191.03921509 178.10314941]
[179.10655212 169.01405334]
[167.70547485 159.26647949]
[156.87226868 148.89141846]
[146.64141846 137.92193604]
[137.05529785 126.40543365]
[136.81240845 141.40347290]
[136.56951904 156.40150452]
[136.32661438 171.39953613]
[144.72557068 181.20059204]
[144.20634460 193.69628906]
[135.59309387 202.20243835]
[135.10736084 217.19456482]
[134.62162781 232.18670654]
[134.13591003 247.17883301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 193]
[4 192]
[5 191]
[6 190]
[8 187]
[9 186]
[10 185]
[11 184]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[58 78]
[59 77]
[60 76]
[61 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
