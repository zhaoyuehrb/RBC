%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAGAAUCAGCAGCGCGGGCAAGGAGUACGGACGGGAGUCAGAGGCAGAGCGAGGGUGUGUGGAGGGCCGGCGGGGACCGCCGGGAGCGCGCGG\
) } def
/len { sequence length } bind def

/coor [
[62.20985031 273.62481689]
[59.13486862 288.45126343]
[51.41022110 301.47463989]
[39.87380981 311.28228760]
[25.77702713 316.81036377]
[10.64898109 317.45916748]
[-3.86934805 313.15838623]
[-16.20312119 304.37448120]
[-25.01446342 292.06030273]
[-29.34758759 277.55160522]
[-28.73246574 262.42214966]
[-23.23582268 248.31307983]
[-13.45389462 236.75485229]
[-0.44775051 229.00120544]
[14.37179947 225.89321899]
[29.39724350 227.76799011]
[35.96795654 214.28372192]
[42.53867340 200.79943848]
[49.10938644 187.31517029]
[47.72908020 172.48464966]
[60.72967148 163.46827698]
[67.30039215 149.98399353]
[59.89997101 144.26795959]
[53.48236084 137.46696472]
[48.20484161 129.74769592]
[44.19675827 121.29935455]
[41.55635071 112.32898712]
[40.34832382 103.05645752]
[40.60229111 93.70900726]
[42.31202698 84.51574707]
[45.43562698 75.70198822]
[49.89653397 67.48374176]
[55.58541870 60.06243134]
[45.77920914 48.71173859]
[35.97299576 37.36104965]
[20.31441116 32.48860168]
[16.96921539 16.43426514]
[29.37866020 5.71336460]
[44.77697372 11.35464287]
[47.32368851 27.55483627]
[57.12989807 38.90552902]
[66.93611145 50.25622177]
[76.17604065 45.22698212]
[86.15499878 41.89681625]
[96.56342316 40.36901474]
[107.07845306 40.69097900]
[117.37390900 42.85272217]
[123.50453186 29.16274452]
[129.63516235 15.47276688]
[128.21383667 -0.28446686]
[140.47714233 -8.73790550]
[139.05581665 -24.49514008]
[151.31912231 -32.94857788]
[152.27442932 -49.87559128]
[168.80436707 -53.64348602]
[177.00096130 -38.80258942]
[165.00909424 -26.81795692]
[166.86892700 -12.03992081]
[154.16711426 -2.60728312]
[156.02694702 12.17075253]
[143.32513428 21.60338974]
[137.19450378 35.29336548]
[131.06388855 48.98334503]
[139.55523682 55.24458313]
[146.81253052 62.90213394]
[152.60932922 71.71708679]
[156.76478577 81.41442871]
[159.14926147 91.69161224]
[159.68835449 102.22800446]
[158.36526489 112.69489288]
[172.50624084 117.69818115]
[186.64721680 122.70146179]
[200.78817749 127.70475006]
[214.92915344 132.70803833]
[229.07012939 137.71131897]
[243.21110535 142.71461487]
[260.15991211 142.29771423]
[265.25244141 158.46876526]
[251.12309265 167.83883667]
[238.20780945 156.85559082]
[224.06684875 151.85229492]
[209.92587280 146.84901428]
[195.78489685 141.84571838]
[181.64392090 136.84243774]
[167.50294495 131.83915710]
[153.36198425 126.83586884]
[135.06285095 148.35556030]
[108.92146301 159.05990601]
[80.78466797 156.55470276]
[74.21395111 170.03898621]
[75.12427521 185.83398438]
[62.59366226 193.88587952]
[56.02294922 207.37014771]
[49.45223236 220.85443115]
[42.88151932 234.33869934]
[53.61713791 245.01696777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 95]
[17 94]
[18 93]
[19 92]
[21 90]
[22 89]
[33 42]
[34 41]
[35 40]
[47 63]
[48 62]
[49 61]
[51 59]
[53 57]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
