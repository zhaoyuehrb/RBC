%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCGGGGGCGGAGCAAGGCAAGGAAGCGGAAGCGGAGAGGCGGUCGGGAUCCGCUGCGCGAGCUGUCUCGGUCCCACGUGUGCGAGUUGCUACG\
) } def
/len { sequence length } bind def

/coor [
[164.46565247 307.78109741]
[175.71189880 297.51260376]
[170.93824768 283.29244995]
[165.93496704 269.15148926]
[160.47639465 255.17994690]
[154.79228210 241.29862976]
[148.88415527 227.51116943]
[142.75352478 213.82119751]
[136.62290955 200.13122559]
[130.49227905 186.44123840]
[124.36166382 172.75126648]
[112.09835815 164.29782104]
[113.51967621 148.54058838]
[107.38905334 134.85061646]
[101.25843048 121.16063690]
[88.86092377 118.03544617]
[80.51554871 108.34938812]
[79.25814056 95.62602234]
[85.54613495 84.49381256]
[79.86203003 70.61248779]
[74.17793274 56.73117065]
[59.87709427 50.55672455]
[54.31035233 36.39812088]
[60.28487396 22.80250931]
[44.09517288 16.42287445]
[37.56774521 0.65437698]
[44.24434662 -14.68665886]
[38.11372375 -28.37663460]
[31.98310089 -42.06661224]
[25.85247803 -55.75658798]
[19.72185516 -69.44656372]
[13.59123135 -83.13654327]
[-0.90204614 -88.84466553]
[-6.92435074 -102.81558228]
[-1.39321208 -116.59752655]
[-14.09501934 -126.03016663]
[-12.23519611 -140.80819702]
[-18.36581802 -154.49818420]
[-33.45539093 -158.60169983]
[-42.33447266 -171.47398376]
[-40.81063843 -187.03715515]
[-29.60339546 -197.94273376]
[-14.00445843 -199.04144287]
[-1.37917030 -189.81452942]
[2.31119442 -174.61863708]
[-4.67584181 -160.62879944]
[1.45478082 -146.93882751]
[13.71808529 -138.48538208]
[12.29676437 -122.72814941]
[26.26174545 -117.67692566]
[32.67408752 -103.88067627]
[27.28120804 -89.26716614]
[33.41183090 -75.57718658]
[39.54245377 -61.88721085]
[45.67307663 -48.19723511]
[51.80369949 -34.50725937]
[57.93432236 -20.81728172]
[70.59958649 -17.90471458]
[79.36063385 -8.04254436]
[80.80273438 5.26692295]
[74.16619110 17.11840820]
[87.96028137 22.61919975]
[93.92251587 36.61585999]
[88.05924988 51.04707336]
[93.74334717 64.92839050]
[99.42745209 78.80970764]
[114.73075104 84.75659943]
[121.19747925 99.84759521]
[114.94841003 115.03001404]
[121.07903290 128.71998596]
[127.20965576 142.40997314]
[139.91146851 151.84260559]
[138.05163574 166.62063599]
[144.18226624 180.31062317]
[150.31288147 194.00059509]
[156.44351196 207.69056702]
[162.57412720 221.38055420]
[169.05964661 228.08872986]
[168.67361450 235.61453247]
[174.35771179 249.49584961]
[180.62260437 256.41052246]
[179.99305725 263.91986084]
[186.03076172 271.03378296]
[185.15838623 278.51882935]
[189.93203735 292.73895264]
[205.09622192 294.14157104]
[218.37571716 301.59640503]
[227.46978760 313.81188965]
[230.80282593 328.67156982]
[227.79734802 343.60098267]
[218.97407532 356.01345825]
[205.86170959 363.75851440]
[190.73202515 365.49420166]
[176.20634460 360.91989136]
[164.80133057 350.82803345]
[158.49296570 336.96713257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 85]
[3 84]
[4 82]
[5 80]
[6 79]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[13 71]
[14 70]
[15 69]
[19 66]
[20 65]
[21 64]
[24 61]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[35 49]
[37 47]
[38 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
