%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGGGCCAAGAUGGCGGCGCAGCGCGCGGCGGGGGCGACGGGCGGCGGGGGCCGGGGGGCGGUGGGACGUUGACCCCGCCCCCUGCUGCUGCUAGUCUGCGCCGGGCGGCGGUGGCGGCGGAGACCCGAAC\
) } def
/len { sequence length } bind def

/coor [
[71.54807281 414.38061523]
[63.79653168 400.79946899]
[66.63915253 385.42242432]
[78.73373413 375.51007080]
[78.73373413 360.51007080]
[78.73373413 345.51007080]
[78.73373413 330.51007080]
[67.67868805 326.03509521]
[58.78048706 318.04177856]
[53.11720657 307.46664429]
[51.38581085 295.56100464]
[53.81644440 283.74261475]
[60.14216232 273.42715454]
[69.62802887 265.85842896]
[81.15644836 261.95843506]
[82.20279694 246.99499512]
[75.37215424 233.75898743]
[84.05325317 220.53216553]
[85.09960175 205.56869507]
[78.26895905 192.33270264]
[86.95006561 179.10588074]
[87.99641418 164.14241028]
[89.04275513 149.17895508]
[82.21211243 135.94296265]
[90.89321899 122.71613312]
[91.93956757 107.75267029]
[92.81173706 92.77804565]
[93.50962067 77.79428864]
[86.42275238 63.64908218]
[94.74381256 51.29557419]
[95.44169617 36.31181717]
[96.13957214 21.32806015]
[96.83745575 6.34430408]
[97.53533173 -8.63945293]
[90.44847107 -22.78466225]
[98.76953125 -35.13817215]
[99.46741486 -50.12192917]
[100.16529083 -65.10568237]
[100.86317444 -80.08943939]
[88.04288483 -88.43135834]
[81.16479492 -101.98084259]
[81.98678589 -117.05368805]
[90.18812561 -129.60733032]
[103.48239136 -136.32508850]
[104.18026733 -151.30883789]
[104.87815094 -166.29260254]
[105.57602692 -181.27635193]
[106.27391052 -196.26011658]
[106.97178650 -211.24386597]
[107.66967010 -226.22763062]
[108.36754608 -241.21138000]
[109.06542969 -256.19512939]
[109.76330566 -271.17889404]
[110.46118164 -286.16265869]
[103.37432098 -300.30786133]
[111.69538116 -312.66137695]
[112.39326477 -327.64514160]
[113.09114075 -342.62887573]
[113.78902435 -357.61264038]
[114.48690033 -372.59640503]
[114.83593750 -387.59234619]
[114.83593750 -402.59234619]
[114.83593750 -417.59234619]
[114.83593750 -432.59234619]
[103.48479462 -443.58901978]
[103.31770325 -459.39242554]
[114.43379211 -470.62667847]
[130.23808289 -470.62667847]
[141.35417175 -459.39242554]
[141.18707275 -443.58901978]
[129.83593750 -432.59234619]
[129.83593750 -417.59234619]
[129.83593750 -402.59234619]
[129.83593750 -387.59234619]
[132.58598328 -383.58578491]
[132.78515625 -377.79031372]
[129.47065735 -371.89852905]
[128.77278137 -356.91476440]
[128.07490540 -341.93099976]
[127.37702179 -326.94723511]
[126.67913818 -311.96350098]
[133.81591797 -298.89001465]
[125.44493866 -285.46478271]
[124.74706268 -270.48101807]
[124.04917908 -255.49725342]
[123.35130310 -240.51350403]
[122.65342712 -225.52973938]
[121.95554352 -210.54598999]
[121.25766754 -195.56222534]
[120.55978394 -180.57847595]
[119.86190796 -165.59471130]
[119.16402435 -150.61096191]
[118.46614838 -135.62721252]
[131.07844543 -127.70284271]
[138.07742310 -114.44123077]
[137.49482727 -99.35723114]
[129.38708496 -86.50572205]
[115.84693146 -79.39156342]
[115.14904785 -64.40780640]
[114.45117188 -49.42404938]
[113.75328827 -34.44029236]
[120.89006805 -21.36682129]
[112.51908875 -7.94157314]
[111.82121277 7.04218340]
[111.12332916 22.02593994]
[110.42545319 37.00969696]
[109.72756958 51.99345398]
[116.86435699 65.06692505]
[108.49337769 78.49217224]
[107.79549408 93.47592926]
[110.61640930 101.11198425]
[106.90303040 108.79901886]
[105.85668182 123.76248169]
[112.61248016 138.06875610]
[104.00621796 150.22529602]
[102.95986938 165.18876648]
[101.91352844 180.15222168]
[108.66932678 194.45851135]
[100.06306458 206.61505127]
[99.01671600 221.57850647]
[105.77251434 235.88479614]
[97.16625214 248.04133606]
[96.11991119 263.00479126]
[111.70767212 272.69873047]
[120.25465393 288.84860229]
[119.51058197 307.02136230]
[109.76251984 322.27667236]
[93.73373413 330.51007080]
[93.73373413 345.51007080]
[93.73373413 360.51007080]
[93.73373413 375.51007080]
[105.82831573 385.42242432]
[108.67093658 400.79946899]
[100.91939545 414.38061523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 131]
[5 130]
[6 129]
[7 128]
[15 123]
[16 122]
[18 120]
[19 119]
[21 117]
[22 116]
[23 115]
[25 113]
[26 112]
[27 110]
[28 109]
[30 107]
[31 106]
[32 105]
[33 104]
[34 103]
[36 101]
[37 100]
[38 99]
[39 98]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[50 87]
[51 86]
[52 85]
[53 84]
[54 83]
[56 81]
[57 80]
[58 79]
[59 78]
[60 77]
[61 74]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
