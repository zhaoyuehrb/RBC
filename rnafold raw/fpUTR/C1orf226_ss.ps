%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGGCGGUUCCAGGGUGCACACCACUCCUCGUAGCAGGUCCCCUGUCUUGUGUGCUGUGUCCCCCCGAGGU\
) } def
/len { sequence length } bind def

/coor [
[92.06664276 206.77380371]
[92.06664276 191.77380371]
[92.06664276 176.77380371]
[92.06664276 161.77380371]
[84.32934570 149.04653931]
[92.06664276 135.24636841]
[88.81947327 128.35279846]
[92.39854431 119.61312866]
[93.03516388 104.62664032]
[91.05406952 102.55753326]
[89.75727844 99.69844818]
[89.44064331 96.29652405]
[90.30625916 92.70367432]
[92.42723083 89.34047699]
[95.72628784 86.64887238]
[99.50595856 72.13288116]
[103.28562927 57.61688614]
[102.42261505 48.21226883]
[107.54605103 42.57171631]
[111.93839264 28.22921562]
[116.33073425 13.88671589]
[120.72307587 -0.45578554]
[125.11541748 -14.79828644]
[121.75827789 -30.25921059]
[132.88325500 -40.16294479]
[137.27560425 -54.50544739]
[141.66793823 -68.84794617]
[131.39302063 -76.66822815]
[124.12824249 -87.31291962]
[120.60437012 -99.68328094]
[121.16701508 -112.50845337]
[125.74282837 -124.47605133]
[133.84857178 -134.36639404]
[144.64215088 -141.17687988]
[157.01005554 -144.22355652]
[169.68223572 -143.20979309]
[175.86074829 -156.87821960]
[182.03927612 -170.54666138]
[188.21778870 -184.21508789]
[194.39631653 -197.88351440]
[195.41087341 -214.80706787]
[211.95391846 -218.51707458]
[220.09849548 -203.64756775]
[208.06474304 -191.70498657]
[201.88621521 -178.03656006]
[195.70770264 -164.36813354]
[189.52919006 -150.69970703]
[183.35066223 -137.03128052]
[195.07592773 -124.26627350]
[200.26940918 -107.67630768]
[197.90216064 -90.40284729]
[188.38125610 -75.73618317]
[173.48057556 -66.48868561]
[156.01043701 -64.45560455]
[151.61810303 -50.11310577]
[147.22575378 -35.77060318]
[150.89707947 -21.33555222]
[139.45791626 -10.40594482]
[135.06558228 3.93655610]
[130.67323303 18.27905655]
[126.28089142 32.62155914]
[121.88854980 46.96405792]
[117.80162811 61.39655685]
[114.02195740 75.91255188]
[110.24228668 90.42854309]
[108.02164459 105.26325989]
[107.38502502 120.24974823]
[107.06664276 135.24636841]
[114.80394745 149.04653931]
[107.06664276 161.77380371]
[107.06664276 176.77380371]
[107.06664276 191.77380371]
[107.06664276 206.77380371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[6 68]
[8 67]
[9 66]
[15 65]
[16 64]
[17 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[25 56]
[26 55]
[27 54]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
