%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGGAGCCGGGCUUGCCCGGGCAUGUGGGAGCUGCCGGCUUUCCGGACGCCACGUGCAGACCGGAAGAGACACGCGGGGCUUCAGGCUGCUGCCCCAUUGGAAGAUUACUCCCCAGGCUUCCCUUGCCCCAAGCAGUGAGCUGACUGGA\
) } def
/len { sequence length } bind def

/coor [
[99.47177124 532.24822998]
[98.54228973 517.27703857]
[97.61280823 502.30584717]
[96.68332672 487.33468628]
[95.75384521 472.36352539]
[94.82436371 457.39233398]
[83.52468109 447.75631714]
[82.36878204 432.58666992]
[92.55253601 420.79986572]
[79.90512848 412.97802734]
[74.22145844 399.04388428]
[77.87526703 384.26202393]
[89.66880035 374.35150146]
[88.73931885 359.38031006]
[87.80983734 344.40914917]
[86.88035583 329.43795776]
[85.95087433 314.46679688]
[83.50351715 311.84616089]
[82.23664093 307.88629150]
[82.77635193 303.17062378]
[85.45708466 298.54452515]
[85.45708466 283.54452515]
[85.45708466 268.54452515]
[85.45708466 253.54452515]
[85.45708466 238.54452515]
[77.71978760 225.81724548]
[85.45708466 212.01707458]
[82.29202271 205.28572083]
[85.61530304 196.70787048]
[85.92530823 181.71107483]
[86.23530579 166.71427917]
[86.54531097 151.71748352]
[86.85531616 136.72068787]
[87.16532135 121.72389984]
[87.47531891 106.72710419]
[81.73506927 92.86890411]
[70.91152954 82.48377991]
[55.33544922 82.63702393]
[44.50677872 71.95083618]
[44.45667267 57.10048294]
[33.52638626 46.82775497]
[22.49052811 36.66853333]
[11.45466995 26.50930977]
[0.41881138 16.35008621]
[-10.72144318 6.30544901]
[-21.96490479 -3.62352753]
[-33.20836639 -13.55250454]
[-44.45182800 -23.48148155]
[-59.91750717 -26.81665039]
[-64.33584595 -41.04084015]
[-75.68131256 -50.85309601]
[-87.12757111 -60.54758453]
[-103.17022705 -60.66105270]
[-112.97026062 -73.36297607]
[-109.00992584 -88.90953064]
[-94.32725525 -95.37472534]
[-80.18553925 -87.79901886]
[-77.43308258 -71.99384308]
[-65.98682404 -62.29935837]
[-58.80465317 -60.36409760]
[-54.40687180 -52.28430176]
[-39.74539948 -49.65931702]
[-34.52285004 -34.72494125]
[-23.27938843 -24.79596519]
[-12.03592777 -14.86698914]
[-0.79246670 -4.93801212]
[6.34817457 -2.85473347]
[10.57803535 5.31422710]
[21.61389351 15.47345066]
[32.64975357 25.63267326]
[43.68561172 35.79189682]
[50.78167343 38.02230453]
[54.84180069 46.27693939]
[69.68154144 45.71331406]
[80.80609131 56.09112930]
[81.29666138 71.66023254]
[92.12020111 82.04536438]
[106.94034576 79.72947693]
[114.07955933 66.53736877]
[121.21876526 53.34526062]
[128.35797119 40.15315628]
[135.49719238 26.96105003]
[131.21449280 11.98452377]
[138.64259338 -1.29244673]
[152.94682312 -5.28304338]
[160.08602905 -18.47514915]
[162.30702209 -35.28298950]
[179.07284546 -37.80166626]
[186.13432312 -22.38829994]
[173.27813721 -11.33593845]
[166.13893127 1.85616732]
[170.62179565 16.01383018]
[163.56954956 29.49420357]
[148.68930054 34.10026169]
[141.55007935 47.29236603]
[134.41087341 60.48447418]
[127.27165985 73.67658234]
[120.13245392 86.86868286]
[124.73904419 92.78723907]
[139.59687805 90.72690582]
[133.95223999 104.62434387]
[138.55883789 110.54290009]
[153.09983826 106.86061859]
[167.64083862 103.17833710]
[174.28085327 89.02050018]
[188.48954773 82.49002075]
[203.55799866 86.67039490]
[212.37136841 99.58776855]
[210.76823425 115.14295959]
[199.50555420 125.99127960]
[183.90121460 127.01049042]
[171.32312012 117.71933746]
[156.78211975 121.40161896]
[142.24111938 125.08390808]
[129.35282898 125.23687744]
[117.93049622 121.88601685]
[108.75942993 115.58269501]
[102.47212219 107.03710175]
[102.16211700 122.03389740]
[101.85211182 137.03070068]
[101.54210663 152.02749634]
[101.23210144 167.02429199]
[100.92210388 182.02108765]
[100.61209869 197.01788330]
[100.45708466 212.01707458]
[108.19438934 225.81724548]
[100.45708466 238.54452515]
[100.45708466 253.54452515]
[100.45708466 268.54452515]
[100.45708466 283.54452515]
[100.45708466 298.54452515]
[100.92205048 313.53732300]
[101.85153198 328.50848389]
[102.78101349 343.47967529]
[103.71049500 358.45083618]
[104.63997650 373.42202759]
[117.56880188 381.79766846]
[123.02295685 396.01406860]
[119.10648346 410.54421997]
[107.52370453 419.87036133]
[119.08719635 430.30700684]
[119.81655121 445.50314331]
[109.79553986 456.46286011]
[110.72502136 471.43402100]
[111.65450287 486.40521240]
[112.58398438 501.37637329]
[113.51346588 516.34753418]
[114.44294739 531.31872559]
[123.95278931 544.67889404]
[116.89227295 559.48028564]
[100.52463531 560.49645996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[9 140]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[21 131]
[22 130]
[23 129]
[24 128]
[25 127]
[27 125]
[29 124]
[30 123]
[31 122]
[32 121]
[33 120]
[34 119]
[35 118]
[36 77]
[37 76]
[40 73]
[41 71]
[42 70]
[43 69]
[44 68]
[45 66]
[46 65]
[47 64]
[48 63]
[50 61]
[51 59]
[52 58]
[78 98]
[79 97]
[80 96]
[81 95]
[82 94]
[85 91]
[86 90]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
