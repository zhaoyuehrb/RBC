%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACACAGGGUUUUACGUGCAAGAUCCAGGCUCUGCGUGAUAAGCUGUGGAUCUUCCUGGUUCAGUCUUUCUAUGCUGUUCGUCACACAGAAAGCUGGAAGCUG\
) } def
/len { sequence length } bind def

/coor [
[88.51025391 103.84981537]
[74.38945770 98.78986359]
[60.26866150 93.72991943]
[46.14786530 88.66996765]
[36.84499359 88.70452118]
[31.68417549 83.24165344]
[17.72106934 77.76153564]
[3.75796342 72.28142548]
[-10.20514297 66.80130768]
[-24.16824913 61.32119370]
[-17.21940613 74.61455536]
[-17.06086922 89.61371613]
[-23.72717857 103.05099487]
[-35.76602554 111.99896240]
[-50.55465317 114.50824738]
[-64.87123871 110.03217316]
[-75.59681702 99.54589081]
[-80.39472198 85.33391571]
[-78.21969604 70.49244690]
[-69.54558563 58.25480652]
[-56.26211548 51.28706360]
[-41.26385880 51.10704041]
[-52.70630264 41.40804672]
[-64.14875031 31.70905113]
[-75.59119415 22.01005745]
[-87.03363037 12.31106377]
[-98.47607422 2.61207008]
[-109.91851807 -7.08692408]
[-121.50477600 -16.61366081]
[-133.23225403 -25.96600723]
[-144.95971680 -35.31835556]
[-156.68719482 -44.67070007]
[-170.95487976 -38.98485565]
[-186.15165710 -41.21048355]
[-198.18968201 -50.74891281]
[-203.83078003 -65.03433990]
[-201.55752563 -80.22407532]
[-191.98139954 -92.23213959]
[-177.67835999 -97.82843018]
[-162.49583435 -95.50757599]
[-150.51783752 -85.89386749]
[-144.96641541 -71.57335663]
[-147.33483887 -56.39817429]
[-135.60737610 -47.04582596]
[-123.87989807 -37.69348145]
[-112.15242767 -28.34113312]
[-104.84104156 -26.60316658]
[-100.21952820 -18.52936745]
[-88.77708435 -8.83037376]
[-77.33464050 0.86862040]
[-65.89219666 10.56761456]
[-54.44975281 20.26660919]
[-43.00730896 29.96560287]
[-31.56486511 39.66459656]
[-18.68813324 47.35808563]
[-4.72502756 52.83819962]
[9.23807907 58.31831741]
[23.20118523 63.79843140]
[37.16429138 69.27854919]
[51.20781326 74.54917145]
[65.32861328 79.60911560]
[79.44940948 84.66906738]
[93.57020569 89.72901917]
[107.83605194 94.36427307]
[122.23418427 98.57068634]
[136.63230896 102.77709198]
[143.39833069 101.53379822]
[148.88385010 103.68375397]
[151.75169373 107.68968201]
[165.87249756 112.74963379]
[179.99328613 117.80957794]
[194.11408997 122.86952972]
[208.23487854 127.92948151]
[217.53775024 127.89492798]
[222.69857788 133.35778809]
[236.66168213 138.83790588]
[250.62478638 144.31802368]
[259.92453003 144.56178284]
[264.91961670 150.17658997]
[278.71252441 156.07197571]
[292.50543213 161.96734619]
[305.75650024 153.89334106]
[321.21981812 155.18367004]
[332.94949341 165.34214783]
[336.43518066 180.46264648]
[330.33657837 194.73103333]
[316.99871826 202.66081238]
[301.55029297 201.20281982]
[289.93151855 190.91769409]
[286.61007690 175.76026917]
[272.81713867 169.86488342]
[259.02423096 163.96951294]
[245.14466858 158.28112793]
[231.18156433 152.80101013]
[217.21846008 147.32090759]
[203.17494202 142.05027771]
[189.05413818 136.99032593]
[174.93333435 131.93037415]
[160.81254578 126.87042999]
[146.69174194 121.81047821]
[132.42590332 117.17522430]
[118.02777100 112.96881104]
[103.62963867 108.76240540]
[98.41031647 110.23946381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 46]
[30 45]
[31 44]
[32 43]
[64 103]
[65 102]
[66 101]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
[75 95]
[76 94]
[77 93]
[79 92]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
