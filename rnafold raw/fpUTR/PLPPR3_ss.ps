%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAGACGCGCUUUGUGCUGGGCGCCGGCCGCGCCAGCCACGGCCUGCGGCGCCCGCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[14.06365585 290.92492676]
[7.78275681 304.70275879]
[-2.63329530 315.69296265]
[-16.05464554 322.70339966]
[-31.02544594 324.97360229]
[-45.92177582 322.25735474]
[-59.12779236 314.84924316]
[-69.21100616 303.55291748]
[-75.07766724 289.59362793]
[-76.09140015 274.48565674]
[-72.14225006 259.86776733]
[-63.65858459 247.32559204]
[-51.56064606 238.21961975]
[-37.16073608 233.53759766]
[-22.02084541 233.78741455]
[-7.78323460 238.94194031]
[1.60954332 227.24682617]
[11.00232124 215.55171204]
[20.39509964 203.85659790]
[29.78787804 192.16148376]
[38.60465622 180.02622986]
[46.82484436 167.47917175]
[55.04503250 154.93211365]
[63.26522064 142.38507080]
[71.48540497 129.83801270]
[79.70559692 117.29096222]
[87.92578125 104.74391174]
[95.21553040 91.63439178]
[101.53655243 78.03127289]
[107.85756683 64.42816162]
[114.17858124 50.82504654]
[120.49959564 37.22193146]
[119.29824829 21.44639969]
[131.67829895 13.16487122]
[127.54367065 -2.33624029]
[137.20048523 -15.14738941]
[153.24084473 -15.44095993]
[163.35997009 -2.99174857]
[159.79533386 12.65027428]
[145.28140259 19.48588753]
[146.93487549 34.28842926]
[134.10272217 43.54294586]
[127.78170013 57.14606094]
[121.46067810 70.74917603]
[115.13966370 84.35229492]
[108.81864929 97.95540619]
[109.80647278 102.11804962]
[108.74522400 106.69322968]
[105.50600433 110.65402985]
[100.47283173 112.96409607]
[92.25264740 125.51115417]
[84.03245544 138.05819702]
[75.81227112 150.60525513]
[67.59208679 163.15231323]
[59.37189484 175.69935608]
[51.15170670 188.24641418]
[50.33277893 195.41482544]
[46.40309906 200.15068054]
[41.48299408 201.55426025]
[32.09021378 213.24937439]
[22.69743729 224.94448853]
[13.30465889 236.63960266]
[3.91188073 248.33471680]
[12.01722717 261.12463379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
