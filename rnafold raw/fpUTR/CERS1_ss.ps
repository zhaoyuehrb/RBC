%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGGGGCGCGCGGCUCCGUCGGCUACCGCGGGCGGGCGCAGGCGACGGGCACGGCGGGCGAGCGGGCGGU\
) } def
/len { sequence length } bind def

/coor [
[113.51562500 276.35671997]
[123.93243408 264.85586548]
[120.72962189 250.20178223]
[117.52680969 235.54769897]
[105.67041016 230.06486511]
[99.12324524 218.53483582]
[100.53043365 205.15290833]
[109.59354401 194.94300842]
[107.02414703 180.16470337]
[97.22111511 168.95088196]
[102.48017883 154.02932739]
[99.91078186 139.25103760]
[97.34138489 124.47273254]
[94.45461273 109.75313568]
[90.93724060 95.17135620]
[87.10694122 80.66864014]
[81.73661804 72.89205933]
[83.43820953 65.45938110]
[80.23539734 50.80530548]
[77.03258514 36.15122986]
[73.82977295 21.49715233]
[70.62695312 6.84307384]
[67.42414093 -7.81100321]
[56.91865158 -19.64084816]
[61.75997925 -33.72668457]
[58.55716324 -48.38076401]
[48.00429535 -56.13985825]
[45.76916504 -68.63487244]
[52.53284836 -78.89435577]
[49.96345139 -93.67265320]
[47.39405441 -108.45095825]
[34.32702637 -117.34074402]
[31.45538902 -132.88195801]
[40.48283386 -145.85426331]
[56.05353546 -148.56143188]
[68.92967987 -139.39733887]
[71.47206879 -123.79888916]
[62.17235565 -111.02035522]
[64.74175262 -96.24205017]
[67.31114960 -81.46375275]
[79.28274536 -68.81498718]
[73.21124268 -51.58357620]
[76.41405487 -36.92949677]
[86.69046021 -26.14781189]
[82.07821655 -11.01381683]
[85.28103638 3.64026022]
[88.48384857 18.29433823]
[91.68666077 32.94841385]
[94.88947296 47.60249329]
[98.09228516 62.25656891]
[101.60965729 76.83834076]
[105.43995667 91.34105682]
[110.52317047 97.94115448]
[109.10868835 106.55031586]
[114.13948059 114.55075073]
[112.11968994 121.90333557]
[114.68908691 136.68164062]
[117.25848389 151.45993042]
[127.24530029 163.73078918]
[121.80245209 177.59530640]
[124.37184906 192.37361145]
[138.78387451 202.02375793]
[141.84930420 218.75616455]
[132.18089294 232.34487915]
[135.38369751 246.99896240]
[138.58651733 261.65304565]
[152.85157776 267.75939941]
[160.77410889 281.10156250]
[159.30772400 296.54919434]
[149.01629639 308.16235352]
[133.85705566 311.47558594]
[119.65908051 305.21484375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[8 61]
[9 60]
[11 58]
[12 57]
[13 56]
[14 54]
[15 52]
[16 51]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[25 43]
[26 42]
[29 40]
[30 39]
[31 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
