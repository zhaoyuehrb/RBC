%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACAGAAGACUACUUGGGUUCAUGGUCUCUAAUAUUUCAAACAGGAGCUCCCUUUAGCGAGUCCUUCUUUUCCUGACUGCAGCUCUUUUCAUUUUGCCAUCCUUUUCCAGCUCC\
) } def
/len { sequence length } bind def

/coor [
[28.43456841 383.76882935]
[23.30426598 397.86422729]
[18.17396355 411.95959473]
[25.07945633 426.17544556]
[19.83138847 441.08291626]
[5.54334688 447.83773804]
[-9.30782700 442.43234253]
[-15.91119480 428.07369995]
[-10.34909630 413.28048706]
[4.07857466 406.82931519]
[9.20887661 392.73391724]
[14.33917904 378.63851929]
[3.80542421 364.59423828]
[3.71114182 346.88323975]
[14.27874565 332.47674561]
[31.49760818 327.15554810]
[35.86392212 312.80511475]
[40.23023605 298.45465088]
[44.59654617 284.10421753]
[48.96286011 269.75378418]
[37.69044113 256.29513550]
[36.64562988 238.61474609]
[46.42470551 223.66175842]
[63.33312225 217.42401123]
[66.92285919 202.85987854]
[70.51258850 188.29576111]
[74.10232544 173.73162842]
[77.69206238 159.16749573]
[67.27296448 154.10525513]
[57.95215607 147.22727966]
[50.04243469 138.76440430]
[43.80924606 129.00062561]
[39.46176529 118.26361847]
[37.14589691 106.91369629]
[36.93935394 95.33175659]
[38.84907150 83.90647888]
[42.81095505 73.02128601]
[48.69205475 63.04147720]
[56.29500198 54.30195999]
[65.36465454 47.09602737]
[75.59662628 41.66550827]
[86.64756775 38.19263840]
[98.14659119 36.79396820]
[109.70782471 37.51643753]
[120.94326782 40.33579636]
[127.55500793 26.87158966]
[134.16674805 13.40738487]
[140.77850342 -0.05682124]
[147.39024353 -13.52102757]
[154.00198364 -26.98523331]
[160.61372375 -40.44944000]
[159.75151062 -56.24713135]
[172.30657959 -64.26083374]
[167.43476868 -79.05621338]
[174.33181763 -92.61664581]
[188.46697998 -97.16999817]
[195.07872009 -110.63420105]
[201.69046021 -124.09840393]
[208.30220032 -137.56260681]
[209.30395508 -146.77677917]
[215.27647400 -151.29594421]
[222.24732971 -164.57778931]
[229.21817017 -177.85961914]
[222.22067261 -191.70935059]
[224.73347473 -207.02160645]
[235.79034424 -217.90853882]
[251.13967896 -220.18389893]
[264.87936401 -212.97274780]
[271.72622681 -199.04794312]
[269.04745483 -183.76383972]
[257.87313843 -172.99748230]
[242.50001526 -170.88877869]
[235.52915955 -157.60693359]
[228.55831909 -144.32510376]
[221.76640320 -130.95086670]
[215.15466309 -117.48666382]
[208.54292297 -104.02245331]
[201.93118286 -90.55825043]
[206.97061157 -76.58901215]
[200.45716858 -62.84020615]
[185.77078247 -57.64909363]
[187.10592651 -42.81444931]
[174.07794189 -33.83769608]
[167.46618652 -20.37348938]
[160.85444641 -6.90928316]
[154.24270630 6.55492258]
[147.63096619 20.01912880]
[141.01921082 33.48333359]
[134.40747070 46.94754028]
[148.49925232 59.42587662]
[158.29370117 75.49934387]
[162.92294312 93.74372864]
[161.97680664 112.54245758]
[155.53912354 130.22984314]
[144.18031311 145.23866272]
[128.90684509 156.23905945]
[111.07204437 162.25630188]
[92.25618744 162.75723267]
[88.66645050 177.32136536]
[85.07672119 191.88549805]
[81.48698425 206.44961548]
[77.89724731 221.01374817]
[87.24677277 229.53414917]
[92.00971222 241.17424011]
[91.32275391 253.65953064]
[85.38098907 264.57913208]
[75.38815308 271.85125732]
[63.31330872 274.12008667]
[58.94699478 288.47052002]
[54.58068085 302.82098389]
[50.21436691 317.17141724]
[45.84805298 331.52188110]
[54.72675323 340.53182983]
[58.85802841 352.41079712]
[57.50189209 364.84124756]
[50.98255920 375.42614746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[16 112]
[17 111]
[18 110]
[19 109]
[20 108]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[51 83]
[53 81]
[56 78]
[57 77]
[58 76]
[59 75]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
