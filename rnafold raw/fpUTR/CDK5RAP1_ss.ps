%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCGUUAGCAUGACCCGGCCUGAAGUAGCGGCGGAACGGAAGUCGCUUGUGUAUGAACGCAGCGGCGGACCUGUGAGGGGAUCCGACUUGCCGGCAGAACUUACGCUGCGGGACCCCGGGCACUGUUGCUGCUGCGGGAGACUGUGGGCUGUUUAGUGCC\
) } def
/len { sequence length } bind def

/coor [
[94.13279724 597.48724365]
[86.59715271 610.80914307]
[73.72740173 619.09332275]
[58.48092270 620.43621826]
[44.36123657 614.52917480]
[34.61294937 602.72961426]
[31.47614288 587.74896240]
[35.67163467 573.02972412]
[46.23533249 561.95422363]
[60.73977661 557.06756592]
[63.04344940 542.24548340]
[65.34712982 527.42346191]
[67.65080261 512.60137939]
[55.96289444 503.36785889]
[50.42924118 489.43103027]
[52.62905884 474.49694824]
[62.07062149 462.59091187]
[76.29674530 456.97265625]
[78.60041809 442.15063477]
[80.90409851 427.32858276]
[83.20777130 412.50653076]
[85.51144409 397.68447876]
[87.81512451 382.86242676]
[89.22039032 369.67892456]
[96.17073059 360.17605591]
[105.63710022 356.11224365]
[105.05903625 341.12341309]
[104.48097229 326.13455200]
[103.90290833 311.14569092]
[103.32484436 296.15682983]
[102.74678040 281.16796875]
[102.16871643 266.17910767]
[101.59065247 251.19026184]
[101.01258850 236.20140076]
[100.43452454 221.21253967]
[99.85646057 206.22367859]
[85.70494843 194.66603088]
[84.42502594 176.12062073]
[97.28723145 162.26200867]
[96.13196564 147.30656433]
[94.97669983 132.35112000]
[70.94730377 124.93387604]
[56.16844177 100.07682800]
[62.41702652 67.97328186]
[49.93495178 59.65475464]
[37.45287704 51.33623123]
[24.97080421 43.01770782]
[12.48873138 34.69918442]
[0.00665768 26.38066101]
[-8.91640472 24.20916557]
[-12.63368797 17.77960396]
[-24.95312500 9.22206497]
[-37.27256393 0.66452730]
[-49.59200287 -7.89301062]
[-65.97023010 -8.72111225]
[-73.20030212 -23.44042015]
[-63.84455109 -36.90897369]
[-47.52735901 -35.27147675]
[-41.03446198 -20.21244812]
[-28.71502495 -11.65491009]
[-16.39558792 -3.09737253]
[-4.07615042 5.46016550]
[8.32518101 13.89858818]
[20.80725479 22.21711159]
[33.28932953 30.53563499]
[45.77140427 38.85416031]
[58.25347519 47.17268372]
[70.73554993 55.49120712]
[83.37562561 47.41478729]
[81.07194519 32.59273911]
[78.76827240 17.77069283]
[76.32186890 2.97153378]
[73.73296356 -11.80336285]
[71.14405823 -26.57826042]
[58.89105988 -36.93410492]
[59.49197388 -52.96590042]
[72.48583221 -62.37542343]
[87.90486145 -57.94449615]
[93.92089844 -43.07214355]
[85.91896057 -29.16716385]
[88.50785828 -14.39226723]
[91.09676361 0.38262990]
[95.36920929 6.45746756]
[93.59031677 15.46701717]
[95.89399719 30.28906441]
[98.19766998 45.11111069]
[105.25083923 47.66116333]
[110.33524323 33.54915237]
[115.45118713 19.44854546]
[129.55743408 24.54893303]
[124.47298431 38.66061020]
[119.35718536 52.76126862]
[126.41035461 55.31132126]
[137.66011047 45.38947678]
[142.89212036 30.45841408]
[157.55525208 27.84272575]
[168.80500793 17.92087936]
[180.05476379 7.99903393]
[191.30451965 -1.92281258]
[189.70724487 -17.35746002]
[197.51640320 -30.76629448]
[211.72918701 -36.99334335]
[226.88052368 -33.64418411]
[237.14437866 -22.00663185]
[238.57412720 -6.55556536]
[230.61997986 6.76776552]
[216.34046936 12.84026814]
[201.22636414 9.32694149]
[189.97660828 19.24878693]
[178.72685242 29.17063332]
[167.47711182 39.09247971]
[163.04974365 53.31386566]
[147.58195496 56.63922882]
[136.33219910 66.56107330]
[143.89707947 89.14944458]
[139.68577576 110.52773285]
[126.72167969 125.44521332]
[109.93214417 131.19584656]
[111.08740997 146.15130615]
[112.24268341 161.10675049]
[122.65122986 166.96838379]
[128.85510254 177.03576660]
[129.40072632 188.72827148]
[124.26780701 199.11415100]
[114.84531403 205.64561462]
[115.42338562 220.63447571]
[116.00144958 235.62333679]
[116.57951355 250.61219788]
[117.15757751 265.60104370]
[117.73564148 280.58990479]
[118.31370544 295.57876587]
[118.89176941 310.56762695]
[119.46983337 325.55648804]
[120.04789734 340.54534912]
[120.62596130 355.53417969]
[126.92881775 369.14572144]
[137.98526001 379.28253174]
[149.04171753 389.41934204]
[160.09815979 399.55618286]
[176.21617126 402.57971191]
[181.40071106 418.13775635]
[170.31837463 430.22552490]
[154.36970520 426.40814209]
[149.96134949 410.61260986]
[138.90489197 400.47579956]
[127.84844971 390.33898926]
[116.79200745 380.20217896]
[102.63716888 385.16610718]
[100.33349609 399.98815918]
[98.02981567 414.81021118]
[95.72614288 429.63226318]
[93.42247009 444.45428467]
[91.11878967 459.27633667]
[102.96862030 468.94735718]
[108.35116577 483.15740967]
[105.91452026 498.05468750]
[96.41191101 509.65454102]
[82.47284698 514.90509033]
[80.16917419 529.72711182]
[77.86550140 544.54919434]
[75.56182098 559.37121582]
[87.89888000 568.42968750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 161]
[11 160]
[12 159]
[13 158]
[18 153]
[19 152]
[20 151]
[21 150]
[22 149]
[23 148]
[26 135]
[27 134]
[28 133]
[29 132]
[30 131]
[31 130]
[32 129]
[33 128]
[34 127]
[35 126]
[36 125]
[39 120]
[40 119]
[41 118]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[51 62]
[52 61]
[53 60]
[54 59]
[69 86]
[70 85]
[71 84]
[72 82]
[73 81]
[74 80]
[93 114]
[94 113]
[96 111]
[97 110]
[98 109]
[99 108]
[136 147]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
