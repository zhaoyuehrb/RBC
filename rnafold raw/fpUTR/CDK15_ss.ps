%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGGCAAAAAGGGAGAGAACAAGGAUAGGAGAGGCAGUGGGGGAAAGGUUCAAGUGCGGGUUUUCUCCUUGAACCUACAAGAUU\
) } def
/len { sequence length } bind def

/coor [
[102.68920135 418.51672363]
[99.97921753 403.55929565]
[103.20435333 388.70443726]
[111.87281036 376.21740723]
[124.66270447 368.00234985]
[121.96913147 353.24618530]
[110.13071442 349.56103516]
[100.99168396 341.07437134]
[96.38784790 329.40481567]
[97.28109741 316.81854248]
[103.55913544 305.78915405]
[114.04521179 298.51156616]
[112.42342377 283.59948730]
[110.80163574 268.68743896]
[109.17985535 253.77536011]
[107.55806732 238.86329651]
[105.93627930 223.95121765]
[104.31449890 209.03915405]
[102.69271088 194.12707520]
[101.07093048 179.21501160]
[99.44914246 164.30294800]
[97.82735443 149.39086914]
[86.09355927 140.28848267]
[84.23641205 125.18862152]
[93.86339569 112.94285583]
[85.76002502 101.54869080]
[91.22453308 88.67893219]
[89.60275269 73.76686096]
[77.56835938 63.87690735]
[76.13606262 48.73084641]
[85.63878632 37.31884003]
[84.01700592 22.40677261]
[80.62901306 17.82821083]
[79.61389160 12.89965439]
[80.67198944 8.64855480]
[83.11698914 5.80698586]
[83.11698914 -9.19301414]
[72.22243500 -20.32613945]
[72.43611908 -35.53827286]
[83.11698914 -45.85595322]
[71.76585388 -56.85264587]
[71.59875488 -72.65605164]
[82.71484375 -83.89028931]
[98.51913452 -83.89028931]
[109.63522339 -72.65605164]
[109.46812439 -56.85264587]
[98.11698914 -45.85595322]
[108.79785919 -35.53827286]
[109.01154327 -20.32613945]
[98.11698914 -9.19301414]
[98.11698914 5.80698586]
[98.92906952 20.78498650]
[100.55085754 35.69705582]
[112.28465271 44.79944992]
[114.14180756 59.89930725]
[104.51481628 72.14507294]
[106.13660431 87.05714417]
[114.23997498 98.45130920]
[108.77546692 111.32106781]
[120.80985260 121.21102142]
[122.24214935 136.35708618]
[112.73942566 147.76908875]
[114.36121368 162.68115234]
[115.98299408 177.59323120]
[117.60478210 192.50529480]
[119.22657013 207.41737366]
[120.84835052 222.32943726]
[122.47013855 237.24150085]
[124.09192657 252.15357971]
[125.71370697 267.06564331]
[127.33549500 281.97772217]
[128.95727539 296.88977051]
[144.83171082 305.23773193]
[152.61145020 321.22686768]
[149.43858337 338.56610107]
[136.72529602 350.55261230]
[139.41888428 365.30877686]
[154.28636169 368.47525024]
[166.80751038 377.09436035]
[175.07296753 389.85174561]
[177.82229614 404.80200195]
[174.63624573 419.66528320]
[166.00067139 432.17507935]
[153.23243713 440.42376709]
[138.27859497 443.15341187]
[123.41950226 439.94781494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 77]
[6 76]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[25 59]
[27 57]
[28 56]
[31 53]
[32 52]
[36 51]
[37 50]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
