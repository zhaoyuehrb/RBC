%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUGGCCGGUAUAAAGCACCGUGACCCUCAGGUGACGCACCAGGGCCGGCUGCCGUCGGGGACAGGGCUUUCCAUAGCC\
) } def
/len { sequence length } bind def

/coor [
[145.74847412 161.40989685]
[135.86718750 150.12451172]
[125.98590088 138.83911133]
[115.89280701 127.74273682]
[105.59153748 116.83935547]
[87.57278442 112.66465759]
[83.05784607 94.72813416]
[71.96147156 84.63504028]
[60.86509323 74.54195404]
[49.76871490 64.44886780]
[38.67234039 54.35578156]
[27.57596207 44.26269150]
[16.47958565 34.16960526]
[4.48322392 41.14371490]
[-8.99047184 44.38991928]
[-22.81267548 43.64627838]
[-35.82822418 38.98469925]
[-46.95217133 30.80412865]
[-55.26021194 19.79639626]
[-60.06549072 6.88774538]
[-60.97536850 -6.83912420]
[-57.92350006 -20.23585510]
[-51.17456436 -32.18450165]
[-61.47583389 -43.08789062]
[-71.77710724 -53.99127579]
[-86.87857819 -58.70891571]
[-89.99485779 -73.27387238]
[-100.29613495 -84.17726135]
[-110.59740448 -95.08065033]
[-126.45716858 -99.25194550]
[-130.51298523 -115.14163971]
[-118.59256744 -126.40377808]
[-102.95862579 -121.45283508]
[-99.69401550 -105.38191986]
[-89.39274597 -94.47853088]
[-79.09147644 -83.57514191]
[-64.72682190 -79.63739014]
[-60.87371826 -64.29254913]
[-50.57244873 -53.38916016]
[-40.27117920 -42.48577118]
[-25.51668167 -49.26665878]
[-9.31490421 -50.67982483]
[6.43950176 -46.54296112]
[19.89845085 -37.32378387]
[29.47721291 -24.08721924]
[34.04100800 -8.37240887]
[33.03940582 7.98624897]
[26.57267380 23.07322693]
[37.66905212 33.16631699]
[48.76542664 43.25940323]
[59.86180496 53.35248947]
[70.95818329 63.44557953]
[82.05455780 73.53866577]
[93.15093231 83.63175201]
[103.34784698 82.57527161]
[112.42721558 87.33534241]
[117.35825348 96.32300568]
[116.49492645 106.53808594]
[126.79619598 117.44146729]
[135.18278503 121.66977692]
[137.27128601 128.95782471]
[147.15258789 140.24322510]
[157.03387451 151.52861023]
[165.87799072 150.44860840]
[174.29014587 153.07931519]
[180.79992676 158.87815857]
[184.30368042 166.75627136]
[184.25125122 175.28233337]
[180.73092651 182.94245911]
[188.79707336 195.58909607]
[196.86322021 208.23573303]
[204.92936707 220.88237000]
[220.41299438 224.04977417]
[229.05204773 237.28392029]
[225.72111511 252.73320007]
[212.39637756 261.23184204]
[196.98316956 257.73776245]
[188.62586975 244.32391357]
[192.28273010 228.94850159]
[184.21658325 216.30187988]
[176.15043640 203.65524292]
[168.08430481 191.00860596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 59]
[5 58]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[23 40]
[24 39]
[25 38]
[27 36]
[28 35]
[29 34]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
