%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGUGCUGUCUGUGUACUUCCGGCAGCCUCCAGACAGUUUCUUCCGCUUCCUGUACCACCCGGCUCAAGUAGCGGACACGGAACAGGGAACUAUCAGCCCGUCGGCCUCCGGGCCCUGCAUUCUCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[89.63834381 120.42446899]
[78.84551239 130.84150696]
[77.81938934 143.76129150]
[68.53527832 152.21807861]
[56.38021469 152.04757690]
[52.13209915 160.24435425]
[44.96165466 162.31262207]
[33.68892670 172.20835876]
[22.41619682 182.10409546]
[11.14346886 191.99983215]
[-0.12926021 201.89556885]
[-11.40198898 211.79130554]
[-16.66860962 226.71018982]
[-31.33776855 229.29188538]
[-30.80807877 244.92048645]
[-40.48884201 257.20123291]
[-55.80909729 260.33554077]
[-69.53508759 252.84346008]
[-75.18582153 238.26254272]
[-70.09319305 223.47744751]
[-56.66178894 215.46923828]
[-41.23350525 218.01914978]
[-36.77318192 203.80807495]
[-21.29772568 200.51858521]
[-10.02499580 190.62284851]
[1.24773276 180.72711182]
[12.52046108 170.83137512]
[23.79319000 160.93563843]
[35.06591797 151.03990173]
[46.22098923 141.01171875]
[50.49595261 124.03343201]
[68.42846680 120.04867554]
[79.22129822 109.63163757]
[76.39972687 101.17716980]
[76.99222565 92.00661469]
[81.11844635 83.48667145]
[88.35671234 76.96426392]
[97.77922821 73.55486298]
[108.06875610 73.95589447]
[105.25107574 59.22291183]
[102.43339539 44.48993301]
[99.61571503 29.75695419]
[96.79803467 15.02397442]
[82.91804504 0.49240676]
[89.81559753 -17.51170349]
[86.30530548 -32.09518433]
[82.79501343 -46.67866135]
[79.28471375 -61.26213837]
[75.77442169 -75.84561920]
[72.26412964 -90.42910004]
[61.51216888 -102.03538513]
[66.05619049 -116.21992493]
[55.30422974 -127.82621002]
[59.84825134 -142.01075745]
[56.33795929 -156.59422302]
[43.14055634 -164.86866760]
[39.78836823 -179.70838928]
[47.75811386 -192.23910522]
[44.24782181 -206.82258606]
[32.56624985 -218.33227539]
[36.95446014 -234.13340759]
[52.89823532 -237.97113037]
[63.99598694 -225.89752197]
[58.83129883 -210.33288574]
[62.34159088 -195.74940491]
[75.14041901 -188.21775818]
[78.90809631 -173.47804260]
[70.92143250 -160.10452271]
[74.43173218 -145.52104187]
[84.93260956 -134.95787048]
[80.63967133 -119.73021698]
[91.14054871 -109.16703796]
[86.84761047 -93.93939209]
[90.35790253 -79.35591125]
[93.86819458 -64.77243042]
[97.37848663 -50.18895340]
[100.88877869 -35.60547638]
[104.39907074 -21.02199745]
[113.65629578 -16.42743492]
[118.92169189 -7.27900124]
[118.21562195 3.47410631]
[111.53101349 12.20629406]
[114.34869385 26.93927383]
[117.16637421 41.67225266]
[119.98405457 56.40523148]
[122.80173492 71.13821411]
[132.42846680 82.64151764]
[146.43428040 88.01152802]
[160.44010925 93.38153076]
[174.44592285 98.75154114]
[188.45175171 104.12154388]
[202.45756531 109.49154663]
[212.94673157 98.52554321]
[226.79788208 92.42729187]
[241.88777161 92.09756470]
[255.91627502 97.55547333]
[266.75695801 107.94030762]
[272.77938843 121.64707947]
[273.09436035 136.57456970]
[287.10018921 141.94458008]
[301.10601807 147.31459045]
[315.11184692 152.68458557]
[329.11764526 158.05459595]
[342.05416870 149.48567200]
[357.55520630 150.19079590]
[369.66033936 159.89881897]
[373.71484375 174.87683105]
[368.15972900 189.36544800]
[355.13101196 197.79353333]
[339.63854980 196.92028809]
[327.63943481 187.08152771]
[323.74765015 172.06042480]
[309.74182129 166.69041443]
[295.73599243 161.32040405]
[281.73019409 155.95040894]
[267.72436523 150.58039856]
[257.51040649 161.47096252]
[243.86810303 167.63803101]
[228.86346436 168.11344910]
[214.78201294 162.79365540]
[203.78053284 152.46017456]
[197.55677795 138.66494751]
[197.08757019 123.49736786]
[183.08174133 118.12736511]
[169.07592773 112.75736237]
[155.07009888 107.38735199]
[141.06428528 102.01734924]
[127.05845642 96.64733887]
[125.79441833 106.23901367]
[121.33322144 114.52945709]
[114.41690063 120.52695465]
[106.06611633 123.58927917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[5 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[14 22]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[52 71]
[54 69]
[55 68]
[58 65]
[59 64]
[87 128]
[88 127]
[89 126]
[90 125]
[91 124]
[92 123]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
