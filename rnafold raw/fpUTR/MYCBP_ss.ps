%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAUGAGCAGUGCUGCUCCCAACCCGCCAGUCGCGGUCUCCGGCGCCAGCUACGCCGCUGCCGCUGUCACU\
) } def
/len { sequence length } bind def

/coor [
[107.07513428 160.01979065]
[95.62082672 160.27648926]
[84.32390594 158.36688232]
[73.59037781 154.35958862]
[63.80600357 148.39863586]
[55.32242584 140.69824219]
[48.44454193 131.53518677]
[34.77611542 137.71369934]
[21.10768700 143.89222717]
[7.43926048 150.07073975]
[-6.22916698 156.24925232]
[-15.34834290 169.87910461]
[-31.69163322 168.52674866]
[-38.44646454 153.58337402]
[-28.66404152 140.42144775]
[-12.40768528 142.58082581]
[1.26074183 136.40231323]
[14.92916965 130.22380066]
[28.59759712 124.04527283]
[42.26602554 117.86675262]
[39.75693130 104.81722260]
[40.16043854 91.53478241]
[43.45703888 78.66162109]
[49.48734665 66.82011414]
[57.95981216 56.58277130]
[68.46481323 48.44454193]
[62.28629684 34.77611542]
[56.10778046 21.10768700]
[49.92926025 7.43926048]
[35.48756409 0.45234981]
[32.08657455 -15.22606945]
[42.33524323 -27.56885529]
[58.37166595 -27.10767937]
[67.89407349 -14.19631577]
[63.59768677 1.26074183]
[69.77620697 14.92916965]
[75.95472717 28.59759712]
[82.13324738 42.26602554]
[102.97100067 39.63771057]
[123.44993591 44.29961014]
[141.09672546 55.68869019]
[153.78007507 72.42943573]
[159.96818542 92.50000000]
[174.96818542 92.50000000]
[189.96818542 92.50000000]
[204.96818542 92.50000000]
[219.96818542 92.50000000]
[233.76835632 84.76270294]
[246.49562073 92.50000000]
[261.49563599 92.50000000]
[276.49563599 92.50000000]
[291.49563599 92.50000000]
[302.49230957 81.14886475]
[318.29571533 80.98176575]
[329.52996826 92.09785461]
[329.52996826 107.90214539]
[318.29571533 119.01823425]
[302.49230957 118.85113525]
[291.49563599 107.50000000]
[276.49563599 107.50000000]
[261.49563599 107.50000000]
[246.49562073 107.50000000]
[233.76835632 115.23729706]
[219.96818542 107.50000000]
[204.96818542 107.50000000]
[189.96818542 107.50000000]
[174.96818542 107.50000000]
[159.96818542 107.50000000]
[157.47514343 118.68265533]
[152.91645813 129.19386292]
[146.45597839 138.65585327]
[138.32589722 146.72856140]
[128.81838989 153.12187195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[26 38]
[27 37]
[28 36]
[29 35]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
