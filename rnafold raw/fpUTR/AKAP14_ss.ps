%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAAGAGAAGCUAGCACUUGCAAACAUUCCAUCUGGCAAUCUGAGAGAAGCUACUGAGAGAAUCCUGAGACAUCCCCAGCCACCUACCACUGCUCCUGUUCCAAGCAAAGAAGAUCUGCUCACUCCGGAAAAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[195.98896790 237.38691711]
[210.98222351 236.93708801]
[225.51440430 240.63447571]
[215.08911133 229.84960938]
[204.66381836 219.06474304]
[190.25506592 215.29153442]
[186.22673035 199.99176025]
[175.80143738 189.20689392]
[161.39268494 185.43367004]
[157.36434937 170.13391113]
[146.93905640 159.34904480]
[136.51376343 148.56417847]
[111.61200714 159.63970947]
[84.37395477 158.71592712]
[60.27981567 145.97869873]
[49.14777756 156.03244019]
[44.62126923 171.79450989]
[28.64447594 175.49237061]
[17.65295410 163.32197571]
[22.95383835 147.80319214]
[39.09403610 144.90040588]
[50.22607040 134.84666443]
[46.28695297 128.40145874]
[43.17799377 121.51728821]
[40.94724655 114.30056763]
[39.62918091 106.86282349]
[39.24417496 99.31900787]
[39.79817581 91.78572083]
[41.28262329 84.37938690]
[43.67457199 77.21447754]
[46.93705368 70.40172577]
[51.01964951 64.04643250]
[55.85925674 58.24681091]
[61.38107681 53.09250641]
[53.34939957 40.42395782]
[45.31772614 27.75540733]
[37.28604889 15.08685589]
[19.23335075 14.52234364]
[5.21500778 3.38285160]
[0.66695124 -13.77377605]
[7.21015406 -30.10480309]
[-1.38577640 -42.39748383]
[-9.98170757 -54.69016266]
[-24.23087311 -61.56561661]
[-25.18357849 -76.42971802]
[-33.77951050 -88.72239685]
[-41.32751465 -94.01865387]
[-42.42710114 -101.39143372]
[-50.74303055 -113.87523651]
[-65.98220825 -117.10093689]
[-74.23790741 -129.87974548]
[-71.06878662 -144.38810730]
[-79.38471222 -156.87190247]
[-94.92825317 -159.73092651]
[-103.82864380 -172.79072571]
[-100.80545044 -188.30317688]
[-87.65227509 -197.06498718]
[-72.17266083 -193.87796021]
[-63.55039597 -180.63288879]
[-66.90090942 -165.18783569]
[-58.58498383 -152.70402527]
[-43.97571564 -150.03852844]
[-35.36434555 -137.49664307]
[-38.25922775 -122.19116974]
[-29.94329834 -109.70736694]
[-21.48682976 -97.31832886]
[-12.89089870 -85.02565002]
[0.74342793 -79.02944946]
[2.31097269 -63.28609085]
[10.90690327 -50.99341202]
[19.50283432 -38.70073318]
[31.63433838 -40.28315735]
[43.34634018 -36.50351334]
[52.37000275 -28.02885056]
[56.92950821 -16.44189262]
[56.09132385 -3.94569826]
[49.95459747 7.05518007]
[57.98627472 19.72373009]
[66.01795197 32.39228058]
[74.04962921 45.06083298]
[85.89350128 40.90058517]
[98.33953094 39.26305389]
[110.85643768 40.21813202]
[122.90991974 43.72505569]
[133.98547363 49.63412857]
[143.61033630 57.69311142]
[151.37364197 67.55800629]
[156.94401550 78.80771637]
[160.08367920 90.96204376]
[160.65863037 103.50215912]
[158.64430237 115.89277649]
[154.12667847 127.60500336]
[147.29861450 138.13888550]
[157.72390747 148.92375183]
[168.14920044 159.70861816]
[183.30364990 164.25323486]
[186.58630371 178.78160095]
[197.01159668 189.56646729]
[212.16603088 194.11108398]
[215.44868469 208.63945007]
[225.87397766 219.42431641]
[236.29927063 230.20916748]
[242.65307617 231.29530334]
[247.41595459 234.75251770]
[249.87733459 239.47724915]
[263.71926880 245.25663757]
[277.56118774 251.03601074]
[291.40310669 256.81539917]
[304.04156494 247.96821594]
[319.45776367 247.38121033]
[332.73242188 255.24168396]
[339.62966919 269.04138184]
[337.94857788 284.37689209]
[328.22561646 296.35467529]
[313.56332397 301.15267944]
[298.64041138 297.23989868]
[288.21868896 285.86486816]
[285.62371826 270.65731812]
[271.78179932 264.87792969]
[257.93988037 259.09854126]
[244.09796143 253.31916809]
[252.83811951 265.50973511]
[257.88055420 279.63677979]
[258.83477783 294.60641479]
[255.62695312 309.25939941]
[248.50543213 322.46105957]
[238.02171326 333.18911743]
[224.98757935 340.61285400]
[210.41238403 344.15734863]
[195.42475891 343.54818726]
[181.18530273 338.83248901]
[168.79664612 330.37545776]
[159.21813965 318.83197021]
[153.19151306 305.09591675]
[151.18342590 290.23092651]
[153.34939575 275.38812256]
[159.52168274 261.71688843]
[169.22235107 250.27586365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 102]
[4 101]
[5 100]
[7 98]
[8 97]
[10 95]
[11 94]
[12 93]
[15 22]
[16 21]
[34 80]
[35 79]
[36 78]
[37 77]
[41 71]
[42 70]
[43 69]
[45 67]
[46 66]
[48 65]
[49 64]
[52 61]
[53 60]
[105 121]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
