%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAGGGGGACCGGCCCUGUGACCCCUCACCGGGGGCCGUGGGCCCGAGCCCCCGGACUUCCCUAAGCCGGCA\
) } def
/len { sequence length } bind def

/coor [
[130.74147034 259.57781982]
[126.44489288 245.20634460]
[129.64360046 230.55136108]
[139.53776550 219.27725220]
[153.65342712 214.20301819]
[168.46334839 216.59840393]
[160.16247559 204.10458374]
[151.86160278 191.61076355]
[143.56072998 179.11695862]
[135.25985718 166.62313843]
[120.65380859 163.94001770]
[112.05756378 151.38775635]
[114.97089386 136.08578491]
[106.67001343 123.59197235]
[98.36914062 111.09815216]
[89.80844116 98.78091431]
[80.99166107 86.64566040]
[72.17488098 74.51040649]
[63.10589600 62.56245804]
[53.78868103 50.80705643]
[45.76399612 45.83961868]
[44.33983994 38.35866928]
[36.53020859 33.05955124]
[35.42057037 25.52552605]
[27.11969948 13.03170776]
[18.81882668 0.53788877]
[10.51795292 -11.95592976]
[2.21707916 -24.44974899]
[-12.70441723 -31.25275993]
[-14.00403404 -47.60033035]
[-0.34483567 -56.67547989]
[14.22176456 -49.14247131]
[14.71089745 -32.75062180]
[23.01177025 -20.25680351]
[31.31264496 -7.76298428]
[39.61351776 4.73083401]
[47.91439056 17.22465324]
[56.47509384 29.54189110]
[65.54408264 41.48984146]
[74.86129761 53.24524307]
[81.68368530 56.62871170]
[84.31013489 65.69362640]
[93.12691498 77.82888031]
[101.94369507 89.96414185]
[109.06114197 94.27193451]
[110.86296082 102.79727936]
[119.16383362 115.29109955]
[127.46470642 127.78491974]
[142.69999695 131.02897644]
[150.94027710 143.81773376]
[147.75366211 158.32226562]
[156.05455017 170.81608582]
[164.35542297 183.30989075]
[172.65629578 195.80371094]
[180.95716858 208.29753113]
[191.67425537 218.79248047]
[204.33917236 226.82987976]
[213.55111694 228.88195801]
[217.35629272 235.47843933]
[229.67352295 244.03913879]
[241.99076843 252.59985352]
[258.36877441 253.43215942]
[265.59506226 268.15332031]
[256.23587036 281.61947632]
[239.91909790 279.97778320]
[233.43006897 264.91708374]
[221.11282349 256.35638428]
[208.79559326 247.79568481]
[196.30177307 239.49481201]
[183.63685608 231.45739746]
[186.34205627 246.21145630]
[181.56570435 260.43069458]
[170.50210571 270.55969238]
[155.91761780 274.06579590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[13 48]
[14 47]
[15 46]
[16 44]
[17 43]
[18 42]
[19 40]
[20 39]
[22 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[56 70]
[57 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
