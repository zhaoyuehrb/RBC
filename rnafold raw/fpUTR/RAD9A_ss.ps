%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCGGCAGGGGCGGUGCGCGGGAAGGGACCCCGGACCCGGAGGUCGCGGAGAGCUGGGCAGUGUUGGCCGCUGGCGGAGCGCUGGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[161.97915649 281.79281616]
[148.30372620 276.00335693]
[142.63696289 261.88449097]
[148.80221558 247.57968140]
[143.41110229 233.58197021]
[138.01998901 219.58425903]
[126.22540283 210.48826599]
[128.48580933 194.82936096]
[123.09469604 180.83164978]
[117.70358276 166.83393860]
[105.90900421 157.73794556]
[108.16941071 142.07904053]
[102.77829742 128.08132935]
[97.38717651 114.08362579]
[86.63317108 105.14813995]
[88.61511230 91.30748749]
[82.30109406 77.70112610]
[75.09236145 64.54687500]
[67.88363647 51.39262772]
[54.46630096 43.00897217]
[55.13503265 28.12938690]
[47.92630768 14.97513866]
[40.71757889 1.82088959]
[21.85517120 0.38100225]
[7.62241030 -11.85766792]
[3.43867397 -30.00672722]
[10.76149654 -46.97276688]
[-3.42762256 -53.97129822]
[-4.25163317 -68.84309387]
[-12.74083996 -81.20971680]
[-21.23004532 -93.57633972]
[-29.71925163 -105.94296265]
[-38.41391754 -118.16600800]
[-47.31161499 -130.24205017]
[-56.20930862 -142.31811523]
[-71.44351196 -148.38861084]
[-73.53532410 -164.65380859]
[-60.33285904 -174.38143921]
[-45.41769028 -167.56457520]
[-44.13325882 -151.21580505]
[-35.23556137 -139.13975525]
[-26.33786583 -127.06370544]
[-19.70217896 -123.47420502]
[-17.35262871 -114.43216705]
[-8.86342239 -102.06554413]
[-0.37421608 -89.69892120]
[8.11499023 -77.33229828]
[21.69690514 -71.21830750]
[23.12812042 -55.46197128]
[34.47422791 -57.30144501]
[45.71587372 -54.66669464]
[55.14764404 -47.91670609]
[61.32321548 -38.03781128]
[63.27707672 -26.49971581]
[60.67530060 -15.03689003]
[53.87182999 -5.38783693]
[61.08055496 7.76641226]
[68.28928375 20.92066193]
[81.19100189 28.36343575]
[81.03788757 44.18390274]
[88.24661255 57.33815002]
[95.45533752 70.49240112]
[98.32934570 71.34867859]
[100.99692535 73.51268005]
[102.91042328 76.89559174]
[103.57189178 81.19390869]
[102.61282349 85.91637421]
[113.36682892 94.85186005]
[111.38488770 108.69251251]
[116.77600098 122.69021606]
[122.16712189 136.68792725]
[134.34730530 146.78514099]
[131.70129395 161.44282532]
[137.09240723 175.44053650]
[142.48352051 189.43824768]
[154.66371155 199.53544617]
[152.01770020 214.19314575]
[157.40881348 228.19085693]
[162.79992676 242.18855286]
[176.96784973 248.66218567]
[182.23579407 262.93466187]
[175.97686768 276.40170288]
[181.60113525 290.30737305]
[187.45697021 304.11712646]
[193.31280518 317.92687988]
[199.16865540 331.73663330]
[210.91864014 343.95849609]
[202.42712402 358.63262939]
[185.97576904 354.53518677]
[185.35890198 337.59246826]
[179.50306702 323.78271484]
[173.64723206 309.97296143]
[167.79138184 296.16320801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[4 79]
[5 78]
[6 77]
[8 75]
[9 74]
[10 73]
[12 71]
[13 70]
[14 69]
[16 67]
[17 62]
[18 61]
[19 60]
[21 58]
[22 57]
[23 56]
[27 49]
[29 47]
[30 46]
[31 45]
[32 44]
[33 42]
[34 41]
[35 40]
[83 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
