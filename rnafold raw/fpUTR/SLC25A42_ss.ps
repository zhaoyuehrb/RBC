%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGGGGCCGUGGCGGCUGGAGGUAGCGGCGGCGGCGACGCGUCCGGGCCGGUGAGGGGGCGCGGGGGGCGCCGGGGGGGCCCAAGCGUCAGCGGCCCGCGCCUGUCGGGCUGAACUGAGGACCGAGUCUCCUGCCAUUCCGAGCAGGCCUGGU\
) } def
/len { sequence length } bind def

/coor [
[-111.74113464 335.78570557]
[-123.85871887 344.62673950]
[-130.44665527 359.01110840]
[-145.28863525 360.26211548]
[-157.40621948 369.10314941]
[-169.52380371 377.94418335]
[-172.09629822 393.30712891]
[-184.51119995 402.10058594]
[-199.14157104 399.55343628]
[-211.25915527 408.39447021]
[-223.37673950 417.23553467]
[-235.49432373 426.07656860]
[-247.61192322 434.91760254]
[-254.19984436 449.30197144]
[-269.04183960 450.55297852]
[-281.15942383 459.39401245]
[-287.74734497 473.77835083]
[-302.58932495 475.02935791]
[-314.70690918 483.87039185]
[-326.82449341 492.71145630]
[-338.94207764 501.55249023]
[-345.08386230 516.75811768]
[-361.35867310 518.77374268]
[-371.02438354 505.52584839]
[-364.13772583 490.64276123]
[-347.78314209 489.43490601]
[-335.66555786 480.59387207]
[-323.54797363 471.75280762]
[-311.43035889 462.91177368]
[-305.70916748 449.15979004]
[-290.00045776 447.27642822]
[-277.88287354 438.43536377]
[-272.16168213 424.68338013]
[-256.45297241 422.80001831]
[-244.33537292 413.95898438]
[-232.21778870 405.11795044]
[-220.10020447 396.27688599]
[-207.98260498 387.43585205]
[-205.94291687 372.72613525]
[-193.77990723 363.58746338]
[-178.36485291 365.82659912]
[-166.24726868 356.98556519]
[-154.12966919 348.14453125]
[-148.40847778 334.39251709]
[-132.69976807 332.50915527]
[-120.58217621 323.66812134]
[-108.73537445 314.46740723]
[-97.17002106 304.91528320]
[-85.60467529 295.36318970]
[-74.03932953 285.81109619]
[-62.47397995 276.25897217]
[-50.90863419 266.70687866]
[-40.35522461 256.04733276]
[-30.91930580 244.38700867]
[-21.48338890 232.72666931]
[-19.71047783 225.50831604]
[-11.74014664 220.92990112]
[-2.07280850 209.46069336]
[7.59452963 197.99150085]
[17.26186752 186.52229309]
[26.92920494 175.05310059]
[36.59654236 163.58389282]
[46.26388168 152.11468506]
[48.55042648 137.39663696]
[63.36053467 131.83145142]
[73.02787018 120.36225128]
[82.69520569 108.89305115]
[74.84740448 91.37716675]
[85.77178192 69.42549133]
[84.87186432 54.45251083]
[83.97194672 39.47953033]
[83.07202911 24.50654984]
[74.52073669 11.19543076]
[81.48053741 -1.97310996]
[80.58061981 -16.94609070]
[73.59490967 -32.39394760]
[86.50521851 -43.38304138]
[100.63878632 -34.01935577]
[95.55359650 -17.84600639]
[96.45351410 -2.87302566]
[104.94044495 9.36712646]
[98.04501343 23.60663414]
[98.94493103 38.57961655]
[99.84484100 53.55259705]
[100.74475861 68.52557373]
[107.25241852 72.25389099]
[120.21770477 64.71058655]
[120.26773834 79.71053314]
[126.77540588 83.43885040]
[135.57194519 70.28851318]
[150.42356873 71.41929626]
[163.79547119 64.62281036]
[177.16737366 57.82632828]
[190.53927612 51.02984619]
[203.77252197 43.96717072]
[216.86178589 36.64112473]
[229.95106506 29.31508064]
[243.04032898 21.98903465]
[256.12960815 14.66299057]
[269.21887207 7.33694553]
[282.30816650 0.01090057]
[295.32348633 -7.44573450]
[302.95333862 -21.96183586]
[319.34808350 -22.34177780]
[327.64221191 -8.19470596]
[319.30340576 5.92608261]
[302.90994263 5.49433231]
[298.70672607 11.62465191]
[289.63418579 13.10017395]
[276.54492188 20.42621803]
[263.45565796 27.75226402]
[250.36637878 35.07830811]
[237.27711487 42.40435410]
[224.18783569 49.73039627]
[211.09855652 57.05644226]
[208.95184326 61.37966537]
[204.03778076 64.37241364]
[197.33575439 64.40174866]
[183.96385193 71.19823456]
[170.59194946 77.99471283]
[157.22004700 84.79119873]
[149.37995911 97.45540619]
[133.57188416 96.81075287]
[116.72850037 120.66794586]
[94.16441345 118.56038666]
[84.49707031 130.02958679]
[74.82973480 141.49879456]
[71.85171509 157.03720093]
[57.73308182 161.78202820]
[48.06574631 173.25123596]
[38.39840698 184.72042847]
[28.73106956 196.18963623]
[19.06373024 207.65882874]
[9.39639282 219.12803650]
[-0.27094537 230.59724426]
[-9.82305145 242.16258240]
[-19.25896835 253.82292175]
[-28.69488716 265.48324585]
[-14.06518173 262.17089844]
[0.29941550 266.49041748]
[10.67585373 277.32229614]
[14.37474060 291.85910034]
[10.43739128 306.33309937]
[-0.11570308 316.99295044]
[-14.54936600 321.07577515]
[-29.12264442 317.52337646]
[-40.05839920 307.25646973]
[-44.52227402 292.93606567]
[-41.35652542 278.27221680]
[-52.92187500 287.82431030]
[-64.48722076 297.37643433]
[-76.05257416 306.92852783]
[-87.61791992 316.48065186]
[-99.18326569 326.03274536]
[-101.03865051 331.03167725]
[-104.31982422 334.44485474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[4 43]
[5 42]
[6 41]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[15 32]
[16 31]
[18 29]
[19 28]
[20 27]
[21 26]
[47 154]
[48 153]
[49 152]
[50 151]
[51 150]
[52 149]
[53 138]
[54 137]
[55 136]
[57 135]
[58 134]
[59 133]
[60 132]
[61 131]
[62 130]
[63 129]
[65 127]
[66 126]
[67 125]
[69 85]
[70 84]
[71 83]
[72 82]
[74 80]
[75 79]
[89 123]
[91 121]
[92 120]
[93 119]
[94 118]
[95 115]
[96 114]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
