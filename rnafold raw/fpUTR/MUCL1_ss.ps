%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGCCUUGCCUUCUCUUAGGCUUUGAAGCAUUUUUGUCUGUGCUCCCUGAUCUUCAGGUCACCACC\
) } def
/len { sequence length } bind def

/coor [
[73.90991211 115.79576874]
[59.56201553 120.17045593]
[45.21411896 124.54515076]
[34.27044296 135.97084045]
[19.83992004 132.28176880]
[5.49202490 136.65646362]
[-8.85587025 141.03114319]
[-23.20376587 145.40583801]
[-25.99219131 160.45520020]
[-35.46411514 172.47772217]
[-49.44296646 178.71073914]
[-64.71649933 177.72192383]
[-77.77497101 169.73851013]
[-85.61764526 156.59503174]
[-86.44232178 141.31175232]
[-80.05950165 127.40066528]
[-67.93591309 118.05844116]
[-52.85746765 115.43184662]
[-38.28907776 120.12445068]
[-27.57845497 131.05793762]
[-13.23055935 126.68325043]
[1.11733556 122.30856323]
[15.46523094 117.93387604]
[25.38265038 106.82108307]
[40.83943176 110.19725037]
[55.18732452 105.82256317]
[69.53521729 101.44787598]
[78.18975830 78.68070221]
[100.75402069 69.51015472]
[104.80097198 55.06639481]
[108.84792328 40.62263870]
[112.89487457 26.17887878]
[116.94182587 11.73511887]
[107.20925903 -0.35027412]
[106.47268677 -15.84985733]
[115.01534271 -28.80372620]
[129.55239868 -34.23085022]
[144.49404907 -30.04439545]
[154.09495544 -17.85413361]
[154.66333008 -2.34747148]
[145.98066711 10.51296329]
[131.38558960 15.78207016]
[127.33863831 30.22583008]
[123.29168701 44.66959000]
[119.24473572 59.11334991]
[115.19778442 73.55710602]
[126.05908203 84.15312195]
[130.47021484 98.67156219]
[145.15647888 101.72340393]
[159.84274292 104.77524567]
[174.52900696 107.82708740]
[189.21527100 110.87892151]
[205.95327759 108.18161774]
[213.17871094 123.51880646]
[200.44110107 134.70762634]
[186.16342163 125.56518555]
[171.47717285 122.51334381]
[156.79090881 119.46150970]
[142.10464478 116.40966797]
[127.41838074 113.35782623]
[123.94888306 118.88518524]
[119.38288116 123.54788971]
[113.92943573 127.13245392]
[107.83823395 129.47476196]
[101.38816071 130.46755981]
[94.87452698 130.06539917]
[88.59555817 128.28671265]
[82.83875275 125.21290588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[5 23]
[6 22]
[7 21]
[8 20]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
