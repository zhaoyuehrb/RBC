%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGAUUAAAUGGGGCAAAGAGAUAUUAUUUCUAAUGUUUCUUUUUCUCCCUGAGUGAAGAUCCUGAAUCUGAAGACACAUUCAUCAGUC\
) } def
/len { sequence length } bind def

/coor [
[151.86753845 189.05024719]
[149.43643188 174.08439636]
[153.76176453 159.48806763]
[142.70747375 149.34890747]
[131.65316772 139.20976257]
[120.59886932 129.07060242]
[109.54457092 118.93144989]
[93.17671204 120.07340240]
[80.89541626 109.19311523]
[80.05611420 92.80695343]
[68.65843201 83.05538940]
[56.77128220 73.90686035]
[44.42652512 65.38588715]
[32.08176804 56.86491776]
[19.73700905 48.34394836]
[-0.27050138 47.84894943]
[-8.22626781 30.36673164]
[-21.12948227 22.71774292]
[-34.03269958 15.06875324]
[-46.93591309 7.41976452]
[-59.83913040 -0.22922461]
[-72.74234772 -7.87821388]
[-85.64556122 -15.52720261]
[-98.54877472 -23.17619133]
[-111.45198822 -30.82518005]
[-124.35520935 -38.47417068]
[-137.25842285 -46.12315750]
[-150.16163635 -53.77214813]
[-166.55699158 -53.41970825]
[-174.82737732 -67.58067322]
[-166.46492004 -81.68745422]
[-150.07220459 -81.22820282]
[-142.51264954 -66.67536163]
[-129.60943604 -59.02637482]
[-116.70621490 -51.37738419]
[-103.80300140 -43.72839737]
[-90.89978790 -36.07940674]
[-77.99656677 -28.43041801]
[-65.09335327 -20.78142929]
[-52.19013977 -13.13243961]
[-39.28692627 -5.48345089]
[-26.38370895 2.16553807]
[-13.48049355 9.81452751]
[-0.57727849 17.46351624]
[9.31381416 14.00033474]
[19.66371536 16.72341919]
[26.86292076 24.94012833]
[28.25798035 35.99918747]
[40.60273743 44.52016068]
[52.94749451 53.04113007]
[65.29225159 61.56210327]
[69.00371552 61.17420578]
[73.08205414 62.70866394]
[76.55088043 66.31260681]
[78.40999603 71.65771484]
[89.80767059 81.40927124]
[102.36417389 78.93084717]
[114.05912018 84.13053894]
[120.63056946 95.11345673]
[119.68373108 107.87715149]
[130.73802185 118.01630402]
[141.79232788 128.15545654]
[152.84663391 138.29461670]
[163.90092468 148.43376160]
[178.07008362 142.86631775]
[193.18978882 143.99830627]
[206.26515198 151.55178833]
[214.72953796 163.98220825]
[216.94834900 178.79389954]
[212.53446960 193.04112244]
[223.58877563 203.18026733]
[234.64306641 213.31942749]
[245.69737244 223.45858765]
[261.09744263 227.08468628]
[265.24685669 241.38963318]
[276.30114746 251.52879333]
[292.32681274 252.27601624]
[301.61734009 265.35522461]
[297.04586792 280.73315430]
[282.11923218 286.61318970]
[268.28784180 278.48468018]
[266.16201782 262.58309937]
[255.10771179 252.44393921]
[240.49832153 249.54304504]
[235.55821228 234.51287842]
[224.50392151 224.37373352]
[213.44961548 214.23457336]
[202.39532471 204.09541321]
[188.58160400 209.72097778]
[173.63378906 208.78720093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[10 56]
[11 55]
[12 51]
[13 50]
[14 49]
[15 48]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[70 88]
[71 87]
[72 86]
[73 85]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
