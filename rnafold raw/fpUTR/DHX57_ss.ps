%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGCGCCGGGACUGUGCCGCUGCAGCUGGGCCACCGCAGGCUGCUCCAAGUGAGAAUCGUGAGGGUGGCCAAGUCCAGUUUGGACCUCUGACCCUUGGGCAGCACCUCCCGACAGCCGGCUCGGGACCCAACUCUGCGAGCCAGGUGAAA\
) } def
/len { sequence length } bind def

/coor [
[239.80007935 408.56768799]
[249.64540100 397.25088501]
[263.19525146 390.81646729]
[278.18762207 390.33853149]
[292.11917114 395.89651489]
[283.75384521 383.44573975]
[275.38851929 370.99499512]
[258.78640747 368.48599243]
[248.91770935 354.48730469]
[252.26197815 337.34588623]
[243.64440918 325.06838989]
[235.02685547 312.79086304]
[226.40928650 300.51333618]
[217.79171753 288.23580933]
[205.89981079 285.82275391]
[198.62681580 275.61239624]
[200.33766174 262.78848267]
[191.97233582 250.33773804]
[183.60700989 237.88699341]
[175.24166870 225.43623352]
[161.72146606 219.18696594]
[160.44761658 203.41712952]
[152.08229065 190.96636963]
[143.71696472 178.51562500]
[129.09724426 175.90802002]
[120.43624115 163.40036011]
[123.27045441 148.08354187]
[114.90512085 135.63278198]
[92.72402954 137.93307495]
[72.96829224 127.58885193]
[62.22323608 108.04823303]
[64.07058716 85.82483673]
[51.45178223 77.71522522]
[38.83298111 69.60561371]
[26.21417618 61.49599838]
[13.59537411 53.38638687]
[0.97657114 45.27677536]
[-11.64223194 37.16716003]
[-30.02366066 36.74449539]
[-37.50131989 20.89675331]
[-50.28292084 13.04623222]
[-66.09159851 12.41666985]
[-72.88713837 -0.83738238]
[-87.17493439 4.92152023]
[-101.94152069 1.20648730]
[-111.57513428 -10.35454655]
[-112.54229736 -25.19377136]
[-125.32390594 -33.04428864]
[-138.10549927 -40.89480972]
[-153.98054504 -38.57904053]
[-165.59002686 -49.65149689]
[-164.02816772 -65.61833954]
[-150.49307251 -74.23117828]
[-135.36772156 -68.88297272]
[-130.25498962 -53.67641068]
[-117.47338104 -45.82589340]
[-104.69178009 -37.97537231]
[-91.01889038 -43.82260513]
[-76.35120392 -40.45766068]
[-66.36061859 -28.96672630]
[-65.03661346 -13.61898422]
[-50.14216614 -13.55094337]
[-42.43240356 0.26463100]
[-29.65080070 8.11515045]
[-17.77759171 5.61175251]
[-7.05038691 12.09828281]
[-3.53261948 24.54835892]
[9.08618355 32.65797043]
[21.70498657 40.76758194]
[34.32378769 48.87719345]
[46.94259262 56.98680878]
[59.56139374 65.09642029]
[72.18019867 73.20603180]
[80.36547852 66.73825836]
[89.98309326 62.69692230]
[100.33144379 61.37684250]
[103.37025452 46.68788147]
[106.40906525 31.99891853]
[109.44788361 17.30995560]
[112.48669434 2.62099385]
[109.77454376 -14.11461353]
[125.10531616 -21.35365295]
[136.30543518 -8.62597466]
[127.17565918 5.65980673]
[124.13684082 20.34876823]
[121.09803009 35.03773117]
[118.05921936 49.72669220]
[115.02040863 64.41565704]
[122.33704376 68.48944855]
[128.60366821 74.04448700]
[133.52569580 80.81964111]
[136.87174988 88.49641418]
[138.48454285 96.71395111]
[138.28826904 105.08595276]
[136.29214478 113.21887970]
[132.58999634 120.73041534]
[127.35587311 127.26745605]
[135.72120667 139.71821594]
[150.97305298 142.88349915]
[159.27931213 155.62950134]
[156.16770935 170.15028381]
[164.53303528 182.60104370]
[172.89837646 195.05178833]
[187.01692200 202.19161987]
[187.69242859 217.07090759]
[196.05775452 229.52165222]
[204.42308044 241.97241211]
[212.78842163 254.42317200]
[229.49333191 262.10440063]
[230.06924438 279.61825562]
[238.68679810 291.89575195]
[247.30436707 304.17327881]
[255.92193604 316.45080566]
[264.53948975 328.72833252]
[278.02139282 329.51855469]
[288.42269897 337.82348633]
[292.06906128 350.42150879]
[287.83926392 362.62966919]
[296.20458984 375.08041382]
[304.56991577 387.53115845]
[314.50793457 398.76663208]
[325.84417725 408.58953857]
[337.18045044 418.41244507]
[348.51669312 428.23535156]
[359.85293579 438.05828857]
[371.18917847 447.88119507]
[382.62500000 457.58795166]
[394.15927124 467.17758179]
[405.69354248 476.76721191]
[421.40631104 475.06903076]
[433.66516113 485.04379272]
[435.19714355 500.77365112]
[425.09332275 512.92639160]
[409.34814453 514.29193115]
[397.30294800 504.06021118]
[396.10391235 488.30145264]
[384.56964111 478.71185303]
[373.03540039 469.12222290]
[365.83801270 467.25308228]
[361.36624146 459.21743774]
[350.02999878 449.39453125]
[338.69375610 439.57162476]
[327.35751343 429.74868774]
[316.02127075 419.92578125]
[304.68502808 410.10287476]
[308.50048828 424.60949707]
[306.19537354 439.43133545]
[298.15447998 452.09402466]
[285.72012329 460.48373413]
[270.96810913 463.19989014]
[256.36102295 459.78909302]
[244.33738708 450.82070923]
[236.90437317 437.79187012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 120]
[6 119]
[7 118]
[10 114]
[11 113]
[12 112]
[13 111]
[14 110]
[17 108]
[18 107]
[19 106]
[20 105]
[22 103]
[23 102]
[24 101]
[27 98]
[28 97]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 67]
[40 64]
[41 63]
[43 61]
[47 57]
[48 56]
[49 55]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
[121 145]
[122 144]
[123 143]
[124 142]
[125 141]
[126 140]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
