%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCGGGGACCCCCUGAGGACCCUCGGAUUCCCCCCAACUCCCCUGCCCUCUAAAACCACUUCAAUUCCUCAACUCUUCCCCCGGCCCGCAGGAACCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[82.96950531 171.98834229]
[69.76665497 167.51521301]
[57.63739777 160.64462280]
[47.84506607 172.00727844]
[38.05273438 183.36994934]
[28.26040268 194.73262024]
[18.46807098 206.09529114]
[8.67573833 217.45796204]
[-1.11659300 228.82063293]
[-10.90892506 240.18330383]
[-16.66889000 256.12881470]
[-33.58575821 255.00808716]
[-37.19189835 238.44210815]
[-22.27159309 230.39096069]
[-12.47926140 219.02828979]
[-2.68692994 207.66563416]
[7.10540199 196.30296326]
[16.89773369 184.94029236]
[26.69006538 173.57762146]
[36.48239899 162.21495056]
[46.27473068 150.85227966]
[39.50884628 142.58145142]
[34.00514603 133.42213440]
[29.87846565 123.56544495]
[27.21491051 113.21704865]
[26.07005501 102.59287262]
[26.46779060 91.91458893]
[28.39981651 81.40502167]
[14.33852100 76.18199158]
[0.07752226 82.99370575]
[-14.79508305 77.64757538]
[-21.45564079 63.31535339]
[-15.95256233 48.50010300]
[-1.55072427 41.99144363]
[13.20551682 47.65085220]
[19.56154633 62.12070084]
[33.62284088 67.34372711]
[43.88419724 51.79858398]
[57.70329285 39.30940628]
[74.20398712 30.66800499]
[92.34014893 26.42224312]
[110.96194458 26.84129906]
[128.88874817 31.89860916]
[144.98402405 41.27353668]
[158.22731018 54.37171173]
[170.91123962 46.36436081]
[183.59518433 38.35700989]
[196.27912903 30.34966087]
[208.96305847 22.34230995]
[221.27861023 13.77917385]
[233.20143127 4.67717123]
[226.28730774 -8.67820263]
[221.79753113 -23.03135872]
[219.86857605 -37.94612503]
[220.55902100 -52.96925354]
[223.84790039 -67.64421082]
[229.63526917 -81.52503967]
[237.74525452 -94.18992615]
[247.93141174 -105.25398254]
[259.88418579 -114.38099670]
[273.24032593 -121.29360962]
[287.59399414 -125.78174591]
[302.50897217 -127.70902252]
[317.53204346 -127.01687622]
[332.20663452 -123.72632599]
[346.08679199 -117.93738556]
[358.75076294 -109.82595825]
[369.81365967 -99.63854980]
[378.93933105 -87.68474579]
[385.85040283 -74.32780457]
[390.33691406 -59.97362900]
[392.26251221 -45.05842972]
[391.56866455 -30.03545570]
[388.27645874 -15.36124516]
[382.48593140 -1.48172712]
[374.37307739 11.18131447]
[364.18441772 22.24306297]
[352.22955322 31.36736679]
[338.87185669 38.27694702]
[324.51715088 42.76182938]
[309.60174561 44.68572617]
[294.57885742 43.99016571]
[279.90499878 40.69629288]
[266.02615356 34.90420151]
[253.36402893 26.78990364]
[242.30343628 16.59998703]
[230.38061523 25.70199013]
[229.58729553 29.29518509]
[226.91433716 32.64582825]
[222.51448059 34.82712555]
[216.97041321 35.02624893]
[204.28648376 43.03359985]
[191.60253906 51.04095078]
[178.91859436 59.04830170]
[166.23464966 67.05565643]
[171.23912048 80.06639862]
[173.71386719 93.78498840]
[173.57101440 107.72427368]
[170.81567383 121.38927460]
[165.54563904 134.29473877]
[157.94807434 145.98239136]
[148.29277039 156.03720093]
[136.92259216 164.10212708]
[124.24127960 169.89077759]
[110.69915771 173.19758606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[28 37]
[29 36]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[50 87]
[51 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
