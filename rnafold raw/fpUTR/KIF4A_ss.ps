%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAGUCCGCACUGCAAUUGGUUGGCGUCUCCGGGACGGAUUUGAAACUUGGCGGUUAAAGCUCCGGCUGGGACAGGGCGGCGGGAGGCCCAGGGAGAACGGGGAAGGGACAUUUAGUUUGAGACGGUGCUGAGAUAGGAUC\
) } def
/len { sequence length } bind def

/coor [
[1.59596980 359.25622559]
[-9.72068882 371.32803345]
[-25.83480453 374.27319336]
[-31.87600327 388.00286865]
[-37.91720581 401.73254395]
[-43.95840454 415.46221924]
[-49.99960709 429.19189453]
[-47.67738342 445.42578125]
[-60.74059296 455.33966064]
[-75.75092316 448.73495483]
[-77.26702881 432.40603638]
[-63.72927856 423.15069580]
[-57.68807602 409.42102051]
[-51.64687729 395.69134521]
[-45.60567474 381.96166992]
[-39.56447601 368.23199463]
[-47.34859467 357.33401489]
[-48.72321320 343.90316772]
[-43.22042084 331.45578003]
[-32.18706512 323.30419922]
[-18.45683289 321.67562866]
[-12.11755943 308.08099365]
[-5.77828550 294.48638916]
[0.56098861 280.89178467]
[-5.50815201 269.47564697]
[-3.84569216 256.45718384]
[5.16128731 246.64515686]
[18.37151337 243.79454041]
[25.00584221 230.34144592]
[31.64017296 216.88835144]
[38.27450180 203.43527222]
[44.90883255 189.98217773]
[45.04727173 182.53562927]
[51.83744431 176.31034851]
[58.76367569 163.00518799]
[57.77740479 148.14328003]
[71.01268768 139.47506714]
[77.93891144 126.16989899]
[76.95264435 111.30798340]
[90.18792725 102.63977051]
[90.83236694 94.53881073]
[97.41313934 89.12234497]
[104.62796783 75.97144318]
[111.84280396 62.82054520]
[111.69702911 47.00001144]
[124.60220337 39.56322479]
[131.81703186 26.41232300]
[139.03186035 13.26142216]
[146.24670410 0.11052114]
[153.46153259 -13.04038048]
[145.57658386 -24.64389229]
[143.48667908 -38.44932938]
[147.54518127 -51.73987961]
[156.90113831 -61.92504120]
[169.67698669 -67.04551697]
[183.34513855 -66.14998627]
[190.84513855 -79.14036560]
[198.34513855 -92.13074493]
[190.78657532 -105.42793274]
[190.89788818 -120.62281799]
[198.54904175 -133.63534546]
[211.59892273 -141.02160645]
[226.49345398 -140.88504028]
[233.99345398 -153.87541199]
[241.49345398 -166.86579895]
[248.99345398 -179.85618591]
[256.49343872 -192.84655762]
[256.03457642 -211.21992493]
[271.49447632 -219.45555115]
[278.70932007 -232.60644531]
[273.19110107 -243.23832703]
[273.52294922 -255.09196472]
[279.50476074 -265.19131470]
[289.53253174 -271.05749512]
[301.02682495 -271.31680298]
[301.57125854 -287.12866211]
[314.78854370 -293.99545288]
[322.57012939 -306.81912231]
[330.35174561 -319.64279175]
[338.13333130 -332.46646118]
[332.00875854 -346.72372437]
[335.46688843 -361.85055542]
[347.17800903 -372.03039551]
[362.63897705 -373.34887695]
[375.90469360 -365.29904175]
[381.87426758 -350.97619629]
[378.25222778 -335.88775635]
[366.43136597 -325.83557129]
[350.95700073 -324.68487549]
[343.17541504 -311.86120605]
[335.39382935 -299.03750610]
[327.61221313 -286.21383667]
[327.62435913 -271.31924438]
[313.85049438 -263.53521729]
[319.29660034 -246.11566162]
[310.19180298 -229.93273926]
[291.86019897 -225.39161682]
[284.64538574 -212.24072266]
[287.72732544 -200.49436951]
[281.76132202 -189.45793152]
[269.48382568 -185.34655762]
[261.98382568 -172.35618591]
[254.48382568 -159.36579895]
[246.98382568 -146.37541199]
[239.48382568 -133.38504028]
[247.04936218 -120.55428314]
[247.17761230 -105.55963135]
[239.73400879 -92.42726135]
[226.63050842 -84.73342133]
[211.33552551 -84.63074493]
[203.83552551 -71.64036560]
[196.33552551 -58.64998245]
[204.74731445 -44.89393616]
[205.09785461 -28.67997932]
[197.19778442 -14.40938950]
[183.11010742 -6.00332355]
[166.61242676 -5.82554865]
[159.39759827 7.32535267]
[152.18276978 20.47625351]
[144.96794128 33.62715530]
[137.75309753 46.77805710]
[138.41493225 61.65795135]
[124.99370575 70.03537750]
[117.77886963 83.18627930]
[110.56404114 96.33718109]
[103.49308777 109.56600189]
[103.98394775 125.37958527]
[91.24407959 133.09613037]
[84.31784821 146.40129089]
[84.80870819 162.21487427]
[72.06884003 169.93142700]
[65.14260864 183.23658752]
[58.36192322 196.61650085]
[51.72759628 210.06959534]
[45.09326553 223.52268982]
[38.45893478 236.97578430]
[31.82460403 250.42887878]
[37.75773621 266.84683228]
[30.16469765 282.19131470]
[14.15560532 287.23104858]
[7.81633139 300.82565308]
[1.47705758 314.42028809]
[-4.86221647 328.01489258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[21 143]
[22 142]
[23 141]
[24 140]
[28 137]
[29 136]
[30 135]
[31 134]
[32 133]
[34 132]
[35 131]
[37 129]
[38 128]
[40 126]
[42 125]
[43 124]
[44 123]
[46 121]
[47 120]
[48 119]
[49 118]
[50 117]
[56 112]
[57 111]
[58 110]
[63 105]
[64 104]
[65 103]
[66 102]
[67 101]
[69 98]
[70 97]
[75 94]
[77 92]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
