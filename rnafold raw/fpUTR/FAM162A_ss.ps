%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCACUCCAACGCUGGGUGACAUUGAGCUCACCAGCGCCACCGUCCCCGGCGAAGUUCUGCGCUGGUCGGCGGAGUAGCAAGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[90.83714294 232.49559021]
[76.55714417 226.12257385]
[69.76104736 212.03898621]
[73.65777588 196.89469910]
[86.40740204 187.84036255]
[87.44227600 172.87611389]
[88.47714233 157.91184998]
[89.51200867 142.94758606]
[90.54687500 127.98332977]
[81.29696655 122.86099243]
[74.44379425 114.80908203]
[70.86558533 104.85942841]
[71.02085876 94.28705597]
[74.88972473 84.44678497]
[64.56127930 73.56913757]
[54.23283005 62.69149399]
[43.90438461 51.81384659]
[33.57593536 40.93620300]
[23.24748611 30.05855942]
[12.91903782 19.18091393]
[4.55369759 14.99381256]
[2.42986631 7.74500608]
[-7.51697350 -3.48265529]
[-17.46381378 -14.71031666]
[-33.00112915 -15.81915474]
[-42.92869949 -27.34729576]
[-41.77584076 -42.15291977]
[-51.72267914 -53.38058090]
[-69.25071716 -58.68804550]
[-72.31135559 -75.87426758]
[-82.63980865 -86.75190735]
[-92.96825409 -97.62955475]
[-108.83838654 -101.76126099]
[-112.93383789 -117.64078522]
[-101.04156494 -128.93263245]
[-85.39531708 -124.02072144]
[-82.09061432 -107.95800018]
[-71.76216125 -97.08036041]
[-61.43371201 -86.20271301]
[-49.22160721 -85.53116608]
[-40.52602768 -76.36537933]
[-40.49501801 -63.32742310]
[-30.54817772 -52.09976196]
[-15.71154213 -51.45959473]
[-5.46408939 -40.21484375]
[-6.23615217 -24.65715599]
[3.71068764 -13.42949486]
[13.65752792 -2.20183396]
[23.79668236 8.85246563]
[34.12512970 19.73011017]
[44.45357895 30.60775566]
[54.78202820 41.48540115]
[65.11047363 52.36304474]
[75.43892670 63.24068832]
[85.76737213 74.11833191]
[104.21276093 70.76507568]
[120.96095276 79.18974304]
[129.26455688 95.99827576]
[144.15519714 97.80632782]
[159.04582214 99.61437988]
[173.96545410 101.16513824]
[188.90962219 102.45813751]
[203.32537842 95.93922424]
[215.33831787 104.74481964]
[230.28248596 106.03781891]
[245.22665405 107.33082581]
[260.17083740 108.62383270]
[274.78961182 101.19261932]
[288.38519287 110.36282349]
[286.97155762 126.70092773]
[272.00299072 133.39968872]
[258.87780762 123.56800079]
[243.93365479 122.27499390]
[228.98948669 120.98198700]
[214.04531860 119.68898773]
[200.69845581 126.30039215]
[187.61660767 117.40230560]
[172.67243958 116.10930634]
[165.58639526 118.72535706]
[157.23777771 114.50501251]
[142.34713745 112.69696045]
[127.45651245 110.88890839]
[118.81180573 122.77156830]
[105.51113129 129.01820374]
[104.47626495 143.98245239]
[103.44139862 158.94671631]
[102.40653229 173.91098022]
[101.37166595 188.87522888]
[112.75356293 199.59840393]
[114.52852631 215.13493347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[22 48]
[23 47]
[24 46]
[27 43]
[28 42]
[30 39]
[31 38]
[32 37]
[58 82]
[59 81]
[60 80]
[61 78]
[62 77]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
