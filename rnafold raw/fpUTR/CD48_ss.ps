%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGGUAAGUUCCGUUUUUAGCCCCGGCCUUUUUCUAGCCAGGCUCUCAACUGUCUCCUGCGUUGCUGGGAAGUUCUGGAAGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[13.47154713 270.91506958]
[11.70633984 274.04214478]
[9.30865860 276.21115112]
[6.65338421 277.33959961]
[4.10620022 277.47219849]
[-5.21654844 289.22323608]
[-3.15867949 304.89297485]
[-12.84985733 317.37722778]
[-28.54047775 319.26931763]
[-40.92157364 309.44668579]
[-42.64765930 293.73693848]
[-32.69468307 281.46038818]
[-16.96756363 279.90048218]
[-7.64481544 268.14947510]
[0.60600978 255.62254333]
[7.72069979 242.41719055]
[14.83538914 229.21183777]
[21.95007896 216.00650024]
[29.06476974 202.80114746]
[36.17945862 189.59580994]
[30.51828766 179.39306641]
[30.58934212 167.60386658]
[36.49329758 157.25938416]
[46.81585312 151.07760620]
[58.96474457 150.74957275]
[66.99320221 138.07897949]
[75.02165985 125.40839386]
[83.05012512 112.73780823]
[78.80760193 100.65748596]
[82.29310608 88.33740234]
[92.23561859 80.27021027]
[105.00949097 79.39768982]
[113.48011780 67.01833344]
[121.95073700 54.63896942]
[130.42135620 42.25960922]
[138.89198303 29.88024902]
[147.36259460 17.50088882]
[155.83322144 5.12152767]
[164.30384827 -7.25783348]
[172.77445984 -19.63719368]
[174.18200684 -35.39566422]
[187.75473022 -41.53004837]
[189.16227722 -57.28851700]
[202.73498535 -63.42290115]
[211.20561218 -75.80226135]
[202.59742737 -88.30281067]
[199.09005737 -103.06975555]
[201.15785217 -118.10600281]
[208.52114868 -131.37802124]
[220.18412781 -141.09086609]
[234.56945801 -145.93096924]
[249.73165894 -145.24372864]
[263.62014771 -139.12211609]
[274.35662842 -128.39401245]
[280.48910522 -114.51029968]
[281.18814087 -99.34864044]
[276.35928345 -84.95953369]
[266.65554810 -73.28897858]
[253.38928223 -65.91532898]
[238.35466003 -63.83580017]
[223.58497620 -67.33164215]
[215.11434937 -54.95228195]
[214.31268311 -40.07926559]
[200.13409424 -33.05942535]
[199.33241272 -18.18641090]
[185.15382385 -11.16657257]
[176.68319702 1.21278787]
[168.21258545 13.59214878]
[159.74195862 25.97150993]
[151.27134705 38.35087204]
[142.80072021 50.73023224]
[134.33009338 63.10959244]
[125.85947418 75.48895264]
[117.38885498 87.86831665]
[120.83988953 103.90500641]
[111.81689453 117.60429382]
[95.72071075 120.76626587]
[87.69225311 133.43685913]
[79.66379547 146.10745239]
[71.63533783 158.77803040]
[76.57732391 176.88264465]
[67.07718658 192.70315552]
[49.38480759 196.71049500]
[42.27011490 209.91583252]
[35.15542603 223.12118530]
[28.04073715 236.32653809]
[20.92604637 249.53187561]
[13.81135654 262.73721313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[25 80]
[26 79]
[27 78]
[28 77]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[42 64]
[44 62]
[45 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
