%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGUGAGCCCGAGCGCGUACCCGGCGGAGCGCGCGCCCGCCCCCGAGUGCGCCUGCGCGGAGCUCGUGGCCGCGCCUGCUCCCGCCGGGGGCUCCUUGCUCGGCCGGGCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[73.63793182 345.64291382]
[73.63793182 330.64291382]
[73.63793182 315.64291382]
[70.45220947 308.87078857]
[73.83941650 300.25152588]
[74.23207092 285.25668335]
[74.62472534 270.26181030]
[75.01737976 255.26695251]
[72.01002502 248.41377258]
[75.62168884 239.88613892]
[76.40673065 224.90669250]
[77.19177246 209.92724609]
[77.97681427 194.94779968]
[78.76184845 179.96835327]
[75.93492126 173.03880310]
[79.76857758 164.60862732]
[80.94546509 149.65487671]
[78.30090332 142.65368652]
[82.35391998 134.32675171]
[83.92185211 119.40892792]
[79.81916809 104.86039734]
[85.01568604 93.55314636]
[94.08456421 89.71276093]
[92.12667084 74.84108734]
[90.16877747 59.96940994]
[88.21088409 45.09774017]
[86.25299835 30.22606659]
[84.29510498 15.35439301]
[82.33721161 0.48271984]
[80.37931824 -14.38895321]
[78.22692871 -29.23372459]
[75.88040924 -44.04904938]
[73.53388977 -58.86437225]
[71.18737793 -73.67970276]
[61.38651276 -86.09958649]
[67.03756714 -99.88054657]
[64.69105530 -114.69586945]
[62.34453583 -129.51119995]
[59.99802017 -144.32652283]
[49.98951340 -152.58946228]
[48.39696884 -165.06442261]
[55.53736115 -174.92414856]
[53.57946777 -189.79582214]
[51.62157440 -204.66749573]
[41.83279800 -213.18959045]
[40.56735611 -225.70196533]
[47.96339798 -235.37139893]
[46.39547348 -250.28923035]
[44.82754517 -265.20706177]
[43.25962067 -280.12487793]
[41.69169235 -295.04272461]
[30.51824951 -309.60733032]
[38.12726212 -325.36227417]
[36.16936874 -340.23394775]
[34.21147919 -355.10562134]
[23.80447388 -367.77947998]
[29.82931900 -383.03179932]
[46.08816910 -385.17230225]
[55.85531235 -371.99905396]
[49.08314896 -357.06353760]
[51.04104233 -342.19186401]
[52.99893570 -327.32019043]
[62.44791412 -319.64447021]
[64.13838959 -307.18240356]
[56.60951996 -296.61062622]
[58.17744827 -281.69281006]
[59.74537277 -266.77499390]
[61.31330109 -251.85714722]
[62.88122940 -236.93933105]
[73.95792389 -223.39596558]
[66.49324799 -206.62538147]
[68.45114136 -191.75370789]
[70.40903473 -176.88203430]
[81.83646393 -163.63327026]
[74.81334686 -146.67303467]
[77.15985870 -131.85771179]
[79.50637817 -117.04238892]
[81.85289764 -102.22706604]
[91.48591614 -90.86686707]
[86.00270081 -76.02621460]
[88.34922028 -61.21089172]
[90.69573212 -46.39556503]
[93.04225159 -31.58024025]
[97.24813843 -25.38985634]
[95.25099182 -16.34684563]
[97.20888519 -1.47517300]
[99.16677856 13.39649963]
[101.12466431 28.26817322]
[103.08255768 43.13984680]
[105.04045105 58.01152039]
[106.99834442 72.88319397]
[108.95623779 87.75486755]
[117.93110657 99.77367401]
[131.63429260 105.87471771]
[145.33747864 111.97576904]
[160.76995850 107.59196472]
[173.73501587 117.04113007]
[174.28695679 133.07469177]
[162.00238037 143.39305115]
[146.30496216 140.08087158]
[139.23641968 125.67895508]
[125.53324127 119.57790375]
[111.83005524 113.47685242]
[98.83967590 120.97685242]
[97.27175140 135.89468384]
[95.89922333 150.83175659]
[94.72234344 165.78552246]
[93.74129486 180.75340271]
[92.95625305 195.73284912]
[92.17121124 210.71228027]
[91.38617706 225.69172668]
[90.60113525 240.67117310]
[90.01223755 255.65960693]
[89.61958313 270.65447998]
[89.22692871 285.64932251]
[88.83427429 300.64419556]
[88.63793182 315.64291382]
[88.63793182 330.64291382]
[88.63793182 345.64291382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[5 116]
[6 115]
[7 114]
[8 113]
[10 112]
[11 111]
[12 110]
[13 109]
[14 108]
[16 107]
[17 106]
[19 105]
[20 104]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 86]
[30 85]
[31 83]
[32 82]
[33 81]
[34 80]
[36 78]
[37 77]
[38 76]
[39 75]
[42 73]
[43 72]
[44 71]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[53 62]
[54 61]
[55 60]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
