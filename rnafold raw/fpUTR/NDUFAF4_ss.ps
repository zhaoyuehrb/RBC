%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGUGCGCAUGCUCCGGGUGUCCCGGAGUUGUCCUGCGCCGGUGUUCCCACGUGCGGCCUGAACCUGAGCGCAUAAUGUUAUGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[79.03042603 280.19833374]
[88.43805695 267.20312500]
[87.40319061 252.23884583]
[86.36831665 237.27459717]
[85.33345032 222.31033325]
[84.29858398 207.34606934]
[83.26371765 192.38182068]
[79.58274841 185.78588867]
[82.46049500 176.88479614]
[81.94275665 161.89373779]
[81.42501068 146.90267944]
[80.90727234 131.91160583]
[69.85296631 121.77246094]
[54.87307739 122.54888153]
[39.89318466 123.32529449]
[24.91329193 124.10171509]
[9.93340015 124.87813568]
[-5.04649210 125.65455627]
[-20.02638435 126.43097687]
[-35.00627518 127.20739746]
[-50.51120758 134.06549072]
[-61.39347458 121.06500244]
[-51.91356277 107.00912476]
[-35.78269577 112.22750854]
[-20.80280495 111.45108795]
[-5.82291222 110.67466736]
[9.15697956 109.89824677]
[24.13687134 109.12182617]
[39.11676407 108.34540558]
[54.09665680 107.56898499]
[69.07654572 106.79256439]
[69.65901947 95.30585480]
[74.23590851 85.13825989]
[81.94841766 77.57930756]
[91.56076050 73.48486328]
[101.65335846 73.18387604]
[110.83095551 76.46425629]
[120.77779388 65.23659515]
[130.72462463 54.00893402]
[140.67147827 42.78127289]
[150.61831665 31.55361176]
[160.36987305 20.15593529]
[169.92324829 8.59163761]
[179.47662354 -2.97266030]
[182.62487793 -11.78170681]
[189.56481934 -14.76379967]
[199.51167297 -25.99146080]
[209.45851135 -37.21912384]
[219.40534973 -48.44678497]
[228.75769043 -60.17425537]
[237.49047852 -72.37009430]
[234.66346741 -87.91948700]
[243.72813416 -100.86582184]
[259.30654907 -103.52826691]
[272.15631104 -94.32724762]
[274.65390015 -78.72154999]
[265.31753540 -65.96977997]
[249.68630981 -63.63731766]
[240.95353699 -51.44147491]
[241.27731323 -47.72387314]
[239.67268372 -43.67262268]
[236.00939941 -40.26652145]
[230.63301086 -38.49994278]
[220.68617249 -27.27228355]
[210.73933411 -16.04462051]
[200.79248047 -4.81696033]
[191.04092407 6.58071709]
[181.48754883 18.14501572]
[171.93417358 29.70931244]
[170.06181335 37.02710724]
[161.84597778 41.50045395]
[151.89913940 52.72811508]
[141.95228577 63.95577621]
[132.00544739 75.18343353]
[122.05861664 86.41109467]
[127.27761841 105.49591827]
[117.30680084 124.18954468]
[95.89833069 131.39387512]
[96.41607666 146.38493347]
[96.93381500 161.37599182]
[97.45156097 176.36705017]
[98.22797394 191.34695435]
[99.26284790 206.31120300]
[100.29771423 221.27546692]
[101.33258057 236.23973083]
[102.36744690 251.20397949]
[103.40231323 266.16824341]
[114.50922394 277.74478149]
[112.24064636 293.62661743]
[98.33683014 301.63058472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[9 81]
[10 80]
[11 79]
[12 78]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 69]
[43 68]
[44 67]
[46 66]
[47 65]
[48 64]
[49 63]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
