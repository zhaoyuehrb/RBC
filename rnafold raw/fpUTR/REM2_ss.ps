%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAGGGAGAGGGUGCUGCGAGCUGCUGGGCUGCACACGCACACGCACACGCACACGCACACUG\
) } def
/len { sequence length } bind def

/coor [
[100.27925110 263.48516846]
[99.56552124 248.50215149]
[98.85179901 233.51913452]
[98.13806915 218.53613281]
[89.80393982 206.19143677]
[96.87583923 192.03872681]
[88.54171753 179.69403076]
[95.61361694 165.54133606]
[87.27948761 153.19664001]
[94.35138702 139.04394531]
[86.01726532 126.69924164]
[93.08915710 112.54653931]
[85.69227600 100.68156433]
[91.92782593 88.16719055]
[91.21410370 73.18417358]
[90.50037384 58.20116806]
[86.85966492 49.42401123]
[90.12641907 42.49168777]
[90.12641907 27.49168587]
[90.12641907 12.49168682]
[90.12641907 -2.50831342]
[82.38911438 -16.30848503]
[90.12641907 -29.03575706]
[86.90746307 -37.97620392]
[90.50037384 -44.74523926]
[91.21410370 -59.72824860]
[91.92782593 -74.71125793]
[92.28479767 -89.70700836]
[92.28479767 -104.70700836]
[80.19020844 -114.61938477]
[77.34759521 -129.99642944]
[85.09913635 -143.57757568]
[99.78479767 -148.95022583]
[114.47045898 -143.57757568]
[122.22200012 -129.99642944]
[119.37937927 -114.61938477]
[107.28479767 -104.70700836]
[107.28479767 -89.70700836]
[110.55154419 -82.77468872]
[106.91084290 -73.99752808]
[106.19711304 -59.01451874]
[105.48338318 -44.03150940]
[105.12641907 -29.03575706]
[112.86371613 -16.30848503]
[105.12641907 -2.50831342]
[105.12641907 12.49168682]
[105.12641907 27.49168587]
[105.12641907 42.49168777]
[105.48338318 57.48743820]
[106.19711304 72.47045135]
[106.91084290 87.45346069]
[114.30772400 99.31843567]
[108.07217407 111.83280945]
[116.45734406 125.24919891]
[109.33439636 138.33021545]
[117.71957397 151.74659729]
[110.59662628 164.82760620]
[118.98179626 178.24398804]
[111.85884857 191.32501221]
[120.24402618 204.74139404]
[113.12107849 217.82240295]
[113.83480835 232.80541992]
[114.54853821 247.78842163]
[115.26226044 262.77142334]
[118.36693573 281.90283203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[6 59]
[8 57]
[10 55]
[12 53]
[14 51]
[15 50]
[16 49]
[18 48]
[19 47]
[20 46]
[21 45]
[23 43]
[25 42]
[26 41]
[27 40]
[28 38]
[29 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
