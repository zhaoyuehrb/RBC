%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGGCGCUCCAUGGCCGCGCCGUAACGGGGACCCAGCCGCCUCCCCGCCCAGCCCAGCCCAGCCCUUCCGCCCGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[100.46892548 333.12713623]
[104.76469421 318.30990601]
[116.40432739 308.18457031]
[114.14196014 293.35617065]
[111.87960052 278.52774048]
[109.61723328 263.69934082]
[107.35486603 248.87094116]
[105.09250641 234.04252625]
[92.64472198 230.63671875]
[82.42614746 222.67733765]
[76.03036499 211.35949707]
[74.47248840 198.40550232]
[78.02819061 185.80282593]
[86.18578339 175.49914551]
[97.71951294 169.10131836]
[96.58508301 154.14427185]
[95.45065308 139.18724060]
[86.77296448 127.08157349]
[93.44441223 112.73576355]
[85.71707916 101.08330536]
[91.59854126 88.39866638]
[90.46411133 73.44162750]
[78.25778198 57.61352158]
[86.76119995 40.41653824]
[84.49884033 25.58812904]
[68.89430237 15.20362854]
[65.63228607 -2.93700981]
[76.27475739 -17.60127449]
[72.89742279 -32.21611404]
[69.52008057 -46.83095551]
[66.14274597 -61.44579697]
[62.76540375 -76.06063843]
[59.38806534 -90.67548370]
[46.26656342 -99.06976318]
[43.04965591 -113.93939972]
[51.13318634 -126.39701843]
[39.55691528 -138.01260376]
[44.08884048 -153.77311707]
[60.06690216 -157.46548462]
[71.05424500 -145.29132080]
[65.74802399 -129.77435303]
[78.47772980 -122.12646484]
[82.11103058 -107.35305023]
[74.00290680 -94.05281830]
[77.38024139 -79.43798065]
[80.75758362 -64.82313538]
[84.13492584 -50.20829391]
[87.51226044 -35.59345627]
[90.88960266 -20.97861290]
[101.90708923 -17.03997421]
[109.64661407 -8.10379601]
[112.02008820 3.60129666]
[108.29787445 15.07754421]
[99.32724762 23.32576370]
[101.58960724 38.15417099]
[110.57206726 43.63797379]
[115.02017975 53.42105865]
[113.17302704 64.23399353]
[105.42115021 72.30719757]
[106.55558777 87.26423645]
[114.28292084 98.91669464]
[108.40145874 111.60133362]
[117.16028595 124.77681732]
[110.40769196 138.05281067]
[111.54212189 153.00984192]
[112.67655182 167.96688843]
[128.52888489 175.03219604]
[138.69201660 188.99298096]
[140.52661133 206.07574463]
[133.63009644 221.71649170]
[119.92091370 231.78016663]
[122.18328094 246.60856628]
[124.44564056 261.43698120]
[126.70800781 276.26538086]
[128.97036743 291.09381104]
[131.23274231 305.92221069]
[145.36216736 312.11596680]
[153.88095093 324.97808838]
[154.07078552 340.40426636]
[145.87109375 353.47210693]
[131.89836121 360.01168823]
[116.61123657 357.93627930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[15 66]
[16 65]
[17 64]
[19 62]
[21 60]
[22 59]
[24 55]
[25 54]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
