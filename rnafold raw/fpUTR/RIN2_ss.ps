%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCAGUGGUGUUGUUGAAAGGGCUUGGCAGCUCCCAAAUGUUUGCAGUGUCCUUAGUCCUAUGAGGGCUGCCUUCUUCUUCUUCUUCUUCUUUUUUUUUUUUUUUUUUUGCUAGCUUUUAGCUAGUAUCUGGAAACAUCUACUGGAC\
) } def
/len { sequence length } bind def

/coor [
[90.09302521 377.35079956]
[82.43086243 362.85171509]
[91.38426208 349.11239624]
[91.69840240 334.11569214]
[92.01253510 319.11898804]
[92.32667542 304.12228394]
[92.64080811 289.12554932]
[92.95494080 274.12884521]
[93.26908112 259.13214111]
[93.58321381 244.13543701]
[93.74029541 229.13626099]
[93.74029541 214.13626099]
[93.74029541 199.13626099]
[93.74029541 184.13626099]
[80.17453003 174.94644165]
[74.68190765 159.33319092]
[79.60353851 143.35711670]
[93.19682312 133.34460449]
[92.88269043 118.34790039]
[82.27608490 107.74129486]
[67.27937317 107.42716217]
[52.28266525 107.11302185]
[37.28595734 106.79888916]
[22.28924561 106.48474884]
[7.29253531 106.17061615]
[-2.12553239 118.36103058]
[-16.74493408 122.61854553]
[-30.90063095 117.51166534]
[-39.23504639 105.19599915]
[-54.23175430 104.88186646]
[-69.22846985 104.56772614]
[-84.22517395 104.25359344]
[-99.22435760 104.09651184]
[-108.23577118 116.72877502]
[-122.96186066 121.61976624]
[-137.74014282 116.88880920]
[-146.88807678 104.35504913]
[-146.88807678 88.83797455]
[-137.74014282 76.30421448]
[-122.96186066 71.57325745]
[-108.23577118 76.46425629]
[-99.22435760 89.09651184]
[-92.49096680 85.93041992]
[-83.91104126 89.25688171]
[-68.91432953 89.57101440]
[-53.91762161 89.88515472]
[-38.92090988 90.19928741]
[-30.07807922 78.24343872]
[-15.72094536 73.73381805]
[-1.29265332 78.59979248]
[7.60667181 91.17390442]
[22.60338211 91.48803711]
[37.60009384 91.80217743]
[52.59680176 92.11631012]
[67.59351349 92.43045044]
[82.59022522 92.74458313]
[90.62762451 80.07966614]
[83.95809937 66.64398956]
[77.28856659 53.20831299]
[70.61904144 39.77263641]
[63.94951248 26.33696175]
[57.27998734 12.90128517]
[44.82157516 1.40240288]
[52.42224121 -13.75233746]
[69.08880615 -10.64395523]
[70.71566010 6.23175716]
[77.38519287 19.66743279]
[84.05471802 33.10311127]
[90.72424316 46.53878784]
[97.39377594 59.97446442]
[104.06330109 73.41014099]
[104.65164948 58.42168045]
[105.23999023 43.43322372]
[105.82833862 28.44476700]
[101.66112518 14.03524494]
[99.80432129 -0.84938705]
[100.30384064 -15.84106731]
[103.14733124 -30.56908607]
[108.26448822 -44.66925430]
[115.52876282 -57.79290771]
[124.76053619 -69.61552429]
[135.73153687 -79.84477234]
[148.17044067 -88.22768402]
[161.76971436 -94.55699158]
[176.19303894 -98.67617035]
[191.08377075 -100.48337555]
[206.07369995 -99.93390656]
[220.79217529 -97.04135895]
[234.87521362 -91.87725067]
[247.97457886 -84.56929016]
[259.76638794 -75.29817963]
[269.95901489 -64.29316711]
[278.30044556 -51.82638550]
[284.58441162 -38.20611191]
[288.65551758 -23.76914215]
[290.41308594 -8.87246799]
[289.81365967 6.11555099]
[286.87210083 20.82429504]
[281.66110229 34.89005280]
[274.30953979 47.96500778]
[264.99917603 59.72584915]
[253.96028137 69.88175964]
[241.46577454 78.18160248]
[227.82464600 84.42014313]
[213.37419128 88.44312286]
[198.47174072 90.15106201]
[183.48579407 89.50171661]
[168.78207397 86.50976562]
[154.04035950 89.28135681]
[139.29862976 92.05294800]
[124.55691528 94.82453918]
[138.82276917 99.45979309]
[153.08860779 104.09504700]
[167.35446167 108.73030853]
[181.62030029 113.36556244]
[195.88615417 118.00081635]
[210.15200806 122.63607025]
[224.41784668 127.27132416]
[241.35018921 126.41547394]
[246.85992432 142.44915771]
[232.97808838 152.18214417]
[219.78259277 141.53717041]
[205.51675415 136.90191650]
[191.25090027 132.26666260]
[176.98504639 127.63140869]
[162.71920776 122.99615479]
[148.45335388 118.36090088]
[134.18751526 113.72563934]
[119.92166138 109.09038544]
[107.87940216 118.03376007]
[108.19353485 133.03047180]
[120.09478760 140.05776978]
[126.90065765 151.96224976]
[126.91825867 165.56640625]
[120.25036621 177.29983521]
[108.74029541 184.13626099]
[108.74029541 199.13626099]
[108.74029541 214.13626099]
[108.74029541 229.13626099]
[111.88634491 237.78396606]
[108.57992554 244.44956970]
[108.26579285 259.44628906]
[107.95165253 274.44299316]
[107.63751984 289.43969727]
[107.32337952 304.43640137]
[107.00924683 319.43310547]
[106.69510651 334.42984009]
[106.38097382 349.42654419]
[114.75117493 363.52871704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 139]
[12 138]
[13 137]
[14 136]
[18 131]
[19 130]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[29 47]
[30 46]
[31 45]
[32 44]
[33 42]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
