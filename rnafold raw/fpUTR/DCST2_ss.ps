%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUACGGUGAGAAAUUCCAGGAGCACAGAAGUCAGCGGGCAUCUCCUGGAGACAGGCAGACAUUUGGUCUCAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[85.66269684 288.40014648]
[70.50277710 286.62820435]
[57.61758804 278.44683838]
[49.56547546 265.48049927]
[47.94520569 250.30361938]
[53.07847595 235.92959595]
[63.94607162 225.21241760]
[78.39022827 220.27996826]
[72.18279266 206.74050903]
[81.46987915 193.93188477]
[83.21127319 179.03330994]
[84.95266724 164.13473511]
[86.69406128 149.23616028]
[88.43545532 134.33758545]
[68.53389740 117.96366882]
[64.55169678 92.50155640]
[78.50352478 70.83306122]
[72.29636383 57.17761612]
[66.08920288 43.52217102]
[59.88204575 29.86672783]
[53.67488480 16.21128273]
[47.46772385 2.55583906]
[41.26056290 -11.09960461]
[35.05340195 -24.75504875]
[28.84623909 -38.41049194]
[19.22091293 -38.72211838]
[10.31877804 -42.27785110]
[3.19372129 -48.62418747]
[-1.32188070 -56.97923660]
[-2.71434975 -66.32897186]
[-0.84698439 -75.55027771]
[4.02715921 -83.54584503]
[11.29908752 -89.37476349]
[7.83984947 -103.97043610]
[4.38061142 -118.56611633]
[-7.26061010 -130.11660767]
[-2.81713414 -145.90228271]
[13.13997173 -149.68418884]
[24.19540596 -137.57182312]
[18.97628403 -122.02535248]
[22.43552208 -107.42967987]
[25.89476013 -92.83400726]
[44.96057129 -84.00125885]
[52.03969574 -63.93519592]
[42.50168228 -44.61765289]
[48.70884323 -30.96220970]
[54.91600418 -17.30676651]
[61.12316513 -3.65132189]
[67.33032990 10.00412273]
[73.53749084 23.65956688]
[79.74465179 37.31501007]
[85.95181274 50.97045517]
[92.15897369 64.62590027]
[99.06085205 63.77946854]
[105.99732208 64.26708984]
[112.71290588 66.07080078]
[118.96025848 69.12416077]
[124.50927734 73.31472015]
[129.15559387 78.48813629]
[132.72805786 84.45385742]
[135.09512329 90.99216461]
[136.16958618 97.86224365]
[135.91186523 104.81105042]
[134.33148193 111.58267212]
[131.48661804 117.92768097]
[127.48206329 123.61238861]
[122.46530914 128.42742920]
[116.62112427 132.19544983]
[110.16477203 134.77766418]
[103.33403015 136.07897949]
[101.59263611 150.97755432]
[99.85124207 165.87612915]
[98.10984802 180.77470398]
[96.36845398 195.67327881]
[102.45133209 210.27839661]
[93.28880310 222.02136230]
[106.20611572 230.15190125]
[114.30922699 243.08645630]
[115.98925018 258.25683594]
[110.91262817 272.65093994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 76]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
