%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGCCGCUGAGAGUCCCGCCCCGCCAGGGAUCCCGGGAGCUGUCCGGCCGCCUCGGUGCUGAUCCCGCCACCGCCCACGGGCCGCUAGCAGCGCAGCGGGCACU\
) } def
/len { sequence length } bind def

/coor [
[94.26689911 277.24234009]
[83.48226166 265.68954468]
[84.10891724 249.89767456]
[95.77509308 239.23577881]
[96.21136475 224.24212646]
[88.84750366 211.29519653]
[96.98290253 197.72590637]
[97.41917419 182.73225403]
[97.85544586 167.73860168]
[98.29171753 152.74494934]
[98.72798920 137.75128174]
[99.16426086 122.75763702]
[91.67581940 135.75468445]
[76.74343109 137.17730713]
[66.93548584 125.82810974]
[70.50720215 111.25955200]
[84.45238495 105.73380280]
[69.55381012 103.99240875]
[54.65523911 102.25101471]
[39.75666428 100.50962067]
[24.85808754 98.76822662]
[5.94535494 108.61846924]
[-10.37872601 96.13291931]
[-25.37238121 95.69664764]
[-40.36603546 95.26037598]
[-54.53592682 103.51544189]
[-68.63366699 95.13774109]
[-68.15670013 78.74552917]
[-53.59569550 71.20171356]
[-39.92976379 80.26672363]
[-24.93610954 80.70298767]
[-9.94245529 81.13925934]
[-4.38461781 73.87207031]
[4.05893898 70.00253296]
[13.46998405 70.55319977]
[21.64243507 75.52560425]
[26.59948158 83.86965179]
[41.49805450 85.61104584]
[56.39663315 87.35243988]
[71.29520416 89.09383392]
[86.19377899 90.83522797]
[100.49953461 86.32463837]
[111.70491028 76.35269928]
[122.91028595 66.38076782]
[134.11566162 56.40882492]
[145.32104492 46.43688965]
[150.61428833 27.09332085]
[169.54728699 23.64732552]
[180.15388489 13.04072285]
[190.76048279 2.43412137]
[201.36709595 -8.17248058]
[211.97369385 -18.77908134]
[207.01251221 -35.49852753]
[211.08969116 -52.36476135]
[223.01860046 -64.84471130]
[239.51472473 -69.62984467]
[256.09954834 -65.51293945]
[266.07150269 -76.71831512]
[276.04342651 -87.92369080]
[286.01538086 -99.12906647]
[295.98730469 -110.33444214]
[299.38165283 -125.78724670]
[313.62265015 -130.15110779]
[323.59457397 -141.35649109]
[326.37905884 -157.51751709]
[341.85861206 -162.93191528]
[354.10919189 -152.02983093]
[350.52844238 -136.02638245]
[334.79995728 -131.38455200]
[324.82803345 -120.17917633]
[322.14694214 -105.52785492]
[307.19268799 -100.36251068]
[297.22073364 -89.15713501]
[287.24880981 -77.95175171]
[277.27688599 -66.74637604]
[267.30493164 -55.54100418]
[272.59689331 -43.88365555]
[273.03448486 -31.04171753]
[268.51528931 -18.96294975]
[259.69152832 -9.49312687]
[247.87596130 -4.09399128]
[234.84686279 -3.61769032]
[222.58029175 -8.17248058]
[211.97369385 2.43412137]
[201.36709595 13.04072285]
[190.76048279 23.64732552]
[180.15388489 34.25392532]
[181.06330872 44.62165833]
[175.93507385 53.93178177]
[166.29258728 58.90753174]
[155.29298401 57.64226532]
[144.08760071 67.61420441]
[132.88223267 77.58614349]
[121.67684937 87.55807495]
[110.47147369 97.53001404]
[117.50169373 107.30807495]
[114.15791321 123.19390869]
[113.72164154 138.18756104]
[113.28536987 153.18121338]
[112.84909821 168.17486572]
[112.41282654 183.16851807]
[111.97656250 198.16217041]
[119.30921173 212.18154907]
[111.20501709 224.67840576]
[110.76874542 239.67205811]
[121.79524231 250.99423218]
[121.50263214 266.79580688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 105]
[5 104]
[7 102]
[8 101]
[9 100]
[10 99]
[11 98]
[12 97]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 32]
[24 31]
[25 30]
[42 95]
[43 94]
[44 93]
[45 92]
[46 91]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
