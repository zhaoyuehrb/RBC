%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGACCAGCGUGCUGCGUCACGGCGGUGCGCCGGAAGUGGCUGCGGAUUUCGCCGGAAAUCCCGGAAGUGACAGCUUUGGGGGUUUGCUGCUGGCUCUGACUCCCGUCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[49.90409851 137.12005615]
[36.71199036 144.25927734]
[32.10593414 159.13952637]
[18.62556267 166.19177246]
[4.46789885 161.70890808]
[-8.72420692 168.84811401]
[-17.17854881 182.22102356]
[-32.05439758 181.47378540]
[-45.24650574 188.61299133]
[-58.43861008 195.75219727]
[-71.63071442 202.89141846]
[-84.82282257 210.03062439]
[-98.01493073 217.16983032]
[-111.20703888 224.30905151]
[-124.39913940 231.44825745]
[-137.59124756 238.58746338]
[-141.86000061 253.80433655]
[-155.67915344 261.47290039]
[-170.85005188 257.04348755]
[-178.37205505 243.14402771]
[-173.78251648 228.02081299]
[-159.80430603 220.64617920]
[-144.73045349 225.39535522]
[-131.53836060 218.25614929]
[-118.34624481 211.11694336]
[-105.15413666 203.97772217]
[-91.96203613 196.83851624]
[-78.76992798 189.69931030]
[-65.57781982 182.56010437]
[-52.38571548 175.42088318]
[-39.19360733 168.28167725]
[-31.68285561 155.41941833]
[-15.86341858 155.65600586]
[-2.67131186 148.51679993]
[1.31928480 134.21257019]
[14.59625626 126.78447723]
[29.57278061 131.06716919]
[42.76488876 123.92795563]
[51.05038834 108.52539062]
[69.39376831 109.01026154]
[82.38415527 101.51026154]
[90.74121857 84.93766785]
[109.30168152 84.96411896]
[121.85917664 76.75989532]
[134.41667175 68.55567169]
[146.97416687 60.35145187]
[147.86926270 44.97273254]
[157.53521729 33.20741653]
[172.10327148 29.43437958]
[185.93405151 34.89769363]
[198.49154663 26.69347191]
[210.69927979 17.97731972]
[222.53637695 8.76412868]
[234.37348938 -0.44906244]
[246.21060181 -9.66225338]
[258.04769897 -18.87544441]
[269.35931396 -28.72672462]
[280.11105347 -39.18617630]
[290.86279297 -49.64562988]
[301.61453247 -60.10507965]
[312.36624146 -70.56452942]
[323.11798096 -81.02398682]
[333.86972046 -91.48343658]
[338.36627197 -106.65221405]
[352.88412476 -109.98094177]
[363.63586426 -120.44039154]
[374.38760376 -130.89984131]
[385.13934326 -141.35929871]
[395.89108276 -151.81874084]
[399.83026123 -167.73776245]
[415.65899658 -172.02526855]
[427.09408569 -160.27064514]
[422.37203979 -144.56604004]
[406.35055542 -141.06700134]
[395.59881592 -130.60755920]
[384.84707642 -120.14810181]
[374.09533691 -109.68865204]
[363.34359741 -99.22920227]
[359.61608887 -84.80855560]
[344.32919312 -80.73169708]
[333.57745361 -70.27224731]
[322.82571411 -59.81279373]
[312.07397461 -49.35334396]
[301.32223511 -38.89389038]
[290.57049561 -28.43443871]
[279.81875610 -17.97498703]
[279.72125244 -15.04052830]
[278.37298584 -11.97346878]
[275.71939087 -9.28284454]
[271.90316772 -7.48657942]
[267.26089478 -7.03833628]
[255.42378235 2.17485452]
[243.58668518 11.38804531]
[231.74957275 20.60123634]
[219.91246033 29.81442642]
[219.14706421 33.39122391]
[216.52577209 36.74435425]
[212.18893433 38.96520233]
[206.69577026 39.25096893]
[194.13827515 47.45519257]
[193.58566284 62.31562805]
[184.27850342 74.14105225]
[169.62136841 78.26680756]
[155.17839050 72.90895081]
[142.62089539 81.11316681]
[130.06340027 89.31739044]
[117.50590515 97.52161407]
[116.00019836 107.52281189]
[109.25878143 115.06233215]
[99.48764038 117.67304230]
[89.88415527 114.50064087]
[76.89376831 122.00064087]
[72.76131439 134.31420898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[5 34]
[6 33]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[40 112]
[41 111]
[43 107]
[44 106]
[45 105]
[46 104]
[50 100]
[51 99]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
