%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGACGGUGAGUGGGGAUGGACUGGAGUUGAAGAGCUCGAGAUGAAGGGCUUGAGGGCGUGUGUUAUUUGUUUUCUUCAAGCAUUUGGUCGAGAUUAAGAAUUAAAA\
) } def
/len { sequence length } bind def

/coor [
[94.55875397 185.00822449]
[87.35050201 171.85372925]
[83.56788635 157.33850098]
[83.43933868 142.33905029]
[86.97260284 127.76111603]
[93.95170593 114.48877716]
[82.26284027 123.88932800]
[70.57397461 133.28988647]
[58.88510895 142.69044495]
[57.03719330 158.15727234]
[45.04910660 167.52426147]
[30.31523132 165.66723633]
[18.62636566 175.06779480]
[13.20570946 190.54515076]
[-2.95643687 193.32310486]
[-13.23384190 180.54394531]
[-7.05399323 165.35375977]
[9.22581196 163.37892151]
[20.91467667 153.97836304]
[22.26106834 139.18908691]
[33.98132706 129.48907471]
[49.48455429 131.00157166]
[61.17341995 121.60102081]
[72.86228180 112.20046234]
[84.55114746 102.79991150]
[81.75742340 88.06237030]
[67.43907928 83.59188843]
[53.12074661 79.12140656]
[38.80240631 74.65091705]
[24.48406982 70.18043518]
[8.61096096 74.30068207]
[-2.69944525 62.42605972]
[2.18802857 46.77215576]
[18.24556732 43.44237137]
[28.95455360 55.86210251]
[43.27289200 60.33258438]
[57.59122849 64.80306244]
[71.90956879 69.27355194]
[86.22790527 73.74403381]
[91.52704620 78.15740204]
[95.62602997 83.35708618]
[98.42364502 89.12590027]
[107.99166870 77.57371521]
[117.55968475 66.02153015]
[120.40352631 50.45801163]
[134.48069763 45.59153366]
[144.04872131 34.03934860]
[153.61674500 22.48716354]
[156.46057129 6.92364407]
[170.53775024 2.05716729]
[180.10577393 -9.49501801]
[189.67378235 -21.04720306]
[199.24180603 -32.59938812]
[208.80982971 -44.15157318]
[218.37785339 -55.70375824]
[227.94587708 -67.25594330]
[237.51388550 -78.80812836]
[246.57368469 -90.76304626]
[255.10833740 -103.09835052]
[263.64300537 -115.43365479]
[257.62106323 -129.63717651]
[260.25659180 -144.83773804]
[270.70864868 -156.18492126]
[285.64193726 -160.05787659]
[300.29138184 -155.22074890]
[309.98233032 -143.21705627]
[311.62249756 -127.87712097]
[304.68844604 -114.09587097]
[291.39288330 -106.27085876]
[275.97830200 -106.89900208]
[267.44363403 -94.56369781]
[258.90899658 -82.22839355]
[259.25750732 -78.57386780]
[257.75311279 -74.57297516]
[254.25613403 -71.14664459]
[249.06607056 -69.24010468]
[239.49806213 -57.68792343]
[229.93003845 -46.13573837]
[220.36201477 -34.58355331]
[210.79399109 -23.03136826]
[201.22596741 -11.47918224]
[191.65795898 0.07300269]
[182.08993530 11.62518787]
[179.93046570 26.36241722]
[165.16893005 32.05518341]
[155.60090637 43.60736847]
[146.03288269 55.15955353]
[143.87341309 69.89678192]
[129.11187744 75.58955383]
[119.54385376 87.14173889]
[109.97583008 98.69392395]
[123.35169983 91.90524292]
[137.97927856 88.58351898]
[152.97529602 88.92933655]
[167.43420410 92.92182159]
[180.48291016 100.31987000]
[191.33348083 110.67676544]
[199.33068848 123.36710358]
[203.99162292 137.62458801]
[205.03485107 152.58825684]
[202.39735413 167.35456848]
[196.23841858 181.03182983]
[186.92993164 192.79414368]
[175.03401184 201.93125916]
[161.26896667 207.89141846]
[146.46600342 210.31474304]
[131.51901245 209.05487061]
[117.33054352 204.18788147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 25]
[7 24]
[8 23]
[9 22]
[12 19]
[13 18]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[42 91]
[43 90]
[44 89]
[46 87]
[47 86]
[48 85]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[58 72]
[59 71]
[60 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
