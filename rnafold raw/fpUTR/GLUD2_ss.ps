%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUUCCUAGUCGCGGGGAGUCUGAGAAAGCGCACCUGUUCCGCGACCGUCACGCACCCCUCCUCCGCCUGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[101.92484283 262.88421631]
[91.75826263 261.43627930]
[82.05653381 258.05157471]
[73.18518066 252.85511780]
[65.47892761 246.04031372]
[59.22903442 237.86160278]
[54.67234421 228.62509155]
[51.98225784 218.67700195]
[51.26216888 208.39076233]
[52.54146957 198.15292358]
[55.77437973 188.34870911]
[60.84155655 179.34742737]
[67.55452728 171.48867798]
[75.66266632 165.06942749]
[84.86257172 160.33285522]
[94.80943298 157.45910645]
[94.20544434 142.47126770]
[93.60145569 127.48342896]
[92.99746704 112.49559784]
[85.68767548 100.57676697]
[92.01469421 88.10839081]
[91.41070557 73.12055969]
[83.12400818 59.64312744]
[90.34255219 46.61462784]
[89.73856354 31.62679100]
[89.13457489 16.63895607]
[76.30242157 10.70468235]
[67.36869812 -0.16666918]
[64.06548309 -13.77598095]
[66.99341583 -27.40270233]
[75.51342010 -38.34868240]
[87.88510132 -44.47240067]
[87.88510132 -59.47240067]
[87.88510132 -74.47240448]
[74.85147095 -82.72637177]
[68.37004852 -96.72618866]
[70.50903320 -112.00454712]
[80.58587646 -123.68618774]
[95.38510132 -128.04353333]
[110.18432617 -123.68618774]
[120.26116943 -112.00454712]
[122.40015411 -96.72618866]
[115.91873169 -82.72637177]
[102.88510132 -74.47240448]
[102.88510132 -59.47240067]
[102.88510132 -44.47240067]
[116.98135376 -36.83943939]
[125.42112732 -23.10173607]
[125.86376953 -6.89175463]
[118.09779358 7.44949579]
[104.12241364 16.03496742]
[104.72640228 31.02280235]
[105.33039093 46.01063919]
[113.57389069 58.41603851]
[106.39854431 72.51657104]
[107.00253296 87.50440216]
[114.31232452 99.42323303]
[107.98530579 111.89160919]
[108.58929443 126.87944031]
[109.19328308 141.86727905]
[109.79727173 156.85511780]
[130.14593506 163.28225708]
[146.32305908 177.14488220]
[155.76017761 196.20561218]
[156.97322083 217.40469360]
[149.79580688 237.35112000]
[135.40150452 252.86517334]
[142.37234497 266.14700317]
[149.34320068 279.42886353]
[164.17042542 285.55526733]
[168.48661804 301.00680542]
[158.98077393 313.93035889]
[142.94496155 314.41210938]
[132.68046570 302.08245850]
[136.06135559 286.39968872]
[129.09051514 273.11785889]
[122.11965942 259.83602905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 61]
[17 60]
[18 59]
[19 58]
[21 56]
[22 55]
[24 53]
[25 52]
[26 51]
[32 46]
[33 45]
[34 44]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
