%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACAGGCCAAGGGCAGCAGUCAGGCCUGCUCUGUCUGUGAACGCUCCCGGCUUGGCCUCGGCUGAUGGGCCCUCACGCCUGAAGCGGGCAGGAAGCUCCGGG\
) } def
/len { sequence length } bind def

/coor [
[85.86343384 110.63999176]
[77.21308899 123.59410858]
[62.28314209 126.51838684]
[49.98667526 118.19177246]
[35.30832672 121.28144836]
[20.62998009 124.37113190]
[5.95163345 127.46080780]
[-8.72671413 130.55049133]
[-23.40506172 133.64016724]
[-38.08340836 136.72984314]
[-43.45690918 141.01708984]
[-49.30342865 141.71333313]
[-53.72184753 139.54045105]
[-68.55744934 141.75515747]
[-83.39305115 143.96984863]
[-98.22865295 146.18455505]
[-113.06426239 148.39924622]
[-127.89986420 150.61395264]
[-142.73545837 152.82864380]
[-157.53662109 155.26293945]
[-166.35198975 168.38027954]
[-181.87663269 171.34020996]
[-194.90003967 162.38664246]
[-197.69566345 146.83158875]
[-188.60491943 133.90356445]
[-173.02116394 131.27255249]
[-160.18997192 140.49948120]
[-154.06521606 136.14874268]
[-144.95016479 137.99304199]
[-130.11456299 135.77835083]
[-115.27896118 133.56364441]
[-100.44335175 131.34895325]
[-85.60774994 129.13424683]
[-70.77214813 126.91954803]
[-55.93654633 124.70485687]
[-41.17308807 122.05149841]
[-26.49474144 118.96182251]
[-11.81639290 115.87213898]
[2.86195421 112.78246307]
[17.54030228 109.69277954]
[32.21865082 106.60310364]
[46.89699554 103.51342010]
[54.79339981 90.93636322]
[69.63531494 87.59389496]
[82.77375031 95.96163940]
[87.82131195 87.16522980]
[96.87023163 82.58573914]
[106.94745636 83.72779083]
[114.74205780 90.21615601]
[129.57766724 88.00145721]
[144.41326904 85.78675842]
[159.24887085 83.57205963]
[174.08447266 81.35736084]
[188.71542358 78.05051422]
[203.06143188 73.66966248]
[217.40745544 69.28881073]
[231.75346375 64.90795898]
[242.69223022 53.47756577]
[257.12432861 57.16043854]
[271.47036743 52.77959061]
[275.24047852 48.70989609]
[279.76516724 46.80095291]
[284.04827881 46.96353149]
[287.28805542 48.70829773]
[301.96640015 45.61861801]
[316.64474487 42.52893829]
[324.41198730 32.10033798]
[336.81826782 29.89779472]
[347.02548218 36.57512665]
[361.78894043 33.92177200]
[376.55239868 31.26841927]
[391.31585693 28.61506462]
[406.07931519 25.96171188]
[414.89468384 12.84436607]
[430.41934204 9.88443947]
[443.44274902 18.83800316]
[446.23837280 34.39307022]
[437.14761353 47.32109070]
[421.56387329 49.95209885]
[408.73266602 40.72517014]
[393.96920776 43.37852478]
[379.20574951 46.03187943]
[364.44229126 48.68523407]
[349.67883301 51.33858490]
[337.00476074 63.37653351]
[319.73443604 57.20728683]
[305.05609131 60.29696274]
[290.37774658 63.38664246]
[275.85119629 67.12560272]
[261.50518799 71.50645447]
[251.59254456 82.62350464]
[236.13432312 79.25397491]
[221.78829956 83.63482666]
[207.44229126 88.01567841]
[193.09626770 92.39653015]
[192.02102661 94.64183807]
[190.04034424 96.62649536]
[187.24047852 98.02729797]
[183.81439209 98.55464172]
[180.04843140 97.98576355]
[176.29916382 96.19296265]
[161.46356201 98.40766144]
[146.62796021 100.62236023]
[131.79235840 102.83705902]
[116.95675659 105.05175781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 27]
[49 105]
[50 104]
[51 103]
[52 102]
[53 101]
[54 95]
[55 94]
[56 93]
[57 92]
[59 90]
[60 89]
[64 88]
[65 87]
[66 86]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
