%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGCGGAAGAAGGAGGCCGCGCGAGGGCUGACGAACCGGAAGAAGAGGAACUGGGCCUGAAAGGGUACCGGUGACCGCUACUGCUGCCGGUGUUUGCGUGUGGCAGGGAGCCAGGCCUGGCGAGCGGGGUGUGUCGCG\
) } def
/len { sequence length } bind def

/coor [
[128.62278748 162.04707336]
[114.15644073 166.01251221]
[99.63166046 162.26672363]
[88.88729858 151.79969788]
[84.76302338 137.37782288]
[88.34934998 122.81185150]
[75.52928925 130.59939575]
[62.70922089 138.38694763]
[63.32594681 150.96463013]
[58.53392792 162.53158569]
[49.31045532 170.89074707]
[37.46800613 174.48312378]
[25.29826927 172.67828369]
[15.12870216 165.88406372]
[10.60123253 180.78842163]
[-2.84173727 187.91169739]
[-17.02285957 183.50360107]
[-30.17710876 190.71232605]
[-43.33135605 197.92105103]
[-56.48560715 205.12977600]
[-59.36582184 220.49983215]
[-71.48461151 230.38258362]
[-87.11985016 230.11172485]
[-98.88905334 219.81513977]
[-101.23516846 204.35455322]
[-93.05043030 191.02998352]
[-78.19942474 186.13288879]
[-63.69433212 191.97552490]
[-50.54008484 184.76679993]
[-37.38583374 177.55807495]
[-24.23158646 170.34934998]
[-20.31652832 156.02427673]
[-7.07894039 148.52621460]
[7.91997623 152.72981262]
[9.29564953 135.18780518]
[20.98264313 121.82554626]
[38.49064636 118.06047058]
[54.92167282 125.56688690]
[67.74173737 117.77933502]
[80.56179810 109.99178314]
[65.57758331 110.67973328]
[51.57973862 116.07049561]
[36.72627640 113.97891998]
[24.76142693 104.93224335]
[18.70125961 91.21092987]
[20.07340622 76.27381897]
[28.53198051 63.88622665]
[41.94476318 57.17078018]
[56.93069458 57.82029343]
[69.71215820 65.67104340]
[77.06717682 78.74384308]
[88.17868805 88.82026672]
[83.25831604 74.65023041]
[78.33794403 60.48019791]
[73.41756439 46.31016159]
[68.49719238 32.14012527]
[63.41926956 18.02577972]
[58.18442535 3.96888208]
[52.94958115 -10.08801651]
[47.71473694 -24.14491463]
[34.73648453 -34.16973877]
[37.19696426 -50.38325500]
[52.56504059 -56.10638809]
[65.03135681 -45.45166779]
[61.77163315 -29.37976074]
[67.00647736 -15.32286167]
[72.24132538 -1.26596320]
[77.47616577 12.79093552]
[82.80122375 18.00354385]
[82.66722870 27.21975136]
[87.58760071 41.38978577]
[92.50798035 55.55982208]
[97.42835236 69.72985840]
[102.34872437 83.89989471]
[114.52314758 92.66251373]
[129.52221680 92.82961273]
[144.52128601 92.99671936]
[159.52128601 92.99671936]
[174.52035522 92.82961273]
[189.51942444 92.66251373]
[204.51849365 92.49540710]
[213.14518738 89.24938202]
[219.85269165 92.49540710]
[234.85176086 92.66251373]
[249.85083008 92.82961273]
[264.84991455 92.99671936]
[279.84896851 93.16381836]
[294.84896851 93.16381836]
[309.84805298 92.99671936]
[324.84710693 92.82961273]
[339.84619141 92.66251373]
[354.84524536 92.49540710]
[344.48849487 81.64470673]
[343.34252930 66.68854523]
[351.92532349 54.38668442]
[366.35766602 50.29921722]
[380.11657715 56.27356339]
[386.98336792 69.60948944]
[383.85449219 84.27953339]
[372.14364624 93.65339661]
[386.98660278 95.81819153]
[401.75897217 90.15352631]
[413.23635864 99.64662170]
[428.07931519 101.81140900]
[442.92227173 103.97620392]
[457.76525879 106.14099121]
[471.43539429 97.74418640]
[486.47390747 103.33191681]
[491.34451294 118.61775208]
[482.31091309 131.87571716]
[466.30288696 132.93542480]
[455.60046387 120.98396301]
[440.75747681 118.81916809]
[425.91452026 116.65438080]
[411.07156372 114.48958588]
[397.36087036 120.30908966]
[384.82183838 110.66115570]
[369.97885132 108.49636841]
[355.01235962 107.49447632]
[340.01327515 107.66158295]
[325.01422119 107.82868195]
[310.01513672 107.99578857]
[295.01608276 108.16288757]
[288.30856323 111.40891266]
[279.68188477 108.16288757]
[264.68280029 107.99578857]
[249.68373108 107.82868195]
[234.68466187 107.66158295]
[219.68559265 107.49447632]
[204.68559265 107.49447632]
[189.68652344 107.66158295]
[174.68745422 107.82868195]
[159.68838501 107.99578857]
[152.98086548 111.24180603]
[144.35418701 107.99578857]
[129.35511780 107.82868195]
[114.35604095 107.66158295]
[128.79492188 111.72589111]
[139.30650330 122.42667389]
[143.11262512 136.93576050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 40]
[7 39]
[8 38]
[14 34]
[17 31]
[18 30]
[19 29]
[20 28]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 68]
[58 67]
[59 66]
[60 65]
[75 137]
[76 136]
[77 135]
[78 133]
[79 132]
[80 131]
[81 130]
[83 129]
[84 128]
[85 127]
[86 126]
[87 125]
[88 123]
[89 122]
[90 121]
[91 120]
[92 119]
[100 118]
[101 117]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
