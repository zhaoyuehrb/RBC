%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGACGCGCGAGCAUCGGCGGCCCGGAACCGGCCUUGGAACAACUGUGGAACCUGAGGCCGCUUGCCCUCCCGCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.42909241 209.33735657]
[61.49515533 210.74360657]
[49.71177292 201.46179199]
[47.58113480 186.61454773]
[36.46060944 196.68103027]
[31.42209053 211.67848206]
[16.79400635 214.48355103]
[5.67348194 224.55003357]
[1.16501343 240.31726074]
[-14.80753708 244.03340149]
[-25.81297874 231.87559509]
[-20.52985764 216.35075378]
[-4.39299440 213.42950439]
[6.72752953 203.36302185]
[10.97063446 189.08558655]
[26.39413452 185.56050110]
[37.51465988 175.49401855]
[47.35804367 164.17555237]
[55.78436279 151.76599121]
[64.21067810 139.35643005]
[72.63699341 126.94687653]
[81.06330872 114.53731537]
[76.13687134 100.69480133]
[80.24957275 86.58910370]
[91.84355927 77.56333160]
[106.52713013 77.03636932]
[114.95344543 64.62680817]
[123.13137054 52.05216980]
[131.05766296 39.31742096]
[131.78109741 23.51276207]
[145.07528687 16.79606056]
[153.00157166 4.06130981]
[160.92787170 -8.67343998]
[168.85415649 -21.40819168]
[176.78045654 -34.14294052]
[184.70675659 -46.87769318]
[192.63304138 -59.61244202]
[200.55934143 -72.34719086]
[208.48562622 -85.08193970]
[199.60810852 -97.42123413]
[196.13327026 -112.21968079]
[198.59098816 -127.22061157]
[206.60647583 -140.13650513]
[218.95742798 -148.99778748]
[233.76043701 -152.45317078]
[248.75811768 -149.97572327]
[261.66345215 -141.94325256]
[270.50848389 -129.58064270]
[273.94439697 -114.77310944]
[271.44720459 -99.77868652]
[263.39776611 -86.88392639]
[251.02354431 -78.05517578]
[236.21150208 -74.63875580]
[221.22038269 -77.15564728]
[213.29408264 -64.42089844]
[205.36779785 -51.68614960]
[197.44149780 -38.95139694]
[189.51521301 -26.21664810]
[181.58891296 -13.48189735]
[173.66261292 -0.74714673]
[165.73632812 11.98760414]
[157.81002808 24.72235489]
[157.65353394 39.61613846]
[143.79240417 47.24371338]
[135.86611938 59.97846222]
[134.98222351 67.52434540]
[127.36300659 73.05312347]
[118.93669128 85.46268463]
[123.86312866 99.30519867]
[119.75042725 113.41089630]
[108.15644073 122.43666840]
[93.47286987 122.96363068]
[85.04655457 135.37318420]
[76.62023926 147.78274536]
[68.19392395 160.19230652]
[59.76760483 172.60186768]
[74.76751709 172.65232849]
[85.59397888 183.03442383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[7 14]
[8 13]
[18 76]
[19 75]
[20 74]
[21 73]
[22 72]
[26 68]
[27 67]
[28 65]
[29 64]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
