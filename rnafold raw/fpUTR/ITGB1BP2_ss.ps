%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAGAGGUGUUCCCCAUUCGGCAGCCAGACUCCUUGAAAUACCCUUUCAGUAAUCAUUCAACCAACGCUUCC\
) } def
/len { sequence length } bind def

/coor [
[84.31628418 284.68927002]
[68.64000702 282.68182373]
[59.04090118 270.12664795]
[61.21395493 254.47247314]
[73.86993408 245.00663757]
[75.77519989 230.12812805]
[77.68046570 215.24963379]
[79.58573151 200.37112427]
[81.49099731 185.49261475]
[83.39626312 170.61410522]
[85.30153656 155.73559570]
[87.20680237 140.85710144]
[77.19216156 136.77943420]
[68.41770172 130.26335144]
[61.47261429 121.67418671]
[56.84093475 111.51839447]
[54.86811829 100.41378784]
[55.73590851 89.05200958]
[59.44725418 78.15544891]
[65.82250977 68.43133545]
[74.50731659 60.52585983]
[63.67797852 50.14677811]
[55.04672623 46.31361771]
[52.62111664 39.08991623]
[42.24203491 28.26057625]
[26.29766464 26.48387909]
[17.86784363 12.83405590]
[23.41920662 -2.21791768]
[38.69322586 -7.12545586]
[51.97297668 1.87608457]
[53.07137680 17.88149261]
[63.45045853 28.71083450]
[74.05706024 39.31743622]
[84.88639832 49.69651794]
[99.72111511 47.47587967]
[107.03653717 34.38066864]
[114.35196686 21.28545570]
[121.66738892 8.19024372]
[128.98281860 -4.90496826]
[136.29823303 -18.00017929]
[133.32818604 -33.76591110]
[143.91123962 -45.82320786]
[159.92900085 -44.92273712]
[169.09400940 -31.75526810]
[164.37565613 -16.42175484]
[149.39344788 -10.68475628]
[142.07801819 2.41045570]
[134.76260376 15.50566769]
[127.44717407 28.60087967]
[120.13175201 41.69609070]
[112.81632996 54.79130173]
[121.45490265 58.52928543]
[129.12208557 63.88539886]
[135.52165222 70.62352753]
[140.41227722 78.45480347]
[143.61657715 87.04998779]
[145.02745056 96.05326843]
[144.61149597 105.09696198]
[142.40945435 113.81657410]
[138.53355408 121.86544800]
[133.16206360 128.92855835]
[126.53120422 134.73481750]
[118.92483521 139.06750488]
[110.66236115 141.77223206]
[102.08530426 142.76235962]
[100.18003845 157.64086914]
[98.27477264 172.51937866]
[96.36950684 187.39788818]
[94.46424103 202.27638245]
[92.55897522 217.15489197]
[90.65370178 232.03340149]
[88.74843597 246.91191101]
[98.61086273 259.26132202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[21 34]
[22 33]
[24 32]
[25 31]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
