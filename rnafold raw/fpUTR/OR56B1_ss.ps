%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUGUGGUGGUUCCAACCUGUGAUAACUGAGAACAAUACAAAUAGAGAUUUGAAAUUCAUGUUGAAUC\
) } def
/len { sequence length } bind def

/coor [
[205.81611633 187.02136230]
[202.53723145 180.66587830]
[190.40197754 171.84909058]
[178.26672363 163.03231812]
[166.13146973 154.21554565]
[153.99621582 145.39875793]
[136.60467529 144.66752625]
[128.94367981 128.09219360]
[116.42508698 119.82873535]
[103.90648651 111.56527710]
[91.02975464 103.87178802]
[77.82082367 96.76376343]
[64.61189270 89.65573120]
[51.40295792 82.54769897]
[38.03786087 75.73783875]
[24.52332687 69.22958374]
[19.42998505 69.86965942]
[14.95523643 68.74240112]
[11.63450718 66.33075714]
[9.75611401 63.25323868]
[9.33807182 60.15681839]
[-2.79718328 51.34004211]
[-19.15417290 50.16491699]
[-26.07058525 35.29564285]
[-16.43140984 22.02845573]
[-0.15260120 24.01149750]
[6.01959562 39.20478439]
[18.15485001 48.02156448]
[31.03158188 55.71505356]
[44.54611588 62.22330856]
[52.18634415 62.28832245]
[58.51098633 69.33876801]
[71.71991730 76.44680023]
[84.92885590 83.55482483]
[98.13778687 90.66285706]
[103.73079681 90.27461243]
[109.06414795 93.23252869]
[112.16994476 99.04667664]
[124.68854523 107.31013489]
[137.20713806 115.57359314]
[150.19395447 113.77040100]
[160.51678467 121.17883301]
[162.81298828 133.26350403]
[174.94824219 142.08027649]
[187.08349609 150.89706421]
[199.21875000 159.71383667]
[211.35400391 168.53062439]
[223.87260437 176.79406738]
[236.74934387 184.48756409]
[249.62606812 192.18106079]
[262.50280762 199.87454224]
[275.37954712 207.56803894]
[288.25625610 215.26152039]
[301.13299561 222.95501709]
[315.34793091 216.73281860]
[330.49810791 220.08714294]
[340.75799561 231.72819519]
[342.18246460 247.17974854]
[334.22375488 260.50036621]
[319.94219971 266.56799316]
[304.82928467 263.04949951]
[294.69628906 251.29783630]
[293.43951416 235.83174133]
[280.56277466 228.13825989]
[267.68603516 220.44476318]
[254.80931091 212.75128174]
[241.93258667 205.05778503]
[229.05584717 197.36428833]
[216.17912292 189.67080688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[8 40]
[9 39]
[10 38]
[11 35]
[12 34]
[13 33]
[14 32]
[15 30]
[16 29]
[21 28]
[22 27]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
