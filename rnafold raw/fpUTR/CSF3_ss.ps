%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGUGGCCCCAGGUAAUUUCCUCCCAGGCCUCCAUGGGGUUAUGUAUAAAGGCCCCCCUAGAGCUGGGCCCCAAAACAGCCCGGAGCCUGCAGCCCAGCCCCACCCAGACCC\
) } def
/len { sequence length } bind def

/coor [
[86.03327179 180.62245178]
[94.31341553 166.46719360]
[93.90369415 151.47279358]
[93.49397278 136.47839355]
[85.40468597 134.05845642]
[78.07325745 129.87004089]
[71.88037109 124.13063812]
[58.75555801 131.39282227]
[45.63074875 138.65501404]
[32.50593948 145.91719055]
[28.08026695 164.22770691]
[12.02034569 173.45527649]
[-5.42261171 168.23806763]
[-18.13125420 176.20616150]
[-30.83989716 184.17424011]
[-34.12697601 199.63291931]
[-47.42753601 208.16934204]
[-62.85059738 204.71900940]
[-71.24592590 191.32893372]
[-67.63272095 175.94322205]
[-54.15464020 167.68992615]
[-38.80798340 171.46559143]
[-26.09934044 163.49751282]
[-13.39069748 155.52941895]
[-13.28901768 143.96279907]
[-7.50256348 133.80790710]
[2.60303569 127.69901276]
[14.52518845 127.28641510]
[25.24375153 132.79238892]
[38.36856079 125.53019714]
[51.49337006 118.26801300]
[64.61817932 111.00582886]
[63.54235458 93.37872314]
[70.74774933 77.25561523]
[84.59767914 66.29881287]
[101.94618988 62.99711227]
[118.85263824 68.10047913]
[128.94024658 56.99912262]
[139.02784729 45.89776230]
[149.11546326 34.79640579]
[159.20306396 23.69504547]
[169.29067993 12.59368801]
[179.37828064 1.49232948]
[178.80242920 -14.07385635]
[189.19084167 -25.18851089]
[204.03437805 -25.64156532]
[214.12197876 -36.74292374]
[210.31327820 -50.06970596]
[213.59552002 -63.42391968]
[222.99824524 -73.30921173]
[235.96337891 -77.19273376]
[249.04043579 -74.15353394]
[259.42752075 -84.97521210]
[269.81457520 -95.79689026]
[280.20166016 -106.61856079]
[284.17584229 -121.93248749]
[298.57116699 -125.75665283]
[308.95825195 -136.57832336]
[293.97979736 -135.77462769]
[280.84976196 -143.02735901]
[273.55517578 -156.13420105]
[274.31112671 -171.11514282]
[282.88800049 -183.42109680]
[296.68142700 -189.31529236]
[311.50289917 -187.00788879]
[322.85174561 -177.19955444]
[327.28182983 -162.86866760]
[323.44750977 -148.36621094]
[336.15615845 -156.33430481]
[348.86477661 -164.30238342]
[361.57342529 -172.27047729]
[361.64300537 -187.69767761]
[370.06127930 -200.62579346]
[384.14199829 -206.92951965]
[399.39205933 -204.59733582]
[410.94525146 -194.37344360]
[415.11492920 -179.52026367]
[410.57061768 -164.77737427]
[398.76239014 -154.84918213]
[383.45816040 -152.90373230]
[369.54150391 -159.56182861]
[356.83288574 -151.59375000]
[344.12423706 -143.62565613]
[331.41558838 -135.65757751]
[319.77990723 -126.19125366]
[309.39285278 -115.36957550]
[306.16159058 -100.82968903]
[291.02334595 -96.23148346]
[280.63626099 -85.40981293]
[270.24917603 -74.58813477]
[259.86212158 -63.76646042]
[263.29324341 -47.77715302]
[256.49450684 -32.72250366]
[241.94216919 -24.56260681]
[225.22334290 -26.65531540]
[215.13574219 -15.55395794]
[216.10183716 -0.73497504]
[206.02970886 10.66708279]
[190.47964478 11.57993793]
[180.39202881 22.68129539]
[170.30442810 33.78265381]
[160.21681213 44.88401413]
[150.12921143 55.98537064]
[140.04159546 67.08673096]
[129.95399475 78.18808746]
[136.03057861 91.35135651]
[136.59114075 105.83866882]
[131.54986572 119.43212891]
[121.67852783 130.05067444]
[108.48837280 136.06866455]
[108.89809418 151.06306458]
[109.30782318 166.05747986]
[118.34861755 179.73944092]
[110.77902985 194.28706360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 112]
[3 111]
[4 110]
[7 32]
[8 31]
[9 30]
[10 29]
[13 24]
[14 23]
[15 22]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[43 99]
[46 96]
[47 95]
[52 91]
[53 90]
[54 89]
[55 88]
[57 86]
[58 85]
[68 84]
[69 83]
[70 82]
[71 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
