%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCCGCUGCCCCACGUUCUACCUGCUCUCGCUUGUGAACUAGCCUCUCCUGAGUUUGUAAAG\
) } def
/len { sequence length } bind def

/coor [
[63.81174469 211.27360535]
[61.08728027 196.52310181]
[63.10044861 181.65881348]
[69.65031433 168.16439819]
[80.08310699 157.38677979]
[93.35748291 150.40173340]
[108.14848328 147.90646362]
[122.98007202 150.15013123]
[114.87046051 137.53132629]
[106.76084900 124.91252136]
[98.65122986 112.29371643]
[92.20761108 125.83918762]
[78.22473907 131.26867676]
[64.32853699 125.62107086]
[58.09763718 111.97644043]
[62.93022919 97.77622223]
[76.19073486 90.76487732]
[90.64641571 94.76560974]
[86.42042542 80.37321472]
[82.19444275 65.98081970]
[77.96845245 51.58842850]
[72.36107635 43.91701508]
[73.90139008 36.40993500]
[70.36500549 21.83276176]
[57.15281677 13.58195114]
[53.77407837 -1.25175273]
[61.72138596 -13.79670620]
[58.18500137 -28.37388039]
[46.48285675 -39.86264801]
[50.84278107 -55.67160416]
[66.77966309 -59.53784943]
[77.89900208 -47.48412323]
[72.76217651 -31.91026306]
[76.29856110 -17.33308983]
[89.11083984 -9.82435894]
[92.90489197 4.90859079]
[84.94217682 18.29637909]
[88.47856140 32.87355042]
[92.36084747 47.36243820]
[96.58683777 61.75483322]
[100.81282043 76.14723206]
[105.03881073 90.53961945]
[111.27003479 104.18410492]
[119.37964630 116.80290985]
[127.48925781 129.42170715]
[135.59887695 142.04051208]
[148.02111816 150.44812012]
[162.75004578 153.28689575]
[177.47897339 156.12565613]
[192.79077148 150.25361633]
[205.35992432 160.78683472]
[202.25636292 176.88961792]
[186.67277527 181.99682617]
[174.64019775 170.85459900]
[159.91127014 168.01582336]
[145.18234253 165.17706299]
[152.77751160 178.11203003]
[155.95834351 192.77088928]
[154.40733337 207.69049072]
[148.27932739 221.38163757]
[138.18595886 232.47776794]
[125.13470459 239.87132263]
[110.42824554 242.82432556]
[95.53451538 241.04202271]
[81.94009399 234.70231628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 46]
[9 45]
[10 44]
[11 43]
[18 42]
[19 41]
[20 40]
[21 39]
[23 38]
[24 37]
[27 34]
[28 33]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
