%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGACUUGGGCCUGGAGUUAGGCAUUUCCGCCCACGUGGGAAGCUAUGAGGUAUAGACCCGGCUAGAAUCUGAAGUGCGGGAGAGUGCUGGACCCUGAGUG\
) } def
/len { sequence length } bind def

/coor [
[37.25712204 445.94595337]
[23.29409790 438.04571533]
[20.90732193 422.18121338]
[31.92772675 410.52230835]
[32.85113907 395.55075073]
[33.77455521 380.57919312]
[34.69796753 365.60763550]
[35.62137985 350.63610840]
[36.54479599 335.66455078]
[37.46820831 320.69299316]
[24.87779427 328.84661865]
[10.15283108 325.98733521]
[1.52882874 313.71435547]
[3.82909918 298.89175415]
[15.76712608 289.80972290]
[30.66609955 291.54769897]
[40.19367981 303.13522339]
[43.85238647 288.58825684]
[47.51108932 274.04132080]
[43.11183548 259.81121826]
[53.98149872 248.31507874]
[57.64020538 233.76812744]
[61.29890823 219.22117615]
[64.95761871 204.67422485]
[68.61631775 190.12727356]
[72.27502441 175.58030701]
[75.93373108 161.03335571]
[71.53447723 146.80325317]
[82.40414429 135.30712891]
[80.95796967 127.92499542]
[86.40599823 120.37200165]
[90.51094055 105.94461060]
[94.39322662 91.45572662]
[98.05193329 76.90877533]
[101.71063995 62.36181641]
[97.57308197 47.09122086]
[108.18104553 36.63558578]
[104.04348755 21.36498642]
[114.65145111 10.90935040]
[118.31015778 -3.63760400]
[121.96886444 -18.18455887]
[114.11888123 -31.63875961]
[118.03656006 -46.33932114]
[130.91145325 -53.74016571]
[134.57015991 -68.28711700]
[138.22886658 -82.83407593]
[141.43786621 -97.48679352]
[144.19410706 -112.23139191]
[142.68389893 -121.42095184]
[147.26895142 -127.38455200]
[150.47795105 -142.03727722]
[153.68695068 -156.69000244]
[148.20259094 -172.14489746]
[159.04914856 -184.44465637]
[175.06863403 -180.93632507]
[179.78155518 -165.22898865]
[168.33967590 -153.48100281]
[165.13067627 -138.82827759]
[161.92167664 -124.17555237]
[158.93870544 -109.47515106]
[156.18246460 -94.73055267]
[158.20002747 -90.22615814]
[157.28274536 -84.39369202]
[152.77581787 -79.17536926]
[149.11711121 -64.62841034]
[145.45841980 -50.08145905]
[153.30006409 -37.47019196]
[149.79684448 -22.66539192]
[136.51582336 -14.52585220]
[132.85711670 0.02110177]
[129.19841003 14.56805611]
[133.59765625 28.79815865]
[122.72799683 40.29428864]
[127.12725067 54.52439117]
[116.25759125 66.02052307]
[112.59888458 80.56747437]
[108.94017792 95.11443329]
[110.19286346 103.23094177]
[104.93832397 110.04956055]
[100.83338165 124.47694397]
[96.95109558 138.96583557]
[101.08865356 154.23643494]
[90.48069000 164.69206238]
[86.82198334 179.23901367]
[83.16327667 193.78598022]
[79.50457001 208.33293152]
[75.84586334 222.87988281]
[72.18715668 237.42683411]
[68.52845001 251.97378540]
[72.66600800 267.24438477]
[62.05804443 277.70001221]
[58.39933777 292.24697876]
[54.74063110 306.79394531]
[52.43975830 321.61642456]
[51.51634598 336.58795166]
[50.59292984 351.55950928]
[49.66951752 366.53106689]
[48.74610519 381.50262451]
[47.82268906 396.47415161]
[46.89927673 411.44570923]
[56.40340805 424.37054443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[17 93]
[18 92]
[19 91]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[29 81]
[31 80]
[32 79]
[33 77]
[34 76]
[35 75]
[37 73]
[39 71]
[40 70]
[41 69]
[44 66]
[45 65]
[46 64]
[47 61]
[48 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
