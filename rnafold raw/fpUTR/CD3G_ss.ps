%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUAGCUGCUGCACAGGCUGGCUGGCUGGCUGGCUGCUAAGGGCUGCUCCACGCUUUUGCCGGAGGACAGAGACUGAC\
) } def
/len { sequence length } bind def

/coor [
[77.58272552 307.08401489]
[80.51863861 287.92599487]
[81.10027313 272.93728638]
[81.68190002 257.94854736]
[78.71730804 250.96231079]
[82.58789825 242.39317322]
[83.75028992 227.43827820]
[84.62245941 212.46365356]
[85.20408630 197.47494507]
[82.23949432 190.48869324]
[86.11008453 181.91955566]
[87.27247620 166.96466064]
[88.43486023 152.00976562]
[78.58564758 140.89543152]
[79.55143738 125.71248627]
[91.27596283 115.45708466]
[84.17790985 108.04311371]
[82.37091827 97.93945312]
[86.45926666 88.52486420]
[95.07576752 82.94766235]
[97.39354706 68.12781525]
[99.71132660 53.30796814]
[102.02911377 38.48812103]
[104.34689331 23.66827393]
[96.07955170 5.47801447]
[108.26853180 -9.32822609]
[109.43091583 -24.28311920]
[110.59330750 -39.23801422]
[111.46547699 -54.21263504]
[112.04710388 -69.20135498]
[112.62873840 -84.19007111]
[109.71128082 -90.59701538]
[110.54678345 -96.55583191]
[113.88127136 -100.30473328]
[115.62265778 -115.20330811]
[117.36405182 -130.10188293]
[111.28117371 -144.70698547]
[120.44370270 -156.44995117]
[122.18509674 -171.34852600]
[123.92649078 -186.24711609]
[119.75984192 -202.68107605]
[134.39813232 -211.23426819]
[146.66932678 -199.53581238]
[138.82507324 -184.50572205]
[137.08367920 -169.60714722]
[135.34228516 -154.70855713]
[141.54971313 -141.16909790]
[132.26263428 -128.36048889]
[130.52124023 -113.46191406]
[128.77984619 -98.56333923]
[127.61745453 -83.60844421]
[127.03582764 -68.61972809]
[126.45419312 -53.63100433]
[129.41879272 -46.64476013]
[125.54819489 -38.07562637]
[124.38581085 -23.12073326]
[123.22342682 -8.16583920]
[130.73432922 -0.77635765]
[132.84086609 9.77479553]
[128.57023621 19.89267731]
[119.16674042 25.98605537]
[116.84896088 40.80590439]
[114.53117371 55.62575150]
[112.21339417 70.44559479]
[109.89561462 85.26544952]
[117.62908173 102.06054688]
[106.23085022 116.61946869]
[116.22991180 128.56335449]
[114.83805084 143.71319580]
[103.38975525 153.17216492]
[102.22737122 168.12705994]
[101.06497955 183.08195496]
[100.19281006 198.05656433]
[99.61117554 213.04528809]
[102.46078491 222.00582886]
[98.70517731 228.60066223]
[97.54279327 243.55555725]
[96.67062378 258.53018188]
[96.08898926 273.51889038]
[95.50736237 288.50762939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[4 78]
[6 77]
[7 76]
[8 74]
[9 73]
[11 72]
[12 71]
[13 70]
[16 67]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[26 57]
[27 56]
[28 55]
[29 53]
[30 52]
[31 51]
[34 50]
[35 49]
[36 48]
[38 46]
[39 45]
[40 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
