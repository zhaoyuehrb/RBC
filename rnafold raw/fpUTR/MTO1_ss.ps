%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGACGUCCUACCCCGUGAUAUUAAAGCAAGAUGGCCGCGCCCUGCAGAUUGUCUCUUGUUGCGUAAGUUUUUUUGACCGUCACUCGUGUCAGCUUCAAAGUCAGAUAGAUUUUUCUCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[99.76316833 343.91503906]
[94.59352875 357.99603271]
[89.42388153 372.07702637]
[84.25423431 386.15805054]
[89.66172791 401.26229858]
[81.10205078 414.83108521]
[65.14144897 416.45556641]
[54.02354431 404.88958740]
[56.27703094 389.00558472]
[70.17323303 380.98840332]
[75.34287262 366.90740967]
[80.51251984 352.82638550]
[85.68215942 338.74539185]
[74.21054840 323.44271851]
[70.84289551 305.50271606]
[75.52342224 288.76269531]
[86.55137634 276.47421265]
[101.07668304 270.67245483]
[100.32301331 255.69139099]
[99.56935120 240.71034241]
[98.81568909 225.72927856]
[90.44868469 213.40684509]
[97.48283386 199.23535156]
[96.72917175 184.25428772]
[88.36216736 171.93185425]
[95.39631653 157.76036072]
[94.64264679 142.77929688]
[93.88898468 127.79824829]
[93.13532257 112.81719208]
[88.67969513 98.49422455]
[80.80207825 85.72930145]
[72.92446136 72.96438599]
[65.04683685 60.19947052]
[57.16921997 47.43455505]
[45.15607834 46.98132706]
[34.98462296 40.80251694]
[29.16468048 30.56002045]
[29.06520844 18.90052032]
[34.59403992 8.77192974]
[27.36773491 -4.37267017]
[20.14142990 -17.51727104]
[12.91512489 -30.66187096]
[2.17742562 -33.13050079]
[-5.23069811 -40.98487091]
[-6.99375963 -51.41271210]
[-2.75991416 -60.86244965]
[-9.31665039 -74.35353088]
[-15.87338734 -87.84460449]
[-22.43012428 -101.33568573]
[-37.73067856 -103.91884613]
[-48.56666946 -115.02563477]
[-50.77144241 -130.38528442]
[-43.49721527 -144.09167480]
[-29.54107666 -150.87443542]
[-14.26944637 -148.12544250]
[-3.55457830 -136.90174866]
[-1.51655757 -121.51909637]
[-8.93904495 -107.89242554]
[-2.38230848 -94.40134430]
[4.17442799 -80.91026306]
[10.73116493 -67.41918945]
[27.49787712 -57.92077637]
[26.05972481 -37.88817596]
[33.28602982 -24.74357605]
[40.51233673 -11.59897518]
[47.73863983 1.54562485]
[65.53012848 5.49369383]
[75.04582214 21.40609741]
[69.93413544 39.55693436]
[77.81175232 52.32184982]
[85.68937683 65.08676910]
[93.56699371 77.85168457]
[101.44461060 90.61660004]
[103.39643860 88.54019165]
[105.92239380 86.86205292]
[108.94497681 85.69705200]
[122.35259247 78.97130585]
[135.76022339 72.24555969]
[149.16783142 65.51980591]
[162.48988342 58.62611008]
[175.72425842 51.56555176]
[181.75019836 36.69721222]
[197.17218018 32.27655792]
[210.15975952 41.69474030]
[210.75000000 57.72693253]
[198.49009705 68.07460785]
[182.78482056 64.79991913]
[169.55044556 71.86048126]
[165.07998657 77.85175323]
[155.89358521 78.92742920]
[142.48596191 85.65317535]
[129.07833862 92.37892914]
[115.67072296 99.10467529]
[108.11637115 112.06352234]
[108.87004089 127.04457855]
[109.62370300 142.02563477]
[110.37737274 157.00668335]
[118.79827881 170.40068054]
[111.71022034 183.50062561]
[112.46389008 198.48168945]
[120.88479614 211.87567139]
[113.79673767 224.97561646]
[114.55040741 239.95668030]
[115.30406952 254.93772888]
[116.05773163 269.91879272]
[133.69114685 275.66610718]
[146.65481567 290.66595459]
[150.24008179 311.46511841]
[142.13442993 332.33340454]
[150.33033752 344.89633179]
[158.52626038 357.45925903]
[173.39024353 364.38702393]
[174.55285645 380.74493408]
[160.81811523 389.70532227]
[146.31513977 382.05053711]
[145.96333313 365.65518188]
[137.76742554 353.09225464]
[129.57150269 340.52932739]
[122.11942291 341.37576294]
[123.81227112 356.27993774]
[130.02787781 369.93151855]
[118.96514893 380.06149292]
[105.91242981 372.67050171]
[108.90810394 357.97277832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[18 105]
[19 104]
[20 103]
[21 102]
[23 100]
[24 99]
[26 97]
[27 96]
[28 95]
[29 94]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[39 66]
[40 65]
[41 64]
[42 63]
[46 61]
[47 60]
[48 59]
[49 58]
[76 93]
[77 92]
[78 91]
[79 90]
[80 88]
[81 87]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
