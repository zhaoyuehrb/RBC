%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAUGUGGCCCGUGGCCUAGCUCGUCAAGUUGCCGUGGCGCGGAGAACUCUGCAAAACAAGAGGCUGAGGAUUGCGUUAGAGAUAAACCAGUUCACGCCGGAGCCCCGUGAGGGAAGCGUCUCCGUUGGGUCCGGCCGCUCUGCGGGACUCUGAGGAAAAGCUCGCACCAGGUGGACGCGGAUCUGUCAAC\
) } def
/len { sequence length } bind def

/coor [
[385.37097168 266.08346558]
[372.10653687 259.07955933]
[358.84210205 252.07563782]
[345.57769775 245.07171631]
[332.31326294 238.06781006]
[319.04882812 231.06388855]
[305.78439331 224.05998230]
[292.51995850 217.05606079]
[278.40887451 221.68350220]
[264.85708618 214.76948547]
[260.09909058 199.93711853]
[246.83465576 192.93319702]
[233.57022095 185.92929077]
[226.17680359 185.58570862]
[220.14906311 178.70304871]
[205.26901245 179.36152649]
[196.89460754 165.93841553]
[183.74533081 158.72062683]
[170.37390137 165.22775269]
[155.55953979 162.58219910]
[145.02040100 151.59219360]
[142.94943237 136.32730103]
[129.80015564 129.10951233]
[116.65088654 121.89171600]
[103.50160217 114.67392731]
[88.50209808 114.55247498]
[75.23766327 121.55638885]
[61.97323227 128.56030273]
[48.70880127 135.56422424]
[46.63839340 150.94255066]
[35.89991760 162.14366150]
[20.62253380 164.86048889]
[6.68070745 158.04835510]
[-0.56464499 144.32667542]
[1.67246306 128.97171021]
[12.53181744 117.88775635]
[27.83777618 115.33682251]
[41.70488358 122.29978943]
[54.96931458 115.29587555]
[68.23374939 108.29196167]
[81.49818420 101.28804779]
[77.89030457 86.72840118]
[62.89030838 86.72840118]
[47.89030838 86.72840118]
[32.89030838 86.72840118]
[17.89030647 86.72840118]
[3.96650338 95.39210510]
[-10.36893082 87.42797089]
[-10.36893082 71.02882385]
[3.96650338 63.06469727]
[17.89030647 71.72840118]
[32.89030838 71.72840118]
[47.89030838 71.72840118]
[62.89030838 71.72840118]
[77.89030457 71.72840118]
[81.86584473 65.36875153]
[68.70211029 58.17737198]
[55.53836823 50.98598862]
[41.42710876 45.89950562]
[40.88980103 30.90913200]
[54.60068512 24.82540894]
[65.35482025 35.28266907]
[77.58586884 43.96606827]
[89.81692505 52.64946365]
[93.79246521 46.28981781]
[87.22174835 32.80554199]
[80.65103149 19.32126617]
[74.06922150 12.96640015]
[74.08508301 5.56501675]
[61.23219299 -3.66070294]
[62.85247040 -18.46691704]
[56.50096893 -32.05582428]
[50.14946747 -45.64473343]
[43.79796600 -59.23364258]
[37.44646454 -72.82254791]
[31.09496307 -86.41146088]
[24.61691856 -92.87207031]
[24.75262833 -100.27222443]
[18.62200356 -113.96220398]
[12.49138165 -127.65217590]
[-2.59818888 -131.75570679]
[-11.47727299 -144.62799072]
[-9.95343971 -160.19114685]
[1.25380504 -171.09672546]
[16.85274124 -172.19544983]
[29.47802925 -162.96852112]
[33.16839600 -147.77262878]
[26.18135834 -133.78280640]
[32.31198120 -120.09282684]
[38.44260406 -106.40284729]
[44.68387222 -92.76296234]
[51.03537369 -79.17404938]
[57.38687515 -65.58514404]
[63.73837662 -51.99623489]
[70.08988190 -38.40732574]
[76.44138336 -24.81841850]
[88.83996582 -16.56466866]
[87.67398834 -0.78648502]
[94.13530731 12.75055122]
[100.70602417 26.23482704]
[107.27674103 39.71910477]
[128.37638855 78.21743011]
[110.71939087 101.52465057]
[123.86867523 108.74243927]
[137.01794434 115.96022797]
[150.16723633 123.17801666]
[164.15715027 116.72911835]
[179.08734131 119.71953583]
[189.27336121 130.79695129]
[190.96311951 145.57135010]
[204.11239624 152.78913879]
[219.93296814 152.64692688]
[227.36685181 165.55377197]
[240.57412720 172.66485596]
[253.83856201 179.66877747]
[267.10299683 186.67268372]
[282.03494263 182.23704529]
[295.38717651 189.52897644]
[299.52386475 203.79162598]
[312.78829956 210.79554749]
[326.05273438 217.79945374]
[339.31716919 224.80337524]
[352.58160400 231.80729675]
[365.84603882 238.81120300]
[379.11047363 245.81512451]
[392.37490845 252.81904602]
[405.85916138 259.38973999]
[420.47268677 253.99687195]
[434.26892090 260.40921021]
[439.32015991 274.37420654]
[453.01013184 280.50482178]
[466.70010376 286.63543701]
[480.39007568 292.76605225]
[494.08007812 298.89669800]
[507.77005005 305.02731323]
[521.46002197 311.15792847]
[535.19915771 317.17752075]
[549.03399658 322.97381592]
[562.91534424 328.65792847]
[576.79669189 334.34201050]
[590.67797852 340.02612305]
[604.55932617 345.71023560]
[624.37994385 342.08691406]
[635.56188965 357.85183716]
[649.61999512 363.08346558]
[663.67810059 368.31509399]
[677.73620605 373.54669189]
[691.79431152 378.77832031]
[705.85235596 384.00991821]
[715.00122070 384.07168579]
[720.09460449 389.44177246]
[734.06616211 394.90032959]
[749.73577881 392.71548462]
[758.77478027 404.55380249]
[773.98724365 399.45855713]
[787.37683105 408.29589844]
[788.67218018 424.28656006]
[776.87969971 435.16390991]
[761.04547119 432.58370972]
[753.31622314 418.52532959]
[738.64593506 421.10061646]
[728.60760498 408.87188721]
[714.63604736 403.41329956]
[700.62078857 398.06802368]
[686.56268311 392.83642578]
[672.50457764 387.60479736]
[658.44647217 382.37316895]
[644.38836670 377.14157104]
[630.33026123 371.90994263]
[621.44232178 376.98669434]
[611.00872803 376.31140137]
[602.49877930 369.86621094]
[598.87518311 359.59155273]
[584.99389648 353.90744019]
[571.11254883 348.22332764]
[557.23126221 342.53924561]
[543.34991455 336.85513306]
[535.95806885 337.23040771]
[529.29107666 330.96496582]
[521.89404297 331.22048950]
[515.32940674 324.84790039]
[501.63940430 318.71728516]
[487.94943237 312.58666992]
[474.25946045 306.45605469]
[460.56948853 300.32540894]
[446.87951660 294.19479370]
[433.18954468 288.06417847]
[419.40759277 293.59530640]
[405.43667603 287.57299805]
[399.72854614 273.07974243]
[397.05398560 273.96334839]
[393.86587524 273.83309937]
[390.55148315 272.48712158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[11 116]
[12 115]
[13 114]
[15 113]
[17 111]
[18 110]
[22 106]
[23 105]
[24 104]
[25 103]
[26 41]
[27 40]
[28 39]
[29 38]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[65 101]
[66 100]
[67 99]
[69 98]
[71 96]
[72 95]
[73 94]
[74 93]
[75 92]
[76 91]
[78 90]
[79 89]
[80 88]
[127 190]
[130 187]
[131 186]
[132 185]
[133 184]
[134 183]
[135 182]
[136 181]
[137 179]
[138 177]
[139 176]
[140 175]
[141 174]
[142 173]
[144 169]
[145 168]
[146 167]
[147 166]
[148 165]
[149 164]
[151 163]
[152 162]
[154 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
