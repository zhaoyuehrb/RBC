%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAGGAAACAGAGUGAAGACACUGGCCCUGGCAGGCAGCAGCUGGGUCUAAGAGAGCUGCAGCCCAGGGUCACAGACCUGUGGGCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.11735535 116.26019287]
[57.75856018 120.59896851]
[43.47679520 125.18495178]
[29.27631378 130.01675415]
[15.07583332 134.84855652]
[0.87535256 139.68037415]
[-13.32512760 144.51217651]
[-17.90963745 157.31298828]
[-28.90972137 164.96723938]
[-42.11410522 164.82138062]
[-52.62576294 157.15673828]
[-66.98455811 161.49552917]
[-81.34335327 165.83430481]
[-92.31557465 177.23258972]
[-106.73682404 173.50743103]
[-121.09561920 177.84620667]
[-131.91822815 190.16705322]
[-147.94450378 186.68992615]
[-152.68798828 170.99179077]
[-141.26899719 159.22154236]
[-125.43440247 163.48741150]
[-111.07560730 159.14863586]
[-101.13041687 148.06068420]
[-85.68212891 151.47550964]
[-71.32334137 147.13673401]
[-56.96454239 142.79794312]
[-49.76097488 127.70906067]
[-33.58834457 122.29402924]
[-18.15693474 130.31169128]
[-3.95645404 125.47988892]
[10.24402618 120.64807892]
[24.44450760 115.81627655]
[38.64498901 110.98446655]
[44.07858276 105.73738098]
[53.41977692 106.24018097]
[67.77857208 101.90139771]
[70.08291626 87.88372803]
[78.18224335 76.21300507]
[90.50769043 69.14984894]
[104.67181396 68.06240845]
[110.23218536 54.13106155]
[115.79254913 40.19971848]
[121.35291290 26.26837540]
[126.91327667 12.33703232]
[132.47364807 -1.59431171]
[122.47509766 -13.18256283]
[119.01844025 -28.09263039]
[122.89800262 -42.89829254]
[133.22227478 -54.19731522]
[147.61883545 -59.39326477]
[162.77943420 -57.29214859]
[175.22029114 -48.37679291]
[182.08259583 -34.69587708]
[181.78942871 -19.39317703]
[174.40815735 -5.98514080]
[161.63494873 2.44716358]
[146.40498352 3.96605396]
[140.84461975 17.89739799]
[135.28425598 31.82874107]
[129.72389221 45.76008606]
[124.16352844 59.69142914]
[118.60316467 73.62277222]
[130.37303162 89.07688141]
[131.14160156 108.48740387]
[144.30114746 115.68647003]
[157.46069336 122.88552856]
[170.62022400 130.08459473]
[183.77976990 137.28366089]
[197.06161499 144.25450134]
[210.46179199 150.99505615]
[223.86196899 157.73561096]
[237.26216125 164.47616577]
[250.66233826 171.21672058]
[267.52920532 172.93289185]
[270.54931641 189.61567688]
[255.35455322 197.13601685]
[243.92178345 184.61691284]
[230.52160645 177.87635803]
[217.12141418 171.13580322]
[203.72123718 164.39524841]
[190.32106018 157.65467834]
[182.77009583 157.45762634]
[176.58070374 150.44319153]
[163.42117310 143.24414062]
[150.26162720 136.04507446]
[137.10208130 128.84600830]
[123.94254303 121.64694977]
[114.32946777 128.92234802]
[102.71733856 132.16288757]
[90.72612762 130.91651917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[11 26]
[12 25]
[13 24]
[15 22]
[16 21]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
