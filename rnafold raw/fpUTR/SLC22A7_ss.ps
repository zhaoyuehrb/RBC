%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCCACCUCCAGAGUCCAAGGGUCUAUGUGGUGGGCAGUUUGAGCUGGCUGGAUACUAGAGGGAGGCUGCACCUGAAGCAUUUGGUGGGUGAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[173.60464478 162.84147644]
[170.24578857 156.80702209]
[157.83958435 148.37577820]
[145.43336487 139.94451904]
[133.02716064 131.51327515]
[120.62094879 123.08202362]
[103.01412964 130.80451965]
[84.24433899 126.64137268]
[71.55372620 112.19888306]
[69.83885193 93.04957581]
[56.47375107 86.23971558]
[43.10865402 79.42985535]
[29.74355507 72.62000275]
[16.37845802 65.81014252]
[2.80605149 59.42345428]
[-10.96026802 53.46623611]
[-24.72658730 47.50901794]
[-40.46461105 49.12924957]
[-49.07227325 36.97369766]
[-62.83859253 31.01647949]
[-76.60491180 25.05926132]
[-90.37123108 19.10204315]
[-108.51516724 21.70699120]
[-118.54470062 7.40110493]
[-132.49134827 1.87923658]
[-146.43798828 -3.64263177]
[-160.38464355 -9.16450024]
[-174.33128357 -14.68636799]
[-188.27793884 -20.20823669]
[-205.23059082 -20.41726494]
[-209.72270203 -36.76527405]
[-195.25711060 -45.60740280]
[-182.75607300 -34.15488434]
[-168.80941772 -28.63301468]
[-154.86277771 -23.11114693]
[-140.91612244 -17.58927917]
[-126.96948242 -12.06741047]
[-113.02283478 -6.54554224]
[-101.68374634 -11.07265949]
[-89.95125580 -6.44363689]
[-84.41400909 5.33572340]
[-70.64768982 11.29294205]
[-56.88137436 17.25016022]
[-43.11505508 23.20737839]
[-28.36168861 21.16104507]
[-18.76936913 33.74269867]
[-5.00304937 39.69991684]
[8.76326942 45.65713501]
[13.60870647 44.68566895]
[19.09961700 46.87915039]
[23.18831444 52.44504547]
[36.55341339 59.25490189]
[49.91851044 66.06475830]
[63.28360748 72.87461853]
[76.64870453 79.68447113]
[84.95531464 72.95076752]
[95.05758667 69.44552612]
[105.74975586 69.58711243]
[115.75566101 73.35862732]
[123.88105011 80.30992889]
[129.15611267 89.61134338]
[130.95124817 100.15269470]
[129.05220032 110.67581940]
[141.45840454 119.10706329]
[153.86462402 127.53831482]
[166.27082825 135.96957397]
[178.67703247 144.40081787]
[191.34194946 152.43821716]
[204.25308228 160.07383728]
[217.16421509 167.70945740]
[230.07534790 175.34507751]
[242.98648071 182.98071289]
[256.13107300 190.20701599]
[269.49618530 197.01686096]
[282.86126709 203.82672119]
[296.22637939 210.63658142]
[301.80554199 210.32167053]
[306.41387939 212.11218262]
[309.38555908 215.23675537]
[310.48339844 218.76864624]
[323.14831543 226.80604553]
[339.05563354 224.72369385]
[350.50125122 235.96546936]
[348.70504761 251.90765381]
[335.04492188 260.32077026]
[319.99975586 254.75097656]
[315.11090088 239.47096252]
[302.44598389 231.43356323]
[289.41650391 224.00167847]
[276.05142212 217.19181824]
[262.68630981 210.38197327]
[249.32121277 203.57211304]
[244.42434692 204.23741150]
[239.08200073 201.70347595]
[235.35086060 195.89183044]
[222.43972778 188.25621033]
[209.52859497 180.62059021]
[196.61746216 172.98497009]
[183.70632935 165.34934998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 48]
[16 47]
[17 46]
[19 44]
[20 43]
[21 42]
[22 41]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[68 99]
[69 98]
[70 97]
[71 96]
[72 95]
[73 92]
[74 91]
[75 90]
[76 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
