%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCUCCCUGACUUCCGGGUCGCGGUGCUUGAAGGGAGUGUUCCGUCGUUUCCGUUGCCGGCUGUUUGCAGUGGGGAAACCGAGGCAGCUCCUGCUCCCCCUAGUUCUUCCGCUCCUGUGAGGAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[79.17103577 620.93487549]
[64.08799744 621.57092285]
[49.39293671 618.11291504]
[36.17633057 610.81744385]
[25.41893005 600.22589111]
[17.91901016 587.12420654]
[14.23311615 572.48468018]
[14.63476276 557.39355469]
[19.09414673 542.97076416]
[27.28035164 530.28662109]
[38.58590698 520.28222656]
[52.17186356 513.70013428]
[67.03005981 511.02868652]
[68.44521332 496.09558105]
[69.86035919 481.16247559]
[71.27551270 466.22940063]
[72.51420593 451.28060913]
[73.57626343 436.31826782]
[74.63831329 421.35589600]
[75.70037079 406.39355469]
[67.98851013 396.99664307]
[68.81174469 384.46533203]
[78.27305603 375.60772705]
[79.68820953 360.67462158]
[81.10336304 345.74151611]
[82.51851654 330.80841064]
[72.21167755 312.98773193]
[84.54782867 295.54281616]
[84.90210724 280.54699707]
[85.25639343 265.55117798]
[73.89912415 258.43341064]
[67.51212311 246.52635193]
[67.86991119 232.91058350]
[74.98596954 221.16970825]
[87.08088684 214.44718933]
[87.78925323 199.46392822]
[88.49761963 184.48066711]
[89.20598602 169.49739075]
[89.91435242 154.51412964]
[90.62271881 139.53086853]
[91.33108521 124.54760742]
[80.34532166 117.07128143]
[74.48054504 105.14707184]
[75.26480103 91.88180542]
[82.49375916 80.73171997]
[94.28392792 74.60193634]
[95.34598541 59.63958359]
[88.60520935 45.32621765]
[97.22422791 33.17871475]
[98.28628540 18.21636200]
[99.34833527 3.25400782]
[100.41039276 -11.70834637]
[101.47245026 -26.67070007]
[94.73167419 -40.98406601]
[103.35069275 -53.13156891]
[104.41274261 -68.09391785]
[105.47480011 -83.05627441]
[97.02189636 -99.36583710]
[107.29873657 -113.54060364]
[108.00710297 -128.52386475]
[100.93013763 -142.67404175]
[109.25984955 -155.02171326]
[109.96821594 -170.00498962]
[110.67658234 -184.98825073]
[111.38494873 -199.97151184]
[103.38845062 -214.28892517]
[112.02067566 -228.23225403]
[128.40153503 -227.45782471]
[135.67979431 -212.76228333]
[126.36820984 -199.26315308]
[125.65984344 -184.27987671]
[124.95147705 -169.29661560]
[124.24311066 -154.31335449]
[131.37074280 -141.23489380]
[122.99037170 -127.81550598]
[122.28200531 -112.83223724]
[130.21365356 -103.62010956]
[129.68663025 -91.07282257]
[120.43715668 -81.99421692]
[119.37509918 -67.03186798]
[118.31304169 -52.06951141]
[125.12979126 -38.82635117]
[116.43480682 -25.60864449]
[115.37274933 -10.64629078]
[114.31069183 4.31606340]
[113.24863434 19.27841759]
[112.18658447 34.24077225]
[119.00332642 47.48393250]
[110.30834198 60.70163727]
[109.24628448 75.66399384]
[121.85655212 85.85694122]
[125.98796844 101.53643799]
[120.03781128 116.61990356]
[106.31434631 125.25597382]
[105.60597992 140.23924255]
[104.89761353 155.22250366]
[104.18924713 170.20576477]
[103.48088074 185.18902588]
[102.77251434 200.17228699]
[102.06414795 215.15556335]
[115.38204956 225.50869751]
[119.89424896 241.59083557]
[114.02330017 257.05117798]
[100.25220490 265.90545654]
[99.89792633 280.90127563]
[99.54364014 295.89709473]
[107.03266144 301.90155029]
[110.80962372 310.57525635]
[110.12404633 319.87185669]
[105.26215363 327.66253662]
[97.45161438 332.22357178]
[96.03646088 347.15667725]
[94.62130737 362.08978271]
[93.20615387 377.02285767]
[101.27148438 393.52752686]
[90.66272736 407.45562744]
[89.60066986 422.41796875]
[88.53861237 437.38031006]
[87.47656250 452.34268188]
[90.00768280 461.22113037]
[86.20861053 467.64453125]
[84.79345703 482.57763672]
[83.37830353 497.51074219]
[81.96315765 512.44384766]
[96.05503082 517.85876465]
[108.16271973 526.87579346]
[117.38774872 538.82574463]
[123.04556274 552.82183838]
[124.71631622 567.82556152]
[122.27601624 582.72344971]
[115.90576172 596.41003418]
[106.07826233 607.86968994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 124]
[14 123]
[15 122]
[16 121]
[17 119]
[18 118]
[19 117]
[20 116]
[23 114]
[24 113]
[25 112]
[26 111]
[28 106]
[29 105]
[30 104]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[46 90]
[47 89]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[55 81]
[56 80]
[57 79]
[59 76]
[60 75]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
