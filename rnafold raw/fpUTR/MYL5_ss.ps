%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUGGCAGCCGGAGUCUGAACUGUCCUGGGGGACCAAGCAGGAGCUUAAGAUGGGCAAGACCUGGGGCCCUGGGCAGACGCAUCAAAGCAGGCAGAAGCAGGC\
) } def
/len { sequence length } bind def

/coor [
[78.67877960 286.44042969]
[74.67683411 301.26879883]
[63.78554916 312.09817505]
[48.93462753 316.01553345]
[34.11889267 311.96713257]
[23.32370377 301.04196167]
[19.45291138 286.17883301]
[23.54773712 271.37585449]
[34.50669861 260.61495972]
[49.38188553 256.79077148]
[53.33569336 242.32124329]
[57.28949738 227.85169983]
[53.18056870 213.53507996]
[64.28179169 202.26239014]
[56.69824982 189.49424744]
[60.50185013 174.76376343]
[73.94567108 166.89601135]
[77.89948273 152.42648315]
[81.85328674 137.95693970]
[85.80709839 123.48741150]
[73.72707367 107.92656708]
[75.18534851 88.28120422]
[89.43048096 74.67446899]
[87.65638733 59.77975464]
[85.88228607 44.88503647]
[84.10819244 29.99032211]
[82.33409119 15.09560585]
[80.55999756 0.20088898]
[76.76683044 -5.53207541]
[76.59249115 -11.41732311]
[79.14911652 -15.62534714]
[78.26050568 -30.59900284]
[77.37189484 -45.57265854]
[76.48329163 -60.54631424]
[72.80103302 -69.08602142]
[75.79690552 -75.97560120]
[75.35240173 -90.96901703]
[66.87442780 -98.10226440]
[63.87267303 -108.53715515]
[67.12904358 -118.66287994]
[75.30297089 -125.11701965]
[75.74746704 -140.11042786]
[76.19197083 -155.10385132]
[76.63646698 -170.09725952]
[65.17917633 -188.07685852]
[76.18220520 -205.43049622]
[75.29359436 -220.40415955]
[74.40499115 -235.37780762]
[73.51638031 -250.35147095]
[72.62776947 -265.32513428]
[65.65373230 -280.77825928]
[78.57233429 -291.75759888]
[92.69882965 -282.38323975]
[87.60142517 -266.21374512]
[88.49003601 -251.24008179]
[89.37864685 -236.26641846]
[90.26725769 -221.29277039]
[91.15586090 -206.31910706]
[98.89362335 -201.41807556]
[103.49465179 -193.33766174]
[103.76893616 -183.90393066]
[99.52181244 -175.32026672]
[91.62988281 -169.65275574]
[91.18537903 -154.65934753]
[90.74088287 -139.66593933]
[90.29637909 -124.67252350]
[100.77692413 -108.53715515]
[90.34581757 -91.41351318]
[90.79031372 -76.42010498]
[91.45694733 -61.43492508]
[92.34555054 -46.46126938]
[93.23416138 -31.48761177]
[94.12277222 -16.51395607]
[95.45471191 -1.57320857]
[97.22880554 13.32150745]
[99.00290680 28.21622467]
[100.77700806 43.11093903]
[102.55110168 58.00565720]
[104.32520294 72.90037537]
[117.15196991 78.57788849]
[125.49748230 89.85231018]
[127.18131256 103.77800751]
[140.90849304 109.82485962]
[155.54797363 103.86993408]
[170.07775879 110.08774567]
[175.87756348 124.78936768]
[169.50648499 139.25259399]
[154.74436951 144.89665222]
[140.34930420 138.37300110]
[134.86164856 123.55204010]
[121.13446045 117.50518799]
[116.86468506 121.64900970]
[111.80211639 124.77513123]
[106.18473816 126.73660278]
[100.27662659 127.44122314]
[96.32282257 141.91075134]
[92.36901093 156.38029480]
[88.41520691 170.84982300]
[95.98992920 184.46089172]
[91.77408600 199.07873535]
[78.75132751 206.21620178]
[82.57745361 221.56779480]
[71.75903320 231.80551147]
[67.80522156 246.27505493]
[63.85141754 260.74456787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 105]
[11 104]
[12 103]
[14 101]
[17 98]
[18 97]
[19 96]
[20 95]
[23 79]
[24 78]
[25 77]
[26 76]
[27 75]
[28 74]
[31 73]
[32 72]
[33 71]
[34 70]
[36 69]
[37 68]
[41 66]
[42 65]
[43 64]
[44 63]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
