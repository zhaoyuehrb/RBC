%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCACUUCCGGGUGUUGUCUGGCCGCCGUAGCGCGUCUUGGGUCUCCCGGCUGCCGCUGCUGCCGCCGCCGCCUCGGGUCGUGGAGCCAGGAGCGACGUCACCGCC\
) } def
/len { sequence length } bind def

/coor [
[93.17500305 291.71078491]
[81.48789215 301.39459229]
[67.09056091 306.19888306]
[51.93012619 305.47393799]
[38.05690384 299.31777954]
[27.34714317 288.56298828]
[21.24924660 274.66406250]
[20.58790588 259.50073242]
[25.45256042 245.12367249]
[35.18530655 233.47729492]
[48.46987152 226.13667297]
[63.50962830 224.09455872]
[66.96886444 209.49888611]
[70.42810059 194.90321350]
[73.88734436 180.30754089]
[69.29370880 166.13899231]
[80.00498962 154.49514771]
[83.46422577 139.89947510]
[86.92346954 125.30379486]
[90.38270569 110.70812225]
[86.70922852 104.42524719]
[86.63803101 97.34432220]
[75.14736176 87.70250702]
[63.65669632 78.06069183]
[48.11170959 75.11722565]
[43.33549500 61.00917816]
[31.84482956 51.36736298]
[20.35416222 41.72554779]
[8.86349583 32.08373642]
[-9.27869415 29.38414764]
[-14.77938557 12.78963566]
[-26.54562187 3.48610353]
[-38.44592285 -5.64531755]
[-54.13575363 -7.67994118]
[-59.72420120 -21.48640823]
[-75.74237061 -20.59330559]
[-86.31989288 -32.65546417]
[-83.34258270 -48.41983032]
[-69.09439087 -55.79333115]
[-54.50530243 -49.11964417]
[-50.76681900 -33.51825714]
[-35.93758392 -32.12432480]
[-29.48854256 -17.67716599]
[-22.13024712 -16.18435669]
[-17.24208832 -8.28013134]
[-5.47585344 1.02340102]
[6.67032957 -0.05039403]
[16.56998062 7.73855543]
[18.50531006 20.59306908]
[29.99597740 30.23488235]
[41.48664474 39.87669754]
[52.97731018 49.51851273]
[67.70040894 51.77232742]
[73.29851532 66.57002258]
[84.78917694 76.21183777]
[96.27984619 85.85365295]
[110.96995544 88.88691711]
[125.33979797 84.58486938]
[139.70964050 80.28282166]
[150.71098328 68.91263580]
[165.12265015 72.67465973]
[179.49249268 68.37261200]
[193.86233521 64.07056427]
[204.86367798 52.70037842]
[219.27534485 56.46240997]
[230.27668762 45.09222031]
[244.68836975 48.85425186]
[259.05819702 44.55220413]
[273.42803955 40.25015259]
[287.79788208 35.94810486]
[298.79922485 24.57791901]
[313.21090698 28.33994865]
[327.58074951 24.03790092]
[341.95059204 19.73585129]
[355.39019775 9.40080738]
[369.04180908 19.45417023]
[363.16046143 35.35530853]
[346.25265503 34.10569382]
[331.88281250 38.40774155]
[317.51296997 42.70979309]
[307.53945923 53.77226639]
[292.09994507 50.31794739]
[277.73010254 54.61999512]
[263.36026001 58.92204666]
[248.99041748 63.22409439]
[239.01690674 74.28656769]
[223.57740784 70.83225250]
[213.60389709 81.89472961]
[198.16438293 78.44040680]
[183.79454041 82.74245453]
[169.42469788 87.04450226]
[159.45118713 98.10697937]
[144.01168823 94.65266418]
[129.64184570 98.95471191]
[115.27200317 103.25675964]
[104.97837830 114.16736603]
[101.51914215 128.76303101]
[98.05989838 143.35870361]
[94.60066223 157.95437622]
[98.94686890 173.16691589]
[88.48301697 183.76676941]
[85.02377319 198.36244202]
[81.56453705 212.95811462]
[78.10530090 227.55378723]
[90.62881470 236.12852478]
[99.20587158 248.65045166]
[102.67648315 263.42608643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 104]
[13 103]
[14 102]
[15 101]
[17 99]
[18 98]
[19 97]
[20 96]
[22 56]
[23 55]
[24 54]
[26 52]
[27 51]
[28 50]
[29 49]
[31 46]
[32 45]
[33 43]
[35 41]
[57 95]
[58 94]
[59 93]
[61 91]
[62 90]
[63 89]
[65 87]
[67 85]
[68 84]
[69 83]
[70 82]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
