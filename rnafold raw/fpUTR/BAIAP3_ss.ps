%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACACGGGCGAGGGGAGGAAGAAGGCGCCUCGGGCUCCGGUCUCCUGCGCUCCUGCUGGGCGCCAGCGGCUGGACCUUGGCAGCCGUCUGAGGCUUCGGGGAGCCCAAGGCCACCGGCAGCGCUUGUUAGAAUGCAGAUUCCCGGGGUUCGACUGGA\
) } def
/len { sequence length } bind def

/coor [
[131.29351807 222.29158020]
[127.94950104 211.33999634]
[128.44177246 200.20184326]
[132.51367188 190.14773560]
[139.51145935 182.25827026]
[132.14015198 169.19442749]
[124.76885223 156.13058472]
[117.39755249 143.06674194]
[110.02625275 130.00289917]
[102.65494537 116.93906403]
[88.69959259 111.43924713]
[74.39755249 115.96160889]
[60.09552002 120.48397827]
[49.27020645 132.02188110]
[34.80242157 128.48175049]
[23.97710991 140.01965332]
[9.50932407 136.47953796]
[-4.79271221 141.00190735]
[-19.09474754 145.52426147]
[-33.39678574 150.04663086]
[-40.68223572 155.64648438]
[-48.02624893 154.51403809]
[-62.41484451 158.75294495]
[-74.76371765 172.37940979]
[-91.64246368 167.65928650]
[-105.94449615 172.18164062]
[-116.76980591 183.71954346]
[-131.23759460 180.17942810]
[-145.53962708 184.70179749]
[-159.84165955 189.22415161]
[-173.12088013 199.76451111]
[-186.92535400 189.92211914]
[-181.28906250 173.93247986]
[-164.36402893 174.92211914]
[-150.06199646 170.39974976]
[-135.75996399 165.87739563]
[-125.95762634 154.66296387]
[-110.46685791 157.87960815]
[-96.16482544 153.35723877]
[-90.28739929 142.74642944]
[-78.36692810 138.88143921]
[-66.65375519 144.36434937]
[-52.26516342 140.12544250]
[-37.91914749 135.74459839]
[-23.61711121 131.22222900]
[-9.31507492 126.69986725]
[4.98696089 122.17750549]
[14.78929520 110.96307373]
[30.28005791 114.17971802]
[40.08239365 102.96528625]
[55.57315445 106.18193817]
[69.87519073 101.65957642]
[84.17723083 97.13721466]
[94.83609009 86.58312988]
[99.49952698 72.32646942]
[104.16295624 58.06980896]
[108.82639313 43.81314850]
[113.48982239 29.55648804]
[118.15325928 15.29982662]
[122.81668854 1.04316485]
[115.50270081 -7.22868824]
[112.36004639 -17.71397018]
[113.89157104 -28.45592499]
[119.73551178 -37.48473740]
[128.74682617 -43.17873764]
[127.85821533 -58.15239334]
[126.96960449 -73.12605286]
[125.93311310 -88.09019470]
[124.74884033 -103.04337311]
[123.56456757 -117.99655151]
[122.38029480 -132.94972229]
[121.19602203 -147.90290833]
[120.01174927 -162.85607910]
[106.70745850 -170.84202576]
[100.66908264 -185.13600159]
[104.21850586 -200.24166870]
[115.99089813 -210.35060120]
[131.45953369 -211.57569885]
[144.67640686 -203.44589233]
[150.55937195 -189.08724976]
[146.84628296 -174.02098083]
[134.96492004 -164.04035950]
[136.14920044 -149.08717346]
[137.33346558 -134.13400269]
[138.51774597 -119.18082428]
[139.70201111 -104.22764587]
[140.88629150 -89.27446747]
[144.56900024 -82.82043457]
[141.94326782 -74.01465607]
[142.83187866 -59.04100418]
[143.72047424 -44.06734848]
[148.03674316 -42.53145218]
[151.99536133 -40.22528458]
[164.00750732 -49.20905685]
[176.01966858 -58.19282913]
[188.03181458 -67.17659760]
[200.04397583 -76.16036987]
[206.46128845 -90.62165833]
[221.28741455 -92.04814148]
[233.29957581 -101.03191376]
[245.31172180 -110.01568604]
[254.37460327 -124.34399414]
[270.65182495 -119.60176849]
[270.60089111 -102.64790344]
[254.29550171 -98.00352478]
[242.28334045 -89.01976013]
[230.27119446 -80.03598785]
[224.71307373 -66.21728516]
[209.02774048 -64.14821625]
[197.01559448 -55.16444778]
[185.00343323 -46.18067551]
[172.99128723 -37.19690323]
[160.97912598 -28.21313095]
[158.05990601 -5.24226952]
[137.07334900 5.70659781]
[132.40991211 19.96325874]
[127.74648285 34.21992111]
[123.08305359 48.47658157]
[118.41961670 62.73324203]
[113.75618744 76.98990631]
[109.09275055 91.24656677]
[115.41815186 98.30019379]
[115.71878815 109.56776428]
[123.09008789 122.63160706]
[130.46139526 135.69544983]
[137.83268738 148.75927734]
[145.20399475 161.82312012]
[152.57530212 174.88696289]
[174.98214722 174.96609497]
[192.83334351 190.81773376]
[195.93423462 215.96771240]
[207.58209229 225.41902161]
[219.22994995 234.87034607]
[230.87780762 244.32165527]
[247.14886475 246.36730957]
[253.26257324 261.58422852]
[242.92967224 274.31854248]
[226.77975464 271.47030640]
[221.42648315 255.96951294]
[209.77862549 246.51820374]
[198.13076782 237.06687927]
[186.48291016 227.61557007]
[174.29560852 236.36026001]
[179.51863098 250.42155457]
[184.74165344 264.48284912]
[189.96467590 278.54412842]
[204.75389099 283.62484741]
[212.77291870 297.04977417]
[210.23545837 312.48010254]
[198.33959961 322.63012695]
[182.70220947 322.70724487]
[170.70677185 312.67510986]
[168.01719666 297.27056885]
[175.90338135 283.76718140]
[170.68035889 269.70587158]
[165.45733643 255.64457703]
[160.23431396 241.58328247]
[148.27301025 238.48454285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 128]
[6 127]
[7 126]
[8 125]
[9 124]
[10 123]
[11 53]
[12 52]
[13 51]
[15 49]
[17 47]
[18 46]
[19 45]
[20 44]
[22 43]
[23 42]
[25 39]
[26 38]
[28 36]
[29 35]
[30 34]
[54 121]
[55 120]
[56 119]
[57 118]
[58 117]
[59 116]
[60 115]
[65 91]
[66 90]
[67 89]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
[99 107]
[100 106]
[101 105]
[131 142]
[132 141]
[133 140]
[134 139]
[143 157]
[144 156]
[145 155]
[146 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
