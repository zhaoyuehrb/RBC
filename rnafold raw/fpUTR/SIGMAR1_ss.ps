%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCGAGCCGUACCACGGCGGUGGCGGGGGAGCGCUUCGUGGGCAGCCGGCGGGCUCCGAGGCCGUGAGCGCAAAGCCUCAGGCCCCGGCUCCCUCCUGAGCUGCGCCGUGCCAGGCCGCCCGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[124.96530914 547.16278076]
[136.41926575 536.69439697]
[134.61120605 521.80377197]
[132.80316162 506.91311646]
[130.99510193 492.02249146]
[129.18705750 477.13186646]
[125.21757507 470.80700684]
[127.51971436 461.86013794]
[126.07200623 446.93014526]
[124.62429810 432.00018311]
[112.49232483 426.29464722]
[104.72258759 415.23608398]
[103.44740295 401.67208862]
[109.10942841 389.16131592]
[120.31707001 381.03967285]
[119.23054504 366.07910156]
[118.14402771 351.11849976]
[117.05750275 336.15789795]
[115.97097778 321.19729614]
[114.88446045 306.23669434]
[113.79793549 291.27609253]
[110.13866425 284.76687622]
[112.87037659 275.94165039]
[112.14567566 260.95916748]
[111.42097473 245.97668457]
[110.69627380 230.99420166]
[109.24856567 216.06422424]
[107.08123016 201.22163391]
[104.91388702 186.37902832]
[102.74655151 171.53643799]
[100.57921600 156.69384766]
[98.41188049 141.85124207]
[96.24454498 127.00865173]
[94.07720947 112.16605377]
[86.31714630 99.32933044]
[74.18189240 90.51255798]
[62.04663467 81.69577789]
[53.16759872 79.14443970]
[49.72813797 72.51642609]
[37.80947113 63.40898514]
[25.89080811 54.30154800]
[10.22770023 52.07048798]
[4.81269264 38.19507980]
[-7.10597277 29.08764076]
[-23.36250496 24.27500153]
[-23.23819923 7.32150888]
[-6.91284513 2.74776244]
[2.00146508 17.16897583]
[13.92013073 26.27641296]
[28.73073578 27.85605049]
[34.99824524 42.38288498]
[46.91691208 51.49032211]
[58.83557510 60.59775925]
[70.86341095 69.56052399]
[82.99867249 78.37729645]
[95.13392639 87.19407654]
[102.39376831 85.31135559]
[116.91345978 81.54590607]
[124.17330170 79.66318512]
[130.49432373 66.06006622]
[129.29296875 50.28453827]
[141.67301941 42.00300980]
[147.99403381 28.39989281]
[154.31504822 14.79677773]
[160.63606262 1.19366264]
[161.43397522 -8.01013851]
[167.27769470 -12.65894127]
[173.92556763 -26.10534477]
[180.57344055 -39.55175018]
[187.22131348 -52.99815369]
[188.24137878 -62.17998505]
[194.19573975 -66.68622589]
[201.16658020 -79.96806335]
[203.17362976 -96.80279541]
[219.90605164 -99.53450775]
[227.16300964 -84.21219635]
[214.44842529 -72.99721527]
[207.47756958 -59.71537781]
[200.66772461 -46.35028076]
[194.01985168 -32.90387726]
[187.37197876 -19.45747185]
[180.72410583 -6.01106787]
[174.23918152 7.51467943]
[167.91816711 21.11779404]
[161.59715271 34.72090912]
[155.27612305 48.32402420]
[156.92959595 63.12656784]
[144.09744263 72.38108826]
[137.77641296 85.98419952]
[108.91980743 109.99871826]
[111.08714294 124.84131622]
[113.25447845 139.68391418]
[115.42181396 154.52650452]
[117.58914948 169.36909485]
[119.75648499 184.21170044]
[121.92382050 199.05429077]
[124.09115601 213.89689636]
[127.06873322 217.37158203]
[128.56784058 221.23432922]
[128.65464783 224.95124817]
[127.56863403 228.06965637]
[125.67875671 230.26950073]
[126.40345764 245.25198364]
[127.12815857 260.23446655]
[127.85285950 275.21694946]
[128.75852966 290.18957520]
[129.84506226 305.15017700]
[130.93157959 320.11077881]
[132.01809692 335.07138062]
[133.10462952 350.03198242]
[134.19114685 364.99255371]
[135.27766418 379.95315552]
[149.73510742 388.63879395]
[156.13813782 404.06283569]
[152.16209412 420.11242676]
[139.55427551 430.55245972]
[141.00198364 445.48245239]
[142.44969177 460.41241455]
[144.07769775 475.32382202]
[145.88574219 490.21444702]
[147.69378662 505.10507202]
[149.50184631 519.99572754]
[151.30989075 534.88635254]
[164.93624878 542.30938721]
[171.56661987 556.33856201]
[168.65148926 571.57934570]
[157.31176758 582.17138672]
[141.90783691 584.04174805]
[128.36279297 576.47131348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 123]
[3 122]
[4 121]
[5 120]
[6 119]
[8 118]
[9 117]
[10 116]
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[21 106]
[23 105]
[24 104]
[25 103]
[26 102]
[27 97]
[28 96]
[29 95]
[30 94]
[31 93]
[32 92]
[33 91]
[34 90]
[35 56]
[36 55]
[37 54]
[39 53]
[40 52]
[41 51]
[43 49]
[44 48]
[59 89]
[60 88]
[62 86]
[63 85]
[64 84]
[65 83]
[67 82]
[68 81]
[69 80]
[70 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
