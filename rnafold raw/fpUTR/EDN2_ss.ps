%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUAUCUGCUCAGCUUAAUAGCAGGACGCUGGCAACAGGCACUCCCUGCUCCAGUCCAGCCUGCGCGCUCCACCGCCGCU\
) } def
/len { sequence length } bind def

/coor [
[72.36439514 116.98726654]
[64.78260040 129.93008423]
[57.20080185 142.87289429]
[49.61900330 155.81570435]
[52.26589584 171.63888550]
[41.43837738 183.47715759]
[25.44238853 182.24917603]
[16.54868507 168.89695740]
[21.57975578 153.66319275]
[36.67619324 148.23390198]
[44.25799179 135.29109192]
[51.83979034 122.34828186]
[59.42158890 109.40547180]
[45.83653259 103.04573059]
[36.72079849 91.13340759]
[34.13275909 76.35836029]
[38.65680695 62.05685806]
[49.27138901 51.45824432]
[63.57968903 46.95573044]
[78.35082245 49.56600952]
[90.24940491 58.69966888]
[96.58868408 72.29428101]
[95.93753052 87.27906799]
[99.31487274 72.66422272]
[102.69220734 58.04938507]
[106.06954956 43.43454361]
[109.44689178 28.81970215]
[98.78427124 13.40386486]
[102.45669556 -4.65816212]
[117.76478577 -14.35172939]
[120.02715302 -29.18013763]
[122.28951263 -44.00854492]
[124.55187988 -58.83695602]
[126.81424713 -73.66536713]
[124.99063873 -82.87882996]
[129.45304871 -89.00781250]
[124.45005035 -104.01716614]
[134.44352722 -115.06161499]
[137.26539612 -129.79379272]
[140.08726501 -144.52597046]
[142.90913391 -159.25814819]
[135.12774658 -173.28773499]
[141.37786865 -188.06324768]
[156.86494446 -192.25015259]
[169.70860291 -182.63664246]
[170.05630493 -166.59735107]
[157.64131165 -156.43626404]
[154.81944275 -141.70408630]
[151.99757385 -126.97191620]
[149.17570496 -112.23973846]
[154.38053894 -98.28413391]
[144.18522644 -86.18593597]
[141.64265442 -71.40299988]
[139.38029480 -56.57459259]
[137.11791992 -41.74618149]
[134.85556030 -26.91777420]
[132.59320068 -12.08936405]
[141.37539673 -4.35819626]
[145.26489258 6.80546284]
[143.14497375 18.55912018]
[135.44537354 27.84757996]
[124.06172943 32.19704056]
[120.68438721 46.81188202]
[117.30705261 61.42672348]
[113.92971039 76.04156494]
[110.55237579 90.65640259]
[113.92971039 105.27124786]
[123.37686920 116.92247772]
[132.82402039 128.57371521]
[142.48999023 140.04408264]
[158.27421570 140.83995056]
[168.81047058 152.61972046]
[167.84776306 168.39465332]
[155.95726013 178.80577087]
[140.19337463 177.67634583]
[129.90855408 165.67642212]
[131.20458984 149.92536926]
[124.25627136 146.89248657]
[121.17279816 138.02087402]
[111.72563934 126.36963654]
[102.27848053 114.71840668]
[94.79995728 115.28562164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[36 52]
[38 50]
[39 49]
[40 48]
[41 47]
[67 81]
[68 80]
[69 79]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
