%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGAUGGCCCGCGCGCCUCGGCGCUGCCUCUCGGAGCUCACGGCGGAGCGGCGGCGGCCGCGCUCGAGGGGCGCGCGGCUGCAGCGGCGGCGGCGCCGCGCGUGAGGGGCCGCCUAAGGCCGAGCGGGCGCGGCGAGCGGCCGGGCGAGCGCAGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[98.84463501 129.84718323]
[90.15557098 129.31715393]
[86.39121246 143.83712769]
[82.62685394 158.35710144]
[87.51902771 174.00953674]
[76.21218109 185.88755798]
[60.33783722 181.77207947]
[56.22615814 165.89674377]
[68.10688019 154.59274292]
[71.87123871 140.07276917]
[75.63559723 125.55279541]
[67.22615051 113.13180542]
[52.34664154 111.23438263]
[37.46712875 109.33695984]
[22.58762169 107.43954468]
[7.91957426 113.36904144]
[-3.72673535 104.08396149]
[-18.60624504 102.18653870]
[-33.48575211 100.28911591]
[-48.36526489 98.39170074]
[-63.24477386 96.49427795]
[-78.14208221 94.74211884]
[-93.05578613 93.13538361]
[-107.96948242 91.52864838]
[-122.88317871 89.92191315]
[-137.43273926 96.13648987]
[-149.25799561 87.08041382]
[-164.17170715 85.47367859]
[-179.08540344 83.86694336]
[-189.63226318 91.34886932]
[-202.04919434 89.67190552]
[-209.72445679 80.28130341]
[-224.60397339 78.38388062]
[-239.48347473 76.48646545]
[-251.90527344 85.88522339]
[-266.96820068 83.74900055]
[-275.85192871 71.84879303]
[-290.73141479 69.95137787]
[-305.61093140 68.05395508]
[-320.49044800 66.15653229]
[-332.83465576 76.02546692]
[-348.53225708 74.19216919]
[-358.27014160 61.74430466]
[-356.27096558 46.06696701]
[-343.72085571 36.46124649]
[-328.06552124 38.62604523]
[-318.59301758 51.27702332]
[-303.71350098 53.17444611]
[-288.83401489 55.07186508]
[-273.95449829 56.96928406]
[-262.36862183 47.67934036]
[-247.25164795 49.39163208]
[-237.58605957 61.60695267]
[-222.70655823 63.50437546]
[-207.82704163 65.40179443]
[-192.06002808 57.74588776]
[-177.47866821 68.95324707]
[-162.56497192 70.55998230]
[-147.65127563 72.16671753]
[-134.16844177 65.83721924]
[-121.27645111 75.00821686]
[-106.36274719 76.61495209]
[-91.44905090 78.22168732]
[-76.53535461 79.82842255]
[-69.51262665 77.40597534]
[-61.34735107 81.61476898]
[-46.46784210 83.51219177]
[-31.58833313 85.40960693]
[-16.70882416 87.30702972]
[-1.82931507 89.20445251]
[11.77444935 83.13923645]
[24.48504257 92.56003571]
[39.36455154 94.45745087]
[54.24406052 96.35487366]
[69.12357330 98.25229645]
[82.98984528 76.74369812]
[106.63803101 74.13773346]
[122.27933502 89.59822845]
[137.15884399 87.70080566]
[152.03836060 85.80339050]
[166.91786194 83.90596771]
[181.79737854 82.00854492]
[196.67687988 80.11112213]
[204.84216309 75.90233612]
[211.86488342 78.32477570]
[226.77857971 76.71804047]
[238.46249390 60.43092728]
[258.04660034 57.94394302]
[272.96514893 70.40514374]
[287.75930786 67.92862701]
[302.55346680 65.45211029]
[317.34759521 62.97559357]
[329.68096924 53.06605148]
[343.51101685 58.59588242]
[358.30514526 56.11936951]
[373.04815674 53.35466385]
[387.73443604 50.30282211]
[402.42068481 47.25098419]
[417.10696411 44.19914246]
[431.79321289 41.14730072]
[446.47946167 38.09546280]
[461.16574097 35.04362106]
[473.10305786 24.66042709]
[487.13833618 29.64645386]
[501.82458496 26.59461403]
[508.27389526 12.60487938]
[521.56878662 5.18195009]
[536.50854492 6.98948002]
[547.38897705 17.12622070]
[562.07525635 14.07438087]
[576.76153564 11.02254105]
[591.44781494 7.97070074]
[599.90502930 -5.38036156]
[615.34387207 -8.75925732]
[628.60479736 -0.16134706]
[631.82025146 15.31238079]
[623.08264160 28.48163795]
[607.57574463 31.53333855]
[594.49963379 22.65696144]
[579.81335449 25.70880127]
[565.12707520 28.76064301]
[550.44085693 31.81248283]
[544.49963379 45.44480515]
[531.51684570 53.05471420]
[516.36535645 51.54300690]
[504.87643433 41.28087616]
[490.19018555 44.33271408]
[479.30331421 54.49762344]
[464.21755981 49.72988510]
[449.53131104 52.78172302]
[434.84506226 55.83356476]
[420.15878296 58.88540268]
[405.47253418 61.93724442]
[390.78625488 64.98908234]
[376.10000610 68.04092407]
[372.75527954 71.51419067]
[367.17599487 72.89148712]
[360.78167725 70.91352081]
[345.98751831 73.39002991]
[334.71234131 83.12243652]
[319.82412720 77.76974487]
[305.02996826 80.24626160]
[290.23580933 82.72277832]
[275.44168091 85.19928741]
[271.91687012 94.93240356]
[264.59408569 102.36333466]
[254.76211548 106.08786011]
[244.19215393 105.36272430]
[234.81863403 100.25283051]
[228.38531494 91.63173676]
[213.47161865 93.23847198]
[198.57431030 94.99063110]
[183.69479370 96.88805389]
[168.81529236 98.78547668]
[153.93577576 100.68289948]
[139.05625916 102.58031464]
[124.17675781 104.47773743]
[122.88210297 111.57741547]
[119.46949768 118.27180481]
[114.07634735 123.92282104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[12 75]
[13 74]
[14 73]
[15 72]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[22 64]
[23 63]
[24 62]
[25 61]
[27 59]
[28 58]
[29 57]
[32 55]
[33 54]
[34 53]
[37 50]
[38 49]
[39 48]
[40 47]
[78 157]
[79 156]
[80 155]
[81 154]
[82 153]
[83 152]
[85 151]
[86 150]
[89 144]
[90 143]
[91 142]
[92 141]
[94 139]
[95 138]
[96 135]
[97 134]
[98 133]
[99 132]
[100 131]
[101 130]
[102 129]
[104 127]
[105 126]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
