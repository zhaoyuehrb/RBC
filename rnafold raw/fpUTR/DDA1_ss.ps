%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGCGCCAUCAGUGUGGGCUGUGCCGUGGCUGGAAGUUACUGUGAGGCGGCGGCUAAGAAGGCGGCUCUGGUGGCGGCGGUGGAGGCUGAGGCGGCGGCCGAGGCGGCGACGGAGGAAACAGAAG\
) } def
/len { sequence length } bind def

/coor [
[91.92826080 127.36647797]
[105.54485321 121.07455444]
[120.45587158 119.43804932]
[107.22705078 112.36709595]
[93.24774170 112.63259125]
[85.70199585 100.86171722]
[72.47318268 93.79077148]
[59.24436188 86.71981812]
[46.01554108 79.64886475]
[32.78672409 72.57791901]
[19.55790329 65.50696564]
[6.32908487 58.43601227]
[-6.89973402 51.36506271]
[-20.12855339 44.29411316]
[-35.94655609 44.61244583]
[-43.52367020 31.78915977]
[-56.75248718 24.71821022]
[-72.57049561 25.03654289]
[-80.14760590 12.21325874]
[-95.96560669 12.53159237]
[-103.54272461 -0.29169172]
[-116.77154541 -7.36264277]
[-135.52859497 -0.44549266]
[-153.13404846 -9.26502609]
[-158.65388489 -27.85296822]
[-172.36703491 -33.93158722]
[-186.08018494 -40.01020813]
[-199.79331970 -46.08882904]
[-213.50646973 -52.16744614]
[-229.25819397 -50.68633270]
[-237.75811768 -62.91746521]
[-251.47126770 -68.99608612]
[-265.18441772 -75.07469940]
[-276.16949463 -64.56772614]
[-290.34103394 -59.06901169]
[-305.53799438 -59.41707230]
[-319.44290161 -65.55883026]
[-329.93542480 -76.55771637]
[-335.41549683 -90.73648071]
[-335.04745483 -105.93296051]
[-328.88739014 -119.82980347]
[-317.87472534 -130.30784607]
[-303.68875122 -135.76925659]
[-288.49276733 -135.38121033]
[-274.60406494 -129.20289612]
[-264.14050293 -118.17643738]
[-258.69775391 -103.98330688]
[-259.10580444 -88.78784943]
[-245.39265442 -82.70922852]
[-231.67950439 -76.63060760]
[-216.90863037 -78.54650879]
[-207.42785645 -65.88059235]
[-193.71470642 -59.80197525]
[-180.00155640 -53.72335434]
[-166.28842163 -47.64473343]
[-152.57527161 -41.56611633]
[-144.19364929 -47.80033493]
[-133.88920593 -49.95482254]
[-123.55345154 -47.56431961]
[-115.11299133 -41.00431824]
[-110.17050171 -31.43391991]
[-109.70059204 -20.59146118]
[-96.47177124 -13.52051067]
[-81.59998322 -14.34460545]
[-73.07665253 -1.01556003]
[-58.20486450 -1.83965528]
[-49.68153763 11.48939037]
[-36.45272064 18.56034088]
[-21.58092880 17.73624611]
[-13.05760193 31.06529236]
[0.17121717 38.13624191]
[13.40003586 45.20719528]
[26.62885475 52.27814484]
[39.85767365 59.34909821]
[53.08649445 66.42004395]
[66.31531525 73.49099731]
[79.54412842 80.56195068]
[92.77294922 87.63290405]
[106.75225830 87.36740875]
[114.29800415 99.13828278]
[127.52681732 106.20922852]
[141.93327332 110.38702393]
[156.89263916 111.49049377]
[171.22460938 104.78936005]
[183.34820557 113.44197845]
[195.25260925 103.39594269]
[210.40780640 104.72811890]
[219.91180420 116.13906860]
[234.87115479 117.24253845]
[249.83052063 118.34600830]
[261.73492432 108.29997253]
[276.89013672 109.63214874]
[286.39410400 121.04309845]
[301.35348511 122.14656830]
[316.31283569 123.25003815]
[330.83624268 115.63410187]
[344.54696655 124.63123322]
[343.34057617 140.98594666]
[328.45809937 147.87391663]
[315.20935059 138.20939636]
[300.25000000 137.10592651]
[285.29064941 136.00245667]
[274.21517944 145.89537048]
[259.02856445 144.98939514]
[248.72705078 133.30535889]
[233.76768494 132.20188904]
[218.80833435 131.09841919]
[207.73287964 140.99134827]
[192.54623413 140.08537292]
[182.24473572 128.40133667]
[168.98275757 135.18139648]
[155.78916931 126.44985199]
[140.82980347 125.34638214]
[152.55152893 134.70593262]
[160.68954468 147.30644226]
[164.39941406 161.84042358]
[163.29620361 176.79980469]
[157.49438477 190.63232422]
[147.59594727 201.90269470]
[134.62802124 209.44145203]
[119.93618774 212.46635437]
[105.04492950 210.66351318]
[91.49939728 204.22001648]
[80.70513916 193.80445862]
[73.78219604 180.49757385]
[71.44892120 165.68016052]
[73.94741821 150.88970947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[4 80]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[16 68]
[17 67]
[19 65]
[21 63]
[22 62]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[31 50]
[32 49]
[33 48]
[82 113]
[83 112]
[85 110]
[88 107]
[89 106]
[90 105]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
