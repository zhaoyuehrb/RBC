%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACUGGCCCGCGCCGUCCGCCCGCCGACAGCUCCCUGAGCCAGCCCGGGAGGCAGCCGCGCGCAGCGAGCCGGUGGCGCAGGUGUCGGGGUCCUCGAGCGCCCAGCCUGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[231.97897339 417.14691162]
[221.23576355 408.12435913]
[214.74455261 395.63800049]
[213.52369690 381.57458496]
[217.79234314 368.07351685]
[226.93196106 357.20147705]
[220.26728821 343.76339722]
[213.60261536 330.32531738]
[206.93792725 316.88723755]
[200.27325439 303.44912720]
[193.24713135 290.19647217]
[185.86470032 277.13891602]
[178.48228455 264.08135986]
[171.09985352 251.02378845]
[163.71743774 237.96623230]
[150.86759949 236.26170349]
[141.23037720 227.30335999]
[138.51376343 214.22941589]
[143.94087219 201.81524658]
[136.91473389 188.56256104]
[129.88861084 175.30987549]
[122.86248779 162.05720520]
[116.86962128 157.56184387]
[115.83105469 148.34915161]
[109.16638184 134.91105652]
[102.50170135 121.47297668]
[95.83702850 108.03489685]
[92.24380493 106.26212311]
[89.49411774 102.85871887]
[88.32169342 98.26041412]
[89.22704315 93.22462463]
[83.67497253 79.28997040]
[78.12290192 65.35532379]
[72.57082367 51.42066956]
[60.27508545 41.46450043]
[62.75200653 26.77729225]
[57.19993591 12.84264088]
[51.64786148 -1.09201026]
[39.35211945 -11.04817867]
[41.82904434 -25.73538780]
[36.27696991 -39.67004013]
[30.53671837 -53.52823257]
[17.97587967 -63.14778900]
[20.05417252 -77.89668274]
[14.12679482 -91.67588043]
[7.82845879 -105.28951263]
[1.16378295 -118.72759247]
[-12.78429699 -127.35215759]
[-12.01885605 -143.73342896]
[2.67268538 -151.01976013]
[16.17692947 -141.71560669]
[14.60186672 -125.39227295]
[21.26654243 -111.95418549]
[25.54918671 -109.57747650]
[28.31335640 -104.41941071]
[27.90598869 -97.60325623]
[33.83336639 -83.82406616]
[45.97024155 -75.19008636]
[44.31591415 -59.45560837]
[49.92417526 -54.48871231]
[50.21162033 -45.22211075]
[55.76369476 -31.28746033]
[67.66231537 -22.32799149]
[65.58251190 -6.64408255]
[71.13458252 7.29056835]
[76.68666077 21.22521973]
[88.58528137 30.18468857]
[86.50547791 45.86859894]
[92.05754852 59.80324936]
[97.60961914 73.73789978]
[103.16169739 87.67254639]
[109.27510834 101.37021637]
[115.93978882 114.80830383]
[122.60446167 128.24638367]
[129.26913452 141.68446350]
[136.11517334 155.03108215]
[143.14129639 168.28375244]
[150.16741943 181.53643799]
[157.19354248 194.78912354]
[173.95635986 199.56327820]
[181.98153687 214.65571594]
[176.77499390 230.58380127]
[184.15740967 243.64135742]
[191.53984070 256.69891357]
[198.92225647 269.75646973]
[206.30468750 282.81402588]
[211.97750854 286.61468506]
[214.41101074 291.93676758]
[213.71133423 296.78445435]
[220.37602234 310.22256470]
[227.04069519 323.66064453]
[233.70536804 337.09872437]
[240.37004089 350.53680420]
[256.57431030 350.20108032]
[271.26370239 356.91213989]
[281.54385376 369.29229736]
[285.41317749 384.85241699]
[282.15258789 400.49224854]
[272.45843506 413.11810303]
[279.48458862 426.37075806]
[292.78469849 434.93917847]
[291.91024780 449.80807495]
[298.93637085 463.06076050]
[305.96249390 476.31344604]
[312.98864746 489.56613159]
[325.74984741 500.72802734]
[318.55679321 516.08044434]
[301.81311035 513.41845703]
[299.73596191 496.59225464]
[292.70983887 483.33956909]
[285.68371582 470.08688354]
[278.65756226 456.83419800]
[265.86001587 449.21374512]
[266.23190308 433.39688110]
[259.20578003 420.14422607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 93]
[7 92]
[8 91]
[9 90]
[10 89]
[11 86]
[12 85]
[13 84]
[14 83]
[15 82]
[19 79]
[20 78]
[21 77]
[22 76]
[24 75]
[25 74]
[26 73]
[27 72]
[31 71]
[32 70]
[33 69]
[34 68]
[36 66]
[37 65]
[38 64]
[40 62]
[41 61]
[42 59]
[44 57]
[45 56]
[46 53]
[47 52]
[99 115]
[100 114]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
