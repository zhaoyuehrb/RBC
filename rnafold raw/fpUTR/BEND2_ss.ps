%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCUGCCCGGGCCUCAUUGUGCCUCGGACAACGAGUGUACGCAGUUACCACACAGUUACCAAGCAGUUACCUCAGAGCCGCGGCGCAGACGUAGGCCUCAGGUCUCGGGCCUCAGGUCUCGGGCCUCAGAGCCAGACCCCGCCAUCUCACG\
) } def
/len { sequence length } bind def

/coor [
[210.25251770 345.80691528]
[204.90066528 331.79412842]
[199.54879761 317.78137207]
[194.19694519 303.76861572]
[188.84509277 289.75582886]
[171.74055481 283.35354614]
[164.56980896 266.21166992]
[172.28005981 248.95692444]
[166.36471558 235.17256165]
[160.44937134 221.38819885]
[154.53404236 207.60382080]
[148.61869812 193.81945801]
[142.56398010 180.09574890]
[136.37048340 166.43409729]
[130.17700195 152.77244568]
[123.98350525 139.11079407]
[117.79001617 125.44914246]
[99.11831665 129.61004639]
[82.49932098 122.10707855]
[74.14064789 106.91593170]
[76.45311737 90.63540649]
[64.78000641 81.21530151]
[53.10688782 71.79519653]
[41.43376923 62.37509537]
[29.76065254 52.95499039]
[18.08753586 43.53488922]
[2.48905611 40.88951111]
[-2.55632830 26.87546921]
[-14.22944546 17.45536613]
[-25.90256119 8.03526402]
[-38.70534515 13.74888515]
[-52.65399933 13.37783337]
[-65.01689911 7.05201149]
[-73.39766693 -3.93813562]
[-76.19964600 -17.40445709]
[-72.92982483 -30.69664001]
[-84.40962982 -40.35138702]
[-95.88943481 -50.00613403]
[-104.52581024 -53.16116333]
[-107.50148010 -59.97475052]
[-118.78325653 -69.86017609]
[-130.06503296 -79.74559784]
[-141.44639587 -89.51618958]
[-153.02345276 -99.05410004]
[-164.69656372 -108.47420502]
[-184.70060730 -110.62915802]
[-190.99703979 -128.87519836]
[-203.04232788 -137.81449890]
[-218.73519897 -139.82556152]
[-224.34436035 -153.62362671]
[-236.38964844 -162.56292725]
[-251.98495483 -160.00128174]
[-264.77496338 -169.28518677]
[-267.17160034 -184.90670776]
[-257.75296021 -197.59785461]
[-242.10699463 -199.82919312]
[-229.51614380 -190.27691650]
[-227.45034790 -174.60821533]
[-215.40505981 -165.66891479]
[-200.57374573 -164.29724121]
[-194.10302734 -149.85978699]
[-182.05773926 -140.92048645]
[-172.05305481 -143.32685852]
[-162.17953491 -139.72398376]
[-155.81431580 -131.08506775]
[-155.27647400 -120.14732361]
[-143.60334778 -110.72721863]
[-136.38050842 -108.96365356]
[-131.79165649 -100.99598694]
[-124.60603333 -99.08639526]
[-120.17960358 -91.02737427]
[-108.89782715 -81.14194489]
[-97.61605835 -71.25652313]
[-86.23468781 -61.48593521]
[-74.75488281 -51.83118820]
[-63.27508163 -42.17644501]
[-48.25239563 -48.05503845]
[-32.22010040 -45.55782700]
[-19.55156517 -35.27055359]
[-13.75055218 -19.91690063]
[-16.48245811 -3.63785291]
[-4.80934191 5.78224993]
[6.86377478 15.20235348]
[21.62731552 17.17394066]
[27.50763893 31.86177063]
[39.18075562 41.28187180]
[50.85387421 50.70197678]
[62.52698898 60.12207794]
[74.20010376 69.54218292]
[85.87322235 78.96228790]
[96.82998657 73.42017365]
[109.77233887 73.55197906]
[121.79116058 79.93316650]
[129.91252136 91.67023468]
[136.28515625 85.04221344]
[143.72013855 85.07002258]
[157.31831360 78.73840332]
[170.91650391 72.40678406]
[184.51467896 66.07516479]
[198.11286926 59.74354553]
[211.71104431 53.41192627]
[214.54814148 38.15641785]
[225.83348083 27.50650597]
[241.22764587 25.55730247]
[254.81124878 33.05831528]
[261.36114502 47.12525177]
[258.35873413 62.34908676]
[246.95851135 72.87594604]
[231.54411316 74.65803528]
[218.04266357 67.01010895]
[204.44448853 73.34172821]
[190.84629822 79.67334747]
[177.24812317 86.00496674]
[163.64993286 92.33658600]
[150.05175781 98.66820526]
[136.51843262 105.13730621]
[131.45166016 119.25565338]
[137.64515686 132.91731262]
[143.83865356 146.57894897]
[150.03213501 160.24060059]
[156.22563171 173.90225220]
[162.65687561 180.47343445]
[162.40306091 187.90412903]
[168.31840515 201.68849182]
[174.23374939 215.47285461]
[180.14907837 229.25721741]
[186.06442261 243.04159546]
[197.81947327 245.23808289]
[206.94371033 252.78082275]
[211.22401428 263.68911743]
[209.69586182 275.18579102]
[202.85784912 284.40399170]
[208.20971680 298.41674805]
[213.56156921 312.42950439]
[218.91342163 326.44229126]
[224.26528931 340.45504761]
[239.34762573 339.44790649]
[254.05638123 342.93273926]
[267.08364868 350.59963989]
[277.27105713 361.76693726]
[283.71276855 375.44158936]
[285.83593750 390.40765381]
[283.45184326 405.33438110]
[276.77239990 418.89450073]
[266.39163208 429.88223267]
[253.23249817 437.32058716]
[238.46514893 440.54812622]
[223.40269470 439.27786255]
[209.38444519 433.62274170]
[197.65692139 424.08563232]
[189.26290894 411.51455688]
[184.94882202 397.02731323]
[185.09823608 381.91213989]
[189.69787598 367.51300049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 132]
[8 127]
[9 126]
[10 125]
[11 124]
[12 123]
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[28 83]
[29 82]
[30 81]
[36 76]
[37 75]
[38 74]
[40 73]
[41 72]
[42 71]
[43 69]
[44 67]
[45 66]
[47 62]
[48 61]
[50 59]
[51 58]
[94 116]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
