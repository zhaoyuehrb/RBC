%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCUCUGUGAUGCAGGCCUGUGCUUACAGUUAAGCCUGGGCACCCUCAGUGCUCAGUUGCUUCAGGCAGCUGAGCUAUUCAGACC\
) } def
/len { sequence length } bind def

/coor [
[68.04145050 131.45927429]
[75.62908173 118.51987457]
[87.70372772 109.61598969]
[72.90132904 112.04272461]
[58.09893036 114.46945190]
[43.44962311 117.69400787]
[28.99637413 121.70693207]
[14.54312325 125.71985626]
[0.08987362 129.73278809]
[-14.36337662 133.74571228]
[-28.81662560 137.75863647]
[-36.45647812 143.18801880]
[-43.86438370 141.64541626]
[-58.45308685 145.13392639]
[-73.04179382 148.62243652]
[-81.09705353 162.21980286]
[-96.42826843 166.05767822]
[-109.93971252 157.85910034]
[-113.61527252 142.48817444]
[-105.27431488 129.06416321]
[-89.86537170 125.55131531]
[-76.53030396 134.03373718]
[-61.94160080 130.54522705]
[-47.35289383 127.05671692]
[-32.82955170 123.30538177]
[-18.37630081 119.29245758]
[-3.92305136 115.27953339]
[10.53019810 111.26660919]
[24.98344803 107.25368500]
[39.43669891 103.24076080]
[41.52058411 100.12467957]
[45.33366013 97.96785736]
[50.35414505 97.62744904]
[55.67220306 99.66705322]
[70.47460175 97.24032593]
[85.27700043 94.81359100]
[94.98779297 83.38116455]
[94.98779297 68.38116455]
[94.98779297 53.38116455]
[94.98779297 38.38116455]
[94.98779297 23.38116264]
[86.32408905 9.45736027]
[94.28821564 -4.87807465]
[110.68736267 -4.87807465]
[118.65149689 9.45736027]
[109.98779297 23.38116264]
[109.98779297 38.38116455]
[109.98779297 53.38116455]
[109.98779297 68.38116455]
[109.98779297 83.38116455]
[109.82118988 87.81783295]
[108.67196655 91.84095764]
[123.61088562 90.48865509]
[138.54980469 89.13636017]
[153.48872375 87.78406525]
[168.42764282 86.43177032]
[183.36656189 85.07947540]
[198.30548096 83.72718048]
[213.24440002 82.37487793]
[228.18331909 81.02258301]
[243.12223816 79.67028809]
[258.06115723 78.31799316]
[273.29071045 70.86832428]
[284.66519165 83.44041443]
[275.73318481 97.85068512]
[259.41345215 93.25691223]
[244.47453308 94.60920715]
[229.53561401 95.96150208]
[214.59669495 97.31379700]
[199.65777588 98.66609955]
[184.71885681 100.01839447]
[169.77993774 101.37068939]
[154.84101868 102.72298431]
[139.90209961 104.07527924]
[124.96318817 105.42757416]
[110.02426910 106.77987671]
[123.93981171 112.37965393]
[134.52305603 123.00955963]
[140.06158447 136.94960022]
[139.65921021 151.94419861]
[133.38104248 165.56715393]
[122.24294281 175.61416626]
[108.04709625 180.45959473]
[93.09049988 179.31939697]
[79.79319763 172.37808228]
[70.30678558 160.75878906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 36]
[4 35]
[5 34]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[13 24]
[14 23]
[15 22]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
