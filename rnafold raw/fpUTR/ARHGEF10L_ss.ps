%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGUCCCGGCCAUGGGCGCCCGCGGCGGCCUGCGGAGCUGGAGGCGCGGCGCCGGCCGCCAGGCGCCUUUGUGAGCGGCGCGGACGACAAAGGCGCGGGCCCGGGCAGCCGAGGUGUGUAGCUGGGACGGUGCUGGUCUGAGCUGGACCUUGUCUG\
) } def
/len { sequence length } bind def

/coor [
[301.47323608 573.19482422]
[294.92709351 559.69860840]
[288.38095093 546.20239258]
[281.83480835 532.70617676]
[275.28866577 519.20996094]
[268.74255371 505.71371460]
[262.19641113 492.21746826]
[255.65026855 478.72125244]
[249.10412598 465.22503662]
[242.55798340 451.72882080]
[236.01184082 438.23257446]
[229.46571350 424.73635864]
[222.91957092 411.24014282]
[218.73339844 408.84463501]
[216.03488159 403.76892090]
[216.39308167 397.08306885]
[210.38185120 383.34027100]
[198.19258118 374.78039551]
[199.75100708 359.03613281]
[193.73977661 345.29330444]
[187.72853088 331.55050659]
[181.71730042 317.80767822]
[175.70606995 304.06484985]
[164.53327942 299.34448242]
[159.42750549 287.90136719]
[163.63778687 275.67385864]
[157.89753723 261.81567383]
[152.15728760 247.95748901]
[146.41703796 234.09928894]
[134.39819336 225.30175781]
[136.26542664 209.59112549]
[130.52517700 195.73294067]
[124.78491974 181.87474060]
[119.04467010 168.01655579]
[113.30442047 154.15835571]
[107.81079102 149.15617371]
[107.59046173 139.97128296]
[102.12340546 126.00305939]
[83.65762329 123.18003845]
[70.40480042 107.90921783]
[70.15057373 86.15034485]
[57.06313705 78.82102203]
[43.97569656 71.49170685]
[30.88825417 64.16239166]
[15.06704998 64.17009735]
[7.74316597 51.20051575]
[-5.34427452 43.87119675]
[-18.43171501 36.54187775]
[-27.49979973 35.06518936]
[-31.70211220 28.93800545]
[-44.64312744 21.35314369]
[-61.03653717 21.78694534]
[-69.37709045 7.66719866]
[-61.08473969 -6.48090982]
[-44.68994522 -6.10301924]
[-37.05826569 8.41212845]
[-24.11725044 15.99698925]
[-11.10239601 23.45443726]
[1.98504424 30.78375626]
[15.07248402 38.11307526]
[29.95758820 37.58112717]
[38.21757507 51.07494736]
[51.30501556 58.40426636]
[64.39245605 65.73358917]
[77.47989655 73.06290436]
[90.77749634 66.12216187]
[92.24774933 51.19439316]
[93.71800995 36.26662445]
[95.18826294 21.33885193]
[96.65852356 6.41108179]
[98.12877655 -8.51668930]
[99.59903717 -23.44445992]
[101.06929016 -38.37223053]
[102.53955078 -53.30000305]
[104.00980377 -68.22777557]
[92.58237457 -78.55830383]
[89.46549225 -93.46261597]
[95.64932251 -107.18209839]
[108.57130432 -114.54146576]
[98.35269165 -126.59781647]
[99.73541260 -142.34149170]
[111.89911652 -152.43208313]
[127.62730408 -150.88298035]
[137.58871460 -138.61326599]
[135.87342834 -122.90234375]
[123.49907684 -113.07121277]
[134.73703003 -103.33229828]
[138.12550354 -88.67002106]
[132.16082764 -74.66017151]
[118.93757629 -66.75751495]
[117.46732330 -51.82974625]
[115.99706268 -36.90197372]
[114.52680969 -21.97420311]
[113.05654907 -7.04643202]
[111.58629608 7.88133860]
[110.11603546 22.80910873]
[108.64577484 37.73688126]
[107.17552185 52.66464996]
[105.70526123 67.59242249]
[121.26684570 77.16850281]
[128.61550903 92.83958435]
[126.28971863 109.01889038]
[116.09162903 120.53600311]
[121.55868530 134.50422668]
[127.16261292 148.41810608]
[132.90286255 162.27630615]
[138.64311218 176.13449097]
[144.38336182 189.99269104]
[150.12362671 203.85087585]
[162.55305481 213.63963318]
[160.27523804 228.35903931]
[166.01548767 242.21723938]
[171.75573730 256.07543945]
[177.49598694 269.93362427]
[192.35484314 280.76931763]
[189.44889832 298.05361938]
[195.46012878 311.79644775]
[201.47135925 325.53927612]
[207.48258972 339.28207397]
[213.49382019 353.02490234]
[226.11305237 362.56774902]
[224.12466431 377.32904053]
[230.13589478 391.07183838]
[236.41578674 404.69400024]
[242.96192932 418.19021606]
[249.50807190 431.68643188]
[256.05419922 445.18267822]
[262.60034180 458.67889404]
[269.14648438 472.17510986]
[275.69262695 485.67135620]
[282.23876953 499.16757202]
[288.78491211 512.66381836]
[295.33105469 526.16003418]
[301.87716675 539.65625000]
[308.42330933 553.15246582]
[314.96945190 566.64868164]
[336.59121704 578.02838135]
[334.95175171 601.70941162]
[343.28530884 614.18145752]
[351.61886597 626.65344238]
[359.95242310 639.12548828]
[368.28594971 651.59753418]
[383.67691040 656.12506104]
[389.59960938 671.03485107]
[381.51068115 684.88934326]
[365.61523438 687.06066895]
[354.10690308 675.88311768]
[355.81393433 659.93109131]
[347.48037720 647.45904541]
[339.14682007 634.98699951]
[330.81326294 622.51495361]
[322.47970581 610.04290771]
[316.36550903 610.72149658]
[310.26974487 609.63250732]
[304.69622803 606.84259033]
[300.11212158 602.55999756]
[296.90896606 597.11895752]
[295.36907959 590.95397949]
[295.64105225 584.56481934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 132]
[6 131]
[7 130]
[8 129]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[16 123]
[17 122]
[19 120]
[20 119]
[21 118]
[22 117]
[23 116]
[26 114]
[27 113]
[28 112]
[29 111]
[31 109]
[32 108]
[33 107]
[34 106]
[35 105]
[37 104]
[38 103]
[41 65]
[42 64]
[43 63]
[44 62]
[46 60]
[47 59]
[48 58]
[50 57]
[51 56]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
[79 86]
[138 152]
[139 151]
[140 150]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
