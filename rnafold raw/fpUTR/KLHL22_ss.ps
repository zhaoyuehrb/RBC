%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGACGGCCCAGGCCCCCGCCCCGCCGGCUCCUCUCGCCCAGCCUCCCGCCUCGCGCCUCCCGCCUCCCGCCUCCCGCCUCCCUCCAGCUGCGAGUGCGGCCUCGGCUGGCGGCGGCACCAGGCCACAGUUGUAAGGGAUCUUGUGGCUGUCAGG\
) } def
/len { sequence length } bind def

/coor [
[80.35885620 417.70657349]
[82.93215179 398.49649048]
[75.44942474 385.61788940]
[83.45957947 371.97427368]
[83.75781250 356.97723389]
[84.05603790 341.98019409]
[84.35427094 326.98318481]
[84.65250397 311.98614502]
[84.95073700 296.98910522]
[85.24897003 281.99206543]
[85.54720306 266.99502563]
[85.69632721 251.99577332]
[85.69632721 236.99577332]
[85.69632721 221.99577332]
[85.69632721 206.99577332]
[75.01545715 196.67808533]
[74.80177307 181.46595764]
[85.69632721 170.33283997]
[85.69632721 155.33283997]
[85.69632721 140.33283997]
[72.65652466 132.91909790]
[59.76670074 140.59062195]
[46.87687683 148.26216125]
[41.55259705 163.39595032]
[26.35414124 168.53273010]
[12.94046307 159.73200989]
[11.60138893 143.74493408]
[23.36414146 132.83543396]
[39.20534134 135.37232971]
[52.09516907 127.70080566]
[64.98499298 120.02927399]
[62.15427017 112.40802002]
[60.93849945 104.47388458]
[61.34680939 96.56089783]
[63.32080078 88.99384308]
[66.73867798 82.07492828]
[71.42188263 76.07172394]
[77.14403534 71.20685577]
[83.64157867 67.64983368]
[90.62577820 65.51132202]
[97.79550934 64.84006500]
[104.85015869 65.62246704]
[110.10482025 51.57296371]
[115.35948944 37.52346039]
[120.61415100 23.47395897]
[111.15326691 13.13062477]
[107.10262299 -0.21971090]
[109.20094299 -13.94528675]
[116.98064423 -25.36608315]
[128.87049866 -32.27711105]
[142.51269531 -33.37404251]
[148.04565430 -47.31629562]
[153.57861328 -61.25854492]
[159.11157227 -75.20079803]
[157.01026917 -90.88183594]
[168.89659119 -99.85761261]
[166.79528809 -115.53865814]
[178.68161011 -124.51443481]
[184.21456909 -138.45668030]
[189.74752808 -152.39894104]
[185.35511780 -164.56407166]
[190.29173279 -176.08306885]
[201.39546204 -180.96789551]
[207.20452881 -194.79737854]
[213.01359558 -208.62687683]
[218.82266235 -222.45635986]
[224.63172913 -236.28584290]
[218.89886475 -250.76936340]
[224.98709106 -264.71166992]
[238.83023071 -270.08782959]
[244.63929749 -283.91732788]
[250.44836426 -297.74679565]
[242.43414307 -308.99911499]
[241.05155945 -322.63531494]
[246.55638123 -335.06893921]
[257.40698242 -343.08300781]
[270.69430542 -344.66235352]
[276.77719116 -358.37362671]
[282.86007690 -372.08486938]
[288.94293213 -385.79614258]
[294.88922119 -399.56719971]
[300.69827271 -413.39666748]
[306.50735474 -427.22616577]
[304.71823120 -442.94589233]
[316.78067017 -451.68356323]
[309.46865845 -465.50631714]
[312.80294800 -480.78430176]
[325.20916748 -490.30371094]
[340.82952881 -489.56976318]
[352.28854370 -478.92904663]
[354.17559814 -463.40573120]
[345.59973145 -450.32946777]
[330.61013794 -445.87451172]
[332.81475830 -431.14395142]
[320.33682251 -421.41711426]
[314.52777100 -407.58761597]
[308.71868896 -393.75811768]
[309.02944946 -386.33276367]
[302.65420532 -379.71325684]
[296.57131958 -366.00201416]
[290.48843384 -352.29074097]
[284.40554810 -338.57949829]
[293.07980347 -324.67214966]
[291.76181030 -308.16806030]
[280.77233887 -295.56359863]
[264.27786255 -291.93774414]
[258.46878052 -278.10824585]
[252.65972900 -264.27874756]
[258.51138306 -250.62982178]
[252.81716919 -236.52200317]
[238.46122742 -230.47677612]
[232.65216064 -216.64729309]
[226.84309387 -202.81781006]
[221.03401184 -188.98831177]
[215.22494507 -175.15882874]
[218.38508606 -157.92036438]
[203.68977356 -146.86598206]
[198.15681458 -132.92372131]
[192.62385559 -118.98147583]
[195.12091064 -104.29767609]
[182.83883667 -94.32465363]
[185.33590698 -79.64086151]
[173.05381775 -69.66783905]
[167.52085876 -55.72558594]
[161.98789978 -41.78333664]
[156.45494080 -27.84108543]
[166.77969360 -15.44346523]
[169.47445679 0.55879360]
[163.71331787 15.82946110]
[150.97477722 26.18230629]
[134.66365051 28.72862244]
[129.40898132 42.77812576]
[124.15432739 56.82762527]
[118.89966583 70.87712860]
[133.83323669 87.34305573]
[136.07525635 110.34202576]
[123.69929504 130.88966370]
[100.69632721 140.33283997]
[100.69632721 155.33283997]
[100.69632721 170.33283997]
[111.59088135 181.46595764]
[111.37720490 196.67808533]
[100.69632721 206.99577332]
[100.69632721 221.99577332]
[100.69632721 236.99577332]
[100.69632721 251.99577332]
[103.83946991 260.63189697]
[100.54424286 267.29327393]
[100.24600983 282.29031372]
[99.94777679 297.28732300]
[99.64954376 312.28436279]
[99.35131073 327.28140259]
[99.05307770 342.27844238]
[98.75484467 357.27548218]
[98.45661163 372.27252197]
[105.91800690 386.22378540]
[97.92918396 398.79470825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 157]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 148]
[12 146]
[13 145]
[14 144]
[15 143]
[18 140]
[19 139]
[20 138]
[21 31]
[22 30]
[23 29]
[42 134]
[43 133]
[44 132]
[45 131]
[51 126]
[52 125]
[53 124]
[54 123]
[56 121]
[58 119]
[59 118]
[60 117]
[63 115]
[64 114]
[65 113]
[66 112]
[67 111]
[70 108]
[71 107]
[72 106]
[77 102]
[78 101]
[79 100]
[80 99]
[81 97]
[82 96]
[83 95]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
