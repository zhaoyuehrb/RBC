%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUUGCUUAGUAUCCUCUGCUCUAGUAGUUCCCGGUGACUGUCGCAGCCUCUGUUGCCCUCUGACUUGCAGAUGCUGUGAGAUCCAGAGCUAAGACUCCACGACAUCCCGGAAGCCGAAAA\
) } def
/len { sequence length } bind def

/coor [
[11.58100796 284.74243164]
[4.33364344 271.60943604]
[2.48240089 256.72409058]
[6.29288864 242.21435547]
[-5.33234596 251.69349670]
[-16.95758057 261.17263794]
[-28.58281517 270.65176392]
[-40.20804977 280.13088989]
[-51.83328629 289.61001587]
[-57.90935516 306.93667603]
[-75.26451111 309.18478394]
[-86.64588165 318.95535278]
[-98.02725220 328.72595215]
[-109.40862274 338.49652100]
[-112.05564117 354.31970215]
[-126.14653778 361.98953247]
[-140.87197876 355.62237549]
[-144.93588257 340.10256958]
[-135.22074890 327.33557129]
[-119.17920685 327.11517334]
[-107.79783630 317.34457397]
[-96.41646576 307.57397461]
[-85.03509521 297.80340576]
[-83.77688599 285.70065308]
[-74.27491760 277.47113037]
[-61.31241608 277.98477173]
[-49.68717957 268.50564575]
[-38.06194687 259.02651978]
[-26.43671227 249.54739380]
[-14.81147671 240.06825256]
[-3.18624187 230.58912659]
[-2.09668469 224.83792114]
[2.10853934 219.83732605]
[8.85197067 217.26466370]
[17.10636139 204.74008179]
[25.36075211 192.21551514]
[33.61514282 179.69093323]
[34.68100739 172.29029846]
[42.24065018 166.95729065]
[50.80967331 154.64584351]
[52.06267548 147.27458191]
[59.75498962 142.13479614]
[68.63314819 130.04437256]
[77.51129913 117.95394135]
[86.38945770 105.86351776]
[87.52845764 90.90682220]
[80.58350372 77.61142731]
[73.63855743 64.31602478]
[66.69360352 51.02062225]
[59.74865723 37.72522354]
[45.62282181 29.39498520]
[46.04465103 13.00126362]
[60.58019638 5.40851355]
[74.27654266 14.42750454]
[73.04405975 30.78027344]
[79.98900604 44.07567215]
[86.93395233 57.37107468]
[93.87890625 70.66647339]
[100.82385254 83.96187592]
[100.98910522 85.65802002]
[101.09517670 87.35452271]
[110.86576080 75.97314453]
[120.63634491 64.59177399]
[130.40693665 53.21040344]
[140.17752075 41.82903290]
[142.87963867 21.92899132]
[161.23611450 16.06970215]
[170.41769409 4.20806551]
[179.59928894 -7.65357065]
[188.78088379 -19.51520729]
[197.96246338 -31.37684250]
[207.14405823 -43.23847961]
[216.32565308 -55.10011673]
[221.23957825 -71.32631683]
[238.19197083 -71.09628296]
[242.66381836 -54.74272537]
[228.18728638 -45.91852570]
[219.00569153 -34.05688858]
[209.82411194 -22.19525337]
[200.64251709 -10.33361721]
[191.46092224 1.52801907]
[182.27934265 13.38965511]
[173.09774780 25.25129128]
[175.30601501 35.37070084]
[171.44149780 45.21810913]
[162.57745361 51.38736725]
[151.55889893 51.59962082]
[141.78829956 62.98099136]
[132.01771545 74.36236572]
[122.24713135 85.74373627]
[112.47654724 97.12510681]
[126.54124451 91.91127014]
[141.49578857 93.07817078]
[154.58151245 100.41056061]
[163.38447571 112.55583954]
[166.28082275 127.27355194]
[162.73625183 141.84873962]
[153.40463257 153.59271240]
[140.00735474 160.33905029]
[125.01583862 160.84327698]
[111.19554901 155.01235962]
[101.09591675 143.92193604]
[96.58002472 129.61785889]
[98.47988129 114.74167633]
[89.60172272 126.83209991]
[80.72357178 138.92251587]
[71.84541321 151.01293945]
[63.12112427 163.21485901]
[54.55210114 175.52632141]
[46.13972092 187.94532776]
[37.88533020 200.46990967]
[29.63093758 212.99447632]
[21.37654686 225.51905823]
[35.42459106 220.26048279]
[50.42084503 220.59564209]
[64.21993256 226.47656250]
[74.84773254 237.06192017]
[80.78382874 250.83735657]
[81.17899323 265.83215332]
[75.97668457 279.90112305]
[65.92116547 291.03155518]
[52.45097733 297.63110352]
[37.49318695 298.75564575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[11 23]
[12 22]
[13 21]
[14 20]
[34 113]
[35 112]
[36 111]
[37 110]
[39 109]
[40 108]
[42 107]
[43 106]
[44 105]
[45 104]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[61 91]
[62 90]
[63 89]
[64 88]
[65 87]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
