%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAACUCCUGGUACUUGAGCACUGAUCUGCUUUGGAGAACCUGAUUCUGAGACUCCAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[104.71637726 126.77027893]
[95.17010498 126.75003052]
[86.21952820 123.43054962]
[78.96858215 117.22124481]
[74.31155396 108.88794708]
[72.82283020 99.45845032]
[74.68601990 90.09574127]
[62.76735306 80.98830414]
[50.84869003 71.88086700]
[38.93002319 62.77342987]
[20.77408981 61.00307465]
[14.33443451 44.84915161]
[1.98967612 36.32818222]
[-10.35508156 27.80720901]
[-22.69984055 19.28623772]
[-38.05103302 21.92794418]
[-50.44898987 13.11061192]
[-52.87284851 -1.54068542]
[-67.46504211 3.73639131]
[-82.36277771 -0.60377288]
[-91.83757782 -12.89229584]
[-92.24618530 -28.40398979]
[-83.43148041 -41.17429352]
[-68.78289795 -46.29276276]
[-53.93312073 -41.79124069]
[-44.59218597 -29.40065765]
[-44.35187531 -13.88544369]
[-29.79316330 -16.81451797]
[-17.15243912 -8.34889698]
[-14.17886829 6.94148016]
[-1.83411074 15.46245098]
[10.51064682 23.98342323]
[22.85540581 32.50439453]
[35.04128647 30.66262627]
[45.46242142 37.97382736]
[48.03746033 50.85476685]
[59.95612717 59.96220398]
[71.87479401 69.06964111]
[83.79345703 78.17707825]
[103.83382416 73.08914948]
[121.65604401 83.57113647]
[126.94864655 103.55842590]
[140.70053101 109.54888916]
[154.45240784 115.53936005]
[168.20429993 121.52983093]
[174.14332581 120.80865479]
[179.12330627 122.52217865]
[182.31170654 125.78750610]
[183.41026306 129.51054382]
[196.15228271 137.42514038]
[208.89430237 145.33975220]
[224.22496033 141.49961853]
[237.73760986 149.69618225]
[241.41545105 165.06658936]
[233.07646179 178.49182129]
[217.66804504 182.00694275]
[204.33172607 173.52648926]
[200.97970581 158.08177185]
[188.23768616 150.16716003]
[175.49566650 142.25256348]
[162.21382141 135.28170776]
[148.46194458 129.29124451]
[134.71006775 123.30077362]
[120.95817566 117.31031036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 39]
[8 38]
[9 37]
[10 36]
[12 33]
[13 32]
[14 31]
[15 30]
[18 27]
[42 64]
[43 63]
[44 62]
[45 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
