%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCGGGCCCGGGUCGGCGCGCCCAGCCUGCCAGCCGCGCUGCUGCUGCUCCUCCUGCUGUGGGACCGCUGACCGCGCGGCUGCUCCGCUCUCCCCGCUCCAAGCGCCGAUCUGGGCACCCGCCACCAGC\
) } def
/len { sequence length } bind def

/coor [
[175.25430298 674.57269287]
[170.88034058 660.05908203]
[171.73719788 644.92498779]
[177.72138977 630.99786377]
[188.11033630 619.95947266]
[201.64947510 613.14276123]
[199.86869812 598.24884033]
[197.91079712 583.37719727]
[195.77607727 568.52984619]
[193.64135742 553.68255615]
[191.50663757 538.83520508]
[189.37191772 523.98791504]
[187.23719788 509.14059448]
[185.10246277 494.29327393]
[182.96774292 479.44595337]
[180.83302307 464.59863281]
[178.69830322 449.75131226]
[176.56358337 434.90399170]
[174.42884827 420.05667114]
[172.29412842 405.20932007]
[170.15940857 390.36199951]
[156.28105164 384.95306396]
[146.91116333 373.24575806]
[144.64433289 358.32168579]
[150.18836975 344.17385864]
[162.14756775 334.63842773]
[160.01284790 319.79110718]
[157.87812805 304.94378662]
[139.72009277 294.06420898]
[135.21681213 273.09710693]
[147.62284851 255.26565552]
[143.74055481 240.77676392]
[139.17326355 226.48901367]
[133.93130493 212.43476868]
[128.68934631 198.38052368]
[123.44738007 184.32627869]
[118.20541382 170.27203369]
[112.96344757 156.21778870]
[107.72148895 142.16354370]
[102.47952271 128.10929871]
[97.23756409 114.05504608]
[86.57918549 105.00570679]
[88.70819092 91.18691254]
[83.29936218 77.19604492]
[70.98728943 67.26007080]
[73.44010162 52.56881332]
[67.86516571 38.64329529]
[55.55310059 28.70732117]
[58.00591278 14.01606655]
[51.85231018 7.13101435]
[52.46835327 -0.30778041]
[47.22639084 -14.36202621]
[41.98442459 -28.41627312]
[36.74246216 -42.47051620]
[24.67033577 -52.69667816]
[27.47207260 -67.32540131]
[14.48874760 -77.34365082]
[16.94101524 -93.55841064]
[32.30619049 -99.28932190]
[44.77790070 -88.64092255]
[41.52631760 -72.56735992]
[53.22350693 -63.34645844]
[50.79671097 -47.71248245]
[56.03867340 -33.65823364]
[61.28063583 -19.60398865]
[66.52259827 -5.54974318]
[71.93142700 8.44112968]
[83.84474182 17.38105774]
[81.79068756 33.06835938]
[87.36562347 46.99387741]
[99.27893066 55.93380356]
[97.22487640 71.62110901]
[102.68450165 76.71106720]
[102.76243591 85.94495392]
[113.42081451 94.99429321]
[111.29180908 108.81308746]
[116.53377533 122.86733246]
[121.77573395 136.92156982]
[127.01770020 150.97581482]
[132.25965881 165.03007507]
[137.50161743 179.08432007]
[142.74359131 193.13856506]
[147.98554993 207.19281006]
[153.22750854 221.24705505]
[156.86158752 224.01235962]
[159.13694763 227.46560669]
[160.00599670 231.07379150]
[159.60641479 234.34643555]
[158.22944641 236.89448547]
[162.11174011 251.38336182]
[171.11584473 253.18531799]
[178.97981262 257.84112549]
[184.83358765 264.80197144]
[188.04063416 273.26602173]
[188.26719666 282.27066040]
[185.51673889 290.80191040]
[180.12628174 297.90878296]
[172.72544861 302.80905151]
[174.86016846 317.65637207]
[176.99488831 332.50369263]
[191.15611267 338.28359985]
[200.46145630 350.29638672]
[202.49105835 365.25457764]
[196.79904175 379.12744141]
[185.00672913 388.22729492]
[187.14144897 403.07461548]
[189.27618408 417.92193604]
[191.41090393 432.76925659]
[193.54562378 447.61657715]
[195.68034363 462.46389771]
[197.81506348 477.31121826]
[199.94978333 492.15853882]
[202.08451843 507.00585938]
[204.21923828 521.85321045]
[206.35395813 536.70050049]
[208.48867798 551.54785156]
[210.62339783 566.39514160]
[212.75811768 581.24249268]
[217.11505127 589.38421631]
[214.76261902 596.46807861]
[216.54339600 611.36199951]
[231.30799866 614.79455566]
[244.00648499 623.07250977]
[253.10545349 635.19622803]
[257.50616455 649.70172119]
[256.67718506 664.83740234]
[250.71865845 678.77551270]
[240.35008240 689.83306885]
[226.82351685 696.67468262]
[211.77236938 698.47424316]
[197.01411438 695.01446533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 121]
[7 120]
[8 118]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[17 109]
[18 108]
[19 107]
[20 106]
[21 105]
[26 100]
[27 99]
[28 98]
[31 90]
[32 89]
[33 84]
[34 83]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[43 74]
[44 72]
[46 70]
[47 69]
[49 67]
[51 66]
[52 65]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
