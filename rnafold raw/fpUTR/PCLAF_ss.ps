%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCGGGAGAGACCUUGGAGCGCGCGGGAAAGAGACCAAUAUAAACUGUGGCGGGAUAGUUUUCGGGUCCUUGUCCAGUGAAACACCCUCGGCUGGGAAGUCAGUUCGUUCUCUCCUCUCCUCUCUUCUUGUUUGAAC\
) } def
/len { sequence length } bind def

/coor [
[114.87512207 457.51647949]
[126.41899109 447.14733887]
[124.73952484 432.24166870]
[115.45059204 424.41259766]
[113.97212219 411.94989014]
[121.64698792 401.51666260]
[120.30239868 386.57705688]
[118.95780945 371.63745117]
[117.61322021 356.69781494]
[116.26863098 341.75820923]
[114.92404175 326.81860352]
[113.57945251 311.87896729]
[112.23486328 296.93936157]
[97.44059753 290.53503418]
[87.82028961 277.48275757]
[86.06120300 261.26971436]
[92.73444366 246.28684998]
[106.11458588 236.63957214]
[104.43511963 221.73388672]
[102.75564575 206.82820129]
[101.07617950 191.92251587]
[91.96253204 180.14157104]
[98.10604858 165.56187439]
[88.99240112 153.78092957]
[95.13591766 139.20123291]
[93.45645142 124.29554749]
[91.77698517 109.38986206]
[85.26873016 95.87532806]
[74.66212463 85.26873016]
[64.05552673 74.66212463]
[53.33058929 64.17519379]
[42.48866272 53.80925751]
[31.64674187 43.44331741]
[23.20745277 39.73283005]
[20.68114281 32.72106552]
[10.07454014 22.11446190]
[-0.53206116 11.50786114]
[-11.13866329 0.90125918]
[-23.21292496 4.48460340]
[-35.58831787 2.57226825]
[-45.89770508 -4.40724087]
[-52.19599533 -15.06223106]
[-53.32699203 -27.31493759]
[-49.13521957 -38.80659485]
[-59.25527954 -49.87837982]
[-69.37533569 -60.95016479]
[-79.49539185 -72.02194977]
[-89.61545563 -83.09373474]
[-99.73551178 -94.16551971]
[-109.85556793 -105.23730469]
[-125.65320587 -105.69589233]
[-136.43862915 -117.24795532]
[-135.81304932 -133.03985596]
[-124.14759827 -143.70254517]
[-108.36319733 -142.91003418]
[-97.82444000 -131.13250732]
[-98.78378296 -115.35736084]
[-88.66372681 -104.28557587]
[-78.54367065 -93.21379089]
[-68.42360687 -82.14200592]
[-58.30355072 -71.07022095]
[-48.18349457 -59.99843979]
[-38.06343460 -48.92665482]
[-20.69646263 -51.74691391]
[-4.94595337 -43.56112671]
[2.86257672 -27.44649506]
[-0.53206116 -9.70534229]
[10.07454014 0.90125918]
[20.68114281 11.50786114]
[31.28774452 22.11446190]
[42.01268005 32.60139465]
[52.85460281 42.96733475]
[63.69652557 53.33327103]
[70.76321411 55.70161819]
[74.66212463 64.05552673]
[85.26873016 74.66212463]
[95.87532806 85.26873016]
[110.79891968 86.78085327]
[118.05371857 72.72103119]
[132.93801880 72.16696167]
[145.45661926 63.90350723]
[157.97520447 55.64005280]
[157.57424927 41.81554413]
[164.02452087 29.70430946]
[175.53633118 22.43796730]
[189.02761841 21.83481026]
[200.94877625 27.94591331]
[213.64964294 19.96543121]
[226.35049438 11.98495102]
[229.62249756 -3.47692490]
[242.91471863 -12.02632523]
[258.34112549 -8.59104156]
[266.74954224 4.79083252]
[263.15133667 20.18006897]
[249.68132019 28.44650650]
[234.33097839 24.68581390]
[221.63011169 32.66629410]
[208.92926025 40.64677429]
[208.36920166 57.01511002]
[198.08354187 69.97254944]
[181.94927979 74.31818390]
[166.23866272 68.15865326]
[153.72006226 76.42210388]
[141.20146179 84.68556213]
[134.84208679 98.15431976]
[119.06237030 99.29945374]
[113.42615509 105.83500671]
[106.68267059 107.71039581]
[108.36213684 122.61608124]
[110.04160309 137.52175903]
[119.27538300 150.36886597]
[113.01173401 163.88240051]
[122.24551392 176.72950745]
[115.98186493 190.24305725]
[117.66133118 205.14874268]
[119.34079742 220.05441284]
[121.02026367 234.96009827]
[134.15344238 239.90348816]
[143.81636047 249.98754883]
[148.15391541 263.19354248]
[146.36923218 276.91168213]
[138.86941528 288.45700073]
[127.17447662 295.59478760]
[128.51905823 310.53439331]
[129.86364746 325.47399902]
[131.20823669 340.41360474]
[132.55282593 355.35324097]
[133.89741516 370.29284668]
[135.24200439 385.23245239]
[136.58660889 400.17208862]
[147.53829956 414.92791748]
[139.64520264 430.56219482]
[141.32467651 445.46786499]
[154.88645935 453.00827026]
[161.39550781 467.09414673]
[158.34893799 482.30920410]
[146.91822815 492.80294800]
[131.49871826 494.54031372]
[118.01953125 486.85324097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 133]
[3 132]
[6 130]
[7 129]
[8 128]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[18 117]
[19 116]
[20 115]
[21 114]
[23 112]
[25 110]
[26 109]
[27 108]
[28 77]
[29 76]
[30 75]
[31 73]
[32 72]
[33 71]
[35 70]
[36 69]
[37 68]
[38 67]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[78 106]
[80 104]
[81 103]
[82 102]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
