%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUCAGCUGGGCAGCUCUGGGAACUUGGAUUAGGUGGAGAGGCAGUUGGGGGGCCUCGUUGUUUUGCGUCUUAGUUCCGCCCUCCUGUCCAUCAGGAGAAGGAAAGGAUAAACCCUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[221.91073608 326.34286499]
[214.63121033 313.22766113]
[207.35166931 300.11245728]
[200.07214355 286.99725342]
[192.79261780 273.88204956]
[185.51309204 260.76687622]
[170.01902771 252.63117981]
[170.33882141 234.27281189]
[157.21453857 227.22990417]
[156.88156128 211.41220093]
[149.27212524 198.48561096]
[141.66268921 185.55903625]
[134.05325317 172.63246155]
[126.44381714 159.70587158]
[118.83438110 146.77929688]
[111.22494507 133.85272217]
[95.42681885 135.37077332]
[80.53428650 129.88464355]
[69.49639130 118.48068237]
[64.49888611 103.41714478]
[66.53138733 87.67693329]
[75.19141388 74.37696838]
[67.25695801 61.64730072]
[59.32249451 48.91763687]
[51.38803482 36.18797302]
[43.45357513 23.45830917]
[35.51911545 10.72864628]
[21.65310478 3.10996270]
[21.48705101 -11.78371716]
[13.55259132 -24.51338005]
[5.61813068 -37.24304581]
[-2.31632948 -49.97270966]
[-10.41140461 -62.60084152]
[-18.66579437 -75.12541962]
[-26.92018509 -87.64999390]
[-35.17457581 -100.17457581]
[-51.61391449 -99.01319122]
[-66.32637787 -106.22922516]
[-75.36798859 -119.78361511]
[-76.36768341 -135.95256042]
[-69.14845276 -150.35035706]
[-77.71747589 -162.66180420]
[-86.28649902 -174.97325134]
[-94.85552216 -187.28469849]
[-103.42454529 -199.59616089]
[-118.83730316 -198.92501831]
[-132.15466309 -206.71292114]
[-139.12710571 -220.47477722]
[-137.52975464 -235.81921387]
[-127.87230682 -247.84989929]
[-113.23643494 -252.72787476]
[-98.29237366 -248.89659119]
[-87.80873871 -237.57859802]
[-85.13080597 -222.38543701]
[-91.11309814 -208.16517639]
[-82.54407501 -195.85372925]
[-73.97505188 -183.54228210]
[-65.40602875 -171.23081970]
[-56.83700562 -158.91937256]
[-43.27232742 -160.96395874]
[-30.09401131 -156.92184448]
[-19.91095161 -147.53318787]
[-14.76498890 -134.60244751]
[-15.72163105 -120.65174103]
[-22.64999962 -108.42896271]
[-14.39560890 -95.90438843]
[-6.14121771 -83.37980652]
[2.11317277 -70.85523224]
[8.49371433 -66.95726776]
[10.41333485 -57.90716934]
[18.34779549 -45.17750549]
[26.28225517 -32.44784164]
[34.21671677 -19.71817780]
[47.51519775 -13.01000404]
[48.24877930 2.79418612]
[56.18323898 15.52384949]
[64.11769867 28.25351334]
[72.05216217 40.98317719]
[79.98661804 53.71284103]
[87.92108154 66.44250488]
[101.65338135 64.37315369]
[115.13500977 67.70545959]
[126.32189941 75.93418884]
[133.51792908 87.81171417]
[135.63204956 101.53719330]
[132.34371948 115.02961731]
[124.15151978 126.24327850]
[131.76095581 139.16986084]
[139.37039185 152.09643555]
[146.97982788 165.02302551]
[154.58926392 177.94960022]
[162.19869995 190.87617493]
[169.80813599 203.80276489]
[183.47669983 211.77026367]
[183.26541138 226.66337585]
[195.59941101 230.68363953]
[201.65174866 241.70098877]
[198.62828064 253.48733521]
[205.90782166 266.60253906]
[213.18734741 279.71774292]
[220.46687317 292.83291626]
[227.74639893 305.94812012]
[235.02593994 319.06332397]
[253.98986816 320.47708130]
[268.24908447 332.83435059]
[272.28128052 351.11575317]
[264.66448975 368.05499268]
[272.91885376 380.57958984]
[281.17324829 393.10415649]
[296.70254517 396.03964233]
[305.53854370 409.14306641]
[302.43905640 424.64044189]
[289.24291992 433.33743286]
[273.77917480 430.07427979]
[265.22219849 416.78692627]
[268.64868164 401.35855103]
[260.39428711 388.83395386]
[252.13989258 376.30938721]
[240.90876770 377.92636108]
[229.84843445 375.16998291]
[220.60614014 368.41046143]
[214.57359314 358.61730957]
[212.67732239 347.22021484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[5 99]
[6 98]
[8 95]
[10 93]
[11 92]
[12 91]
[13 90]
[14 89]
[15 88]
[16 87]
[22 80]
[23 79]
[24 78]
[25 77]
[26 76]
[27 75]
[29 73]
[30 72]
[31 71]
[32 70]
[33 68]
[34 67]
[35 66]
[36 65]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
