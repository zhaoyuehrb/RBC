%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGGAGGCGACGCCUGCGCAGUGCGGUCGCGGGGCUGUCGUUGUCCCGCGAGCCGCCGACCAGGCCUCGAACGGG\
) } def
/len { sequence length } bind def

/coor [
[65.67446136 321.89910889]
[55.01379776 310.23181152]
[55.80904388 294.44754028]
[67.58840179 283.91082764]
[68.18474579 268.92266846]
[59.07080078 263.25897217]
[53.20912933 254.17298889]
[51.78456116 243.37156677]
[55.14039993 232.91987610]
[62.69915390 224.84661865]
[73.06055450 220.75025940]
[75.43652344 205.93962097]
[77.81249237 191.12899780]
[72.18885040 177.33682251]
[82.01438904 164.93644714]
[84.39035797 150.12582397]
[86.76633453 135.31518555]
[89.14230347 120.50456238]
[91.51827240 105.69393158]
[89.55043030 97.63156891]
[94.29441071 90.34652710]
[85.81360626 77.28078461]
[89.02789307 62.41057587]
[101.53634644 54.40594482]
[100.15068817 45.09467316]
[104.92044830 39.18104172]
[108.46561432 24.60600281]
[112.01078033 10.03096294]
[115.55594635 -4.54407692]
[118.81063080 -19.18672180]
[121.77354431 -33.89118195]
[124.73645020 -48.59564209]
[127.69936371 -63.30010223]
[130.66227722 -78.00456238]
[133.62518311 -92.70902252]
[136.58808899 -107.41348267]
[139.55101013 -122.11794281]
[142.51391602 -136.82240295]
[132.61560059 -148.92848206]
[132.86636353 -164.56405640]
[143.14782715 -176.34648132]
[158.60539246 -178.71246338]
[171.94046021 -170.54484558]
[176.85662842 -155.70013428]
[171.03262329 -141.18756104]
[157.21838379 -133.85949707]
[154.25546265 -119.15503693]
[151.29255676 -104.45057678]
[148.32965088 -89.74611664]
[145.36672974 -75.04165649]
[142.40382385 -60.33719254]
[139.44091797 -45.63273239]
[136.47799683 -30.92827034]
[133.51509094 -16.22381020]
[135.33061218 -8.84644413]
[130.13098145 -0.99891043]
[126.58582306 13.57612991]
[123.04065704 28.15117073]
[119.49549103 42.72621155]
[116.24080658 57.36885452]
[124.67321014 69.59301758]
[121.87786865 84.54763794]
[108.99887085 93.30944061]
[106.32890320 108.06990051]
[103.95293427 122.88053131]
[101.57696533 137.69116211]
[99.20098877 152.50178528]
[96.82501984 167.31242371]
[102.27871704 182.16394043]
[92.62312317 193.50495911]
[90.24715424 208.31559753]
[87.87118530 223.12622070]
[100.55245209 238.36343384]
[98.40842438 257.77545166]
[83.17288971 269.51901245]
[82.57653809 284.50717163]
[93.48151398 295.94644165]
[93.02018738 311.74398804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 76]
[5 75]
[11 72]
[12 71]
[13 70]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[21 63]
[24 60]
[26 59]
[27 58]
[28 57]
[29 56]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
