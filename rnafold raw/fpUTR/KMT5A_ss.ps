%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGAGCAGUUGGCUGAGUUGUUGCAACUUUUUUCGAAAGCUGGGUUUCCCGGGAGAUCCCAGGCGGUGACAGAGUGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[22.33412552 198.51516724]
[13.42682266 210.58412170]
[4.51951981 222.65309143]
[2.55011368 238.35124207]
[-11.23301220 243.99700928]
[-20.14031410 256.06597900]
[-21.43775368 272.41372681]
[-36.35834503 279.21871948]
[-49.55306244 269.48059082]
[-47.44831085 253.21705627]
[-32.20928192 247.15867615]
[-23.30197906 235.08970642]
[-21.96968269 220.25480652]
[-7.54944658 213.74578857]
[1.35785615 201.67681885]
[10.26515865 189.60786438]
[5.91665983 179.84637451]
[6.14738178 169.08049011]
[10.98327446 159.36721802]
[19.56369400 152.59237671]
[30.29377747 150.10440063]
[41.14066696 152.44653320]
[51.34325790 141.45075989]
[61.54584885 130.45498657]
[64.53074646 115.86253357]
[79.58909607 111.00898743]
[89.79168701 100.01321411]
[92.62374115 92.23667908]
[100.58727264 88.80612183]
[111.19387817 78.19952393]
[121.80047607 67.59291840]
[132.40707397 56.98631668]
[133.23086548 43.95391464]
[142.49047852 35.32896423]
[154.74021912 35.42573547]
[165.73599243 25.22314644]
[176.73176575 15.02055550]
[173.42842102 0.08619473]
[178.01354980 -14.40081120]
[189.16030884 -24.58001518]
[203.80755615 -27.79160118]
[218.00010681 -23.27086258]
[228.99588013 -33.47345352]
[239.99165344 -43.67604446]
[250.98744202 -53.87863541]
[261.98321533 -64.08123016]
[272.78628540 -74.48764038]
[283.39288330 -85.09424591]
[293.99948120 -95.70084381]
[304.60610962 -106.30744934]
[308.32556152 -122.27922821]
[324.09371948 -126.78441620]
[335.68966675 -115.18846893]
[331.18447876 -99.42029572]
[315.21270752 -95.70084381]
[304.60610962 -85.09424591]
[293.99948120 -74.48764038]
[283.39288330 -63.88104248]
[280.82775879 -56.75080109]
[272.18579102 -53.08544922]
[261.19003296 -42.88285828]
[250.19424438 -32.68026733]
[239.19847107 -22.47767448]
[228.20269775 -12.27508450]
[231.65017700 2.21561694]
[227.35298157 16.58189964]
[216.36924744 26.93679428]
[201.58009338 30.42649460]
[186.93435669 26.01633263]
[175.93858337 36.21892548]
[164.94281006 46.42151642]
[160.81880188 63.36986923]
[143.01368713 67.59291840]
[132.40707397 78.19952393]
[121.80047607 88.80612183]
[111.19387817 99.41272736]
[100.78746033 110.21580505]
[90.58486938 121.21157837]
[86.87021637 136.59053040]
[72.54162598 140.65757751]
[62.33903503 151.65335083]
[52.13644409 162.64912415]
[54.19286346 182.39317322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[5 12]
[6 11]
[22 82]
[23 81]
[24 80]
[26 78]
[27 77]
[29 76]
[30 75]
[31 74]
[32 73]
[35 71]
[36 70]
[37 69]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
