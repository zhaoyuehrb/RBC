%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUUCCUCCAACGGGCAGGUCUCAGCGCUCCUCCCCCUGCUCCGCUCCUCUGCAGGGCCCAGGCGCCCUUGGCCUUAGGACCCAACUUCUCUUACCGCC\
) } def
/len { sequence length } bind def

/coor [
[83.98524475 309.19152832]
[70.21259308 303.13259888]
[57.83564758 294.57644653]
[47.30181885 283.83236694]
[38.99190521 271.28878784]
[33.20630264 257.39907837]
[30.15415573 242.66542053]
[29.94579887 227.62039185]
[32.58876419 212.80786133]
[37.98751068 198.76327515]
[45.94687271 185.99436951]
[56.17913055 174.96272278]
[68.31439209 166.06710815]
[81.91397095 159.62910461]
[96.48625946 155.88143921]
[95.56284332 140.90989685]
[94.63942719 125.93833923]
[93.48557281 110.98278809]
[91.41323090 96.12662506]
[88.65698242 81.38203430]
[85.90074158 66.63743591]
[83.14450073 51.89283752]
[80.38825989 37.14824295]
[65.07418060 30.16545486]
[56.96356201 15.60632610]
[59.04473114 -0.76266479]
[70.31283569 -12.58993053]
[67.10383606 -27.24265480]
[63.89484024 -41.89538193]
[60.68584442 -56.54810333]
[57.47684860 -71.20082855]
[43.85786819 -74.78267670]
[33.18637466 -83.86875153]
[27.53259468 -96.62069702]
[27.96044350 -110.49669647]
[34.32781601 -122.75804138]
[45.32602692 -131.00970459]
[42.56978607 -145.75430298]
[39.81354141 -160.49890137]
[37.05730057 -175.24349976]
[34.30105591 -189.98809814]
[31.54481506 -204.73269653]
[16.89760590 -209.17317200]
[5.99987698 -219.92018127]
[1.35584891 -234.50411987]
[4.03268433 -249.57373047]
[13.41526604 -261.66610718]
[27.34754562 -268.00253296]
[42.62798691 -267.12692261]
[55.74525452 -259.24047852]
[63.68510056 -246.15548706]
[64.62300873 -230.87873840]
[58.34344101 -216.92074585]
[46.28940964 -207.48893738]
[49.04565430 -192.74433899]
[51.80189514 -177.99974060]
[54.55813980 -163.25514221]
[57.31438065 -148.51054382]
[60.07062531 -133.76594543]
[75.37023163 -128.82196045]
[86.18827820 -116.80117035]
[89.53636169 -100.88433075]
[84.41957092 -85.34672546]
[72.12957001 -74.40982819]
[75.33856964 -59.75710297]
[78.54756927 -45.10437775]
[81.75656128 -30.45165253]
[84.96556091 -15.79892731]
[97.72397614 -11.55273724]
[106.75762939 -1.44635534]
[109.59681702 11.91952419]
[105.38492584 25.03262329]
[95.13285065 34.39199829]
[97.88909912 49.13659668]
[100.64533997 63.88119125]
[103.40158081 78.62578583]
[106.15782166 93.37038422]
[109.17503357 96.07698822]
[110.90775299 100.15464783]
[110.74949646 104.96125031]
[108.42158508 109.59876251]
[112.38899231 118.02422333]
[109.61097717 125.01492310]
[110.53439331 139.98648071]
[111.45780945 154.95802307]
[126.38018799 156.88652039]
[140.66784668 161.60449219]
[153.80429077 168.94140625]
[165.31465149 178.63201904]
[174.78283691 190.32603455]
[181.86657715 203.60072327]
[186.30979919 217.97619629]
[187.95188904 232.93280029]
[186.73345947 247.92985535]
[182.69859314 262.42526245]
[175.99311829 275.89495850]
[166.85945129 287.85208130]
[155.62777710 297.86434937]
[142.70408630 305.56985474]
[128.55557251 310.69003296]
[113.69370270 313.03979492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 85]
[16 84]
[17 83]
[18 81]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
