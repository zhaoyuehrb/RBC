%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGUGAUUAGGAAACCUUGAAGCCUGCCCAACGAUCGUGGGCAGGAGGUGGUUUCUGGUUUGUUGGGGCGUGUGUAUGUGUAUUUGGGGGGACUGAAGGGUACGUGGGGCGAAACAAAACCGGCC\
) } def
/len { sequence length } bind def

/coor [
[9.43885899 209.08528137]
[-1.71678734 219.11280823]
[-15.58667183 224.82475281]
[-30.56857872 225.56127930]
[-44.93183517 221.23728943]
[-57.01723480 212.35229492]
[-65.42870331 199.93267822]
[-69.19456482 185.41308594]
[-67.87979889 170.47082520]
[-61.63628387 156.83195496]
[-51.18525696 146.07203674]
[-37.73113632 139.43315125]
[-52.56878281 137.23219299]
[-67.40643311 135.03123474]
[-82.24407959 132.83029175]
[-97.08172607 130.62933350]
[-111.91937256 128.42837524]
[-126.75701904 126.22741699]
[-133.86166382 137.15066528]
[-144.55241394 144.51809692]
[-157.19747925 147.24862671]
[-169.88322449 144.96566772]
[-180.70378113 138.04853821]
[-188.04737854 127.57005310]
[-190.83633423 115.13025665]
[-205.54812622 112.20390320]
[-220.25990295 109.27754974]
[-234.97167969 106.35118866]
[-249.68345642 103.42483521]
[-264.39523315 100.49848175]
[-279.10702515 97.57212830]
[-293.81878662 94.64577484]
[-305.90023804 104.57415009]
[-321.53637695 104.36224365]
[-333.34432983 94.11009216]
[-335.74871826 78.65846252]
[-327.61425781 65.30313110]
[-312.78182983 60.35008621]
[-298.25482178 66.13800049]
[-290.89245605 79.93399048]
[-276.18066406 82.86035156]
[-261.46887207 85.78670502]
[-246.75711060 88.71305847]
[-232.04531860 91.63941193]
[-217.33354187 94.56576538]
[-202.62176514 97.49211884]
[-187.90998840 100.41847992]
[-177.12101746 87.11306000]
[-161.01910400 81.01409912]
[-143.94845581 83.86209106]
[-130.56266785 94.97077942]
[-124.55606079 111.38976288]
[-109.71841431 113.59072113]
[-94.88076782 115.79167938]
[-80.04312134 117.99263763]
[-65.20547485 120.19359589]
[-50.36782455 122.39455414]
[-35.53017807 124.59550476]
[-20.54824638 123.85948944]
[-5.99777746 120.21479034]
[8.55269146 116.57009125]
[23.10315895 112.92538452]
[37.65362930 109.28068542]
[52.15827560 105.45769501]
[66.61491394 101.45700836]
[81.07155609 97.45631409]
[88.30455017 84.90123749]
[102.26920319 81.03669739]
[114.92774963 88.08704376]
[126.16439056 76.94934082]
[140.49426270 81.01183319]
[151.73091125 69.87413025]
[166.06077576 73.93663025]
[180.51742554 69.93593597]
[194.97406006 65.93524933]
[209.43070984 61.93455505]
[223.88734436 57.93386459]
[238.34399414 53.93317032]
[252.80062866 49.93247986]
[255.63471985 39.45642853]
[262.55401611 31.20147705]
[272.22668457 26.65018654]
[282.83505249 26.58234406]
[292.41708374 30.94219589]
[299.22912598 38.86136246]
[313.94088745 35.93500900]
[328.65267944 33.00865173]
[343.36444092 30.08229828]
[358.07623291 27.15594292]
[368.14895630 14.66915321]
[384.19030762 14.90301800]
[393.89471436 27.67813492]
[389.81784058 43.19452667]
[375.08706665 49.54934692]
[361.00259399 41.86772156]
[346.29080200 44.79407501]
[331.57904053 47.72043228]
[316.86724854 50.64678574]
[302.15545654 53.57314301]
[292.69711304 70.50003052]
[273.58706665 75.24789429]
[256.80133057 64.38912201]
[242.34468079 68.38981628]
[227.88803101 72.39050293]
[213.43139648 76.39119720]
[198.97476196 80.39188385]
[184.51811218 84.39257812]
[170.06147766 88.39327240]
[159.85887146 99.24481964]
[144.49496460 95.46847534]
[134.29235840 106.32003021]
[118.92844391 102.54368591]
[111.69544983 115.09876251]
[97.73079681 118.96330261]
[85.07225037 111.91295624]
[70.61560822 115.91365051]
[56.15896606 119.91433716]
[48.62831497 125.27289581]
[41.29833221 123.83115387]
[26.74786186 127.47585297]
[12.19739342 131.12055969]
[-2.35307503 134.76525879]
[-16.90354347 138.40995789]
[-2.86605215 143.69662476]
[8.58996201 153.37959290]
[16.14112854 166.34028625]
[18.91515732 181.08155823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[59 123]
[60 122]
[61 121]
[62 120]
[63 119]
[64 117]
[65 116]
[66 115]
[69 112]
[71 110]
[73 108]
[74 107]
[75 106]
[76 105]
[77 104]
[78 103]
[79 102]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
