%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCCGGGCGCCGCAGCUUCCUGCCAAGCACCGCGCAGCCGCCUCCGCCGCAGGAUCCCCCGGUGCAGGCCUCCGUGCUGGUGCGGAUCCUGGAGCUCAGCCGCGCGCGCCCUGCCCGAUCCUGUGCCGACCCACCGCACU\
) } def
/len { sequence length } bind def

/coor [
[115.30587006 250.61578369]
[107.90695953 239.72254944]
[104.66562653 226.92622375]
[105.99292755 213.76043701]
[111.75103760 201.81080627]
[121.26716614 192.52401733]
[115.48887634 178.68164062]
[109.71059418 164.83926392]
[103.93230438 150.99688721]
[98.15402222 137.15451050]
[83.63020325 133.40501404]
[71.87343597 142.72050476]
[65.39328766 161.75508118]
[46.22524643 163.92878723]
[34.88899994 173.75170898]
[23.55275726 183.57461548]
[12.21651363 193.39752197]
[7.36712456 209.06326294]
[-8.68226910 212.43209839]
[-19.42142677 200.03843689]
[-13.80282402 184.63185120]
[2.39360309 182.06127930]
[13.72984695 172.23837280]
[25.06608963 162.41546631]
[36.40233231 152.59254456]
[36.22303009 142.28141785]
[41.90280914 133.41072083]
[51.74634552 129.08073425]
[62.55794144 130.96374512]
[74.31470490 121.64824677]
[68.49874115 101.12703705]
[76.18144226 82.67764282]
[92.50000000 73.66570282]
[92.50000000 58.66570282]
[92.50000000 43.66570282]
[92.50000000 28.66570282]
[92.50000000 13.66570282]
[89.35113525 5.00679493]
[92.66838837 -1.66290295]
[92.99789429 -16.65928268]
[85.56562042 -30.62609482]
[93.58063507 -43.18032455]
[93.91014862 -58.17670822]
[82.31663513 -65.71248627]
[76.02842712 -77.90540314]
[76.60160065 -91.50375366]
[83.77822113 -102.94044495]
[95.58229828 -109.26873779]
[96.24116516 -124.25426483]
[85.84613800 -135.85517883]
[86.72779083 -151.04324341]
[97.85155487 -160.88182068]
[98.51041412 -175.86734009]
[99.16928101 -190.85285950]
[99.82814789 -205.83837891]
[100.48700714 -220.82391357]
[101.14587402 -235.80943298]
[101.80473328 -250.79495239]
[102.46360016 -265.78048706]
[102.95781708 -280.77233887]
[103.12258148 -295.77142334]
[103.12258148 -310.77142334]
[103.12258148 -325.77142334]
[103.12258148 -340.77142334]
[103.12258148 -355.77142334]
[103.12258148 -370.77142334]
[103.12258148 -385.77142334]
[99.97371674 -394.43032837]
[103.29096222 -401.10003662]
[103.62047577 -416.09640503]
[97.92353821 -432.06454468]
[111.69056702 -441.95925903]
[125.00968170 -431.46939087]
[118.61685944 -415.76690674]
[118.28734589 -400.77053833]
[118.12258148 -385.77142334]
[118.12258148 -370.77142334]
[118.12258148 -355.77142334]
[118.12258148 -340.77142334]
[118.12258148 -325.77142334]
[118.12258148 -310.77142334]
[118.12258148 -295.77142334]
[121.29251099 -289.03045654]
[117.95419312 -280.44281006]
[120.97528076 -273.63385010]
[117.44911957 -265.12161255]
[116.79026031 -250.13609314]
[116.13139343 -235.15057373]
[115.47253418 -220.16503906]
[114.81366730 -205.17951965]
[114.15480042 -190.19400024]
[113.49594116 -175.20848083]
[112.83707428 -160.22294617]
[123.05444336 -149.44607544]
[122.59973907 -134.23924255]
[111.22668457 -123.59539795]
[110.56782532 -108.60987854]
[123.71413422 -98.83807373]
[128.52038574 -83.00552368]
[122.91365814 -67.26242828]
[108.90652466 -57.84719467]
[108.57701874 -42.85081482]
[116.03286743 -29.95664597]
[107.99427795 -16.32977295]
[107.66476440 -1.33339179]
[107.50000000 13.66570282]
[107.50000000 28.66570282]
[107.50000000 43.66570282]
[107.50000000 58.66570282]
[107.50000000 73.66570282]
[120.07411957 79.59578705]
[128.58602905 91.35227966]
[130.44953918 106.36370850]
[124.62055969 120.98361206]
[111.99639893 131.37622070]
[117.77468109 145.21859741]
[123.55297089 159.06097412]
[129.33125305 172.90335083]
[135.10954285 186.74572754]
[152.20529175 187.31448364]
[167.30221558 195.23861694]
[177.41534424 208.89732361]
[180.56867981 225.54138184]
[176.18116760 241.84649658]
[165.17297363 254.57723999]
[171.55369568 268.15243530]
[177.93443298 281.72766113]
[184.31515503 295.30285645]
[197.18785095 304.50091553]
[195.59944153 319.31057739]
[210.14326477 326.08236694]
[213.77659607 341.70855713]
[203.71226501 354.20211792]
[187.67076111 353.97903442]
[177.95776367 341.21041870]
[182.02423096 325.69131470]
[169.60791016 317.46426392]
[170.73994446 301.68359375]
[164.35922241 288.10839844]
[157.97848511 274.53317261]
[151.59776306 260.95797729]
[138.55900574 261.89218140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 119]
[7 118]
[8 117]
[9 116]
[10 115]
[11 30]
[12 29]
[14 25]
[15 24]
[16 23]
[17 22]
[33 110]
[34 109]
[35 108]
[36 107]
[37 106]
[39 105]
[40 104]
[42 102]
[43 101]
[48 97]
[49 96]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
[59 86]
[60 84]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[69 75]
[70 74]
[125 141]
[126 140]
[127 139]
[128 138]
[130 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
