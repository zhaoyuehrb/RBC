%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAACUUCCGGUGCGCUUAGCGUUACUUCCGGCGCGCGGCGGGCGGAAGUCCGGGUUGGGGUCACCUGACCGGAGAGCCGGCUAGAU\
) } def
/len { sequence length } bind def

/coor [
[66.92371368 168.84910583]
[57.43544006 157.23132324]
[53.31418228 142.80859375]
[55.23167038 127.93165588]
[62.87536621 115.02530670]
[74.99942780 106.19314575]
[89.62781525 102.87471771]
[76.46826935 95.67565918]
[63.30873108 88.47659302]
[50.14919281 81.27753448]
[36.98965073 74.07846832]
[23.83011055 66.87940979]
[10.67057133 59.68034744]
[1.42565262 58.25128174]
[-2.81267548 51.99888992]
[-18.62928391 51.61746979]
[-25.63196373 38.47167969]
[-38.53517914 30.82269096]
[-51.43839264 23.17370224]
[-64.34160614 15.52471352]
[-79.47396851 19.21922112]
[-92.45070648 11.27824688]
[-95.87959290 -3.17091465]
[-108.78281403 -10.81990337]
[-121.68602753 -18.46889305]
[-134.58924866 -26.11788177]
[-147.49246216 -33.76687241]
[-162.74028015 -29.61002922]
[-176.41979980 -37.52496719]
[-180.41520691 -52.81588745]
[-172.35607910 -66.41096497]
[-157.02377319 -70.24447632]
[-143.51466370 -62.04206848]
[-139.84347534 -46.67008591]
[-126.94025421 -39.02109909]
[-114.03704071 -31.37210846]
[-101.13381958 -23.72311974]
[-88.23060608 -16.07413101]
[-73.90866089 -20.00064850]
[-60.71400833 -12.42729664]
[-56.69261932 2.62149811]
[-43.78940582 10.27048683]
[-30.88619041 17.91947556]
[-17.98297501 25.56846619]
[-3.08929110 25.40277863]
[4.83631372 39.09567261]
[17.86963272 46.52080536]
[31.02917290 53.71986771]
[44.18871307 60.91893005]
[57.34825516 68.11798859]
[70.50779724 75.31705475]
[83.66733551 82.51611328]
[96.82687378 89.71517944]
[111.25842285 93.80547333]
[126.23831177 94.58189392]
[141.21820068 95.35831451]
[156.19810486 96.13473511]
[170.38026428 89.12212372]
[182.68998718 97.50782776]
[197.66987610 98.28424835]
[210.33016968 86.36250305]
[227.36651611 87.16226196]
[238.41162109 99.71501160]
[253.40939331 99.97392273]
[268.40716553 100.23283386]
[283.40490723 100.49174500]
[297.47619629 92.06966400]
[311.67202759 100.28004456]
[311.38894653 116.67675018]
[296.91818237 124.39225006]
[283.14599609 115.48950958]
[268.14825439 115.23059845]
[253.15048218 114.97168732]
[238.15270996 114.71277618]
[230.12945557 124.95333099]
[217.46525574 128.69430542]
[204.79483032 124.32971191]
[196.89344788 113.26414490]
[181.91355896 112.48772430]
[168.80285645 119.55587006]
[155.42167664 111.11462402]
[140.44178772 110.33820343]
[125.46189117 109.56178284]
[110.48200226 108.78536224]
[121.19369507 119.28582001]
[126.88046265 133.16604614]
[126.61542511 148.16371155]
[120.44178009 161.83433533]
[109.36576080 171.94975281]
[95.19264984 176.86126709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 53]
[8 52]
[9 51]
[10 50]
[11 49]
[12 48]
[13 47]
[15 46]
[17 44]
[18 43]
[19 42]
[20 41]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[54 84]
[55 83]
[56 82]
[57 81]
[59 79]
[60 78]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
