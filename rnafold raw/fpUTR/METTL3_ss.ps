%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGACUUUUCUGUCUUGCUCAGCUCCAGGGGUCAUUUUCCGGUUAGCCUUCGGGGUGUCCGCGUGAGAAUUGGCUAUAUCCUGGAGCGAGUGCUGGGAGGUGCUAGUCCGCCGCGCCUUAUUCGAGAGGUGUCAGGGCUGGGAGACUAGG\
) } def
/len { sequence length } bind def

/coor [
[133.75871277 160.51431274]
[119.94541931 166.36178589]
[105.77691650 161.43698120]
[98.56845093 148.28259277]
[102.04290771 133.68856812]
[95.77350616 147.31555176]
[89.50409698 160.94252014]
[95.22003174 175.67695618]
[88.76663971 190.10365295]
[73.97258759 195.66348267]
[59.61494446 189.05790710]
[54.21183014 174.20591736]
[60.96882629 159.91889954]
[75.87712097 154.67312622]
[82.14653015 141.04614258]
[88.41593170 127.41916656]
[78.88129425 116.42743683]
[76.52529907 103.57498932]
[80.58554840 92.71813202]
[69.39724731 82.72703552]
[58.20895386 72.73593903]
[47.02065659 62.74484253]
[38.47904968 59.33358002]
[35.70791245 52.43191528]
[24.72711182 42.21320724]
[13.74630833 31.99449921]
[2.76550603 21.77579308]
[-8.21529675 11.55708504]
[-19.19609833 1.33837807]
[-30.17690086 -8.88032913]
[-41.15770340 -19.09903717]
[-52.54877853 -28.85831070]
[-64.33091736 -38.14169693]
[-76.11305237 -47.42508316]
[-87.89518738 -56.70846558]
[-99.67732239 -65.99185181]
[-111.55415344 -75.15378571]
[-123.52440643 -84.19330597]
[-135.49465942 -93.23282623]
[-147.46492004 -102.27234650]
[-159.43518066 -111.31186676]
[-171.67813110 -119.97847748]
[-184.18217468 -128.26394653]
[-196.68620300 -136.54942322]
[-212.46388245 -137.72232056]
[-218.79954529 -151.20225525]
[-231.30358887 -159.48773193]
[-247.08125305 -160.66062927]
[-253.41693115 -174.14056396]
[-265.92095947 -182.42604065]
[-282.31341553 -182.89497375]
[-289.86434937 -197.45228577]
[-280.80603027 -211.12265015]
[-264.45687866 -209.84317017]
[-257.63549805 -194.93006897]
[-245.13145447 -186.64459229]
[-230.24815369 -186.06433105]
[-223.01811218 -171.99176025]
[-210.51406860 -163.70628357]
[-195.63078308 -163.12602234]
[-188.40074158 -149.05345154]
[-175.89669800 -140.76799011]
[-163.39266968 -132.48251343]
[-159.82766724 -132.85401917]
[-155.90647888 -131.47784424]
[-152.47085571 -128.20643616]
[-150.39566040 -123.28212738]
[-138.42539978 -114.24260712]
[-126.45514679 -105.20308685]
[-114.48488617 -96.16356659]
[-102.51463318 -87.12404633]
[-95.23661041 -85.59347534]
[-90.39394379 -77.77398682]
[-78.61180115 -68.49060059]
[-66.82966614 -59.20721817]
[-55.04753113 -49.92383194]
[-43.26539230 -40.64044952]
[-40.41312408 -40.87621307]
[-37.29362106 -39.96082687]
[-34.35829544 -37.78582764]
[-32.08952713 -34.41296005]
[-30.93899727 -30.07983971]
[-19.95819473 -19.86113167]
[-8.97739220 -9.64242458]
[2.00341058 0.57628274]
[12.98421288 10.79498959]
[23.96501541 21.01369667]
[34.94581985 31.23240471]
[45.92662048 41.45111084]
[57.01175308 51.55654526]
[68.20005035 61.54764175]
[79.38834381 71.53874207]
[90.57664490 81.52983856]
[116.92598724 81.26242828]
[127.74860382 110.77107239]
[141.89591980 115.75639343]
[156.04324341 120.74171448]
[170.19055176 125.72703552]
[179.77177429 118.56542206]
[191.50460815 116.96352386]
[202.43070984 121.20758820]
[209.85198975 130.12452698]
[211.99670410 141.40332031]
[227.68208313 139.33462524]
[236.63313293 151.23959351]
[250.56384277 156.80152893]
[264.49456787 162.36346436]
[278.42526245 167.92539978]
[292.35598755 173.48733521]
[306.28671265 179.04927063]
[320.21743774 184.61120605]
[331.93560791 177.89602661]
[345.18664551 179.15748596]
[355.13153076 187.70896912]
[358.26919556 200.24322510]
[372.08276367 206.09001160]
[385.89633179 211.93679810]
[399.70993042 217.78358459]
[413.52349854 223.63038635]
[427.33709717 229.47717285]
[441.15066528 235.32395935]
[455.70211792 229.15698242]
[470.32067871 235.16305542]
[476.33346558 249.77886963]
[470.17315674 264.33312988]
[455.49459839 270.19104004]
[441.00628662 263.87722778]
[435.30389404 249.13754272]
[421.49029541 243.29075623]
[407.67672729 237.44396973]
[393.86312866 231.59716797]
[380.04956055 225.75038147]
[366.23596191 219.90359497]
[352.42239380 214.05680847]
[337.15274048 221.03826904]
[321.23410034 214.71934509]
[314.65548706 198.54193115]
[300.72476196 192.97999573]
[286.79406738 187.41804504]
[272.86334229 181.85610962]
[258.93261719 176.29417419]
[245.00190735 170.73223877]
[231.07119751 165.17030334]
[216.38223267 167.63682556]
[206.43476868 155.33403015]
[190.13740540 163.57254028]
[172.67349243 157.23271179]
[165.20523071 139.87435913]
[151.05792236 134.88902283]
[136.91059875 129.90370178]
[122.76328278 124.91838837]
[135.65792847 132.58181763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[19 93]
[20 92]
[21 91]
[22 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[37 71]
[38 70]
[39 69]
[40 68]
[41 67]
[42 63]
[43 62]
[44 61]
[46 59]
[47 58]
[49 56]
[50 55]
[95 151]
[96 150]
[97 149]
[98 148]
[103 145]
[105 143]
[106 142]
[107 141]
[108 140]
[109 139]
[110 138]
[111 137]
[115 134]
[116 133]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
