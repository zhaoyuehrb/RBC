%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGCUCUGGUUCGGGCUGCGGCUGCGGCUGCGGCUGCGGCUGCUACUGCUACGCUCCUAGCUUGAGGGAAAGAGGCCGAGGCCUGGGCCAAGCCCGGAGCCGCCGCUCGCCGGAGCCUCCUGGAGCCUCCGCGCCGGCUCAGCCUGGGGGCGGGCUCCGGUCCGGCCCGCCGCCGCACCCAGGACGGAGGCUGC\
) } def
/len { sequence length } bind def

/coor [
[91.02422333 465.06256104]
[100.90599060 452.42413330]
[100.42521667 437.43182373]
[97.06443024 430.83898926]
[100.05883026 422.19580078]
[99.81841278 407.19775391]
[99.57799530 392.19967651]
[99.33757782 377.20159912]
[99.09716034 362.20352173]
[95.84247589 355.55764771]
[98.97502136 346.96359253]
[98.97502136 331.96359253]
[98.97502136 316.96359253]
[98.85480499 301.96408081]
[98.61438751 286.96600342]
[98.37397003 271.96792603]
[95.11928558 265.32205200]
[98.25183105 256.72799683]
[98.25183105 241.72798157]
[98.25183105 226.72798157]
[98.25183105 211.72798157]
[98.25183105 196.72798157]
[98.25183105 181.72798157]
[90.51453400 169.00071716]
[98.25183105 155.20054626]
[98.25183105 140.20054626]
[98.25183105 125.20053864]
[98.25183105 110.20053864]
[90.99198151 127.98735046]
[78.79158020 143.56521606]
[62.17905807 155.91555786]
[48.18687057 161.32099915]
[34.19468689 166.72642517]
[20.20249939 172.13186646]
[6.21031332 177.53730774]
[-3.65591097 190.63652039]
[-19.89815521 188.37344360]
[-25.80778885 173.07611084]
[-15.30548954 160.48112488]
[0.80487859 163.54512024]
[14.79706478 158.13967896]
[28.78925133 152.73423767]
[42.78143692 147.32881165]
[56.77362442 141.92337036]
[57.07407761 134.42939758]
[42.08612823 133.82823181]
[42.68753433 118.84030151]
[57.67498779 119.44143677]
[57.97544098 111.94745636]
[44.46090698 105.43920135]
[30.94637489 98.93094635]
[15.15576172 99.91434479]
[7.04597425 87.42111969]
[-7.71159410 92.40628815]
[-21.32453918 85.61347198]
[-25.98619270 71.51366425]
[-39.50072479 65.00540924]
[-53.01525879 58.49715424]
[-66.52979279 51.98889923]
[-80.70816803 58.58492279]
[-95.79577637 54.47418594]
[-104.66870117 41.59764862]
[-103.13742065 26.03521919]
[-91.92496490 15.13500118]
[-76.32550049 14.04374409]
[-63.70463181 23.27670670]
[-60.02153397 38.47436523]
[-46.50700378 44.98262024]
[-32.99246979 51.49087524]
[-19.47793579 57.99913406]
[-5.54777002 52.85267258]
[8.25060081 59.26045227]
[13.55423069 73.90658569]
[28.37819481 72.45767212]
[37.45463181 85.41641235]
[50.96916580 91.92466736]
[64.48369598 98.43292236]
[70.38471985 93.80389404]
[68.26772308 78.95403290]
[82.18676758 84.54583740]
[88.08779144 79.91680145]
[84.98479462 65.24126434]
[81.88179779 50.56572723]
[78.66129303 35.91552734]
[75.32347870 21.29160881]
[71.98566437 6.66769123]
[68.64785004 -7.95622778]
[65.31003571 -22.58014679]
[61.97222137 -37.20406342]
[52.55294037 -51.30064011]
[63.49109650 -64.25413513]
[78.96634674 -57.32932663]
[76.59614563 -40.54187775]
[79.93395233 -25.91796112]
[83.27176666 -11.29404163]
[86.60958099 3.32987690]
[89.94739532 17.95379639]
[93.28520966 32.57771301]
[97.84429932 38.40654755]
[96.55734253 47.46273041]
[99.66033173 62.13827133]
[102.76332855 76.81380463]
[116.00628662 83.85823822]
[129.91003418 78.22923279]
[143.81379700 72.60022736]
[157.71754456 66.97122192]
[161.38092041 56.71307373]
[169.91383362 50.30208969]
[180.34765625 49.66617203]
[189.21504211 54.77435684]
[203.29206848 49.59387970]
[217.36909485 44.41340637]
[231.44612122 39.23292923]
[245.52314758 34.05245590]
[259.60015869 28.87197876]
[273.67718506 23.69150162]
[287.75421143 18.51102638]
[301.83123779 13.33055115]
[315.90826416 8.15007496]
[302.82116699 0.82015306]
[298.60757446 -13.57587337]
[305.67706299 -26.80546951]
[319.98687744 -31.30313873]
[333.35379028 -24.49683571]
[338.13375854 -10.27882576]
[331.59368896 3.21983218]
[346.10311890 -0.58498663]
[360.61254883 -4.38980532]
[375.12197876 -8.19462395]
[389.63137817 -11.99944305]
[404.14080811 -15.80426121]
[418.65023804 -19.60908127]
[430.03646851 -30.59380913]
[444.31008911 -26.33788872]
[458.81951904 -30.14270782]
[465.33984375 -44.35605240]
[479.49295044 -51.00616074]
[494.59613037 -46.95305634]
[503.51815796 -34.11048889]
[502.04629517 -18.54232788]
[490.87554932 -7.59938145]
[475.28036499 -6.44857502]
[462.62432861 -15.63328362]
[448.11489868 -11.82846546]
[437.76647949 -1.11588359]
[422.45504761 -5.09965754]
[407.94561768 -1.29483867]
[393.43621826 2.50997996]
[378.92678833 6.31479883]
[364.41735840 10.11961746]
[349.90792847 13.92443657]
[335.39852905 17.72925568]
[321.08874512 22.22710228]
[307.01171875 27.40757751]
[292.93469238 32.58805466]
[278.85766602 37.76852798]
[264.78063965 42.94900513]
[250.70361328 48.12948227]
[236.62658691 53.30995560]
[222.54956055 58.49043274]
[208.47253418 63.67090607]
[194.39550781 68.85138702]
[183.15419006 84.57530212]
[163.34654236 80.87497711]
[149.44279480 86.50398254]
[135.53904724 92.13298798]
[121.63529205 97.76199341]
[113.25183105 110.20053864]
[113.25183105 125.20053864]
[113.25183105 140.20054626]
[113.25183105 155.20054626]
[120.98912811 169.00071716]
[113.25183105 181.72798157]
[113.25183105 196.72798157]
[113.25183105 211.72798157]
[113.25183105 226.72798157]
[113.25183105 241.72798157]
[113.25183105 256.72799683]
[113.37204742 271.72750854]
[113.61246490 286.72558594]
[113.85288239 301.72366333]
[117.12276459 310.26638794]
[113.97502136 316.96359253]
[113.97502136 331.96359253]
[113.97502136 346.96359253]
[114.09523010 361.96310425]
[114.33564758 376.96118164]
[114.57606506 391.95925903]
[114.81648254 406.95733643]
[115.05690002 421.95538330]
[115.41751099 436.95104980]
[115.89828491 451.94335938]
[126.56948853 463.92269897]
[123.71514130 479.70980835]
[109.52484894 487.19412231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 192]
[3 191]
[5 190]
[6 189]
[7 188]
[8 187]
[9 186]
[11 185]
[12 184]
[13 183]
[14 181]
[15 180]
[16 179]
[18 178]
[19 177]
[20 176]
[21 175]
[22 174]
[23 173]
[25 171]
[26 170]
[27 169]
[28 168]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[49 77]
[50 76]
[51 75]
[53 73]
[56 70]
[57 69]
[58 68]
[59 67]
[81 102]
[82 101]
[83 100]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
[103 167]
[104 166]
[105 165]
[106 164]
[110 162]
[111 161]
[112 160]
[113 159]
[114 158]
[115 157]
[116 156]
[117 155]
[118 154]
[119 153]
[126 152]
[127 151]
[128 150]
[129 149]
[130 148]
[131 147]
[132 146]
[134 144]
[135 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
