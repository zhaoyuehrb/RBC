%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAGAAUAGAAGGAAGGUGAUAGGAUGUGAUGAUAGAAUUUGUGAUAGCCAAGCAACAACUUUUCCUAAUUCGGC\
) } def
/len { sequence length } bind def

/coor [
[74.00733948 374.77029419]
[59.60673141 369.23623657]
[50.50254059 356.78161621]
[49.59989166 341.38070679]
[57.18681335 327.94781494]
[70.84234619 320.76937866]
[72.04934692 305.81802368]
[73.25634766 290.86666870]
[74.46334076 275.91531372]
[66.96245575 268.48745728]
[64.89542389 257.90808105]
[69.22409058 247.79287720]
[78.67998505 241.74314880]
[81.08615875 226.93739319]
[83.49232483 212.13163757]
[85.89849854 197.32589722]
[88.30466461 182.52014160]
[90.71083069 167.71438599]
[93.11700439 152.90863037]
[94.02268219 137.93598938]
[93.41869354 122.94815826]
[81.22686005 114.74790955]
[76.14611816 100.96128082]
[80.10102081 86.81052399]
[91.59347534 77.65583038]
[90.98948669 62.66799545]
[82.70278168 49.19056320]
[89.92133331 36.16206360]
[89.31734467 21.17422867]
[88.71335602 6.18639374]
[80.42665100 -7.29103661]
[87.64520264 -20.31953621]
[87.04121399 -35.30737305]
[86.43722534 -50.29520798]
[85.83323669 -65.28304291]
[74.04850769 -75.81375122]
[73.24521637 -91.59761047]
[83.89992523 -103.27033997]
[99.69139862 -103.90671539]
[111.25082397 -93.12918091]
[111.72020721 -77.33186340]
[100.82106781 -65.88703156]
[101.42505646 -50.89919662]
[102.02904510 -35.91136169]
[102.63303375 -20.92352486]
[110.87653351 -8.51812553]
[103.70118713 5.58240461]
[104.30517578 20.57024002]
[104.90916443 35.55807495]
[113.15266418 47.96347427]
[105.97731781 62.06400681]
[106.58130646 77.05184174]
[118.77313995 85.25209045]
[123.85388184 99.03871918]
[119.89897919 113.18947601]
[108.40652466 122.34416962]
[109.01051331 137.33200073]
[111.69653320 140.91738892]
[113.01570129 144.78778076]
[113.04162598 148.49136353]
[111.98352814 151.64434814]
[110.15322113 153.96836853]
[107.92276001 155.31480408]
[105.51658630 170.12054443]
[103.11042023 184.92630005]
[100.70424652 199.73205566]
[98.29808044 214.53781128]
[95.89191437 229.34356689]
[93.48574066 244.14932251]
[101.65436554 262.37142944]
[89.41470337 277.12231445]
[88.20770264 292.07366943]
[87.00070953 307.02502441]
[85.79370880 321.97637939]
[98.12090302 331.25234985]
[103.45479584 345.72830200]
[100.09335327 360.78500366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 74]
[7 73]
[8 72]
[9 71]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[20 57]
[21 56]
[25 52]
[26 51]
[28 49]
[29 48]
[30 47]
[32 45]
[33 44]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
