%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUGGCGCAUGCGCCCCGACGCUCGGGCCCGCGGGCUCCUUUCUCCGUCGCCGCUCCAGGACGCGGCCUCGGGGGAGCCCUACCGGGACGGAGCCGCGGGGCCUGCGACUUCCCCCGGAGCUGGCCUGAGGGAUUCUCCUGUCC\
) } def
/len { sequence length } bind def

/coor [
[28.42513657 292.35360718]
[22.06140709 278.77011108]
[14.58879471 278.12976074]
[7.50901031 291.35385132]
[7.81677961 307.17205811]
[-5.01156235 314.74060059]
[-12.09134674 327.96472168]
[-19.17113113 341.18881226]
[-26.25091553 354.41290283]
[-25.18477631 370.77734375]
[-38.97212219 379.65661621]
[-53.42971039 371.91644287]
[-53.68481827 355.51928711]
[-39.47500992 347.33309937]
[-32.39522552 334.10900879]
[-25.31544113 320.88491821]
[-18.23565674 307.66082764]
[-19.04981804 292.78848267]
[-5.71508360 284.27407837]
[1.36470091 271.04998779]
[11.37484550 260.10235596]
[23.08474731 254.54922485]
[34.27255249 254.21565247]
[43.03063965 258.12802124]
[45.89801788 243.40463257]
[48.76539993 228.68124390]
[51.63277817 213.95785522]
[54.50015640 199.23446655]
[57.36753845 184.51107788]
[60.23491669 169.78768921]
[63.10229492 155.06430054]
[57.94060516 141.09268188]
[68.17324829 129.02604675]
[71.04062653 114.30266571]
[67.70281219 99.67874908]
[58.73115540 87.65753937]
[49.75949478 75.63633728]
[40.78783798 63.61513138]
[31.81617928 51.59392929]
[22.84452248 39.57272339]
[13.87286377 27.55151939]
[4.90120602 15.53031540]
[0.69740009 13.91206741]
[-2.42177105 11.27747154]
[-4.26696253 8.10720825]
[-4.82990885 4.89337254]
[-4.27071047 2.07758498]
[-12.18321991 -10.66573524]
[-20.09572792 -23.40905571]
[-35.22397614 -27.12036896]
[-43.06685257 -40.15662384]
[-39.43545151 -54.55622482]
[-47.34795761 -67.29954529]
[-55.26046753 -80.04286957]
[-63.17297745 -92.78618622]
[-71.08548737 -105.52950287]
[-86.57080841 -106.52167511]
[-98.49399567 -116.45229340]
[-102.27034760 -131.50283813]
[-96.44776917 -145.88606262]
[-83.26515961 -154.07133484]
[-67.79151154 -152.91122437]
[-55.97675323 -142.85185242]
[-52.36389923 -127.76123047]
[-58.34216690 -113.44201660]
[-50.42965698 -100.69869232]
[-42.51714706 -87.95537567]
[-34.60464096 -75.21205139]
[-26.69213104 -62.46873474]
[-12.17556190 -59.33746719]
[-3.96961975 -46.52664566]
[-7.35240841 -31.32156372]
[0.56010050 -18.57824326]
[8.47260952 -5.83492374]
[16.92241096 6.55865765]
[25.89406776 18.57986259]
[34.86572647 30.60106659]
[43.83738327 42.62227249]
[52.80904388 54.64347458]
[61.78070068 66.66468048]
[70.75235748 78.68588257]
[79.72401428 90.70708466]
[90.16369629 81.70758820]
[102.95616913 80.99398041]
[112.72136688 87.69356537]
[126.90588379 82.81510162]
[141.09039307 77.93663025]
[155.27491760 73.05815887]
[169.45942688 68.17968750]
[175.83979797 56.91695023]
[187.80940247 53.16905975]
[198.74922180 58.43418121]
[213.03475952 53.85994720]
[227.32028198 49.28570938]
[241.60581970 44.71147156]
[252.38919067 33.13436127]
[266.86972046 36.62195206]
[281.15524292 32.04771423]
[295.44079590 27.47347832]
[309.72631836 22.89924240]
[324.01184082 18.32500648]
[337.25271606 7.73653221]
[351.09280396 17.52876091]
[345.51458740 33.53874969]
[328.58609009 32.61053467]
[314.30053711 37.18477249]
[300.01501465 41.75901031]
[285.72949219 46.33324432]
[271.44396973 50.90748215]
[261.68237305 62.15741348]
[246.18005371 58.99700165]
[231.89453125 63.57123947]
[217.60899353 68.14547729]
[203.32347107 72.71971130]
[192.28738403 86.32530212]
[174.33790588 82.36420441]
[160.15338135 87.24267578]
[145.96887207 92.12114716]
[131.78434753 96.99961853]
[117.59983063 101.87808228]
[107.53269958 118.52932739]
[85.76401520 117.17004395]
[82.89663696 131.89343262]
[87.85322571 146.91816711]
[77.82568359 157.93168640]
[74.95830536 172.65507507]
[72.09092712 187.37846375]
[69.22354889 202.10185242]
[66.35616302 216.82524109]
[63.48878479 231.54862976]
[60.62140656 246.27201843]
[57.75402832 260.99539185]
[58.71508026 275.96456909]
[63.44170380 290.20040894]
[68.16832733 304.43624878]
[72.89495087 318.67208862]
[87.13296509 325.53173828]
[92.27132416 340.47738647]
[85.26154327 354.64208984]
[70.26239014 359.62213135]
[56.17259979 352.46298218]
[51.35139847 337.41201782]
[58.65911484 323.39871216]
[53.93249130 309.16287231]
[49.20586777 294.92703247]
[44.47924423 280.69119263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[6 17]
[7 16]
[8 15]
[9 14]
[24 132]
[25 131]
[26 130]
[27 129]
[28 128]
[29 127]
[30 126]
[31 125]
[33 123]
[34 122]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[47 74]
[48 73]
[49 72]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[85 120]
[86 119]
[87 118]
[88 117]
[89 116]
[92 114]
[93 113]
[94 112]
[95 111]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
[133 146]
[134 145]
[135 144]
[136 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
