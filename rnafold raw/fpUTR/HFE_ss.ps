%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAGUUCUGAAAGACCUGUUGCUUUUCACCAGGAAGUUUUACUGGGCAUCUCCUGAGCCUAGGCAAUAGCUGUAGGGUGACUUCUGGAGCCAUCCCCGUUUCCCCGCCCCCCAAAAGAAGCGGAGAUUUAACGGGGACGUGCGGCCAGAGCUGGGGAA\
) } def
/len { sequence length } bind def

/coor [
[98.96691132 265.77001953]
[98.38166809 250.78144836]
[87.30637360 240.88835144]
[86.49933624 225.69613647]
[96.95122528 214.14642334]
[96.36598206 199.15783691]
[95.78074646 184.16926575]
[95.19550323 169.18067932]
[94.61026001 154.19210815]
[94.02501678 139.20352173]
[93.43978119 124.21495056]
[86.81462097 120.69965363]
[84.22252655 135.47399902]
[69.37026978 137.57409668]
[62.78351593 124.09764862]
[73.56430054 113.66906738]
[66.93914795 110.15377808]
[54.19950104 118.07220459]
[41.45986176 125.99063110]
[28.72021866 133.90905762]
[21.08408356 147.76547241]
[6.19020748 147.91278076]
[-6.54943514 155.83120728]
[-11.58117580 171.06475830]
[-26.67785263 176.49337769]
[-40.25858307 167.95269775]
[-41.90539932 151.99438477]
[-30.35499763 140.86030579]
[-14.46786308 143.09156799]
[-1.72822106 135.17312622]
[4.99668789 121.88310242]
[20.80179024 121.16941833]
[33.54143143 113.25099182]
[46.28107452 105.33256531]
[59.02071762 97.41413879]
[58.94754410 89.91448975]
[43.97116089 90.75585938]
[30.79199791 97.91893768]
[17.86202240 90.31526947]
[17.71577454 75.31598663]
[30.49502945 67.46163940]
[43.81124878 74.36621857]
[58.80120087 74.91520691]
[58.72802734 67.41556549]
[45.83630753 59.74721527]
[32.94458771 52.07886505]
[20.05286789 44.41051865]
[7.16114759 36.74217224]
[-5.73057175 29.07382202]
[-14.75571918 27.36139107]
[-18.79694366 21.12798500]
[-31.53658485 13.20955753]
[-47.93572998 13.21741295]
[-55.90672684 -1.11420476]
[-47.24969482 -15.04215622]
[-30.87024879 -14.23855877]
[-23.61815643 0.46991500]
[-10.87851524 8.38834381]
[1.93777621 16.18210220]
[14.82949638 23.85045052]
[27.72121620 31.51879883]
[40.61293411 39.18714905]
[53.50465393 46.85549545]
[66.39637756 54.52384186]
[82.38605499 53.34182358]
[96.30824280 56.95816422]
[106.89302063 64.12874603]
[113.39452362 73.31817627]
[115.64324951 82.89052582]
[114.03468323 91.30371094]
[109.45690918 97.28759003]
[122.90729523 90.64779663]
[136.35769653 84.00799561]
[149.80809021 77.36819458]
[163.25848389 70.72840118]
[176.70887756 64.08860016]
[181.76942444 46.68523788]
[197.25650024 38.19022369]
[200.16490173 23.47488594]
[203.07331848 8.75954819]
[194.54415894 -4.27468681]
[197.70333862 -19.15670013]
[210.18203735 -27.20761871]
[204.38250732 -42.54702377]
[214.97505188 -55.06621170]
[231.06297302 -51.88651276]
[236.09640503 -36.27893066]
[224.89738464 -24.29920959]
[233.37501526 -12.10637379]
[230.63510132 2.85850215]
[217.78865051 11.66795826]
[214.88024902 26.38329506]
[211.97183228 41.09863281]
[216.93385315 45.03215408]
[220.62072754 50.18008423]
[235.46038818 47.99269867]
[250.30004883 45.80531311]
[265.13970947 43.61792755]
[279.97933960 41.43054581]
[294.81900024 39.24316025]
[309.65866089 37.05577469]
[324.49832153 34.86838913]
[339.26760864 32.24765396]
[353.95385742 29.19581604]
[365.89120483 18.81262016]
[379.92645264 23.79864693]
[394.61273193 20.74680710]
[409.29898071 17.69496727]
[423.98522949 14.64312649]
[432.66894531 1.71134210]
[447.60638428 -1.17444646]
[459.88134766 7.18383121]
[468.33856201 -6.16723061]
[483.77743530 -9.54612637]
[497.03833008 -0.94821632]
[500.25381470 14.52551174]
[491.51617432 27.69476891]
[476.00933838 30.74646950]
[462.93319702 21.87009239]
[455.00439453 34.42675781]
[440.15390015 37.73097229]
[427.03707886 29.32938766]
[412.35083008 32.38122940]
[397.66455078 35.43306732]
[382.97830200 38.48490906]
[372.09143066 48.64981461]
[357.00570679 43.88207626]
[342.31942749 46.93391800]
[340.07720947 49.71667862]
[336.35336304 51.52849197]
[331.63006592 51.67482376]
[326.68569946 49.70804596]
[311.84603882 51.89543152]
[297.00637817 54.08281326]
[282.16674805 56.27019882]
[267.32708740 58.45758438]
[252.48742676 60.64496994]
[237.64776611 62.83235168]
[222.80812073 65.01973724]
[214.58418274 79.09162903]
[198.82374573 84.25053406]
[183.34866333 77.53899384]
[169.89826965 84.17879486]
[156.44787598 90.81858826]
[142.99749756 97.45838928]
[129.54710388 104.09819031]
[116.09670258 110.73798370]
[108.42835999 123.62970734]
[109.01359558 138.61828613]
[109.59883881 153.60685730]
[110.18408203 168.59544373]
[110.76932526 183.58401489]
[111.35456085 198.57260132]
[111.93980408 213.56117249]
[123.26042938 224.26075745]
[123.64043427 239.46965027]
[113.37024689 250.19619751]
[113.95549011 265.18478394]
[120.61520386 280.77593994]
[107.47694397 291.49145508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 148]
[17 35]
[18 34]
[19 33]
[20 32]
[22 30]
[23 29]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[51 58]
[52 57]
[71 147]
[72 146]
[73 145]
[74 144]
[75 143]
[76 142]
[78 93]
[79 92]
[80 91]
[83 88]
[95 139]
[96 138]
[97 137]
[98 136]
[99 135]
[100 134]
[101 133]
[102 132]
[103 128]
[104 127]
[106 125]
[107 124]
[108 123]
[109 122]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
