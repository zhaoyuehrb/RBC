%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCGGGGCCGCGUGACGUGCCGGGAAGCCGGAGUCUAGAGCUCCGGGCGCGGGGAGGCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[45.23636627 358.85647583]
[37.72264481 372.33044434]
[24.10637093 379.58306885]
[8.73244953 378.30007935]
[-3.49335909 368.89086914]
[-8.66984177 354.35787964]
[-5.14520311 339.33856201]
[5.95585823 328.62548828]
[21.09103394 325.63717651]
[26.50965881 311.65008545]
[31.92828369 297.66299438]
[37.34690857 283.67593384]
[42.76553345 269.68884277]
[48.18415833 255.70175171]
[53.60278320 241.71467590]
[59.02140808 227.72758484]
[49.68577194 210.98754883]
[55.24267960 192.33973694]
[72.73392487 183.17007446]
[76.16818237 168.56851196]
[79.60243988 153.96693420]
[83.03669739 139.36535645]
[86.47095490 124.76379395]
[89.90522003 110.16222382]
[86.05652618 96.72052765]
[95.49320984 86.40351868]
[98.92746735 71.80194855]
[102.36173248 57.20037842]
[101.27537537 47.77634048]
[106.30652618 42.01134109]
[110.41146851 27.58395576]
[114.18207550 13.06560516]
[103.94852448 1.40138531]
[102.55899048 -14.05334949]
[110.54777527 -27.35593796]
[124.84304047 -33.39126205]
[139.94795227 -29.83862114]
[150.05436707 -18.06407356]
[151.27616882 -2.59517384]
[143.14353943 10.61996841]
[128.78364563 16.49986267]
[130.37368774 23.98447418]
[124.83885193 31.68890190]
[120.73390961 46.11628723]
[116.96330261 60.63463593]
[113.52904510 75.23620605]
[110.09477997 89.83777618]
[113.94347382 103.27947235]
[104.50679016 113.59648132]
[101.07253265 128.19804382]
[97.63826752 142.79962158]
[94.20401001 157.40119934]
[90.76975250 172.00276184]
[87.33549500 186.60433960]
[95.44386292 194.42245483]
[99.36447144 204.89346313]
[98.39915466 215.94967651]
[92.80716705 225.44038391]
[83.74076080 231.55020142]
[73.00849152 233.14620972]
[67.58986664 247.13330078]
[62.17124176 261.12039185]
[56.75261688 275.10745239]
[51.33399200 289.09454346]
[45.91536713 303.08163452]
[40.49674225 317.06872559]
[35.07811737 331.05578613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[26 47]
[27 46]
[28 45]
[30 44]
[31 43]
[32 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
