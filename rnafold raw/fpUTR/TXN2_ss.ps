%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAAGUGACGACAGGCGUGCCCUUGACAGGCAGGGAGGGCUAGGCUGUGCAUCCCUCCGCUCGCAUUGCAGGGAG\
) } def
/len { sequence length } bind def

/coor [
[167.53746033 190.73728943]
[157.59062195 179.50962830]
[147.64376831 168.28196716]
[137.69692993 157.05430603]
[125.47734833 155.94696045]
[117.10535431 146.43141174]
[117.59220123 133.36166382]
[108.10552216 121.74259186]
[98.61884308 110.12351227]
[91.28295135 106.23241425]
[88.99549103 97.84021759]
[81.11567688 92.67913818]
[79.87454224 85.17938232]
[71.35357666 72.83462524]
[62.83260345 60.48986816]
[54.31163025 48.14511108]
[40.10456848 41.18307877]
[39.24232483 26.31345367]
[23.95194817 23.33988190]
[15.48632812 10.69915771]
[18.41540337 -3.85955501]
[9.89443111 -16.20431328]
[1.37346041 -28.54907036]
[-7.14751101 -40.89382935]
[-15.66848183 -53.23858643]
[-24.18945312 -65.58334351]
[-39.49187469 -64.26750946]
[-53.39527130 -70.79370117]
[-62.15969467 -83.40641022]
[-63.42755890 -98.71288300]
[-56.85781860 -112.59574890]
[-44.21769714 -121.32059479]
[-28.90732574 -122.54048157]
[-15.04511833 -115.92725372]
[-6.35993624 -103.25984955]
[-5.18805170 -87.94572449]
[-11.84469509 -74.10431671]
[-3.32372403 -61.75955963]
[5.19724703 -49.41479874]
[13.71821880 -37.07004166]
[22.23918915 -24.72528458]
[30.76016045 -12.38052654]
[45.41145706 -9.95666790]
[54.22879028 2.44128799]
[51.58708572 17.79248238]
[65.18466949 23.87153435]
[66.65638733 39.62414169]
[75.17736053 51.96889877]
[83.69833374 64.31365967]
[92.21930695 76.65841675]
[100.98713684 88.82907867]
[110.23791504 100.63683319]
[119.72459412 112.25590515]
[129.21127319 123.87498474]
[146.49194336 129.84898376]
[148.92459106 147.10746765]
[158.87144470 158.33512878]
[168.81828308 169.56278992]
[178.76512146 180.79045105]
[191.74369812 182.40643311]
[199.79307556 192.19641113]
[198.92591858 204.43539429]
[208.41259766 216.05447388]
[217.89927673 227.67353821]
[232.62048340 233.46980286]
[234.67643738 248.22183228]
[250.42388916 249.56094360]
[260.54812622 261.69665527]
[259.04257202 277.42907715]
[246.80050659 287.42443848]
[231.08488464 285.75265503]
[221.21951294 273.40557861]
[223.05735779 257.70852661]
[209.01470947 252.74333191]
[206.28019714 237.16021729]
[196.79351807 225.54115295]
[187.30683899 213.92207336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[7 54]
[8 53]
[9 52]
[11 51]
[13 50]
[14 49]
[15 48]
[16 47]
[18 45]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[62 77]
[63 76]
[64 75]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
