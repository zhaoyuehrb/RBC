%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGUGGGGCGGCCGGGCCUGCGCUGGGGACGGCUCUGGGGACUGCGGCCGGCGCCGGGACCUGGAGGGGACGCUGGGGCCGAAGCAGCAUGUGACACCGACCAGGAUUCAGCCCUG\
) } def
/len { sequence length } bind def

/coor [
[-10.49121094 313.98828125]
[-19.37194061 326.07681274]
[-28.25267029 338.16534424]
[-37.13339996 350.25387573]
[-46.01412964 362.34243774]
[-54.89485931 374.43096924]
[-56.43248749 392.72216797]
[-72.66194916 399.25549316]
[-81.22048187 411.57421875]
[-82.04991150 427.95239258]
[-96.76980591 435.18127441]
[-110.23760223 425.82443237]
[-108.59877777 409.50735474]
[-93.53923035 403.01568604]
[-84.98069000 390.69696045]
[-86.80552673 378.65924072]
[-79.66849518 368.30252075]
[-66.98339081 365.55023193]
[-58.10266113 353.46170044]
[-49.22193527 341.37316895]
[-40.34120560 329.28463745]
[-31.46047401 317.19610596]
[-22.57974434 305.10757446]
[-14.51561260 292.45965576]
[-7.30319214 279.30743408]
[-0.09077162 266.15518188]
[7.12164879 253.00297546]
[14.33406925 239.85075378]
[21.54648972 226.69853210]
[17.14237213 212.51615906]
[24.26943398 199.07519531]
[39.17506027 194.55191040]
[46.21324539 181.30563354]
[53.07597733 167.96760559]
[53.34158707 160.48648071]
[60.29996872 154.37164307]
[67.51239014 141.21942139]
[67.97538757 133.74790955]
[75.09275055 127.81887054]
[82.64983368 114.86161804]
[77.26524353 97.75793457]
[85.88710022 82.03553772]
[103.20362854 77.38069916]
[110.06636047 64.04267883]
[116.75243378 50.61522675]
[123.26068878 37.10069275]
[129.76895142 23.58616066]
[128.78555298 7.79554701]
[141.27877808 -0.31424004]
[147.78703308 -13.82877350]
[153.93627930 -27.51039505]
[159.72222900 -41.34956741]
[165.50817871 -55.18874359]
[171.29412842 -69.02791595]
[169.47875977 -84.74462891]
[181.52656555 -93.50244904]
[187.31251526 -107.34162140]
[193.09848022 -121.18079376]
[198.88442993 -135.01997375]
[204.48719788 -148.93431091]
[202.25758362 -164.59762573]
[214.07002258 -173.67042542]
[219.48864746 -187.65750122]
[224.90727234 -201.64459229]
[221.85845947 -217.75784302]
[234.46334839 -228.24826050]
[249.75509644 -222.32420349]
[252.00286865 -206.07983398]
[238.89434814 -196.22596741]
[233.47572327 -182.23887634]
[228.05709839 -168.25180054]
[230.67430115 -153.58892822]
[218.47428894 -143.51568604]
[218.99868774 -136.04824829]
[212.72360229 -129.23402405]
[206.93765259 -115.39484406]
[201.15170288 -101.55567169]
[195.36573792 -87.71649933]
[197.59497070 -72.98965454]
[185.13331604 -63.24196625]
[179.34735107 -49.40279007]
[173.56140137 -35.56361771]
[167.77545166 -21.72444153]
[168.78234863 -16.93816566]
[166.70259094 -11.47837734]
[161.30155945 -7.32051706]
[154.79330444 6.19401598]
[156.24221802 21.01798058]
[143.28347778 30.09441757]
[136.77522278 43.60895157]
[130.26696777 57.12348175]
[130.19892883 64.60900879]
[123.40438843 70.90540314]
[116.54165649 84.24343109]
[122.10043335 94.21495056]
[122.14014435 105.63114166]
[116.65088654 115.64109802]
[107.00346375 121.74505615]
[95.60709381 122.41870117]
[88.05001068 135.37596130]
[80.66461182 148.43183899]
[73.45219421 161.58406067]
[66.41400146 174.83033752]
[59.55127335 188.16836548]
[58.37829971 197.35719299]
[52.32728195 201.76432800]
[56.52667236 216.76443481]
[49.02489090 229.99990845]
[34.69871521 233.91094971]
[27.48629379 247.06317139]
[20.27387238 260.21539307]
[13.06145191 273.36761475]
[5.84903193 286.51983643]
[-1.36338866 299.67205811]
[13.60910130 298.76403809]
[23.85326004 309.72109985]
[21.94148827 324.59875488]
[9.25993252 332.60989380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[8 15]
[9 14]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 109]
[32 106]
[33 104]
[34 103]
[36 102]
[37 101]
[39 100]
[40 99]
[43 94]
[44 93]
[45 91]
[46 90]
[47 89]
[49 87]
[50 86]
[51 83]
[52 82]
[53 81]
[54 80]
[56 78]
[57 77]
[58 76]
[59 75]
[60 73]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
