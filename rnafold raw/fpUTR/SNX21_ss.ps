%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGCCCGGCGGAGCCCUGCAGAACCCGGCCGACCUCCAUGGGCUGCGGGGGGCUGCACCCGGACCCCUGGGGCGCGGCGCGCCCCUGA\
) } def
/len { sequence length } bind def

/coor [
[94.51071930 118.05014038]
[86.71883392 113.39964294]
[81.99932098 105.64936066]
[67.08148956 104.08143616]
[52.16366196 102.51351166]
[37.24583435 100.94558716]
[22.32800484 99.37765503]
[7.41017675 97.80973053]
[-3.21972346 105.36390686]
[-15.73477554 103.61303711]
[-23.37805939 94.06156921]
[-38.23207855 91.97396851]
[-53.08610153 89.88637543]
[-67.94012451 87.79877472]
[-80.48112488 97.03787231]
[-95.51548004 94.70915222]
[-104.24626160 82.69628143]
[-118.98895264 88.43766785]
[-130.51554871 79.00437164]
[-145.36956787 76.91677856]
[-156.05134583 88.17195129]
[-171.31481934 90.96587372]
[-185.29086304 84.22422028]
[-192.60540771 70.53929138]
[-190.44584656 55.17322922]
[-179.64257812 44.03459167]
[-164.34970093 41.40641403]
[-150.44761658 48.29928589]
[-143.28196716 62.06275558]
[-128.42794800 64.15035248]
[-114.74771118 58.25964737]
[-102.15866089 67.84226227]
[-90.45490265 58.70127869]
[-75.36107635 60.60679626]
[-65.85252380 72.94475555]
[-50.99850464 75.03234863]
[-36.14448166 77.11994934]
[-21.29046249 79.20754242]
[-5.52622175 71.71364594]
[8.97810364 82.89189911]
[23.89593315 84.45983124]
[38.81375885 86.02775574]
[53.73159027 87.59568024]
[68.64941406 89.16361237]
[83.56724548 90.73153687]
[100.98738861 81.15948486]
[117.31155396 92.50000000]
[132.31155396 92.50000000]
[147.31155396 92.50000000]
[162.31155396 92.50000000]
[177.31155396 92.50000000]
[192.31155396 92.50000000]
[207.29100037 91.71495819]
[222.20881653 90.14703369]
[237.12664795 88.57910919]
[252.04447937 87.01117706]
[266.96231079 85.44325256]
[281.46664429 74.26499939]
[297.23086548 81.75889587]
[312.08489990 79.67130280]
[326.93890381 77.58370209]
[341.79293823 75.49610901]
[356.64697266 73.40850830]
[369.22949219 62.89130402]
[384.53381348 68.78282166]
[386.81613159 85.02236938]
[373.72860718 94.90409851]
[358.73455811 88.26253510]
[343.88052368 90.35012817]
[329.02651978 92.43772125]
[314.17248535 94.52532196]
[299.31848145 96.61291504]
[291.67520142 106.16439056]
[279.16012573 107.91526031]
[268.53024292 100.36108398]
[253.61241150 101.92900848]
[238.69458008 103.49693298]
[223.77674866 105.06486511]
[208.85891724 106.63278961]
[206.29272461 109.34768677]
[202.19255066 110.83937073]
[197.20643616 110.35771942]
[192.31155396 107.50000000]
[177.31155396 107.50000000]
[162.31155396 107.50000000]
[147.31155396 107.50000000]
[132.31155396 107.50000000]
[117.31155396 107.50000000]
[111.80776978 114.71450043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[11 38]
[12 37]
[13 36]
[14 35]
[17 32]
[19 30]
[20 29]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
