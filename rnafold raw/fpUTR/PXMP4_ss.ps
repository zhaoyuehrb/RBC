%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAACAGCCUAUAGACGCCACGAGUCGGCGGCGCUACCGAGGGGCUGUGGGCGCGCAGCUGGAACCUCCGGCUGUCAGUGCGCUUACAGUUCCUAACCCCGACCCUGCGCGCAGCCCGCACU\
) } def
/len { sequence length } bind def

/coor [
[90.59202576 328.07788086]
[75.43775940 330.22424316]
[61.02576447 325.07128906]
[50.66780472 313.80313110]
[46.74406815 299.00912476]
[50.15620041 284.08880615]
[60.12011719 272.47076416]
[74.34618378 266.82473755]
[75.86370850 251.90168762]
[63.09502411 244.19285583]
[54.90591049 231.65301514]
[52.96548080 216.74006653]
[57.71172333 202.40502930]
[68.25409698 191.50799561]
[82.54007721 186.24757385]
[80.05834961 179.19445801]
[84.28974915 170.96739197]
[86.18482971 156.08758545]
[88.07991028 141.20777893]
[89.78634644 126.30516815]
[91.30387115 111.38212585]
[85.74954987 98.55087280]
[93.77308655 87.10034943]
[91.51092529 78.12974548]
[95.52275848 71.82017517]
[97.41783905 56.94036865]
[99.31291962 42.06056213]
[101.20799255 27.18075371]
[103.10307312 12.30094624]
[101.06888580 3.27591133]
[105.23927307 -2.92999959]
[107.51068878 -17.75702477]
[100.31423187 -22.52027702]
[94.90527344 -29.20113373]
[91.76889038 -37.16789246]
[91.17650604 -45.67512894]
[93.16255951 -53.93343735]
[97.52317047 -61.18268967]
[103.83687592 -66.76197815]
[111.50529480 -70.16987610]
[119.80981445 -71.10945129]
[124.30026245 -85.42154694]
[128.79071045 -99.73363495]
[133.28115845 -114.04572296]
[137.77160645 -128.35780334]
[142.26205444 -142.66989136]
[146.75248718 -156.98199463]
[151.24293518 -171.29408264]
[155.73338318 -185.60617065]
[160.22383118 -199.91825867]
[164.71427917 -214.23034668]
[169.20472717 -228.54243469]
[173.69517517 -242.85452271]
[178.18562317 -257.16659546]
[182.67607117 -271.47869873]
[186.43585205 -285.99984741]
[189.45533752 -300.69281006]
[192.47480774 -315.38574219]
[195.49429321 -330.07870483]
[198.51376343 -344.77163696]
[201.53324890 -359.46459961]
[204.55271912 -374.15756226]
[207.57220459 -388.85049438]
[210.59167480 -403.54345703]
[207.85749817 -420.27548218]
[223.17874146 -427.53466797]
[234.39559937 -414.82174683]
[225.28462219 -400.52395630]
[222.26515198 -385.83102417]
[219.24566650 -371.13806152]
[216.22619629 -356.44512939]
[213.20671082 -341.75216675]
[210.18724060 -327.05923462]
[207.16775513 -312.36627197]
[204.14828491 -297.67333984]
[201.12879944 -282.98037720]
[202.67120361 -280.50979614]
[203.26957703 -277.24551392]
[202.60321045 -273.56646729]
[200.50306702 -269.96511841]
[196.98815918 -266.98825073]
[192.49771118 -252.67616272]
[188.00726318 -238.36407471]
[183.51681519 -224.05198669]
[179.02636719 -209.73989868]
[174.53591919 -195.42781067]
[170.04547119 -181.11572266]
[165.55502319 -166.80363464]
[161.06457520 -152.49154663]
[156.57414246 -138.17945862]
[152.08369446 -123.86736298]
[147.59324646 -109.55527496]
[143.10279846 -95.24318695]
[138.61235046 -80.93109894]
[134.12190247 -66.61901093]
[146.39604187 -48.52862930]
[141.58616638 -26.93018150]
[122.33771515 -15.48560810]
[120.06629944 -0.65858293]
[117.98287964 14.19602489]
[116.08780670 29.07583237]
[114.19272614 43.95563889]
[112.29764557 58.83544922]
[110.40256500 73.71525574]
[108.69612885 88.61787415]
[114.25045013 101.44912720]
[106.22691345 112.89965057]
[104.70938873 127.82269287]
[106.97154999 136.79328918]
[102.95971680 143.10285950]
[101.06463623 157.98266602]
[99.16955566 172.86247253]
[97.46311951 187.76509094]
[110.39775085 195.79359436]
[118.53076935 208.58972168]
[120.29423523 223.58673096]
[115.39157104 237.80380249]
[104.84583282 248.43850708]
[90.78675079 253.41921997]
[89.26922607 268.34225464]
[102.06754303 276.73638916]
[109.48880005 290.12234497]
[109.82765198 305.42410278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 120]
[9 119]
[15 113]
[17 112]
[18 111]
[19 110]
[20 108]
[21 107]
[23 105]
[25 104]
[26 103]
[27 102]
[28 101]
[29 100]
[31 99]
[32 98]
[41 95]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
