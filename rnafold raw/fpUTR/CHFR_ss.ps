%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAGGGAGCCGCAAUGUCUCUUGACAGCGGCGGCGGCGCAGCCGGUUCCGGGUUCGGCGCGGGGCGGGGAUGUGAAUCCCG\
) } def
/len { sequence length } bind def

/coor [
[76.27054596 114.89499664]
[72.13644409 102.92747498]
[57.34343338 100.44416809]
[42.55042267 97.96086121]
[27.75741196 95.47755432]
[16.66862106 102.36808014]
[4.27359247 99.83507538]
[-2.75792861 89.80761719]
[-15.86123848 98.23027039]
[-30.71701241 94.94992828]
[-38.66596985 82.40601349]
[-53.35711670 79.37777710]
[-68.04826355 76.34954071]
[-82.73941040 73.32130432]
[-97.43055725 70.29306793]
[-111.73015594 80.16634369]
[-128.44230652 76.82714844]
[-137.48753357 62.77935791]
[-152.28053284 60.29605103]
[-167.07354736 57.81274414]
[-181.86656189 55.32943344]
[-197.03253174 61.56844711]
[-209.85165405 51.34092712]
[-207.13671875 35.16807556]
[-191.68060303 29.68713379]
[-179.38325500 40.53642273]
[-164.59024048 43.01973343]
[-149.79722595 45.50304031]
[-135.00421143 47.98634720]
[-125.53543854 39.04304504]
[-112.43907928 37.23425674]
[-100.55317688 43.45796204]
[-94.40232086 55.60192490]
[-79.71117401 58.63016129]
[-65.02002716 61.65839767]
[-50.32888031 64.68663025]
[-35.63773346 67.71486664]
[-23.37621498 59.33687592]
[-8.43416500 62.19865799]
[0.27030760 75.11647034]
[16.46631050 68.63442230]
[30.24071884 80.68453979]
[45.03372955 83.16784668]
[59.82674026 85.65116119]
[74.61975098 88.13446808]
[87.45998383 74.94613647]
[105.71281433 72.57170105]
[121.49983978 82.03601837]
[135.16517639 75.85066986]
[148.83052063 69.66532898]
[162.49586487 63.47998428]
[176.16119385 57.29463959]
[189.82653809 51.10929489]
[199.20828247 38.36985016]
[213.99363708 40.17053604]
[227.65898132 33.98518753]
[239.59555054 21.94547081]
[254.46911621 30.08262062]
[250.76737976 46.62751389]
[233.84432983 47.65052795]
[220.17898560 53.83587265]
[211.77467346 66.13290405]
[196.01188660 64.77463531]
[182.34654236 70.95997620]
[168.68119812 77.14532471]
[155.01586914 83.33066559]
[141.35052490 89.51601410]
[127.68518829 95.70135498]
[127.08447266 107.16792297]
[121.93453979 117.43054199]
[130.75131226 129.56579590]
[139.56809998 141.70104980]
[148.38487244 153.83630371]
[157.20166016 165.97155762]
[172.39494324 172.14375305]
[174.37799072 188.42256165]
[161.11079407 198.06173706]
[146.24151611 191.14532471]
[145.06640625 174.78834534]
[136.24961853 162.65309143]
[127.43284607 150.51783752]
[118.61606598 138.38256836]
[109.79928589 126.24732208]
[97.24367523 127.88100433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[8 40]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[18 29]
[19 28]
[20 27]
[21 26]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[55 61]
[56 60]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
