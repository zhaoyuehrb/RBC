%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGAAACUCCAUCAGGCUCCGCCCCACGGUCUGCGGAGUGAGCCAAUCAGGGCACAGCCUGCGUUGACCGCGUGCCGGGUGUC\
) } def
/len { sequence length } bind def

/coor [
[11.63679409 239.01431274]
[3.98274398 251.91452026]
[-3.67130661 264.81472778]
[2.59435964 279.01055908]
[-0.71359891 294.17092896]
[-12.32320499 304.46640015]
[-27.77032661 305.93814087]
[-41.11523438 298.02023315]
[-47.22653198 283.75729370]
[-43.75430679 268.63369751]
[-32.03369904 258.46478271]
[-16.57151985 257.16067505]
[-8.91746998 244.26046753]
[-1.26341927 231.36026001]
[-4.96502304 222.85603333]
[-4.19113731 213.47312927]
[1.00584507 205.45550537]
[9.50009632 200.78315735]
[19.33396149 200.68380737]
[28.32312584 188.67568970]
[37.31229019 176.66757202]
[46.08569336 164.50091553]
[54.64052963 152.17961121]
[63.19536972 139.85829163]
[71.75021362 127.53697968]
[72.65328217 112.66977692]
[86.87940979 105.74678802]
[88.23401642 91.83072662]
[100.79927826 85.69837189]
[102.31424713 69.94986725]
[115.92847443 63.90818024]
[124.48331451 51.58686829]
[133.03816223 39.26555634]
[141.59300232 26.94424438]
[150.14784241 14.62293243]
[158.25744629 2.00412893]
[165.91149902 -10.89608479]
[173.56555176 -23.79629898]
[181.21960449 -36.69651031]
[188.87365723 -49.59672546]
[185.18507385 -64.73053741]
[193.13114929 -77.70415497]
[207.58164978 -81.12737274]
[215.23570251 -94.02758789]
[215.62332153 -109.84404755]
[228.77186584 -116.84156799]
[236.42590332 -129.74177551]
[244.07995605 -142.64199829]
[239.92910767 -157.89144897]
[247.84941101 -171.56787109]
[263.14190674 -175.55726624]
[276.73379517 -167.49281311]
[280.56130981 -152.15899658]
[272.35360718 -138.65310669]
[256.98016357 -134.98794556]
[249.32612610 -122.08773041]
[241.67207336 -109.18751526]
[241.83192444 -94.29376984]
[228.13591003 -86.37353516]
[220.48185730 -73.47332764]
[224.40275574 -59.14984131]
[216.82423401 -45.95815659]
[201.77386475 -41.94267654]
[194.11981201 -29.04246140]
[186.46575928 -16.14224815]
[178.81170654 -3.24203420]
[171.15766907 9.65817928]
[171.52272034 14.63038731]
[168.60517883 19.84271240]
[162.46914673 23.17777061]
[153.91430664 35.49908447]
[145.35946655 47.82039642]
[136.80462646 60.14170456]
[128.24978638 72.46302032]
[127.34671783 87.33022308]
[113.12059021 94.25321198]
[111.76598358 108.16927338]
[99.20072174 114.30162811]
[97.68575287 130.05014038]
[84.07152557 136.09182739]
[75.51668549 148.41313171]
[66.96184540 160.73445129]
[58.40700150 173.05575562]
[56.00025558 182.10928345]
[49.32041168 185.65673828]
[40.33124542 197.66485596]
[31.34208107 209.67297363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[19 87]
[20 86]
[21 85]
[22 83]
[23 82]
[24 81]
[25 80]
[27 78]
[29 76]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[43 60]
[44 59]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
