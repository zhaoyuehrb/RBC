%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGAGUCCGGGCAGCGUUCGGCGCGCCGGGCCGGGGUGGCGGGCGGCCCCGGGACCCCGGCAGCUGGAGAAGGAGCCGGAGCCCGGCCGGGAUGAGAAGGUGACGCCGCCGGGGGCGCCACUCGCUUUGUGGGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[90.09942627 103.85663605]
[76.35577393 97.84732056]
[62.61211395 91.83799744]
[48.86845779 85.82868195]
[35.12480164 79.81936646]
[22.79840660 83.79254913]
[11.44702244 78.44245911]
[6.96375895 67.15296936]
[-6.64260483 60.83895111]
[-20.24896812 54.52492905]
[-33.85533142 48.21090698]
[-47.46169662 41.89688492]
[-59.19157028 52.83779526]
[-74.18009186 58.44191742]
[-90.13381958 57.88315582]
[-104.62361145 51.27602386]
[-115.45449829 39.65373230]
[-120.99816895 24.80671501]
[-120.43774414 9.00685596]
[-134.18139648 2.99753714]
[-147.92504883 -3.01178169]
[-161.66871643 -9.02110004]
[-175.41236877 -15.03041935]
[-189.15602112 -21.03973770]
[-201.48242188 -17.06655312]
[-212.83380127 -22.41664314]
[-217.31706238 -33.70613098]
[-230.92343140 -40.02014923]
[-244.52980042 -46.33417130]
[-258.13616943 -52.64819336]
[-271.74252319 -58.96221542]
[-285.34887695 -65.27623749]
[-299.15863037 -71.13207245]
[-313.15634155 -76.52319336]
[-327.15405273 -81.91430664]
[-341.15176392 -87.30542755]
[-355.14947510 -92.69654083]
[-369.14718628 -98.08766174]
[-383.14489746 -103.47877502]
[-398.80380249 -101.21836853]
[-407.89978027 -113.01294708]
[-424.00701904 -109.93247223]
[-434.52218628 -122.51670837]
[-428.62820435 -137.82006836]
[-412.38827515 -140.09977722]
[-402.50866699 -127.01065063]
[-387.85098267 -129.65667725]
[-377.75378418 -117.47648621]
[-363.75607300 -112.08536530]
[-349.75836182 -106.69425201]
[-335.76065063 -101.30313110]
[-321.76293945 -95.91201782]
[-307.76522827 -90.52090454]
[-293.76751709 -85.12978363]
[-290.35220337 -86.27585602]
[-286.20196533 -85.77365875]
[-282.12167358 -83.29194641]
[-279.03485107 -78.88259888]
[-265.42849731 -72.56858063]
[-251.82214355 -66.25455475]
[-238.21577454 -59.94053650]
[-224.60940552 -53.62651443]
[-211.00305176 -47.31249237]
[-193.67285156 -49.84673309]
[-183.14669800 -34.78339386]
[-169.40304565 -28.77407455]
[-155.65939331 -22.76475716]
[-141.91574097 -16.75543785]
[-128.17207336 -10.74611950]
[-114.42842102 -4.73680067]
[-104.65843201 -14.86801815]
[-91.98433685 -21.05714989]
[-77.92768097 -22.53837967]
[-64.18382263 -19.11245346]
[-52.41742325 -11.17320633]
[-44.06087112 0.33759707]
[-40.13988876 14.04194355]
[-41.14767456 28.29052162]
[-27.54131126 34.60454178]
[-13.93494701 40.91856384]
[-0.32858330 47.23258591]
[13.27778053 53.54660797]
[30.60796738 51.01236725]
[41.13412094 66.07570648]
[54.87777710 72.08502197]
[68.62143707 78.09434509]
[82.36508942 84.10366058]
[96.10874939 90.11298370]
[110.22309113 95.19090271]
[124.64508057 99.31475830]
[140.04064941 95.66959381]
[150.15031433 106.60777283]
[165.54588318 102.96260834]
[175.65556335 113.90078735]
[184.85002136 113.25390625]
[190.35099792 118.28049469]
[204.67753601 122.72463226]
[219.00407410 127.16876221]
[232.86514282 120.06182098]
[247.33097839 124.77289581]
[254.02093506 138.03109741]
[268.34747314 142.47523499]
[282.67401123 146.91937256]
[297.00054932 151.36349487]
[312.47351074 148.06224060]
[322.33697510 159.22293091]
[336.66351318 163.66706848]
[350.99005127 168.11120605]
[365.31658936 172.55532837]
[379.18261719 164.97187805]
[394.32598877 169.49446106]
[401.76242065 183.43989563]
[397.08001709 198.53460693]
[383.05673218 205.82318115]
[368.01235962 200.98143005]
[360.87246704 186.88186646]
[346.54592896 182.43774414]
[332.21939087 177.99360657]
[317.89285278 173.54946899]
[303.44461060 177.16860962]
[292.55642700 165.69003296]
[278.22988892 161.24589539]
[263.90335083 156.80177307]
[249.57681274 152.35763550]
[236.55787659 159.50209045]
[221.96542358 155.19918823]
[214.55993652 141.49530029]
[200.23339844 137.05116272]
[185.90686035 132.60704041]
[171.53170776 128.32276917]
[157.16770935 132.26290894]
[146.02647400 121.02976227]
[131.66246033 124.96988678]
[120.52123260 113.73674774]
[106.09923553 109.61289978]
[111.92488098 123.43540955]
[106.46144867 137.40505981]
[92.80403137 143.60786438]
[78.68970490 138.52989197]
[72.11438751 125.04786682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[5 84]
[8 82]
[9 81]
[10 80]
[11 79]
[12 78]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[41 46]
[89 135]
[90 134]
[92 132]
[94 130]
[96 129]
[97 128]
[98 127]
[101 124]
[102 123]
[103 122]
[104 121]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
