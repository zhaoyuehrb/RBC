%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAAUCGGCUGGUUUAUAUUGGCGCGGCCCAGACGGCAGAGGUCUCUGCGGCGCGGUCCUCGGAGACACGCGGCGGUGUCCUGUGUUGGCC\
) } def
/len { sequence length } bind def

/coor [
[-21.58453560 217.13513184]
[-30.44825935 222.29048157]
[-40.30040741 225.08064270]
[-50.52248383 225.33786011]
[-60.47459030 223.05313110]
[-69.53549957 218.37634277]
[-77.14142609 211.60650635]
[-82.82109070 203.17260742]
[-97.20698547 207.42068481]
[-111.59287262 211.66877747]
[-125.97875977 215.91685486]
[-140.36465454 220.16493225]
[-154.67674255 224.65538025]
[-168.91094971 229.38691711]
[-183.14514160 234.11843872]
[-189.99987793 248.35882568]
[-204.94377136 253.50233459]
[-219.11087036 246.49743652]
[-224.09609985 231.50000000]
[-216.94180298 217.40774536]
[-201.89250183 212.58135986]
[-187.87667847 219.88424683]
[-173.64247131 215.15270996]
[-159.40826416 210.42117310]
[-153.94216919 205.21694946]
[-144.61273193 205.77905273]
[-130.22683716 201.53096008]
[-115.84095001 197.28288269]
[-101.45506287 193.03480530]
[-87.06917572 188.78671265]
[-84.10306549 168.58071899]
[-71.65075684 152.30680847]
[-52.79661560 144.10612488]
[-32.26449585 146.10639954]
[-15.23426723 157.87028503]
[-2.24388647 150.37028503]
[10.74649429 142.87028503]
[23.73687553 135.37028503]
[36.72725677 127.87028503]
[43.88074875 114.80594635]
[59.70069885 114.60655975]
[72.69107819 107.10655975]
[85.68145752 99.60655975]
[92.83802795 87.59510040]
[106.81854248 87.40306091]
[114.90119171 73.80227661]
[129.79197693 74.13933563]
[142.78236389 66.63933563]
[155.77273560 59.13933945]
[168.76312256 51.63933945]
[176.84577942 38.03855133]
[191.73657227 38.37561417]
[204.72694397 30.87561607]
[217.71733093 23.37561607]
[221.87271118 11.02309418]
[233.01663208 5.08109283]
[244.81005859 8.30259514]
[258.04632568 1.24561286]
[271.28259277 -5.81136942]
[275.64596558 -21.00138664]
[289.51257324 -28.58378792]
[304.65560913 -24.06007195]
[312.09097290 -10.11407566]
[307.40740967 4.98028564]
[293.38357544 12.26779747]
[278.33959961 7.42490673]
[265.10330200 14.48188877]
[251.86703491 21.53887177]
[243.52793884 36.87890625]
[225.21733093 36.36599731]
[212.22694397 43.86599731]
[199.23657227 51.36599731]
[192.08306885 64.43032837]
[176.26312256 64.62971497]
[163.27273560 72.12971497]
[150.28236389 79.62971497]
[137.29197693 87.12971497]
[130.13848877 100.19405365]
[114.31854248 100.39344025]
[107.16197205 112.40489960]
[93.18145752 112.59693909]
[80.19107819 120.09693909]
[67.20069885 127.59693909]
[59.11804962 141.19772339]
[44.22725677 140.86065674]
[31.23687553 148.36065674]
[18.24649429 155.86065674]
[5.25611353 163.36065674]
[-7.73426723 170.86065674]
[-5.58077908 180.95910645]
[-6.00051069 191.26174927]
[-8.96009636 201.12413025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 24]
[14 23]
[15 22]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[41 83]
[42 82]
[43 81]
[45 79]
[47 77]
[48 76]
[49 75]
[50 74]
[52 72]
[53 71]
[54 70]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
