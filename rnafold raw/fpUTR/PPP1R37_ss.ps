%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGACGACUACGACCACUAGGAGAGCGGACGGAGGCGGCGCCUGAAGCGGCGGCGGAGCCCAUGCCCCGGGACGGCGGGCGGACCCGGAGAGACAAAUCCGGGGCCCGGGGCAUGUCCCCGGGGCCCCCGUGAGGAGGCGGCGGCGGCU\
) } def
/len { sequence length } bind def

/coor [
[-255.24359131 283.40945435]
[-267.52111816 292.02703857]
[-279.79864502 300.64459229]
[-292.07617188 309.26214600]
[-298.92651367 323.52340698]
[-313.78890991 324.50228882]
[-326.06643677 333.11984253]
[-331.33316040 340.65841675]
[-338.68344116 341.78497314]
[-337.49224854 354.29779053]
[-341.73254395 366.05340576]
[-350.53451538 374.82244873]
[-362.16952515 378.97003174]
[-374.38955688 377.76043701]
[-384.86141968 371.48675537]
[-397.64303589 379.33724976]
[-405.35281372 393.15283203]
[-420.24725342 393.22088623]
[-433.02883911 401.07138062]
[-440.73861694 414.88696289]
[-455.63305664 414.95501709]
[-468.41467285 422.80554199]
[-473.52740479 438.01208496]
[-488.65277100 443.36029053]
[-502.18783569 434.74746704]
[-503.74972534 418.78060913]
[-492.14022827 407.70816040]
[-476.26519775 410.02392578]
[-463.48358154 402.17340088]
[-456.68804932 388.91934204]
[-440.87936401 388.28979492]
[-428.09777832 380.43927002]
[-421.30221558 367.18521118]
[-405.49356079 366.55566406]
[-392.71194458 358.70513916]
[-392.19515991 341.10046387]
[-381.15280151 327.17944336]
[-363.82528687 322.58917236]
[-347.04879761 329.33422852]
[-334.68399048 320.84234619]
[-322.40649414 312.22476196]
[-316.43429565 298.57989502]
[-300.69372559 296.98464966]
[-288.41619873 288.36706543]
[-276.13867188 279.74951172]
[-263.86117554 271.13192749]
[-264.43698120 263.89633179]
[-262.41680908 256.85342407]
[-258.01168823 250.91317749]
[-251.74392700 246.86054993]
[-244.38545227 245.25186157]
[-236.86285400 246.33886719]
[-230.14074707 250.03068542]
[-217.04957581 242.70805359]
[-203.95840454 235.38540649]
[-196.62789917 222.41955566]
[-180.80670166 222.43533325]
[-167.71553040 215.11268616]
[-165.80895996 204.99905396]
[-158.47352600 197.46940613]
[-147.98246765 195.20602417]
[-137.78466797 199.20204163]
[-124.40570068 192.41946411]
[-111.02674103 185.63688660]
[-109.58955383 182.35484314]
[-106.45825195 179.62559509]
[-101.91971588 178.25285339]
[-96.61554718 178.87702942]
[-82.84680176 172.92543030]
[-69.07804871 166.97381592]
[-55.37072372 160.88209534]
[-41.72624207 154.65086365]
[-38.94112015 142.03446960]
[-29.24061584 133.20799255]
[-16.03108788 131.57501221]
[-4.12948942 137.95765686]
[9.63925934 132.00605774]
[23.40800858 126.05445862]
[37.17675781 120.10285187]
[42.09834671 114.52847290]
[51.28759384 114.17346191]
[65.17488098 108.50395966]
[79.06217194 102.83445740]
[92.94945526 97.16496277]
[86.39267731 89.53739166]
[83.99095917 78.59414673]
[86.90959930 66.14720154]
[95.61282349 54.34925079]
[106.74633026 44.29714203]
[117.87984467 34.24503326]
[129.01335144 24.19292068]
[140.14686584 14.14081192]
[151.28038025 4.08870173]
[149.50357056 -11.32631016]
[157.15612793 -24.82512665]
[171.29547119 -31.21717644]
[186.48475647 -28.04458809]
[196.88337708 -16.52728653]
[198.49285889 -1.09390700]
[190.69432068 12.32109928]
[176.48646545 18.55938911]
[161.33248901 15.22221375]
[150.19897461 25.27432251]
[139.06546021 35.32643509]
[127.93195343 45.37854385]
[116.79843903 55.43065262]
[105.66493225 65.48276520]
[107.99710083 72.61094666]
[114.99362183 93.99549103]
[129.91566467 95.52283478]
[144.83770752 97.05017853]
[159.75973511 98.57752228]
[174.68177795 100.10486603]
[189.60382080 101.63220978]
[204.52584839 103.15955353]
[217.82398987 94.18519592]
[233.08793640 99.12397003]
[238.60850525 114.18727112]
[230.15077209 127.81981659]
[214.20280457 129.56390381]
[202.99850464 118.08159637]
[188.07647705 116.55425262]
[173.15443420 115.02690125]
[158.23239136 113.49955750]
[143.31036377 111.97221375]
[128.38832092 110.44487000]
[113.46627808 108.91752625]
[98.61895752 111.05224609]
[84.73167419 116.72174835]
[70.84438324 122.39125061]
[56.95709610 128.06074524]
[43.12835693 133.87159729]
[29.35960960 139.82319641]
[15.59086037 145.77481079]
[1.82211161 151.72640991]
[-4.29946470 168.08299255]
[-20.03511620 174.84643555]
[-35.49501801 168.29534912]
[-49.13949966 174.52656555]
[-55.69402695 180.97688293]
[-63.12644958 180.74256897]
[-76.89519501 186.69416809]
[-90.66394806 192.64576721]
[-104.24416351 199.01585388]
[-117.62312317 205.79843140]
[-131.00209045 212.58100891]
[-141.17018127 229.94120789]
[-160.39288330 228.20387268]
[-173.48405457 235.52651978]
[-181.75093079 249.01611328]
[-196.63575745 248.47657776]
[-209.72692871 255.79922485]
[-222.81811523 263.12185669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[6 41]
[7 40]
[9 39]
[15 35]
[16 34]
[18 32]
[19 31]
[21 29]
[22 28]
[53 153]
[54 152]
[55 151]
[57 149]
[58 148]
[62 146]
[63 145]
[64 144]
[68 143]
[69 142]
[70 141]
[71 139]
[72 138]
[76 135]
[77 134]
[78 133]
[79 132]
[81 131]
[82 130]
[83 129]
[84 128]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
