%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCAGCAGUCAGCGCACGCCGAGCGGCUGCCGGGGGAAGCAGAGGCGCCGGAGGCUGGGGCACCGCCGACGCCUCGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[102.63792419 115.33256531]
[97.73984528 129.51033020]
[101.38197327 145.49990845]
[89.17333221 156.44894409]
[73.67312622 151.09397888]
[70.82662964 134.94377136]
[83.56208801 124.61224365]
[88.46016693 110.43448639]
[83.40280151 101.10105896]
[85.41027069 89.96171570]
[94.46203613 82.04948425]
[81.29081726 74.87181091]
[65.47075653 75.06224823]
[57.99756622 62.17812347]
[44.82634735 55.00045013]
[30.85614967 61.49196243]
[15.91690445 58.54707336]
[5.69717932 47.50075150]
[3.96238923 32.73157883]
[-11.85767078 32.92201614]
[-19.33086205 20.03788948]
[-32.50207901 12.86021614]
[-45.67329788 5.68254280]
[-54.94722748 4.26153660]
[-59.19142914 -2.01151586]
[-72.08842468 -9.67098427]
[-88.48406982 -9.33186150]
[-96.74293518 -23.49953842]
[-88.36901855 -37.59952164]
[-71.97668457 -37.12696075]
[-64.42895508 -22.56798172]
[-51.53195953 -14.90851402]
[-38.49562454 -7.48867607]
[-25.32440758 -0.31100252]
[-12.15318871 6.86667109]
[2.72477794 6.16283941]
[11.14006329 19.56035995]
[24.49160004 13.01249981]
[39.31394577 15.61289024]
[49.88653183 26.57070923]
[52.00402069 41.82923126]
[65.17523956 49.00690460]
[80.05320740 48.30307007]
[88.46849060 61.70059204]
[101.63970947 68.87826538]
[115.98877716 73.24911499]
[130.92478943 74.63314056]
[145.86080933 76.01716614]
[160.31600952 69.58618927]
[172.27508545 78.46480560]
[187.21109009 79.84883118]
[201.66630554 73.41785431]
[213.62538147 82.29647827]
[228.56138611 83.68050385]
[243.49740601 85.06452942]
[258.43341064 86.44855499]
[273.36944580 87.83258057]
[283.63378906 76.34567261]
[298.51986694 73.14277649]
[312.27484131 79.24727631]
[319.70870972 92.12654114]
[334.64471436 93.51056671]
[349.58071899 94.89459229]
[365.91018677 90.33549500]
[374.81155396 104.76470184]
[363.41036987 117.31260681]
[348.19668579 109.83060455]
[333.26068115 108.44657898]
[318.32467651 107.06255341]
[308.65081787 118.35655975]
[294.00836182 121.82965088]
[279.96429443 115.94597626]
[271.98541260 102.76859283]
[257.04940796 101.38456726]
[242.11337280 100.00054169]
[227.17736816 98.61651611]
[212.24134827 97.23249054]
[198.85446167 103.76245880]
[185.82707214 94.78484344]
[170.89105225 93.40081787]
[157.50416565 99.93078613]
[144.47677612 90.95317841]
[129.54077148 89.56915283]
[114.60475159 88.18512726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[11 45]
[12 44]
[14 42]
[15 41]
[19 37]
[21 35]
[22 34]
[23 33]
[25 32]
[26 31]
[46 84]
[47 83]
[48 82]
[50 80]
[51 79]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
