%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUACGACGCGCCGGAAAGCAACGGCAAGGGCCGCAGCCAGCACCGGGCGGAGAGGGCUACC\
) } def
/len { sequence length } bind def

/coor [
[101.21667480 213.14006042]
[95.60800934 207.87605286]
[92.08380127 200.97912598]
[91.09062958 193.24427795]
[92.78095245 185.57687378]
[96.99101257 178.88661194]
[103.25595093 173.97964478]
[91.19636536 165.31350708]
[88.78694153 150.29187012]
[97.95855713 137.70143127]
[95.79122162 122.85884094]
[93.62388611 108.01624298]
[89.29686737 100.83733368]
[91.72845459 92.40598297]
[90.28074646 77.47600555]
[88.83303833 62.54603195]
[87.38533020 47.61605835]
[71.68341827 39.19323730]
[63.99300766 23.28914642]
[67.08773041 6.05138683]
[79.61016083 -5.97308731]
[76.72826385 -20.69363976]
[63.89770126 -29.52622032]
[61.18474579 -44.49600601]
[69.68433380 -56.67355347]
[66.80242920 -71.39410400]
[63.92052841 -86.11465454]
[61.03862762 -100.83520508]
[49.86119461 -112.83508301]
[54.92273331 -128.43357849]
[71.01636505 -131.58428955]
[81.58634186 -119.04604340]
[75.75917816 -103.71710968]
[78.64108276 -88.99655914]
[81.52297974 -74.27600861]
[84.40488434 -59.55545425]
[96.86907196 -51.48207092]
[100.00143433 -36.59439087]
[91.44881439 -23.57554054]
[94.33071136 -8.85498810]
[106.35083771 -5.25947666]
[115.65692902 3.26457429]
[120.34540558 15.06049347]
[119.41944122 27.79397392]
[113.00019073 38.91496277]
[102.31530762 46.16835022]
[103.76301575 61.09832382]
[105.21072388 76.02829742]
[106.65843201 90.95827484]
[108.46648407 105.84890747]
[110.63381958 120.69150543]
[112.80115509 135.53410339]
[125.18999481 144.97625732]
[127.17654419 160.05963135]
[118.09854889 171.81231689]
[135.51606750 188.01870728]
[129.39848328 210.34460449]
[135.71949768 223.94770813]
[149.44389343 232.92396545]
[148.26240540 249.28048706]
[133.39042664 256.19110107]
[120.12699890 246.54676819]
[122.11638641 230.26872253]
[115.79536438 216.66561890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 55]
[10 52]
[11 51]
[12 50]
[14 49]
[15 48]
[16 47]
[17 46]
[21 40]
[22 39]
[25 36]
[26 35]
[27 34]
[28 33]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
