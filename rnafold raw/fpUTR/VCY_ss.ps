%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGGGGUAUACACAGGGAGGCCAGGCAGCCUGGAGUUAGUCGACCGUUGCGAGACGUUGAGCUGCGGCAG\
) } def
/len { sequence length } bind def

/coor [
[137.17575073 156.50451660]
[129.63697815 152.11343384]
[123.67160034 145.70947266]
[119.80116272 137.82910156]
[118.37082672 129.13888550]
[119.51860046 120.37902832]
[106.63713837 112.69345093]
[92.66082001 112.30088806]
[85.67729187 100.18800354]
[72.79582977 92.50243378]
[59.39158249 99.86948395]
[44.19986343 99.54022217]
[31.29841995 91.70318604]
[24.10012245 78.54869843]
[24.45033264 63.65766144]
[11.56887245 55.97209167]
[-1.31258655 48.28651810]
[-14.19404602 40.60094833]
[-29.33683014 44.25250244]
[-42.29097748 36.27473831]
[-45.67885590 21.81590652]
[-60.93841553 25.92946625]
[-74.59542847 17.97574615]
[-78.54742432 2.67354703]
[-70.44975281 -10.89860630]
[-55.10662842 -14.68859768]
[-41.62084961 -6.44789124]
[-37.99328613 8.93444729]
[-23.66025925 5.04858398]
[-10.48714352 12.65934467]
[-6.50847483 27.71949005]
[6.37298441 35.40505981]
[19.25444412 43.09063339]
[32.13590240 50.77620316]
[45.07386398 43.39550018]
[60.06880951 43.48235321]
[73.09305573 51.11357117]
[80.59813690 64.32608795]
[80.48139954 79.62097168]
[93.36286163 87.30654907]
[107.33917999 87.69911194]
[114.32270813 99.81199646]
[127.20417023 107.49756622]
[148.38301086 99.01047516]
[169.21263123 107.72140503]
[177.85971069 128.31930542]
[192.44148254 131.83666992]
[207.02326965 135.35403442]
[221.60504150 138.87141418]
[236.83476257 134.58586121]
[247.39285278 145.09187317]
[261.97460938 148.60923767]
[272.50067139 137.42453003]
[287.21347046 133.01669312]
[302.15536499 136.57139587]
[313.30700684 147.13246155]
[317.66870117 161.85900879]
[314.06719971 176.78967285]
[303.47122192 187.90817261]
[288.73107910 192.22369385]
[273.81176758 188.57537842]
[262.72653198 177.94461060]
[258.45724487 163.19100952]
[243.87547302 159.67364502]
[229.68873596 164.21078491]
[218.08766174 153.45318604]
[203.50588989 149.93582153]
[188.92411804 146.41844177]
[174.34234619 142.90107727]
[169.27572632 149.83329773]
[162.39866638 155.02047729]
[154.28936768 158.00650024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[9 40]
[10 39]
[15 34]
[16 33]
[17 32]
[18 31]
[21 28]
[46 69]
[47 68]
[48 67]
[49 66]
[51 64]
[52 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
