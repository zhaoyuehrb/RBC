%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGACCGUCGGGGCCGGCUGGGGCCGGAGCUCGGGGCUCGGUGGGCCUACAGCGGCUCCGGACGGACCCCCGGGGCUGGGGAGUCGGGGAGGCCUGCCCCGGCCCCCUGCCCGCGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[88.22548676 240.97016907]
[80.62707520 226.43759155]
[89.64072418 212.73773193]
[90.02071381 197.74253845]
[90.40070343 182.74736023]
[82.98830414 169.82817078]
[91.07271576 156.22842407]
[91.45270538 141.23324585]
[91.83269501 126.23805237]
[92.21269226 111.24286652]
[85.26773834 97.94747162]
[72.74316406 89.69307709]
[60.21858597 81.43869019]
[47.69400787 73.18429565]
[35.16942978 64.92990112]
[22.43976593 56.99544525]
[9.51318645 49.38600922]
[-3.41339374 41.77656937]
[-19.23109627 41.44359207]
[-26.27400208 28.31931114]
[-39.20058441 20.70987320]
[-52.12716293 13.10043621]
[-65.05374146 5.49099970]
[-77.98032379 -2.11843705]
[-90.90690613 -9.72787380]
[-103.83348083 -17.33731079]
[-116.76006317 -24.94674683]
[-129.68664551 -32.55618286]
[-139.45979309 -25.24136734]
[-151.10844421 -21.70874214]
[-163.22863770 -22.35920715]
[-174.36807251 -27.09099579]
[-183.20007324 -35.31471252]
[-188.68161011 -46.02665329]
[-190.17645264 -57.93127823]
[-187.52894592 -69.59787750]
[-199.84039307 -78.16690063]
[-212.15184021 -86.73592377]
[-224.46328735 -95.30494690]
[-236.77474976 -103.87397003]
[-249.08619690 -112.44299316]
[-265.54046631 -116.52877045]
[-266.16934204 -133.47105408]
[-250.06327820 -138.76545715]
[-240.51716614 -124.75444031]
[-228.20571899 -116.18541718]
[-215.89427185 -107.61639404]
[-203.58282471 -99.04737091]
[-191.27136230 -90.47834778]
[-178.95991516 -81.90932465]
[-163.07444763 -90.36188507]
[-145.00903320 -89.68386078]
[-129.66006470 -79.97467804]
[-121.23007965 -63.79295349]
[-122.07720947 -45.48276520]
[-109.15062714 -37.87332916]
[-96.22404480 -30.26389122]
[-83.29746246 -22.65445328]
[-70.37088776 -15.04501724]
[-57.44430542 -7.43558025]
[-44.51772690 0.17385657]
[-31.59114647 7.78329325]
[-18.66456604 15.39273071]
[-3.77145910 15.18143272]
[4.19604301 28.84999084]
[17.12262344 36.45942688]
[30.04920387 44.06886292]
[34.91732407 43.72418594]
[40.03374863 46.51408005]
[43.42382050 52.40532684]
[55.94839859 60.65971756]
[68.47297668 68.91410828]
[80.99755096 77.16850281]
[93.52213287 85.42288971]
[119.47707367 86.61038971]
[134.43376160 87.74938965]
[149.39045715 88.88838959]
[164.34715271 90.02738190]
[178.69500732 83.36031342]
[190.79801941 92.04169464]
[205.75469971 93.18069458]
[220.71139526 94.31968689]
[235.66809082 95.45868683]
[244.57852173 92.96999359]
[250.98768616 96.82070923]
[265.91073608 98.33823395]
[280.83377075 99.85575867]
[295.75680542 101.37328339]
[310.67984009 102.89080811]
[325.60287476 104.40833282]
[340.52593994 105.92585754]
[351.61102295 94.89614105]
[367.19677734 93.62377930]
[379.92401123 102.70953369]
[383.78338623 117.86338806]
[376.95257568 131.93016052]
[362.65689087 138.26794434]
[347.64633179 133.88424683]
[339.00839233 120.84889221]
[324.08535767 119.33136749]
[309.16232300 117.81384277]
[294.23928833 116.29631805]
[279.31625366 114.77879333]
[264.39318848 113.26126862]
[249.47016907 111.74374390]
[234.52909851 110.41537476]
[219.57240295 109.27638245]
[204.61570740 108.13738251]
[189.65901184 106.99839020]
[176.38096619 113.74692535]
[163.20816040 104.98407745]
[148.25146484 103.84507751]
[133.29476929 102.70608521]
[118.33808136 101.56708527]
[107.20787811 111.62285614]
[106.82788086 126.61804199]
[106.44789124 141.61323547]
[106.06790161 156.60841370]
[113.45312500 170.60017395]
[105.39588928 183.12734985]
[105.01589966 198.12252808]
[104.63591003 213.11772156]
[112.94410706 227.25653076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 122]
[4 121]
[5 120]
[7 118]
[8 117]
[9 116]
[10 115]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 67]
[17 66]
[18 65]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[75 114]
[76 113]
[77 112]
[78 111]
[80 109]
[81 108]
[82 107]
[83 106]
[85 105]
[86 104]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
