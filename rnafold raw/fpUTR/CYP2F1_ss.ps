%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCACACCCAGAGCUGCAGGCUCUAGCGCAUCCCAGCCAGUGUCUCCUGCAGCUCAGCAGCUGCCUUCACC\
) } def
/len { sequence length } bind def

/coor [
[130.16897583 371.86718750]
[134.89236450 357.25262451]
[146.30096436 346.96966553]
[143.09814453 332.31558228]
[139.89532471 317.66149902]
[125.18494415 315.10537720]
[112.53965759 307.09024048]
[103.90307617 294.81121826]
[100.61676788 280.12152100]
[103.21189880 265.25277710]
[111.32367706 252.47616577]
[123.74229431 243.75529480]
[120.53948212 229.10122681]
[117.33666992 214.44714355]
[114.13385773 199.79306030]
[110.93103790 185.13899231]
[107.72822571 170.48490906]
[104.52541351 155.83084106]
[101.32260132 141.17675781]
[98.11978912 126.52268219]
[94.91696930 111.86859894]
[90.77552032 97.45165253]
[78.83438873 87.07283020]
[81.82189941 72.48091125]
[76.75905609 58.36115265]
[64.81792450 47.98232651]
[67.80543518 33.39041138]
[62.74259186 19.27064896]
[47.81006622 15.05172253]
[38.23569489 2.84061980]
[37.70101929 -12.66724110]
[46.41162872 -25.50876999]
[61.01811981 -30.74613953]
[75.90399933 -26.36547089]
[85.34533691 -14.05122280]
[85.71175385 1.46152592]
[76.86235046 14.20780659]
[81.92519379 28.32756615]
[93.50419617 37.69645309]
[90.87881470 53.29830933]
[95.94165802 67.41806793]
[107.52066040 76.78695679]
[104.89527893 92.38880920]
[108.45595551 94.63378143]
[110.88528442 98.55784607]
[111.40506744 103.55351257]
[109.57105255 108.66578674]
[112.77386475 123.31986237]
[115.97667694 137.97393799]
[119.17948914 152.62802124]
[122.38230133 167.28210449]
[125.58512115 181.93617249]
[128.78793335 196.59025574]
[131.99075317 211.24432373]
[135.19355774 225.89840698]
[138.39637756 240.55249023]
[153.32092285 243.29719543]
[166.02337646 251.52462769]
[174.58500671 263.95492554]
[177.72680664 278.67620850]
[175.00047302 293.43875122]
[166.85206604 305.99856567]
[154.54940796 314.45867920]
[157.75222778 329.11276245]
[160.95503235 343.76684570]
[175.61335754 348.35260010]
[186.00315857 359.66400146]
[189.32962036 374.65832520]
[184.69793701 389.30221558]
[173.35403442 399.65649414]
[158.34933472 402.93594360]
[143.72004700 398.25839233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[22 43]
[24 41]
[25 40]
[27 38]
[28 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
