%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGUCCGGCCCGGUCCUGUCCCGCAGCGUCCCGCCAGCCAGCUCCUUGCACCCUUCGCGGCCGAGGCGCUCCCUGGUGCUCCCCGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[97.61249542 256.29327393]
[97.12171173 241.30131531]
[88.97212219 228.83401489]
[96.25375366 214.78807068]
[95.76296997 199.79609680]
[95.27217865 184.80413818]
[94.78139496 169.81216431]
[83.76865387 159.84947205]
[83.05736542 144.65248108]
[93.58181763 133.16885376]
[93.09103394 118.17688751]
[85.37097168 114.54121399]
[79.56908417 107.62525940]
[77.06465149 98.43875122]
[78.71045685 88.55828857]
[63.71848679 88.06749725]
[49.67254257 95.34912872]
[37.20524597 87.19954681]
[22.20725250 86.95411682]
[7.20725203 86.95411682]
[-7.79274797 86.95411682]
[-22.79274750 86.95411682]
[-38.63188171 93.00045776]
[-48.82663345 79.45411682]
[-38.63188171 65.90777588]
[-22.79274750 71.95411682]
[-7.79274797 71.95411682]
[7.20725203 71.95411682]
[22.20725250 71.95411682]
[29.02801132 68.74376678]
[37.69602966 72.20757294]
[50.66964340 64.89084625]
[64.20927429 73.07553101]
[79.20124054 73.56631470]
[92.76107788 67.15299225]
[101.89250183 55.25268936]
[111.02392578 43.35239029]
[120.15534210 31.45208931]
[129.28675842 19.55179024]
[138.41818237 7.65148926]
[136.55236816 -7.81319618]
[145.98245239 -19.75171280]
[160.73716736 -21.43517685]
[169.86859131 -33.33547592]
[179.00001526 -45.23577499]
[181.26261902 -60.89435959]
[195.14889526 -66.28141022]
[204.28031921 -78.18170929]
[213.41174316 -90.08201599]
[222.54316711 -101.98231506]
[231.67459106 -113.88261414]
[230.78547668 -126.87746429]
[238.79762268 -136.63012695]
[250.91764832 -138.17684937]
[260.43356323 -149.77200317]
[258.63522339 -165.47364807]
[268.53164673 -177.79585266]
[284.25140381 -179.42807007]
[296.46829224 -169.40193176]
[297.93423462 -153.66577148]
[287.77947998 -141.55557251]
[272.02871704 -140.25610352]
[262.51281738 -128.66094971]
[260.69131470 -111.29101562]
[243.57489014 -104.75119019]
[234.44346619 -92.85089111]
[225.31204224 -80.95059204]
[216.18061829 -69.05029297]
[207.04919434 -57.14999008]
[205.43974304 -42.34259796]
[190.90031433 -36.10435486]
[181.76889038 -24.20405388]
[172.63746643 -12.30375481]
[174.83016968 2.38391566]
[165.73913574 14.58259296]
[150.31848145 16.78291130]
[141.18707275 28.68321037]
[132.05564880 40.58351135]
[122.92422485 52.48381042]
[113.79280090 64.38410950]
[104.66137695 76.28440857]
[119.41327667 88.43933868]
[120.06575775 106.26216888]
[108.08300018 117.68609619]
[108.57378387 132.67807007]
[119.82677460 143.44877625]
[120.11093140 158.65974426]
[109.77336121 169.32138062]
[110.26415253 184.31333923]
[110.75493622 199.30531311]
[111.24571991 214.29728699]
[119.43041229 227.83691406]
[112.11367798 240.81053162]
[112.60446167 255.80249023]
[115.42422485 274.97796631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[4 91]
[5 90]
[6 89]
[7 88]
[10 85]
[11 84]
[15 34]
[16 33]
[18 31]
[19 29]
[20 28]
[21 27]
[22 26]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[43 73]
[44 72]
[45 71]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
