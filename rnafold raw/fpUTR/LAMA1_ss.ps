%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCCAGGGCAGCGCGGACUCGCGUCCCGUGGAGCGUUCCAGGCGGGCGCGCGGCUUUCUCCCCAGACCCACCGAGUGGCGGCGGAGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[176.69944763 189.88150024]
[180.30920410 179.33158875]
[168.62605286 169.92395020]
[156.94288635 160.51629639]
[145.25973511 151.10865784]
[140.31341553 150.75846863]
[135.59057617 147.16230774]
[133.14242554 140.67256165]
[122.10657501 130.51333618]
[111.07070923 120.35411835]
[100.03485107 110.19489288]
[92.28507996 107.41158295]
[88.80915070 99.51266479]
[78.11521912 88.99411011]
[67.42129517 78.47555542]
[58.93199921 74.58496094]
[56.55491638 67.42800903]
[46.21461487 56.56162643]
[41.54574203 55.40729904]
[37.95045853 52.97462845]
[35.71360016 49.80423737]
[34.89642334 46.47318268]
[35.34621048 43.51208878]
[26.52943230 31.37683487]
[17.71265221 19.24157906]
[8.89587402 7.10632420]
[0.07909507 -5.02893066]
[-8.73768330 -17.16418648]
[-17.55446243 -29.29944038]
[-26.57068062 -41.28726196]
[-41.15273666 -47.42518616]
[-42.86417389 -62.22114182]
[-52.07736206 -74.05825043]
[-61.29055405 -85.89535522]
[-70.50374603 -97.73246765]
[-85.89279938 -103.39894867]
[-88.41298676 -119.60328674]
[-75.47175598 -129.67585754]
[-60.38193512 -123.25484467]
[-58.66663742 -106.94565582]
[-49.45344543 -95.10855103]
[-40.24025726 -83.27143860]
[-31.02706528 -71.43433380]
[-17.10399628 -66.14307404]
[-14.73357201 -50.50045013]
[-8.00815487 -47.08852386]
[-5.41920757 -38.11621857]
[3.39757109 -25.98096466]
[12.21434975 -13.84570980]
[21.03112793 -1.71045458]
[29.84790802 10.42479992]
[38.66468811 22.56005478]
[47.48146439 34.69530869]
[57.08099365 46.22132874]
[67.42129517 57.08770370]
[77.93984985 67.78163147]
[88.63377380 78.30018616]
[99.32769775 88.81873322]
[110.19407654 99.15903473]
[121.22993469 109.31826019]
[132.26579285 119.47748566]
[143.30165100 129.63670349]
[154.66737366 139.42549133]
[166.35054016 148.83314514]
[178.03369141 158.24078369]
[189.71685791 167.64842224]
[207.52001953 159.45280457]
[226.97386169 161.10272217]
[243.01821899 172.09442139]
[251.51658630 189.50398254]
[250.32250977 208.76472473]
[263.39477539 216.12107849]
[279.21594238 216.14607239]
[286.51303101 229.13076782]
[299.58529663 236.48712158]
[312.65753174 243.84347534]
[328.43249512 240.92274475]
[340.45663452 251.54347229]
[339.50604248 267.55834961]
[326.30996704 276.68209839]
[310.99130249 271.91580200]
[305.30120850 256.91574097]
[292.22894287 249.55938721]
[279.15667725 242.20303345]
[264.27050781 242.70420837]
[256.03842163 229.19334412]
[242.96615601 221.83699036]
[234.72297668 229.05656433]
[224.73513794 233.61558533]
[213.83786011 235.11932373]
[202.94627380 233.42909241]
[192.97862244 228.67494202]
[184.77883911 221.24578857]
[179.04501343 211.75756836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[5 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 58]
[14 57]
[15 56]
[17 55]
[18 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[30 45]
[32 43]
[33 42]
[34 41]
[35 40]
[71 87]
[72 86]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
