%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAAGGCUAUAAAUUCGCAGGCCGCGGCCGGGCCCCACAGGAGCAGCCGCCCGGGGCACCGGAGCUGCGGGCUGCGUGGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[37.64110947 354.92791748]
[36.01932526 340.01583862]
[34.39754105 325.10375977]
[32.77575302 310.19171143]
[31.15396881 295.27963257]
[22.20105934 307.31478882]
[9.00979805 314.45556641]
[-5.96220684 315.37158203]
[-19.92558670 309.89215088]
[-30.27888298 299.03817749]
[-35.09321976 284.83175659]
[-33.47165298 269.91964722]
[-25.71629906 257.08007812]
[-13.27201653 248.70513916]
[1.54275000 246.35510254]
[15.96792603 250.46780396]
[27.31601906 260.27700806]
[33.47302628 273.95623779]
[38.26255035 259.74145508]
[43.05207062 245.52665710]
[47.84159470 231.31185913]
[52.63111877 217.09706116]
[49.36267853 202.56549072]
[61.10137177 191.95825195]
[65.89089203 177.74345398]
[70.68041992 163.52865601]
[75.46994019 149.31385803]
[80.25946045 135.09906006]
[85.04898834 120.88425446]
[89.83850861 106.66946411]
[94.11172485 92.29101562]
[97.86305237 77.76766968]
[101.61437988 63.24432755]
[105.10289001 48.65562439]
[108.32744598 34.00631714]
[111.55200958 19.35700798]
[114.77656555 4.70769882]
[118.00112152 -9.94160938]
[116.25241852 -15.36228848]
[116.86413574 -20.35697937]
[119.22422791 -24.04769516]
[122.44855499 -25.95982552]
[127.23807526 -40.17462158]
[127.03162384 -49.54494095]
[132.46563721 -54.81069946]
[137.76522827 -68.84331512]
[134.57962036 -84.93008423]
[147.09492493 -95.52722168]
[162.43646240 -89.73329926]
[164.82217407 -73.50861359]
[151.79783630 -63.54372787]
[146.49826050 -49.51110840]
[141.45288086 -35.38510132]
[136.66334534 -21.17030334]
[132.65042114 -6.71705294]
[129.42587280 7.93225527]
[126.20131683 22.58156395]
[122.97676086 37.23087311]
[119.75220490 51.88018036]
[121.42829132 59.25902939]
[116.13772583 66.99565887]
[112.38639832 81.51900482]
[108.63506317 96.04234314]
[110.30468750 101.28192902]
[108.78199005 107.06233978]
[104.05330658 111.45898438]
[99.26378632 125.67378235]
[94.47425842 139.88858032]
[89.68473816 154.10337830]
[84.89521790 168.31817627]
[80.10569000 182.53297424]
[75.31616974 196.74777222]
[78.24202728 212.29608154]
[66.84591675 221.88658142]
[62.05639267 236.10137939]
[57.26686859 250.31617737]
[52.47734833 264.53097534]
[47.68782425 278.74578857]
[46.06604004 293.65783691]
[47.68782425 308.56991577]
[49.30960846 323.48199463]
[50.93139267 338.39404297]
[52.55318069 353.30612183]
[62.67152405 366.21157837]
[56.30401230 381.32406616]
[40.00099945 383.09713745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[30 66]
[31 63]
[32 62]
[33 61]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[42 54]
[43 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
