%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAAUUCAGGGACUCUUUGGUGGAGCAAUUACCAGUCAACUUCAGGGUAUUAUGAUAAACUCUGAUCUGGGGAGGAACCAGGACUACAUAGAUCAAGGCAGUUUUCUUCUUUGAGAAACUAUCCCAGAUAUCAUCAUAGAGUCUUCUGCUCUUCCUCAACUACCAAAGAAAAACAUCAGCGAAGCAGCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[191.98141479 338.08627319]
[177.33709717 334.83911133]
[165.22737122 325.98730469]
[157.68864441 313.01934814]
[155.98863220 298.11599731]
[160.41322327 283.78341675]
[170.21835327 272.43179321]
[183.75517273 265.97003174]
[198.74732971 265.48477173]
[212.67652893 271.05950928]
[203.85974121 258.92425537]
[195.04296875 246.78898621]
[186.22619629 234.65373230]
[177.40940857 222.51847839]
[168.59263611 210.38322449]
[159.77584839 198.24797058]
[150.95907593 186.11271667]
[137.21856689 180.36401367]
[135.36663818 164.65156555]
[126.54985809 152.51631165]
[117.73307800 140.38105774]
[108.91629791 128.24580383]
[100.09951782 116.11054230]
[102.01902008 130.98722839]
[108.59577179 144.46855164]
[111.07808685 159.26173401]
[109.26202393 174.15138245]
[103.29678345 187.91423035]
[93.67245483 199.41955566]
[81.17974091 207.72209167]
[66.84501648 212.13973999]
[51.84597778 212.30955505]
[37.41490555 208.21759033]
[24.73741722 200.20002747]
[14.85505867 188.91557312]
[8.57973957 175.29132080]
[6.42702150 160.44659424]
[8.57376575 145.60101318]
[14.84360218 131.97422791]
[24.72141838 120.68579102]
[37.39567947 112.66313171]
[51.82510376 108.56536102]
[66.81952667 108.72840881]
[81.08274078 104.08506775]
[66.33945465 101.32183838]
[51.59616470 98.55860901]
[36.85287476 95.79537964]
[22.10958672 93.03215027]
[7.36629820 90.26892090]
[-2.57095933 101.97987366]
[-17.03775215 107.13811493]
[-32.14258575 104.35610962]
[-43.82233429 94.38219452]
[-48.93520737 79.89929962]
[-46.10586548 64.80326080]
[-36.09538651 53.15483475]
[-21.59654045 48.08738327]
[-6.50944471 50.96403122]
[5.10754919 61.01097107]
[10.12952709 75.52562714]
[24.87281609 78.28885651]
[39.61610413 81.05208588]
[54.35939407 83.81531525]
[69.10268402 86.57854462]
[83.84597015 89.34177399]
[95.46504211 79.85509491]
[95.70669556 64.85704041]
[95.94834900 49.85898972]
[96.18999481 34.86093521]
[96.43164825 19.86288071]
[96.67330170 4.86482811]
[96.91494751 -10.13322544]
[97.15660095 -25.13127899]
[97.27742767 -40.13079071]
[97.27742767 -55.13079071]
[90.05256653 -56.94471359]
[83.21394348 -59.88512039]
[76.93579865 -63.87531281]
[71.37783051 -68.81187439]
[66.68109131 -74.56732941]
[62.96443939 -80.99346161]
[60.32150650 -87.92510986]
[58.81836700 -95.18441772]
[58.49186325 -102.58539581]
[59.34871674 -109.93871307]
[61.36539841 -117.05648804]
[64.48876190 -123.75714111]
[68.63745117 -129.86999512]
[73.70401764 -135.23962402]
[79.55769348 -139.72982788]
[86.04779816 -143.22706604]
[93.00756836 -145.64332581]
[100.25847626 -146.91836548]
[107.61480713 -147.02117920]
[110.96944427 -161.64125061]
[114.32408905 -176.26132202]
[117.67872620 -190.88139343]
[121.03337097 -205.50146484]
[124.38800812 -220.12152100]
[119.93299103 -235.30255127]
[130.32067871 -245.97706604]
[133.67532349 -260.59713745]
[128.34501648 -276.10583496]
[139.31343079 -288.29705811]
[155.29721069 -284.62948608]
[159.85360718 -268.87603760]
[148.29539490 -257.24249268]
[144.94075012 -242.62242126]
[149.63571167 -228.48712158]
[139.00807190 -216.76689148]
[135.65344238 -202.14682007]
[132.29879761 -187.52674866]
[128.94415283 -172.90667725]
[125.58951569 -158.28662109]
[122.23487854 -143.66654968]
[141.11036682 -129.51164246]
[150.52291870 -107.80931854]
[147.94514465 -84.23197937]
[133.99241638 -64.97544098]
[112.27742767 -55.13079071]
[112.27742767 -40.13079071]
[115.42548370 -33.43300247]
[112.15465546 -24.88962746]
[111.91300201 -9.89157486]
[111.67134857 5.10647869]
[111.42970276 20.10453224]
[111.18804932 35.10258484]
[110.94640350 50.10063934]
[110.70475006 65.09869385]
[110.46309662 80.09674835]
[116.87551117 89.76142883]
[116.99111176 99.93410492]
[112.23477173 107.29376984]
[121.05155182 119.42902374]
[129.86833191 131.56427002]
[138.68510437 143.69952393]
[147.50189209 155.83479309]
[161.87303162 162.45149231]
[163.09432983 177.29594421]
[171.91110229 189.43119812]
[180.72789001 201.56645203]
[189.54466248 213.70170593]
[198.36145020 225.83695984]
[207.17822266 237.97221375]
[215.99499512 250.10746765]
[224.81178284 262.24273682]
[234.84873962 273.38989258]
[245.99591064 283.42684937]
[257.14309692 293.46380615]
[268.29025269 303.50076294]
[279.43743896 313.53771973]
[290.66510010 323.48455811]
[301.97250366 333.34063721]
[313.27993774 343.19671631]
[324.58734131 353.05279541]
[335.97381592 362.81747437]
[347.43853760 372.49011230]
[359.91860962 363.99594116]
[374.22793579 359.18493652]
[389.30468750 358.41412354]
[404.03005981 361.74066162]
[417.31134033 368.91769409]
[428.16296387 379.41268921]
[435.77969360 392.44680786]
[439.59628296 407.05282593]
[439.32952881 422.14691162]
[434.99920654 436.60897827]
[426.92669678 449.36581421]
[415.71099854 459.47082520]
[402.18441772 466.17410278]
[387.35070801 468.97824097]
[372.31060791 467.67517090]
[358.18020630 462.36154175]
[346.00808716 453.43170166]
[336.69747925 441.54830933]
[330.93930054 427.59317017]
[329.16085815 412.60183716]
[331.49411011 397.68679810]
[337.76589966 383.95483398]
[326.30117798 374.28219604]
[319.15194702 372.36929321]
[314.73129272 364.36022949]
[303.42385864 354.50415039]
[292.11642456 344.64807129]
[280.80902100 334.79199219]
[273.69152832 332.76416016]
[269.40048218 324.68490601]
[258.25329590 314.64794922]
[247.10612488 304.61099243]
[235.95895386 294.57403564]
[224.81178284 284.53707886]
[228.89973450 298.96926880]
[226.85140991 313.82876587]
[219.01126099 326.61672974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 146]
[11 145]
[12 144]
[13 143]
[14 142]
[15 141]
[16 140]
[17 139]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[66 130]
[67 129]
[68 128]
[69 127]
[70 126]
[71 125]
[72 124]
[73 123]
[74 121]
[75 120]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[101 108]
[102 107]
[147 191]
[148 190]
[149 189]
[150 188]
[151 187]
[152 185]
[153 184]
[154 183]
[155 182]
[156 180]
[157 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
