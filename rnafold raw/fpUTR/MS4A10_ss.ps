%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUGGGGAGCUCCGGCAGCGCAAGAGGGCAAAGCACAGCUGGAAGCUCAGAGCUGCAGUCCCAGGUCCUGGGCCAGGGCCCCCAUCCAGCAUCA\
) } def
/len { sequence length } bind def

/coor [
[116.56348419 350.92449951]
[115.03667450 335.82373047]
[119.07176208 321.19216919]
[128.12303162 309.00860596]
[140.96638489 300.92080688]
[138.06982422 286.20312500]
[135.17324829 271.48547363]
[132.27667236 256.76779175]
[129.38011169 242.05010986]
[124.91480255 235.97988892]
[126.63616943 226.80937195]
[124.21770477 212.00561523]
[121.79924011 197.20185852]
[119.38077545 182.39811707]
[109.69267273 171.08485413]
[115.10372925 156.21772766]
[112.68527222 141.41398621]
[110.26680756 126.61022949]
[81.51460266 123.52222443]
[68.95127106 95.95471954]
[54.00041580 94.74150848]
[39.61965942 101.33729553]
[27.55987930 92.59596252]
[12.98096848 100.10511780]
[-0.66335803 91.00762177]
[0.66301227 74.66220093]
[15.59562397 67.88362122]
[28.77308464 77.64510345]
[42.08445740 70.96253967]
[55.21361923 79.79065704]
[70.16447449 81.00386047]
[57.62550735 72.77134705]
[44.00936508 66.47844696]
[37.32737732 53.04896545]
[40.52001572 38.39266586]
[52.18232727 28.95919418]
[67.18221283 28.89983177]
[78.91882324 38.24070358]
[82.22737885 52.87112427]
[87.65790558 66.85359192]
[89.59572601 51.97929001]
[91.53354645 37.10498810]
[93.47136688 22.23068810]
[86.19029236 11.43345928]
[88.23349762 -1.01945448]
[97.94245911 -8.43344784]
[100.36092377 -23.23719788]
[102.77938843 -38.04095078]
[105.19784546 -52.84469986]
[101.78437042 -69.45146179]
[116.79719543 -77.32874298]
[128.52259827 -65.08328247]
[120.00160217 -50.42623520]
[117.58313751 -35.62248611]
[115.16467285 -20.81873512]
[112.74620819 -6.01498413]
[119.87969208 9.92873001]
[108.34567261 24.16851044]
[106.40785217 39.04281235]
[104.47002411 53.91711426]
[102.53220367 68.79141235]
[120.93701935 78.63071442]
[128.37564087 97.11294556]
[142.67120361 92.57019043]
[156.96678162 88.02744293]
[171.26235962 83.48468781]
[184.52651978 72.92541504]
[198.34501648 82.74811554]
[192.73153687 98.74577332]
[175.80509949 97.78026581]
[161.50953674 102.32301331]
[147.21395874 106.86576843]
[132.91838074 111.40851593]
[125.07055664 124.19177246]
[127.48902130 138.99551392]
[129.90748596 153.79927063]
[139.76856995 166.17140198]
[134.18452454 179.97964478]
[136.60299683 194.78340149]
[139.02145386 209.58714294]
[141.43992615 224.39089966]
[144.09777832 239.15354919]
[146.99435425 253.87121582]
[149.89091492 268.58889771]
[152.78749084 283.30657959]
[155.68406677 298.02423096]
[170.63436890 300.64199829]
[183.62744141 308.48703003]
[192.90608215 320.49832153]
[197.21542358 335.05148315]
[195.97265625 350.17828369]
[189.34587097 363.83294678]
[178.23127747 374.16882324]
[164.13203430 379.78805542]
[148.95494080 379.93066406]
[134.75257874 374.57739258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[11 81]
[12 80]
[13 79]
[14 78]
[16 76]
[17 75]
[18 74]
[20 31]
[21 30]
[23 28]
[40 61]
[41 60]
[42 59]
[43 58]
[46 56]
[47 55]
[48 54]
[49 53]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
