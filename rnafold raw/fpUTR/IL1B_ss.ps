%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCUCUUCGAGGCACAAGGCACAACAGGCUGCUCUGGGAUUCUCUUCAGCCAAUCUUCAUUGCUCAAGUGUCUGAAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[-1.94849336 195.63241577]
[-10.78179550 212.12915039]
[-24.45084572 224.87959290]
[-41.48454666 232.52926636]
[-60.05541229 234.27169800]
[-78.17562103 229.93342590]
[-93.90981293 219.99118042]
[-105.24605560 229.81410217]
[-116.58229828 239.63700867]
[-127.91854095 249.45991516]
[-135.92944336 264.40185547]
[-152.50509644 260.84036255]
[-153.67138672 243.92658997]
[-137.74145508 238.12367249]
[-126.40521240 228.30076599]
[-115.06896210 218.47785950]
[-103.73271942 208.65493774]
[-109.20395660 198.15162659]
[-112.38392639 186.73654175]
[-113.13211060 174.90361023]
[-111.41325378 163.16540527]
[-107.29904938 152.03096008]
[-100.96512604 141.98377991]
[-92.68354797 133.46072388]
[-82.81116486 126.83310699]
[-71.77418518 122.39046478]
[-60.04982758 120.32794189]
[-48.14565277 120.73769379]
[-36.57759857 123.60478973]
[-25.84762764 128.80775452]
[-16.42193413 136.12364197]
[-8.71069813 145.23770142]
[4.70268059 138.52343750]
[18.11606026 131.80918884]
[31.52943802 125.09492493]
[44.94281769 118.38066864]
[58.35619736 111.66641235]
[71.76957703 104.95214844]
[76.44668579 99.00830078]
[85.78369141 98.24727631]
[94.04962158 86.97048187]
[107.98508453 88.10824585]
[121.62956238 81.87702179]
[135.27404785 75.64579010]
[148.91851807 69.41456604]
[152.23191833 58.75481033]
[160.77484131 51.92028809]
[171.45846558 51.06323242]
[180.59425354 56.22974777]
[194.64851379 50.98778534]
[208.70275879 45.74581909]
[218.92890930 33.67369461]
[233.55763245 36.47542953]
[247.61187744 31.23346710]
[261.66613770 25.99150467]
[268.80651855 19.92736816]
[276.31665039 20.82308769]
[290.54904175 16.08609390]
[304.78143311 11.34910011]
[315.25671387 -1.26837659]
[331.37362671 1.76107097]
[336.55245972 17.32100677]
[325.46569824 29.40470314]
[309.51843262 25.58148956]
[295.28604126 30.31848335]
[281.05364990 35.05547714]
[266.90808105 40.04574966]
[252.85383606 45.28771210]
[238.79959106 50.52967453]
[229.57868958 62.22686386]
[213.94471741 59.80006790]
[199.89047241 65.04203033]
[185.83622742 70.28398895]
[174.92477417 86.08123779]
[155.14974976 83.05904388]
[141.50526428 89.29027557]
[127.86078644 95.52149963]
[114.21630859 101.75272369]
[105.95037842 113.02951813]
[92.01491547 111.89175415]
[78.48383331 118.36553192]
[65.07045746 125.07978821]
[51.65707779 131.79405212]
[38.24369812 138.50830078]
[24.83031845 145.22256470]
[11.41693878 151.93681335]
[-1.99644029 158.65107727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 17]
[8 16]
[9 15]
[10 14]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[37 82]
[38 81]
[40 80]
[42 78]
[43 77]
[44 76]
[45 75]
[49 73]
[50 72]
[51 71]
[53 69]
[54 68]
[55 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
