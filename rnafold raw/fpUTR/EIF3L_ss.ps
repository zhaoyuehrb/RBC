%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAACUUCCGGCCUCAGGACGCAGGCGCGGGCCGCUCAUUUCGCUCUUUCCGGCGGUGCUCGCAAGCGAGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[114.85628510 174.18400574]
[114.25993347 159.19586182]
[113.66358948 144.20771790]
[113.06724548 129.21957397]
[106.77992249 125.13061523]
[98.60179138 137.70512390]
[86.02742004 129.52677917]
[94.20527649 116.95269775]
[87.91796112 112.86373901]
[73.97570801 118.39669800]
[60.03345871 123.92965698]
[55.28133011 138.82768250]
[42.03715897 147.14189148]
[26.55444336 144.94654846]
[16.14364243 133.27825928]
[15.72042179 117.64640045]
[25.48461151 105.43187714]
[40.82585907 102.40200806]
[54.50049973 109.98740387]
[68.44274902 104.45444489]
[82.38500214 98.92148590]
[93.70346832 89.07810211]
[101.11721039 76.03829193]
[108.53094482 62.99848938]
[104.56262970 47.93561554]
[112.26696777 34.81700897]
[126.65157318 31.12665367]
[134.06530762 18.08684921]
[141.47904968 5.04704523]
[141.57357788 -10.77387905]
[154.59020996 -18.01379967]
[154.68475342 -33.83472443]
[167.70138550 -41.07464600]
[175.11512756 -54.11444855]
[182.52885437 -67.15425110]
[189.94259644 -80.19405365]
[197.35633850 -93.23386383]
[204.77008057 -106.27366638]
[195.15390015 -118.01647186]
[190.43278503 -132.44129944]
[191.24523926 -147.59730530]
[197.48136902 -161.43475342]
[208.29780579 -172.08226013]
[222.23170471 -178.09982300]
[237.39860535 -178.67361450]
[251.74734497 -173.72605896]
[263.33734131 -163.92623901]
[270.60116577 -150.59951782]
[272.55642700 -135.54823303]
[268.93869019 -120.80792999]
[260.23724365 -108.37211609]
[247.62889099 -99.92264557]
[232.81878662 -96.60222626]
[217.80987549 -98.85992432]
[210.39613342 -85.82012177]
[202.98240662 -72.78031921]
[195.56866455 -59.74051666]
[188.15492249 -46.70071030]
[180.74119568 -33.66090775]
[181.17694092 -18.77267647]
[167.63002014 -10.60006237]
[168.06576538 4.28816795]
[154.51885986 12.46078300]
[147.10511780 25.50058746]
[139.69137573 38.54039001]
[143.87696838 52.78877258]
[136.54414368 66.11859894]
[121.57074738 70.41223145]
[114.15701294 83.45203400]
[106.74327087 96.49183655]
[115.51776123 97.48093414]
[123.54414368 103.74765778]
[128.39804077 114.66304779]
[128.05538940 128.62322998]
[128.65173340 143.61137390]
[129.24807739 158.59951782]
[129.84442139 173.58764648]
[132.79914856 192.74279785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 74]
[9 21]
[10 20]
[11 19]
[22 70]
[23 69]
[24 68]
[27 65]
[28 64]
[29 63]
[31 61]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
