%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUAACAAUACUCCUAAACAACUGCUAGGACCACGGAACUCAGAAACACAGCAAGCGAUCAUAUUGGAAAU\
) } def
/len { sequence length } bind def

/coor [
[85.51866150 240.25556946]
[74.27033234 250.39231873]
[60.33908844 256.32522583]
[45.23609543 257.41070557]
[30.59960556 253.53102112]
[18.01728058 245.10700989]
[8.85395336 233.05245972]
[4.10359478 218.67495728]
[4.28148794 203.53404236]
[9.36833668 189.27210999]
[18.81235695 177.43618774]
[31.58913422 169.31013489]
[46.31273651 165.77540588]
[61.38605881 167.21543884]
[67.56457520 153.54701233]
[73.74309540 139.87858582]
[62.70936584 129.81837463]
[55.32256317 116.84200287]
[52.30508804 102.21853638]
[53.95204544 87.37809753]
[60.10236740 73.77204895]
[70.15457153 62.73102188]
[83.12557220 55.33479691]
[97.74684906 52.30670929]
[112.58847809 53.94289398]
[118.76699829 40.27446747]
[124.94551086 26.60604095]
[131.12403870 12.93761349]
[129.75788879 -2.82450056]
[142.05072021 -11.23495007]
[130.27876282 -20.66213417]
[121.22174835 -32.72121048]
[115.44900513 -46.65412903]
[113.32341766 -61.58506012]
[114.97859192 -76.57543182]
[120.31050110 -90.68292999]
[128.98396301 -103.02075958]
[140.45375061 -112.81333923]
[153.99887085 -119.44510651]
[168.76788330 -122.49918365]
[183.83236694 -121.78359222]
[198.24536133 -117.34329987]
[211.10087585 -109.45744324]
[221.59077454 -98.62172699]
[229.05567932 -85.51729584]
[233.02630615 -70.96790314]
[233.25309753 -55.88813782]
[229.72177124 -41.22592163]
[222.65431213 -27.90293884]
[212.49497986 -16.75668335]
[199.88243103 -8.48781586]
[185.60946655 -3.61612606]
[170.57330322 -2.44785142]
[155.71914673 -5.05643082]
[157.52722168 9.72802544]
[144.79246521 19.11613274]
[138.61393738 32.78456116]
[132.43542480 46.45298767]
[126.25690460 60.12141418]
[137.29063416 70.18162537]
[144.67744446 83.15799713]
[147.69491577 97.78146362]
[146.04795837 112.62190247]
[139.89762878 126.22795105]
[129.84542847 137.26898193]
[116.87442780 144.66520691]
[102.25315094 147.69328308]
[87.41152191 146.05709839]
[81.23300171 159.72552490]
[75.05448914 173.39396667]
[86.09403992 183.75769043]
[93.16812897 197.14559937]
[95.50942230 212.10543823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 70]
[15 69]
[16 68]
[25 59]
[26 58]
[27 57]
[28 56]
[30 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
