%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGUUUCCGGUUUCCGGCGACGGAAGUGACGCUAUCACGGCGCGCCAAGGCGUCAGUCGAGGAGUCAAGGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[114.32533264 140.71162415]
[106.49083710 127.92040253]
[98.47384644 140.59825134]
[90.45686340 153.27610779]
[82.43987274 165.95394897]
[79.08470154 182.57258606]
[62.18672562 183.94903564]
[56.18624115 168.09248352]
[69.76202393 157.93696594]
[77.77900696 145.25910950]
[85.79599762 132.58126831]
[93.81298828 119.90341187]
[87.11100769 106.48389435]
[72.15964508 105.27689362]
[57.20829010 104.06989288]
[42.25692749 102.86289978]
[27.30556870 101.65589905]
[12.35420990 100.44889832]
[-2.22158122 107.96411133]
[-15.86968422 98.87228394]
[-14.55010128 82.52631378]
[0.37969413 75.74153137]
[13.56120777 85.49754333]
[28.51256752 86.70453644]
[43.46392822 87.91153717]
[58.41528702 89.11853790]
[73.36664581 90.32553101]
[88.31800842 91.53253174]
[102.44751740 86.49696350]
[113.26555634 76.10610199]
[124.08358765 65.71523285]
[134.90162659 55.32436752]
[139.49452209 40.18449402]
[154.03327942 36.94816208]
[164.85131836 26.55729675]
[169.02496338 18.11283875]
[176.32043457 15.97675800]
[187.54809570 6.02991772]
[198.57318115 -4.14099741]
[209.39122009 -14.53186226]
[219.99781799 -25.13846397]
[230.38868713 -35.95650101]
[240.77954102 -46.77453613]
[251.17041016 -57.59257507]
[261.56127930 -68.41061401]
[260.99249268 -84.20465851]
[271.81936646 -95.71786499]
[287.61856079 -96.11964417]
[299.01666260 -85.17162323]
[299.25137329 -69.36907959]
[288.18347168 -58.08737564]
[272.37930298 -58.01974487]
[261.98843384 -47.20170975]
[251.59757996 -36.38367081]
[241.20671082 -25.56563568]
[230.81585693 -14.74759865]
[228.38774109 -7.54405594]
[219.78207397 -3.71382570]
[208.96403503 6.67703962]
[206.24784851 13.77696991]
[197.49493408 17.25757980]
[186.26727295 27.20441818]
[175.24218750 37.37533569]
[164.42414856 47.76620102]
[160.60502625 62.16284943]
[145.29249573 66.14240265]
[134.47445679 76.53327179]
[123.65641785 86.92413330]
[112.83837891 97.31500244]
[125.11382294 88.69447327]
[139.97787476 86.67959595]
[154.10525513 91.72113037]
[164.33546448 102.69122314]
[168.37986755 117.13569641]
[165.33364868 131.82313538]
[155.87832642 143.46772766]
[142.12916565 149.46443176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[29 69]
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[37 62]
[38 61]
[39 59]
[40 58]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
