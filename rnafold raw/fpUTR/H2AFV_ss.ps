%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACAAGCGGGCAUUGGCCACAGCAGCGCGAGGCGGGCACGGGGUAUUGUCCGGCUCCGGCGGCGGCGGUCGGUGCUGCGAGAGCGGCGGCGGCGGCGCGGGUCGGCAGCGGGAGGGCGCGCGGCCGAGCGGAGGCGGAGUCGGCGCCGAGAAC\
) } def
/len { sequence length } bind def

/coor [
[94.38637543 146.23236084]
[84.74880981 144.00392151]
[75.79927826 139.79031372]
[67.94152832 133.78161621]
[61.53004837 126.24893188]
[56.85407639 117.53205109]
[54.12456894 108.02424622]
[53.46466446 98.15444183]
[38.76780319 95.15405273]
[24.07094383 92.15367126]
[9.37408543 89.15328217]
[0.28091565 90.50558472]
[-5.58716202 85.94166565]
[-20.22062302 82.64594269]
[-34.85408401 79.35021210]
[-49.48754501 76.05448151]
[-64.12100220 72.75875092]
[-78.75446320 69.46302795]
[-93.38792419 66.16729736]
[-108.02138519 62.87156677]
[-123.18434143 67.38769531]
[-133.90060425 57.04308319]
[-149.06356812 61.55920792]
[-159.77983093 51.21460342]
[-174.41328430 47.91887283]
[-189.57624817 52.43499756]
[-200.29251099 42.09038925]
[-214.92596436 38.79466248]
[-228.18074036 46.97687912]
[-242.97421265 43.42608261]
[-250.69302368 30.73925400]
[-265.32647705 27.44352722]
[-279.95993042 24.14779854]
[-295.12289429 28.66392136]
[-305.83917236 18.31931496]
[-320.47262573 15.02358627]
[-335.10607910 11.72785759]
[-349.73953247 8.43212891]
[-364.37301636 5.13640070]
[-379.00646973 1.84067202]
[-390.57318115 12.18430424]
[-406.01403809 13.72023582]
[-419.39175415 5.85787058]
[-425.56228638 -8.37955284]
[-422.15295410 -23.51745415]
[-410.47470093 -33.73500061]
[-395.01806641 -35.10333633]
[-381.72644043 -27.09631157]
[-375.71072388 -12.79278851]
[-361.07727051 -9.49705982]
[-346.44381714 -6.20133162]
[-331.81036377 -2.90560341]
[-317.17687988 0.39012516]
[-302.54342651 3.68585372]
[-288.42715454 -1.06600296]
[-276.66421509 9.51433754]
[-262.03076172 12.81006527]
[-247.39729309 16.10579491]
[-234.98498535 7.95287085]
[-220.09762573 11.08674908]
[-211.63024902 24.16119957]
[-196.99678040 27.45692825]
[-182.88050842 22.70507240]
[-171.11756897 33.28541183]
[-156.48410034 36.58114243]
[-142.36782837 31.82928467]
[-130.60487366 42.40962601]
[-116.48860931 37.65776825]
[-104.72566223 48.23810959]
[-90.09220123 51.53383636]
[-75.45874023 54.82956314]
[-60.82527542 58.12529373]
[-46.19181442 61.42102051]
[-31.55835533 64.71675110]
[-16.92489433 68.01248169]
[-2.29143333 71.30820465]
[12.37447071 74.45642090]
[27.07133102 77.45681000]
[41.76818848 80.45719147]
[56.46504974 83.45758057]
[67.75279236 66.39849091]
[85.26156616 55.82170105]
[105.61362457 53.76764297]
[124.88272095 60.63257980]
[139.35153198 75.09215546]
[146.22875977 94.35686493]
[161.21659851 94.96085358]
[176.20443726 95.56484985]
[191.19227600 96.16883850]
[206.18009949 96.77282715]
[220.28063965 89.59747314]
[232.68603516 97.84098053]
[247.67387390 98.44496918]
[262.66171265 99.04895782]
[277.64953613 99.65294647]
[289.21231079 89.21551514]
[304.40350342 90.04154968]
[314.28274536 101.12921143]
[329.27056885 101.73320007]
[344.25842285 102.33718872]
[362.51049805 91.18061829]
[379.57110596 102.74024963]
[393.21267700 94.72662354]
[406.09317017 102.20606995]
[421.09011841 101.90401459]
[436.08709717 101.60195923]
[451.08404541 101.29990387]
[466.08099365 100.99784088]
[479.72256470 92.98421478]
[492.60305786 100.46366119]
[507.60003662 100.16160583]
[522.59698486 99.85955048]
[536.23852539 91.84592438]
[549.11907959 99.32536316]
[562.86553955 90.38303375]
[577.35845947 98.05687714]
[577.68872070 114.45269775]
[563.51654053 122.70388031]
[549.42108154 114.32231903]
[536.85223389 122.31434631]
[522.89904785 114.85650635]
[507.90206909 115.15856171]
[492.90512085 115.46061707]
[480.33624268 123.45263672]
[466.38305664 115.99480438]
[451.38610840 116.29685974]
[436.38912964 116.59891510]
[421.39218140 116.90097046]
[406.39523315 117.20302582]
[393.82635498 125.19504547]
[379.87316895 117.73721313]
[374.78579712 125.13534546]
[366.72702026 129.39796448]
[357.47229004 129.44123840]
[349.12854004 125.12736511]
[343.65441895 117.32502747]
[328.66659546 116.72103882]
[313.67874146 116.11705017]
[302.93936157 126.37380981]
[287.73095703 125.97478485]
[277.04556274 114.64077759]
[262.05770874 114.03678894]
[247.06988525 113.43280029]
[232.08204651 112.82881165]
[219.05354309 120.04736328]
[205.57611084 111.76065826]
[190.58828735 111.15666962]
[175.60044861 110.55268097]
[160.61260986 109.94869232]
[145.62477112 109.34470367]
[142.62203979 118.76978302]
[137.69648743 127.34809875]
[131.07031250 134.69264221]
[123.04244232 140.47207642]
[113.97504425 144.42568970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 80]
[9 79]
[10 78]
[11 77]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[22 67]
[24 65]
[25 64]
[27 62]
[28 61]
[31 58]
[32 57]
[33 56]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[86 150]
[87 149]
[88 148]
[89 147]
[90 146]
[92 144]
[93 143]
[94 142]
[95 141]
[98 138]
[99 137]
[100 136]
[102 131]
[104 129]
[105 128]
[106 127]
[107 126]
[108 125]
[110 123]
[111 122]
[112 121]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
