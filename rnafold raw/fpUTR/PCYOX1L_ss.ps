%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAGCCGAGCGCCAACCCGCUAGCGCCUGAAUCCGGCGUGCUGCCCGCUCGCCGCCCGCCAUGGCCCGCGCAGCCCCGCUGCUCGCCGCGUUGACCGCGCUCCUCGCCGCCGCCGCUGCUGGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[226.97354126 372.59860229]
[220.32566833 359.15222168]
[207.74911499 351.17224121]
[208.56892395 335.37228394]
[201.92105103 321.92590332]
[195.27317810 308.47949219]
[191.02320862 306.10452271]
[188.27365112 300.98480225]
[188.64668274 294.21896362]
[182.65621948 280.46707153]
[176.66574097 266.71520996]
[170.67527771 252.96331787]
[164.68479919 239.21144104]
[158.69433594 225.45954895]
[152.20942688 211.93380737]
[145.23857117 198.65196228]
[138.26773071 185.37013245]
[131.29687500 172.08828735]
[124.16605377 158.89164734]
[111.21865845 151.52861023]
[111.27416229 135.70750427]
[103.98440552 122.59798431]
[84.36035919 119.72210693]
[72.64728546 101.51569366]
[79.14510345 78.96804810]
[68.16107178 68.75280762]
[56.93341446 58.80597305]
[45.46867752 49.13333893]
[34.00394058 39.46070480]
[22.42317009 29.92730331]
[10.72805500 20.53452492]
[-4.57103157 26.67778015]
[-20.79206657 24.31049156]
[-33.55090714 14.16751671]
[-39.44699097 -0.92763585]
[-36.96939850 -16.84824753]
[-48.88806534 -25.95568466]
[-60.80672836 -35.06312180]
[-72.72539520 -44.17055893]
[-84.64405823 -53.27799606]
[-100.30716705 -55.50905991]
[-105.72217560 -69.38446808]
[-117.64083862 -78.49190521]
[-133.66894531 -77.79958344]
[-144.09449768 -89.99333191]
[-140.91989136 -105.71915436]
[-126.58042145 -112.91354370]
[-112.07610321 -106.05757904]
[-108.53340149 -90.41056824]
[-96.61473846 -81.30313110]
[-81.80413055 -79.72349548]
[-75.53662109 -65.19666290]
[-63.61795807 -56.08922577]
[-51.69929123 -46.98178864]
[-39.78062439 -37.87435150]
[-27.86196136 -28.76691246]
[-15.57581329 -34.85338593]
[-1.79948819 -35.03163528]
[10.76044846 -29.20925903]
[19.61160660 -18.47841454]
[22.97031403 -4.91140079]
[20.12083244 8.83940983]
[31.81594849 18.23218918]
[39.07448578 19.98551559]
[43.67657471 27.99596977]
[55.14131165 37.66860199]
[66.60604858 47.34123611]
[71.45085907 47.82130051]
[76.01627350 51.41694260]
[78.37631226 57.76877975]
[89.36034393 67.98401642]
[104.29031372 66.53630829]
[113.10709381 54.40105438]
[121.92387390 42.26580048]
[130.74064636 30.13054657]
[139.55743408 17.99529076]
[143.97584534 1.62721419]
[160.92739868 1.34182310]
[165.89428711 17.55189133]
[151.69268799 26.81206894]
[142.87591553 38.94732285]
[134.05912781 51.08258057]
[125.24234772 63.21783447]
[116.42557526 75.35308838]
[125.10392761 89.03364563]
[124.85214233 103.99135590]
[117.09392548 115.30823517]
[124.38368225 128.41775513]
[137.85249329 136.71846008]
[137.27557373 151.60188293]
[144.25260925 157.65727234]
[144.57872009 165.11743164]
[151.54956055 178.39927673]
[158.52041626 191.68112183]
[165.49125671 204.96295166]
[170.08282471 207.85125732]
[172.77081299 211.84022522]
[173.45811462 215.99111938]
[172.44622803 219.46908569]
[178.43669128 233.22096252]
[184.42715454 246.97285461]
[190.41763306 260.72473145]
[196.40809631 274.47662354]
[202.39855957 288.22848511]
[208.71957397 301.83160400]
[215.36744690 315.27801514]
[222.01531982 328.72442627]
[235.06736755 337.66616821]
[233.77206421 352.50433350]
[240.41993713 365.95074463]
[257.67465210 376.24319458]
[255.84782410 395.43304443]
[263.13757324 408.54254150]
[270.42730713 421.65206909]
[277.71707153 434.76159668]
[285.00683594 447.87112427]
[300.27157593 451.96539307]
[308.09777832 465.69586182]
[303.84234619 480.91647339]
[290.02990723 488.59710693]
[274.85513306 484.18096924]
[267.32098389 470.28808594]
[271.89730835 455.16085815]
[264.60754395 442.05136108]
[257.31781006 428.94183350]
[250.02804565 415.83230591]
[242.73829651 402.72277832]
[232.58149719 400.77447510]
[225.05503845 393.36331177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[4 107]
[5 106]
[6 105]
[9 104]
[10 103]
[11 102]
[12 101]
[13 100]
[14 99]
[15 95]
[16 94]
[17 93]
[18 92]
[19 90]
[21 88]
[22 87]
[25 71]
[26 70]
[27 67]
[28 66]
[29 65]
[30 63]
[31 62]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[42 50]
[43 49]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
