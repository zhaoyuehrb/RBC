%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGGUUACUGAGCGCUCGGGGCCUUUUCAAAUCGGGAUCCGUUACCGCUUCCCCGGCAGCCGCCAUUGUCGCGCUCGGAGCCCCUCAGCUCAGGCGGCCGAGGCGGAGGCAGCGGCGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[-27.14626312 133.04621887]
[-32.85022354 124.28195190]
[-47.82062531 125.22381592]
[-62.79102707 126.16567230]
[-77.76142883 127.10752869]
[-92.73182678 128.04939270]
[-97.11859894 135.44335938]
[-104.03446960 140.38945007]
[-112.26381683 142.11209106]
[-120.39727783 140.39425659]
[-127.07310486 135.60154724]
[-131.20510864 128.60771179]
[-146.19445801 128.04235840]
[-161.18379211 127.47700500]
[-176.17314148 126.91165161]
[-191.16247559 126.34629822]
[-204.43836975 139.73782349]
[-222.97373962 139.29789734]
[-235.17562866 125.76135254]
[-250.17445374 125.94984436]
[-265.17327881 126.13833618]
[-276.16860962 137.17192078]
[-291.38223267 137.14941406]
[-301.83331299 126.59904480]
[-316.83212280 126.78752899]
[-331.83093262 126.97602081]
[-339.92047119 140.11233521]
[-353.83773804 146.76918030]
[-369.14178467 144.82235718]
[-380.94912720 134.89309692]
[-385.49209595 120.14979553]
[-381.32104492 105.29698181]
[-369.76696777 95.07414246]
[-354.51669312 92.74333954]
[-340.43652344 99.04832458]
[-332.01943970 111.97720337]
[-317.02062988 111.78871918]
[-302.02178955 111.60022736]
[-291.83914185 100.79054260]
[-276.63088989 100.38572693]
[-265.36175537 111.13951874]
[-250.36294556 110.95102692]
[-235.36412048 110.76253510]
[-229.27459717 100.96080017]
[-219.07968140 95.30240631]
[-207.29917908 95.32006836]
[-196.91072083 101.12663269]
[-190.59712219 111.35695648]
[-175.60778809 111.92230988]
[-160.61843872 112.48766327]
[-145.62910461 113.05301666]
[-130.63975525 113.61837006]
[-112.77450562 101.47454834]
[-93.67368317 113.07898712]
[-78.70328522 112.13713074]
[-63.73288345 111.19526672]
[-48.76248169 110.25341034]
[-33.79207993 109.31155396]
[-22.17370415 93.79473114]
[-2.60957742 91.61627960]
[12.59487057 104.58733368]
[27.45179176 102.52047729]
[42.30871201 100.45362854]
[57.16563416 98.38677216]
[72.02255249 96.31991577]
[86.87947845 94.25305939]
[98.02629852 85.81268311]
[111.05366516 90.89001465]
[125.91059113 88.82315826]
[140.76751709 86.75630951]
[155.62443542 84.68945312]
[170.48135376 82.62259674]
[184.67065430 70.96782684]
[200.67097473 78.05855560]
[215.47126770 75.61899567]
[230.27156067 73.17944336]
[245.07185364 70.73988342]
[254.28488159 58.17972183]
[269.32922363 55.91650009]
[281.24664307 64.77713013]
[289.31088257 60.24773407]
[296.44912720 62.46710968]
[311.30606079 60.40025711]
[326.16296387 58.33340073]
[340.99276733 56.08001709]
[355.79302979 53.64046097]
[370.59332275 51.20090485]
[379.59750366 38.21242523]
[395.16333008 35.47733688]
[408.05587769 44.61831665]
[410.62625122 60.21218491]
[401.34945679 73.00737762]
[385.72927856 75.41273499]
[373.03289795 66.00119019]
[358.23260498 68.44075012]
[343.43231201 70.88031006]
[337.27548218 75.11987305]
[328.22982788 73.19032288]
[313.37289429 75.25717926]
[298.51599121 77.32403564]
[283.68621826 79.57741547]
[275.24301147 91.79412079]
[260.26815796 94.47901917]
[247.51139832 85.54017639]
[232.71112061 87.97972870]
[217.91082764 90.41928864]
[203.11053467 92.85884857]
[195.75151062 102.54750824]
[183.35922241 104.64714050]
[172.54820251 97.47952271]
[157.69128418 99.54637146]
[142.83436584 101.61322784]
[127.97744751 103.68008423]
[113.12052155 105.74694061]
[101.97370148 114.18731689]
[88.94633484 109.10998535]
[74.08940887 111.17684174]
[59.23249054 113.24369049]
[44.37556839 115.31054688]
[29.51864624 117.37740326]
[14.66172504 119.44425964]
[10.47113228 129.46733093]
[2.51638150 136.74629211]
[-7.68325853 139.98365784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[5 55]
[6 54]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[19 43]
[20 42]
[21 41]
[24 38]
[25 37]
[26 36]
[61 121]
[62 120]
[63 119]
[64 118]
[65 117]
[66 116]
[68 114]
[69 113]
[70 112]
[71 111]
[72 110]
[74 107]
[75 106]
[76 105]
[77 104]
[80 101]
[82 100]
[83 99]
[84 98]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
