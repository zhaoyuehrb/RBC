%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACCCAACAGGCGCCGCGGCUGCUCCGGUGGCGCCACUGACUCGGAGGCGGCUGCGGAGAGCGGGGCGCUGGCCCGUGGAGGCGGCAGCGGCGGCGGCUUUCUAGCGGAUCCGAGAUUAUAUAUCUUUGA\
) } def
/len { sequence length } bind def

/coor [
[-20.03511238 345.31011963]
[-27.55846977 347.17935181]
[-35.25175095 348.11654663]
[-42.99996948 348.10821533]
[-50.68737793 347.15493774]
[-58.19919205 345.27139282]
[-65.42330933 342.48620605]
[-72.25198364 338.84143066]
[-78.58341217 334.39193726]
[-84.32330322 329.20452881]
[-89.38620758 323.35711670]
[-93.69685364 316.93731689]
[-107.43344879 322.96276855]
[-121.17005157 328.98818970]
[-134.90664673 335.01361084]
[-148.64324951 341.03906250]
[-162.37985229 347.06448364]
[-176.11645508 353.08990479]
[-189.85304260 359.11535645]
[-203.51753235 365.30258179]
[-217.10798645 371.65078735]
[-223.91458130 386.17834473]
[-239.54943848 389.77423096]
[-252.01885986 379.68002319]
[-251.75733948 363.63909912]
[-238.96551514 353.95669556]
[-223.45617676 358.06033325]
[-209.86572266 351.71212769]
[-205.09132385 345.97644043]
[-195.87847900 345.37875366]
[-182.14187622 339.35330200]
[-168.40528870 333.32788086]
[-154.66868591 327.30245972]
[-140.93208313 321.27700806]
[-127.19548035 315.25158691]
[-113.45888519 309.22616577]
[-99.72228241 303.20071411]
[-102.18453979 278.32653809]
[-94.81666565 254.41081238]
[-78.74610138 235.18988037]
[-56.46173477 223.67572021]
[-31.42843819 221.68400574]
[-7.54836035 229.54785156]
[1.38268197 217.49644470]
[10.31372452 205.44503784]
[19.24476624 193.39363098]
[28.17580795 181.34222412]
[37.10684967 169.29080200]
[35.64772034 157.22244263]
[43.07179260 147.09350586]
[55.80979156 144.70245361]
[57.52122498 129.90649414]
[72.10328674 123.76857758]
[81.31647491 111.93146515]
[90.52966309 100.09436035]
[91.07758331 94.77365875]
[94.61504364 90.16806793]
[100.46816254 87.92943573]
[110.23007202 76.54062653]
[119.99198151 65.15180969]
[129.75389099 53.76299667]
[139.51580811 42.37418365]
[149.27772522 30.98537064]
[159.03962708 19.59655762]
[156.81376648 0.85824591]
[168.71142578 -13.37796974]
[186.91485596 -14.47600079]
[189.28529358 -30.11862373]
[203.20835876 -35.40988159]
[212.42155457 -47.24699020]
[221.63473511 -59.08409500]
[230.84793091 -70.92120361]
[240.06112671 -82.75830841]
[242.43154907 -98.40093231]
[256.35461426 -103.69219208]
[265.42736816 -115.63728333]
[274.35839844 -127.68869781]
[273.43026733 -143.70487976]
[285.46926880 -154.30874634]
[301.24011230 -151.36593628]
[308.64474487 -137.13389587]
[302.00299072 -122.53025055]
[286.40982056 -118.75765228]
[277.47875977 -106.70624542]
[276.00970459 -99.38948822]
[268.19171143 -94.47900391]
[266.48028564 -79.68304443]
[251.89822388 -73.54512024]
[242.68504333 -61.70801544]
[233.47184753 -49.87090683]
[224.25865173 -38.03379822]
[215.04547119 -26.19669151]
[213.33403015 -11.40073681]
[198.75196838 -5.26280975]
[202.60638428 5.59339476]
[200.67857361 17.07327461]
[193.33909607 26.26325226]
[182.34681702 30.77342796]
[170.42845154 29.35846901]
[160.66653442 40.74728394]
[150.90461731 52.13609695]
[141.14271545 63.52490997]
[131.38079834 74.91371918]
[121.61888123 86.30253601]
[111.85697174 97.69135284]
[102.36677551 109.30754852]
[93.15357971 121.14466095]
[83.94039154 132.98176575]
[81.56996918 148.62438965]
[67.64689636 153.91564941]
[65.58717346 172.16970825]
[49.15826035 178.22184753]
[40.22721863 190.27325439]
[31.29617691 202.32466125]
[22.36513519 214.37608337]
[13.43409157 226.42749023]
[4.50304985 238.47889709]
[9.82006550 244.16529846]
[14.40250969 250.45629883]
[18.18230820 257.25769043]
[21.10340691 264.46759033]
[23.12260437 271.97811890]
[24.21019363 279.67697144]
[24.35039520 287.44906616]
[23.54158401 295.17831421]
[21.79631424 302.74923706]
[19.14111710 310.04888916]
[15.61610126 316.96838379]
[11.27434635 323.40454102]
[6.18110561 329.26147461]
[0.41282135 334.45202637]
[-5.94401932 338.89898682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 28]
[21 27]
[43 117]
[44 116]
[45 115]
[46 114]
[47 113]
[48 112]
[51 110]
[53 108]
[54 107]
[55 106]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
[63 100]
[64 99]
[67 94]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[75 86]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
