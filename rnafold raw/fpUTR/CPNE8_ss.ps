%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCCGCCUGACGGGAGCUAGCCCUCAGUCCGCCCGAGCUGUGGUUGUGGGCGCCGGACAAGUCCAAGGCGCCUCCUCCCAAU\
) } def
/len { sequence length } bind def

/coor [
[92.16960907 243.60818481]
[81.49488831 254.34732056]
[67.91045380 261.03625488]
[52.88985443 262.94946289]
[38.06240845 259.87936401]
[25.03647995 252.15899658]
[15.22503090 240.62582397]
[9.69233131 226.53085327]
[9.03852654 211.40303040]
[13.33453846 196.88328552]
[22.11436653 184.54661560]
[34.42564011 175.73121643]
[48.93292618 171.39331055]
[64.06257629 172.00344849]
[69.48120117 158.01637268]
[74.89982605 144.02928162]
[80.31845093 130.04220581]
[85.73707581 116.05511475]
[78.70391846 102.77032471]
[82.10418701 88.12828827]
[73.28740692 75.99303436]
[64.47062683 63.85777664]
[55.65385056 51.72252274]
[46.83707047 39.58726883]
[34.09688950 36.73624420]
[27.02614784 26.24541473]
[29.03304863 14.16383648]
[20.67070580 1.71107578]
[12.30836487 -10.74168491]
[3.94602346 -23.19444466]
[-11.56484699 -23.63323021]
[-23.83491325 -33.13191986]
[-28.14608574 -48.03807068]
[-22.84062958 -62.61996841]
[-9.95860195 -71.27057648]
[5.54659605 -70.66355133]
[17.71289825 -61.03231812]
[21.86211395 -46.08027267]
[16.39878464 -31.55678749]
[24.76112556 -19.10402679]
[33.12346649 -6.65126562]
[41.48580933 5.80149460]
[57.58439636 12.52183247]
[58.97232437 30.77048874]
[67.78910828 42.90574265]
[76.60588074 55.04100037]
[85.42266083 67.17625427]
[94.23944092 79.31150818]
[108.85556030 80.43531799]
[119.34545898 90.67524719]
[134.28146362 89.29122162]
[149.21748352 87.90719604]
[164.15348816 86.52317047]
[179.08950806 85.13914490]
[194.02552795 83.75511932]
[208.96153259 82.37109375]
[223.83619690 80.43611145]
[238.62921143 77.95279694]
[253.42222595 75.46949005]
[265.71957397 64.62020111]
[281.17568970 70.10114288]
[283.89062500 86.27399445]
[271.07150269 96.50151062]
[255.90553284 90.26250458]
[241.11251831 92.74581146]
[226.31951904 95.22911835]
[222.75143433 98.72968292]
[216.86877441 99.86473083]
[210.34556580 97.30710602]
[195.40954590 98.69113159]
[180.47352600 100.07515717]
[165.53752136 101.45918274]
[150.60150146 102.84320831]
[135.66549683 104.22723389]
[120.72948456 105.61125946]
[112.94188690 117.13783264]
[99.72415924 121.47373962]
[94.30553436 135.46083069]
[88.88690948 149.44790649]
[83.46828461 163.43499756]
[78.04965973 177.42207336]
[89.64166260 187.16395569]
[97.44024658 200.14320374]
[100.59949493 214.95191956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[27 42]
[28 41]
[29 40]
[30 39]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
