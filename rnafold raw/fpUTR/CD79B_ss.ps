%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGACAGGCUGCAGCCGGUGCAGUUACACGUUUUCCUCCAAGGAGCCUCGGACGUUGUCACGGGUUUGGGGUCGGGGACAGAGCGGUGACC\
) } def
/len { sequence length } bind def

/coor [
[53.66212463 177.37808228]
[46.23886871 181.54765320]
[37.85486221 182.30990601]
[29.98209763 179.60937500]
[23.94692230 194.23425293]
[9.16337681 196.04974365]
[-2.60861421 205.34599304]
[-8.64379025 219.97088623]
[-23.42733574 221.78637695]
[-35.19932556 231.08262634]
[-46.97131729 240.37887573]
[-52.52938080 255.80741882]
[-68.71559143 258.44155884]
[-78.87895966 245.57151794]
[-72.56428528 230.43688965]
[-56.26756668 228.60688782]
[-44.49557495 219.31063843]
[-32.72358322 210.01438904]
[-27.53042030 196.05442810]
[-11.90486240 193.57400513]
[-0.13287187 184.27775574]
[5.06029224 170.31781006]
[20.68585014 167.83737183]
[26.17553329 146.98757935]
[48.09468079 142.91470337]
[58.52256775 132.13235474]
[68.95045471 121.34999847]
[79.37834167 110.56764221]
[89.80622864 99.78528595]
[92.78106689 92.10335541]
[100.76729584 88.82421112]
[111.54965210 78.39633179]
[122.33200836 67.96844482]
[133.11436462 57.54055405]
[143.89671326 47.11267090]
[154.32460022 36.33031464]
[164.38636780 25.20553207]
[174.44815063 14.08075047]
[184.50991821 2.95596910]
[194.57168579 -8.16881275]
[195.37399292 -12.92042160]
[197.53611755 -16.69379044]
[200.53759766 -19.16293526]
[203.80468750 -20.22358704]
[206.79440308 -19.98970985]
[218.24919128 -29.67412949]
[222.90412903 -37.77415466]
[230.25236511 -39.48299408]
[242.02435303 -48.77924347]
[253.79635620 -58.07549286]
[265.56832886 -67.37174225]
[277.34033203 -76.66799164]
[289.11233521 -85.96423340]
[300.88430786 -95.26048279]
[312.65631104 -104.55673218]
[318.69146729 -119.18161774]
[333.47503662 -120.99711609]
[335.07034302 -136.72067261]
[347.36929321 -146.64596558]
[363.07513428 -144.88449097]
[372.86981201 -132.48129272]
[370.94238281 -116.79497528]
[358.43634033 -107.13195038]
[342.77127075 -109.22512054]
[337.57812500 -95.26516724]
[321.95254517 -92.78474426]
[310.18057251 -83.48849487]
[298.40856934 -74.19224548]
[286.63656616 -64.89599609]
[274.86459351 -55.59975052]
[263.09259033 -46.30350113]
[251.32060242 -37.00725174]
[239.54861450 -27.71100426]
[227.93360901 -18.21934509]
[216.47882080 -8.53492737]
[205.69647217 1.89295852]
[195.63470459 13.01774025]
[185.57292175 24.14252090]
[175.51115417 35.26730347]
[165.44938660 46.39208603]
[164.81684875 51.31389618]
[160.95152283 55.82563782]
[154.32460022 57.89502335]
[143.54225159 68.32291412]
[132.75988770 78.75080109]
[121.97753906 89.17868042]
[111.19518280 99.60656738]
[100.58858490 110.21317291]
[90.16069794 120.99552917]
[79.73281097 131.77787781]
[69.30492401 142.56024170]
[58.87703705 153.34259033]
[60.66217422 161.96032715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[6 21]
[7 20]
[9 18]
[10 17]
[11 16]
[25 92]
[26 91]
[27 90]
[28 89]
[29 88]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[45 75]
[46 74]
[48 73]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
