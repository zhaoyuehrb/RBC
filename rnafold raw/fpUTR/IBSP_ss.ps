%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGAGUGAGAGGGCAGAGGAAAUACUCAAUCUGUGCCACUCACUGCCUUGAGCCUGCUUCCUCACUCCAGGACUGCCAGAGGAAGCAAUCACCAAA\
) } def
/len { sequence length } bind def

/coor [
[146.82037354 111.24588013]
[131.86755371 110.05713654]
[116.91472626 108.86838531]
[105.82153320 118.18972015]
[91.37758636 117.04142761]
[81.89652252 106.08443451]
[66.94370270 104.89569092]
[51.99087906 103.70693970]
[37.03805923 102.51818848]
[22.08523560 101.32943726]
[7.13241482 100.14069366]
[-3.28141451 107.95256042]
[-15.81711006 106.54145050]
[-23.71135712 97.22462463]
[-38.61893463 95.56204987]
[-53.52651215 93.89948273]
[-68.43408966 92.23690796]
[-83.00682068 98.39694977]
[-94.79808044 89.29665375]
[-109.70565796 87.63407898]
[-117.76777649 100.59420776]
[-130.65928650 108.76561737]
[-145.82055664 110.52584839]
[-160.24131775 105.52542877]
[-171.05831909 94.75717163]
[-176.12384033 80.35913849]
[-174.43209839 65.19007111]
[-166.31901550 52.26178360]
[-153.39543152 44.14120865]
[-138.22734070 42.44069290]
[-123.82637024 47.49786758]
[-113.05186462 58.30863190]
[-108.04308319 72.72650146]
[-93.13551331 74.38907623]
[-79.62906647 68.11011505]
[-66.77151489 77.32933044]
[-51.86393738 78.99190521]
[-36.95635986 80.65447235]
[-22.04878426 82.31704712]
[-6.48413944 74.38363647]
[8.32116413 85.18786621]
[23.27398491 86.37661743]
[38.22680664 87.56536865]
[53.17963028 88.75411987]
[68.13245392 89.94286346]
[83.08527374 91.13161469]
[94.17846680 81.81027985]
[108.62241364 82.95857239]
[118.10347748 93.91556549]
[133.05630493 95.10430908]
[148.00912476 96.29306030]
[156.72190857 79.44857788]
[171.73165894 67.93470001]
[190.16621399 63.90406418]
[208.51950073 68.08218384]
[223.31837463 79.63725281]
[231.77978516 96.34536743]
[246.73260498 95.15661621]
[261.68542480 93.96786499]
[276.63824463 92.77912140]
[291.59106445 91.59037018]
[306.54388428 90.40161896]
[321.49670410 89.21286774]
[336.44952393 88.02412415]
[351.40234375 86.83537292]
[355.71823120 72.28416443]
[365.00225830 60.27702332]
[377.99884033 52.43782806]
[392.95031738 49.82675934]
[407.83462524 52.79694366]
[420.63876343 60.94668961]
[429.63110352 73.17380524]
[433.59545898 87.82468414]
[431.99575806 102.91790009]
[425.04827881 116.41223907]
[413.69262695 126.48268127]
[399.46459961 131.76730347]
[384.28836060 131.55137634]
[370.21643066 125.86413574]
[359.15185547 115.47470856]
[352.59109497 101.78819275]
[337.63827515 102.97694397]
[322.68545532 104.16569519]
[307.73263550 105.35443878]
[292.77981567 106.54319000]
[277.82699585 107.73194122]
[262.87417603 108.92069244]
[247.92135620 110.10943604]
[232.96853638 111.29818726]
[230.40011597 122.50492859]
[224.94473267 132.64349365]
[216.98551941 140.98416138]
[207.08613586 146.92410278]
[195.95089722 150.03094482]
[184.37463379 150.07420349]
[173.18597412 147.04238892]
[163.18801880 141.14447021]
[155.10069275 132.79537964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[14 39]
[15 38]
[16 37]
[17 36]
[19 34]
[20 33]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
