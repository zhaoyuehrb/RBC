%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGCCGAAACAGUGAGUGGACGGCCGCGGAUUGGCUGUGCUCAGCGGCGGGCUGAGCAACUGGAGUGAGGGGAGCAGUUGGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[87.92310333 228.79624939]
[93.96944427 212.95710754]
[93.96944427 197.95710754]
[93.96944427 182.95710754]
[93.96944427 167.95710754]
[93.96944427 152.95710754]
[93.96944427 137.95710754]
[87.60907745 133.98271179]
[79.66009521 146.70330811]
[66.93962097 138.75413513]
[74.88835907 126.03392792]
[68.52799988 122.05953217]
[55.04608917 128.63510132]
[48.48446655 143.27493286]
[32.91220474 147.13293457]
[20.27500534 137.24957275]
[20.26704979 121.20652008]
[32.89443970 111.31063843]
[48.47052002 115.15319061]
[61.95243073 108.57762146]
[67.87542725 81.51316833]
[89.46271515 66.49195099]
[77.02714539 58.10405731]
[64.59158325 49.71616364]
[52.15602112 41.32826996]
[39.72045898 32.94037628]
[27.28489494 24.55248260]
[14.84933090 16.16458893]
[-1.10994577 17.80197525]
[-12.23720455 6.24499989]
[-9.99656391 -9.64081383]
[3.89314747 -17.66922951]
[18.77693176 -11.68153477]
[23.23722458 3.72902513]
[35.67278671 12.11691856]
[48.10835266 20.50481224]
[60.54391479 28.89270592]
[72.97947693 37.28059769]
[85.41503906 45.66849136]
[97.85060883 54.05638504]
[112.11645508 49.42113113]
[117.24675751 35.32574081]
[122.37705994 21.23035240]
[127.50736237 7.13496351]
[132.63766479 -6.96042585]
[137.76795959 -21.05581474]
[142.89826965 -35.15120316]
[137.44862366 -50.24030304]
[145.97038269 -63.83292007]
[161.92637634 -65.50196075]
[173.07653809 -53.96708298]
[170.86741638 -38.07685471]
[156.99365234 -30.02090263]
[151.86335754 -15.92551327]
[146.73304749 -1.83012354]
[141.60275269 12.26526546]
[136.47244263 26.36065483]
[131.34214783 40.45604324]
[126.21184540 54.55143356]
[133.48399353 67.67073059]
[148.15620422 70.78940582]
[162.82841492 73.90808105]
[177.50062561 77.02675629]
[192.17283630 80.14543152]
[201.46885681 68.03977203]
[215.10058594 61.17401123]
[230.36143494 60.91134262]
[244.22137451 67.30391693]
[253.92848206 79.08249664]
[257.55538940 93.90842438]
[254.38201904 108.83800507]
[245.03840637 120.90695953]
[231.37974548 127.71899414]
[216.11798096 127.92156219]
[202.28332520 121.47444916]
[192.62268066 109.65773773]
[189.05416870 94.81764221]
[174.38195801 91.69896698]
[159.70974731 88.58029175]
[145.03752136 85.46161652]
[130.36531067 82.34294128]
[134.05075073 114.63891602]
[108.96944427 137.95710754]
[108.96944427 152.95710754]
[108.96944427 167.95710754]
[108.96944427 182.95710754]
[108.96944427 197.95710754]
[108.96944427 212.95710754]
[115.01577759 228.79624939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[7 83]
[12 20]
[13 19]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
