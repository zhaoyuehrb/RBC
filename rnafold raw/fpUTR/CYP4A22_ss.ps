%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGGACAGGGGUGGUCAGAGAGAGGAAGGGGCACUCAGAGAUCCAGCAGGUGCUGCACC\
) } def
/len { sequence length } bind def

/coor [
[97.95149994 127.30090332]
[100.09037781 114.32366180]
[87.84406281 107.57685089]
[87.17995453 93.61080170]
[79.24549866 80.88113403]
[71.31103516 68.15147400]
[63.37657547 55.42181015]
[45.58955002 54.87045670]
[31.62889862 44.08206177]
[26.69518471 27.30108452]
[32.49361420 10.96031570]
[23.31202507 -0.90132052]
[14.13043594 -12.76295662]
[4.94884634 -24.62459183]
[-4.23274374 -36.48622894]
[-18.79838181 -42.66302109]
[-20.47035027 -57.46348953]
[-29.65194130 -69.32512665]
[-44.56916809 -66.09416962]
[-59.40897751 -69.66387177]
[-71.22491455 -79.32546234]
[-77.67092133 -93.16062927]
[-77.46713257 -108.42238617]
[-70.65400696 -122.08049774]
[-58.58430481 -131.42314148]
[-43.65446854 -134.59533691]
[-28.82883072 -130.96722412]
[-17.05103111 -121.25917053]
[-10.65956020 -107.39872742]
[-10.92345047 -92.13789368]
[-17.79030418 -78.50671387]
[-8.60871506 -66.64508057]
[5.30019379 -61.31670761]
[7.62889242 -45.66781998]
[16.81048203 -33.80618286]
[25.99207115 -21.94454575]
[35.17366028 -10.08291054]
[44.35525131 1.77872574]
[56.73893738 -0.40341786]
[68.90386963 3.05927324]
[78.39198303 11.53399372]
[83.25698090 23.36856651]
[82.46340179 36.21327591]
[76.10623932 47.48735046]
[84.04070282 60.21701431]
[91.97515869 72.94667816]
[99.90962219 85.67633820]
[112.15593719 92.42314911]
[112.82004547 106.38919830]
[129.17468262 114.44210052]
[129.52325439 131.81741333]
[138.09228516 144.12886047]
[146.66131592 156.44032288]
[155.23033142 168.75177002]
[169.24133301 178.29786682]
[163.94694519 194.40394592]
[147.00465393 193.77505493]
[142.91888428 177.32078552]
[134.34985352 165.00933838]
[125.78083038 152.69789124]
[117.21180725 140.38644409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[4 47]
[5 46]
[6 45]
[7 44]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[17 32]
[18 31]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
