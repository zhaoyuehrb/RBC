%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCAGCCGGCGCCCGCGCGGACACUUUCAGCCCCGAGCCGCGGCCGCUCGGGUCGGACCCACGCGCAGCGGCCGGAG\
) } def
/len { sequence length } bind def

/coor [
[68.92179108 363.74273682]
[54.38315582 368.69488525]
[39.31938171 365.69851685]
[27.78254318 355.55963135]
[22.87599182 341.00555420]
[25.91956520 325.95126343]
[36.09455872 314.44625854]
[50.66394806 309.58532715]
[53.59030533 294.87356567]
[56.51665878 280.16177368]
[59.44301605 265.45001221]
[62.36936951 250.73822021]
[53.90660477 238.53506470]
[56.66477203 223.57353210]
[69.52195740 214.77975464]
[64.41629028 200.78756714]
[74.69720459 188.76202393]
[77.62355804 174.05024719]
[80.54991150 159.33847046]
[83.47626495 144.62669373]
[86.40261841 129.91490173]
[75.95545197 122.39755249]
[69.19703674 111.44412231]
[67.16419220 98.73500824]
[70.16878510 86.21997070]
[77.74987793 75.81896210]
[88.74443054 69.12763977]
[101.46572876 67.17253876]
[105.53733826 52.73571014]
[109.60894775 38.29888153]
[108.93459320 28.91487694]
[114.13419342 23.38113022]
[111.04007721 7.86542845]
[122.33162689 -1.84796929]
[126.96688080 -16.11381721]
[131.60214233 -30.37966537]
[136.23739624 -44.64551163]
[140.87265015 -58.91136169]
[145.50790405 -73.17720795]
[150.14315796 -87.44305420]
[141.70361328 -100.60771179]
[143.75189209 -116.11056519]
[155.32084656 -126.63165283]
[170.94798279 -127.20322418]
[183.25463867 -117.55541229]
[186.42999268 -102.24361420]
[178.97473145 -88.49759674]
[164.40899658 -82.80780029]
[159.77374268 -68.54195404]
[155.13848877 -54.27610397]
[150.50323486 -40.01025772]
[145.86798096 -25.74440956]
[141.23272705 -11.47856236]
[136.59747314 2.78728557]
[140.02314758 17.28259850]
[128.40003967 28.01638412]
[124.04577637 42.37049103]
[119.97416687 56.80731964]
[115.90255737 71.24414825]
[128.09733582 82.96090698]
[132.85020447 99.19067383]
[128.90231323 115.63479614]
[117.29931641 127.93785858]
[101.11440277 132.84126282]
[98.18804169 147.55303955]
[95.26168823 162.26481628]
[92.33533478 176.97660828]
[89.40898132 191.68838501]
[94.30532837 206.73286438]
[84.23373413 217.70610046]
[92.74698639 230.75073242]
[89.56967163 245.62889099]
[77.08114624 253.66458130]
[74.15479279 268.37637329]
[71.22843933 283.08813477]
[68.30208588 297.79992676]
[65.37573242 312.51168823]
[76.97589874 322.57806396]
[81.97359467 337.10110474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[15 70]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[28 59]
[29 58]
[30 57]
[32 56]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
