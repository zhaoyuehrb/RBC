%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCUCCGGUCGGAGACAAUCGCGCUGAGCGGGCGCCGCAGCGGGAGCGGGAGCCGGAGCUGCGAGGCGCGGCGCAGAGCUGGGGCUGCGCGGGGCCGGGCGAGCGGGACCAGGCGGGAGCCAUGGACCGCUAGGGCCCGGCCUAGCCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[71.43020630 108.89763641]
[57.66146088 114.84923553]
[43.89271164 120.80083466]
[30.12396240 126.75243378]
[16.35521317 132.70404053]
[2.58646536 138.65563965]
[-11.18228340 144.60723877]
[-20.77973557 157.18498230]
[-35.53226471 155.13262939]
[-49.30101395 161.08422852]
[-34.96480942 165.49707031]
[-25.17950058 176.86579895]
[-22.95003510 191.69918823]
[-28.96105766 205.44209290]
[-41.36665344 213.87425232]
[-56.35721970 214.40623474]
[-69.32933044 206.87467957]
[-76.29941559 193.59243774]
[-75.12703705 178.63832092]
[-66.17116547 166.60374451]
[-80.79508209 169.94155884]
[-92.52754211 180.55569458]
[-106.65742493 175.84446716]
[-121.28134918 179.18228149]
[-135.90525818 182.52009583]
[-150.52919006 185.85791016]
[-155.70234680 190.12980652]
[-161.39918518 190.97404480]
[-165.81741333 189.02070618]
[-180.56530762 191.75924683]
[-195.31320190 194.49778748]
[-210.06109619 197.23634338]
[-224.53013611 206.07279968]
[-237.02670288 194.61540222]
[-229.47644043 179.43547058]
[-212.79963684 182.48844910]
[-198.05174255 179.74990845]
[-183.30384827 177.01135254]
[-168.55595398 174.27281189]
[-153.86700439 171.23399353]
[-139.24307251 167.89617920]
[-124.61916351 164.55836487]
[-109.99523926 161.22055054]
[-99.30877686 150.84515381]
[-84.13289642 155.31764221]
[-69.50897980 151.97982788]
[-55.25261307 147.31547546]
[-41.48386383 141.36387634]
[-32.87124634 129.21183777]
[-17.13388443 130.83848572]
[-3.36513591 124.88689423]
[10.40361309 118.93528748]
[24.17236137 112.98368835]
[37.94110870 107.03208923]
[51.70985794 101.08048248]
[65.47860718 95.12888336]
[70.72057343 81.07463837]
[57.76183319 71.99819946]
[59.21074295 57.17423630]
[52.70248795 43.65970612]
[46.19423294 30.14517212]
[39.68597412 16.63063812]
[33.17771912 3.11610556]
[26.66946411 -10.39842701]
[14.34955788 -22.04558372]
[22.13105011 -37.10827637]
[38.75922012 -33.80065536]
[40.18399811 -16.90668297]
[46.69225311 -3.39215064]
[53.20050812 10.12238216]
[59.70876312 23.63691521]
[66.21701813 37.15144730]
[72.72528076 50.66598129]
[85.21849823 58.77576828]
[84.23510742 74.56638336]
[97.05318451 71.79632568]
[109.10282898 74.80268860]
[118.05050659 82.37941742]
[122.43881989 92.50000000]
[137.43882751 92.50000000]
[146.08058167 89.35544586]
[152.74401855 92.65612030]
[167.74090576 92.96209717]
[182.73777771 93.26807404]
[197.73466492 93.57405090]
[212.73153687 93.88002777]
[227.72840881 94.18600464]
[219.67259216 81.53279877]
[224.34413147 67.27879333]
[238.32662964 61.84832001]
[251.39430237 69.21282959]
[253.99041748 83.98646545]
[244.21563721 95.36519623]
[259.10342407 97.19660950]
[273.99118042 99.02803040]
[288.87896729 100.85944366]
[303.76675415 102.69085693]
[318.65451050 104.52227020]
[333.54229736 106.35368347]
[348.43008423 108.18510437]
[363.31784058 110.01651764]
[381.43948364 101.27731323]
[396.42639160 113.43966675]
[411.37646484 114.66230774]
[426.32656860 115.88494873]
[441.27664185 117.10758972]
[456.22674561 118.33022308]
[466.58352661 110.57678223]
[479.04507446 111.93979645]
[486.95642090 121.14038849]
[501.87844849 122.66773224]
[516.80047607 124.19507599]
[531.73730469 125.57014465]
[546.68743896 126.79278564]
[561.63751221 128.01542664]
[576.22113037 120.51546478]
[589.85974121 129.62156677]
[588.52307129 145.96614075]
[573.58618164 152.73530579]
[560.41485596 142.96551514]
[545.46478271 141.74287415]
[530.51470947 140.52023315]
[523.54980469 143.12525940]
[515.27313232 139.11711121]
[500.35110474 137.58976746]
[485.42907715 136.06242371]
[469.86279297 144.10964966]
[455.00411987 133.28031921]
[440.05401611 132.05767822]
[425.10391235 130.83503723]
[410.15383911 129.61239624]
[395.20373535 128.38975525]
[387.98095703 135.72131348]
[377.69296265 137.88041687]
[367.72259521 133.90838623]
[361.48645020 124.90429688]
[346.59866333 123.07287598]
[331.71087646 121.24146271]
[316.82312012 119.41004944]
[301.93533325 117.57863617]
[287.04754639 115.74722290]
[272.15975952 113.91580200]
[257.27200317 112.08438873]
[242.38421631 110.25297546]
[227.42243958 109.18288422]
[212.42555237 108.87690735]
[197.42868042 108.57093048]
[182.43180847 108.26495361]
[167.43492126 107.95897675]
[152.43804932 107.65299988]
[137.43882751 107.50000000]
[122.43881989 107.50000000]
[110.24394226 123.62151337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[9 48]
[10 47]
[20 46]
[21 45]
[23 43]
[24 42]
[25 41]
[26 40]
[29 39]
[30 38]
[31 37]
[32 36]
[57 75]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
[79 152]
[80 151]
[82 150]
[83 149]
[84 148]
[85 147]
[86 146]
[87 145]
[93 144]
[94 143]
[95 142]
[96 141]
[97 140]
[98 139]
[99 138]
[100 137]
[101 136]
[103 132]
[104 131]
[105 130]
[106 129]
[107 128]
[110 126]
[111 125]
[112 124]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
