%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCGGCGACAGCUCCAGCUCCGGCUCCGGCUCCGGCUCCGGCUCCGGCUCCCGCGCCUGCCCCGCUCGGCCCAGCGCGCCCGGGCUCCGCGCCCCGACCCCGCCGCCGCGCCUGCCGGGGGCCUCGGGCGCCCCCGCCGCCCGCCUCACG\
) } def
/len { sequence length } bind def

/coor [
[96.99442291 274.97470093]
[108.24652863 264.11541748]
[107.03176117 249.16467285]
[105.81698608 234.21394348]
[95.07052612 220.37191772]
[103.01575470 203.79020691]
[101.49822998 188.86715698]
[99.98070526 173.94412231]
[98.46318054 159.02107239]
[96.94565582 144.09803772]
[95.42813110 129.17500305]
[92.17981720 128.47679138]
[89.03049469 127.41810608]
[86.02002716 126.01235962]
[75.79622650 136.98841858]
[65.57242584 147.96449280]
[62.42171097 164.05812073]
[46.82321930 169.11965942]
[34.82334518 157.94221497]
[38.76653290 142.02420044]
[54.59636688 137.74069214]
[64.82015991 126.76462555]
[75.04396057 115.78856659]
[73.25669098 112.52510071]
[71.89398193 109.06278992]
[70.97745514 105.45661163]
[56.01518250 104.39341736]
[44.13785934 114.47145844]
[28.97913170 113.18008423]
[19.44445610 101.79476166]
[4.48218346 100.73156738]
[-10.48008919 99.66837311]
[-25.44236183 98.60517120]
[-37.31969070 108.68321228]
[-52.47841644 107.39183807]
[-62.01308823 96.00651550]
[-76.97536469 94.94332123]
[-91.93763733 93.88012695]
[-106.44049835 101.53511810]
[-120.17538452 92.57493591]
[-119.01301575 76.21703339]
[-104.14913940 69.28902435]
[-90.87444305 78.91785431]
[-75.91217041 79.98104858]
[-60.94989395 81.04424286]
[-49.90110779 71.12155151]
[-34.71208954 71.98663330]
[-24.37916756 83.64289856]
[-9.41689396 84.70610046]
[5.54537916 85.76929474]
[20.50765228 86.83248901]
[31.55644035 76.90979004]
[46.74546051 77.77487946]
[57.07838058 89.43114471]
[72.04064941 90.49433899]
[89.18457031 72.52075195]
[113.97997284 73.98764038]
[124.20377350 63.01157761]
[134.42756653 52.03551102]
[144.65136719 41.05944824]
[154.87516785 30.08338547]
[165.09896851 19.10732269]
[174.98439026 7.82555008]
[184.52230835 -3.75150394]
[194.06021118 -15.32855797]
[203.59812927 -26.90561295]
[213.13604736 -38.48266602]
[214.00762939 -43.74888229]
[216.58369446 -47.72682571]
[220.07215881 -49.97826385]
[223.62246704 -50.45032120]
[233.84625244 -61.42638397]
[244.07005310 -72.40245056]
[254.29385376 -83.37850952]
[252.27134705 -96.73037720]
[258.23806763 -108.62717438]
[269.80496216 -114.80709076]
[282.62420654 -113.20222473]
[293.06835938 -123.96883392]
[303.51251221 -134.73544312]
[313.95666504 -145.50204468]
[324.40081787 -156.26864624]
[334.73532104 -167.14053345]
[338.41983032 -185.15454102]
[355.34552002 -189.69425964]
[365.34475708 -200.87527466]
[375.34402466 -212.05628967]
[385.34326172 -223.23730469]
[388.77529907 -238.68177795]
[403.02688599 -243.01087952]
[413.02612305 -254.19189453]
[409.61718750 -269.32989502]
[415.78811646 -283.56713867]
[429.16601562 -291.42916870]
[444.60684204 -289.89282227]
[456.17327881 -279.54888916]
[459.41781616 -264.37481689]
[453.09280396 -250.20532227]
[439.63040161 -242.48890686]
[424.20715332 -244.19265747]
[414.20791626 -233.01164246]
[411.49108887 -218.36691284]
[396.52426147 -213.23805237]
[386.52502441 -202.05703735]
[376.52578735 -190.87602234]
[366.52655029 -179.69502258]
[366.87786865 -167.56675720]
[358.58761597 -158.16481018]
[345.71139526 -156.91673279]
[343.44030762 -149.83706665]
[335.16741943 -145.82449341]
[324.72326660 -135.05789185]
[314.27911377 -124.29129028]
[303.83496094 -113.52468109]
[293.39083862 -102.75807953]
[294.38067627 -85.99600220]
[282.73287964 -73.43786621]
[265.26992798 -73.15471649]
[255.04611206 -62.17864990]
[244.82232666 -51.20258713]
[234.59852600 -40.22652435]
[224.71310425 -28.94475174]
[215.17518616 -17.36769676]
[205.63726807 -5.79064322]
[196.09934998 5.78641081]
[186.56144714 17.36346436]
[186.55986023 20.94501305]
[184.78617859 24.69901085]
[181.18110657 27.77530670]
[176.07502747 29.33111954]
[165.85122681 40.30718231]
[155.62742615 51.28324509]
[145.40364075 62.25931168]
[135.17984009 73.23537445]
[124.95603943 84.21143341]
[129.31904602 96.46782684]
[127.99177551 109.40974426]
[121.23181915 120.52541351]
[110.35116577 127.65747833]
[111.86869049 142.58052063]
[113.38621521 157.50355530]
[114.90373993 172.42658997]
[116.42126465 187.34963989]
[117.93878937 202.27267456]
[127.44643402 211.04533386]
[128.37391663 223.54592896]
[120.76772308 232.99917603]
[121.98249054 247.94990540]
[123.19725800 262.90063477]
[136.05485535 271.80096436]
[140.13345337 286.89730835]
[133.50723267 301.06158447]
[119.30490875 307.60592651]
[104.23238373 303.44021606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 149]
[3 148]
[4 147]
[6 144]
[7 143]
[8 142]
[9 141]
[10 140]
[11 139]
[14 23]
[15 22]
[16 21]
[26 55]
[27 54]
[30 51]
[31 50]
[32 49]
[33 48]
[36 45]
[37 44]
[38 43]
[57 135]
[58 134]
[59 133]
[60 132]
[61 131]
[62 130]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
[71 121]
[72 120]
[73 119]
[74 118]
[78 115]
[79 114]
[80 113]
[81 112]
[82 111]
[83 109]
[85 106]
[86 105]
[87 104]
[88 103]
[90 101]
[91 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
