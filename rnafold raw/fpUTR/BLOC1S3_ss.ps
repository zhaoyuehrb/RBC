%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUCACAGCCCUUCAGCUGCCACGGUGAGAACGCAGCACUCGGGUUAGGAAGCGGAUCUCGCAAGCUCCGAGCGUCAGCUGCCGGUUCGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[92.60504913 131.20712280]
[82.50425720 126.87877655]
[74.45758057 119.39469147]
[69.40973663 109.63355255]
[67.95338440 98.74137115]
[53.51820755 94.66392517]
[39.84283066 102.12192535]
[25.26159286 97.78117371]
[18.23580360 84.69783020]
[3.80062389 80.62038422]
[-10.63455486 76.54293060]
[-25.06973457 72.46547699]
[-39.50491333 68.38803101]
[-50.53668213 78.98271179]
[-65.29290009 82.60912323]
[-79.78670502 78.39058685]
[-90.15357208 67.55619812]
[-93.68168640 53.08491898]
[-108.11686707 49.00746536]
[-122.55204773 44.93001556]
[-136.98722839 40.85256577]
[-151.42240906 36.77511215]
[-156.01057434 38.15523529]
[-160.32858276 37.89931107]
[-163.86059570 36.32387543]
[-166.26223755 33.88914108]
[-167.39405823 31.12410355]
[-181.18151855 25.21596718]
[-197.39219666 27.69507980]
[-207.43193054 14.72836113]
[-200.97270203 -0.34513938]
[-184.65921021 -2.01909733]
[-175.27337646 11.42851162]
[-161.48593140 17.33664894]
[-147.34495544 22.33993530]
[-132.90977478 26.41738510]
[-118.47459412 30.49483681]
[-104.03941345 34.57228851]
[-89.60423279 38.64973831]
[-79.02630615 28.16293907]
[-64.52305603 24.35351944]
[-49.96409988 28.34140968]
[-39.28590012 39.15218353]
[-35.42746353 53.95285034]
[-20.99228287 58.03030014]
[-6.55710411 62.10775375]
[7.87807465 66.18520355]
[22.31325340 70.26265717]
[35.14580917 62.78862381]
[49.84321594 66.71810150]
[57.59566116 80.22874451]
[72.03083801 84.30619812]
[90.28720093 69.43480682]
[113.77926636 71.03965759]
[123.21277618 59.37737656]
[132.64628601 47.71509552]
[132.39741516 31.67397118]
[144.87478638 21.58957481]
[160.50680542 25.19779205]
[167.30195618 39.73070526]
[160.04756165 54.03990936]
[144.30857849 57.14860535]
[134.87506104 68.81089020]
[125.44155121 80.47317505]
[130.26776123 89.39658356]
[132.06533813 99.38097382]
[130.65444946 109.42731476]
[143.56311035 117.06711578]
[159.37997437 117.43727875]
[166.39201355 130.57807922]
[179.30067444 138.21788025]
[192.20933533 145.85768127]
[205.11798096 153.49748230]
[218.02664185 161.13728333]
[230.93530273 168.77708435]
[243.92530823 160.68273926]
[259.18984985 159.56387329]
[273.22128296 165.67759705]
[282.79525757 177.61901855]
[285.71176147 192.64408875]
[281.30059814 207.30015564]
[270.57540894 218.21936035]
[256.00079346 222.89254761]
[240.92585754 220.24586487]
[228.81472778 210.88748169]
[222.45045471 196.96791077]
[223.29550171 181.68574524]
[210.38684082 174.04594421]
[197.47817993 166.40614319]
[184.56953430 158.76634216]
[171.66087341 151.12654114]
[158.75221252 143.48674011]
[143.85865784 143.66302490]
[135.92330933 129.97576904]
[123.01464844 122.33596802]
[114.12343597 128.79406738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 52]
[6 51]
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[27 34]
[28 33]
[54 64]
[55 63]
[56 62]
[67 95]
[68 94]
[70 92]
[71 91]
[72 90]
[73 89]
[74 88]
[75 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
