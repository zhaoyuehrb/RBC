%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGAGCCCAGCACAGCUGCCCUCUGGACCCUGCGGACCCCAGCCGAGCCCCUUCCUGAGUUCCACAGGCGCAGCCCCCGGGCGGUCGGGCGGAGGGGUCCCCGGGGCGGUGCCAGGGCGCAAUCCUGGAGGGCGGCCGGGAGGAGGAGGUGCGCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[154.15957642 544.24279785]
[153.86869812 529.24560547]
[153.57783508 514.24841309]
[153.28695679 499.25125122]
[145.30432129 486.67639160]
[152.77255249 472.72879028]
[152.48168945 457.73159790]
[150.16145325 455.01516724]
[149.06784058 451.02273560]
[149.79380798 446.35546875]
[152.63558960 441.85980225]
[153.21722412 426.87109375]
[153.79884338 411.88238525]
[154.38047791 396.89364624]
[149.52429199 388.23742676]
[153.07109070 377.63180542]
[150.46636963 362.85971069]
[147.86164856 348.08758545]
[145.25692749 333.31546021]
[142.65220642 318.54336548]
[140.04748535 303.77124023]
[137.44276428 288.99911499]
[134.83802795 274.22698975]
[132.23330688 259.45489502]
[129.62858582 244.68276978]
[126.88076019 229.93659973]
[123.99007416 215.21777344]
[121.09938812 200.49894714]
[117.49879456 185.93750000]
[113.19674683 171.56765747]
[108.89469147 157.19781494]
[104.59264374 142.82797241]
[100.29059601 128.45812988]
[95.33518982 122.92495728]
[96.04736328 113.76779175]
[86.20072937 103.84129333]
[89.50207520 90.25479889]
[85.47948456 75.80423737]
[81.45689392 61.35367203]
[77.29438019 46.94279099]
[72.99233246 32.57294846]
[68.39849091 27.70799828]
[67.17346191 22.09501839]
[68.81373596 17.56195450]
[65.07212067 3.03610539]
[61.33050156 -11.48974419]
[46.57009125 -25.17151642]
[52.43497849 -43.56672668]
[48.13292694 -57.93656921]
[43.83087921 -72.30641174]
[39.52883148 -86.67625427]
[35.22678375 -101.04609680]
[30.92473412 -115.41593933]
[26.62268639 -129.78578186]
[22.04279709 -144.06950378]
[17.18678665 -158.26171875]
[12.33077812 -172.45394897]
[7.47476864 -186.64616394]
[2.61875963 -200.83839417]
[-9.16945648 -211.39056396]
[-5.96907425 -225.93728638]
[-17.75729179 -236.48945618]
[-14.55690861 -251.03617859]
[-19.41291809 -265.22839355]
[-35.62508774 -269.96835327]
[-45.73183060 -283.29425049]
[-45.92046738 -299.85229492]
[-36.31430817 -313.13607788]
[-41.44461060 -327.23147583]
[-46.57491302 -341.32687378]
[-57.67391586 -354.14282227]
[-48.43133163 -368.35586548]
[-32.21512604 -363.40905762]
[-32.47952271 -346.45718384]
[-27.34922218 -332.36178589]
[-22.21891975 -318.26638794]
[-9.07362080 -315.78259277]
[1.20212543 -307.04818726]
[5.84531403 -294.27099609]
[3.53802872 -280.76348877]
[-5.22069550 -270.08441162]
[-0.36468616 -255.89218140]
[11.07619572 -246.35513306]
[8.22314835 -230.79328918]
[19.66403008 -221.25622559]
[16.81098175 -205.69439697]
[21.66699028 -191.50218201]
[26.52300072 -177.30995178]
[31.37900925 -163.11773682]
[36.23501968 -148.92550659]
[40.09640884 -146.03953552]
[42.15729141 -140.67678833]
[40.99252701 -134.08782959]
[45.29457855 -119.71798706]
[49.59662628 -105.34814453]
[53.89867401 -90.97830200]
[58.20072174 -76.60845947]
[62.50276947 -62.23861694]
[66.80481720 -47.86877441]
[76.25063324 -43.81650543]
[82.00505066 -35.03551102]
[81.94834900 -24.31693459]
[75.85635376 -15.23136139]
[79.59796906 -0.70551181]
[83.33958435 13.82033730]
[87.36217499 28.27090073]
[91.66422272 42.64074326]
[96.61962891 48.17391586]
[95.90745544 57.33108139]
[99.93004608 71.78164673]
[103.95263672 86.23220825]
[113.79927063 96.15870667]
[110.49792480 109.74520111]
[114.66043854 124.15608215]
[118.96248627 138.52592468]
[123.26453400 152.89576721]
[127.56658936 167.26560974]
[131.86863708 181.63545227]
[141.39758301 170.05102539]
[156.39756775 170.07946777]
[165.88252258 181.69995117]
[162.90563965 196.40158081]
[149.64720154 203.41685486]
[135.81822205 197.60826111]
[138.70890808 212.32708740]
[141.59957886 227.04592896]
[146.34573364 234.90943909]
[144.40071106 242.07804871]
[147.00543213 256.85015869]
[149.61015320 271.62228394]
[152.21487427 286.39440918]
[154.81959534 301.16650391]
[157.42431641 315.93862915]
[160.02903748 330.71075439]
[162.63375854 345.48284912]
[165.23847961 360.25497437]
[167.84321594 375.02709961]
[174.72375488 361.69824219]
[186.56083679 352.48501587]
[201.17088318 349.08700562]
[215.85876465 352.13098145]
[227.91502380 361.05548096]
[235.11564636 374.21417236]
[236.13232422 389.17968750]
[230.77749634 403.19131470]
[220.03900146 413.66436768]
[205.89773560 418.66683960]
[190.96237183 417.27597046]
[177.98799133 409.74829102]
[169.36920166 397.47528076]
[168.78756714 412.46401978]
[168.20593262 427.45272827]
[167.62431335 442.44143677]
[167.47886658 457.44073486]
[167.76972961 472.43792725]
[175.77317810 486.08544922]
[168.28413391 498.96038818]
[168.57501221 513.95758057]
[168.86587524 528.95471191]
[169.15675354 543.95190430]
[171.72061157 563.16326904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[6 155]
[7 154]
[11 153]
[12 152]
[13 151]
[14 150]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 128]
[26 126]
[27 125]
[28 124]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[35 113]
[37 111]
[38 110]
[39 109]
[40 107]
[41 106]
[44 105]
[45 104]
[46 103]
[48 99]
[49 98]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[55 90]
[56 89]
[57 88]
[58 87]
[59 86]
[61 84]
[63 82]
[64 81]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
