%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGGAAGGAGACUAGAGCAGGAAGAGCAGCGGCGAGGCGGCGGUGGUGGCUGAGUCCGUGGUGGCAGAGGCGAAGGCGACAGCUCUAGGGGUUGGCACCGGCCCCGAGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[78.13971710 146.52040100]
[69.84770966 159.02011108]
[73.65264893 176.03161621]
[64.21632385 190.28720093]
[47.73123932 193.30891418]
[39.77492523 206.02491760]
[45.70388412 220.36462402]
[42.03911972 235.44273376]
[30.18981361 245.46139526]
[14.71226501 246.56823730]
[1.55790567 238.33764648]
[-4.21514368 223.93447876]
[-0.38702807 208.89701843]
[11.57026386 199.00749207]
[27.05890846 198.06860352]
[35.01522446 185.35260010]
[30.38568306 173.24821472]
[33.66069412 160.50753784]
[43.85175323 151.88363647]
[57.34800339 150.72810364]
[65.64000702 138.22839355]
[58.33564377 130.10151672]
[52.91420746 120.61426544]
[49.62070465 110.19540405]
[48.60397339 99.31578064]
[49.90996552 88.46708679]
[53.47965622 78.13958740]
[59.15172958 68.80002594]
[66.66983795 60.87046814]
[58.71352768 48.15444946]
[44.83445358 40.55959320]
[44.64281845 25.66622162]
[36.68650436 12.95020580]
[22.80742836 5.35535049]
[22.61579132 -9.53802204]
[14.65947819 -22.25403786]
[6.70316505 -34.97005463]
[-0.59693307 -40.67667770]
[-1.29047000 -48.13218307]
[-8.90545750 -61.05549240]
[-16.52044487 -73.97880554]
[-28.86430359 -77.99844360]
[-34.91890335 -89.02478790]
[-31.88554764 -100.81766510]
[-39.15381241 -113.93910980]
[-46.42207336 -127.06055450]
[-53.69033813 -140.18200684]
[-68.01581573 -148.16403198]
[-67.99533844 -164.56315613]
[-53.64996719 -172.50938416]
[-39.73699570 -163.82829285]
[-40.56888962 -147.45027161]
[-33.30062866 -134.32881165]
[-26.03236389 -121.20737457]
[-18.76410103 -108.08592987]
[-3.27933311 -99.94561005]
[-3.59713292 -81.59378815]
[4.01785421 -68.67047882]
[11.63284111 -55.74716949]
[19.41918182 -42.92636871]
[27.37549591 -30.21035194]
[35.33181000 -17.49433517]
[48.64179611 -10.80901527]
[49.40251923 4.99389219]
[57.35883331 17.70990944]
[70.66882324 24.39522934]
[71.42954254 40.19813538]
[79.38585663 52.91415405]
[91.14942932 49.36713409]
[103.41870880 48.71323395]
[115.49265289 50.98982239]
[126.68135071 56.06681061]
[136.34550476 63.65410614]
[148.38618469 54.70859528]
[154.39622498 39.45043945]
[170.65299988 37.29415131]
[180.43290710 50.45793915]
[173.67523193 65.40002441]
[157.33169556 66.74926758]
[145.29101562 75.69477844]
[150.55232239 90.70036316]
[150.97561646 106.59594727]
[146.52040100 121.86028290]
[161.82029724 118.93609619]
[174.37866211 127.52342987]
[177.07214355 142.12756348]
[189.57185364 150.41955566]
[202.07156372 158.71156311]
[214.57125854 167.00357056]
[230.34832764 168.18470764]
[236.67695618 181.66793823]
[249.17666626 189.95994568]
[261.67636108 198.25193787]
[274.17608643 206.54394531]
[286.67578125 214.83593750]
[299.17550659 223.12794495]
[311.67520142 231.41993713]
[328.06741333 231.89744568]
[335.61074829 246.45869446]
[326.54528809 260.12432861]
[310.19680786 258.83630371]
[303.38320923 243.91964722]
[290.88348389 235.62765503]
[278.38378906 227.33564758]
[265.88409424 219.04365540]
[253.38436890 210.75164795]
[240.88465881 202.45964050]
[228.38494873 194.16764832]
[213.50195312 193.57960510]
[206.27926636 179.50328064]
[193.77955627 171.21127319]
[181.27984619 162.91926575]
[168.78013611 154.62727356]
[154.27787781 157.82417297]
[141.48327637 149.59297180]
[138.22839355 134.36000061]
[120.61431122 147.08576965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[5 16]
[6 15]
[29 68]
[30 67]
[32 65]
[33 64]
[35 62]
[36 61]
[37 60]
[39 59]
[40 58]
[41 57]
[44 55]
[45 54]
[46 53]
[47 52]
[73 80]
[74 79]
[83 116]
[86 113]
[87 112]
[88 111]
[89 110]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
