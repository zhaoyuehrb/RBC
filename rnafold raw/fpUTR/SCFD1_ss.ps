%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCUUUGCUUCCGGGGCGGUAAGGGCAGCCACGUCAUCCCCCCGCUCCGCUCCCCAGCCGGGCAGUGGCUCGUGGGAGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[91.31562805 134.15327454]
[93.69430542 119.34114075]
[86.35304260 132.42187500]
[79.01177216 145.50262451]
[71.67050171 158.58335876]
[69.19126129 175.35505676]
[52.38868713 177.61557007]
[45.56510162 162.09541321]
[58.58976364 151.24209595]
[65.93103027 138.16136169]
[73.27230072 125.08061218]
[80.61356354 111.99987030]
[82.53189850 105.28586578]
[86.30677032 100.45781708]
[91.08335114 97.94044495]
[80.67223358 87.14189148]
[70.26112366 76.34333801]
[59.85000992 65.54478455]
[49.43889618 54.74623108]
[39.02778625 43.94768143]
[28.61667252 33.14912796]
[17.45021248 33.56558990]
[8.15900040 27.76798439]
[3.80616951 17.96153641]
[5.66087055 7.61998987]
[-3.93422484 -3.90971732]
[-13.52931976 -15.43942451]
[-29.02494621 -17.02791786]
[-38.59149170 -28.85736656]
[-36.98161316 -43.62028885]
[-52.74092102 -44.81184387]
[-62.97836685 -56.85220337]
[-61.62025833 -72.59803009]
[-49.47233963 -82.70761108]
[-33.74174881 -81.18310547]
[-23.76117134 -68.92897797]
[-25.45190620 -53.21538162]
[-10.64214134 -52.11699295]
[-0.74710554 -40.56091690]
[-1.99961305 -25.03451920]
[7.59548235 -13.50481319]
[17.19057846 -1.97510564]
[35.70459366 3.08702540]
[39.41522217 22.73801613]
[49.82633591 33.53656769]
[60.23744965 44.33512115]
[70.64855957 55.13367081]
[81.05967712 65.93222046]
[91.47078705 76.73077393]
[101.88190460 87.52932739]
[115.34507751 94.14317322]
[130.25509644 95.78374481]
[145.16510010 97.42430878]
[160.07511902 99.06488037]
[174.98513794 100.70544434]
[189.89514160 102.34601593]
[204.83264160 103.71398926]
[219.81011963 104.53550720]
[234.80012512 105.08333588]
[249.79011536 105.63117218]
[264.78009033 106.17900085]
[279.77011108 106.72682953]
[292.45260620 96.90169525]
[308.00695801 100.83127594]
[314.50119019 115.50113678]
[306.95346069 129.65780640]
[291.15377808 132.44151306]
[279.22225952 121.71681976]
[264.23226929 121.16899109]
[249.24227905 120.62116241]
[234.25228882 120.07333374]
[219.26229858 119.52550507]
[212.29992676 122.49792480]
[203.73771667 118.67397308]
[196.67143250 121.39013672]
[188.25457764 117.25602722]
[173.34455872 115.61546326]
[158.43455505 113.97489166]
[143.52453613 112.33432770]
[128.61451721 110.69375610]
[113.70450592 109.05319214]
[127.13373566 115.73568726]
[132.61512756 129.69828796]
[127.31862640 143.73208618]
[113.97883606 150.59136963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[25 42]
[26 41]
[27 40]
[30 37]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 74]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
