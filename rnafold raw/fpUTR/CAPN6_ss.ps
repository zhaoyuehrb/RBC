%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAGAGCUUGGUACAGCCCAAAUAGUUUUCAGGUUAAGAAAGCCAGAAUCUUUGUUCAGCCACACUGACUGAACAGACUUUUAGUGGGGUUACCUGGCUAACAGCAGCAGCGGCAACGGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGGGCUCCUGGGAUAACUCAGGCAUAGUUCAACACU\
) } def
/len { sequence length } bind def

/coor [
[71.55563354 134.38345337]
[66.70153046 129.70716858]
[62.60710907 124.35314178]
[59.36577606 118.44351959]
[57.05147171 112.11312866]
[55.71700668 105.50638580]
[55.39281845 98.77400970]
[40.68103790 95.84765625]
[25.96925926 92.92130280]
[11.25747967 89.99494934]
[-3.78699899 94.89129639]
[-14.76024723 84.81970215]
[-29.47202682 81.89334869]
[-44.18380737 78.96699524]
[-58.89558411 76.04063416]
[-67.93939209 77.43656158]
[-73.82324982 72.94416809]
[-88.94582367 77.59371185]
[-99.75281525 67.34391785]
[-114.41474915 64.17724609]
[-129.07667542 61.01057434]
[-143.73860168 57.84390259]
[-151.31442261 67.14668274]
[-161.87190247 72.68221283]
[-173.67955017 73.61066437]
[-184.82734680 69.84230042]
[-193.53578186 62.04228210]
[-207.39396667 67.78253174]
[-221.25216675 73.52278137]
[-235.11035156 79.26303864]
[-248.96855164 85.00328827]
[-262.82675171 90.74353790]
[-267.35617065 105.71077728]
[-280.47488403 114.22155762]
[-295.98861694 112.25734711]
[-306.57226562 100.74559021]
[-307.22854614 85.12178040]
[-297.64758301 72.76300812]
[-282.35321045 69.50470734]
[-268.56698608 76.88534546]
[-254.70880127 71.14509583]
[-240.85060120 65.40484619]
[-226.99241638 59.66459274]
[-213.13421631 53.92433929]
[-199.27603149 48.18408966]
[-199.51858521 43.75832748]
[-199.08413696 39.34727097]
[-197.98281860 35.05387115]
[-210.45486450 26.72031784]
[-222.92689514 18.38676262]
[-238.23645020 21.26002121]
[-250.76615906 12.63094330]
[-253.41102600 -1.98207426]
[-265.88305664 -10.31562805]
[-278.35510254 -18.64918137]
[-290.82714844 -26.98273468]
[-303.29919434 -35.31628799]
[-315.77124023 -43.64984131]
[-328.24328613 -51.98339462]
[-340.71533203 -60.31694794]
[-353.18737793 -68.65050507]
[-368.96041870 -69.88414001]
[-375.24414062 -83.38835907]
[-387.71618652 -91.72191620]
[-404.24511719 -95.49431610]
[-405.19580078 -112.42158508]
[-389.19320679 -118.02105713]
[-379.38262939 -104.19396210]
[-366.91058350 -95.86040497]
[-352.02963257 -95.22283936]
[-344.85382080 -81.12254333]
[-332.38177490 -72.78899384]
[-319.90972900 -64.45543671]
[-307.43768311 -56.12188721]
[-294.96563721 -47.78833389]
[-282.49359131 -39.45478058]
[-270.02154541 -31.12122536]
[-257.54949951 -22.78767204]
[-245.07746887 -14.45411873]
[-230.56465149 -17.60274315]
[-217.79751587 -9.32900333]
[-214.59335327 5.91471958]
[-202.12130737 14.24827290]
[-189.64926147 22.58182716]
[-169.63360596 15.07143116]
[-149.65705872 23.31667900]
[-140.57192993 43.18197250]
[-125.91000366 46.34864426]
[-111.24807739 49.51531982]
[-96.58614349 52.68199158]
[-82.51228333 47.80595016]
[-70.65657806 58.28224182]
[-55.96923065 61.32885742]
[-41.25745010 64.25521088]
[-26.54567146 67.18156433]
[-11.83389282 70.10792542]
[2.15830064 65.00225830]
[14.18383408 75.28317261]
[28.89561272 78.20952606]
[43.60739136 81.13587952]
[58.31917191 84.06223297]
[68.85781860 68.03958130]
[85.14835358 57.91992950]
[104.18193817 55.57236099]
[122.44313812 61.43046188]
[136.55914307 74.41225433]
[150.11898804 67.99892426]
[159.28607178 55.10415649]
[174.09950256 56.65698242]
[187.65934753 50.24365616]
[196.82643127 37.34888458]
[211.63987732 38.90171432]
[225.19970703 32.48838806]
[234.36680603 19.59361649]
[249.18023682 21.14644241]
[262.74008179 14.73311615]
[264.09234619 -0.50232404]
[272.83126831 -12.93324566]
[286.52801514 -19.27876091]
[301.46203613 -17.92555618]
[313.63162231 -9.33678436]
[327.19143677 -15.75011158]
[336.35852051 -28.64488220]
[351.17196655 -27.09205437]
[364.73181152 -33.50538254]
[373.89889526 -46.40015030]
[388.71234131 -44.84732437]
[402.27218628 -51.26065063]
[411.15493774 -65.04573822]
[427.51913452 -63.97544098]
[434.53067017 -49.15078735]
[424.97668457 -35.82210922]
[408.68551636 -37.70081329]
[395.12567139 -31.28748512]
[386.92846680 -18.85143852]
[371.14514160 -19.94554138]
[357.58529663 -13.53221607]
[349.38809204 -1.09616911]
[333.60476685 -2.19027185]
[320.04492188 4.22305441]
[318.96383667 19.07892418]
[310.53585815 31.48153687]
[296.94158936 38.04371262]
[281.78842163 36.91290665]
[269.15341187 28.29295540]
[255.59356689 34.70628357]
[247.39637756 47.14233017]
[231.61303711 46.04822540]
[218.05320740 52.46155167]
[209.85600281 64.89759827]
[194.07267761 63.80349731]
[180.51283264 70.21681976]
[172.31564331 82.65287018]
[156.53231812 81.55876923]
[142.97247314 87.97209167]
[143.53976440 109.77718353]
[133.70405579 129.24620056]
[143.21995544 140.84135437]
[152.73585510 152.43650818]
[162.25175476 164.03166199]
[171.76765442 175.62683105]
[181.56524658 186.98495483]
[191.63864136 198.09922791]
[201.71202087 209.21348572]
[211.78540039 220.32775879]
[221.85879517 231.44203186]
[231.93217468 242.55628967]
[247.70220947 247.05496216]
[251.42826843 263.02520752]
[239.27729797 274.03820801]
[223.74917603 268.76470947]
[220.81790161 252.62966919]
[210.74452209 241.51541138]
[200.67114258 230.40113831]
[190.59774780 219.28688049]
[180.52436829 208.17260742]
[170.45098877 197.05834961]
[166.95016479 196.52560425]
[163.53616333 194.26097107]
[161.02462769 190.32514954]
[160.17250061 185.14273071]
[150.65660095 173.54756165]
[141.14070129 161.95240784]
[131.62480164 150.35725403]
[122.10890198 138.76210022]
[116.01866150 141.64981079]
[109.56297302 143.58731079]
[102.88910675 144.53041077]
[96.14933014 144.45758057]
[89.49740601 143.37048340]
[83.08508301 141.29394531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 101]
[8 100]
[9 99]
[10 98]
[12 96]
[13 95]
[14 94]
[15 93]
[17 92]
[19 90]
[20 89]
[21 88]
[22 87]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[48 84]
[49 83]
[50 82]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[63 69]
[64 68]
[106 155]
[107 154]
[109 152]
[110 151]
[112 149]
[113 148]
[115 146]
[116 145]
[121 140]
[122 139]
[124 137]
[125 136]
[127 134]
[128 133]
[157 185]
[158 184]
[159 183]
[160 182]
[161 181]
[162 177]
[163 176]
[164 175]
[165 174]
[166 173]
[167 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
