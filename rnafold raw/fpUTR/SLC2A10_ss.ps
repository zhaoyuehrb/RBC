%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUUUGUCCGGCGGCAGCGGCGUUGGGGACUCCGGCGGGGGAUGCGCGCCCGGCCCCUCAGCGCCCCCAGCACGCCGCCGAGUCCCGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 253.17086792]
[92.50000000 238.17086792]
[81.81912994 227.85319519]
[81.60544586 212.64105225]
[92.50000000 201.50793457]
[92.50000000 186.50793457]
[92.50000000 171.50793457]
[81.81912994 161.19024658]
[81.60544586 145.97811890]
[92.50000000 134.84500122]
[84.76270294 122.11772156]
[92.50000000 108.31755066]
[92.25958252 93.31948090]
[91.77880859 78.32718658]
[91.29803467 63.33489227]
[90.81726074 48.34259796]
[90.33648682 33.35030365]
[89.85571289 18.35801125]
[89.37493896 3.36571836]
[79.28211975 -11.93141460]
[87.93798828 -27.10439491]
[86.97693634 -42.07357407]
[85.05877686 -56.95042419]
[82.19139862 -71.67381287]
[79.32402039 -86.39720154]
[76.45664215 -101.12059021]
[73.58926392 -115.84397888]
[70.72188568 -130.56736755]
[67.85450745 -145.29075623]
[64.98712158 -160.01414490]
[62.11974335 -174.73751831]
[59.25236511 -189.46090698]
[56.25382233 -192.44122314]
[54.43815613 -195.85986328]
[53.80344772 -199.32131958]
[54.22822952 -202.46691895]
[55.49192047 -205.00846863]
[57.30399323 -206.75320435]
[56.82321930 -221.74549866]
[56.34244537 -236.73779297]
[48.16680145 -250.28288269]
[55.49219894 -263.25161743]
[55.01142502 -278.24389648]
[54.53065109 -293.23617554]
[41.61605072 -301.83810425]
[36.25557709 -316.39984131]
[40.51043320 -331.32217407]
[52.74454880 -340.86712646]
[68.25365448 -341.36447144]
[81.07418060 -332.62298584]
[86.27636719 -318.00393677]
[81.85988617 -303.12863159]
[69.52294159 -293.71694946]
[70.00371552 -278.72467041]
[70.48448944 -263.73236084]
[78.62574768 -251.25962830]
[71.33473969 -237.21856689]
[71.81551361 -222.22627258]
[72.29628754 -207.23397827]
[73.97575378 -192.32829285]
[76.84313202 -177.60490417]
[79.71051025 -162.88151550]
[82.57788849 -148.15812683]
[85.44526672 -133.43473816]
[88.31265259 -118.71135712]
[91.18003082 -103.98796844]
[94.04740906 -89.26457977]
[96.91478729 -74.54119110]
[99.78216553 -59.81780624]
[102.24202728 -58.12833405]
[104.11236572 -55.27091217]
[104.90771484 -51.49236679]
[104.25239563 -47.22424698]
[101.94612122 -43.03462982]
[102.90717316 -28.06544876]
[111.84439850 -19.74065208]
[112.66360474 -7.15015459]
[104.36723328 2.88494492]
[104.84800720 17.87723732]
[105.32878113 32.86952972]
[105.80955505 47.86182404]
[106.29032898 62.85411835]
[106.77110291 77.84641266]
[107.25187683 92.83870697]
[110.69125366 100.30973053]
[107.50000000 108.31755066]
[115.23729706 122.11772156]
[107.50000000 134.84500122]
[118.39455414 145.97811890]
[118.18087006 161.19024658]
[107.50000000 171.50793457]
[107.50000000 186.50793457]
[107.50000000 201.50793457]
[118.39455414 212.64105225]
[118.18087006 227.85319519]
[107.50000000 238.17086792]
[107.50000000 253.17086792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[5 93]
[6 92]
[7 91]
[10 88]
[12 86]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[21 75]
[22 74]
[23 69]
[24 68]
[25 67]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[38 59]
[39 58]
[40 57]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
