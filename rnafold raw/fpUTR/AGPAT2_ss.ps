%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCCCCGCCGCCCUCGCAAUAAGGGGCCUGAGCGCGCGGGGGAGAAGCGGGAGCGGGAGCGGGAGCGAGCUGGCGGCGCCGUCGGGCGCCGGGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[71.29985809 100.14726257]
[56.80114746 96.30181885]
[41.47861099 100.24268341]
[31.16023445 89.50115967]
[16.66152573 85.65571594]
[2.10586166 82.03182220]
[-12.50337505 78.63031769]
[-27.11260986 75.22881317]
[-41.72184753 71.82730865]
[-56.33108139 68.42581177]
[-71.84799194 79.05741119]
[-89.93867493 75.21112823]
[-99.45840454 59.72241211]
[-114.24783325 57.21787262]
[-129.03726196 54.71333313]
[-143.82670593 52.20879364]
[-158.61613464 49.70425797]
[-173.40556335 47.19971848]
[-188.19499207 44.69517899]
[-181.40222168 58.06896973]
[-185.78793335 72.41349792]
[-198.89805603 79.70216370]
[-213.39671326 75.85652924]
[-221.17105103 63.02844620]
[-217.87088013 48.39598846]
[-205.34333801 40.14697647]
[-220.96186829 42.67126465]
[-230.25556946 31.03182983]
[-244.34225464 25.87765121]
[-260.39520264 29.22945023]
[-271.12121582 16.82441711]
[-265.48626709 1.42378581]
[-249.28712463 -1.12959433]
[-239.18807983 11.79097557]
[-225.10139465 16.94515419]
[-210.49043274 14.05220795]
[-200.18916321 26.06030273]
[-185.69046021 29.90574837]
[-170.90101624 32.41028595]
[-156.11158752 34.91482544]
[-141.32215881 37.41936493]
[-126.53273010 39.92390060]
[-111.74329376 42.42844009]
[-96.95386505 44.93297958]
[-89.15239716 36.33827591]
[-78.03134155 32.61311722]
[-66.38924408 34.81953430]
[-57.21701050 42.51097107]
[-52.92958069 53.81657410]
[-38.32034302 57.21807480]
[-23.71110916 60.61957932]
[-9.10187244 64.02108002]
[5.50736427 67.42258453]
[12.86040878 65.84699249]
[20.50697327 71.15700531]
[35.00568008 75.00244904]
[49.29117203 70.78652954]
[60.64659119 81.80310822]
[75.14530182 85.64855194]
[92.64224243 72.25862885]
[114.47525024 75.21720123]
[125.16241455 64.69178009]
[129.00355530 48.74882889]
[144.80561829 44.36400223]
[156.31280518 56.04803467]
[151.68751526 71.78139496]
[135.68783569 75.37895203]
[125.00066376 85.90437317]
[127.19514465 90.82698822]
[128.43060303 96.07309723]
[128.66348267 101.45767212]
[127.88555908 106.79085541]
[141.02574158 114.02517700]
[154.16593933 121.25949860]
[167.30612183 128.49382019]
[180.44631958 135.72814941]
[193.80101013 142.55838013]
[207.35778809 148.97816467]
[220.91458130 155.39794922]
[234.47135925 161.81773376]
[248.02813721 168.23753357]
[261.58493042 174.65731812]
[277.87698364 172.78637695]
[287.42462158 186.11959839]
[280.40600586 200.94091797]
[264.04132080 202.00341797]
[255.16513062 188.21409607]
[241.60835266 181.79431152]
[228.05157471 175.37452698]
[214.49478149 168.95472717]
[200.93800354 162.53494263]
[187.38122559 156.11515808]
[182.51441956 156.91792297]
[177.11109924 154.54864502]
[173.21199036 148.86833191]
[160.07180786 141.63400269]
[146.93161011 134.39968872]
[133.79142761 127.16536713]
[120.65123749 119.93104553]
[109.28340149 127.15766144]
[95.87059021 128.40190125]
[83.36741638 123.38967896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[4 56]
[5 55]
[6 53]
[7 52]
[8 51]
[9 50]
[10 49]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[26 37]
[28 35]
[29 34]
[61 68]
[62 67]
[72 99]
[73 98]
[74 97]
[75 96]
[76 95]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
