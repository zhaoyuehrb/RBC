%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAGCGGCCGCUCAGUCUGGGCGCUUGCAGGCUGCUAAACCCAACCGCAGUUGACUAGCACCUGCUACCGCGCCUUUGCUUCCUGGCGCACGCGGAGCCUCCUGGAGCCUGCCACCAUCCUGCCUACUACGUGCUGCCCUGCGCCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[87.67354584 303.50115967]
[80.00158691 289.00726318]
[88.94570160 275.26190186]
[89.24971008 260.26498413]
[81.77194214 247.38351440]
[89.78733826 233.74299622]
[90.09134674 218.74607849]
[90.39534760 203.74914551]
[90.69935608 188.75222778]
[83.22158813 175.87075806]
[91.23698425 162.23023987]
[91.54098511 147.23332214]
[91.84499359 132.23640442]
[77.29901123 124.29721832]
[68.39119720 110.32343292]
[67.33393860 93.78564453]
[53.61022568 87.73091888]
[39.88651276 81.67620087]
[25.30309105 87.14990997]
[11.47154617 80.81406403]
[6.34306908 66.87726593]
[-7.38064432 60.82254028]
[-21.10435677 54.76781464]
[-34.82807159 48.71308899]
[-48.55178452 42.65836334]
[-62.27549744 36.60363770]
[-79.60749054 44.13862991]
[-96.67581177 36.79453278]
[-102.90444946 19.62600136]
[-116.86225891 14.13241100]
[-130.82006836 8.63882160]
[-144.77787781 3.14523220]
[-158.73568726 -2.34835720]
[-167.92721558 -2.58704615]
[-172.91886902 -8.09731770]
[-186.76246643 -13.87266159]
[-200.60607910 -19.64800453]
[-214.44967651 -25.42334747]
[-228.29328918 -31.19869232]
[-238.26011658 -24.59050751]
[-250.06108093 -23.65150070]
[-260.72857666 -28.50090218]
[-267.63656616 -37.81691742]
[-269.14682007 -49.19464874]
[-282.74502563 -55.52626801]
[-296.34320068 -61.85788727]
[-309.94137573 -68.18950653]
[-326.22097778 -66.21281433]
[-335.85498047 -79.48375702]
[-328.93276978 -94.35033417]
[-312.57531738 -95.51908112]
[-303.60977173 -81.78768921]
[-290.01156616 -75.45606995]
[-276.41339111 -69.12445068]
[-262.81521606 -62.79283524]
[-246.08026123 -70.10691833]
[-228.99780273 -62.79576111]
[-222.51794434 -45.04229736]
[-208.67433167 -39.26695251]
[-194.83073425 -33.49161148]
[-180.98712158 -27.71626663]
[-167.14352417 -21.94092369]
[-153.24209595 -16.30616760]
[-139.28428650 -10.81257820]
[-125.32647705 -5.31898880]
[-111.36866760 0.17460063]
[-97.41085815 5.66819000]
[-88.12382507 -1.07605243]
[-76.61227417 -2.48762536]
[-65.74791718 1.90301466]
[-58.29803085 11.10321331]
[-56.22077179 22.87992668]
[-42.49705887 28.93465042]
[-28.77334595 34.98937607]
[-15.04963303 41.04410172]
[-1.32591951 47.09882355]
[12.39779377 53.15354919]
[26.14890289 47.54618454]
[40.15295410 53.49103546]
[45.94123840 67.95248413]
[59.66495132 74.00720978]
[73.38866425 80.06193542]
[84.17892456 70.75306702]
[97.87507629 66.81605530]
[111.96152496 68.97401428]
[123.85095978 76.83059692]
[131.35963440 88.94275665]
[146.26654053 87.27408600]
[161.17343140 85.60540771]
[176.06265259 83.78575134]
[190.93266296 81.81529999]
[205.80267334 79.84484863]
[220.67269897 77.87439728]
[235.54270935 75.90394592]
[248.20689392 66.42085266]
[261.84027100 72.41920471]
[276.71029663 70.44875336]
[292.05429077 57.43466187]
[309.61694336 65.44197083]
[324.39486694 62.87052155]
[329.75482178 48.54508591]
[341.48809814 38.88967133]
[356.37997437 36.42004013]
[370.41461182 41.70064926]
[379.85809326 53.21960068]
[394.63604736 50.64815140]
[409.41397095 48.07670212]
[415.31140137 33.82104111]
[427.99285889 25.03558159]
[443.41174316 24.52372932]
[456.64791870 32.44881821]
[463.47778320 46.28197861]
[461.72198486 61.60910034]
[451.94073486 73.53935242]
[437.25524902 78.26583862]
[422.35156250 74.28034973]
[411.98544312 62.85464478]
[397.20748901 65.42609406]
[382.42953491 67.99754333]
[377.43203735 82.02931213]
[366.00601196 91.74022675]
[351.15524292 94.44598389]
[336.85015869 89.32139587]
[326.96633911 77.64846802]
[312.18838501 80.21991730]
[307.03961182 89.12915802]
[297.62573242 93.80314636]
[286.97888184 92.46469116]
[278.68072510 85.31877136]
[263.81072998 87.28922272]
[252.21014404 96.63137054]
[237.51315308 90.77395630]
[222.64314270 92.74440765]
[207.77313232 94.71485901]
[192.90312195 96.68531036]
[178.03309631 98.65576172]
[171.77857971 102.67578888]
[162.84210205 100.51229858]
[147.93521118 102.18097687]
[133.02832031 103.84965515]
[128.65843201 116.86367798]
[119.40383148 127.00334930]
[106.84191132 132.54040527]
[106.53790283 147.53732300]
[106.23390198 162.53424072]
[113.68992615 176.48838806]
[105.69627380 189.05624390]
[105.39226532 204.05316162]
[105.08826447 219.05007935]
[104.78425598 234.04699707]
[112.24028015 248.00114441]
[104.24662781 260.56900024]
[103.94262695 275.56591797]
[112.32235718 289.66244507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 153]
[4 152]
[6 150]
[7 149]
[8 148]
[9 147]
[11 145]
[12 144]
[13 143]
[16 82]
[17 81]
[18 80]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[44 55]
[45 54]
[46 53]
[47 52]
[87 140]
[88 139]
[89 138]
[90 136]
[91 135]
[92 134]
[93 133]
[94 132]
[96 130]
[97 129]
[99 125]
[100 124]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
