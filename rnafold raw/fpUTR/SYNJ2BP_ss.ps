%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUCCGGGUCUCGAGGCUGCUGAAACCGAAACCGCUGUGCUGUGGGCGCAGCGCCGAGAUUGAUUCACCUUCACCUGUGCUGCACUCCAGCUGACCCAAGUAGGAAGCCAGACGAGCUGUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[73.28812408 401.28277588]
[79.33446503 385.44366455]
[79.33446503 370.44366455]
[79.33446503 355.44366455]
[79.33446503 340.44366455]
[71.59716797 327.71636963]
[79.33446503 313.91619873]
[79.33446503 298.91619873]
[79.33446503 283.91619873]
[71.59716797 271.18893433]
[79.33446503 257.38876343]
[79.33446503 242.38876343]
[79.15039062 227.38989258]
[78.78227234 212.39440918]
[70.20713806 203.76916504]
[69.83872986 191.20979309]
[78.42550659 181.49324036]
[78.42550659 166.49324036]
[78.42550659 151.49324036]
[78.42550659 136.49324036]
[67.06737518 126.69564819]
[52.22972870 128.89660645]
[48.18464279 143.57847595]
[38.51259995 155.34161377]
[24.88934898 162.14799500]
[9.67519569 162.81837463]
[-4.49391556 157.23660278]
[-15.16310024 146.36976624]
[-20.48385811 132.10058594]
[-19.53433418 116.90129852]
[-12.47904015 103.40527344]
[-0.54034883 93.95077515]
[14.21329021 90.17584991]
[29.22571945 92.73453522]
[41.89594269 101.18351746]
[50.02877426 114.05895996]
[64.86641693 111.85800171]
[64.49184418 95.49840546]
[71.09552765 81.15701294]
[82.88070679 71.53583527]
[97.13478851 68.20153809]
[99.33574677 53.36389160]
[101.53670502 38.52624512]
[103.73766327 23.68859673]
[101.89054871 14.63249111]
[106.17901611 8.51560497]
[108.74344635 -6.26355982]
[111.30787659 -21.04272461]
[106.04379272 -35.96250916]
[115.84305573 -47.17962265]
[118.40748596 -61.95878601]
[120.97191620 -76.73795319]
[123.53633881 -91.51711273]
[126.10076904 -106.29627991]
[128.66519165 -121.07544708]
[131.22962952 -135.85461426]
[129.26341248 -142.34623718]
[130.72673035 -147.97575378]
[134.29962158 -151.28848267]
[137.58613586 -165.92401123]
[131.33689880 -177.28584290]
[134.44813538 -189.45933533]
[144.70471191 -195.99618530]
[148.34941101 -210.54664612]
[151.99411011 -225.09712219]
[142.67050171 -237.65116882]
[143.64938354 -253.25808716]
[154.46858215 -264.54876709]
[170.01957703 -266.19207764]
[182.95967102 -257.41210938]
[187.17897034 -242.35449219]
[180.68521118 -228.12898254]
[166.54458618 -221.45240784]
[162.89988708 -206.90194702]
[159.25517273 -192.35147095]
[165.00836182 -175.82009888]
[152.22166443 -162.63749695]
[148.93515015 -148.00196838]
[146.00878906 -133.29017639]
[143.44436646 -118.51101685]
[140.87992859 -103.73184967]
[138.31550598 -88.95269012]
[135.75108337 -74.17352295]
[133.18664551 -59.39435959]
[130.62222290 -44.61519241]
[136.06973267 -30.75251389]
[126.08703613 -18.47829628]
[123.52261353 -3.69913149]
[120.95818329 11.08003330]
[118.57530975 25.88955498]
[116.37435150 40.72720337]
[114.17339325 55.56484985]
[111.97244263 70.40249634]
[118.89093018 74.26123047]
[124.64641571 79.70454407]
[128.88458252 86.39732361]
[131.34448242 93.92754364]
[131.87471008 101.83160400]
[146.22880554 106.18587494]
[160.99838257 99.92176056]
[175.03535461 107.68984985]
[177.57174683 123.53112793]
[166.66186523 135.29353333]
[150.67483521 133.95394897]
[141.87454224 120.53997803]
[127.52043152 116.18571472]
[114.39787292 131.35646057]
[93.42550659 136.49324036]
[93.42550659 151.49324036]
[93.42550659 166.49324036]
[93.42550659 181.49324036]
[103.01319122 197.15711975]
[93.77775574 212.02629089]
[94.14587402 227.02177429]
[97.51404572 235.62876892]
[94.33446503 242.38876343]
[94.33446503 257.38876343]
[102.07176208 271.18893433]
[94.33446503 283.91619873]
[94.33446503 298.91619873]
[94.33446503 313.91619873]
[102.07176208 327.71636963]
[94.33446503 340.44366455]
[94.33446503 355.44366455]
[94.33446503 370.44366455]
[94.33446503 385.44366455]
[100.38080597 401.28277588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[7 121]
[8 120]
[9 119]
[11 117]
[12 116]
[13 114]
[14 113]
[17 111]
[18 110]
[19 109]
[20 108]
[21 37]
[22 36]
[41 93]
[42 92]
[43 91]
[44 90]
[46 89]
[47 88]
[48 87]
[50 85]
[51 84]
[52 83]
[53 82]
[54 81]
[55 80]
[56 79]
[59 78]
[60 77]
[63 75]
[64 74]
[65 73]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
