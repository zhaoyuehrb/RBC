%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCCAUCUCCGCUGGUUCCCGGAAGCCGCCGCGGACAAGCUCUCCCGGGCGCGGGCGGGGGUCGUGUGCUUGGAGGAAGCCGCGGAACCCCCAGCGUCCGUCC\
) } def
/len { sequence length } bind def

/coor [
[81.84119415 132.69776917]
[81.51980591 117.70121002]
[91.70060730 106.68389893]
[76.77973938 105.14517212]
[61.85887146 103.60644531]
[46.93799973 102.06772614]
[32.01713181 100.52899933]
[24.74441147 113.84752655]
[12.95840359 123.34136963]
[-1.52535343 127.58806610]
[-16.49100304 125.97037506]
[-29.66136169 118.76575470]
[-39.04441833 107.09941101]
[-43.23460388 92.76861572]
[-58.15547180 91.22988892]
[-73.07633972 89.69116974]
[-87.59741974 95.97200775]
[-99.46384430 86.96994019]
[-114.38471222 85.43121338]
[-129.30558777 83.89249420]
[-144.22645569 82.35376740]
[-158.74752808 88.63460541]
[-170.61395264 79.63253784]
[-185.53482056 78.09381866]
[-200.45568848 76.55509186]
[-212.55877686 86.71829224]
[-228.29595947 85.26335907]
[-238.33062744 73.05348969]
[-236.70939636 57.33257675]
[-224.39411926 47.42755890]
[-208.69122314 49.21490860]
[-198.91696167 61.63422012]
[-183.99609375 63.17294693]
[-169.07522583 64.71166992]
[-155.62138367 58.32077026]
[-142.68772888 67.43289948]
[-127.76685333 68.97161865]
[-112.84598541 70.51034546]
[-97.92511749 72.04907227]
[-84.47128296 65.65817261]
[-71.53762054 74.77030182]
[-56.61674881 76.30902100]
[-41.69588089 77.84774780]
[-34.66923904 64.67369843]
[-23.10277939 55.16778183]
[-8.73927975 50.80260849]
[6.24154425 52.27316284]
[19.55380630 59.38634491]
[29.15425301 71.08567810]
[33.55585480 85.60813141]
[48.47672653 87.14685059]
[63.39759445 88.68557739]
[78.31846619 90.22430420]
[93.23933411 91.76302338]
[108.23771667 91.98322296]
[123.19732666 90.88318634]
[138.15693665 89.78314972]
[153.11654663 88.68311310]
[168.07615662 87.58307648]
[182.97282410 85.82548523]
[197.77767944 83.41374207]
[212.58251953 81.00199890]
[227.38737488 78.59025574]
[242.19221497 76.17851257]
[256.99707031 73.76676941]
[271.72473145 70.92144775]
[286.36251831 67.64500427]
[301.00030518 64.36855316]
[315.63809204 61.09210968]
[323.47463989 56.09046936]
[330.75354004 57.94102097]
[345.48120117 55.09569931]
[360.20886230 52.25037766]
[374.93652344 49.40505981]
[385.07785034 36.97391129]
[401.11764526 37.29608154]
[410.75161743 50.12442780]
[406.58935547 65.61814117]
[391.82382202 71.89176941]
[377.78186035 64.13272858]
[363.05419922 66.97804260]
[348.32650757 69.82336426]
[333.59884644 72.66868591]
[318.91455078 75.72989655]
[304.27676392 79.00634766]
[289.63897705 82.28279114]
[275.00119019 85.55924225]
[271.66299438 89.17487335]
[265.96209717 90.63098145]
[259.40881348 88.57161713]
[244.60395813 90.98336029]
[229.79911804 93.39510345]
[214.99426270 95.80684662]
[200.18942261 98.21858978]
[185.38456726 100.63032532]
[182.99285889 103.42292023]
[179.06037903 105.11785889]
[174.15681458 104.97167206]
[169.17619324 102.54268646]
[154.21658325 103.64272308]
[139.25697327 104.74275970]
[124.29736328 105.84279633]
[109.33775330 106.94283295]
[119.19038391 118.25325775]
[118.42969513 133.23394775]
[107.48204803 143.48817444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[14 43]
[15 42]
[16 41]
[18 39]
[19 38]
[20 37]
[21 36]
[23 34]
[24 33]
[25 32]
[55 103]
[56 102]
[57 101]
[58 100]
[59 99]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[66 87]
[67 86]
[68 85]
[69 84]
[71 83]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
