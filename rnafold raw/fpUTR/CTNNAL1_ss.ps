%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUUGGCGGCGGAGCCCUGGGGGGGCGGGCCCCUGGGGGCGGGGUCUCGGUUGGCGCGAGUGUCCUGUCGCCGCCGCCUCGGGCGGGUGGGCUGACUGGCGGCAGGCUCGCCGCGGCGCGGAGUCCCGGCUGCGGGAUAGACCGAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[240.14811707 181.56066895]
[226.01863098 176.52500916]
[216.73930359 164.73966980]
[215.15919495 149.82313538]
[221.76344299 136.35523987]
[234.52255249 128.47158813]
[219.70007324 126.17070770]
[204.87757874 123.86983490]
[190.05509949 121.56896210]
[175.23262024 119.26808167]
[160.41014099 116.96720886]
[145.58766174 114.66633606]
[130.76516724 112.36546326]
[115.94269562 110.06458282]
[101.11480713 123.26493073]
[78.07487488 116.97679901]
[64.14416504 122.53874207]
[50.21344376 128.10067749]
[36.28273010 133.66261292]
[22.35201263 139.22454834]
[12.40455246 151.52734375]
[-2.28440714 149.06082153]
[-16.21512413 154.62275696]
[-30.14583969 160.18469238]
[-44.07655716 165.74662781]
[-58.00727081 171.30856323]
[-65.63216400 185.42382812]
[-81.44682312 188.12124634]
[-93.31960297 177.33158875]
[-92.14271545 161.33175659]
[-78.81897736 152.39546204]
[-63.56921005 157.37785339]
[-49.63849258 151.81591797]
[-35.70777512 146.25398254]
[-21.77706146 140.69203186]
[-7.84634447 135.13009644]
[1.10469782 123.22513580]
[16.79007530 125.29383850]
[30.72079086 119.73189545]
[44.65150833 114.16996002]
[58.58222580 108.60802460]
[72.51293945 103.04608917]
[74.96586609 88.24800873]
[63.57479477 78.48873138]
[52.18371964 68.72946167]
[40.79264832 58.97018433]
[22.64232826 56.03819275]
[17.40103722 39.31774139]
[5.81198931 29.79440498]
[-5.77705908 20.27106857]
[-17.36610794 10.74773026]
[-32.70315552 13.79878712]
[-46.38825989 6.23228455]
[-51.95973206 -8.37910557]
[-46.78689194 -23.13633347]
[-33.31219482 -31.07148361]
[-17.89798737 -28.43782425]
[-7.82238007 -16.47888756]
[-7.84277010 -0.84131831]
[3.74627852 8.68201923]
[15.33532715 18.20535660]
[26.92437553 27.72869492]
[39.02921295 26.87129211]
[48.76967621 34.76399231]
[50.55192184 47.57910919]
[61.94299698 57.33838272]
[73.33406830 67.09765625]
[84.72514343 76.85693359]
[108.33888245 78.25229645]
[118.24356842 95.24210358]
[133.06605530 97.54297638]
[147.88853455 99.84385681]
[162.71101379 102.14472961]
[177.53349304 104.44560242]
[192.35597229 106.74647522]
[207.17846680 109.04735565]
[222.00094604 111.34822845]
[236.82342529 113.64910126]
[251.79496765 114.57251740]
[266.78787231 114.11058807]
[281.78073120 113.64866638]
[296.77362061 113.18673706]
[311.76651001 112.72481537]
[326.75939941 112.26288605]
[340.90670776 107.27756500]
[352.87698364 98.23804474]
[364.84722900 89.19852448]
[376.81750488 80.15900421]
[388.78775024 71.11948395]
[400.75802612 62.07996750]
[403.07699585 46.67671967]
[415.34530640 37.67988205]
[430.01565552 39.98561096]
[441.98593140 30.94609070]
[453.95617676 21.90657043]
[465.92645264 12.86705112]
[469.55804443 -2.75955963]
[484.10113525 -9.53294086]
[498.39944458 -2.25713444]
[501.48458862 13.48648357]
[490.98986816 25.62075615]
[474.96597290 24.83730888]
[462.99569702 33.87682724]
[451.02545166 42.91634750]
[439.05517578 51.95586777]
[437.25817871 66.69718170]
[425.24740601 76.03505707]
[409.79751587 74.05022430]
[397.82727051 83.08974457]
[385.85702515 92.12926483]
[373.88674927 101.16878510]
[361.91650391 110.20830536]
[349.94622803 119.24782562]
[351.63662720 134.15226746]
[365.32727051 140.28144836]
[379.01788330 146.41061401]
[392.70852661 152.53979492]
[406.39913940 158.66896057]
[420.08975220 164.79814148]
[429.26354980 165.45945740]
[433.99655151 171.19627380]
[447.55844116 177.60525513]
[461.12033081 184.01422119]
[477.41091919 182.13029480]
[486.96917725 195.45590210]
[479.96237183 210.28280640]
[463.59854126 211.35835266]
[454.71136475 197.57612610]
[441.14947510 191.16714478]
[427.58755493 184.75816345]
[413.96060181 178.48876953]
[400.26995850 172.35958862]
[386.57934570 166.23042297]
[372.88870239 160.10124207]
[359.19808960 153.97207642]
[345.50747681 147.84289551]
[342.54464722 162.54737854]
[331.45422363 172.64701843]
[316.53744507 174.22488403]
[303.57946777 166.66903687]
[297.60580444 152.90983582]
[300.93322754 138.28355408]
[312.27124023 128.46269226]
[327.22134399 127.25577545]
[312.22845459 127.71769714]
[297.23556519 128.17962646]
[282.24267578 128.64155579]
[267.24978638 129.10346985]
[252.25689697 129.56539917]
[263.95153809 138.95875549]
[268.84973145 153.13647461]
[265.44754028 167.74555969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[43 68]
[44 67]
[45 66]
[46 65]
[48 62]
[49 61]
[50 60]
[51 59]
[79 149]
[80 148]
[81 147]
[82 146]
[83 145]
[84 144]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[93 105]
[94 104]
[95 103]
[96 102]
[114 136]
[115 135]
[116 134]
[117 133]
[118 132]
[119 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
