%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGGCGGGGGCGCGCGGCCUGUGGCGCCGUCACCCGGCAGACUCCGGAGGGUAGAGCGCUGUGCCGGUUCCGCUGCCGCUGGCCAGGAGCGCGGGGACAGUUCGGGGCUGCGCCGGAGGCCGGCCCGCCUUCCCGGGGGUUCCGUUAUC\
) } def
/len { sequence length } bind def

/coor [
[190.01907349 558.67456055]
[202.81906128 566.49700928]
[198.83705139 552.03521729]
[194.85504150 537.57342529]
[190.87303162 523.11163330]
[186.89102173 508.64981079]
[176.05265808 498.43319702]
[179.84884644 483.07418823]
[175.86682129 468.61239624]
[165.02845764 458.39578247]
[168.82464600 443.03674316]
[164.84263611 428.57495117]
[160.00418091 422.92535400]
[160.93107605 413.77304077]
[157.24879456 399.23205566]
[152.52812195 393.48364258]
[153.64398193 384.35244751]
[150.26300049 369.73846436]
[146.88201904 355.12445068]
[143.50105286 340.51046753]
[140.12007141 325.89645386]
[136.73908997 311.28247070]
[126.33218384 300.62667847]
[130.75984192 285.43765259]
[127.37886047 270.82366943]
[123.99788666 256.20965576]
[120.61690521 241.59565735]
[117.23593140 226.98165894]
[113.85494995 212.36766052]
[103.44804382 201.71188354]
[107.87570190 186.52285767]
[104.49472046 171.90885925]
[100.93652344 168.63754272]
[99.43482208 163.07388306]
[101.28926086 156.62129211]
[98.51509094 141.88005066]
[95.74092102 127.13882446]
[92.96675873 112.39759064]
[83.87638092 100.46590424]
[70.40052032 93.87795258]
[60.25817490 98.02246857]
[49.73221207 95.90876007]
[42.28833008 88.48117828]
[40.23959351 78.39173126]
[27.04748726 71.25251770]
[13.78230858 64.25001526]
[0.44547465 57.38497162]
[-15.89960289 58.71555710]
[-25.00061607 45.07357788]
[-17.49522400 30.49273300]
[-1.10432804 29.97254372]
[7.31052065 44.04813766]
[20.64735413 50.91318130]
[28.08090973 51.17979050]
[34.18669891 58.06041336]
[47.37880325 65.19962311]
[66.57333374 63.19123840]
[76.98846436 80.40209198]
[90.46433258 86.99003601]
[104.00756073 80.54170227]
[107.38853455 65.92770386]
[110.76951599 51.31370163]
[114.15048981 36.69970322]
[117.53147125 22.08570099]
[111.73205566 4.63943577]
[124.12811279 -7.74443150]
[127.20633698 -22.42518425]
[130.28457642 -37.10593796]
[133.21092224 -51.81771469]
[135.98509216 -66.55895233]
[138.75926208 -81.30018616]
[141.53343201 -96.04141998]
[144.30758667 -110.78265381]
[135.46035767 -120.98853302]
[134.14608765 -134.23530579]
[140.62301636 -145.64147949]
[152.31950378 -151.13391113]
[155.39772034 -165.81466675]
[158.47595215 -180.49540710]
[155.80873108 -197.23823547]
[171.15888977 -204.43609619]
[182.32479858 -191.67840576]
[173.15670776 -177.41719055]
[170.07847595 -162.73643494]
[167.00024414 -148.05567932]
[176.79058838 -134.41639709]
[173.65557861 -117.57954407]
[159.04882812 -108.00848389]
[156.27465820 -93.26725006]
[153.50048828 -78.52601624]
[150.72633362 -63.78478241]
[147.95216370 -49.04354858]
[149.81770325 -41.84295273]
[144.96531677 -34.02770615]
[141.88710022 -19.34695435]
[138.80886841 -4.66620159]
[145.17161560 5.66821051]
[142.68223572 17.95633507]
[132.14547729 25.46668053]
[128.76449585 40.08068085]
[125.38351440 54.69467926]
[122.00253296 69.30867767]
[118.62155914 83.92267609]
[118.38825989 101.68968201]
[107.70799255 109.62342072]
[110.48216248 124.36465454]
[113.25632477 139.10589600]
[116.03049469 153.84712219]
[119.10872650 168.52787781]
[122.48970032 183.14187622]
[133.13842773 194.84294128]
[128.46894836 208.98667908]
[131.84992981 223.60067749]
[135.23091125 238.21467590]
[138.61187744 252.82867432]
[141.99285889 267.44268799]
[145.37384033 282.05667114]
[156.02256775 293.75775146]
[151.35308838 307.90148926]
[154.73406982 322.51547241]
[158.11505127 337.12948608]
[161.49601746 351.74346924]
[164.87699890 366.35748291]
[168.25798035 380.97146606]
[171.78979492 395.54977417]
[175.47207642 410.09075928]
[179.30442810 424.59292603]
[183.28645325 439.05474854]
[194.40962219 450.30575562]
[190.32862854 464.63037109]
[194.31063843 479.09216309]
[205.43382263 490.34317017]
[201.35281372 504.66781616]
[205.33482361 519.12957764]
[209.31683350 533.59136963]
[213.29885864 548.05322266]
[217.28086853 562.51501465]
[222.44352722 576.59857178]
[228.75155640 590.20770264]
[242.46739197 599.19702148]
[241.27029419 615.55242920]
[226.39173889 622.44885254]
[213.13751221 612.79187012]
[215.14242554 596.51574707]
[208.83438110 582.90661621]
[204.12318420 597.14752197]
[192.03491211 606.02862549]
[177.03681946 606.26782227]
[164.67147827 597.77679443]
[159.50851440 583.69329834]
[163.45591736 569.22204590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 137]
[3 136]
[4 135]
[5 134]
[6 133]
[8 131]
[9 130]
[11 128]
[12 127]
[14 126]
[15 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[22 119]
[24 117]
[25 116]
[26 115]
[27 114]
[28 113]
[29 112]
[31 110]
[32 109]
[35 108]
[36 107]
[37 106]
[38 105]
[39 59]
[40 58]
[44 56]
[45 55]
[46 53]
[47 52]
[60 103]
[61 102]
[62 101]
[63 100]
[64 99]
[66 96]
[67 95]
[68 94]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[77 85]
[78 84]
[79 83]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
