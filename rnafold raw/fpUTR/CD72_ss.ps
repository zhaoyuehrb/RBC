%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGCUAAGCCGUGCAGUCACAGAGGGAACACAGAGCCUAGUUGUAAACGGACAGAGACGAGAGGGGCAAGGGAGGACAGUGGAUGACAGGGAAGACGAGUGGGGGCAGAGCUGCUCAGGACC\
) } def
/len { sequence length } bind def

/coor [
[157.35629272 296.70135498]
[150.99203491 290.12145996]
[145.86996460 282.52810669]
[142.14857483 274.15304565]
[139.94361877 265.25222778]
[139.32446289 256.09805298]
[140.31187439 246.97097778]
[142.87742615 238.15098572]
[146.94421387 229.90890503]
[152.38922119 222.49821472]
[159.04704285 216.14710999]
[151.49269104 203.18826294]
[138.39849854 196.08955383]
[138.13285828 180.27058411]
[130.57850647 167.31173706]
[116.15482330 163.77717590]
[108.30903625 150.74267578]
[112.11419678 135.63775635]
[104.55985260 122.67890930]
[97.00550079 109.72006226]
[90.47554016 104.82958984]
[89.42884064 96.33926392]
[82.20253754 83.19466400]
[67.29214478 78.68711853]
[60.15089417 65.25368500]
[64.54003143 51.06668091]
[50.40719604 52.36241531]
[36.89511490 48.16622162]
[26.04933167 39.14815903]
[19.49840355 26.70557976]
[18.20941544 12.74669075]
[22.34533501 -0.60207975]
[31.24526405 -11.32000828]
[16.03563881 -13.76407909]
[5.30696249 -24.56911850]
[3.02488780 -39.44379807]
[9.85743523 -52.65191269]
[2.96373701 -65.97396088]
[-3.92996073 -79.29600525]
[-10.82365894 -92.61805725]
[-27.54623413 -97.56765747]
[-35.41067505 -112.75573730]
[-30.01755905 -128.63188171]
[-37.24386215 -141.77647400]
[-44.47016907 -154.92108154]
[-51.69647217 -168.06567383]
[-66.93460083 -167.19262695]
[-81.03919983 -173.02554321]
[-91.20980072 -184.40631104]
[-95.42701721 -199.07525635]
[-92.85351562 -214.11984253]
[-84.00026703 -226.55297852]
[-70.62509155 -233.90603638]
[-55.38364792 -234.71908569]
[-41.30212402 -228.83065796]
[-31.17642403 -217.40994263]
[-27.01700783 -202.72450256]
[-29.64973450 -187.69015503]
[-38.55187225 -175.29197693]
[-31.32556915 -162.14738464]
[-24.09926414 -149.00277710]
[-16.87295723 -135.85818481]
[-4.05610752 -134.00535583]
[5.47137833 -124.94844818]
[8.04601097 -111.85861206]
[2.49838805 -99.51174927]
[9.39208603 -86.18970490]
[16.28578377 -72.86766052]
[23.17948151 -59.54561234]
[37.90807724 -57.49464035]
[48.73279953 -47.04048538]
[51.35678482 -32.04154968]
[44.56731033 -18.21370697]
[60.47639084 -18.99117088]
[75.19580841 -12.75486088]
[85.78054810 -0.69781637]
[90.08912659 14.81695557]
[87.21672058 30.71950150]
[77.68463135 43.84037781]
[92.01493073 47.73627853]
[99.53068542 60.96383286]
[95.34713745 75.96835327]
[102.57344055 89.11295319]
[109.96435547 102.16571045]
[117.51869965 115.12456512]
[125.07305145 128.08341980]
[140.09201050 132.21482849]
[147.56858826 145.46456909]
[143.53735352 159.75738525]
[151.09170532 172.71623230]
[164.72622681 180.74185181]
[164.45153809 195.63391113]
[172.00588989 208.59277344]
[193.86857605 204.88488770]
[215.27647400 210.51969910]
[232.42196655 224.46269226]
[242.26890564 244.20458984]
[243.09019470 266.21279907]
[234.77067566 286.56365967]
[245.83337402 296.69363403]
[256.89605713 306.82363892]
[267.95877075 316.95361328]
[279.02145386 327.08361816]
[290.08416748 337.21362305]
[305.26116943 333.98284912]
[319.42492676 340.32070923]
[327.12911987 353.79010010]
[325.41137695 369.21182251]
[314.93218994 380.65585327]
[299.72100830 383.72177124]
[285.62686157 377.23065186]
[278.06924438 363.67846680]
[279.95416260 348.27630615]
[268.89147949 338.14630127]
[257.82876587 328.01632690]
[246.76608276 317.88632202]
[235.70338440 307.75634766]
[224.64068604 297.62634277]
[217.12178040 302.77420044]
[208.81552124 306.53399658]
[199.97578430 308.78881836]
[190.87304688 309.46777344]
[181.78620911 308.54821777]
[172.99397278 306.05654907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 93]
[12 92]
[14 90]
[15 89]
[18 86]
[19 85]
[20 84]
[22 83]
[23 82]
[26 79]
[33 73]
[37 69]
[38 68]
[39 67]
[40 66]
[43 62]
[44 61]
[45 60]
[46 59]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
