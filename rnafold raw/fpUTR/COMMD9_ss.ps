%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCCCUGGGUGCCACGGUCAUGUGACUUCGGCAAGAUGGCUGCCCUGACAGCGGAGCAUUUUGCAGCACUCCAGAGCCUGCUCAAGA\
) } def
/len { sequence length } bind def

/coor [
[142.85389709 301.72799683]
[139.73522949 287.05578613]
[126.07599640 281.17672729]
[118.40705109 268.22869873]
[119.84975433 253.07048035]
[130.05947876 241.53497314]
[126.68521118 226.91941833]
[123.05638123 212.36499023]
[119.42755127 197.81054688]
[115.79872131 183.25611877]
[111.91643524 168.76722717]
[107.78187561 154.34829712]
[103.64731598 139.92936707]
[99.51275635 125.51044464]
[91.25361633 123.96916962]
[83.94282532 119.82895660]
[78.37309265 113.53872681]
[75.14832306 105.78051758]
[60.18486023 104.73416901]
[45.22139740 103.68782043]
[30.25793839 102.64147186]
[15.76370335 110.31279755]
[2.01873851 101.36808014]
[3.16268516 85.00888062]
[18.01874924 78.06414032]
[31.30428505 87.67801666]
[46.26774597 88.72435760]
[61.23120499 89.77070618]
[76.19466400 90.81705475]
[80.04473877 84.10006714]
[85.73213959 78.84702301]
[92.73320770 75.54158020]
[100.40335846 74.48809052]
[105.03861237 60.22224045]
[109.67386627 45.95639420]
[114.30912018 31.69054413]
[118.94437408 17.42469788]
[123.57962799 3.15884924]
[128.21488953 -11.10699844]
[132.85014343 -25.37284660]
[128.53773499 -43.16981125]
[141.79565430 -54.52312088]
[145.93020630 -68.94204712]
[150.06477356 -83.36096954]
[154.19932556 -97.77989960]
[145.30549622 -110.64199829]
[146.81147766 -126.20689392]
[158.00621033 -137.12532043]
[173.60388184 -138.24192810]
[186.23973083 -129.02947998]
[189.94752502 -113.83782959]
[182.97653198 -99.83999634]
[168.61825562 -93.64533234]
[164.48368835 -79.22640991]
[160.34913635 -64.80748749]
[156.21456909 -50.38856125]
[161.83146667 -39.52114105]
[158.34063721 -27.37592697]
[147.11598206 -20.73759079]
[142.48072815 -6.47174358]
[137.84547424 7.79410410]
[133.21022034 22.05995178]
[128.57496643 36.32579803]
[123.93971252 50.59164810]
[119.30445862 64.85749817]
[114.66920471 79.12334442]
[125.51121521 100.44529724]
[113.93168640 121.37588501]
[118.06624603 135.79481506]
[122.20080566 150.21374512]
[126.33536530 164.63265991]
[131.82211304 172.21469116]
[130.35316467 179.62728882]
[133.98199463 194.18171692]
[137.61080933 208.73616028]
[141.23963928 223.29058838]
[146.45843506 231.05947876]
[144.73168945 238.41629028]
[158.75064087 244.80183411]
[166.23402405 258.06277466]
[164.49453735 273.01062012]
[154.40744019 283.93713379]
[157.52610779 298.60934448]
[171.41729736 305.79049683]
[177.39486694 320.24050903]
[172.63639832 335.13650513]
[159.38868713 343.44506836]
[143.90690613 341.24313354]
[133.50108337 329.57040405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[6 78]
[7 76]
[8 75]
[9 74]
[10 73]
[11 71]
[12 70]
[13 69]
[14 68]
[18 29]
[19 28]
[20 27]
[21 26]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[42 56]
[43 55]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
