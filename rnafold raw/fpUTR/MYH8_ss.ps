%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCACCAAGAACCCAGAGAGUGGAACACUUCUGAACCUGCAUUUUUAUCUGGAACUCCAGAGGCAGAAUCCUUUGCUAAAUAAAUCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[13.32808971 168.39381409]
[9.33084011 174.77577209]
[4.33432674 180.40284729]
[-1.52188277 185.12048340]
[-8.07463551 188.79942322]
[-15.14173698 191.33935547]
[-22.52701950 192.67161560]
[-30.02578545 192.76103210]
[-37.43048477 191.60682678]
[-44.53644562 189.24266052]
[-51.14755630 185.73559570]
[-57.08164978 181.18418884]
[-62.17554855 175.71580505]
[-66.28953552 169.48292542]
[-69.31118011 162.65901184]
[-71.15843964 155.43360901]
[-71.78184509 148.00712585]
[-86.58149719 145.56369019]
[-101.38114929 143.12025452]
[-116.18079376 140.67681885]
[-125.35801697 142.38302612]
[-131.42141724 137.90370178]
[-146.13319397 134.97734070]
[-160.84497070 132.05099487]
[-175.55674744 129.12463379]
[-192.27111816 131.96473694]
[-199.62722778 116.68978882]
[-186.98559570 105.39263153]
[-172.63038635 114.41285706]
[-157.91860962 117.33921051]
[-143.20683289 120.26556396]
[-128.49505615 123.19192505]
[-113.73736572 125.87717438]
[-98.93771362 128.32060242]
[-84.13806152 130.76403809]
[-69.33841705 133.20747375]
[-54.83375931 112.51821136]
[-31.36713028 102.91646576]
[-6.34723330 107.53617859]
[12.27129173 125.00511932]
[26.30988121 119.72137451]
[40.34846878 114.43762207]
[54.38705826 109.15386963]
[53.20961380 94.84463501]
[56.46659470 80.68802643]
[63.95071411 68.04131317]
[75.04465485 58.14852142]
[88.77097321 52.01834869]
[103.87787628 50.32189941]
[118.95322418 53.32070923]
[132.55654907 60.83255386]
[141.29371643 48.63985443]
[150.03088379 36.44715500]
[158.76805115 24.25445557]
[167.50521851 12.06175423]
[168.57325745 -4.30257607]
[183.39694214 -11.31615925]
[196.72692871 -1.76402152]
[194.85047913 14.52741623]
[179.69790649 20.79891968]
[170.96075439 32.99161911]
[162.22358704 45.18432236]
[153.48641968 57.37702179]
[144.74925232 69.56971741]
[151.38357544 83.02281189]
[166.37554932 83.51359558]
[181.36752319 84.00438690]
[196.35948181 84.49517059]
[211.35145569 84.98595428]
[226.34342957 85.47674561]
[240.54324341 77.27325439]
[254.61042786 85.70216370]
[254.07385254 102.09252930]
[239.48551941 109.58335114]
[225.85264587 100.46871185]
[210.86067200 99.97792816]
[195.86869812 99.48713684]
[180.87673950 98.99635315]
[165.88476562 98.50556946]
[150.89279175 98.01477814]
[149.19665527 111.35731506]
[144.09555054 123.67600250]
[136.00541687 134.12681580]
[125.54454041 142.01136780]
[113.48661041 146.82336426]
[100.70359802 148.28091431]
[88.10282135 146.34234619]
[76.56248474 141.20489502]
[66.87052155 133.28648376]
[59.67081070 123.19245911]
[45.63222122 128.47621155]
[31.59363174 133.75996399]
[17.55504227 139.04371643]
[18.35884476 146.55198669]
[17.90708733 154.08444214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 36]
[18 35]
[19 34]
[20 33]
[22 32]
[23 31]
[24 30]
[25 29]
[40 93]
[41 92]
[42 91]
[43 90]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
