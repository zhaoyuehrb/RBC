%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCGCCGGACGCGGGCUGAUUUCCGCCUCCGGGUGGCGCUUCCCGGUGUCGUGUUCUGGAAGCUUAGCGGUCACC\
) } def
/len { sequence length } bind def

/coor [
[124.45306396 142.71020508]
[112.86891174 152.23950195]
[97.91754150 153.44641113]
[84.95488739 145.89860535]
[78.62445068 132.29986572]
[81.19394684 117.52157593]
[91.74266815 106.85779572]
[76.79130554 105.65080261]
[61.83994675 104.44380188]
[46.88858795 103.23680115]
[31.93722725 102.02980042]
[17.55920982 108.63156128]
[5.49580288 99.89523315]
[-9.45555687 98.68823242]
[-24.40691566 97.48123169]
[-39.35827637 96.27423859]
[-54.30963516 95.06723785]
[-66.18405151 105.49670410]
[-81.94966125 104.39160919]
[-92.25299835 92.40758514]
[-90.98127747 76.65454865]
[-78.88899231 66.47848511]
[-63.15028000 67.91667938]
[-53.10263824 80.11587524]
[-38.15127563 81.32287598]
[-23.19991684 82.52987671]
[-8.24855804 83.73687744]
[6.70280170 84.94387054]
[20.01139641 78.25578308]
[33.14422607 87.07844543]
[48.09558487 88.28544617]
[63.04694366 89.49243927]
[77.99830627 90.69944000]
[92.94966125 91.90644073]
[107.90102386 90.69944000]
[122.46514893 87.10970306]
[137.02928162 83.51997375]
[151.59339905 79.93023682]
[166.15753174 76.34049988]
[180.18276978 71.02142334]
[193.46461487 64.05058289]
[206.74645996 57.07973099]
[220.02830505 50.10888290]
[233.31013489 43.13803482]
[246.59197998 36.16719055]
[255.21572876 22.90288925]
[270.08087158 23.83927155]
[283.36270142 16.86842346]
[285.47140503 1.49529874]
[296.23776245 -9.67901802]
[311.52188110 -12.35777473]
[325.44668579 -5.51093435]
[332.65783691 8.22875404]
[330.38247681 23.57809830]
[319.49554443 34.63496399]
[304.18325806 37.14775848]
[290.33355713 30.15026474]
[277.05169678 37.12111282]
[269.37796021 49.88681030]
[253.56282043 49.44902802]
[240.28099060 56.41987610]
[226.99914551 63.39072418]
[213.71730042 70.36157227]
[200.43547058 77.33242035]
[187.15362549 84.30326843]
[200.34056091 91.45201111]
[204.96311951 105.72197723]
[198.47250366 119.24498749]
[184.44750977 124.56472015]
[170.62124634 118.74797821]
[164.61724854 105.00199127]
[169.74726868 90.90462494]
[155.18313599 94.49436188]
[140.61901855 98.08409882]
[126.05488586 101.67383575]
[111.49076080 105.26356506]
[123.61363983 114.09735107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[47 58]
[48 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
