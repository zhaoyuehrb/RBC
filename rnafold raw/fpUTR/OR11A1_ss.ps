%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUAAUAACGUUAGGCUUGGUAUAGAAGAUGCAGAGACAUGCUAAAAUUUCUCCCCCAAUUAUUGCCAAGCAGAAACUUGGACGAUCGAC\
) } def
/len { sequence length } bind def

/coor [
[108.98390961 249.46192932]
[120.14396667 238.90974426]
[116.59250641 224.33622742]
[113.04103851 209.76272583]
[109.48957062 195.18922424]
[105.93810272 180.61570740]
[95.71588135 177.71609497]
[87.63157654 170.69515991]
[83.26201630 160.83020020]
[83.49842072 149.96147156]
[88.36560059 140.14903259]
[97.00403595 133.28228760]
[94.96153259 118.42200470]
[83.47992706 109.58350372]
[81.50694275 95.22894287]
[90.17817688 83.62049866]
[88.13568115 68.76020813]
[86.09317780 53.89992142]
[84.05067444 39.03963089]
[82.00817871 24.17934227]
[79.96567535 9.31905270]
[77.92317963 -5.54123640]
[75.88067627 -20.40152550]
[61.36890411 -22.04910851]
[47.69244766 -27.14643669]
[35.65800095 -35.38794708]
[25.97421265 -46.28276825]
[19.20997620 -59.18395233]
[15.76099491 -73.32689667]
[15.82664490 -87.87464142]
[19.39845276 -101.96742249]
[26.26086807 -114.77347565]
[36.00426483 -125.53811646]
[48.04939270 -133.62821960]
[61.68181229 -138.56947327]
[60.14785004 -153.49082947]
[58.61388779 -168.41218567]
[57.07992554 -183.33354187]
[47.97192764 -196.27012634]
[54.36711884 -209.72190857]
[52.83315659 -224.64328003]
[40.41696167 -234.42149353]
[38.63462448 -250.12495422]
[48.54357147 -262.43707275]
[64.26499939 -264.05328369]
[76.47167206 -254.01472473]
[77.92157745 -238.27708435]
[67.75451660 -226.17723083]
[69.28847504 -211.25587463]
[78.28675842 -199.38658142]
[72.00128174 -184.86750793]
[73.53524780 -169.94615173]
[75.06920624 -155.02479553]
[76.60317230 -140.10342407]
[91.87238312 -137.78385925]
[106.04434204 -131.61727905]
[118.16663361 -122.01190948]
[127.42301941 -109.60728455]
[133.18835449 -95.23165894]
[135.07084656 -79.84671021]
[132.93864441 -64.48320770]
[126.92907715 -50.17196274]
[117.43981171 -37.87464905]
[105.10255432 -28.41919136]
[90.74096680 -22.44402504]
[92.78347015 -7.58373594]
[94.82596588 7.27655315]
[96.86846924 22.13684273]
[98.91096497 36.99713135]
[100.95346832 51.85742188]
[102.99596405 66.71771240]
[105.03846741 81.57799530]
[116.52007294 90.41649628]
[118.49305725 104.77105713]
[109.82182312 116.37950134]
[111.86431885 131.23979187]
[128.45187378 142.21070862]
[131.90745544 161.49453735]
[120.51161194 177.06423950]
[124.06307983 191.63775635]
[127.61454010 206.21125793]
[131.16601562 220.78475952]
[134.71748352 235.35827637]
[149.48101807 239.59304810]
[160.13768005 250.65339661]
[163.82087708 265.56411743]
[159.53984070 280.31430054]
[148.44615173 290.93624878]
[133.52395630 294.57269287]
[118.78725433 290.24545288]
[108.20014191 279.11853027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[12 76]
[13 75]
[16 72]
[17 71]
[18 70]
[19 69]
[20 68]
[21 67]
[22 66]
[23 65]
[35 54]
[36 53]
[37 52]
[38 51]
[40 49]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
