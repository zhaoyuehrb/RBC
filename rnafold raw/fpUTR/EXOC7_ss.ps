%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACCAAGAGCGGAAGUGGGUGUGACGGGGACGGGGGCCCGGUGGGCCCGCGGAGGAAAGAUACUGGGGAGUGGGAGCCGCGGGGUUCAGAGCG\
) } def
/len { sequence length } bind def

/coor [
[119.99632263 338.59756470]
[130.99194336 327.64877319]
[128.54850769 312.84912109]
[126.10507202 298.04946899]
[123.66164398 283.24981689]
[121.21820831 268.45016479]
[110.52861786 263.85464478]
[103.38285828 254.51879883]
[101.70410156 242.76023865]
[106.03936005 231.57186890]
[115.38954163 223.86021423]
[113.91928864 208.93243408]
[112.44902802 194.00466919]
[110.97877502 179.07688904]
[91.51204681 170.37255859]
[80.67966461 151.86322021]
[82.64682770 130.38499451]
[96.82070923 113.96665955]
[86.43622589 104.60427856]
[88.97533417 90.85493469]
[84.15374756 76.65098572]
[79.33215332 62.44702911]
[74.51055908 48.24308014]
[69.68897247 34.03912735]
[54.57492828 34.19144821]
[40.17330933 29.67084122]
[27.89074135 20.93202782]
[18.92279816 8.84107780]
[14.13763142 -5.41040516]
[13.99193764 -20.42272377]
[18.48740196 -34.72555161]
[27.17176437 -46.92194366]
[39.18428802 -55.82476807]
[34.36269760 -70.02871704]
[22.60009384 -80.60944366]
[25.83572769 -95.14835358]
[21.01413727 -109.35231018]
[16.19254494 -123.55625916]
[11.37095261 -137.76020813]
[6.54936075 -151.96415710]
[1.72776866 -166.16812134]
[-9.08901501 -179.22312927]
[0.46142590 -193.23118591]
[16.56585884 -187.93179321]
[15.93172073 -170.98970032]
[20.75331306 -156.78575134]
[25.57490540 -142.58180237]
[30.39649582 -128.37785339]
[35.21809006 -114.17389679]
[40.03968048 -99.96994781]
[51.45740891 -90.40518188]
[48.56664658 -74.85031128]
[53.38824081 -60.64635849]
[68.33811188 -60.89603806]
[82.65257263 -56.50669479]
[94.92607117 -47.89616013]
[103.94940948 -35.89739609]
[108.82883453 -21.67790794]
[109.07458496 -6.62617540]
[104.65002441 7.78394604]
[95.97642517 20.13753510]
[83.89292145 29.21753502]
[88.71451569 43.42148590]
[93.53610229 57.62543869]
[98.35769653 71.82939148]
[103.17929077 86.03334045]
[113.56377411 95.39572144]
[111.02466583 109.14506531]
[120.50426483 109.39408112]
[129.56263733 112.13341522]
[137.55888367 117.15856934]
[143.93006897 124.10369873]
[148.23088074 132.46821594]
[150.16470337 141.65292358]
[149.60411072 151.00283813]
[146.59913635 159.85401917]
[141.37309265 167.58058167]
[134.30589294 173.63908386]
[125.90653992 177.60664368]
[127.37680054 192.53440857]
[128.84706116 207.46217346]
[130.31732178 222.38995361]
[145.36248779 233.64633179]
[147.56756592 251.99024963]
[136.01785278 266.00671387]
[138.46128845 280.80636597]
[140.90472412 295.60601807]
[143.34815979 310.40567017]
[145.79158020 325.20532227]
[159.72303772 332.03863525]
[166.94752502 345.77133179]
[164.68707275 361.12286377]
[153.81088257 372.19030762]
[138.50105286 374.71795654]
[124.64455414 367.73391724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[11 82]
[12 81]
[13 80]
[14 79]
[18 68]
[20 66]
[21 65]
[22 64]
[23 63]
[24 62]
[33 53]
[34 52]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
