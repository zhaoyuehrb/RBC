%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGACAGCGCGCGGCAGGCGGCGAGCUCGGGGGCCGCAGAAAAUGAAACUGAAGCCGUGGUCACGUGACAGGACAUGUAGUAUAUAGCAGGCUGCCAGCGACUCCUGCUCUUGCUUCUGGAUCUGCAGGGCAGUCCCAGCAGGACCC\
) } def
/len { sequence length } bind def

/coor [
[353.14340210 448.19485474]
[344.37719727 436.02304077]
[335.61099243 423.85119629]
[326.84478760 411.67935181]
[318.07858276 399.50750732]
[309.31237793 387.33569336]
[300.54617310 375.16384888]
[286.82968140 369.35800171]
[285.04315186 353.63800049]
[276.27694702 341.46615601]
[267.51074219 329.29431152]
[258.74453735 317.12249756]
[240.59150696 310.57290649]
[238.70742798 290.54547119]
[223.93467712 289.02838135]
[214.37066650 277.19689941]
[216.06207275 261.71215820]
[206.79713440 249.91552734]
[192.85101318 244.68530273]
[190.41209412 229.05320740]
[181.14715576 217.25657654]
[171.88220215 205.45993042]
[162.61724854 193.66329956]
[153.35231018 181.86665344]
[144.08735657 170.07000732]
[129.31460571 168.55293274]
[119.75057983 156.72145081]
[121.44200134 141.23670959]
[112.17705536 129.44007874]
[102.91210175 117.64343262]
[61.73817444 120.37203217]
[46.04258728 122.36177826]
[37.15155792 110.41193390]
[21.45597076 112.40168762]
[12.56493855 100.45184326]
[-1.33761752 94.81988525]
[-15.24017334 89.18792725]
[-29.64927673 95.10531616]
[-43.66821671 89.19566345]
[-49.22074509 75.42232513]
[-63.12330246 69.79036713]
[-77.02585602 64.15840912]
[-89.56960297 73.13938904]
[-104.97868347 73.89019012]
[-118.33612061 66.17123413]
[-125.37960815 52.44560623]
[-123.86159515 37.09310913]
[-114.26646423 25.01266670]
[-99.65599823 20.05910683]
[-84.69233704 23.81308937]
[-74.15032959 35.07673264]
[-71.39389801 50.25585175]
[-57.49134445 55.88780975]
[-43.58878708 61.51976776]
[-30.01569748 55.49425507]
[-15.83629990 61.00781250]
[-9.60821724 75.28536987]
[4.29433918 80.91732788]
[18.19689560 86.54928589]
[32.89807892 84.15670013]
[42.78351212 96.50937653]
[57.48469543 94.11679077]
[67.37013245 106.46947479]
[73.41012573 102.02330017]
[85.49011230 93.13095093]
[91.53010559 88.68477631]
[90.28323364 73.73668671]
[89.03636169 58.78860092]
[87.78948212 43.84051514]
[86.54261017 28.89242744]
[74.31665802 18.87735748]
[72.83648682 3.14253521]
[82.98025513 -8.97684956]
[98.72985077 -10.29058075]
[110.74131012 -0.01924445]
[111.88845062 15.74335670]
[101.49069977 27.64555168]
[102.73757172 42.59363937]
[103.98444366 57.54172516]
[105.23132324 72.48981476]
[106.47819519 87.43789673]
[113.15685272 74.00675964]
[126.65964508 67.47417450]
[141.33586121 70.57392120]
[151.04376221 82.00881195]
[151.72073364 96.99353027]
[143.08348083 109.25720978]
[128.74655151 113.66770172]
[114.70874023 108.37848663]
[123.97369385 120.17512512]
[133.23864746 131.97177124]
[148.68310547 133.99816895]
[157.91104126 146.09361267]
[155.88398743 160.80506897]
[165.14894104 172.60169983]
[174.41389465 184.39834595]
[183.67884827 196.19499207]
[192.94378662 207.99162292]
[202.20874023 219.78826904]
[216.81753540 225.86225891]
[218.59376526 240.65057373]
[227.85871887 252.44721985]
[243.30317688 254.47361755]
[252.53111267 266.56906128]
[250.50407410 281.28051758]
[261.44107056 281.96398926]
[269.99856567 288.45037842]
[273.46630859 298.37982178]
[270.91638184 308.35629272]
[279.68258667 320.52810669]
[288.44879150 332.69995117]
[297.21499634 344.87179565]
[311.55847168 351.54824829]
[312.71798706 366.39764404]
[321.48419189 378.56948853]
[330.25042725 390.74130249]
[339.01663208 402.91314697]
[347.78283691 415.08499146]
[356.54904175 427.25683594]
[365.31524658 439.42864990]
[382.26019287 446.55947876]
[383.41079712 464.04306030]
[392.42834473 476.02990723]
[406.90762329 482.40649414]
[408.37579346 497.22857666]
[417.39334106 509.21542358]
[426.41085815 521.20227051]
[435.42837524 533.18908691]
[444.44592285 545.17590332]
[458.92520142 551.55249023]
[460.39340210 566.37457275]
[469.41091919 578.36138916]
[478.42843628 590.34826660]
[493.72235107 596.26672363]
[495.97607422 612.51025391]
[482.87112427 622.36889648]
[467.88882446 615.70092773]
[466.44161987 599.36578369]
[457.42407227 587.37896729]
[448.40655518 575.39208984]
[434.57226562 569.87286377]
[432.45907593 554.19342041]
[423.44155884 542.20660400]
[414.42404175 530.21978760]
[405.40649414 518.23291016]
[396.38897705 506.24609375]
[382.55468750 500.72689819]
[380.44149780 485.04742432]
[371.42398071 473.06060791]
[359.45639038 471.03955078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[3 118]
[4 117]
[5 116]
[6 115]
[7 114]
[9 112]
[10 111]
[11 110]
[12 109]
[14 105]
[17 102]
[18 101]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[28 91]
[29 90]
[30 89]
[31 63]
[33 61]
[35 59]
[36 58]
[37 57]
[40 54]
[41 53]
[42 52]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[122 149]
[123 148]
[125 146]
[126 145]
[127 144]
[128 143]
[129 142]
[131 140]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
