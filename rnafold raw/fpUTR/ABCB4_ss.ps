%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGUCCAGGCCCCUCUGCUGCAGCGCCCGCGCGUCCAGAGGCCCUGCCAGACACGCGCGAGGUUCGAGGCUGAG\
) } def
/len { sequence length } bind def

/coor [
[42.50334930 247.79377747]
[40.87062073 262.88345337]
[33.89365005 276.36257935]
[22.51601219 286.40814209]
[8.27644253 291.66165161]
[-6.89927387 291.41253662]
[-20.95874786 285.69451904]
[-32.00054932 275.28091431]
[-38.53136444 261.58007812]
[-39.66795731 246.44494629]
[-35.25661087 231.92239380]
[-25.89392662 219.97648621]
[-12.84612465 212.22282410]
[2.12218237 209.71002197]
[16.98665428 212.77789307]
[25.09626770 200.15908813]
[33.20587921 187.54028320]
[33.57773209 172.65032959]
[47.54769897 165.22398376]
[55.65731049 152.60517883]
[63.76692200 139.98637390]
[59.27372742 127.73564148]
[62.79502106 114.96723938]
[73.23749542 106.50405884]
[86.85027313 105.67980194]
[88.27583313 91.77082825]
[100.87220001 85.70263672]
[109.48976898 73.42510986]
[118.10733795 61.14759064]
[126.47266388 48.69683838]
[134.58227539 36.07803345]
[142.69189453 23.45923233]
[150.80149841 10.84042835]
[158.91111755 -1.77837455]
[167.02072144 -14.39717770]
[175.13034058 -27.01597977]
[168.02897644 -39.24452591]
[166.95654297 -53.27783203]
[172.06855774 -66.31919861]
[182.29383850 -75.79488373]
[195.55834961 -79.86202240]
[209.20574951 -77.76681519]
[217.82331848 -90.04433441]
[226.44088745 -102.32186127]
[230.59159851 -118.75985718]
[247.53622437 -119.32185364]
[252.76699829 -103.19499969]
[238.71841431 -93.70429230]
[230.10084534 -81.42677307]
[221.48327637 -69.14924622]
[228.63554382 -54.80612183]
[227.65390015 -38.71564484]
[218.70857239 -25.19336319]
[204.11811829 -17.91250420]
[187.74914551 -18.90636826]
[179.63952637 -6.28756523]
[171.52992249 6.33123779]
[163.42030334 18.95004082]
[155.31069946 31.56884384]
[147.20108032 44.18764496]
[139.09147644 56.80644989]
[138.09765625 64.34739685]
[130.38485718 69.76515961]
[121.76729584 82.04267883]
[113.14972687 94.32019806]
[111.72416687 108.22917175]
[99.12779999 114.29736328]
[102.51206207 131.32070923]
[92.84367371 145.33102417]
[76.38572693 148.09599304]
[68.27611542 160.71479797]
[60.16650009 173.33360291]
[59.21459579 189.12614441]
[45.82468414 195.64990234]
[37.71506882 208.26870728]
[29.60545731 220.88751221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 76]
[16 75]
[17 74]
[19 72]
[20 71]
[21 70]
[25 67]
[27 65]
[28 64]
[29 63]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[42 50]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
