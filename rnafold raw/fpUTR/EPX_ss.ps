%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGAGCUGGAGGAAGUGAGAGGUCGGCUGGGGGUCCUCAAAGUGAGAGGGGAGCAGAGGAUCCUCCCGUGCAGGCUGUGGAUGUCACUCACUUCCCAGCUGGUGAAGCCUCGCUGCAGAG\
) } def
/len { sequence length } bind def

/coor [
[139.13365173 441.73364258]
[140.55931091 426.80154419]
[147.81523132 413.67327881]
[159.70027161 404.52200317]
[174.24705505 400.86264038]
[189.04756165 403.30090332]
[201.65269470 411.43408203]
[196.44311523 397.36779785]
[191.23353577 383.30151367]
[186.02395630 369.23522949]
[180.81439209 355.16897583]
[175.60481262 341.10269165]
[171.61412048 338.29342651]
[169.41186523 332.89794922]
[170.50743103 326.18981934]
[166.01698303 311.87771606]
[161.52653503 297.56564331]
[157.03608704 283.25354004]
[152.54563904 268.94143677]
[148.05519104 254.62936401]
[143.56474304 240.31727600]
[138.71318054 226.12353516]
[133.50360107 212.05725098]
[121.82768250 202.80943298]
[124.29048157 187.18107605]
[119.08090210 173.11480713]
[113.87132263 159.04852295]
[102.19540405 149.80070496]
[104.65820312 134.17234802]
[99.44862366 120.10607147]
[77.57801056 109.23106384]
[79.47231293 80.40010071]
[70.90328979 68.08865356]
[62.33427048 55.77719879]
[53.76524734 43.46574783]
[45.19622421 31.15429688]
[36.62720108 18.84284401]
[28.05817795 6.53139305]
[19.48915291 -5.78005838]
[10.92013073 -18.09151077]
[2.35110736 -30.40296173]
[-8.58944511 -31.72885323]
[-16.78387260 -38.76321793]
[-19.63232231 -48.95107269]
[-16.41161919 -58.79515457]
[-24.34608078 -71.52481842]
[-39.77304840 -71.63518524]
[-52.67886734 -80.08760834]
[-58.94533539 -94.18494415]
[-56.57284546 -109.42878723]
[-46.31845093 -120.95488739]
[-31.45429230 -125.08530426]
[-16.72346878 -120.50202942]
[-6.82653046 -108.66758728]
[-4.92155600 -93.35828400]
[-11.61641598 -79.45928192]
[-3.68195581 -66.72961426]
[13.98755455 -59.04329681]
[14.66255856 -38.97198486]
[23.23158264 -26.66053391]
[31.80060577 -14.34908199]
[40.36962891 -2.03762984]
[48.93865204 10.27382183]
[57.50767517 22.58527374]
[66.07669830 34.89672470]
[74.64572144 47.20817566]
[83.21474457 59.51962662]
[91.78376770 71.83107758]
[106.77895355 71.45108795]
[114.71341705 58.72142410]
[112.50215912 42.83149338]
[123.65077972 31.29512024]
[139.60699463 32.96202087]
[148.13056946 46.55349731]
[142.68295288 61.64332581]
[127.44307709 66.65588379]
[119.50862122 79.38555145]
[124.73826599 93.31375885]
[121.94719696 106.43017578]
[113.51490021 114.89649200]
[118.72447968 128.96276855]
[130.77302551 139.21670532]
[127.93760681 153.83894348]
[133.14718628 167.90522766]
[138.35676575 181.97151184]
[150.40530396 192.22543335]
[147.56988525 206.84767151]
[152.77946472 220.91395569]
[157.75190735 225.54798889]
[159.31301880 231.16262817]
[157.87683105 235.82682800]
[162.36727905 250.13891602]
[166.85772705 264.45101929]
[171.34817505 278.76309204]
[175.83862305 293.07519531]
[180.32907104 307.38726807]
[184.81951904 321.69937134]
[189.67108154 335.89309692]
[194.88066101 349.95938110]
[200.09024048 364.02566528]
[205.29981995 378.09194946]
[210.50939941 392.15823364]
[215.71897888 406.22451782]
[223.16406250 419.24642944]
[232.64318848 430.87167358]
[242.12232971 442.49691772]
[251.60145569 454.12216187]
[261.08059692 465.74737549]
[276.59411621 471.06359863]
[279.48095703 487.20663452]
[266.77136230 497.56994629]
[251.53988647 491.49264526]
[249.45535278 475.22650146]
[239.97621155 463.60128784]
[230.49708557 451.97604370]
[221.01795959 440.35079956]
[211.53883362 428.72558594]
[212.15347290 443.71298218]
[206.74694824 457.70474243]
[196.21426392 468.38473511]
[182.29891968 473.98504639]
[167.30442810 473.57858276]
[153.71290588 467.23266602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 103]
[8 102]
[9 101]
[10 100]
[11 99]
[12 98]
[15 97]
[16 96]
[17 95]
[18 94]
[19 93]
[20 92]
[21 91]
[22 88]
[23 87]
[25 85]
[26 84]
[27 83]
[29 81]
[30 80]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[45 57]
[46 56]
[69 77]
[70 76]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
