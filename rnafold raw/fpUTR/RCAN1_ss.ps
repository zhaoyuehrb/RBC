%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGCCGCCGCGCGAUUCCGAGGGGGUUAACGGCGGAGCCGCCGGCCGGGCGCGGACCGGAGCGCGUGAGGCUCCGGCGCGCAAGCCCGGAGCAGCCCGCUGGGGCGCACAGGGUCGCGCGGGCGCGGGG\
) } def
/len { sequence length } bind def

/coor [
[80.70712280 484.49310303]
[86.75346375 468.65396118]
[86.75346375 453.65396118]
[86.75346375 438.65396118]
[86.75346375 423.65396118]
[86.75346375 408.65396118]
[76.07259369 398.33627319]
[75.85890961 383.12414551]
[86.75346375 371.99102783]
[86.75346375 356.99102783]
[86.75346375 341.99102783]
[86.75346375 326.99102783]
[86.75346375 311.99102783]
[86.75346375 296.99102783]
[86.75346375 281.99102783]
[86.75346375 266.99102783]
[86.75346375 251.99102783]
[83.57667542 245.23652649]
[86.93620300 236.63511658]
[87.29317474 221.63937378]
[75.93638611 214.51881409]
[69.55164337 202.60931396]
[69.91313934 188.99253845]
[77.03336334 177.25291443]
[89.13154602 170.53402710]
[82.00859833 157.45300293]
[90.39377594 144.03662109]
[91.10749817 129.05361938]
[91.82122803 114.07060242]
[84.49299622 104.94034576]
[85.18917847 93.25361633]
[93.54952240 85.05792999]
[94.61960602 70.09614563]
[95.68969727 55.13436890]
[96.75978088 40.17258453]
[97.82987213 25.21080399]
[98.89995575 10.24902248]
[96.37325287 1.36721575]
[100.17771149 -5.05471945]
[101.60355377 -19.98679733]
[95.21308136 -34.45996094]
[104.12514496 -46.39412308]
[105.55098724 -61.32620239]
[98.07662964 -69.39608765]
[96.36773682 -80.03845978]
[100.75656891 -89.64091492]
[109.54673004 -95.08045197]
[111.68144989 -109.92777252]
[113.81617737 -124.77509308]
[115.95089722 -139.62242126]
[118.08562469 -154.46974182]
[120.22034454 -169.31706238]
[122.00112915 -184.21098328]
[123.42697144 -199.14305115]
[124.85281372 -214.07513428]
[115.06585693 -226.19345093]
[116.72457886 -241.31639099]
[128.33784485 -250.57206726]
[129.76368713 -265.50415039]
[131.18952942 -280.43621826]
[132.61537170 -295.36828613]
[134.04121399 -310.30038452]
[135.46704102 -325.23245239]
[136.89288330 -340.16455078]
[125.79530334 -351.18170166]
[124.42723846 -366.75930786]
[133.43464661 -379.54214478]
[148.56451416 -383.49450684]
[162.67297363 -376.75021362]
[169.09844971 -362.49374390]
[164.80702209 -347.45651245]
[151.82496643 -338.73870850]
[150.39912415 -323.80661011]
[148.97328186 -308.87454224]
[147.54743958 -293.94247437]
[146.12161255 -279.01037598]
[144.69577026 -264.07830811]
[143.26992798 -249.14622498]
[152.92167664 -237.85998535]
[151.68838501 -222.69641113]
[139.78489685 -212.64929199]
[138.35905457 -197.71722412]
[136.93321228 -182.78514099]
[139.29383850 -178.53140259]
[138.93850708 -172.73605347]
[135.06767273 -167.18234253]
[132.93293762 -152.33502197]
[130.79821777 -137.48770142]
[128.66349792 -122.64037323]
[126.52877808 -107.79305267]
[124.39405060 -92.94573212]
[132.94219971 -75.66544342]
[120.48307037 -59.90036392]
[119.05722809 -44.96828461]
[125.54969025 -31.56316376]
[116.53563690 -18.56095695]
[115.10979462 -3.62887859]
[113.86174011 11.31910992]
[112.79164886 26.28089142]
[111.72156525 41.24267197]
[110.65147400 56.20445633]
[109.58139038 71.16623688]
[108.51129913 86.12802124]
[116.24615479 100.96778870]
[106.80423737 114.78433228]
[106.09051514 129.76733398]
[105.37678528 144.75035095]
[112.44867706 158.90304565]
[104.11455536 171.24774170]
[117.42825317 181.60476685]
[121.93552399 197.68731689]
[116.06107330 213.14537048]
[102.28892517 221.99633789]
[101.93196106 236.99208069]
[101.75346375 251.99102783]
[101.75346375 266.99102783]
[101.75346375 281.99102783]
[101.75346375 296.99102783]
[101.75346375 311.99102783]
[101.75346375 326.99102783]
[101.75346375 341.99102783]
[101.75346375 356.99102783]
[101.75346375 371.99102783]
[112.64801788 383.12414551]
[112.43433380 398.33627319]
[101.75346375 408.65396118]
[101.75346375 423.65396118]
[101.75346375 438.65396118]
[101.75346375 453.65396118]
[101.75346375 468.65396118]
[107.79980469 484.49310303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 130]
[3 129]
[4 128]
[5 127]
[6 126]
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[15 117]
[16 116]
[17 115]
[19 114]
[20 113]
[25 109]
[27 107]
[28 106]
[29 105]
[32 103]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[39 97]
[40 96]
[42 94]
[43 93]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[53 83]
[54 82]
[55 81]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
