%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGGCGGGGCCUGCCCGGCUGGCCUGGACGAACGGGAAGCCGGGAGCUCGGCCACGGGUGGCGAGGCUGCGGUGAGGCCUGGUCUCCGGCUGCCAGACC\
) } def
/len { sequence length } bind def

/coor [
[147.45256042 299.52255249]
[158.78805542 289.39462280]
[153.80273438 275.24731445]
[148.81741333 261.10000610]
[143.83209229 246.95268250]
[138.84677124 232.80535889]
[133.86145020 218.65805054]
[122.33400726 209.22579956]
[125.04492188 193.63856506]
[120.05960083 179.49125671]
[115.07427979 165.34393311]
[110.08895111 151.19662476]
[105.10363007 137.04930115]
[100.11830902 122.90198517]
[77.57855988 112.84963989]
[75.24147797 85.32149506]
[61.09416199 80.33616638]
[46.94684601 75.35084534]
[32.79952621 70.36552429]
[18.65221214 65.38020325]
[4.50489473 60.39488220]
[-9.64242172 55.40956116]
[-21.70524406 60.28693390]
[-33.45528412 55.71445084]
[-38.70084763 44.69395447]
[-52.68793106 39.27532959]
[-66.67501068 33.85670471]
[-80.66209412 28.43807793]
[-95.01670837 35.05023575]
[-109.81330872 29.49719810]
[-116.27333069 15.07347965]
[-110.56416321 0.33641908]
[-96.07295227 -5.97074747]
[-81.39707184 -0.10608967]
[-75.24346924 14.45099449]
[-61.25638962 19.86961937]
[-47.26930618 25.28824425]
[-33.28222275 30.70686913]
[-16.20123482 27.02014160]
[-4.65709972 41.26224136]
[9.49021721 46.24756622]
[23.63753319 51.23288727]
[37.78485107 56.21820831]
[51.93216705 61.20352936]
[66.07948303 66.18885040]
[80.22679901 71.17417145]
[94.12878418 65.54080200]
[100.81485748 52.11334991]
[107.50093079 38.68590164]
[114.18700409 25.25845146]
[109.39706421 10.43636703]
[116.36897278 -3.08573008]
[130.52908325 -7.56086540]
[137.21516418 -20.98831558]
[143.90122986 -34.41576385]
[150.58731079 -47.84321213]
[149.03825378 -64.16903687]
[162.55731201 -73.45167542]
[177.23721313 -66.14194489]
[177.97656250 -49.75947189]
[164.01475525 -41.15713882]
[157.32868958 -27.72968864]
[150.64260864 -14.30223942]
[143.95652771 -0.87479007]
[148.91867065 13.12209415]
[142.32931519 26.83468246]
[127.61445618 31.94452667]
[120.92838287 45.37197876]
[114.24230194 58.79942703]
[107.55622864 72.22687531]
[115.32324982 76.63359833]
[121.14935303 83.05142212]
[124.57168579 90.72896576]
[125.39556885 98.83093262]
[123.69974518 106.52815247]
[119.81294250 113.08229828]
[114.26562500 117.91666412]
[119.25094604 132.06398010]
[124.23627472 146.21130371]
[129.22158813 160.35861206]
[134.20690918 174.50593567]
[139.19223022 188.65324402]
[151.07626343 199.09741211]
[148.00875854 213.67272949]
[152.99407959 227.82003784]
[157.97940063 241.96736145]
[162.96472168 256.11468506]
[167.95004272 270.26199341]
[172.93536377 284.40930176]
[188.11607361 285.19329834]
[201.83905029 291.73150635]
[212.01164246 303.02694702]
[217.08259583 317.35711670]
[216.27864075 332.53677368]
[209.72236633 346.25115967]
[198.41355896 356.40887451]
[184.07673645 361.46096802]
[168.89814758 360.63705444]
[155.19241333 354.06274414]
[145.04957581 342.74057007]
[140.01634216 328.39712524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[9 82]
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[25 38]
[26 37]
[27 36]
[28 35]
[47 70]
[48 69]
[49 68]
[50 67]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
