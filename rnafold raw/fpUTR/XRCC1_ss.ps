%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCGCGCUUGCGCACUUUAGCCAGCGCAGGGCGCACCCCGCCCCCUCCCACUCUCCCUGCCCCUCGGACCCCAUACUCUACCUCAUCCUUCUGGCCAGGCGAAGCCCACGACGUUGAC\
) } def
/len { sequence length } bind def

/coor [
[106.89839172 167.43531799]
[118.44540405 157.66180420]
[112.75016022 143.78504944]
[107.05490875 129.90829468]
[101.35966492 116.03154755]
[86.86241150 112.18062592]
[75.03160095 121.40190125]
[63.20079422 130.62316895]
[51.36998367 139.84445190]
[39.53917313 149.06573486]
[33.41121292 163.65197754]
[18.61643028 165.37351990]
[6.78562021 174.59480286]
[7.44383192 190.09790039]
[-1.16419363 203.00842285]
[-15.72849560 208.36199951]
[-30.64880180 204.10006714]
[-40.18795013 191.86141968]
[-40.67794418 176.35209656]
[-31.93037224 163.53570557]
[-17.30885124 158.34045410]
[-2.43565607 162.76399231]
[9.39515400 153.54270935]
[14.67689705 139.61602783]
[30.31789780 137.23492432]
[42.14870834 128.01364136]
[53.97951889 118.79236603]
[65.81032562 109.57109070]
[77.64113617 100.34981537]
[80.36102295 99.76522064]
[83.09407806 99.33098602]
[69.29242706 93.45607758]
[55.49077988 87.58117676]
[41.68912888 81.70626831]
[27.88748169 75.83135986]
[12.52916050 80.46833801]
[-0.58951598 71.23362732]
[-1.40502167 55.21131134]
[10.70823002 44.69234467]
[26.45798874 47.74597168]
[33.76238632 62.02971649]
[47.56403732 67.90461731]
[61.36568451 73.77952576]
[75.16733551 79.65443420]
[88.96897888 85.52933502]
[75.26103210 79.43900299]
[65.06188202 68.44003296]
[60.02180481 54.31212997]
[60.95632553 39.34127045]
[67.71422577 25.94982529]
[79.20203400 16.30461121]
[93.56096649 11.96627903]
[108.46765137 13.63679886]
[121.51010895 21.04586983]
[130.57798767 32.99465942]
[134.20405579 47.54978561]
[131.80158997 62.35614014]
[123.75931549 75.01796722]
[111.37614441 83.48751831]
[123.88861084 75.21477509]
[136.40107727 66.94203949]
[148.80509949 58.50756836]
[161.09857178 49.91278458]
[159.87881470 34.66616440]
[166.41122437 20.94667625]
[178.85104370 12.39580536]
[193.80065918 11.22748280]
[207.23733521 17.65564537]
[219.53082275 9.06086254]
[231.82429504 0.46608034]
[227.62736511 -14.08261204]
[228.38427734 -29.20563507]
[234.01292419 -43.26255417]
[243.90275574 -54.72858429]
[256.98101807 -62.35997009]
[271.82904053 -65.32892609]
[286.83624268 -63.31338882]
[300.37475586 -56.53199768]
[310.97604370 -45.72034454]
[317.49011230 -32.05119705]
[319.21038818 -17.00728226]
[315.95028687 -2.22045231]
[308.06338501 10.70532990]
[296.40527344 20.36797142]
[282.24044800 25.71934128]
[267.10549927 26.17896271]
[252.64205933 21.69697952]
[240.41908264 12.75956249]
[228.12559509 21.35434532]
[215.83212280 29.94912720]
[217.25561523 44.77610397]
[211.02499390 58.41558456]
[198.72251892 67.16287994]
[183.59411621 68.58718109]
[169.69335938 62.20626831]
[157.39987183 70.80104828]
[153.67590332 77.29069519]
[144.67381287 79.45450592]
[132.16134644 87.72724152]
[119.64888000 95.99998474]
[115.23641968 110.33630371]
[120.93166351 124.21305847]
[126.62690735 138.08979797]
[132.32215881 151.96655273]
[147.40586853 150.81037903]
[162.10812378 154.37390137]
[174.98857117 162.30798340]
[184.78527832 173.83532715]
[190.53848267 187.82659912]
[191.68453979 202.91108704]
[188.11117554 217.61096191]
[180.16847229 230.48606873]
[168.63456726 240.27505493]
[154.63943481 246.01889038]
[139.55418396 247.15484619]
[124.85671234 243.57162476]
[111.98692322 235.62028503]
[102.20566559 224.07983398]
[96.47121429 210.08085632]
[95.34537506 194.99484253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[12 23]
[13 22]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[59 100]
[60 99]
[61 98]
[62 96]
[63 95]
[68 90]
[69 89]
[70 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
