%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUGGACCAGAAGCCAAUGAAGAAUUACGUGGAGGAGAAGCGGCGAUAAUCUGUUUGAGGAUGUAGGCACUGGUGUGAAGGAAC\
) } def
/len { sequence length } bind def

/coor [
[90.07030487 378.34808350]
[83.66210938 364.44866943]
[84.45890045 349.16394043]
[92.27757263 336.00616455]
[105.32145691 327.99893188]
[104.25136566 313.03713989]
[103.18128204 298.07534790]
[94.55574036 285.93249512]
[101.28883362 271.61550903]
[100.21875000 256.65371704]
[99.14865875 241.69194031]
[98.07857513 226.73016357]
[97.00848389 211.76838684]
[87.99737549 203.48693848]
[87.10860443 190.87576294]
[95.38053131 180.78703308]
[94.84514618 165.79660034]
[94.30976105 150.80615234]
[84.47365570 148.70910645]
[75.23841095 144.72703552]
[66.96142578 139.01405334]
[59.96301270 131.79125977]
[54.51401520 123.33814240]
[50.82529831 113.98186493]
[49.03961563 104.08449554]
[49.22607040 94.02905273]
[51.37745285 84.20468903]
[55.41049957 74.99159241]
[61.16913986 66.74630737]
[68.43051147 59.78792191]
[76.91360474 54.38572311]
[72.17661285 40.15333176]
[67.43961334 25.92094421]
[55.74017715 15.27041912]
[59.06225967 0.75101781]
[44.23064423 -3.80998683]
[34.93944931 -16.23791122]
[34.76132584 -31.75396347]
[43.76477051 -44.39190674]
[58.48777390 -49.29219437]
[73.26904297 -44.57056046]
[82.42487335 -32.04257584]
[82.43466187 -16.52550507]
[73.29464722 -3.98597598]
[84.65526581 5.64655304]
[81.67200470 21.18395042]
[86.40899658 35.41633987]
[91.14599609 49.64872742]
[104.66962433 49.08989716]
[117.86594391 52.09955978]
[129.80996704 58.46675873]
[139.66448975 67.74518585]
[152.56469727 60.09113693]
[165.46490479 52.43708801]
[178.36512756 44.78303909]
[182.03028870 29.40961456]
[195.53617859 21.20190811]
[210.86999512 25.02940559]
[218.93444824 38.62131882]
[214.94505310 53.91380692]
[201.26863098 61.83411026]
[186.01918030 57.68325043]
[173.11895752 65.33730316]
[160.21875000 72.99134827]
[147.31852722 80.64540100]
[151.04434204 102.84954834]
[144.87030029 124.50103760]
[129.99383545 141.40065002]
[109.30020905 150.27076721]
[109.83559418 165.26121521]
[110.37097931 180.25164795]
[120.52310944 195.48690796]
[111.97026825 210.69828796]
[113.04035187 225.66007996]
[114.11044312 240.62185669]
[115.18052673 255.58363342]
[116.25061798 270.54541016]
[124.95269775 283.75845337]
[118.14305878 297.00527954]
[119.21315002 311.96707153]
[120.28324127 326.92883301]
[134.33389282 332.99822998]
[143.94554138 344.90936279]
[146.90946960 359.92514038]
[142.54458618 374.59506226]
[131.85394287 385.54806519]
[117.29413605 390.26724243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 81]
[6 80]
[7 79]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[16 71]
[17 70]
[18 69]
[31 48]
[32 47]
[33 46]
[35 44]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
