%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUGAGCCUAGGAGGUGGAGGCUGCAGUGAUCUGUGAUUGUACCUUUGCACUCCAGCCUGGGUGACAGAGCAUGACGCUGUCUCUAAAAGAAUAAUAAUAAUAAGCAUUCCAUAAAAAUUAUGGAAUGGAGAAAUC\
) } def
/len { sequence length } bind def

/coor [
[86.26714325 168.14306641]
[84.90312195 153.20521545]
[83.53910065 138.26736450]
[82.17507172 123.32951355]
[80.51099396 115.23731995]
[81.54010773 107.99643707]
[84.68709564 102.37677002]
[69.70263672 101.69405365]
[54.71818542 101.01132965]
[39.73373032 100.32861328]
[24.74927521 99.64589691]
[9.74927425 99.64589691]
[-5.23518085 100.32861328]
[-20.21963501 101.01132965]
[-35.20409012 101.69405365]
[-50.17980576 102.54728699]
[-65.14483643 103.57092285]
[-80.10987091 104.59455872]
[-95.07489777 105.61819458]
[-110.03993225 106.64183044]
[-125.00495911 107.66546631]
[-139.97000122 108.68910217]
[-148.40235901 112.42430115]
[-155.28662109 109.56175995]
[-170.27107239 110.24447632]
[-185.25553894 110.92720032]
[-200.23999023 111.60991669]
[-215.22444153 112.29263306]
[-230.20889282 112.97535706]
[-238.63603210 126.00466919]
[-253.12425232 131.56085205]
[-268.10253906 127.50742340]
[-277.81146240 115.40301514]
[-278.51770020 99.90202332]
[-269.94973755 86.96488953]
[-255.40209961 81.56620789]
[-240.46864319 85.78188324]
[-230.89161682 97.99089813]
[-215.90716553 97.30818176]
[-200.92271423 96.62545776]
[-185.93824768 95.94274139]
[-170.95379639 95.26002502]
[-155.96934509 94.57730103]
[-140.99363708 93.72406769]
[-126.02859497 92.70043182]
[-111.06356812 91.67679596]
[-96.09853363 90.65316010]
[-81.13350677 89.62952423]
[-66.16847229 88.60588837]
[-51.20344162 87.58225250]
[-44.68885422 83.95631409]
[-35.88681030 86.70959473]
[-20.90235519 86.02687836]
[-5.91789961 85.34416199]
[9.06655502 84.66143799]
[11.07600975 82.59076691]
[14.06176949 81.22730255]
[17.74502945 80.96054840]
[21.70653534 82.06664276]
[25.43199348 84.66143799]
[40.41644669 85.34416199]
[55.40090179 86.02687836]
[70.38536072 86.70959473]
[85.36981201 87.39231873]
[97.32189178 78.32877350]
[100.70724487 63.71578217]
[104.09260559 49.10279846]
[107.47795868 34.48981094]
[110.86331177 19.87682533]
[106.44020844 4.68647575]
[116.85030365 -5.96618652]
[109.61324310 -20.28416443]
[116.42597961 -34.80883789]
[132.06236267 -38.39812469]
[144.52749634 -28.29862595]
[144.25920105 -12.25781631]
[131.46328735 -2.58083105]
[136.12854004 11.56429958]
[125.47630310 23.26218033]
[122.09094238 37.87516785]
[118.70558929 52.48815155]
[115.32022858 67.10114288]
[111.93487549 81.71412659]
[121.91164398 70.51304626]
[131.88841248 59.31197357]
[135.81481934 44.83498383]
[143.41998291 31.90588379]
[154.16546631 21.44000626]
[167.29054260 14.17829323]
[181.86599731 10.63484764]
[196.85995483 11.06052876]
[211.21089172 15.42520237]
[223.90284729 23.41986465]
[234.03723145 34.47852707]
[240.89662170 47.81827545]
[243.99536133 62.49471283]
[243.11407471 77.46880341]
[238.31518555 91.68043518]
[229.93840027 104.12348938]
[218.57678223 113.91703796]
[205.03468323 120.36774445]
[190.27082825 123.01891327]
[175.33044434 121.68286133]
[161.27125549 116.45417023]
[149.08558655 107.70016479]
[134.27761841 105.30757904]
[119.46966553 102.91499329]
[131.31781006 112.11399841]
[143.16593933 121.31299591]
[155.01408386 130.51199341]
[166.86221313 139.71099854]
[178.71035767 148.91000366]
[190.55850220 158.10900879]
[202.40663147 167.30799866]
[214.25477600 176.50700378]
[226.10290527 185.70600891]
[242.32188416 190.64376831]
[242.06695557 207.59579468]
[225.70683289 212.04360962]
[216.90391541 197.55415344]
[205.05577087 188.35514832]
[193.20762634 179.15614319]
[181.35949707 169.95713806]
[169.51135254 160.75814819]
[157.66322327 151.55914307]
[145.81507874 142.36013794]
[133.96694946 133.16113281]
[122.11880493 123.96213531]
[110.27066803 114.76313782]
[97.11293030 121.96549225]
[98.47695160 136.90333557]
[99.84097290 151.84118652]
[101.20499420 166.77905273]
[112.56404877 178.10827637]
[110.64562225 194.03620911]
[96.92137146 202.34431458]
[81.91936493 196.65930176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[3 131]
[4 130]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 55]
[13 54]
[14 53]
[15 52]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[71 77]
[107 129]
[108 128]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
