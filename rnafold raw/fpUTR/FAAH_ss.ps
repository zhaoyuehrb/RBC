%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGGUUUUGCGGCGGAGCGGGCGGGCUGCGCGUGCGGCGGCUUCAACUGUCGCGGUAGGCAGCAGCAGGCUGAAGGGAUC\
) } def
/len { sequence length } bind def

/coor [
[53.14715958 207.51014709]
[43.26586914 218.79554749]
[33.38457489 230.08093262]
[23.50328445 241.36633301]
[28.52759743 255.88017273]
[25.60609818 270.95864868]
[15.52465630 282.54571533]
[0.99512839 287.52450562]
[-14.07411575 284.55575562]
[-25.62952423 274.43804932]
[-30.56274986 259.89297485]
[-27.54678154 244.83312988]
[-17.39289856 233.30949402]
[-2.83244395 228.42187500]
[12.21789265 231.48503113]
[22.09918404 220.19964600]
[31.98047447 208.91424561]
[41.86176682 197.62886047]
[42.02257538 173.16839600]
[64.42709351 161.89912415]
[70.49354553 148.18060303]
[76.55999756 134.46206665]
[74.63099670 119.69290161]
[87.28849792 110.20088959]
[83.73569489 98.94512177]
[88.71267700 88.24259186]
[99.60927582 83.70620728]
[106.19050598 70.22705841]
[112.77174377 56.74791718]
[119.35298157 43.26877213]
[125.93421936 29.78962708]
[132.25920105 16.18835258]
[138.32565308 2.46982002]
[136.83056641 -13.28058624]
[149.05413818 -21.79135513]
[155.12060547 -35.50988770]
[161.18705750 -49.22842407]
[159.69195557 -64.97882843]
[171.91554260 -73.48960114]
[177.98199463 -87.20812988]
[184.04844666 -100.92666626]
[190.11489868 -114.64519501]
[196.18135071 -128.36372375]
[189.12889099 -142.32069397]
[192.74806213 -157.53370667]
[205.33000183 -166.81964111]
[220.93391418 -165.79397583]
[232.19209290 -154.94099426]
[233.78878784 -139.38513184]
[224.97007751 -126.47141266]
[209.89988708 -122.29727936]
[203.83343506 -108.57874298]
[197.76698303 -94.86021423]
[191.70053101 -81.14167786]
[185.63407898 -67.42314911]
[187.56307983 -52.65398026]
[174.90557861 -43.16196823]
[168.83912659 -29.44343758]
[162.77267456 -15.72490311]
[164.70167542 -0.95573878]
[152.04417419 8.53627205]
[145.97772217 22.25480461]
[146.15753174 29.83406830]
[139.41336060 36.37086487]
[132.83212280 49.85000992]
[126.25089264 63.32915115]
[119.66965485 76.80829620]
[113.08841705 90.28743744]
[114.77867126 106.87249756]
[101.00702667 116.26734161]
[102.50212097 132.01774597]
[90.27853394 140.52851868]
[84.21208191 154.24705505]
[78.14562988 167.96557617]
[82.42581940 173.21890259]
[85.07343292 179.42054749]
[85.89878845 186.07966614]
[84.85566711 192.67469788]
[82.04348755 198.69412231]
[77.69815063 203.67622375]
[72.17232513 207.24447632]
[65.90690613 209.13594055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[20 74]
[21 73]
[22 72]
[24 70]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 62]
[33 61]
[35 59]
[36 58]
[37 57]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
