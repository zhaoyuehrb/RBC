%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAGUGAAGGUGCGCGCGUGGCGGAGGCUGGUUUUCCGUCUGGUGAGGGGUUACUUCCGGGUCGGACGGCGCUAGCUGCAGCAUCGGAGUGUGGCAGUGCUGGGCUGGCCGGCGGGCUGGGCUGCGGCCCGCGCGCGGCCGGCG\
) } def
/len { sequence length } bind def

/coor [
[190.18336487 196.52511597]
[187.86045837 193.16737366]
[186.65333557 188.82760620]
[175.54917908 178.74308777]
[164.44500732 168.65856934]
[153.34083557 158.57406616]
[142.23666382 148.48954773]
[131.13249207 138.40502930]
[116.31378174 139.37525940]
[104.90891266 129.30632019]
[103.99172211 113.75650787]
[90.37000275 110.60369873]
[85.92375946 97.34766388]
[74.81958771 87.26314545]
[63.71541977 77.17863464]
[52.61125183 67.09412384]
[41.50708008 57.00960922]
[23.45256042 53.55875778]
[18.68793106 36.70036316]
[7.37079287 26.85544777]
[-8.17927933 27.76814461]
[-19.51622200 17.62278175]
[-20.29051018 2.79254031]
[-31.60764694 -7.05237675]
[-46.64778519 -3.72063637]
[-60.60274124 -9.81264687]
[-68.20473480 -22.80008888]
[-66.71928406 -37.59642029]
[-78.03642273 -47.44133759]
[-89.35356140 -57.28625488]
[-100.67070007 -67.13117218]
[-111.98783875 -76.97608948]
[-123.30496979 -86.82100677]
[-134.62211609 -96.66592407]
[-145.50045776 -95.28112793]
[-155.12966919 -100.05052948]
[-160.39938354 -109.16149902]
[-159.75903320 -119.44630432]
[-170.64517212 -129.76580811]
[-181.53129578 -140.08531189]
[-192.41743469 -150.40481567]
[-203.30355835 -160.72431946]
[-214.18969727 -171.04382324]
[-225.07582092 -181.36332703]
[-235.96195984 -191.68283081]
[-251.13072205 -188.99679565]
[-264.81262207 -195.67953491]
[-271.85272217 -208.97994995]
[-269.73638916 -223.69929504]
[-280.62252808 -234.01879883]
[-291.50863647 -244.33830261]
[-302.39477539 -254.65780640]
[-318.46020508 -257.94931030]
[-323.38497925 -273.59152222]
[-312.10290527 -285.49307251]
[-296.22003174 -281.41067505]
[-292.07525635 -265.54394531]
[-281.18914795 -255.22442627]
[-270.30300903 -244.90492249]
[-259.41687012 -234.58541870]
[-244.83155823 -237.48480225]
[-231.17416382 -231.16502380]
[-223.77030945 -217.85952759]
[-225.64245605 -202.56896973]
[-214.75631714 -192.24946594]
[-203.87019348 -181.92996216]
[-192.98405457 -171.61044312]
[-182.09793091 -161.29093933]
[-171.21179199 -150.97143555]
[-160.32566833 -140.65193176]
[-149.43952942 -130.33242798]
[-130.38499451 -127.29718018]
[-124.77719116 -107.98306274]
[-113.46005249 -98.13814545]
[-102.14292145 -88.29322815]
[-90.82578278 -78.44831085]
[-79.50864410 -68.60339355]
[-68.19150543 -58.75847626]
[-56.87436676 -48.91355896]
[-42.42625427 -52.43351364]
[-28.51129150 -46.70308685]
[-20.54565620 -33.72610474]
[-21.76272964 -18.36951447]
[-10.44559288 -8.52459717]
[4.34900284 -9.81127644]
[15.96643448 0.01165263]
[17.21570969 15.53830910]
[28.53284836 25.38322639]
[40.66277313 24.86734390]
[50.17869949 33.03834534]
[51.59159470 45.90543747]
[62.69576645 55.98995209]
[73.79993439 66.07446289]
[84.90410614 76.15898132]
[96.00827789 86.24349213]
[109.62999725 89.39630127]
[114.07624054 102.65233612]
[129.64225769 102.07215118]
[140.75981140 112.45746613]
[141.21701050 127.30086517]
[152.32118225 137.38537598]
[163.42533875 147.46989441]
[174.52951050 157.55441284]
[185.63368225 167.63891602]
[196.73785400 177.72343445]
[208.26278687 187.32424927]
[220.18743896 196.42385864]
[232.11209106 205.52345276]
[244.03674316 214.62304688]
[255.96139526 223.72265625]
[267.88604736 232.82225037]
[279.81069946 241.92184448]
[291.73535156 251.02143860]
[300.52301025 253.76835632]
[303.81484985 260.44512939]
[315.54229736 269.79745483]
[331.15585327 272.35247803]
[336.28228760 286.33706665]
[348.00976562 295.68942261]
[356.73672485 298.62347412]
[359.88513184 305.36907959]
[371.41006470 314.96987915]
[382.93499756 324.57070923]
[394.45993042 334.17153931]
[410.70324707 336.42697144]
[416.62008667 351.72149658]
[406.12374878 364.32144165]
[390.01193237 361.26504517]
[384.85910034 345.69647217]
[373.33416748 336.09564209]
[361.80923462 326.49484253]
[350.28430176 316.89401245]
[338.65744019 307.41687012]
[326.92996216 298.06454468]
[312.15524292 296.17846680]
[306.18997192 281.52493286]
[294.46249390 272.17260742]
[282.63574219 262.94610596]
[270.71109009 253.84649658]
[258.78643799 244.74690247]
[246.86180115 235.64730835]
[234.93714905 226.54769897]
[223.01249695 217.44810486]
[211.08784485 208.34851074]
[199.16319275 199.24890137]
[196.30671692 199.53514099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 105]
[4 104]
[5 103]
[6 102]
[7 101]
[8 100]
[11 97]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[19 88]
[20 87]
[23 84]
[24 83]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[49 60]
[50 59]
[51 58]
[52 57]
[106 145]
[107 144]
[108 143]
[109 142]
[110 141]
[111 140]
[112 139]
[113 138]
[115 137]
[116 136]
[118 134]
[119 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
