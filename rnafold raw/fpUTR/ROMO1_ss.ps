%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCGAAGCCGCUGCAGUCCUGGGCCCCAGGCUCCCGGAAGUGCUGCCCGGCGCUCCGGAAGCGAUUCAUCGGGCCGCGAGCGCCCUCCCCGUCGUUUUCCGUGAGAGACGUAGAGCUGAGCGACCCAGCCCGCGAGCGAGGUGAG\
) } def
/len { sequence length } bind def

/coor [
[-18.41561508 128.83474731]
[-33.07894135 131.99493408]
[-47.74227142 135.15513611]
[-62.40560150 138.31532288]
[-77.06893158 141.47550964]
[-91.73225403 144.63569641]
[-103.59259796 155.10675049]
[-117.66429901 150.22447205]
[-132.32762146 153.38467407]
[-146.99095154 156.54486084]
[-154.78462219 161.44360352]
[-161.99894714 159.61302185]
[-176.72604370 162.46125793]
[-191.45315552 165.30949402]
[-206.11647034 168.46968079]
[-220.70942688 171.94039917]
[-235.30236816 175.41111755]
[-249.89532471 178.88182068]
[-264.48828125 182.35253906]
[-278.92077637 186.43946838]
[-293.16680908 191.13523865]
[-303.85116577 202.80380249]
[-318.36087036 199.43969727]
[-332.60693359 204.13548279]
[-346.80233765 208.98219299]
[-360.94549561 213.97929382]
[-375.08865356 218.97637939]
[-388.00872803 229.95399475]
[-402.13397217 220.57772827]
[-397.03439331 204.40890503]
[-380.08575439 204.83322144]
[-365.94259644 199.83612061]
[-351.79940796 194.83903503]
[-346.50378418 189.60893250]
[-337.30270386 189.88943481]
[-323.05667114 185.19366455]
[-313.39129639 173.86097717]
[-297.86257935 176.88920593]
[-283.61654663 172.19342041]
[-282.23837280 169.67680359]
[-279.74569702 167.57469177]
[-276.29876709 166.32760620]
[-272.21899414 166.30696106]
[-267.95898438 167.75958252]
[-253.36604309 164.28887939]
[-238.77308655 160.81816101]
[-224.18014526 157.34745789]
[-209.58718872 153.87673950]
[-206.33520508 150.29331970]
[-200.77276611 148.75769043]
[-194.30139160 150.58239746]
[-179.57429504 147.73416138]
[-164.84718323 144.88591003]
[-150.15113831 141.88153076]
[-135.48782349 138.72134399]
[-120.82448578 135.56115723]
[-110.01296234 125.31613922]
[-94.89244843 129.97236633]
[-80.22911835 126.81217957]
[-65.56578827 123.65199280]
[-50.90246201 120.49179840]
[-36.23913193 117.33161163]
[-21.57580376 114.17142487]
[-17.57547760 103.40058136]
[-8.76092625 95.84435272]
[2.73045754 93.48870850]
[14.03666687 97.03943634]
[22.28384018 105.71631622]
[37.06807709 103.18130493]
[51.85231781 100.64629364]
[66.63655853 98.11128235]
[81.42079163 95.57627106]
[89.87300873 83.80739594]
[104.15411377 81.35865784]
[116.04418945 89.63948822]
[130.82843018 87.10447693]
[145.58493042 84.41269684]
[160.31202698 81.56446075]
[175.03913879 78.71621704]
[189.76623535 75.86797333]
[201.84616089 65.65102386]
[215.81106567 70.83086395]
[230.53816223 67.98262787]
[245.05415344 64.20295715]
[259.30020142 59.50717545]
[273.49560547 54.66046524]
[287.52951050 49.36430359]
[301.44784546 43.77145386]
[315.36618042 38.17860794]
[321.63436890 23.91861343]
[335.82922363 18.44494247]
[349.38531494 24.50859261]
[363.30364990 18.91574669]
[377.22198486 13.32289886]
[391.14031982 7.73005152]
[401.06045532 -4.59478807]
[415.75485229 -2.16087794]
[429.67318726 -7.75372505]
[443.59152222 -13.34657192]
[451.18505859 -27.47872543]
[466.99368286 -30.21123886]
[478.89038086 -19.44796181]
[477.74902344 -3.44556141]
[464.44515991 5.52029228]
[449.18435669 0.57176328]
[435.26602173 6.16461039]
[421.34768677 11.75745773]
[412.42309570 23.68225861]
[396.73318481 21.64838791]
[382.81484985 27.24123383]
[368.89651489 32.83407974]
[354.97817993 38.42692947]
[349.38693237 52.18460846]
[335.35144043 58.05482101]
[320.95901489 52.09694290]
[307.04067993 57.68978882]
[293.12234497 63.28263855]
[290.43670654 67.30800629]
[285.16290283 69.65018463]
[278.49270630 68.80362701]
[273.19708252 74.03372192]
[263.99597168 73.75321960]
[249.74993896 78.44899750]
[262.37908936 86.54249573]
[265.77761841 101.15242004]
[258.01721191 113.98892975]
[243.50119019 117.76845551]
[230.46609497 110.34644318]
[226.30818176 95.93423462]
[233.38639832 82.70972443]
[218.65930176 85.55796814]
[207.63276672 95.57118988]
[192.61448669 90.59507751]
[177.88737488 93.44331360]
[163.16027832 96.29155731]
[148.43318176 99.13980103]
[142.42163086 103.52828979]
[133.36344910 101.88871765]
[118.57920837 104.42372894]
[110.12699127 116.19260406]
[95.84588623 118.64134216]
[83.95581055 110.36051178]
[69.17156982 112.89552307]
[54.38732910 115.43053436]
[39.60309219 117.96554565]
[24.81885147 120.50055695]
[14.54504108 136.35333252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[8 56]
[9 55]
[10 54]
[12 53]
[13 52]
[14 51]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 39]
[21 38]
[23 36]
[24 35]
[25 33]
[26 32]
[27 31]
[68 146]
[69 145]
[70 144]
[71 143]
[72 142]
[75 139]
[76 138]
[77 136]
[78 135]
[79 134]
[80 133]
[82 131]
[83 130]
[84 123]
[85 122]
[86 120]
[87 117]
[88 116]
[89 115]
[92 112]
[93 111]
[94 110]
[95 109]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
