%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGGGCCGGCGUCGGGCGGGGCCGGCGGGGUCUUCAGGGUACCGGGCUGGUUACAGCAGCUCUACCCCUCACGACGCAGAC\
) } def
/len { sequence length } bind def

/coor [
[93.73393250 196.80268860]
[99.91986084 182.84930420]
[111.55290222 172.96824646]
[107.71525574 158.46748352]
[103.87761688 143.96670532]
[100.03997803 129.46592712]
[96.20233154 114.96514893]
[83.44907379 107.06866455]
[68.75792694 110.09690094]
[54.06678391 113.12513733]
[39.37563705 116.15337372]
[24.68449020 119.18161011]
[9.99334335 122.20984650]
[-1.96065545 132.57385254]
[-15.98789501 127.56526947]
[-30.67904091 130.59350586]
[-42.56710052 141.88980103]
[-58.21518326 136.98371887]
[-61.52588272 120.92223358]
[-49.09343719 110.22801971]
[-33.70727921 115.90235901]
[-19.01613045 112.87412262]
[-8.11294079 102.72672272]
[6.96510696 107.51869965]
[21.65625381 104.49046326]
[36.34740067 101.46222687]
[51.03854752 98.43399048]
[65.72969055 95.40575409]
[80.42083740 92.37751770]
[66.73773956 86.23156738]
[57.54207230 74.38083649]
[54.98690796 59.60007095]
[59.67051697 45.35002136]
[70.49627686 34.96720123]
[84.92944336 30.88263702]
[99.59063721 34.05268860]
[111.04710388 43.73512268]
[116.61640930 57.66289139]
[114.99456787 72.57495880]
[106.56166840 84.97949219]
[118.53192902 75.93997192]
[130.50218201 66.90045166]
[142.47244263 57.86093140]
[154.44270325 48.82141495]
[157.54035950 42.53664398]
[162.65237427 39.41233063]
[167.64753723 39.59548187]
[180.25268555 31.46468353]
[192.85784912 23.33388329]
[205.46301270 15.20308304]
[218.06817627 7.07228231]
[230.67333984 -1.05851805]
[232.44723511 -16.59516335]
[243.82838440 -27.31912041]
[259.44296265 -28.16686630]
[271.91827393 -18.73812103]
[275.36380005 -3.48484993]
[268.15270996 10.39081955]
[253.68984985 16.33721924]
[238.80413818 11.54664326]
[226.19897461 19.67744255]
[213.59381104 27.80824280]
[200.98864746 35.93904495]
[188.38349915 44.06984329]
[175.77833557 52.20064545]
[163.48222351 60.79167175]
[151.51196289 69.83119202]
[139.54170227 78.87071228]
[127.57144928 87.91023254]
[115.60118866 96.94975281]
[110.70310974 111.12751007]
[114.54074860 125.62828064]
[118.37839508 140.12905884]
[122.21603394 154.62983704]
[126.05367279 169.13061523]
[141.05154419 171.96377563]
[153.32978821 181.03059387]
[160.45056152 194.53086853]
[161.00003052 209.78408813]
[154.86909485 223.76173401]
[143.27507019 233.68852234]
[128.51992798 237.59347534]
[113.53333282 234.70127869]
[101.29088593 225.58616638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[15 22]
[16 21]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
