%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCGAUUCCGGGGUGGCCGGGUGGCGGCGGCGGCGCUCCGGUCGCGAUGGGCCAGAGGUGACGCCGCAGCCGCCGGGAGCCGCGAGGGACGGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[102.24559021 364.53167725]
[100.86156464 349.59567261]
[99.47753906 334.65966797]
[95.66009521 328.17782593]
[98.28814697 319.24349976]
[97.36473083 304.27194214]
[96.44132233 289.30038452]
[92.82529449 282.70407104]
[95.72723389 273.85491943]
[95.26530457 258.86203003]
[94.80338287 243.86914062]
[94.34145355 228.87625122]
[83.74311829 221.37243652]
[79.38822174 208.93110657]
[83.10161591 196.07969666]
[93.72740936 187.63494873]
[93.72740936 172.63494873]
[93.72740936 157.63494873]
[93.72740936 142.63494873]
[93.72740936 127.63494873]
[93.26548004 112.64205933]
[85.70322418 100.88179779]
[91.76296997 88.28135681]
[90.83955383 73.30980682]
[89.91613770 58.33825302]
[88.99272919 43.36670303]
[88.06931305 28.39515305]
[87.14589691 13.42360401]
[78.57372284 0.12592109]
[85.51284790 -13.05352688]
[84.58943176 -28.02507591]
[83.66601562 -42.99662781]
[82.74260712 -57.96817780]
[81.81919098 -72.93972778]
[80.89577484 -87.91127777]
[72.32360077 -101.20896149]
[79.26272583 -114.38840485]
[78.33930969 -129.35995483]
[77.41589355 -144.33151245]
[76.26203918 -159.28706360]
[74.87801361 -174.22306824]
[65.90039825 -187.25047302]
[72.43037415 -200.63735962]
[71.04634857 -215.57336426]
[69.66232300 -230.50938416]
[68.27829742 -245.44538879]
[55.96092987 -255.34782410]
[54.33639908 -271.06838989]
[64.36849976 -283.28036499]
[80.10536957 -284.73861694]
[92.21060181 -274.57797241]
[93.50238037 -258.82653809]
[83.21430969 -246.82942200]
[84.59833527 -231.89340210]
[85.98236084 -216.95739746]
[87.36638641 -202.02137756]
[96.24500275 -190.06231689]
[89.81402588 -175.60710144]
[91.19805145 -160.67108154]
[95.01550293 -154.18923950]
[92.38744354 -145.25491333]
[93.31085968 -130.28337097]
[94.23427582 -115.31182098]
[102.74040222 -103.08500671]
[95.86732483 -88.83468628]
[96.79074097 -73.86313629]
[97.71415710 -58.89159012]
[98.63756561 -43.92004013]
[99.56098175 -28.94849014]
[100.48439789 -13.97694016]
[108.99052429 -1.75012290]
[102.11744690 12.50018978]
[103.04086304 27.47174072]
[103.96427917 42.44329071]
[104.88768768 57.41484070]
[105.81110382 72.38639069]
[106.73451996 87.35794067]
[114.29677582 99.11820221]
[108.23703003 111.71864319]
[111.70835114 117.67626190]
[111.53829956 123.57797241]
[108.72740936 127.63494873]
[108.72740936 142.63494873]
[108.72740936 157.63494873]
[108.72740936 172.63494873]
[108.72740936 187.63494873]
[121.29494476 199.68302917]
[121.34698486 216.75726318]
[109.33434296 228.41432190]
[109.79626465 243.40721130]
[110.25819397 258.40008545]
[110.72011566 273.39297485]
[111.41287231 288.37698364]
[112.33628082 303.34854126]
[113.25969696 318.32006836]
[114.41355133 333.27563477]
[115.79757690 348.21163940]
[117.18160248 363.14764404]
[127.09307861 376.21267700]
[120.48562622 391.22180176]
[104.15643311 392.73492432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[5 95]
[6 94]
[7 93]
[9 92]
[10 91]
[11 90]
[12 89]
[16 86]
[17 85]
[18 84]
[19 83]
[20 82]
[21 79]
[23 77]
[24 76]
[25 75]
[26 74]
[27 73]
[28 72]
[30 70]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[37 63]
[38 62]
[39 61]
[40 59]
[41 58]
[43 56]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
