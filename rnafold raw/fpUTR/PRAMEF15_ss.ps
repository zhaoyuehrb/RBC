%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAAGUCUUCAAGCCUGGAGUUCCUGCUUGGUUCUUCCUGAGGUCUGAGCACCUUCUAGACUACAUCCAGAUCUGUUUUCCCUGCAGAUUC\
) } def
/len { sequence length } bind def

/coor [
[208.59951782 250.68746948]
[195.85815430 244.15000916]
[185.76420593 233.96122742]
[179.32682800 221.12071228]
[177.19554138 206.89408875]
[179.59466553 192.68830872]
[186.29981995 179.91242981]
[175.95951843 169.04605103]
[165.61921692 158.17967224]
[155.27891541 147.31329346]
[144.93861389 136.44691467]
[133.10150146 127.23371887]
[120.02924347 119.87736511]
[106.95697784 112.52101135]
[92.97520447 112.48309326]
[85.68666840 100.55124664]
[72.61440277 93.19489288]
[59.54213715 85.83854675]
[46.46987534 78.48219299]
[33.04893494 71.78305817]
[19.31233597 65.75762939]
[5.57573557 59.73219681]
[-8.16086388 53.70676422]
[-22.73257446 59.21158218]
[-36.57760620 52.90525436]
[-41.73580551 38.97943115]
[-55.47240448 32.95399857]
[-70.88050079 37.42279816]
[-83.89743805 28.04522896]
[-84.53774261 12.01495934]
[-72.31022644 1.62903941]
[-56.59479141 4.85465908]
[-49.44697571 19.21739960]
[-35.71037674 25.24283028]
[-21.97126007 19.60613823]
[-7.95455933 25.52109909]
[-2.13543296 39.97016525]
[11.60116673 45.99559784]
[25.33776665 52.02102661]
[39.07436752 58.04645920]
[42.63227844 56.97356033]
[46.90684891 57.70183563]
[50.98114395 60.55651855]
[53.82622910 65.40992737]
[66.89849091 72.76628113]
[79.97075653 80.12263489]
[93.04302216 87.47898865]
[107.02479553 87.51690674]
[114.31333160 99.44875336]
[127.38559723 106.80510712]
[140.45785522 114.16145325]
[136.48469543 99.69722748]
[140.73855591 85.31304932]
[151.93971252 75.33636475]
[166.71829224 72.76863098]
[180.62823486 78.38233948]
[189.48474121 90.48862457]
[190.62336731 105.44535065]
[183.70156860 118.75281525]
[170.80174255 126.40750885]
[155.80499268 126.10661316]
[166.14529419 136.97299194]
[176.48559570 147.83937073]
[186.82589722 158.70574951]
[197.16619873 169.57212830]
[211.64196777 163.14251709]
[227.41519165 162.02476501]
[242.60173035 166.33416748]
[255.39369202 175.53887939]
[264.27468872 188.52540588]
[268.19958496 203.73327637]
[266.71737671 219.34259033]
[260.02307129 233.49176025]
[270.71701050 244.01031494]
[281.41091919 254.52886963]
[292.10485840 265.04742432]
[302.79879761 275.56597900]
[313.49270630 286.08453369]
[324.18664551 296.60308838]
[339.73461914 294.93142700]
[352.69070435 303.68777466]
[356.93740845 318.73767090]
[350.46960449 332.97500610]
[336.34118652 339.67733765]
[321.22311401 335.68002319]
[312.25372314 322.87048340]
[313.66809082 307.29699707]
[302.97415161 296.77844238]
[292.28024292 286.25988770]
[281.58630371 275.74133301]
[270.89239502 265.22277832]
[260.19845581 254.70423889]
[249.50453186 244.18568420]
[236.82009888 250.69230652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 51]
[13 50]
[14 49]
[16 47]
[17 46]
[18 45]
[19 44]
[20 40]
[21 39]
[22 38]
[23 37]
[26 34]
[27 33]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
