%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCCCCACCCUGUCCUCUGGAACCUCUGCGAGAUUUAGAGGAAAGAACCAGUUUUCAGGCGGAUUGCCUCAGAUCACACUAUCUCCACUUGCCCAGCCCUGUGGAAGAUUAGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[81.47863770 104.65999603]
[66.66331482 102.31347656]
[51.84799194 99.96695709]
[37.03266525 97.62044525]
[22.21734047 95.27392578]
[7.40201569 92.92740631]
[-1.71000087 106.33686066]
[-15.69260311 114.42722321]
[-31.74374962 115.63539124]
[-46.67202377 109.77160645]
[-57.53118134 98.04721832]
[-62.20159912 82.82481384]
[-77.07327271 80.86692047]
[-91.94494629 78.90903473]
[-106.92438507 78.12399292]
[-121.91925049 78.51664734]
[-136.91410828 78.90930176]
[-151.90896606 79.30195618]
[-166.90382385 79.69461060]
[-181.89868164 80.08726501]
[-196.89355469 80.47991943]
[-211.88841248 80.87257385]
[-226.88327026 81.26522827]
[-236.38189697 90.10957336]
[-248.95799255 90.06018829]
[-257.80136108 81.69393158]
[-272.80136108 81.69393158]
[-287.80136108 81.69393158]
[-303.64050293 87.74027252]
[-313.83523560 74.19393158]
[-303.64050293 60.64759064]
[-287.80136108 66.69393158]
[-272.80136108 66.69393158]
[-257.80136108 66.69393158]
[-243.17434692 57.09357834]
[-227.27592468 66.27036285]
[-212.28106689 65.87770844]
[-197.28620911 65.48505402]
[-182.29133606 65.09239960]
[-167.29647827 64.69974518]
[-152.30162048 64.30709839]
[-137.30676270 63.91444016]
[-122.31190491 63.52178574]
[-107.31703949 63.12913132]
[-116.80413055 51.51038742]
[-115.53740692 36.56396866]
[-104.23028564 26.70755386]
[-89.25081635 27.49217606]
[-79.03530121 38.47594452]
[-79.33700562 53.47291183]
[-89.98705292 64.03736115]
[-75.11537933 65.99525452]
[-60.24370575 67.95314026]
[-53.18288422 55.93680191]
[-42.02647781 47.51088715]
[-28.45280838 43.98464966]
[-14.51986122 45.92709732]
[-2.35327506 53.07547760]
[6.17794752 64.37026978]
[9.74853325 78.11208344]
[24.56385803 80.45860291]
[39.37918472 82.80511475]
[54.19450760 85.15163422]
[69.00983429 87.49815369]
[83.82515717 89.84466553]
[95.60881042 81.41307831]
[109.91994476 83.67973328]
[118.52136230 95.34000397]
[133.33668518 97.68652344]
[148.15200806 100.03304291]
[162.99266052 94.54981995]
[174.35285950 104.18284607]
[189.19351196 98.69963074]
[200.55371094 108.33265686]
[215.36903381 110.67916870]
[230.18435669 113.02568817]
[244.99967957 115.37220764]
[249.09536743 110.05361176]
[254.52178955 106.17160034]
[260.80081177 104.03921509]
[267.38748169 103.81658173]
[273.71731567 105.49917603]
[279.25460815 108.92018127]
[283.53790283 113.76672363]
[286.21829224 119.60839844]
[287.08779907 125.93537903]
[301.22741699 130.94247437]
[315.36703491 135.94958496]
[329.50665283 140.95668030]
[343.64627075 145.96379089]
[359.22659302 138.14044189]
[375.34835815 143.83531189]
[382.27966309 159.09703064]
[396.54553223 163.73228455]
[413.47784424 162.87643433]
[418.98757935 178.91011047]
[405.10574341 188.64309692]
[391.91027832 177.99812317]
[377.64440918 173.36286926]
[367.02664185 180.78843689]
[353.87487793 180.70298767]
[343.03720093 172.91212463]
[338.63916016 160.10340881]
[324.49954224 155.09631348]
[310.35992432 150.08920288]
[296.22030640 145.08210754]
[282.08068848 140.07499695]
[259.59536743 147.83297729]
[242.65316772 130.18753052]
[227.83782959 127.84101105]
[213.02250671 125.49449921]
[198.20718384 123.14797974]
[184.42622375 128.79904175]
[172.00633240 118.99816895]
[158.22538757 124.64923096]
[145.80549622 114.84836578]
[130.99017334 112.50184631]
[116.17484283 110.15533447]
[104.39118958 118.58692169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[6 60]
[12 53]
[13 52]
[14 51]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[26 34]
[27 33]
[28 32]
[68 118]
[69 117]
[70 116]
[72 114]
[74 112]
[75 111]
[76 110]
[77 109]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
