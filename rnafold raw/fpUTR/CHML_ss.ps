%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGAAAAAAAAUAUUUUAAAAGGGUAACCGUUAAACAGCUAGGACCUGCAACUUCAGUGCUUCUGGGAUAACUGGAACAUCAGAAGGACAGAUUUUAUUACAGCAUAAUCACACCUCAUUUCUUUCAUCAGCAGUUGUCACCAGACGCUGUUACUUCCUAAA\
) } def
/len { sequence length } bind def

/coor [
[-33.57615662 280.24942017]
[-33.81842422 287.70019531]
[-35.21160889 295.01889038]
[-37.72064972 302.02893066]
[-41.28358459 308.56143188]
[-45.81307220 314.45922852]
[-51.19854355 319.58062744]
[-57.30888748 323.80291748]
[-63.99564362 327.02526855]
[-71.09661865 329.17105103]
[-78.43981934 330.18978882]
[-85.84761810 330.05828857]
[-93.14102173 328.78112793]
[-100.14404297 326.39053345]
[-106.68793488 322.94567871]
[-112.61521149 318.53100586]
[-117.78350830 313.25436401]
[-130.62873840 321.00033569]
[-143.47396851 328.74627686]
[-156.31921387 336.49224854]
[-169.16444397 344.23822021]
[-173.03147888 356.57409668]
[-183.92726135 362.75405884]
[-195.71835327 359.92828369]
[-208.70872498 367.42828369]
[-216.43524170 381.89318848]
[-232.83215332 382.16375732]
[-241.03173828 367.96166992]
[-232.59895325 353.89682007]
[-216.20872498 354.43789673]
[-203.21835327 346.93789673]
[-195.30334473 331.29687500]
[-176.91041565 331.39297485]
[-164.06517029 323.64700317]
[-151.21994019 315.90106201]
[-138.37469482 308.15509033]
[-125.52946472 300.40911865]
[-128.74182129 276.71661377]
[-119.99817657 254.39988708]
[-101.45475006 239.12022400]
[-77.76152802 234.78375244]
[-54.89628220 242.54312134]
[-44.75365829 231.49200439]
[-34.61103439 220.44088745]
[-24.46841049 209.38977051]
[-14.32578754 198.33865356]
[-19.90490913 188.70930481]
[-22.80062866 177.94766235]
[-22.80708694 166.78762817]
[-19.91575050 155.99247742]
[-14.31655216 146.30265808]
[-6.38543940 138.38490295]
[3.34086561 132.78648376]
[14.20117950 129.89730835]
[25.45480347 129.92279053]
[36.33203888 132.86927795]
[46.08684158 138.54307556]
[57.23401260 128.50611877]
[68.38118744 118.46915436]
[79.52835846 108.43219757]
[90.67552948 98.39523315]
[92.13816071 93.30688477]
[96.36720276 89.41767120]
[102.44342804 88.19829559]
[113.96463776 78.59298706]
[125.48583984 68.98768616]
[137.00704956 59.38238525]
[148.52825928 49.77708435]
[159.95748901 40.06253815]
[171.29373169 30.23962784]
[182.62997437 20.41671562]
[193.96623230 10.59380531]
[205.30247498 0.77089399]
[216.63871765 -9.05201721]
[227.97496033 -18.87492752]
[239.31120300 -28.69783974]
[233.55039978 -43.52959442]
[233.20896912 -59.41038132]
[238.30975342 -74.42528534]
[248.22048950 -86.77007294]
[261.73208618 -94.96798706]
[277.20611572 -98.04638672]
[292.77355957 -95.65212250]
[306.56045532 -88.09195709]
[317.70761108 -98.12891388]
[328.85479736 -108.16587067]
[339.61175537 -118.61993408]
[349.96295166 -129.47595215]
[360.31414795 -140.33195496]
[357.67233276 -155.50848389]
[364.39489746 -169.17085266]
[377.71578979 -176.17216492]
[392.42889404 -174.01293945]
[402.78009033 -184.86894226]
[413.13125610 -195.72496033]
[423.48245239 -206.58096313]
[418.05175781 -220.84527588]
[419.35650635 -236.05252075]
[427.13757324 -249.18330383]
[439.85009766 -257.63049316]
[454.96994019 -259.71688843]
[469.49505615 -255.02824402]
[480.54150391 -244.49549866]
[485.91595459 -230.20991516]
[484.55136108 -215.00791931]
[476.71862793 -201.90788269]
[463.97296143 -193.51081848]
[448.84500122 -191.48397827]
[434.33847046 -196.22978210]
[423.98727417 -185.37377930]
[413.63607788 -174.51776123]
[403.28491211 -163.66175842]
[406.14175415 -149.06803894]
[399.78219604 -135.42912292]
[386.45520020 -128.06407166]
[371.17016602 -129.98077393]
[360.81896973 -119.12476349]
[350.46777344 -108.26875305]
[350.42465210 -105.42269135]
[349.22561646 -102.42326355]
[346.80679321 -99.72058868]
[343.27178955 -97.77927399]
[338.89175415 -97.01869965]
[327.74456787 -86.98174286]
[316.59741211 -76.94477844]
[322.30249023 -63.96366119]
[323.71517944 -49.83315277]
[320.68377686 -35.93753815]
[313.49255371 -23.64221573]
[302.83514404 -14.15953827]
[289.74780273 -8.42927837]
[275.50848389 -7.02549982]
[261.51214600 -10.09907532]
[249.13410950 -17.36159515]
[237.79786682 -7.53868437]
[226.46162415 2.28422666]
[215.12538147 12.10713768]
[203.78913879 21.93004799]
[192.45289612 31.75296021]
[181.11665344 41.57587051]
[169.78041077 51.39878082]
[166.77095032 58.18641663]
[158.13356018 61.29829025]
[146.61235046 70.90359497]
[135.09114075 80.50889587]
[123.56993866 90.11419678]
[112.04873657 99.71949768]
[100.71248627 109.54241180]
[89.56531525 119.57936859]
[78.41814423 129.61633301]
[67.27097321 139.65328979]
[56.12379837 149.69024658]
[62.31757355 167.86958313]
[60.01034927 186.88691711]
[49.70169067 202.97573853]
[33.47168350 212.96803284]
[14.56131363 214.91810608]
[-3.27467060 208.48127747]
[-13.41729450 219.53239441]
[-23.55991745 230.58351135]
[-33.70254135 241.63462830]
[-43.84516525 252.68574524]
[-39.68803024 258.89572144]
[-36.54544830 265.67077637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[24 31]
[25 30]
[42 162]
[43 161]
[44 160]
[45 159]
[46 158]
[57 152]
[58 151]
[59 150]
[60 149]
[61 148]
[64 147]
[65 146]
[66 145]
[67 144]
[68 143]
[69 141]
[70 140]
[71 139]
[72 138]
[73 137]
[74 136]
[75 135]
[76 134]
[84 125]
[85 124]
[86 123]
[87 118]
[88 117]
[89 116]
[93 112]
[94 111]
[95 110]
[96 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
