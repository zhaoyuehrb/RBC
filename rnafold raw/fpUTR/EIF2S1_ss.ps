%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGUUCCGCAUGCGCGGUGGAGUGAGCGAAGCGCACGCUGAGGAGGAUCGGCGGCCGGUGAGGGGGAAGCAAGUCUGGUCUCUGUGAUUGAAGAAGUCGGCUCUGGGCUCCAGUGCGGGAAUCACACACAUACCUCAGA\
) } def
/len { sequence length } bind def

/coor [
[149.19470215 472.91824341]
[158.92166138 460.16024780]
[158.25816345 445.17495728]
[157.59466553 430.18963623]
[156.93116760 415.20431519]
[156.26766968 400.21899414]
[153.79013062 385.42501831]
[149.53520203 371.04113770]
[145.28028870 356.65728760]
[135.58157349 368.09997559]
[120.58321381 367.87817383]
[111.22709656 356.15371704]
[114.33886719 341.48004150]
[127.64838409 334.56216431]
[141.44522095 340.44628906]
[138.80419922 325.68063354]
[136.16316223 310.91494751]
[133.52214050 296.14929199]
[123.66484070 284.98312378]
[128.85148621 270.03625488]
[126.21046448 255.27058411]
[123.56943512 240.50491333]
[120.92840576 225.73924255]
[118.28737640 210.97357178]
[115.64635468 196.20790100]
[112.51685333 181.53799438]
[108.90234375 166.97999573]
[105.28782654 152.42199707]
[101.67330933 137.86401367]
[87.45912933 136.60038757]
[74.43593597 130.08259583]
[64.51285553 119.02660370]
[59.23059464 104.82835388]
[59.52508163 89.38919067]
[65.56950378 74.86152649]
[52.15950012 68.14052582]
[43.00583267 67.07546234]
[38.52965164 61.11962891]
[25.27161598 54.10361481]
[12.01357937 47.08760071]
[-1.24445796 40.07158661]
[-14.50249481 33.05557251]
[-27.76053238 26.03955841]
[-42.78948212 30.92895126]
[-56.83578110 23.68484497]
[-61.56600571 8.60503864]
[-54.17379761 -5.36388445]
[-39.04482269 -9.93441105]
[-25.15483665 -2.39492846]
[-20.74451828 12.78152180]
[-7.48648071 19.79753685]
[5.77155638 26.81355095]
[19.02959251 33.82956314]
[32.28763199 40.84557724]
[45.54566574 47.86159134]
[58.88050079 54.73052216]
[72.29050446 61.45152283]
[85.70050812 54.73052216]
[88.34152985 39.96485138]
[90.98255920 25.19918442]
[93.62358856 10.43351460]
[88.43693542 -4.51336479]
[98.29423523 -15.67951584]
[93.10758209 -30.62639618]
[102.96488190 -41.79254532]
[105.60591125 -56.55821609]
[108.24694061 -71.32388306]
[110.88796997 -86.08955383]
[113.52899170 -100.85521698]
[106.79302979 -111.91523743]
[109.34933472 -124.19999695]
[119.28140259 -131.19143677]
[122.24842834 -145.89506531]
[116.51006317 -161.25744629]
[127.15241241 -173.73432922]
[143.22753906 -170.49053955]
[148.19874573 -154.86303711]
[136.95205688 -142.92802429]
[133.98503113 -128.22439575]
[140.49021912 -111.96199036]
[128.29466248 -98.21419525]
[125.65363312 -83.44852448]
[123.01261139 -68.68285370]
[120.37158203 -53.91718674]
[117.73055267 -39.15151978]
[123.10610962 -25.26077843]
[113.05990601 -13.03848743]
[118.43546295 0.85225266]
[108.38925934 13.07454300]
[105.74822998 27.84021187]
[103.10720062 42.60588074]
[100.46617126 57.37154770]
[111.64026642 59.48085785]
[121.73681641 64.43106079]
[130.05775452 71.80497742]
[136.04792786 81.02074432]
[139.33190918 91.37736511]
[139.73710632 102.10789490]
[137.30151367 112.43613434]
[132.26622009 121.63280487]
[125.05332947 129.06703186]
[116.23130798 134.24949646]
[119.84582520 148.80749512]
[123.46033478 163.36547852]
[127.07485199 177.92347717]
[130.81501770 181.78929138]
[132.47636414 186.26368713]
[132.18302917 190.43165588]
[130.41201782 193.56687927]
[133.05305481 208.33255005]
[135.69407654 223.09822083]
[138.33509827 237.86389160]
[140.97613525 252.62954712]
[143.61715698 267.39523315]
[153.66336060 279.61752319]
[148.28781128 293.50823975]
[150.92883301 308.27392578]
[153.56985474 323.03958130]
[156.21089172 337.80526733]
[159.66415405 352.40234375]
[163.91906738 366.78622437]
[168.17399597 381.17007446]
[173.56211853 367.17120361]
[184.74821472 357.17767334]
[199.26345825 353.39505005]
[213.90420532 356.65826416]
[225.43914795 366.24707031]
[231.32246399 380.04513550]
[230.25563049 395.00714111]
[222.47413635 407.83087158]
[209.69540405 415.68606567]
[194.73977661 416.83898926]
[180.90806580 411.03518677]
[171.25299072 399.55548096]
[171.91648865 414.54080200]
[172.57998657 429.52612305]
[173.24348450 444.51144409]
[173.90698242 459.49676514]
[184.72343445 471.34512329]
[182.06175232 487.16586304]
[167.96374512 494.82260132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 138]
[3 137]
[4 136]
[5 135]
[6 134]
[7 122]
[8 121]
[9 120]
[15 119]
[16 118]
[17 117]
[18 116]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[26 105]
[27 104]
[28 103]
[29 102]
[35 57]
[36 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[58 92]
[59 91]
[60 90]
[61 89]
[63 87]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
