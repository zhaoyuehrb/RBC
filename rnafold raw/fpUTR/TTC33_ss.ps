%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUCUGGGAUUUGUGGUCCCGGAGAAGAGAUUGGCGGAGGGGAAAGACUGAGUCGUCUUUCCUUUGCCCGCUUCUGUGGACUGUUCGAACGCCCAGGGGUGGGCCAAACCCGUUUCUUAGGAAACCAGGAAUCCAGGGAAGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[127.32092285 637.84887695]
[131.27128601 622.84301758]
[143.30865479 613.05114746]
[142.36048889 598.08111572]
[141.41230774 583.11114502]
[140.46414185 568.14111328]
[139.51597595 553.17114258]
[129.01679993 539.14538574]
[137.24436951 522.70654297]
[135.98078918 507.75988770]
[134.71722412 492.81320190]
[133.45364380 477.86651611]
[132.19007874 462.91983032]
[130.92649841 447.97314453]
[122.14458466 435.94290161]
[128.69187927 421.53997803]
[127.42831421 406.59329224]
[126.16474152 391.64660645]
[124.90116882 376.69995117]
[114.10861969 362.89865112]
[121.98777771 346.29003906]
[120.40937042 331.37332153]
[111.37577057 319.53088379]
[117.61795807 304.99313354]
[116.03954315 290.07641602]
[114.46113586 275.15969849]
[112.88272095 260.24298096]
[111.30431366 245.32624817]
[109.72589874 230.40953064]
[100.69229889 218.56709290]
[106.93448639 204.02935791]
[94.41539764 189.34494019]
[102.70013428 171.01655579]
[100.49429321 156.17962646]
[98.28844452 141.34271240]
[96.08260345 126.50578308]
[93.87675476 111.66886139]
[86.46823883 98.62609100]
[70.88661957 95.88316345]
[65.92902374 81.83782959]
[54.31507874 72.34486389]
[42.70113373 62.85190582]
[31.08719063 53.35894394]
[19.47324562 43.86598206]
[7.85930204 34.37302399]
[-3.75464177 24.88006210]
[-15.36858559 15.38710117]
[-26.98252869 5.89414024]
[-38.59647369 -3.59882069]
[-50.21041870 -13.09178162]
[-65.90847778 -11.26242542]
[-78.25021362 -21.13445854]
[-79.91349792 -36.85097885]
[-69.91152954 -49.08765411]
[-54.17830276 -50.58468246]
[-42.04805756 -40.45390320]
[-40.71745682 -24.70572472]
[-29.10351181 -15.21276474]
[-17.48956871 -5.71980381]
[-5.87562466 3.77315712]
[5.73831892 13.26611805]
[17.35226250 22.75907898]
[28.96620750 32.25204086]
[40.58015060 41.74499893]
[52.19409561 51.23796082]
[63.80804062 60.73092270]
[75.42198181 70.22388458]
[90.17289734 72.28781128]
[95.96119690 87.01214600]
[110.72094727 84.33824158]
[118.26655579 71.37429810]
[125.81215668 58.41035080]
[133.35775757 45.44640350]
[140.90336609 32.48246002]
[148.44895935 19.51851463]
[155.99456787 6.55456972]
[163.54017639 -6.40937567]
[171.08576965 -19.37332153]
[172.71734619 -28.43132401]
[178.92958069 -32.52864075]
[186.74682617 -45.33061981]
[188.56900024 -54.35221100]
[194.86625671 -58.31764603]
[196.87823486 -67.29881287]
[203.25767517 -71.13059998]
[211.60766602 -83.59165192]
[212.16130066 -99.98145294]
[226.75744629 -107.45706940]
[240.38081360 -98.32823181]
[239.01687622 -81.98590088]
[224.06871033 -75.24166870]
[215.71873474 -62.78062057]
[207.50057983 -50.23223495]
[199.54881287 -37.51337814]
[191.73156738 -24.71139717]
[184.04971313 -11.82771778]
[176.50411987 1.13622725]
[168.95851135 14.10017300]
[161.41290283 27.06411743]
[153.86730957 40.02806473]
[146.32170105 52.99200821]
[138.77610779 65.95595551]
[131.23049927 78.91989899]
[123.68489838 91.88384247]
[108.71367645 109.46302032]
[110.91952515 124.29994202]
[113.12536621 139.13685608]
[115.33121490 153.97378540]
[117.53705597 168.81069946]
[126.70281982 174.82389832]
[130.92382812 184.70156860]
[129.01406860 195.04811096]
[121.85121155 202.45094299]
[130.99771118 215.36033630]
[124.64262390 228.83111572]
[126.22103119 243.74784851]
[127.79944611 258.66455078]
[129.37785339 273.58129883]
[130.95626831 288.49801636]
[132.53468323 303.41473389]
[141.68118286 316.32412720]
[135.32609558 329.79489136]
[136.90451050 344.71163940]
[146.45133972 353.45022583]
[147.42539978 365.95300293]
[139.84785461 375.43637085]
[141.11141968 390.38305664]
[142.37500000 405.32974243]
[143.63856506 420.27642822]
[152.51086426 433.37576294]
[145.87318420 446.70956421]
[147.13676453 461.65625000]
[148.40032959 476.60293579]
[149.66390991 491.54962158]
[150.92747498 506.49630737]
[152.19105530 521.44299316]
[161.55152893 530.38092041]
[162.26177979 542.90142822]
[154.48597717 552.22296143]
[155.43414307 567.19299316]
[156.38232422 582.16296387]
[157.33049011 597.13299561]
[158.27865601 612.10296631]
[171.45527649 620.29785156]
[177.26734924 634.68536377]
[173.48001099 649.73315430]
[161.54956055 659.65502930]
[146.06352234 660.63586426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 143]
[4 142]
[5 141]
[6 140]
[7 139]
[9 136]
[10 135]
[11 134]
[12 133]
[13 132]
[14 131]
[16 129]
[17 128]
[18 127]
[19 126]
[21 123]
[22 122]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[31 113]
[33 109]
[34 108]
[35 107]
[36 106]
[37 105]
[38 69]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[70 104]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[80 95]
[81 94]
[83 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
