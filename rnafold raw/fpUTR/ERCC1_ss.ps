%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAGUGCUGCGAGCCCUGGGCCACGCUGGCCGUGCUGGCAGUGGGCCGCCUCGAUCCCUCUGCAGUCUUUCCCUUGAGGCUCCAAGACCAGCAGGUGAGGCCUCGCGGCGCUGAAACCGUGAGGCCCGGACCACAGGCUCCAG\
) } def
/len { sequence length } bind def

/coor [
[90.61470795 285.62857056]
[87.72599030 300.71334839]
[77.66976166 312.32229614]
[63.15109253 317.33267212]
[48.07542801 314.39666748]
[36.49805450 304.30410767]
[31.53322220 289.76980591]
[34.51644897 274.70343018]
[44.64525986 263.15774536]
[59.19505310 258.23849487]
[62.06243134 243.51510620]
[64.92980957 228.79171753]
[63.10828018 221.57386780]
[68.01898956 213.78582764]
[71.20035553 199.12707520]
[74.38171387 184.46832275]
[77.56307220 169.80958557]
[80.74443054 155.15083313]
[79.07756042 147.89570618]
[84.15357971 140.21438599]
[87.64746857 125.62696075]
[76.33032990 115.78205109]
[62.36722183 121.26216125]
[48.40411377 126.74227905]
[34.44100952 132.22239685]
[20.47790146 137.70251465]
[7.94264555 149.11756897]
[-6.49641752 140.23220825]
[-1.95542157 123.89770508]
[14.99778652 123.73940277]
[28.96089363 118.25928497]
[42.92399979 112.77917480]
[56.88710403 107.29905701]
[70.85021210 101.81893921]
[81.36582184 80.15294647]
[103.15534973 74.95677185]
[98.42872620 60.72093964]
[93.70210266 46.48510361]
[88.97547913 32.24926758]
[84.24885559 18.01342964]
[79.52223206 3.77759385]
[64.88158417 -1.01381826]
[55.97369003 -13.36302280]
[56.04469681 -28.41157532]
[64.85778809 -40.38936234]
[60.13116837 -54.62519836]
[55.40454483 -68.86103058]
[50.67792130 -83.09687042]
[45.91674805 -87.84809113]
[44.53300476 -93.45229340]
[46.06762695 -98.04307556]
[41.95361710 -112.46787262]
[37.83960342 -126.89267731]
[33.72558975 -141.31747437]
[29.61157799 -155.74227905]
[25.49756432 -170.16708374]
[21.38355255 -184.59188843]
[6.27074194 -184.89909363]
[-8.07957268 -189.64881897]
[-20.39137268 -198.41871643]
[-29.56989861 -210.42895508]
[-34.79900360 -224.61161804]
[-35.61371994 -239.70558167]
[-31.94160461 -254.36869812]
[-24.10917664 -267.29711914]
[-12.81289196 -277.34130859]
[0.94279176 -283.60809326]
[15.93472862 -285.54025269]
[30.82984543 -282.96597290]
[44.30368042 -276.11416626]
[55.15814590 -265.59408569]
[62.42807388 -252.34118652]
[65.46702576 -237.53387451]
[64.00477600 -222.48883057]
[58.17135239 -208.54385376]
[48.48545837 -196.93890381]
[35.80835342 -188.70588684]
[39.92236710 -174.28109741]
[44.03638077 -159.85629272]
[48.15039062 -145.43148804]
[52.26440430 -131.00668335]
[56.37841797 -116.58188629]
[60.49243164 -102.15708160]
[64.91375732 -87.82349396]
[69.64038086 -73.58765411]
[74.36700439 -59.35182190]
[79.09362793 -45.11598587]
[93.32060242 -40.78802872]
[102.37820435 -28.77038193]
[102.62548828 -13.54565811]
[93.75806427 -0.94902933]
[98.48468781 13.28680706]
[103.21131134 27.52264404]
[107.93793488 41.75848007]
[112.66455841 55.99431610]
[117.39118195 70.23014832]
[128.38696289 80.43273926]
[142.93621826 84.08230591]
[157.48545837 87.73186493]
[172.28665161 78.47128296]
[188.88816833 82.66352081]
[197.18498230 97.25552368]
[211.80891418 100.59333801]
[226.43283081 103.93115234]
[241.05674744 107.26896667]
[255.68066406 110.60678101]
[270.30459595 113.94459534]
[284.92849731 117.28240967]
[299.55242920 120.62022400]
[314.17633057 123.95803833]
[328.80026245 127.29585266]
[340.39666748 116.98554230]
[355.84191895 115.49403381]
[369.19692993 123.39485931]
[375.32647705 137.64997864]
[371.87359619 152.77799988]
[360.16601562 162.96191406]
[344.70550537 164.28576660]
[331.43698120 156.24053955]
[325.46243286 141.91976929]
[310.83853149 138.58195496]
[296.21459961 135.24414062]
[281.59069824 131.90632629]
[266.96676636 128.56851196]
[252.34284973 125.23069763]
[237.71893311 121.89289093]
[223.09501648 118.55507660]
[208.47109985 115.21726227]
[193.84716797 111.87944794]
[183.96571350 120.21287537]
[170.89184570 121.32801056]
[159.40527344 114.59126282]
[153.83590698 102.28111267]
[139.28665161 98.63155365]
[124.73739624 94.98199463]
[121.72125244 116.41113281]
[102.23488617 129.12084961]
[98.74099731 143.70826721]
[95.40318298 158.33218384]
[92.22182465 172.99093628]
[89.04045868 187.64968872]
[85.85910034 202.30844116]
[82.67774200 216.96719360]
[79.65319824 231.65908813]
[76.78582001 246.38247681]
[73.91844177 261.10586548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 146]
[11 145]
[12 144]
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[20 138]
[21 137]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[36 96]
[37 95]
[38 94]
[39 93]
[40 92]
[41 91]
[45 87]
[46 86]
[47 85]
[48 84]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[97 135]
[98 134]
[99 133]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
