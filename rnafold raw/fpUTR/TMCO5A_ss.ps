%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUAGUUCCAGUGGAGAAAGAUUAGACUCCUCAGAAGCUAAUUGACUAGGGAAGGAUCAGGAAGACAAGACACAUCAAAAAGGGGAGGGAAUCUACAAUGGAAGGACACAAGAAAGAUCAGCUGGAUUAAGUAGUCAUGAUUAUGCAAAGCCAUAUCCAGAGACCAAGGUGUAAAGCAGGUCGGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[499.23855591 230.00929260]
[489.66687012 241.44818115]
[476.02169800 247.62226868]
[460.98745728 247.25814819]
[447.54739380 240.37451172]
[438.39166260 228.28901672]
[435.37893677 213.36637878]
[420.86376953 209.58348083]
[406.34863281 205.80058289]
[391.83346558 202.01768494]
[377.31832886 198.23478699]
[363.05114746 202.51226807]
[351.64831543 191.54475403]
[337.13317871 187.76185608]
[331.31533813 193.12882996]
[323.75793457 195.78125000]
[315.67437744 195.21430969]
[308.39410400 191.44651794]
[303.14395142 185.02894592]
[300.84155273 176.96560669]
[286.60650635 172.23658752]
[272.37145996 167.50756836]
[258.13641357 162.77856445]
[243.90138245 158.04954529]
[233.29402161 165.38223267]
[220.20477295 165.25946045]
[209.42063904 157.50183105]
[205.01470947 144.76301575]
[190.85935974 139.80052185]
[176.70402527 134.83801270]
[162.54869080 129.87551880]
[148.39335632 124.91301727]
[134.23802185 119.95051575]
[124.20432281 131.37539673]
[110.60681915 138.18061829]
[95.44759369 139.36419678]
[80.95865631 134.75186157]
[69.27333069 125.02272034]
[62.11214447 111.60926819]
[47.19778824 113.20990753]
[32.28343582 114.81054688]
[22.56080627 127.27032471]
[6.86546326 129.12283325]
[-5.49082232 119.26901245]
[-7.17728662 103.55496216]
[2.80661988 91.30355072]
[18.53762245 89.78331757]
[30.68279648 99.89619446]
[45.59714890 98.29555511]
[60.51150513 96.69491577]
[61.34634018 91.27306366]
[62.92195892 86.01845551]
[50.14203262 78.16519928]
[34.33349228 77.53226471]
[27.54078484 64.27675629]
[12.35157585 67.73011780]
[-0.49721211 59.58374786]
[-3.69585419 45.08187866]
[-16.47577858 37.22862625]
[-31.66498756 40.68198395]
[-44.51377487 32.53561783]
[-47.71241760 18.03374481]
[-64.11131287 18.12537003]
[-72.15541077 3.83465528]
[-63.56963348 -10.13733578]
[-47.18629837 -9.41741657]
[-39.85916901 5.25382137]
[-25.47658539 1.55559409]
[-12.40405178 9.33785152]
[-8.62252903 24.44870377]
[4.15739584 32.30195236]
[18.53997993 28.60372543]
[31.61251259 36.38598251]
[35.39403534 51.49683380]
[50.28847122 51.56805801]
[57.99528503 65.38527679]
[70.77520752 73.23852539]
[84.39079285 63.57723999]
[100.77703094 60.38105011]
[117.02535248 64.21729279]
[130.25164795 74.40502167]
[138.10821533 89.13590240]
[139.20051575 105.79517365]
[153.35585022 110.75767517]
[167.51119995 115.72017670]
[181.66653442 120.68267822]
[195.82186890 125.64518738]
[209.97720337 130.60768127]
[225.59179688 122.73880768]
[241.75109863 128.47645569]
[248.63040161 143.81451416]
[262.86544800 148.54351807]
[277.10049438 153.27253723]
[291.33554077 158.00154114]
[305.57055664 162.73056030]
[327.11117554 156.58488464]
[340.91607666 173.24670410]
[355.43121338 177.02960205]
[370.73663330 173.02270508]
[381.10122681 183.71963501]
[395.61636353 187.50253296]
[410.13153076 191.28543091]
[424.64666748 195.06832886]
[439.16183472 198.85122681]
[449.07479858 187.29725647]
[462.96463013 181.21781921]
[478.05487061 181.76968384]
[491.35443115 188.78984070]
[500.25042725 200.83853149]
[503.02145386 215.49414062]
[512.98065186 201.89393616]
[527.36444092 193.17491150]
[543.95642090 190.64762878]
[560.21252441 194.67109680]
[573.65112305 204.60205078]
[582.23193359 218.89767456]
[584.66552734 235.35516357]
[599.29724121 238.65859985]
[613.92895508 241.96205139]
[628.56066895 245.26548767]
[643.72601318 240.75737000]
[654.43682861 251.10762024]
[669.06854248 254.41105652]
[683.70025635 257.71450806]
[696.95935059 249.53927612]
[711.75091553 253.09786987]
[719.46307373 265.78875732]
[734.09478760 269.09219360]
[742.90075684 256.73382568]
[755.73284912 248.71002197]
[770.61907959 246.21713257]
[785.28582764 249.60432434]
[797.50524902 258.32507324]
[805.43322754 271.02514648]
[807.88824463 285.75274658]
[822.51995850 289.05618286]
[837.15167236 292.35964966]
[854.59350586 286.47964478]
[867.02001953 298.86083984]
[881.70410156 301.92318726]
[894.82696533 293.53097534]
[909.67504883 296.84579468]
[917.59490967 309.40814209]
[932.27893066 312.47048950]
[946.96301270 315.53283691]
[961.64709473 318.59515381]
[974.72961426 309.72814941]
[990.23425293 312.79092407]
[998.96246338 325.96643066]
[995.73596191 341.43786621]
[982.46887207 350.02627563]
[967.03240967 346.63635254]
[958.58477783 333.27923584]
[943.90069580 330.21688843]
[929.21661377 327.15457153]
[914.53253174 324.09222412]
[902.25158691 332.44171143]
[887.31622314 329.54522705]
[878.64178467 316.60723877]
[863.95770264 313.54492188]
[853.65899658 319.91058350]
[841.39166260 317.46734619]
[833.84820557 306.99136353]
[819.21649170 303.68792725]
[804.58477783 300.38446045]
[796.04028320 312.62869263]
[783.42480469 320.69061279]
[768.64385986 323.31542969]
[753.94451904 320.07254028]
[741.57336426 311.42568970]
[733.43341064 298.66699219]
[730.79132080 283.72393799]
[716.15960693 280.42047119]
[703.74298096 288.56686401]
[688.85729980 285.42514038]
[680.39678955 272.34622192]
[665.76507568 269.04278564]
[651.13336182 265.73934937]
[637.01458740 270.48376465]
[625.25720215 259.89721680]
[610.62548828 256.59378052]
[595.99377441 253.29032898]
[581.36206055 249.98689270]
[574.41229248 261.29907227]
[564.29461670 269.93054199]
[551.98669434 275.02877808]
[538.68359375 276.08352661]
[525.68170166 272.97784424]
[514.25244141 266.00100708]
[505.51785278 255.82148743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[7 104]
[8 103]
[9 102]
[10 101]
[11 100]
[13 98]
[14 97]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[28 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[39 50]
[40 49]
[41 48]
[52 77]
[53 76]
[55 74]
[58 71]
[59 70]
[62 67]
[117 183]
[118 182]
[119 181]
[120 180]
[122 178]
[123 177]
[124 176]
[127 173]
[128 172]
[135 165]
[136 164]
[137 163]
[139 160]
[140 159]
[143 156]
[144 155]
[145 154]
[146 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
