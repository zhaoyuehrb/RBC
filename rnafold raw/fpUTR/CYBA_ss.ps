%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGUUCGGCCGGGAGCGCAGGGGCGGCAGUGCGCGCCUAGCAGUGUCCCAGCCGGGUUCGUGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[120.81469727 355.29290771]
[120.81469727 340.29290771]
[120.81469727 325.29290771]
[120.81469727 310.29290771]
[120.81469727 295.29290771]
[113.07740021 282.56561279]
[120.81469727 268.76544189]
[119.50736237 253.82252502]
[116.90264130 239.05041504]
[114.29792023 224.27830505]
[111.69319153 209.50617981]
[109.08847046 194.73406982]
[106.48374939 179.96194458]
[96.65393066 168.77160645]
[101.87730408 153.83750916]
[99.27258301 139.06539917]
[96.66786194 124.29328156]
[94.06314087 109.52116394]
[91.13678741 94.80938721]
[87.89019012 80.16494751]
[84.32490540 65.59481812]
[80.44261932 51.10593033]
[76.24517822 36.70518112]
[71.73459625 22.39942741]
[67.22400665 8.09367371]
[55.69501877 -2.74113393]
[59.24705124 -17.20599937]
[54.73646164 -31.51175499]
[50.22587585 -45.81750870]
[36.09333420 -52.89188385]
[31.18180084 -67.91361237]
[38.40519714 -81.97057343]
[53.47801590 -86.72301483]
[67.45781708 -79.35140228]
[72.05063629 -64.22917938]
[64.53163147 -50.32809448]
[69.04222107 -36.02234268]
[73.55280304 -21.71658707]
[84.75916290 -11.90502262]
[81.52976227 3.58308625]
[86.04035187 17.88883972]
[90.55093384 32.19459534]
[95.72769928 37.79977036]
[94.93150330 47.22364426]
[98.81378937 61.71253204]
[103.74112701 67.53817749]
[102.53462982 76.91835022]
[105.78122711 91.56279755]
[110.59897614 98.36618805]
[108.83525848 106.91644287]
[111.43997955 121.68856049]
[114.04470062 136.46067810]
[116.64942169 151.23278809]
[126.66555023 163.47973633]
[121.25586700 177.35722351]
[123.86058807 192.12934875]
[126.46530914 206.90145874]
[129.07003784 221.67356873]
[131.67475891 236.44569397]
[134.27947998 251.21780396]
[137.74617004 254.95625305]
[139.43820190 259.21765137]
[139.43309021 263.29757690]
[138.05720520 266.60974121]
[135.81469727 268.76544189]
[143.55200195 282.56561279]
[135.81469727 295.29290771]
[135.81469727 310.29290771]
[135.81469727 325.29290771]
[135.81469727 340.29290771]
[135.81469727 355.29290771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[7 65]
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[13 55]
[15 53]
[16 52]
[17 51]
[18 50]
[19 48]
[20 47]
[21 45]
[22 44]
[23 42]
[24 41]
[25 40]
[27 38]
[28 37]
[29 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
